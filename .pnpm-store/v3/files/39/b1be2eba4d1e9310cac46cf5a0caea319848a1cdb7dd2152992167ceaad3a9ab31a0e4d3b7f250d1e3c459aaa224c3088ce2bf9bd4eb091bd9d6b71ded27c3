{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts","vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer.ts"],"names":[],"mappings":"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","file":"markdownRenderer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownRenderOptions, renderMarkdown } from '../../../../../base/browser/markdownRenderer.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { onUnexpectedError } from '../../../../../base/common/errors.js';\nimport { IMarkdownString, MarkdownStringTrustedOptions } from '../../../../../base/common/htmlContent.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../common/languages/modesRegistry.js';\nimport { tokenizeToString } from '../../../../common/languages/textToHtmlTokenizer.js';\nimport { applyFontInfo } from '../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../editorBrowser.js';\nimport './renderedMarkdown.css';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\treadonly element: HTMLElement;\n}\n\nexport interface IMarkdownRendererOptions {\n\treadonly editor?: ICodeEditor;\n\treadonly codeBlockFontFamily?: string;\n\treadonly codeBlockFontSize?: string;\n}\n\n/**\n * Markdown renderer that can render codeblocks with the editor mechanics. This\n * renderer should always be preferred.\n */\nexport class MarkdownRenderer {\n\n\tprivate static _ttpTokenizer = createTrustedTypesPolicy('tokenizeToString', {\n\t\tcreateHTML(html: string) {\n\t\t\treturn html;\n\t\t}\n\t});\n\n\tconstructor(\n\t\tprivate readonly _options: IMarkdownRendererOptions,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) { }\n\n\trender(markdown: IMarkdownString, options?: MarkdownRenderOptions, outElement?: HTMLElement): IMarkdownRenderResult {\n\t\tconst rendered = renderMarkdown(markdown, {\n\t\t\tcodeBlockRenderer: (alias, value) => this.renderCodeBlock(alias, value),\n\t\t\tactionHandler: (link, mdStr) => this.openMarkdownLink(link, mdStr),\n\t\t\t...options,\n\t\t}, outElement);\n\t\trendered.element.classList.add('rendered-markdown');\n\t\treturn rendered;\n\t}\n\n\tprivate async renderCodeBlock(languageAlias: string | undefined, value: string): Promise<HTMLElement> {\n\t\t// In markdown,\n\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\tlet languageId: string | undefined | null;\n\t\tif (languageAlias) {\n\t\t\tlanguageId = this._languageService.getLanguageIdByLanguageName(languageAlias);\n\t\t} else if (this._options.editor) {\n\t\t\tlanguageId = this._options.editor.getModel()?.getLanguageId();\n\t\t}\n\t\tif (!languageId) {\n\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\t\tconst html = await tokenizeToString(this._languageService, value, languageId);\n\n\t\tconst element = document.createElement('span');\n\n\t\telement.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(html) ?? html) as string;\n\n\t\t// use \"good\" font\n\t\tif (this._options.editor) {\n\t\t\tconst fontInfo = this._options.editor.getOption(EditorOption.fontInfo);\n\t\t\tapplyFontInfo(element, fontInfo);\n\t\t} else if (this._options.codeBlockFontFamily) {\n\t\t\telement.style.fontFamily = this._options.codeBlockFontFamily;\n\t\t}\n\n\t\tif (this._options.codeBlockFontSize !== undefined) {\n\t\t\telement.style.fontSize = this._options.codeBlockFontSize;\n\t\t}\n\n\t\treturn element;\n\t}\n\n\tprotected async openMarkdownLink(link: string, markdown: IMarkdownString) {\n\t\tawait openLinkFromMarkdown(this._openerService, link, markdown.isTrusted);\n\t}\n}\n\nexport async function openLinkFromMarkdown(openerService: IOpenerService, link: string, isTrusted: boolean | MarkdownStringTrustedOptions | undefined, skipValidation?: boolean): Promise<boolean> {\n\ttry {\n\t\treturn await openerService.open(link, {\n\t\t\tfromUserGesture: true,\n\t\t\tallowContributedOpeners: true,\n\t\t\tallowCommands: toAllowCommandsOption(isTrusted),\n\t\t\tskipValidation\n\t\t});\n\t} catch (e) {\n\t\tonUnexpectedError(e);\n\t\treturn false;\n\t}\n}\n\nfunction toAllowCommandsOption(isTrusted: boolean | MarkdownStringTrustedOptions | undefined): boolean | readonly string[] {\n\tif (isTrusted === true) {\n\t\treturn true; // Allow all commands\n\t}\n\n\tif (isTrusted && Array.isArray(isTrusted.enabledCommands)) {\n\t\treturn isTrusted.enabledCommands; // Allow subset of commands\n\t}\n\n\treturn false; // Block commands\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownRenderOptions, renderMarkdown } from '../../../../../base/browser/markdownRenderer.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { onUnexpectedError } from '../../../../../base/common/errors.js';\nimport { IMarkdownString, MarkdownStringTrustedOptions } from '../../../../../base/common/htmlContent.js';\nimport { IDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IOpenerService } from '../../../../../platform/opener/common/opener.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { ILanguageService } from '../../../../common/languages/language.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../../../../common/languages/modesRegistry.js';\nimport { tokenizeToString } from '../../../../common/languages/textToHtmlTokenizer.js';\nimport { applyFontInfo } from '../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../editorBrowser.js';\nimport './renderedMarkdown.css';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\treadonly element: HTMLElement;\n}\n\nexport interface IMarkdownRendererOptions {\n\treadonly editor?: ICodeEditor;\n\treadonly codeBlockFontFamily?: string;\n\treadonly codeBlockFontSize?: string;\n}\n\n/**\n * Markdown renderer that can render codeblocks with the editor mechanics. This\n * renderer should always be preferred.\n */\nexport class MarkdownRenderer {\n\n\tprivate static _ttpTokenizer = createTrustedTypesPolicy('tokenizeToString', {\n\t\tcreateHTML(html: string) {\n\t\t\treturn html;\n\t\t}\n\t});\n\n\tconstructor(\n\t\tprivate readonly _options: IMarkdownRendererOptions,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) { }\n\n\trender(markdown: IMarkdownString, options?: MarkdownRenderOptions, outElement?: HTMLElement): IMarkdownRenderResult {\n\t\tconst rendered = renderMarkdown(markdown, {\n\t\t\tcodeBlockRenderer: (alias, value) => this.renderCodeBlock(alias, value),\n\t\t\tactionHandler: (link, mdStr) => this.openMarkdownLink(link, mdStr),\n\t\t\t...options,\n\t\t}, outElement);\n\t\trendered.element.classList.add('rendered-markdown');\n\t\treturn rendered;\n\t}\n\n\tprivate async renderCodeBlock(languageAlias: string | undefined, value: string): Promise<HTMLElement> {\n\t\t// In markdown,\n\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\tlet languageId: string | undefined | null;\n\t\tif (languageAlias) {\n\t\t\tlanguageId = this._languageService.getLanguageIdByLanguageName(languageAlias);\n\t\t} else if (this._options.editor) {\n\t\t\tlanguageId = this._options.editor.getModel()?.getLanguageId();\n\t\t}\n\t\tif (!languageId) {\n\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\t\tconst html = await tokenizeToString(this._languageService, value, languageId);\n\n\t\tconst element = document.createElement('span');\n\n\t\telement.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(html) ?? html) as string;\n\n\t\t// use \"good\" font\n\t\tif (this._options.editor) {\n\t\t\tconst fontInfo = this._options.editor.getOption(EditorOption.fontInfo);\n\t\t\tapplyFontInfo(element, fontInfo);\n\t\t} else if (this._options.codeBlockFontFamily) {\n\t\t\telement.style.fontFamily = this._options.codeBlockFontFamily;\n\t\t}\n\n\t\tif (this._options.codeBlockFontSize !== undefined) {\n\t\t\telement.style.fontSize = this._options.codeBlockFontSize;\n\t\t}\n\n\t\treturn element;\n\t}\n\n\tprotected async openMarkdownLink(link: string, markdown: IMarkdownString) {\n\t\tawait openLinkFromMarkdown(this._openerService, link, markdown.isTrusted);\n\t}\n}\n\nexport async function openLinkFromMarkdown(openerService: IOpenerService, link: string, isTrusted: boolean | MarkdownStringTrustedOptions | undefined, skipValidation?: boolean): Promise<boolean> {\n\ttry {\n\t\treturn await openerService.open(link, {\n\t\t\tfromUserGesture: true,\n\t\t\tallowContributedOpeners: true,\n\t\t\tallowCommands: toAllowCommandsOption(isTrusted),\n\t\t\tskipValidation\n\t\t});\n\t} catch (e) {\n\t\tonUnexpectedError(e);\n\t\treturn false;\n\t}\n}\n\nfunction toAllowCommandsOption(isTrusted: boolean | MarkdownStringTrustedOptions | undefined): boolean | readonly string[] {\n\tif (isTrusted === true) {\n\t\treturn true; // Allow all commands\n\t}\n\n\tif (isTrusted && Array.isArray(isTrusted.enabledCommands)) {\n\t\treturn isTrusted.enabledCommands; // Allow subset of commands\n\t}\n\n\treturn false; // Block commands\n}\n"]}