{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/window/common/window.ts","vs/platform/window/common/window.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AAStE,MAAM,UAAU,oBAAoB,CAAC,oBAA2C,EAAE,aAA6B;IAC9G,IAAI,KAAK,EAAE,CAAC;QACX,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,WAAW,GAAG,iBAAiB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;IAC3E,MAAM,oBAAoB,GAAG,oBAAoB,CAAC,QAAQ,CAA8B,QAAQ,CAAC,CAAC;IAElG,IAAI,oBAAoB,EAAE,SAAS,iDAAkC,EAAE,CAAC;QACvE,mDAAmD;QACnD,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,IAAI,oBAAoB,EAAE,SAAS,iDAAkC,EAAE,CAAC;QACvE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,OAAO,WAAW,CAAC,CAAC,0CAA0C;AAC/D,CAAC;AAqBD,MAAM,UAAU,iBAAiB,CAAC,oBAA2C,EAAE,aAA6B;IAC3G,IAAI,CAAC,aAAa,EAAE,CAAC;QACpB,aAAa,GAAG,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;IACxD,CAAC;IAED,OAAO,aAAa,wCAAyB,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,oBAA2C;IAC3E,IAAI,KAAK,EAAE,CAAC;QACX,2CAA4B;IAC7B,CAAC;IAED,MAAM,aAAa,GAAG,oBAAoB,CAAC,QAAQ,CAA8B,QAAQ,CAAC,CAAC;IAC3F,IAAI,aAAa,EAAE,CAAC;QACnB,MAAM,aAAa,GAAG,WAAW,IAAI,aAAa,CAAC,UAAU,KAAK,IAAI,CAAC;QACvE,IAAI,aAAa,EAAE,CAAC;YACnB,2CAA4B,CAAC,4DAA4D;QAC1F,CAAC;QAED,MAAM,mBAAmB,GAAG,WAAW,IAAI,aAAa,CAAC,gBAAgB,KAAK,KAAK,CAAC;QACpF,IAAI,mBAAmB,EAAE,CAAC;YACzB,2CAA4B,CAAC,kHAAkH;QAChJ,CAAC;QAED,MAAM,KAAK,GAAG,aAAa,CAAC,aAAa,CAAC;QAC1C,IAAI,KAAK,wCAAyB,IAAI,KAAK,wCAAyB,EAAE,CAAC;YACtE,OAAO,KAAK,CAAC;QACd,CAAC;IACF,CAAC;IAED,2CAA4B,CAAC,8BAA8B;AAC5D,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,oBAA2C;IACjF,IAAI,KAAK,IAAI,WAAW,IAAI,gBAAgB,CAAC,oBAAoB,CAAC,wCAAyB,EAAE,CAAC;QAC7F,iDAAkC,CAAC,+DAA+D;IACnG,CAAC;IAED,MAAM,aAAa,GAAG,oBAAoB,CAAC,QAAQ,CAA8B,QAAQ,CAAC,CAAC;IAC3F,MAAM,KAAK,GAAG,aAAa,EAAE,aAAa,CAAC;IAC3C,IAAI,KAAK,8CAA+B,IAAI,KAAK,8CAA+B,EAAE,CAAC;QAClF,OAAO,KAAK,CAAC;IACd,CAAC;IAED,iDAAkC,CAAC,8BAA8B;AAClE,CAAC","file":"window.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["\nimport { isMacintosh, isWeb } from '../../../base/common/platform.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\n\nexport const enum MenuStyleConfiguration {\n\tCUSTOM = 'custom',\n\tNATIVE = 'native',\n\tINHERIT = 'inherit',\n}\n\nexport function hasNativeContextMenu(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\tif (isWeb) {\n\t\treturn false;\n\t}\n\n\tconst nativeTitle = hasNativeTitlebar(configurationService, titleBarStyle);\n\tconst windowConfigurations = configurationService.getValue<IWindowSettings | undefined>('window');\n\n\tif (windowConfigurations?.menuStyle === MenuStyleConfiguration.NATIVE) {\n\t\t// Do not support native menu with custom title bar\n\t\tif (!isMacintosh && !nativeTitle) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tif (windowConfigurations?.menuStyle === MenuStyleConfiguration.CUSTOM) {\n\t\treturn false;\n\t}\n\n\treturn nativeTitle; // Default to inherit from title bar style\n}\n\nexport interface IWindowSettings {\n\treadonly titleBarStyle: TitlebarStyle;\n\treadonly controlsStyle: WindowControlsStyle;\n\treadonly menuStyle: MenuStyleConfiguration;\n\treadonly nativeTabs: boolean;\n\treadonly nativeFullScreen: boolean;\n}\n\nexport const enum TitlebarStyle {\n\tNATIVE = 'native',\n\tCUSTOM = 'custom',\n}\n\nexport const enum WindowControlsStyle {\n\tNATIVE = 'native',\n\tCUSTOM = 'custom',\n\tHIDDEN = 'hidden'\n}\n\nexport function hasNativeTitlebar(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\tif (!titleBarStyle) {\n\t\ttitleBarStyle = getTitleBarStyle(configurationService);\n\t}\n\n\treturn titleBarStyle === TitlebarStyle.NATIVE;\n}\n\nexport function getTitleBarStyle(configurationService: IConfigurationService): TitlebarStyle {\n\tif (isWeb) {\n\t\treturn TitlebarStyle.CUSTOM;\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\tif (configuration) {\n\t\tconst useNativeTabs = isMacintosh && configuration.nativeTabs === true;\n\t\tif (useNativeTabs) {\n\t\t\treturn TitlebarStyle.NATIVE; // native tabs on sierra do not work with custom title style\n\t\t}\n\n\t\tconst useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;\n\t\tif (useSimpleFullScreen) {\n\t\t\treturn TitlebarStyle.NATIVE; // simple fullscreen does not work well with custom title style (https://github.com/microsoft/vscode/issues/63291)\n\t\t}\n\n\t\tconst style = configuration.titleBarStyle;\n\t\tif (style === TitlebarStyle.NATIVE || style === TitlebarStyle.CUSTOM) {\n\t\t\treturn style;\n\t\t}\n\t}\n\n\treturn TitlebarStyle.CUSTOM; // default to custom on all OS\n}\n\nexport function getWindowControlsStyle(configurationService: IConfigurationService): WindowControlsStyle {\n\tif (isWeb || isMacintosh || getTitleBarStyle(configurationService) === TitlebarStyle.NATIVE) {\n\t\treturn WindowControlsStyle.NATIVE; // only supported on Windows/Linux desktop with custom titlebar\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\tconst style = configuration?.controlsStyle;\n\tif (style === WindowControlsStyle.CUSTOM || style === WindowControlsStyle.HIDDEN) {\n\t\treturn style;\n\t}\n\n\treturn WindowControlsStyle.NATIVE; // default to native on all OS\n}\n","\nimport { isMacintosh, isWeb } from '../../../base/common/platform.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\n\nexport const enum MenuStyleConfiguration {\n\tCUSTOM = 'custom',\n\tNATIVE = 'native',\n\tINHERIT = 'inherit',\n}\n\nexport function hasNativeContextMenu(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\tif (isWeb) {\n\t\treturn false;\n\t}\n\n\tconst nativeTitle = hasNativeTitlebar(configurationService, titleBarStyle);\n\tconst windowConfigurations = configurationService.getValue<IWindowSettings | undefined>('window');\n\n\tif (windowConfigurations?.menuStyle === MenuStyleConfiguration.NATIVE) {\n\t\t// Do not support native menu with custom title bar\n\t\tif (!isMacintosh && !nativeTitle) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tif (windowConfigurations?.menuStyle === MenuStyleConfiguration.CUSTOM) {\n\t\treturn false;\n\t}\n\n\treturn nativeTitle; // Default to inherit from title bar style\n}\n\nexport interface IWindowSettings {\n\treadonly titleBarStyle: TitlebarStyle;\n\treadonly controlsStyle: WindowControlsStyle;\n\treadonly menuStyle: MenuStyleConfiguration;\n\treadonly nativeTabs: boolean;\n\treadonly nativeFullScreen: boolean;\n}\n\nexport const enum TitlebarStyle {\n\tNATIVE = 'native',\n\tCUSTOM = 'custom',\n}\n\nexport const enum WindowControlsStyle {\n\tNATIVE = 'native',\n\tCUSTOM = 'custom',\n\tHIDDEN = 'hidden'\n}\n\nexport function hasNativeTitlebar(configurationService: IConfigurationService, titleBarStyle?: TitlebarStyle): boolean {\n\tif (!titleBarStyle) {\n\t\ttitleBarStyle = getTitleBarStyle(configurationService);\n\t}\n\n\treturn titleBarStyle === TitlebarStyle.NATIVE;\n}\n\nexport function getTitleBarStyle(configurationService: IConfigurationService): TitlebarStyle {\n\tif (isWeb) {\n\t\treturn TitlebarStyle.CUSTOM;\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\tif (configuration) {\n\t\tconst useNativeTabs = isMacintosh && configuration.nativeTabs === true;\n\t\tif (useNativeTabs) {\n\t\t\treturn TitlebarStyle.NATIVE; // native tabs on sierra do not work with custom title style\n\t\t}\n\n\t\tconst useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;\n\t\tif (useSimpleFullScreen) {\n\t\t\treturn TitlebarStyle.NATIVE; // simple fullscreen does not work well with custom title style (https://github.com/microsoft/vscode/issues/63291)\n\t\t}\n\n\t\tconst style = configuration.titleBarStyle;\n\t\tif (style === TitlebarStyle.NATIVE || style === TitlebarStyle.CUSTOM) {\n\t\t\treturn style;\n\t\t}\n\t}\n\n\treturn TitlebarStyle.CUSTOM; // default to custom on all OS\n}\n\nexport function getWindowControlsStyle(configurationService: IConfigurationService): WindowControlsStyle {\n\tif (isWeb || isMacintosh || getTitleBarStyle(configurationService) === TitlebarStyle.NATIVE) {\n\t\treturn WindowControlsStyle.NATIVE; // only supported on Windows/Linux desktop with custom titlebar\n\t}\n\n\tconst configuration = configurationService.getValue<IWindowSettings | undefined>('window');\n\tconst style = configuration?.controlsStyle;\n\tif (style === WindowControlsStyle.CUSTOM || style === WindowControlsStyle.HIDDEN) {\n\t\treturn style;\n\t}\n\n\treturn WindowControlsStyle.NATIVE; // default to native on all OS\n}\n"]}