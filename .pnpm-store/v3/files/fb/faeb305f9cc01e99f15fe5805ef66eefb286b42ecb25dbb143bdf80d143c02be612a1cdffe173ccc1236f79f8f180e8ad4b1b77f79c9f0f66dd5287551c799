{"version":3,"sources":["vs/platform/theme/common/colors/listColors.ts"],"names":[],"mappings":"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","file":"listColors.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../../../nls.js';\n\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, darken, lighten, transparent, ifDefinedThenElse } from '../colorUtils.js';\n\n// Import the colors we need\nimport { foreground, contrastBorder, activeContrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground, editorFindMatchHighlightBorder, editorFindMatchHighlight, widgetShadow, editorWidgetForeground } from './editorColors.js';\n\n\nexport const listFocusBackground = registerColor('list.focusBackground',\n\tnull,\n\tnls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusForeground = registerColor('list.focusForeground',\n\tnull,\n\tnls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusOutline = registerColor('list.focusOutline',\n\t{ dark: focusBorder, light: focusBorder, hcDark: activeContrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('listFocusOutline', \"List/Tree outline color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listFocusAndSelectionOutline = registerColor('list.focusAndSelectionOutline',\n\tnull,\n\tnls.localize('listFocusAndSelectionOutline', \"List/Tree outline color for the focused item when the list/tree is active and selected. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionBackground = registerColor('list.activeSelectionBackground',\n\t{ dark: '#04395E', light: '#0060C0', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionForeground = registerColor('list.activeSelectionForeground',\n\t{ dark: Color.white, light: Color.white, hcDark: null, hcLight: null },\n\tnls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listActiveSelectionIconForeground = registerColor('list.activeSelectionIconForeground',\n\tnull,\n\tnls.localize('listActiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground',\n\t{ dark: '#37373D', light: '#E4E6F1', hcDark: null, hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground',\n\tnull,\n\tnls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveSelectionIconForeground = registerColor('list.inactiveSelectionIconForeground',\n\tnull,\n\tnls.localize('listInactiveSelectionIconForeground', \"List/Tree icon foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveFocusBackground = registerColor('list.inactiveFocusBackground',\n\tnull,\n\tnls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listInactiveFocusOutline = registerColor('list.inactiveFocusOutline',\n\tnull,\n\tnls.localize('listInactiveFocusOutline', \"List/Tree outline color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\n\nexport const listHoverBackground = registerColor('list.hoverBackground',\n\t{ dark: '#2A2D2E', light: '#F0F0F0', hcDark: Color.white.transparent(0.1), hcLight: Color.fromHex('#0F4A85').transparent(0.1) },\n\tnls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\n\nexport const listHoverForeground = registerColor('list.hoverForeground',\n\tnull,\n\tnls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\n\nexport const listDropOverBackground = registerColor('list.dropBackground',\n\t{ dark: '#062F4A', light: '#D6EBFF', hcDark: null, hcLight: null },\n\tnls.localize('listDropBackground', \"List/Tree drag and drop background when moving items over other items when using the mouse.\"));\n\nexport const listDropBetweenBackground = registerColor('list.dropBetweenBackground',\n\t{ dark: iconForeground, light: iconForeground, hcDark: null, hcLight: null },\n\tnls.localize('listDropBetweenBackground', \"List/Tree drag and drop border color when moving items between items when using the mouse.\"));\n\nexport const listHighlightForeground = registerColor('list.highlightForeground',\n\t{ dark: '#2AAAFF', light: '#0066BF', hcDark: focusBorder, hcLight: focusBorder },\n\tnls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\n\nexport const listFocusHighlightForeground = registerColor('list.focusHighlightForeground',\n\t{ dark: listHighlightForeground, light: ifDefinedThenElse(listActiveSelectionBackground, listHighlightForeground, '#BBE7FF'), hcDark: listHighlightForeground, hcLight: listHighlightForeground },\n\tnls.localize('listFocusHighlightForeground', 'List/Tree foreground color of the match highlights on actively focused items when searching inside the list/tree.'));\n\nexport const listInvalidItemForeground = registerColor('list.invalidItemForeground',\n\t{ dark: '#B89500', light: '#B89500', hcDark: '#B89500', hcLight: '#B5200D' },\n\tnls.localize('invalidItemForeground', 'List/Tree foreground color for invalid items, for example an unresolved root in explorer.'));\n\nexport const listErrorForeground = registerColor('list.errorForeground',\n\t{ dark: '#F88070', light: '#B01011', hcDark: null, hcLight: null }, nls.localize('listErrorForeground', 'Foreground color of list items containing errors.'));\n\nexport const listWarningForeground = registerColor('list.warningForeground',\n\t{ dark: '#CCA700', light: '#855F00', hcDark: null, hcLight: null }, nls.localize('listWarningForeground', 'Foreground color of list items containing warnings.'));\n\nexport const listFilterWidgetBackground = registerColor('listFilterWidget.background',\n\t{ light: darken(editorWidgetBackground, 0), dark: lighten(editorWidgetBackground, 0), hcDark: editorWidgetBackground, hcLight: editorWidgetBackground },\n\tnls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\n\nexport const listFilterWidgetOutline = registerColor('listFilterWidget.outline',\n\t{ dark: Color.transparent, light: Color.transparent, hcDark: '#f38518', hcLight: '#007ACC' },\n\tnls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\n\nexport const listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline',\n\t{ dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder },\n\tnls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\n\nexport const listFilterWidgetShadow = registerColor('listFilterWidget.shadow',\n\twidgetShadow,\n\tnls.localize('listFilterWidgetShadow', 'Shadow color of the type filter widget in lists and trees.'));\n\nexport const listFilterMatchHighlight = registerColor('list.filterMatchBackground',\n\t{ dark: editorFindMatchHighlight, light: editorFindMatchHighlight, hcDark: null, hcLight: null },\n\tnls.localize('listFilterMatchHighlight', 'Background color of the filtered match.'));\n\nexport const listFilterMatchHighlightBorder = registerColor('list.filterMatchBorder',\n\t{ dark: editorFindMatchHighlightBorder, light: editorFindMatchHighlightBorder, hcDark: contrastBorder, hcLight: activeContrastBorder },\n\tnls.localize('listFilterMatchHighlightBorder', 'Border color of the filtered match.'));\n\nexport const listDeemphasizedForeground = registerColor('list.deemphasizedForeground',\n\t{ dark: '#8C8C8C', light: '#8E8E90', hcDark: '#A7A8A9', hcLight: '#666666' },\n\tnls.localize('listDeemphasizedForeground', \"List/Tree foreground color for items that are deemphasized.\"));\n\n\n// ------ tree\n\nexport const treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke',\n\t{ dark: '#585858', light: '#a9a9a9', hcDark: '#a9a9a9', hcLight: '#a5a5a5' },\n\tnls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\n\nexport const treeInactiveIndentGuidesStroke = registerColor('tree.inactiveIndentGuidesStroke',\n\ttransparent(treeIndentGuidesStroke, 0.4),\n\tnls.localize('treeInactiveIndentGuidesStroke', \"Tree stroke color for the indentation guides that are not active.\"));\n\n\n// ------ table\n\nexport const tableColumnsBorder = registerColor('tree.tableColumnsBorder',\n\t{ dark: '#CCCCCC20', light: '#61616120', hcDark: null, hcLight: null },\n\tnls.localize('tableColumnsBorder', \"Table border color between columns.\"));\n\nexport const tableOddRowsBackgroundColor = registerColor('tree.tableOddRowsBackground',\n\t{ dark: transparent(foreground, 0.04), light: transparent(foreground, 0.04), hcDark: null, hcLight: null },\n\tnls.localize('tableOddRowsBackgroundColor', \"Background color for odd table rows.\"));\n\n// ------ action list\n\nexport const editorActionListBackground = registerColor('editorActionList.background',\n\teditorWidgetBackground,\n\tnls.localize('editorActionListBackground', \"Action List background color.\"));\n\nexport const editorActionListForeground = registerColor('editorActionList.foreground',\n\teditorWidgetForeground,\n\tnls.localize('editorActionListForeground', \"Action List foreground color.\"));\n\nexport const editorActionListFocusForeground = registerColor('editorActionList.focusForeground',\n\tlistActiveSelectionForeground,\n\tnls.localize('editorActionListFocusForeground', \"Action List foreground color for the focused item.\"));\n\nexport const editorActionListFocusBackground = registerColor('editorActionList.focusBackground',\n\tlistActiveSelectionBackground,\n\tnls.localize('editorActionListFocusBackground', \"Action List background color for the focused item.\"));\n"]}