{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/core/text/positionToOffsetImpl.ts","vs/editor/common/core/text/positionToOffsetImpl.ts"],"names":[],"mappings":"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","file":"positionToOffsetImpl.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLastIdxMonotonous } from '../../../../base/common/arraysFind.js';\nimport { StringEdit, StringReplacement } from '../edits/stringEdit.js';\nimport { OffsetRange } from '../ranges/offsetRange.js';\nimport { Position } from '../position.js';\nimport { Range } from '../range.js';\nimport { TextReplacement, TextEdit } from '../edits/textEdit.js';\nimport { TextLength } from '../text/textLength.js';\n\nexport abstract class PositionOffsetTransformerBase {\n\tabstract getOffset(position: Position): number;\n\n\tgetOffsetRange(range: Range): OffsetRange {\n\t\treturn new OffsetRange(\n\t\t\tthis.getOffset(range.getStartPosition()),\n\t\t\tthis.getOffset(range.getEndPosition())\n\t\t);\n\t}\n\n\tabstract getPosition(offset: number): Position;\n\n\tgetRange(offsetRange: OffsetRange): Range {\n\t\treturn Range.fromPositions(\n\t\t\tthis.getPosition(offsetRange.start),\n\t\t\tthis.getPosition(offsetRange.endExclusive)\n\t\t);\n\t}\n\n\tgetStringReplacement(edit: TextReplacement): StringReplacement {\n\t\treturn new Deps.deps.StringReplacement(this.getOffsetRange(edit.range), edit.text);\n\t}\n\n\tgetTextReplacement(edit: StringReplacement): TextReplacement {\n\t\treturn new Deps.deps.TextReplacement(this.getRange(edit.replaceRange), edit.newText);\n\t}\n\n\tgetTextEdit(edit: StringEdit): TextEdit {\n\t\tconst edits = edit.replacements.map(e => this.getTextReplacement(e));\n\t\treturn new Deps.deps.TextEdit(edits);\n\t}\n}\n\ninterface IDeps {\n\tStringEdit: typeof StringEdit;\n\tStringReplacement: typeof StringReplacement;\n\tTextReplacement: typeof TextReplacement;\n\tTextEdit: typeof TextEdit;\n\tTextLength: typeof TextLength;\n}\n\nclass Deps {\n\tstatic _deps: IDeps | undefined = undefined;\n\tstatic get deps(): IDeps {\n\t\tif (!this._deps) {\n\t\t\tthrow new Error('Dependencies not set. Call _setDependencies first.');\n\t\t}\n\t\treturn this._deps;\n\t}\n}\n\n/** This is to break circular module dependencies. */\nexport function _setPositionOffsetTransformerDependencies(deps: IDeps): void {\n\tDeps._deps = deps;\n}\n\nexport class PositionOffsetTransformer extends PositionOffsetTransformerBase {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\tprivate readonly lineEndOffsetByLineIdx: number[];\n\n\tconstructor(public readonly text: string) {\n\t\tsuper();\n\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineEndOffsetByLineIdx = [];\n\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === '\\n') {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t\tif (i > 0 && text.charAt(i - 1) === '\\r') {\n\t\t\t\t\tthis.lineEndOffsetByLineIdx.push(i - 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.lineEndOffsetByLineIdx.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.lineEndOffsetByLineIdx.push(text.length);\n\t}\n\n\toverride getOffset(position: Position): number {\n\t\tconst valPos = this._validatePosition(position);\n\t\treturn this.lineStartOffsetByLineIdx[valPos.lineNumber - 1] + valPos.column - 1;\n\t}\n\n\tprivate _validatePosition(position: Position): Position {\n\t\tif (position.lineNumber < 1) {\n\t\t\treturn new Position(1, 1);\n\t\t}\n\t\tconst lineCount = this.textLength.lineCount + 1;\n\t\tif (position.lineNumber > lineCount) {\n\t\t\tconst lineLength = this.getLineLength(lineCount);\n\t\t\treturn new Position(lineCount, lineLength + 1);\n\t\t}\n\t\tif (position.column < 1) {\n\t\t\treturn new Position(position.lineNumber, 1);\n\t\t}\n\t\tconst lineLength = this.getLineLength(position.lineNumber);\n\t\tif (position.column - 1 > lineLength) {\n\t\t\treturn new Position(position.lineNumber, lineLength + 1);\n\t\t}\n\t\treturn position;\n\t}\n\n\toverride getPosition(offset: number): Position {\n\t\tconst idx = findLastIdxMonotonous(this.lineStartOffsetByLineIdx, i => i <= offset);\n\t\tconst lineNumber = idx + 1;\n\t\tconst column = offset - this.lineStartOffsetByLineIdx[idx] + 1;\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tget textLength(): TextLength {\n\t\tconst lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n\t\treturn new Deps.deps.TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\n\t}\n\n\tgetLineLength(lineNumber: number): number {\n\t\treturn this.lineEndOffsetByLineIdx[lineNumber - 1] - this.lineStartOffsetByLineIdx[lineNumber - 1];\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findLastIdxMonotonous } from '../../../../base/common/arraysFind.js';\nimport { StringEdit, StringReplacement } from '../edits/stringEdit.js';\nimport { OffsetRange } from '../ranges/offsetRange.js';\nimport { Position } from '../position.js';\nimport { Range } from '../range.js';\nimport { TextReplacement, TextEdit } from '../edits/textEdit.js';\nimport { TextLength } from '../text/textLength.js';\n\nexport abstract class PositionOffsetTransformerBase {\n\tabstract getOffset(position: Position): number;\n\n\tgetOffsetRange(range: Range): OffsetRange {\n\t\treturn new OffsetRange(\n\t\t\tthis.getOffset(range.getStartPosition()),\n\t\t\tthis.getOffset(range.getEndPosition())\n\t\t);\n\t}\n\n\tabstract getPosition(offset: number): Position;\n\n\tgetRange(offsetRange: OffsetRange): Range {\n\t\treturn Range.fromPositions(\n\t\t\tthis.getPosition(offsetRange.start),\n\t\t\tthis.getPosition(offsetRange.endExclusive)\n\t\t);\n\t}\n\n\tgetStringReplacement(edit: TextReplacement): StringReplacement {\n\t\treturn new Deps.deps.StringReplacement(this.getOffsetRange(edit.range), edit.text);\n\t}\n\n\tgetTextReplacement(edit: StringReplacement): TextReplacement {\n\t\treturn new Deps.deps.TextReplacement(this.getRange(edit.replaceRange), edit.newText);\n\t}\n\n\tgetTextEdit(edit: StringEdit): TextEdit {\n\t\tconst edits = edit.replacements.map(e => this.getTextReplacement(e));\n\t\treturn new Deps.deps.TextEdit(edits);\n\t}\n}\n\ninterface IDeps {\n\tStringEdit: typeof StringEdit;\n\tStringReplacement: typeof StringReplacement;\n\tTextReplacement: typeof TextReplacement;\n\tTextEdit: typeof TextEdit;\n\tTextLength: typeof TextLength;\n}\n\nclass Deps {\n\tstatic _deps: IDeps | undefined = undefined;\n\tstatic get deps(): IDeps {\n\t\tif (!this._deps) {\n\t\t\tthrow new Error('Dependencies not set. Call _setDependencies first.');\n\t\t}\n\t\treturn this._deps;\n\t}\n}\n\n/** This is to break circular module dependencies. */\nexport function _setPositionOffsetTransformerDependencies(deps: IDeps): void {\n\tDeps._deps = deps;\n}\n\nexport class PositionOffsetTransformer extends PositionOffsetTransformerBase {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\tprivate readonly lineEndOffsetByLineIdx: number[];\n\n\tconstructor(public readonly text: string) {\n\t\tsuper();\n\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineEndOffsetByLineIdx = [];\n\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === '\\n') {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t\tif (i > 0 && text.charAt(i - 1) === '\\r') {\n\t\t\t\t\tthis.lineEndOffsetByLineIdx.push(i - 1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.lineEndOffsetByLineIdx.push(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.lineEndOffsetByLineIdx.push(text.length);\n\t}\n\n\toverride getOffset(position: Position): number {\n\t\tconst valPos = this._validatePosition(position);\n\t\treturn this.lineStartOffsetByLineIdx[valPos.lineNumber - 1] + valPos.column - 1;\n\t}\n\n\tprivate _validatePosition(position: Position): Position {\n\t\tif (position.lineNumber < 1) {\n\t\t\treturn new Position(1, 1);\n\t\t}\n\t\tconst lineCount = this.textLength.lineCount + 1;\n\t\tif (position.lineNumber > lineCount) {\n\t\t\tconst lineLength = this.getLineLength(lineCount);\n\t\t\treturn new Position(lineCount, lineLength + 1);\n\t\t}\n\t\tif (position.column < 1) {\n\t\t\treturn new Position(position.lineNumber, 1);\n\t\t}\n\t\tconst lineLength = this.getLineLength(position.lineNumber);\n\t\tif (position.column - 1 > lineLength) {\n\t\t\treturn new Position(position.lineNumber, lineLength + 1);\n\t\t}\n\t\treturn position;\n\t}\n\n\toverride getPosition(offset: number): Position {\n\t\tconst idx = findLastIdxMonotonous(this.lineStartOffsetByLineIdx, i => i <= offset);\n\t\tconst lineNumber = idx + 1;\n\t\tconst column = offset - this.lineStartOffsetByLineIdx[idx] + 1;\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tget textLength(): TextLength {\n\t\tconst lineIdx = this.lineStartOffsetByLineIdx.length - 1;\n\t\treturn new Deps.deps.TextLength(lineIdx, this.text.length - this.lineStartOffsetByLineIdx[lineIdx]);\n\t}\n\n\tgetLineLength(lineNumber: number): number {\n\t\treturn this.lineEndOffsetByLineIdx[lineNumber - 1] - this.lineStartOffsetByLineIdx[lineNumber - 1];\n\t}\n}\n"]}