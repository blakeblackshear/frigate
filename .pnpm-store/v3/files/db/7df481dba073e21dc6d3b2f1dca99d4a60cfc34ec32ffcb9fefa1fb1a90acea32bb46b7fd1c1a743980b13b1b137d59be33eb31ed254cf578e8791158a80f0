{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/atlas/atlas.ts","vs/editor/browser/gpu/atlas/atlas.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"atlas.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NKeyMap } from '../../../../base/common/map.js';\nimport { IBoundingBox, IRasterizedGlyph } from '../raster/raster.js';\n\n/**\n * Information about a {@link IRasterizedGlyph rasterized glyph} that has been drawn to a texture\n * atlas page.\n */\nexport interface ITextureAtlasPageGlyph {\n\t/**\n\t * The page index of the texture atlas page that the glyph was drawn to.\n\t */\n\tpageIndex: number;\n\t/**\n\t * The index of the glyph in the texture atlas page.\n\t */\n\tglyphIndex: number;\n\t/** The x coordinate of the glyph on the texture atlas page. */\n\tx: number;\n\t/** The y coordinate of the glyph on the texture atlas page. */\n\ty: number;\n\t/** The width of the glyph in pixels. */\n\tw: number;\n\t/** The height of the glyph in pixels. */\n\th: number;\n\t/** The x offset from {@link x} of the glyph's origin. */\n\toriginOffsetX: number;\n\t/** The y offset from {@link y} of the glyph's origin. */\n\toriginOffsetY: number;\n\t/**\n\t * The distance from the glyph baseline to the top of the highest bounding rectangle of all\n\t * fonts used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxAscent}\n\t */\n\tfontBoundingBoxAscent: number;\n\t/**\n\t * The distance from the glyph baseline to the bottom of the bounding rectangle of all fonts\n\t * used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxDescent}\n\t */\n\tfontBoundingBoxDescent: number;\n}\n\n/**\n * A texture atlas allocator is responsible for taking rasterized glyphs, drawing them to a texture\n * atlas page canvas and return information on the texture atlas glyph.\n */\nexport interface ITextureAtlasAllocator {\n\t/**\n\t * Allocates a rasterized glyph to the canvas, drawing it and returning information on its\n\t * position in the canvas. This will return undefined if the glyph does not fit on the canvas.\n\t */\n\tallocate(rasterizedGlyph: Readonly<IRasterizedGlyph>): Readonly<ITextureAtlasPageGlyph> | undefined;\n\t/**\n\t * Gets a usage preview of the atlas for debugging purposes.\n\t */\n\tgetUsagePreview(): Promise<Blob>;\n\t/**\n\t * Gets statistics about the allocator's current state for debugging purposes.\n\t */\n\tgetStats(): string;\n}\n\n/**\n * A texture atlas page that can be read from but not modified.\n */\nexport interface IReadableTextureAtlasPage {\n\t/**\n\t * A unique identifier for the current state of the texture atlas page. This is a number that\n\t * increments whenever a glyph is drawn to the page.\n\t */\n\treadonly version: number;\n\t/**\n\t * A bounding box representing the area of the texture atlas page that is currently in use.\n\t */\n\treadonly usedArea: Readonly<IBoundingBox>;\n\t/**\n\t * An iterator over all glyphs that have been drawn to the page. This will iterate through\n\t * glyphs in the order they have been drawn.\n\t */\n\treadonly glyphs: IterableIterator<Readonly<ITextureAtlasPageGlyph>>;\n\t/**\n\t * The source canvas for the texture atlas page.\n\t */\n\treadonly source: OffscreenCanvas;\n\t/**\n\t * Gets a usage preview of the atlas for debugging purposes.\n\t */\n\tgetUsagePreview(): Promise<Blob>;\n}\n\nexport const enum UsagePreviewColors {\n\tUnused = '#808080',\n\tUsed = '#4040FF',\n\tWasted = '#FF0000',\n\tRestricted = '#FF000088',\n}\n\nexport type GlyphMap<T> = NKeyMap<T, [\n\tchars: string,\n\ttokenMetadata: number,\n\tdecorationStyleSetId: number,\n\trasterizerCacheKey: string,\n]>;\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NKeyMap } from '../../../../base/common/map.js';\nimport { IBoundingBox, IRasterizedGlyph } from '../raster/raster.js';\n\n/**\n * Information about a {@link IRasterizedGlyph rasterized glyph} that has been drawn to a texture\n * atlas page.\n */\nexport interface ITextureAtlasPageGlyph {\n\t/**\n\t * The page index of the texture atlas page that the glyph was drawn to.\n\t */\n\tpageIndex: number;\n\t/**\n\t * The index of the glyph in the texture atlas page.\n\t */\n\tglyphIndex: number;\n\t/** The x coordinate of the glyph on the texture atlas page. */\n\tx: number;\n\t/** The y coordinate of the glyph on the texture atlas page. */\n\ty: number;\n\t/** The width of the glyph in pixels. */\n\tw: number;\n\t/** The height of the glyph in pixels. */\n\th: number;\n\t/** The x offset from {@link x} of the glyph's origin. */\n\toriginOffsetX: number;\n\t/** The y offset from {@link y} of the glyph's origin. */\n\toriginOffsetY: number;\n\t/**\n\t * The distance from the glyph baseline to the top of the highest bounding rectangle of all\n\t * fonts used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxAscent}\n\t */\n\tfontBoundingBoxAscent: number;\n\t/**\n\t * The distance from the glyph baseline to the bottom of the bounding rectangle of all fonts\n\t * used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxDescent}\n\t */\n\tfontBoundingBoxDescent: number;\n}\n\n/**\n * A texture atlas allocator is responsible for taking rasterized glyphs, drawing them to a texture\n * atlas page canvas and return information on the texture atlas glyph.\n */\nexport interface ITextureAtlasAllocator {\n\t/**\n\t * Allocates a rasterized glyph to the canvas, drawing it and returning information on its\n\t * position in the canvas. This will return undefined if the glyph does not fit on the canvas.\n\t */\n\tallocate(rasterizedGlyph: Readonly<IRasterizedGlyph>): Readonly<ITextureAtlasPageGlyph> | undefined;\n\t/**\n\t * Gets a usage preview of the atlas for debugging purposes.\n\t */\n\tgetUsagePreview(): Promise<Blob>;\n\t/**\n\t * Gets statistics about the allocator's current state for debugging purposes.\n\t */\n\tgetStats(): string;\n}\n\n/**\n * A texture atlas page that can be read from but not modified.\n */\nexport interface IReadableTextureAtlasPage {\n\t/**\n\t * A unique identifier for the current state of the texture atlas page. This is a number that\n\t * increments whenever a glyph is drawn to the page.\n\t */\n\treadonly version: number;\n\t/**\n\t * A bounding box representing the area of the texture atlas page that is currently in use.\n\t */\n\treadonly usedArea: Readonly<IBoundingBox>;\n\t/**\n\t * An iterator over all glyphs that have been drawn to the page. This will iterate through\n\t * glyphs in the order they have been drawn.\n\t */\n\treadonly glyphs: IterableIterator<Readonly<ITextureAtlasPageGlyph>>;\n\t/**\n\t * The source canvas for the texture atlas page.\n\t */\n\treadonly source: OffscreenCanvas;\n\t/**\n\t * Gets a usage preview of the atlas for debugging purposes.\n\t */\n\tgetUsagePreview(): Promise<Blob>;\n}\n\nexport const enum UsagePreviewColors {\n\tUnused = '#808080',\n\tUsed = '#4040FF',\n\tWasted = '#FF0000',\n\tRestricted = '#FF000088',\n}\n\nexport type GlyphMap<T> = NKeyMap<T, [\n\tchars: string,\n\ttokenMetadata: number,\n\tdecorationStyleSetId: number,\n\trasterizerCacheKey: string,\n]>;\n"]}