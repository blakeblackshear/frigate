{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/renderStrategy/baseRenderStrategy.ts","vs/editor/browser/gpu/renderStrategy/baseRenderStrategy.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,gBAAgB,EAAE,MAAM,qCAAqC,CAAC;AAQvE,MAAM,OAAgB,kBAAmB,SAAQ,gBAAgB;IAEhE,IAAI,eAAe,KAAK,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;IAM7D,YACoB,QAAqB,EACrB,eAA+B,EAC/B,OAAkB,EAClB,gBAA4C;QAE/D,KAAK,EAAE,CAAC;QALW,aAAQ,GAAR,QAAQ,CAAa;QACrB,oBAAe,GAAf,eAAe,CAAgB;QAC/B,YAAO,GAAP,OAAO,CAAW;QAClB,qBAAgB,GAAhB,gBAAgB,CAA4B;QAI/D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;CAKD","file":"baseRenderStrategy.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nimport { ViewportData } from '../../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { ViewLineOptions } from '../../viewParts/viewLines/viewLineOptions.js';\nimport { IGpuRenderStrategy } from '../gpu.js';\nimport { GlyphRasterizer } from '../raster/glyphRasterizer.js';\nimport { ViewGpuContext } from '../viewGpuContext.js';\n\nexport abstract class BaseRenderStrategy extends ViewEventHandler implements IGpuRenderStrategy {\n\n\tget glyphRasterizer() { return this._glyphRasterizer.value; }\n\n\tabstract type: string;\n\tabstract wgsl: string;\n\tabstract bindGroupEntries: GPUBindGroupEntry[];\n\n\tconstructor(\n\t\tprotected readonly _context: ViewContext,\n\t\tprotected readonly _viewGpuContext: ViewGpuContext,\n\t\tprotected readonly _device: GPUDevice,\n\t\tprotected readonly _glyphRasterizer: { value: GlyphRasterizer },\n\t) {\n\t\tsuper();\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tabstract reset(): void;\n\tabstract update(viewportData: ViewportData, viewLineOptions: ViewLineOptions): number;\n\tabstract draw(pass: GPURenderPassEncoder, viewportData: ViewportData): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewEventHandler } from '../../../common/viewEventHandler.js';\nimport { ViewportData } from '../../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport { ViewLineOptions } from '../../viewParts/viewLines/viewLineOptions.js';\nimport { IGpuRenderStrategy } from '../gpu.js';\nimport { GlyphRasterizer } from '../raster/glyphRasterizer.js';\nimport { ViewGpuContext } from '../viewGpuContext.js';\n\nexport abstract class BaseRenderStrategy extends ViewEventHandler implements IGpuRenderStrategy {\n\n\tget glyphRasterizer() { return this._glyphRasterizer.value; }\n\n\tabstract type: string;\n\tabstract wgsl: string;\n\tabstract bindGroupEntries: GPUBindGroupEntry[];\n\n\tconstructor(\n\t\tprotected readonly _context: ViewContext,\n\t\tprotected readonly _viewGpuContext: ViewGpuContext,\n\t\tprotected readonly _device: GPUDevice,\n\t\tprotected readonly _glyphRasterizer: { value: GlyphRasterizer },\n\t) {\n\t\tsuper();\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tabstract reset(): void;\n\tabstract update(viewportData: ViewportData, viewLineOptions: ViewLineOptions): number;\n\tabstract draw(pass: GPURenderPassEncoder, viewportData: ViewportData): void;\n}\n"]}