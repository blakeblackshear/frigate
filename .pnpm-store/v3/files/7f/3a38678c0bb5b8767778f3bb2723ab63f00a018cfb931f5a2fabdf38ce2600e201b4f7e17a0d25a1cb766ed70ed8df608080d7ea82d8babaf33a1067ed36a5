{"version":3,"file":"hls.js.map","sources":["node_modules/@svta/common-media-library/dist/utils/uuid.js","node_modules/eventemitter3/index.js","node_modules/url-toolkit/src/url-toolkit.js","src/polyfills/number.ts","src/errors.ts","src/events.ts","src/types/loader.ts","src/utils/ewma.ts","src/utils/ewma-bandwidth-estimator.ts","src/utils/logger.ts","src/utils/mediasource-helper.ts","node_modules/@svta/common-media-library/dist/utils/utf8ArrayToStr.js","src/utils/hex.ts","src/loader/load-stats.ts","src/loader/fragment.ts","src/utils/mp4-tools.ts","src/utils/codecs.ts","src/utils/mediacapabilities-helper.ts","src/types/level.ts","src/utils/hdr.ts","src/utils/safe-json-stringify.ts","src/utils/rendition-helper.ts","src/controller/abr-controller.ts","src/utils/binary-search.ts","src/controller/fragment-finders.ts","src/utils/error-helper.ts","src/controller/error-controller.ts","src/controller/fragment-tracker.ts","src/crypt/decrypter-aes-mode.ts","src/crypt/aes-crypto.ts","src/crypt/aes-decryptor.ts","src/crypt/fast-aes-key.ts","src/crypt/decrypter.ts","src/loader/fragment-loader.ts","src/task-loop.ts","src/types/transmuxer.ts","src/utils/buffer-helper.ts","src/utils/variable-substitution.ts","src/utils/attr-list.ts","src/loader/date-range.ts","src/loader/level-details.ts","src/utils/arrays.ts","src/utils/encryption-methods-util.ts","src/utils/numeric-encoding-utils.ts","src/utils/utf8-utils.ts","src/utils/keysystem-util.ts","src/utils/global.ts","src/utils/mediakeys-helper.ts","src/loader/level-key.ts","src/loader/m3u8-parser.ts","src/utils/level-helper.ts","src/utils/discontinuities.ts","src/utils/event-listener-helper.ts","src/utils/time-ranges.ts","src/controller/base-stream-controller.ts","src/demux/chunk-cache.ts","node_modules/@svta/common-media-library/dist/id3/util/isId3Footer.js","node_modules/@svta/common-media-library/dist/id3/util/isId3Header.js","node_modules/@svta/common-media-library/dist/id3/util/readId3Size.js","node_modules/@svta/common-media-library/dist/id3/getId3Data.js","src/demux/audio/adts.ts","node_modules/@svta/common-media-library/dist/id3/canParseId3.js","node_modules/@svta/common-media-library/dist/id3/util/toArrayBuffer.js","node_modules/@svta/common-media-library/dist/id3/util/utf8.js","node_modules/@svta/common-media-library/dist/id3/util/decodeId3ImageFrame.js","node_modules/@svta/common-media-library/dist/id3/util/decodeId3PrivFrame.js","node_modules/@svta/common-media-library/dist/id3/util/decodeId3TextFrame.js","node_modules/@svta/common-media-library/dist/id3/util/decodeId3UrlFrame.js","node_modules/@svta/common-media-library/dist/id3/util/decodeId3Frame.js","node_modules/@svta/common-media-library/dist/id3/util/getId3FrameData.js","node_modules/@svta/common-media-library/dist/id3/getId3Frames.js","node_modules/@svta/common-media-library/dist/id3/isId3TimestampFrame.js","node_modules/@svta/common-media-library/dist/id3/util/readId3Timestamp.js","node_modules/@svta/common-media-library/dist/id3/getId3Timestamp.js","src/types/demuxer.ts","src/demux/dummy-demuxed-track.ts","src/demux/audio/base-audio-demuxer.ts","src/demux/audio/mpegaudio.ts","src/demux/audio/aacdemuxer.ts","src/demux/audio/dolby.ts","src/demux/audio/ac3-demuxer.ts","src/demux/audio/mp3demuxer.ts","src/demux/mp4demuxer.ts","src/demux/sample-aes.ts","src/demux/video/base-video-parser.ts","src/demux/video/exp-golomb.ts","src/demux/video/avc-video-parser.ts","src/demux/video/hevc-video-parser.ts","src/demux/tsdemuxer.ts","src/remux/aac-helper.ts","src/remux/mp4-generator.ts","src/utils/timescale-conversion.ts","src/remux/mp4-remuxer.ts","src/remux/passthrough-remuxer.ts","src/demux/transmuxer.ts","src/demux/transmuxer-worker.ts","src/version.ts","src/demux/inject-worker.ts","src/demux/transmuxer-interface.ts","src/controller/audio-stream-controller.ts","src/controller/base-playlist-controller.ts","src/utils/media-option-attributes.ts","src/controller/audio-track-controller.ts","src/controller/buffer-operation-queue.ts","src/controller/buffer-controller.ts","src/controller/cap-level-controller.ts","node_modules/@svta/common-media-library/dist/cta/CmObjectType.js","node_modules/@svta/common-media-library/dist/cmcd/CmcdObjectType.js","node_modules/@svta/common-media-library/dist/cta/CmStreamingFormat.js","node_modules/@svta/common-media-library/dist/cmcd/CmcdStreamingFormat.js","node_modules/@svta/common-media-library/dist/structuredfield/SfItem.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/DICT.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/throwError.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeError.js","node_modules/@svta/common-media-library/dist/structuredfield/SfToken.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/BARE_ITEM.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/BOOLEAN.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeBoolean.js","node_modules/@svta/common-media-library/dist/utils/encodeBase64.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/BYTES.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeByteSequence.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/INTEGER.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/isInvalidInt.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeInteger.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeDate.js","node_modules/@svta/common-media-library/dist/utils/roundToEven.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/DECIMAL.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeDecimal.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/STRING.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/STRING_REGEX.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeString.js","node_modules/@svta/common-media-library/dist/cta/utils/symbolToStr.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/TOKEN.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeToken.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeBareItem.js","node_modules/@svta/common-media-library/dist/structuredfield/utils/KEY.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeKey.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeParams.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeItem.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeInnerList.js","node_modules/@svta/common-media-library/dist/structuredfield/serialize/serializeDict.js","node_modules/@svta/common-media-library/dist/structuredfield/encodeSfDict.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_OBJECT.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_REQUEST.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_SESSION.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_STATUS.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_HEADER_MAP.js","node_modules/@svta/common-media-library/dist/cmcd/CmcdHeaderField.js","node_modules/@svta/common-media-library/dist/cmcd/groupCmcdHeaders.js","node_modules/@svta/common-media-library/dist/cta/utils/isTokenField.js","node_modules/@svta/common-media-library/dist/cta/utils/isValid.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_EVENT_MODE.js","node_modules/@svta/common-media-library/dist/utils/urlToRelativePath.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_FORMATTER_MAP.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_REQUEST_MODE.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_RESPONSE_MODE.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_COMMON_KEYS.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_EVENT_KEYS.js","node_modules/@svta/common-media-library/dist/cmcd/isCmcdCustomKey.js","node_modules/@svta/common-media-library/dist/cmcd/isCmcdEventKey.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_REQUEST_KEYS.js","node_modules/@svta/common-media-library/dist/cmcd/isCmcdRequestKey.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_RESPONSE_KEYS.js","node_modules/@svta/common-media-library/dist/cmcd/isCmcdResponseKey.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_V1_KEYS.js","node_modules/@svta/common-media-library/dist/cmcd/isCmcdV1Key.js","node_modules/@svta/common-media-library/dist/cmcd/prepareCmcdData.js","node_modules/@svta/common-media-library/dist/cmcd/toCmcdHeaders.js","node_modules/@svta/common-media-library/dist/cmcd/appendCmcdHeaders.js","node_modules/@svta/common-media-library/dist/cmcd/CMCD_PARAM.js","node_modules/@svta/common-media-library/dist/cmcd/encodeCmcd.js","node_modules/@svta/common-media-library/dist/cmcd/toCmcdUrl.js","node_modules/@svta/common-media-library/dist/cmcd/toCmcdQuery.js","node_modules/@svta/common-media-library/dist/cmcd/appendCmcdQuery.js","src/controller/cmcd-controller.ts","src/controller/content-steering-controller.ts","src/controller/eme-controller.ts","src/controller/fps-controller.ts","src/utils/hash.ts","src/loader/interstitial-event.ts","src/controller/interstitial-player.ts","src/controller/interstitials-schedule.ts","src/loader/interstitial-asset-list.ts","src/controller/interstitials-controller.ts","src/controller/subtitle-stream-controller.ts","src/utils/texttrack-utils.ts","src/controller/subtitle-track-controller.ts","src/utils/cea-608-parser.ts","src/utils/vttcue.ts","src/utils/vttparser.ts","src/utils/webvtt-parser.ts","src/utils/imsc1-ttml-parser.ts","src/utils/output-filter.ts","src/controller/timeline-controller.ts","src/utils/cues.ts","src/utils/fetch-loader.ts","src/utils/xhr-loader.ts","src/config.ts","src/controller/gap-controller.ts","src/controller/id3-track-controller.ts","src/controller/latency-controller.ts","src/controller/level-controller.ts","src/is-supported.ts","src/controller/stream-controller.ts","src/loader/key-loader.ts","src/loader/playlist-loader.ts","src/hls.ts"],"sourcesContent":["/**\n * Generate a random v4 UUID\n *\n * @returns A random v4 UUID\n *\n * @group Utils\n *\n * @beta\n */\nexport function uuid() {\n    try {\n        return crypto.randomUUID();\n    }\n    catch (error) {\n        try {\n            const url = URL.createObjectURL(new Blob());\n            const uuid = url.toString();\n            URL.revokeObjectURL(url);\n            return uuid.slice(uuid.lastIndexOf('/') + 1);\n        }\n        catch (error) {\n            let dt = new Date().getTime();\n            const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n                const r = (dt + Math.random() * 16) % 16 | 0;\n                dt = Math.floor(dt / 16);\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n            });\n            return uuid;\n        }\n    }\n}\n//# sourceMappingURL=uuid.js.map","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","// see https://tools.ietf.org/html/rfc1808\n\n(function (root) {\n  var URL_REGEX =\n    /^(?=((?:[a-zA-Z0-9+\\-.]+:)?))\\1(?=((?:\\/\\/[^\\/?#]*)?))\\2(?=((?:(?:[^?#\\/]*\\/)*[^;?#\\/]*)?))\\3((?:;[^?#]*)?)(\\?[^#]*)?(#[^]*)?$/;\n  var FIRST_SEGMENT_REGEX = /^(?=([^\\/?#]*))\\1([^]*)$/;\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/)[^\\/]*(?=\\/)/g;\n\n  var URLToolkit = {\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\n    // E.g\n    // With opts.alwaysNormalize = false (default, spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\n    // With opts.alwaysNormalize = true (not spec compliant)\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\n    buildAbsoluteURL: function (baseURL, relativeURL, opts) {\n      opts = opts || {};\n      // remove any remaining space and CRLF\n      baseURL = baseURL.trim();\n      relativeURL = relativeURL.trim();\n      if (!relativeURL) {\n        // 2a) If the embedded URL is entirely empty, it inherits the\n        // entire base URL (i.e., is set equal to the base URL)\n        // and we are done.\n        if (!opts.alwaysNormalize) {\n          return baseURL;\n        }\n        var basePartsForNormalise = URLToolkit.parseURL(baseURL);\n        if (!basePartsForNormalise) {\n          throw new Error('Error trying to parse base URL.');\n        }\n        basePartsForNormalise.path = URLToolkit.normalizePath(\n          basePartsForNormalise.path\n        );\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\n      }\n      var relativeParts = URLToolkit.parseURL(relativeURL);\n      if (!relativeParts) {\n        throw new Error('Error trying to parse relative URL.');\n      }\n      if (relativeParts.scheme) {\n        // 2b) If the embedded URL starts with a scheme name, it is\n        // interpreted as an absolute URL and we are done.\n        if (!opts.alwaysNormalize) {\n          return relativeURL;\n        }\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\n        return URLToolkit.buildURLFromParts(relativeParts);\n      }\n      var baseParts = URLToolkit.parseURL(baseURL);\n      if (!baseParts) {\n        throw new Error('Error trying to parse base URL.');\n      }\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\n        baseParts.netLoc = pathParts[1];\n        baseParts.path = pathParts[2];\n      }\n      if (baseParts.netLoc && !baseParts.path) {\n        baseParts.path = '/';\n      }\n      var builtParts = {\n        // 2c) Otherwise, the embedded URL inherits the scheme of\n        // the base URL.\n        scheme: baseParts.scheme,\n        netLoc: relativeParts.netLoc,\n        path: null,\n        params: relativeParts.params,\n        query: relativeParts.query,\n        fragment: relativeParts.fragment,\n      };\n      if (!relativeParts.netLoc) {\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\n        // (if any) of the base URL.\n        builtParts.netLoc = baseParts.netLoc;\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\n        // path is not relative and we skip to Step 7.\n        if (relativeParts.path[0] !== '/') {\n          if (!relativeParts.path) {\n            // 5) If the embedded URL path is empty (and not preceded by a\n            // slash), then the embedded URL inherits the base URL path\n            builtParts.path = baseParts.path;\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\n            // step 7; otherwise, it inherits the <params> of the base\n            // URL (if any) and\n            if (!relativeParts.params) {\n              builtParts.params = baseParts.params;\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\n              // step 7; otherwise, it inherits the <query> of the base\n              // URL (if any) and we skip to step 7.\n              if (!relativeParts.query) {\n                builtParts.query = baseParts.query;\n              }\n            }\n          } else {\n            // 6) The last segment of the base URL's path (anything\n            // following the rightmost slash \"/\", or the entire path if no\n            // slash is present) is removed and the embedded URL's path is\n            // appended in its place.\n            var baseURLPath = baseParts.path;\n            var newPath =\n              baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) +\n              relativeParts.path;\n            builtParts.path = URLToolkit.normalizePath(newPath);\n          }\n        }\n      }\n      if (builtParts.path === null) {\n        builtParts.path = opts.alwaysNormalize\n          ? URLToolkit.normalizePath(relativeParts.path)\n          : relativeParts.path;\n      }\n      return URLToolkit.buildURLFromParts(builtParts);\n    },\n    parseURL: function (url) {\n      var parts = URL_REGEX.exec(url);\n      if (!parts) {\n        return null;\n      }\n      return {\n        scheme: parts[1] || '',\n        netLoc: parts[2] || '',\n        path: parts[3] || '',\n        params: parts[4] || '',\n        query: parts[5] || '',\n        fragment: parts[6] || '',\n      };\n    },\n    normalizePath: function (path) {\n      // The following operations are\n      // then applied, in order, to the new path:\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\n      // segment, are removed.\n      // 6b) If the path ends with \".\" as a complete path segment,\n      // that \".\" is removed.\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\n      // complete path segment not equal to \"..\", are removed.\n      // Removal of these path segments is performed iteratively,\n      // removing the leftmost matching pattern on each iteration,\n      // until no matching pattern remains.\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\n      // complete path segment not equal to \"..\", that\n      // \"<segment>/..\" is removed.\n      while (\n        path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length\n      ) {}\n      return path.split('').reverse().join('');\n    },\n    buildURLFromParts: function (parts) {\n      return (\n        parts.scheme +\n        parts.netLoc +\n        parts.path +\n        parts.params +\n        parts.query +\n        parts.fragment\n      );\n    },\n  };\n\n  if (typeof exports === 'object' && typeof module === 'object')\n    module.exports = URLToolkit;\n  else if (typeof define === 'function' && define.amd)\n    define([], function () {\n      return URLToolkit;\n    });\n  else if (typeof exports === 'object') exports['URLToolkit'] = URLToolkit;\n  else root['URLToolkit'] = URLToolkit;\n})(this);\n","// https://caniuse.com/mdn-javascript_builtins_number_isfinite\nexport const isFiniteNumber =\n  Number.isFinite ||\n  function (value) {\n    return typeof value === 'number' && isFinite(value);\n  };\n\n// https://caniuse.com/mdn-javascript_builtins_number_issafeinteger\nexport const isSafeInteger =\n  Number.isSafeInteger ||\n  function (value) {\n    return typeof value === 'number' && Math.abs(value) <= MAX_SAFE_INTEGER;\n  };\n\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\n","export enum ErrorTypes {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR = 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR = 'mediaError',\n  // EME (encrypted media extensions) errors\n  KEY_SYSTEM_ERROR = 'keySystemError',\n  // Identifier for a mux Error (demuxing/remuxing)\n  MUX_ERROR = 'muxError',\n  // Identifier for all other errors\n  OTHER_ERROR = 'otherError',\n}\n\nexport enum ErrorDetails {\n  KEY_SYSTEM_NO_KEYS = 'keySystemNoKeys',\n  KEY_SYSTEM_NO_ACCESS = 'keySystemNoAccess',\n  KEY_SYSTEM_NO_SESSION = 'keySystemNoSession',\n  KEY_SYSTEM_NO_CONFIGURED_LICENSE = 'keySystemNoConfiguredLicense',\n  KEY_SYSTEM_LICENSE_REQUEST_FAILED = 'keySystemLicenseRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = 'keySystemServerCertificateRequestFailed',\n  KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = 'keySystemServerCertificateUpdateFailed',\n  KEY_SYSTEM_SESSION_UPDATE_FAILED = 'keySystemSessionUpdateFailed',\n  KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = 'keySystemStatusOutputRestricted',\n  KEY_SYSTEM_STATUS_INTERNAL_ERROR = 'keySystemStatusInternalError',\n  KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR = 'keySystemDestroyMediaKeysError',\n  KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR = 'keySystemDestroyCloseSessionError',\n  KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR = 'keySystemDestroyRemoveSessionError',\n  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_ERROR = 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_TIMEOUT = 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR = 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR = 'manifestIncompatibleCodecsError',\n  // Identifier for a level which contains no fragments - data: { url: faulty URL, reason: \"no fragments found in level\", level: index of the bad level }\n  LEVEL_EMPTY_ERROR = 'levelEmptyError',\n  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_ERROR = 'levelLoadError',\n  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_TIMEOUT = 'levelLoadTimeOut',\n  // Identifier for a level parse error - data: { url : faulty URL, error: Error, reason: error message }\n  LEVEL_PARSING_ERROR = 'levelParsingError',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR = 'levelSwitchError',\n  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_ERROR = 'audioTrackLoadError',\n  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_TIMEOUT = 'audioTrackLoadTimeOut',\n  // Identifier for a subtitle track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_LOAD_ERROR = 'subtitleTrackLoadError',\n  // Identifier for a subtitle track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  SUBTITLE_TRACK_LOAD_TIMEOUT = 'subtitleTrackLoadTimeOut',\n  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  FRAG_LOAD_ERROR = 'fragLoadError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT = 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n  FRAG_DECRYPT_ERROR = 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n  FRAG_PARSING_ERROR = 'fragParsingError',\n  // Identifier for a fragment or part load skipped because of a GAP tag or attribute\n  FRAG_GAP = 'fragGap',\n  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n  REMUX_ALLOC_ERROR = 'remuxAllocError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  KEY_LOAD_ERROR = 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT = 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : { error : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR = 'bufferAddCodecError',\n  // Triggered when source buffer(s) could not be created using level (manifest CODECS attribute), parsed media, or best guess codec(s) - data: { reason : error reason }\n  BUFFER_INCOMPATIBLE_CODECS_ERROR = 'bufferIncompatibleCodecsError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR = 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR = 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR = 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR = 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE = 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL = 'bufferNudgeOnStall',\n  // Identifier for a Interstitial Asset List load error - data: { url: faulty URL, response: { code: error code, text: error text } }\n  ASSET_LIST_LOAD_ERROR = 'assetListLoadError',\n  // Identifier for a Interstitial Asset List load timeout - data: { url: faulty URL, response: { code: error code, text: error text } }\n  ASSET_LIST_LOAD_TIMEOUT = 'assetListLoadTimeout',\n  // Identifier for a Interstitial Asset List parsing error - data: { url : faulty URL, reason : error reason, response : { code: error code, text: error text }}\n  ASSET_LIST_PARSING_ERROR = 'assetListParsingError',\n  // Identifier for a Interstitial Asset List parsing error - data: { url : faulty URL, reason : error reason, response : { code: error code, text: error text }}\n  INTERSTITIAL_ASSET_ITEM_ERROR = 'interstitialAssetItemError',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION = 'internalException',\n  // Identifier for an internal call to abort a loader\n  INTERNAL_ABORTED = 'aborted',\n  // Triggered when attachMedia fails\n  ATTACH_MEDIA_ERROR = 'attachMediaError',\n  // Uncategorized error\n  UNKNOWN = 'unknown',\n}\n","import type {\n  AssetListLoadedData,\n  AssetListLoadingData,\n  AudioTrackLoadedData,\n  AudioTracksUpdatedData,\n  AudioTrackSwitchedData,\n  AudioTrackSwitchingData,\n  AudioTrackUpdatedData,\n  BackBufferData,\n  BufferAppendedData,\n  BufferAppendingData,\n  BufferCodecsData,\n  BufferCreatedData,\n  BufferEOSData,\n  BufferFlushedData,\n  BufferFlushingData,\n  CuesParsedData,\n  ErrorData,\n  FPSDropData,\n  FPSDropLevelCappingData,\n  FragBufferedData,\n  FragChangedData,\n  FragDecryptedData,\n  FragLoadedData,\n  FragLoadEmergencyAbortedData,\n  FragLoadingData,\n  FragParsedData,\n  FragParsingInitSegmentData,\n  FragParsingMetadataData,\n  FragParsingUserdataData,\n  InitPTSFoundData,\n  InterstitialAssetEndedData,\n  InterstitialAssetErrorData,\n  InterstitialAssetPlayerCreatedData,\n  InterstitialAssetStartedData,\n  InterstitialEndedData,\n  InterstitialsBufferedToBoundaryData,\n  InterstitialsPrimaryResumed,\n  InterstitialStartedData,\n  InterstitialsUpdatedData,\n  KeyLoadedData,\n  KeyLoadingData,\n  LevelLoadedData,\n  LevelLoadingData,\n  LevelPTSUpdatedData,\n  LevelsUpdatedData,\n  LevelSwitchedData,\n  LevelSwitchingData,\n  LevelUpdatedData,\n  LiveBackBufferData,\n  ManifestLoadedData,\n  ManifestLoadingData,\n  ManifestParsedData,\n  MaxAutoLevelUpdatedData,\n  MediaAttachedData,\n  MediaAttachingData,\n  MediaDetachedData,\n  MediaDetachingData,\n  MediaEndedData,\n  NonNativeTextTracksData,\n  SteeringManifestLoadedData,\n  SubtitleFragProcessedData,\n  SubtitleTrackLoadedData,\n  SubtitleTracksUpdatedData,\n  SubtitleTrackSwitchData,\n  SubtitleTrackUpdatedData,\n  TrackLoadingData,\n} from './types/events';\n\nexport enum Events {\n  // Fired before MediaSource is attaching to media element\n  MEDIA_ATTACHING = 'hlsMediaAttaching',\n  // Fired when MediaSource has been successfully attached to media element\n  MEDIA_ATTACHED = 'hlsMediaAttached',\n  // Fired before detaching MediaSource from media element\n  MEDIA_DETACHING = 'hlsMediaDetaching',\n  // Fired when MediaSource has been detached from media element\n  MEDIA_DETACHED = 'hlsMediaDetached',\n  // Fired when HTMLMediaElement dispatches \"ended\" event, or stalls at end of VOD program\n  MEDIA_ENDED = 'hlsMediaEnded',\n  // Fired after playback stall is resolved with playing, seeked, or ended event following BUFFER_STALLED_ERROR\n  STALL_RESOLVED = 'hlsStallResolved',\n  // Fired when the buffer is going to be reset\n  BUFFER_RESET = 'hlsBufferReset',\n  // Fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS = 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED = 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING = 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED = 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS = 'hlsBufferEos',\n  // fired when all buffers are full to the end of the program, after calling MediaSource.endOfStream() (unless restricted)\n  BUFFERED_TO_END = 'hlsBufferedToEnd',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING = 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED = 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING = 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks ], url : manifestURL, stats : LoaderStats }\n  MANIFEST_LOADED = 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED = 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING = 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED = 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING = 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : LoaderStats }\n  LEVEL_LOADED = 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED = 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED = 'hlsLevelPtsUpdated',\n  // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }\n  LEVELS_UPDATED = 'hlsLevelsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  AUDIO_TRACKS_UPDATED = 'hlsAudioTracksUpdated',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING = 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED = 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING = 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : LoaderStats }\n  AUDIO_TRACK_LOADED = 'hlsAudioTrackLoaded',\n  // fired when an audio tracks's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, id : track id }\n  AUDIO_TRACK_UPDATED = 'hlsAudioTrackUpdated',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED = 'hlsSubtitleTracksUpdated',\n  // fired to notify that subtitle tracks were cleared as a result of stopping the media\n  SUBTITLE_TRACKS_CLEARED = 'hlsSubtitleTracksCleared',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH = 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING = 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : LoaderStats }\n  SUBTITLE_TRACK_LOADED = 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle  racks's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, id : track id }\n  SUBTITLE_TRACK_UPDATED = 'hlsSubtitleTrackUpdated',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED = 'hlsSubtitleFragProcessed',\n  // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n  CUES_PARSED = 'hlsCuesParsed',\n  // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n  NON_NATIVE_TEXT_TRACKS_FOUND = 'hlsNonNativeTextTracksFound',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, timescale: timescale, frag : fragment object }\n  INIT_PTS_FOUND = 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING = 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  // FRAG_LOAD_PROGRESS = 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED = 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : LoaderStats }\n  FRAG_LOADED = 'hlsFragLoaded',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED = 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT = 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA = 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA = 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  // FRAG_PARSING_DATA = 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED = 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : LoaderStats }\n  FRAG_BUFFERED = 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED = 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { currentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP = 'hlsFpsDrop',\n  // triggered when FPS drop triggers auto level capping - data: { level, droppedLevel }\n  FPS_DROP_LEVEL_CAPPING = 'hlsFpsDropLevelCapping',\n  // triggered when maxAutoLevel changes - data { autoLevelCapping, levels, maxAutoLevel, minAutoLevel, maxHdcpLevel }\n  MAX_AUTO_LEVEL_UPDATED = 'hlsMaxAutoLevelUpdated',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR = 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING = 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING = 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, keyInfo : KeyLoaderInfo }\n  KEY_LOADED = 'hlsKeyLoaded',\n  // deprecated; please use BACK_BUFFER_REACHED - data : { bufferEnd: number }\n  LIVE_BACK_BUFFER_REACHED = 'hlsLiveBackBufferReached',\n  // fired when the back buffer is reached as defined by the backBufferLength config option - data : { bufferEnd: number }\n  BACK_BUFFER_REACHED = 'hlsBackBufferReached',\n  // fired after steering manifest has been loaded - data: { steeringManifest: SteeringManifest object, url: steering manifest URL }\n  STEERING_MANIFEST_LOADED = 'hlsSteeringManifestLoaded',\n  // fired when asset list has begun loading\n  ASSET_LIST_LOADING = 'hlsAssetListLoading',\n  // fired when a valid asset list is loaded\n  ASSET_LIST_LOADED = 'hlsAssetListLoaded',\n  // fired when the list of Interstitial Events and Interstitial Schedule is updated\n  INTERSTITIALS_UPDATED = 'hlsInterstitialsUpdated',\n  // fired when the buffer reaches an Interstitial Schedule boundary (both Primary segments and Interstitial Assets)\n  INTERSTITIALS_BUFFERED_TO_BOUNDARY = 'hlsInterstitialsBufferedToBoundary',\n  // fired when a player instance for an Interstitial Asset has been created\n  INTERSTITIAL_ASSET_PLAYER_CREATED = 'hlsInterstitialAssetPlayerCreated',\n  // Interstitial playback started\n  INTERSTITIAL_STARTED = 'hlsInterstitialStarted',\n  // InterstitialAsset playback started\n  INTERSTITIAL_ASSET_STARTED = 'hlsInterstitialAssetStarted',\n  // InterstitialAsset playback ended\n  INTERSTITIAL_ASSET_ENDED = 'hlsInterstitialAssetEnded',\n  // InterstitialAsset playback errored\n  INTERSTITIAL_ASSET_ERROR = 'hlsInterstitialAssetError',\n  // Interstitial playback ended\n  INTERSTITIAL_ENDED = 'hlsInterstitialEnded',\n  // Interstitial schedule resumed primary playback\n  INTERSTITIALS_PRIMARY_RESUMED = 'hlsInterstitialsPrimaryResumed',\n  // Interstitial players dispatch this event when playout limit is reached\n  PLAYOUT_LIMIT_REACHED = 'hlsPlayoutLimitReached',\n  // Event DateRange cue \"enter\" event dispatched\n  EVENT_CUE_ENTER = 'hlsEventCueEnter',\n}\n\n/**\n * Defines each Event type and payload by Event name. Used in {@link hls.js#HlsEventEmitter} to strongly type the event listener API.\n */\nexport interface HlsListeners {\n  [Events.MEDIA_ATTACHING]: (\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) => void;\n  [Events.MEDIA_ATTACHED]: (\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) => void;\n  [Events.MEDIA_DETACHING]: (\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) => void;\n  [Events.MEDIA_DETACHED]: (\n    event: Events.MEDIA_DETACHED,\n    data: MediaDetachedData,\n  ) => void;\n  [Events.MEDIA_ENDED]: (\n    event: Events.MEDIA_ENDED,\n    data: MediaEndedData,\n  ) => void;\n  [Events.STALL_RESOLVED]: (event: Events.STALL_RESOLVED, data: {}) => void;\n  [Events.BUFFER_RESET]: (event: Events.BUFFER_RESET) => void;\n  [Events.BUFFER_CODECS]: (\n    event: Events.BUFFER_CODECS,\n    data: BufferCodecsData,\n  ) => void;\n  [Events.BUFFER_CREATED]: (\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData,\n  ) => void;\n  [Events.BUFFER_APPENDING]: (\n    event: Events.BUFFER_APPENDING,\n    data: BufferAppendingData,\n  ) => void;\n  [Events.BUFFER_APPENDED]: (\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData,\n  ) => void;\n  [Events.BUFFER_EOS]: (event: Events.BUFFER_EOS, data: BufferEOSData) => void;\n  [Events.BUFFERED_TO_END]: (event: Events.BUFFERED_TO_END) => void;\n  [Events.BUFFER_FLUSHING]: (\n    event: Events.BUFFER_FLUSHING,\n    data: BufferFlushingData,\n  ) => void;\n  [Events.BUFFER_FLUSHED]: (\n    event: Events.BUFFER_FLUSHED,\n    data: BufferFlushedData,\n  ) => void;\n  [Events.MANIFEST_LOADING]: (\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData,\n  ) => void;\n  [Events.MANIFEST_LOADED]: (\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ) => void;\n  [Events.MANIFEST_PARSED]: (\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) => void;\n  [Events.LEVEL_SWITCHING]: (\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData,\n  ) => void;\n  [Events.LEVEL_SWITCHED]: (\n    event: Events.LEVEL_SWITCHED,\n    data: LevelSwitchedData,\n  ) => void;\n  [Events.LEVEL_LOADING]: (\n    event: Events.LEVEL_LOADING,\n    data: LevelLoadingData,\n  ) => void;\n  [Events.LEVEL_LOADED]: (\n    event: Events.LEVEL_LOADED,\n    data: LevelLoadedData,\n  ) => void;\n  [Events.LEVEL_UPDATED]: (\n    event: Events.LEVEL_UPDATED,\n    data: LevelUpdatedData,\n  ) => void;\n  [Events.LEVEL_PTS_UPDATED]: (\n    event: Events.LEVEL_PTS_UPDATED,\n    data: LevelPTSUpdatedData,\n  ) => void;\n  [Events.LEVELS_UPDATED]: (\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData,\n  ) => void;\n  [Events.AUDIO_TRACKS_UPDATED]: (\n    event: Events.AUDIO_TRACKS_UPDATED,\n    data: AudioTracksUpdatedData,\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHING]: (\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData,\n  ) => void;\n  [Events.AUDIO_TRACK_SWITCHED]: (\n    event: Events.AUDIO_TRACK_SWITCHED,\n    data: AudioTrackSwitchedData,\n  ) => void;\n  [Events.AUDIO_TRACK_LOADING]: (\n    event: Events.AUDIO_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) => void;\n  [Events.AUDIO_TRACK_LOADED]: (\n    event: Events.AUDIO_TRACK_LOADED,\n    data: AudioTrackLoadedData,\n  ) => void;\n  [Events.AUDIO_TRACK_UPDATED]: (\n    event: Events.AUDIO_TRACK_UPDATED,\n    data: AudioTrackUpdatedData,\n  ) => void;\n  [Events.SUBTITLE_TRACKS_UPDATED]: (\n    event: Events.SUBTITLE_TRACKS_UPDATED,\n    data: SubtitleTracksUpdatedData,\n  ) => void;\n  [Events.SUBTITLE_TRACKS_CLEARED]: (\n    event: Events.SUBTITLE_TRACKS_CLEARED,\n  ) => void;\n  [Events.SUBTITLE_TRACK_SWITCH]: (\n    event: Events.SUBTITLE_TRACK_SWITCH,\n    data: SubtitleTrackSwitchData,\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADING]: (\n    event: Events.SUBTITLE_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) => void;\n  [Events.SUBTITLE_TRACK_LOADED]: (\n    event: Events.SUBTITLE_TRACK_LOADED,\n    data: SubtitleTrackLoadedData,\n  ) => void;\n  [Events.SUBTITLE_TRACK_UPDATED]: (\n    event: Events.SUBTITLE_TRACK_UPDATED,\n    data: SubtitleTrackUpdatedData,\n  ) => void;\n  [Events.SUBTITLE_FRAG_PROCESSED]: (\n    event: Events.SUBTITLE_FRAG_PROCESSED,\n    data: SubtitleFragProcessedData,\n  ) => void;\n  [Events.CUES_PARSED]: (\n    event: Events.CUES_PARSED,\n    data: CuesParsedData,\n  ) => void;\n  [Events.NON_NATIVE_TEXT_TRACKS_FOUND]: (\n    event: Events.NON_NATIVE_TEXT_TRACKS_FOUND,\n    data: NonNativeTextTracksData,\n  ) => void;\n  [Events.INIT_PTS_FOUND]: (\n    event: Events.INIT_PTS_FOUND,\n    data: InitPTSFoundData,\n  ) => void;\n  [Events.FRAG_LOADING]: (\n    event: Events.FRAG_LOADING,\n    data: FragLoadingData,\n  ) => void;\n  // [Events.FRAG_LOAD_PROGRESS]: TodoEventType\n  [Events.FRAG_LOAD_EMERGENCY_ABORTED]: (\n    event: Events.FRAG_LOAD_EMERGENCY_ABORTED,\n    data: FragLoadEmergencyAbortedData,\n  ) => void;\n  [Events.FRAG_LOADED]: (\n    event: Events.FRAG_LOADED,\n    data: FragLoadedData,\n  ) => void;\n  [Events.FRAG_DECRYPTED]: (\n    event: Events.FRAG_DECRYPTED,\n    data: FragDecryptedData,\n  ) => void;\n  [Events.FRAG_PARSING_INIT_SEGMENT]: (\n    event: Events.FRAG_PARSING_INIT_SEGMENT,\n    data: FragParsingInitSegmentData,\n  ) => void;\n  [Events.FRAG_PARSING_USERDATA]: (\n    event: Events.FRAG_PARSING_USERDATA,\n    data: FragParsingUserdataData,\n  ) => void;\n  [Events.FRAG_PARSING_METADATA]: (\n    event: Events.FRAG_PARSING_METADATA,\n    data: FragParsingMetadataData,\n  ) => void;\n  // [Events.FRAG_PARSING_DATA]: TodoEventType\n  [Events.FRAG_PARSED]: (\n    event: Events.FRAG_PARSED,\n    data: FragParsedData,\n  ) => void;\n  [Events.FRAG_BUFFERED]: (\n    event: Events.FRAG_BUFFERED,\n    data: FragBufferedData,\n  ) => void;\n  [Events.FRAG_CHANGED]: (\n    event: Events.FRAG_CHANGED,\n    data: FragChangedData,\n  ) => void;\n  [Events.FPS_DROP]: (event: Events.FPS_DROP, data: FPSDropData) => void;\n  [Events.FPS_DROP_LEVEL_CAPPING]: (\n    event: Events.FPS_DROP_LEVEL_CAPPING,\n    data: FPSDropLevelCappingData,\n  ) => void;\n  [Events.MAX_AUTO_LEVEL_UPDATED]: (\n    event: Events.MAX_AUTO_LEVEL_UPDATED,\n    data: MaxAutoLevelUpdatedData,\n  ) => void;\n  [Events.ERROR]: (event: Events.ERROR, data: ErrorData) => void;\n  [Events.DESTROYING]: (event: Events.DESTROYING) => void;\n  [Events.KEY_LOADING]: (\n    event: Events.KEY_LOADING,\n    data: KeyLoadingData,\n  ) => void;\n  [Events.KEY_LOADED]: (event: Events.KEY_LOADED, data: KeyLoadedData) => void;\n  [Events.LIVE_BACK_BUFFER_REACHED]: (\n    event: Events.LIVE_BACK_BUFFER_REACHED,\n    data: LiveBackBufferData,\n  ) => void;\n  [Events.BACK_BUFFER_REACHED]: (\n    event: Events.BACK_BUFFER_REACHED,\n    data: BackBufferData,\n  ) => void;\n  [Events.STEERING_MANIFEST_LOADED]: (\n    event: Events.STEERING_MANIFEST_LOADED,\n    data: SteeringManifestLoadedData,\n  ) => void;\n  [Events.ASSET_LIST_LOADING]: (\n    event: Events.ASSET_LIST_LOADING,\n    data: AssetListLoadingData,\n  ) => void;\n  [Events.ASSET_LIST_LOADED]: (\n    event: Events.ASSET_LIST_LOADED,\n    data: AssetListLoadedData,\n  ) => void;\n  [Events.INTERSTITIALS_UPDATED]: (\n    event: Events.INTERSTITIALS_UPDATED,\n    data: InterstitialsUpdatedData,\n  ) => void;\n  [Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY]: (\n    event: Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY,\n    data: InterstitialsBufferedToBoundaryData,\n  ) => void;\n  [Events.INTERSTITIAL_ASSET_PLAYER_CREATED]: (\n    event: Events.INTERSTITIAL_ASSET_PLAYER_CREATED,\n    data: InterstitialAssetPlayerCreatedData,\n  ) => void;\n  [Events.INTERSTITIAL_STARTED]: (\n    event: Events.INTERSTITIAL_STARTED,\n    data: InterstitialStartedData,\n  ) => void;\n  [Events.INTERSTITIAL_ASSET_STARTED]: (\n    event: Events.INTERSTITIAL_ASSET_STARTED,\n    data: InterstitialAssetStartedData,\n  ) => void;\n  [Events.INTERSTITIAL_ASSET_ENDED]: (\n    event: Events.INTERSTITIAL_ASSET_ENDED,\n    data: InterstitialAssetEndedData,\n  ) => void;\n  [Events.INTERSTITIAL_ASSET_ERROR]: (\n    event: Events.INTERSTITIAL_ASSET_ERROR,\n    data: InterstitialAssetErrorData,\n  ) => void;\n  [Events.INTERSTITIAL_ENDED]: (\n    event: Events.INTERSTITIAL_ENDED,\n    data: InterstitialEndedData,\n  ) => void;\n  [Events.INTERSTITIALS_PRIMARY_RESUMED]: (\n    event: Events.INTERSTITIALS_PRIMARY_RESUMED,\n    data: InterstitialsPrimaryResumed,\n  ) => void;\n  [Events.PLAYOUT_LIMIT_REACHED]: (\n    event: Events.PLAYOUT_LIMIT_REACHED,\n    data: {},\n  ) => void;\n  [Events.EVENT_CUE_ENTER]: (event: Events.EVENT_CUE_ENTER, data: {}) => void;\n}\nexport interface HlsEventEmitter {\n  on<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ): void;\n  once<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ): void;\n\n  removeAllListeners<E extends keyof HlsListeners>(event?: E): void;\n  off<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener?: HlsListeners[E],\n    context?: Context,\n    once?: boolean,\n  ): void;\n\n  listeners<E extends keyof HlsListeners>(event: E): HlsListeners[E][];\n  emit<E extends keyof HlsListeners>(\n    event: E,\n    name: E,\n    eventObject: Parameters<HlsListeners[E]>[1],\n  ): boolean;\n  listenerCount<E extends keyof HlsListeners>(event: E): number;\n}\n","import type { LoaderConfig } from '../config';\nimport type { HlsUrlParameters, Level } from './level';\nimport type { MediaPlaylist } from './media-playlist';\nimport type { Fragment } from '../loader/fragment';\nimport type { Part } from '../loader/fragment';\nimport type { KeyLoaderInfo } from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\n\nexport interface LoaderContext {\n  // target URL\n  url: string;\n  // loader response type (arraybuffer or default response type for playlist)\n  responseType: string;\n  // headers\n  headers?: Record<string, string>;\n  // start byte range offset\n  rangeStart?: number;\n  // end byte range offset\n  rangeEnd?: number;\n  // true if onProgress should report partial chunk of loaded content\n  progressData?: boolean;\n}\n\nexport interface FragmentLoaderContext extends LoaderContext {\n  frag: Fragment;\n  part: Part | null;\n  resetIV?: boolean;\n}\n\nexport interface KeyLoaderContext extends LoaderContext {\n  keyInfo: KeyLoaderInfo;\n  frag: Fragment;\n}\n\nexport interface LoaderConfiguration {\n  // LoaderConfig policy that overrides required settings\n  loadPolicy: LoaderConfig;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxNumRetry\n   */\n  // Max number of load retries\n  maxRetry: number;\n  /**\n   * @deprecated use LoaderConfig maxTimeToFirstByteMs and maxLoadTimeMs\n   */\n  // Timeout after which `onTimeOut` callback will be triggered\n  //  when loading has not finished after that delay\n  timeout: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry retryDelayMs\n   */\n  // Delay between an I/O error and following connection retry (ms).\n  // This to avoid spamming the server\n  retryDelay: number;\n  /**\n   * @deprecated use LoaderConfig timeoutRetry and errorRetry maxRetryDelayMs\n   */\n  // max connection retry delay (ms)\n  maxRetryDelay: number;\n  // When streaming progressively, this is the minimum chunk size required to emit a PROGRESS event\n  highWaterMark?: number;\n}\n\nexport interface LoaderResponse {\n  url: string;\n  data?: string | ArrayBuffer | Object;\n  // Errors can include HTTP status code and error message\n  // Successful responses should include status code 200\n  code?: number;\n  text?: string;\n}\n\nexport interface LoaderStats {\n  aborted: boolean;\n  loaded: number;\n  retry: number;\n  total: number;\n  chunkCount: number;\n  bwEstimate: number;\n  loading: HlsProgressivePerformanceTiming;\n  parsing: HlsPerformanceTiming;\n  buffering: HlsProgressivePerformanceTiming;\n}\n\nexport interface HlsPerformanceTiming {\n  start: number;\n  end: number;\n}\n\nexport interface HlsChunkPerformanceTiming extends HlsPerformanceTiming {\n  executeStart: number;\n  executeEnd: number;\n}\n\nexport interface HlsProgressivePerformanceTiming extends HlsPerformanceTiming {\n  first: number;\n}\n\nexport type LoaderOnSuccess<T extends LoaderContext> = (\n  response: LoaderResponse,\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnProgress<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  data: string | ArrayBuffer,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnError<T extends LoaderContext> = (\n  error: {\n    // error status code\n    code: number;\n    // error description\n    text: string;\n  },\n  context: T,\n  networkDetails: any,\n  stats: LoaderStats,\n) => void;\n\nexport type LoaderOnTimeout<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport type LoaderOnAbort<T extends LoaderContext> = (\n  stats: LoaderStats,\n  context: T,\n  networkDetails: any,\n) => void;\n\nexport interface LoaderCallbacks<T extends LoaderContext> {\n  onSuccess: LoaderOnSuccess<T>;\n  onError: LoaderOnError<T>;\n  onTimeout: LoaderOnTimeout<T>;\n  onAbort?: LoaderOnAbort<T>;\n  onProgress?: LoaderOnProgress<T>;\n}\n\nexport interface Loader<T extends LoaderContext> {\n  destroy(): void;\n  abort(): void;\n  load(\n    context: T,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<T>,\n  ): void;\n  /**\n   * `getCacheAge()` is called by hls.js to get the duration that a given object\n   * has been sitting in a cache proxy when playing live.  If implemented,\n   * this should return a value in seconds.\n   *\n   * For HTTP based loaders, this should return the contents of the \"age\" header.\n   *\n   * @returns time object being lodaded\n   */\n  getCacheAge?: () => number | null;\n  getResponseHeader?: (name: string) => string | null;\n  context: T | null;\n  stats: LoaderStats;\n}\n\nexport const enum PlaylistContextType {\n  MANIFEST = 'manifest',\n  LEVEL = 'level',\n  AUDIO_TRACK = 'audioTrack',\n  SUBTITLE_TRACK = 'subtitleTrack',\n}\n\nexport const enum PlaylistLevelType {\n  MAIN = 'main',\n  AUDIO = 'audio',\n  SUBTITLE = 'subtitle',\n}\n\nexport interface PlaylistLoaderContext extends LoaderContext {\n  type: PlaylistContextType;\n  // the level index to load\n  level: number | null;\n  // level or track id from LevelLoadingData / TrackLoadingData\n  id: number | null;\n  // Media Playlist Group ID\n  groupId?: string;\n  // Content Steering Pathway ID (or undefined for default Pathway \".\")\n  pathwayId?: string;\n  // internal representation of a parsed m3u8 level playlist\n  levelDetails?: LevelDetails;\n  // Blocking playlist request delivery directives (or null id none were added to playlist url\n  deliveryDirectives: HlsUrlParameters | null;\n  // Reference to level or track object in hls.levels, hls.allAudioTracks, or hls.allSubtitleTracks (null when loading MVP)\n  levelOrTrack: Level | MediaPlaylist | null;\n}\n","/*\n * compute an Exponential Weighted moving average\n * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n *  - heavily inspired from shaka-player\n */\n\nclass EWMA {\n  public readonly halfLife: number;\n  private alpha_: number;\n  private estimate_: number;\n  private totalWeight_: number;\n\n  //  About half of the estimated value will be from the last |halfLife| samples by weight.\n  constructor(halfLife: number, estimate: number = 0, weight: number = 0) {\n    this.halfLife = halfLife;\n    // Larger values of alpha expire historical data more slowly.\n    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n    this.estimate_ = estimate;\n    this.totalWeight_ = weight;\n  }\n\n  sample(weight: number, value: number) {\n    const adjAlpha = Math.pow(this.alpha_, weight);\n    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n    this.totalWeight_ += weight;\n  }\n\n  getTotalWeight(): number {\n    return this.totalWeight_;\n  }\n\n  getEstimate(): number {\n    if (this.alpha_) {\n      const zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n      if (zeroFactor) {\n        return this.estimate_ / zeroFactor;\n      }\n    }\n    return this.estimate_;\n  }\n}\n\nexport default EWMA;\n","/*\n * EWMA Bandwidth Estimator\n *  - heavily inspired from shaka-player\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n */\n\nimport EWMA from '../utils/ewma';\n\nclass EwmaBandWidthEstimator {\n  private defaultEstimate_: number;\n  private minWeight_: number;\n  private minDelayMs_: number;\n  private slow_: EWMA;\n  private fast_: EWMA;\n  private defaultTTFB_: number;\n  private ttfb_: EWMA;\n\n  constructor(\n    slow: number,\n    fast: number,\n    defaultEstimate: number,\n    defaultTTFB: number = 100,\n  ) {\n    this.defaultEstimate_ = defaultEstimate;\n    this.minWeight_ = 0.001;\n    this.minDelayMs_ = 50;\n    this.slow_ = new EWMA(slow);\n    this.fast_ = new EWMA(fast);\n    this.defaultTTFB_ = defaultTTFB;\n    this.ttfb_ = new EWMA(slow);\n  }\n\n  update(slow: number, fast: number) {\n    const { slow_, fast_, ttfb_ } = this;\n    if (slow_.halfLife !== slow) {\n      this.slow_ = new EWMA(slow, slow_.getEstimate(), slow_.getTotalWeight());\n    }\n    if (fast_.halfLife !== fast) {\n      this.fast_ = new EWMA(fast, fast_.getEstimate(), fast_.getTotalWeight());\n    }\n    if (ttfb_.halfLife !== slow) {\n      this.ttfb_ = new EWMA(slow, ttfb_.getEstimate(), ttfb_.getTotalWeight());\n    }\n  }\n\n  sample(durationMs: number, numBytes: number) {\n    durationMs = Math.max(durationMs, this.minDelayMs_);\n    const numBits = 8 * numBytes;\n    // weight is duration in seconds\n    const durationS = durationMs / 1000;\n    // value is bandwidth in bits/s\n    const bandwidthInBps = numBits / durationS;\n    this.fast_.sample(durationS, bandwidthInBps);\n    this.slow_.sample(durationS, bandwidthInBps);\n  }\n\n  sampleTTFB(ttfb: number) {\n    // weight is frequency curve applied to TTFB in seconds\n    // (longer times have less weight with expected input under 1 second)\n    const seconds = ttfb / 1000;\n    const weight = Math.sqrt(2) * Math.exp(-Math.pow(seconds, 2) / 2);\n    this.ttfb_.sample(weight, Math.max(ttfb, 5));\n  }\n\n  canEstimate(): boolean {\n    return this.fast_.getTotalWeight() >= this.minWeight_;\n  }\n\n  getEstimate(): number {\n    if (this.canEstimate()) {\n      // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n      // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n      // Take the minimum of these two estimates.  This should have the effect of\n      // adapting down quickly, but up more slowly.\n      return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());\n    } else {\n      return this.defaultEstimate_;\n    }\n  }\n\n  getEstimateTTFB(): number {\n    if (this.ttfb_.getTotalWeight() >= this.minWeight_) {\n      return this.ttfb_.getEstimate();\n    } else {\n      return this.defaultTTFB_;\n    }\n  }\n\n  get defaultEstimate(): number {\n    return this.defaultEstimate_;\n  }\n\n  destroy() {}\n}\nexport default EwmaBandWidthEstimator;\n","export interface ILogFunction {\n  (message?: any, ...optionalParams: any[]): void;\n}\n\nexport interface ILogger {\n  trace: ILogFunction;\n  debug: ILogFunction;\n  log: ILogFunction;\n  warn: ILogFunction;\n  info: ILogFunction;\n  error: ILogFunction;\n}\n\nexport class Logger implements ILogger {\n  trace: ILogFunction;\n  debug: ILogFunction;\n  log: ILogFunction;\n  warn: ILogFunction;\n  info: ILogFunction;\n  error: ILogFunction;\n\n  constructor(label: string, logger: ILogger) {\n    const lb = `[${label}]:`;\n    this.trace = noop;\n    this.debug = logger.debug.bind(null, lb);\n    this.log = logger.log.bind(null, lb);\n    this.warn = logger.warn.bind(null, lb);\n    this.info = logger.info.bind(null, lb);\n    this.error = logger.error.bind(null, lb);\n  }\n}\n\nconst noop: ILogFunction = function () {};\n\nconst fakeLogger: ILogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop,\n};\n\nfunction createLogger() {\n  return Object.assign({}, fakeLogger);\n}\n\n// let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction consolePrintFn(type: string, id: string | undefined): ILogFunction {\n  const func: ILogFunction = self.console[type];\n  return func\n    ? func.bind(self.console, `${id ? '[' + id + '] ' : ''}[${type}] >`)\n    : noop;\n}\n\nfunction getLoggerFn(\n  key: string,\n  debugConfig: boolean | Partial<ILogger>,\n  id?: string,\n): ILogFunction {\n  return debugConfig[key]\n    ? debugConfig[key].bind(debugConfig)\n    : consolePrintFn(key, id);\n}\n\nconst exportedLogger: ILogger = createLogger();\n\nexport function enableLogs(\n  debugConfig: boolean | ILogger,\n  context: string,\n  id?: string | undefined,\n): ILogger {\n  // check that console is available\n  const newLogger = createLogger();\n  if (\n    (typeof console === 'object' && debugConfig === true) ||\n    typeof debugConfig === 'object'\n  ) {\n    const keys: (keyof ILogger)[] = [\n      // Remove out from list here to hard-disable a log-level\n      // 'trace',\n      'debug',\n      'log',\n      'info',\n      'warn',\n      'error',\n    ];\n    keys.forEach((key) => {\n      newLogger[key] = getLoggerFn(key, debugConfig, id);\n    });\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n      newLogger.log(\n        `Debug logs enabled for \"${context}\" in hls.js version ${__VERSION__}`,\n      );\n    } catch (e) {\n      /* log fn threw an exception. All logger methods are no-ops. */\n      return createLogger();\n    }\n    // global exported logger uses the same functions as new logger without `id`\n    keys.forEach((key) => {\n      exportedLogger[key] = getLoggerFn(key, debugConfig);\n    });\n  } else {\n    // Reset global exported logger\n    Object.assign(exportedLogger, newLogger);\n  }\n  return newLogger;\n}\n\nexport const logger: ILogger = exportedLogger;\n","import type { BaseTrackSet } from '../types/buffer';\n\nexport function getMediaSource(\n  preferManagedMediaSource = true,\n): typeof MediaSource | undefined {\n  if (typeof self === 'undefined') return undefined;\n  const mms =\n    (preferManagedMediaSource || !self.MediaSource) &&\n    ((self as any).ManagedMediaSource as undefined | typeof MediaSource);\n  return (\n    mms ||\n    self.MediaSource ||\n    ((self as any).WebKitMediaSource as typeof MediaSource)\n  );\n}\n\nexport function isManagedMediaSource(source: typeof MediaSource | undefined) {\n  return (\n    typeof self !== 'undefined' && source === (self as any).ManagedMediaSource\n  );\n}\n\nexport function isCompatibleTrackChange(\n  currentTracks: BaseTrackSet,\n  requiredTracks: BaseTrackSet,\n): boolean {\n  const trackNames = Object.keys(currentTracks);\n  const requiredTrackNames = Object.keys(requiredTracks);\n  const trackCount = trackNames.length;\n  const requiredTrackCount = requiredTrackNames.length;\n  return (\n    !trackCount ||\n    !requiredTrackCount ||\n    (trackCount === requiredTrackCount &&\n      !trackNames.some((name) => requiredTrackNames.indexOf(name) === -1))\n  );\n}\n","// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\n/**\n * Converts a UTF-8 array to a string.\n *\n * @param array - The UTF-8 array to convert\n *\n * @returns The string\n *\n * @group Utils\n *\n * @beta\n */\nexport function utf8ArrayToStr(array, exitOnNull = false) {\n    if (typeof TextDecoder !== 'undefined') {\n        const decoder = new TextDecoder('utf-8');\n        const decoded = decoder.decode(array);\n        if (exitOnNull) {\n            // grab up to the first null\n            const idx = decoded.indexOf('\\0');\n            return idx !== -1 ? decoded.substring(0, idx) : decoded;\n        }\n        // remove any null characters\n        return decoded.replace(/\\0/g, '');\n    }\n    const len = array.length;\n    let c;\n    let char2;\n    let char3;\n    let out = '';\n    let i = 0;\n    while (i < len) {\n        c = array[i++];\n        if (c === 0x00 && exitOnNull) {\n            return out;\n        }\n        else if (c === 0x00 || c === 0x03) {\n            // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it\n            continue;\n        }\n        switch (c >> 4) {\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 7:\n                // 0xxxxxxx\n                out += String.fromCharCode(c);\n                break;\n            case 12:\n            case 13:\n                // 110x xxxx   10xx xxxx\n                char2 = array[i++];\n                out += String.fromCharCode(((c & 0x1f) << 6) | (char2 & 0x3f));\n                break;\n            case 14:\n                // 1110 xxxx  10xx xxxx  10xx xxxx\n                char2 = array[i++];\n                char3 = array[i++];\n                out += String.fromCharCode(((c & 0x0f) << 12) | ((char2 & 0x3f) << 6) | ((char3 & 0x3f) << 0));\n                break;\n            default:\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=utf8ArrayToStr.js.map","/**\n *  hex dump helper class\n */\n\nexport function arrayToHex(array: Uint8Array<ArrayBuffer> | number[]) {\n  let str = '';\n  for (let i = 0; i < array.length; i++) {\n    let h = array[i].toString(16);\n    if (h.length < 2) {\n      h = '0' + h;\n    }\n\n    str += h;\n  }\n  return str;\n}\n\nexport function hexToArrayBuffer(str: string): ArrayBuffer {\n  return Uint8Array.from(\n    str\n      .replace(/^0x/, '')\n      .replace(/([\\da-fA-F]{2}) ?/g, '0x$1 ')\n      .replace(/ +$/, '')\n      .split(' '),\n  ).buffer;\n}\n\nconst Hex = {\n  hexDump: arrayToHex,\n};\n\nexport default Hex;\n","import type {\n  HlsPerformanceTiming,\n  HlsProgressivePerformanceTiming,\n  LoaderStats,\n} from '../types/loader';\n\nexport class LoadStats implements LoaderStats {\n  aborted: boolean = false;\n  loaded: number = 0;\n  retry: number = 0;\n  total: number = 0;\n  chunkCount: number = 0;\n  bwEstimate: number = 0;\n  loading: HlsProgressivePerformanceTiming = { start: 0, first: 0, end: 0 };\n  parsing: HlsPerformanceTiming = { start: 0, end: 0 };\n  buffering: HlsProgressivePerformanceTiming = { start: 0, first: 0, end: 0 };\n}\n","import { buildAbsoluteURL } from 'url-toolkit';\nimport { LoadStats } from './load-stats';\nimport type { LevelKey } from './level-key';\nimport type {\n  FragmentLoaderContext,\n  KeyLoaderContext,\n  Loader,\n  PlaylistLevelType,\n} from '../types/loader';\nimport type { AttrList } from '../utils/attr-list';\nimport type { KeySystemFormats } from '../utils/mediakeys-helper';\n\nexport const enum ElementaryStreamTypes {\n  AUDIO = 'audio',\n  VIDEO = 'video',\n  AUDIOVIDEO = 'audiovideo',\n}\n\nexport interface ElementaryStreamInfo {\n  startPTS: number;\n  endPTS: number;\n  startDTS: number;\n  endDTS: number;\n  partial?: boolean;\n}\n\nexport type ElementaryStreams = Record<\n  ElementaryStreamTypes,\n  ElementaryStreamInfo | null\n>;\n\nexport type Base = {\n  url: string;\n};\n\nexport class BaseSegment {\n  private _byteRange: [number, number] | null = null;\n  private _url: string | null = null;\n  private _stats: LoadStats | null = null;\n  private _streams: ElementaryStreams | null = null;\n\n  // baseurl is the URL to the playlist\n  public readonly base: Base;\n\n  // relurl is the portion of the URL that comes from inside the playlist.\n  public relurl?: string;\n\n  constructor(base: Base | string) {\n    if (typeof base === 'string') {\n      base = { url: base };\n    }\n    this.base = base;\n    makeEnumerable(this, 'stats');\n  }\n\n  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array\n  setByteRange(value: string, previous?: BaseSegment) {\n    const params = value.split('@', 2);\n    let start: number;\n    if (params.length === 1) {\n      start = previous?.byteRangeEndOffset || 0;\n    } else {\n      start = parseInt(params[1]);\n    }\n    this._byteRange = [start, parseInt(params[0]) + start];\n  }\n\n  get baseurl(): string {\n    return this.base.url;\n  }\n\n  get byteRange(): [number, number] | [] {\n    if (this._byteRange === null) {\n      return [];\n    }\n\n    return this._byteRange;\n  }\n\n  get byteRangeStartOffset(): number | undefined {\n    return this.byteRange[0];\n  }\n\n  get byteRangeEndOffset(): number | undefined {\n    return this.byteRange[1];\n  }\n\n  get elementaryStreams(): ElementaryStreams {\n    if (this._streams === null) {\n      this._streams = {\n        [ElementaryStreamTypes.AUDIO]: null,\n        [ElementaryStreamTypes.VIDEO]: null,\n        [ElementaryStreamTypes.AUDIOVIDEO]: null,\n      };\n    }\n    return this._streams;\n  }\n\n  set elementaryStreams(value: ElementaryStreams) {\n    this._streams = value;\n  }\n\n  get hasStats(): boolean {\n    return this._stats !== null;\n  }\n\n  get hasStreams(): boolean {\n    return this._streams !== null;\n  }\n\n  get stats(): LoadStats {\n    if (this._stats === null) {\n      this._stats = new LoadStats();\n    }\n    return this._stats;\n  }\n\n  set stats(value: LoadStats) {\n    this._stats = value;\n  }\n\n  get url(): string {\n    if (!this._url && this.baseurl && this.relurl) {\n      this._url = buildAbsoluteURL(this.baseurl, this.relurl, {\n        alwaysNormalize: true,\n      });\n    }\n    return this._url || '';\n  }\n\n  set url(value: string) {\n    this._url = value;\n  }\n\n  clearElementaryStreamInfo() {\n    const { elementaryStreams } = this;\n    elementaryStreams[ElementaryStreamTypes.AUDIO] = null;\n    elementaryStreams[ElementaryStreamTypes.VIDEO] = null;\n    elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO] = null;\n  }\n}\n\nexport interface MediaFragment extends Fragment {\n  sn: number;\n  ref: MediaFragmentRef;\n}\n\nexport type MediaFragmentRef = {\n  base: Base;\n  start: number;\n  duration: number;\n  sn: number;\n  programDateTime: number | null;\n};\n\nexport function isMediaFragment(frag: Fragment): frag is MediaFragment {\n  return frag.sn !== 'initSegment';\n}\n\n/**\n * Object representing parsed data from an HLS Segment. Found in {@link hls.js#LevelDetails.fragments}.\n */\nexport class Fragment extends BaseSegment {\n  private _decryptdata: LevelKey | null = null;\n  private _programDateTime: number | null = null;\n  private _ref: MediaFragmentRef | null = null;\n  // Approximate bit rate of the fragment expressed in bits per second (bps) as indicated by the last EXT-X-BITRATE (kbps) tag\n  private _bitrate?: number;\n\n  public rawProgramDateTime: string | null = null;\n  public tagList: Array<string[]> = [];\n\n  // EXTINF has to be present for a m3u8 to be considered valid\n  public duration: number = 0;\n  // sn notates the sequence number for a segment, and if set to a string can be 'initSegment'\n  public sn: number | 'initSegment' = 0;\n  // levelkeys are the EXT-X-KEY tags that apply to this segment for decryption\n  // core difference from the private field _decryptdata is the lack of the initialized IV\n  // _decryptdata will set the IV for this segment based on the segment number in the fragment\n  public levelkeys?: { [key: string]: LevelKey | undefined };\n  // A string representing the fragment type\n  public readonly type: PlaylistLevelType;\n  // A reference to the loader. Set while the fragment is loading, and removed afterwards. Used to abort fragment loading\n  public loader: Loader<FragmentLoaderContext> | null = null;\n  // A reference to the key loader. Set while the key is loading, and removed afterwards. Used to abort key loading\n  public keyLoader: Loader<KeyLoaderContext> | null = null;\n  // The level/track index to which the fragment belongs\n  public level: number = -1;\n  // The continuity counter of the fragment\n  public cc: number = 0;\n  // The starting Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public startPTS?: number;\n  // The ending Presentation Time Stamp (PTS) of the fragment. Set after transmux complete.\n  public endPTS?: number;\n  // The starting Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public startDTS?: number;\n  // The ending Decode Time Stamp (DTS) of the fragment. Set after transmux complete.\n  public endDTS?: number;\n  // The start time of the fragment, as listed in the manifest. Updated after transmux complete.\n  public start: number = 0;\n  // The offset time (seconds) of the fragment from the start of the Playlist\n  public playlistOffset: number = 0;\n  // Set by `updateFragPTSDTS` in level-helper\n  public deltaPTS?: number;\n  // The maximum starting Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public maxStartPTS?: number;\n  // The minimum ending Presentation Time Stamp (audio/video PTS) of the fragment. Set after transmux complete.\n  public minEndPTS?: number;\n  // Init Segment bytes (unset for media segments)\n  public data?: Uint8Array;\n  // A flag indicating whether the segment was downloaded in order to test bitrate, and was not buffered\n  public bitrateTest: boolean = false;\n  // #EXTINF  segment title\n  public title: string | null = null;\n  // The Media Initialization Section for this segment\n  public initSegment: Fragment | null = null;\n  // Fragment is the last fragment in the media playlist\n  public endList?: boolean;\n  // Fragment is marked by an EXT-X-GAP tag indicating that it does not contain media data and should not be loaded\n  public gap?: boolean;\n  // Deprecated\n  public urlId: number = 0;\n\n  constructor(type: PlaylistLevelType, base: Base | string) {\n    super(base);\n    this.type = type;\n  }\n\n  get byteLength(): number | null {\n    if (this.hasStats) {\n      const total = this.stats.total;\n      if (total) {\n        return total;\n      }\n    }\n    if (this.byteRange.length) {\n      const start = this.byteRange[0];\n      const end = this.byteRange[1];\n      if (Number.isFinite(start) && Number.isFinite(end)) {\n        return (end as number) - (start as number);\n      }\n    }\n    return null;\n  }\n\n  get bitrate(): number | null {\n    if (this.byteLength) {\n      return (this.byteLength * 8) / this.duration;\n    }\n    if (this._bitrate) {\n      return this._bitrate;\n    }\n    return null;\n  }\n\n  set bitrate(value: number) {\n    this._bitrate = value;\n  }\n\n  get decryptdata(): LevelKey | null {\n    const { levelkeys } = this;\n\n    if (!levelkeys || levelkeys.NONE) {\n      return null;\n    }\n\n    if (levelkeys.identity) {\n      if (!this._decryptdata) {\n        this._decryptdata = levelkeys.identity.getDecryptData(this.sn);\n      }\n    } else if (!this._decryptdata?.keyId) {\n      const keyFormats = Object.keys(levelkeys);\n      if (keyFormats.length === 1) {\n        const levelKey = (this._decryptdata = levelkeys[keyFormats[0]] || null);\n        if (levelKey) {\n          this._decryptdata = levelKey.getDecryptData(this.sn, levelkeys);\n        }\n      } else {\n        // Multiple keys. key-loader to call Fragment.setKeyFormat based on selected key-system.\n      }\n    }\n\n    return this._decryptdata;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get endProgramDateTime() {\n    if (this.programDateTime === null) {\n      return null;\n    }\n\n    const duration = !Number.isFinite(this.duration) ? 0 : this.duration;\n\n    return this.programDateTime + duration * 1000;\n  }\n\n  get encrypted() {\n    // At the m3u8-parser level we need to add support for manifest signalled keyformats\n    // when we want the fragment to start reporting that it is encrypted.\n    // Currently, keyFormat will only be set for identity keys\n    if (this._decryptdata?.encrypted) {\n      return true;\n    } else if (this.levelkeys) {\n      const keyFormats = Object.keys(this.levelkeys);\n      const len = keyFormats.length;\n      if (len > 1 || (len === 1 && this.levelkeys[keyFormats[0]]?.encrypted)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  get programDateTime(): number | null {\n    if (this._programDateTime === null && this.rawProgramDateTime) {\n      this.programDateTime = Date.parse(this.rawProgramDateTime);\n    }\n    return this._programDateTime;\n  }\n\n  set programDateTime(value: number | null) {\n    if (!Number.isFinite(value)) {\n      this._programDateTime = this.rawProgramDateTime = null;\n      return;\n    }\n    this._programDateTime = value;\n  }\n\n  get ref(): MediaFragmentRef | null {\n    if (!isMediaFragment(this)) {\n      return null;\n    }\n    if (!this._ref) {\n      this._ref = {\n        base: this.base,\n        start: this.start,\n        duration: this.duration,\n        sn: this.sn,\n        programDateTime: this.programDateTime,\n      };\n    }\n    return this._ref;\n  }\n\n  addStart(value: number) {\n    this.setStart(this.start + value);\n  }\n\n  setStart(value: number) {\n    this.start = value;\n    if (this._ref) {\n      this._ref.start = value;\n    }\n  }\n\n  setDuration(value: number) {\n    this.duration = value;\n    if (this._ref) {\n      this._ref.duration = value;\n    }\n  }\n\n  setKeyFormat(keyFormat: KeySystemFormats) {\n    const levelkeys = this.levelkeys;\n    if (levelkeys) {\n      const key = levelkeys[keyFormat];\n      if (key && !this._decryptdata?.keyId) {\n        this._decryptdata = key.getDecryptData(this.sn, levelkeys);\n      }\n    }\n  }\n\n  abortRequests(): void {\n    this.loader?.abort();\n    this.keyLoader?.abort();\n  }\n\n  setElementaryStreamInfo(\n    type: ElementaryStreamTypes,\n    startPTS: number,\n    endPTS: number,\n    startDTS: number,\n    endDTS: number,\n    partial: boolean = false,\n  ) {\n    const { elementaryStreams } = this;\n    const info = elementaryStreams[type];\n    if (!info) {\n      elementaryStreams[type] = {\n        startPTS,\n        endPTS,\n        startDTS,\n        endDTS,\n        partial,\n      };\n      return;\n    }\n\n    info.startPTS = Math.min(info.startPTS, startPTS);\n    info.endPTS = Math.max(info.endPTS, endPTS);\n    info.startDTS = Math.min(info.startDTS, startDTS);\n    info.endDTS = Math.max(info.endDTS, endDTS);\n  }\n}\n\n/**\n * Object representing parsed data from an HLS Partial Segment. Found in {@link hls.js#LevelDetails.partList}.\n */\nexport class Part extends BaseSegment {\n  public readonly fragOffset: number = 0;\n  public readonly duration: number = 0;\n  public readonly gap: boolean = false;\n  public readonly independent: boolean = false;\n  public readonly relurl: string;\n  public readonly fragment: MediaFragment;\n  public readonly index: number;\n\n  constructor(\n    partAttrs: AttrList,\n    frag: MediaFragment,\n    base: Base | string,\n    index: number,\n    previous?: Part,\n  ) {\n    super(base);\n    this.duration = partAttrs.decimalFloatingPoint('DURATION');\n    this.gap = partAttrs.bool('GAP');\n    this.independent = partAttrs.bool('INDEPENDENT');\n    this.relurl = partAttrs.enumeratedString('URI') as string;\n    this.fragment = frag;\n    this.index = index;\n    const byteRange = partAttrs.enumeratedString('BYTERANGE');\n    if (byteRange) {\n      this.setByteRange(byteRange, previous);\n    }\n    if (previous) {\n      this.fragOffset = previous.fragOffset + previous.duration;\n    }\n  }\n\n  get start(): number {\n    return this.fragment.start + this.fragOffset;\n  }\n\n  get end(): number {\n    return this.start + this.duration;\n  }\n\n  get loaded(): boolean {\n    const { elementaryStreams } = this;\n    return !!(\n      elementaryStreams.audio ||\n      elementaryStreams.video ||\n      elementaryStreams.audiovideo\n    );\n  }\n}\n\nfunction getOwnPropertyDescriptorFromPrototypeChain(\n  object: Object | undefined,\n  property: string,\n) {\n  const prototype = Object.getPrototypeOf(object);\n  if (prototype) {\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(\n      prototype,\n      property,\n    );\n    if (propertyDescriptor) {\n      return propertyDescriptor;\n    }\n    return getOwnPropertyDescriptorFromPrototypeChain(prototype, property);\n  }\n}\n\nfunction makeEnumerable(object: Object, property: string) {\n  const d = getOwnPropertyDescriptorFromPrototypeChain(object, property);\n  if (d) {\n    d.enumerable = true;\n    Object.defineProperty(object, property, d);\n  }\n}\n","import { utf8ArrayToStr } from '@svta/common-media-library/utils/utf8ArrayToStr';\nimport { arrayToHex } from './hex';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { logger } from '../utils/logger';\nimport type { KeySystemIds } from './mediakeys-helper';\nimport type { DecryptData } from '../loader/level-key';\nimport type { PassthroughTrack, UserdataSample } from '../types/demuxer';\nimport type { ILogger } from '../utils/logger';\n\ntype BoxDataOrUndefined = Uint8Array<ArrayBuffer> | undefined;\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\nconst push = [].push;\n\n// We are using fixed track IDs for driving the MP4 remuxer\n// instead of following the TS PIDs.\n// There is no reason not to do this and some browsers/SourceBuffer-demuxers\n// may not like if there are TrackID \"switches\"\n// See https://github.com/video-dev/hls.js/issues/1331\n// Here we are mapping our internal track types to constant MP4 track IDs\n// With MSE currently one can only have one track of each, and we are muxing\n// whatever video/audio rendition in them.\nexport const RemuxerTrackIdConfig = {\n  video: 1,\n  audio: 2,\n  id3: 3,\n  text: 4,\n};\n\nexport function bin2str(data: Uint8Array): string {\n  return String.fromCharCode.apply(null, data);\n}\n\nexport function readUint16(buffer: Uint8Array, offset: number): number {\n  const val = (buffer[offset] << 8) | buffer[offset + 1];\n  return val < 0 ? 65536 + val : val;\n}\n\nexport function readUint32(buffer: Uint8Array, offset: number): number {\n  const val = readSint32(buffer, offset);\n  return val < 0 ? 4294967296 + val : val;\n}\n\nexport function readUint64(buffer: Uint8Array, offset: number) {\n  let result = readUint32(buffer, offset);\n  result *= Math.pow(2, 32);\n  result += readUint32(buffer, offset + 4);\n  return result;\n}\n\nexport function readSint32(buffer: Uint8Array, offset: number): number {\n  return (\n    (buffer[offset] << 24) |\n    (buffer[offset + 1] << 16) |\n    (buffer[offset + 2] << 8) |\n    buffer[offset + 3]\n  );\n}\n\nexport function writeUint32(buffer: Uint8Array, offset: number, value: number) {\n  buffer[offset] = value >> 24;\n  buffer[offset + 1] = (value >> 16) & 0xff;\n  buffer[offset + 2] = (value >> 8) & 0xff;\n  buffer[offset + 3] = value & 0xff;\n}\n\n// Find \"moof\" box\nexport function hasMoofData(data: Uint8Array): boolean {\n  const end = data.byteLength;\n  for (let i = 0; i < end; ) {\n    const size = readUint32(data, i);\n    if (\n      size > 8 &&\n      data[i + 4] === 0x6d &&\n      data[i + 5] === 0x6f &&\n      data[i + 6] === 0x6f &&\n      data[i + 7] === 0x66\n    ) {\n      return true;\n    }\n    i = size > 1 ? i + size : end;\n  }\n  return false;\n}\n\n// Find the data for a box specified by its path\nexport function findBox(data: Uint8Array, path: string[]): Uint8Array[] {\n  const results = [] as Uint8Array[];\n  if (!path.length) {\n    // short-circuit the search for empty paths\n    return results;\n  }\n  const end = data.byteLength;\n\n  for (let i = 0; i < end; ) {\n    const size = readUint32(data, i);\n    const type = bin2str(data.subarray(i + 4, i + 8));\n    const endbox = size > 1 ? i + size : end;\n    if (type === path[0]) {\n      if (path.length === 1) {\n        // this is the end of the path and we've found the box we were\n        // looking for\n        results.push(data.subarray(i + 8, endbox));\n      } else {\n        // recursively search for the next box along the path\n        const subresults = findBox(data.subarray(i + 8, endbox), path.slice(1));\n        if (subresults.length) {\n          push.apply(results, subresults);\n        }\n      }\n    }\n    i = endbox;\n  }\n\n  // we've finished searching all of data\n  return results;\n}\n\ntype SidxInfo = {\n  earliestPresentationTime: number;\n  timescale: number;\n  version: number;\n  referencesCount: number;\n  references: any[];\n};\n\nfunction parseSegmentIndex(sidx: Uint8Array): SidxInfo | null {\n  const references: any[] = [];\n\n  const version = sidx[0];\n\n  // set initial offset, we skip the reference ID (not needed)\n  let index = 8;\n\n  const timescale = readUint32(sidx, index);\n  index += 4;\n\n  let earliestPresentationTime = 0;\n  let firstOffset = 0;\n\n  if (version === 0) {\n    earliestPresentationTime = readUint32(sidx, index);\n    firstOffset = readUint32(sidx, index + 4);\n    index += 8;\n  } else {\n    earliestPresentationTime = readUint64(sidx, index);\n    firstOffset = readUint64(sidx, index + 8);\n    index += 16;\n  }\n\n  // skip reserved\n  index += 2;\n\n  let startByte = sidx.length + firstOffset;\n\n  const referencesCount = readUint16(sidx, index);\n  index += 2;\n\n  for (let i = 0; i < referencesCount; i++) {\n    let referenceIndex = index;\n\n    const referenceInfo = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    const referenceSize = referenceInfo & 0x7fffffff;\n    const referenceType = (referenceInfo & 0x80000000) >>> 31;\n\n    if (referenceType === 1) {\n      logger.warn('SIDX has hierarchical references (not supported)');\n      return null;\n    }\n\n    const subsegmentDuration = readUint32(sidx, referenceIndex);\n    referenceIndex += 4;\n\n    references.push({\n      referenceSize,\n      subsegmentDuration, // unscaled\n      info: {\n        duration: subsegmentDuration / timescale,\n        start: startByte,\n        end: startByte + referenceSize - 1,\n      },\n    });\n\n    startByte += referenceSize;\n\n    // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits\n    // for |sapDelta|.\n    referenceIndex += 4;\n\n    // skip to next ref\n    index = referenceIndex;\n  }\n\n  return {\n    earliestPresentationTime,\n    timescale,\n    version,\n    referencesCount,\n    references,\n  };\n}\n\n/**\n * Parses an MP4 initialization segment and extracts stream type and\n * timescale values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * moov > trak > mdia > hdlr\n * ```\n * @param initSegment the bytes of the init segment\n * @returns a hash of track type to timescale values or null if\n * the init segment is malformed.\n */\n\nexport interface InitDataTrack {\n  timescale: number;\n  id: number;\n  codec: string;\n  encrypted: boolean;\n  supplemental: string | undefined;\n}\n\ntype HdlrMetadata = 'meta';\ntype HdlrType =\n  | ElementaryStreamTypes.AUDIO\n  | ElementaryStreamTypes.VIDEO\n  | HdlrMetadata;\n\ntype StsdData = {\n  codec: string;\n  encrypted: boolean;\n  supplemental: string | undefined;\n};\n\nexport interface InitData extends Array<any> {\n  [index: number]:\n    | {\n        timescale: number;\n        type: HdlrType;\n        stsd: StsdData;\n        default?: {\n          duration: number;\n          flags: number;\n        };\n      }\n    | undefined;\n  audio?: InitDataTrack;\n  video?: InitDataTrack;\n  caption?: InitDataTrack;\n}\n\nexport function parseInitSegment(initSegment: Uint8Array): InitData {\n  const result: InitData = [];\n  const traks = findBox(initSegment, ['moov', 'trak']);\n  for (let i = 0; i < traks.length; i++) {\n    const trak = traks[i];\n    const tkhd = findBox(trak, ['tkhd'])[0];\n    if (tkhd as any) {\n      let version = tkhd[0];\n      const trackId = readUint32(tkhd, version === 0 ? 12 : 20);\n      const mdhd = findBox(trak, ['mdia', 'mdhd'])[0];\n      if (mdhd as any) {\n        version = mdhd[0];\n        const timescale = readUint32(mdhd, version === 0 ? 12 : 20);\n        const hdlr = findBox(trak, ['mdia', 'hdlr'])[0];\n        if (hdlr as any) {\n          const hdlrType = bin2str(hdlr.subarray(8, 12));\n          const type: HdlrType | undefined = {\n            soun: ElementaryStreamTypes.AUDIO as const,\n            vide: ElementaryStreamTypes.VIDEO as const,\n          }[hdlrType];\n          // Parse codec details\n          const stsdBox = findBox(trak, ['mdia', 'minf', 'stbl', 'stsd'])[0];\n          const stsd = parseStsd(stsdBox);\n          if (type) {\n            // Add 'audio', 'video', and 'audiovideo' track records that will map to SourceBuffers\n            result[trackId] = { timescale, type, stsd };\n            result[type] = { timescale, id: trackId, ...stsd };\n          } else {\n            // Add 'meta' and other track records\n            result[trackId] = {\n              timescale,\n              type: hdlrType as HdlrType,\n              stsd,\n            };\n          }\n        }\n      }\n    }\n  }\n\n  const trex = findBox(initSegment, ['moov', 'mvex', 'trex']);\n  trex.forEach((trex) => {\n    const trackId = readUint32(trex, 4);\n    const track = result[trackId];\n    if (track) {\n      track.default = {\n        duration: readUint32(trex, 12),\n        flags: readUint32(trex, 20),\n      };\n    }\n  });\n\n  return result;\n}\n\nfunction parseStsd(stsd: Uint8Array): StsdData {\n  const sampleEntries = stsd.subarray(8);\n  const sampleEntriesEnd = sampleEntries.subarray(8 + 78);\n  const fourCC = bin2str(sampleEntries.subarray(4, 8));\n  let codec = fourCC;\n  let supplemental;\n  const encrypted = fourCC === 'enca' || fourCC === 'encv';\n  if (encrypted) {\n    const encBox = findBox(sampleEntries, [fourCC])[0];\n    const encBoxChildren = encBox.subarray(fourCC === 'enca' ? 28 : 78);\n    const sinfs = findBox(encBoxChildren, ['sinf']);\n    sinfs.forEach((sinf) => {\n      const schm = findBox(sinf, ['schm'])[0];\n      if (schm as any) {\n        const scheme = bin2str(schm.subarray(4, 8));\n        if (scheme === 'cbcs' || scheme === 'cenc') {\n          const frma = findBox(sinf, ['frma'])[0];\n          if (frma as any) {\n            // for encrypted content codec fourCC will be in frma\n            codec = bin2str(frma);\n          }\n        }\n      }\n    });\n  }\n  const codecFourCC = codec;\n  switch (codec) {\n    case 'avc1':\n    case 'avc2':\n    case 'avc3':\n    case 'avc4': {\n      // extract profile + compatibility + level out of avcC box\n      const avcCBox = findBox(sampleEntriesEnd, ['avcC'])[0];\n      if ((avcCBox as any) && avcCBox.length > 3) {\n        codec +=\n          '.' + toHex(avcCBox[1]) + toHex(avcCBox[2]) + toHex(avcCBox[3]);\n        supplemental = parseSupplementalDoViCodec(\n          codecFourCC === 'avc1' ? 'dva1' : 'dvav',\n          sampleEntriesEnd,\n        );\n      }\n      break;\n    }\n    case 'mp4a': {\n      const codecBox = findBox(sampleEntries, [fourCC])[0];\n      const esdsBox = findBox(codecBox.subarray(28), ['esds'])[0];\n      if ((esdsBox as any) && esdsBox.length > 7) {\n        let i = 4;\n        // ES Descriptor tag\n        if (esdsBox[i++] !== 0x03) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        i += 2; // skip es_id;\n        const flags = esdsBox[i++];\n        if (flags & 0x80) {\n          i += 2; // skip dependency es_id\n        }\n        if (flags & 0x40) {\n          i += esdsBox[i++]; // skip URL\n        }\n        // Decoder config descriptor\n        if (esdsBox[i++] !== 0x04) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        const objectType = esdsBox[i++];\n        if (objectType === 0x40) {\n          codec += '.' + toHex(objectType);\n        } else {\n          break;\n        }\n        i += 12;\n        // Decoder specific info\n        if (esdsBox[i++] !== 0x05) {\n          break;\n        }\n        i = skipBERInteger(esdsBox, i);\n        const firstByte = esdsBox[i++];\n        let audioObjectType = (firstByte & 0xf8) >> 3;\n        if (audioObjectType === 31) {\n          audioObjectType +=\n            1 + ((firstByte & 0x7) << 3) + ((esdsBox[i] & 0xe0) >> 5);\n        }\n        codec += '.' + audioObjectType;\n      }\n      break;\n    }\n    case 'hvc1':\n    case 'hev1': {\n      const hvcCBox = findBox(sampleEntriesEnd, ['hvcC'])[0];\n      if ((hvcCBox as any) && hvcCBox.length > 12) {\n        const profileByte = hvcCBox[1];\n        const profileSpace = ['', 'A', 'B', 'C'][profileByte >> 6];\n        const generalProfileIdc = profileByte & 0x1f;\n        const profileCompat = readUint32(hvcCBox, 2);\n        const tierFlag = (profileByte & 0x20) >> 5 ? 'H' : 'L';\n        const levelIDC = hvcCBox[12];\n        const constraintIndicator = hvcCBox.subarray(6, 12);\n        codec += '.' + profileSpace + generalProfileIdc;\n        codec +=\n          '.' + reverse32BitInt(profileCompat).toString(16).toUpperCase();\n        codec += '.' + tierFlag + levelIDC;\n        let constraintString = '';\n        for (let i = constraintIndicator.length; i--; ) {\n          const byte = constraintIndicator[i];\n          if (byte || constraintString) {\n            const encodedByte = byte.toString(16).toUpperCase();\n            constraintString = '.' + encodedByte + constraintString;\n          }\n        }\n        codec += constraintString;\n      }\n      supplemental = parseSupplementalDoViCodec(\n        codecFourCC == 'hev1' ? 'dvhe' : 'dvh1',\n        sampleEntriesEnd,\n      );\n      break;\n    }\n    case 'dvh1':\n    case 'dvhe':\n    case 'dvav':\n    case 'dva1':\n    case 'dav1': {\n      codec = parseSupplementalDoViCodec(codec, sampleEntriesEnd) || codec;\n      break;\n    }\n    case 'vp09': {\n      const vpcCBox = findBox(sampleEntriesEnd, ['vpcC'])[0];\n      if ((vpcCBox as any) && vpcCBox.length > 6) {\n        const profile = vpcCBox[4];\n        const level = vpcCBox[5];\n        const bitDepth = (vpcCBox[6] >> 4) & 0x0f;\n        codec +=\n          '.' +\n          addLeadingZero(profile) +\n          '.' +\n          addLeadingZero(level) +\n          '.' +\n          addLeadingZero(bitDepth);\n      }\n      break;\n    }\n    case 'av01': {\n      const av1CBox = findBox(sampleEntriesEnd, ['av1C'])[0];\n      if ((av1CBox as any) && av1CBox.length > 2) {\n        const profile = av1CBox[1] >>> 5;\n        const level = av1CBox[1] & 0x1f;\n        const tierFlag = av1CBox[2] >>> 7 ? 'H' : 'M';\n        const highBitDepth = (av1CBox[2] & 0x40) >> 6;\n        const twelveBit = (av1CBox[2] & 0x20) >> 5;\n        const bitDepth =\n          profile === 2 && highBitDepth\n            ? twelveBit\n              ? 12\n              : 10\n            : highBitDepth\n              ? 10\n              : 8;\n        const monochrome = (av1CBox[2] & 0x10) >> 4;\n        const chromaSubsamplingX = (av1CBox[2] & 0x08) >> 3;\n        const chromaSubsamplingY = (av1CBox[2] & 0x04) >> 2;\n        const chromaSamplePosition = av1CBox[2] & 0x03;\n        // TODO: parse color_description_present_flag\n        // default it to BT.709/limited range for now\n        // more info https://aomediacodec.github.io/av1-isobmff/#av1codecconfigurationbox-syntax\n        const colorPrimaries = 1;\n        const transferCharacteristics = 1;\n        const matrixCoefficients = 1;\n        const videoFullRangeFlag = 0;\n        codec +=\n          '.' +\n          profile +\n          '.' +\n          addLeadingZero(level) +\n          tierFlag +\n          '.' +\n          addLeadingZero(bitDepth) +\n          '.' +\n          monochrome +\n          '.' +\n          chromaSubsamplingX +\n          chromaSubsamplingY +\n          chromaSamplePosition +\n          '.' +\n          addLeadingZero(colorPrimaries) +\n          '.' +\n          addLeadingZero(transferCharacteristics) +\n          '.' +\n          addLeadingZero(matrixCoefficients) +\n          '.' +\n          videoFullRangeFlag;\n        supplemental = parseSupplementalDoViCodec('dav1', sampleEntriesEnd);\n      }\n      break;\n    }\n    case 'ac-3':\n    case 'ec-3':\n    case 'alac':\n    case 'fLaC':\n    case 'Opus':\n    default:\n      break;\n  }\n  return { codec, encrypted, supplemental };\n}\n\nfunction parseSupplementalDoViCodec(\n  fourCC: string,\n  sampleEntriesEnd: Uint8Array,\n): string | undefined {\n  const dvvCResult = findBox(sampleEntriesEnd, ['dvvC']); // used by DoVi Profile 8 to 10\n  const dvXCBox = dvvCResult.length\n    ? dvvCResult[0]\n    : findBox(sampleEntriesEnd, ['dvcC'])[0]; // used by DoVi Profiles up to 7 and 20\n  if (dvXCBox as any) {\n    const doViProfile = (dvXCBox[2] >> 1) & 0x7f;\n    const doViLevel = ((dvXCBox[2] << 5) & 0x20) | ((dvXCBox[3] >> 3) & 0x1f);\n    return (\n      fourCC +\n      '.' +\n      addLeadingZero(doViProfile) +\n      '.' +\n      addLeadingZero(doViLevel)\n    );\n  }\n}\n\nfunction reverse32BitInt(val: number) {\n  let result = 0;\n  for (let i = 0; i < 32; i++) {\n    result |= ((val >> i) & 1) << (32 - 1 - i);\n  }\n  return result >>> 0;\n}\n\nfunction skipBERInteger(bytes: Uint8Array, i: number): number {\n  const limit = i + 5;\n  while (bytes[i++] & 0x80 && i < limit) {\n    /* do nothing */\n  }\n  return i;\n}\n\nfunction toHex(x: number): string {\n  return ('0' + x.toString(16).toUpperCase()).slice(-2);\n}\n\nfunction addLeadingZero(num: number): string {\n  return (num < 10 ? '0' : '') + num;\n}\n\nexport function patchEncyptionData(\n  initSegment: Uint8Array<ArrayBuffer> | undefined,\n  decryptdata: DecryptData | null,\n) {\n  if (!initSegment || !decryptdata) {\n    return;\n  }\n  const keyId = decryptdata.keyId;\n  if (keyId && decryptdata.isCommonEncryption) {\n    applyToTencBoxes(initSegment, (tenc, isAudio) => {\n      // Look for default key id (keyID offset is always 8 within the tenc box):\n      const tencKeyId = tenc.subarray(8, 24);\n      if (!tencKeyId.some((b) => b !== 0)) {\n        logger.log(\n          `[eme] Patching keyId in 'enc${\n            isAudio ? 'a' : 'v'\n          }>sinf>>tenc' box: ${arrayToHex(tencKeyId)} -> ${arrayToHex(keyId)}`,\n        );\n        tenc.set(keyId, 8);\n      }\n    });\n  }\n}\n\nexport function parseKeyIdsFromTenc(\n  initSegment: Uint8Array<ArrayBuffer>,\n): Uint8Array<ArrayBuffer>[] {\n  const keyIds: Uint8Array<ArrayBuffer>[] = [];\n  applyToTencBoxes(initSegment, (tenc) => keyIds.push(tenc.subarray(8, 24)));\n  return keyIds;\n}\n\nfunction applyToTencBoxes(\n  initSegment: Uint8Array<ArrayBuffer>,\n  predicate: (tenc: Uint8Array<ArrayBuffer>, isAudio: boolean) => void,\n) {\n  const traks = findBox(initSegment, ['moov', 'trak']);\n  traks.forEach((trak) => {\n    const stsd = findBox(trak, [\n      'mdia',\n      'minf',\n      'stbl',\n      'stsd',\n    ])[0] as BoxDataOrUndefined;\n    if (!stsd) return;\n    const sampleEntries = stsd.subarray(8);\n    let encBoxes = findBox(sampleEntries, ['enca']);\n    const isAudio = encBoxes.length > 0;\n    if (!isAudio) {\n      encBoxes = findBox(sampleEntries, ['encv']);\n    }\n    encBoxes.forEach((enc) => {\n      const encBoxChildren = isAudio ? enc.subarray(28) : enc.subarray(78);\n      const sinfBoxes = findBox(encBoxChildren, ['sinf']);\n      sinfBoxes.forEach((sinf) => {\n        const tenc = parseSinf(sinf);\n        if (tenc) {\n          predicate(tenc, isAudio);\n        }\n      });\n    });\n  });\n}\n\nexport function parseSinf(sinf: Uint8Array): BoxDataOrUndefined {\n  const schm = findBox(sinf, ['schm'])[0] as BoxDataOrUndefined;\n  if (schm) {\n    const scheme = bin2str(schm.subarray(4, 8));\n    if (scheme === 'cbcs' || scheme === 'cenc') {\n      const tenc = findBox(sinf, ['schi', 'tenc'])[0] as BoxDataOrUndefined;\n      if (tenc) {\n        return tenc;\n      }\n    } else if (scheme === 'cbc2') {\n      /* no-op */\n    }\n  }\n}\n\n/*\n  For Reference:\n  aligned(8) class TrackFragmentHeaderBox\n           extends FullBox(‘tfhd’, 0, tf_flags){\n     unsigned int(32)  track_ID;\n     // all the following are optional fields\n     unsigned int(64)  base_data_offset;\n     unsigned int(32)  sample_description_index;\n     unsigned int(32)  default_sample_duration;\n     unsigned int(32)  default_sample_size;\n     unsigned int(32)  default_sample_flags\n  }\n */\nexport type TrackTimes = {\n  duration: number;\n  keyFrameIndex?: number;\n  keyFrameStart?: number;\n  start: number;\n  sampleCount: number;\n  timescale: number;\n  type: HdlrType;\n};\n\nexport function getSampleData(\n  data: Uint8Array,\n  initData: InitData,\n  logger: ILogger,\n): Record<number, TrackTimes> {\n  const tracks: Record<number, TrackTimes> = {};\n  const trafs = findBox(data, ['moof', 'traf']);\n  for (let i = 0; i < trafs.length; i++) {\n    const traf = trafs[i];\n    // There is only one tfhd & trun per traf\n    // This is true for CMAF style content, and we should perhaps check the ftyp\n    // and only look for a single trun then, but for ISOBMFF we should check\n    // for multiple track runs.\n    const tfhd = findBox(traf, ['tfhd'])[0];\n    // get the track id from the tfhd\n    const id = readUint32(tfhd, 4);\n    const track = initData[id];\n    if (!track) {\n      continue;\n    }\n    (tracks[id] as any) ||= {\n      start: NaN,\n      duration: 0,\n      sampleCount: 0,\n      timescale: track.timescale,\n      type: track.type,\n    };\n    const trackTimes: TrackTimes = tracks[id];\n    // get start DTS\n    const tfdt = findBox(traf, ['tfdt'])[0];\n\n    if (tfdt as any) {\n      const version = tfdt[0];\n      let baseTime = readUint32(tfdt, 4);\n      if (version === 1) {\n        // If value is too large, assume signed 64-bit. Negative track fragment decode times are invalid, but they exist in the wild.\n        // This prevents large values from being used for initPTS, which can cause playlist sync issues.\n        // https://github.com/video-dev/hls.js/issues/5303\n        if (baseTime === UINT32_MAX) {\n          logger.warn(\n            `[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time`,\n          );\n        } else {\n          baseTime *= UINT32_MAX + 1;\n          baseTime += readUint32(tfdt, 8);\n        }\n      }\n      if (\n        Number.isFinite(baseTime) &&\n        (!Number.isFinite(trackTimes.start) || baseTime < trackTimes.start)\n      ) {\n        trackTimes.start = baseTime;\n      }\n    }\n\n    const trackDefault = track.default;\n    const tfhdFlags = readUint32(tfhd, 0) | trackDefault?.flags!;\n    let defaultSampleDuration: number = trackDefault?.duration || 0;\n    if (tfhdFlags & 0x000008) {\n      // 0x000008 indicates the presence of the default_sample_duration field\n      if (tfhdFlags & 0x000002) {\n        // 0x000002 indicates the presence of the sample_description_index field, which precedes default_sample_duration\n        // If present, the default_sample_duration exists at byte offset 12\n        defaultSampleDuration = readUint32(tfhd, 12);\n      } else {\n        // Otherwise, the duration is at byte offset 8\n        defaultSampleDuration = readUint32(tfhd, 8);\n      }\n    }\n    const truns = findBox(traf, ['trun']);\n    let sampleDTS = trackTimes.start || 0;\n    let rawDuration = 0;\n    let sampleDuration = defaultSampleDuration;\n    for (let j = 0; j < truns.length; j++) {\n      const trun = truns[j];\n      const sampleCount = readUint32(trun, 4);\n      const sampleIndex = trackTimes.sampleCount;\n      trackTimes.sampleCount += sampleCount;\n      // Get duration from samples\n      const dataOffsetPresent = trun[3] & 0x01;\n      const firstSampleFlagsPresent = trun[3] & 0x04;\n      const sampleDurationPresent = trun[2] & 0x01;\n      const sampleSizePresent = trun[2] & 0x02;\n      const sampleFlagsPresent = trun[2] & 0x04;\n      const sampleCompositionTimeOffsetPresent = trun[2] & 0x08;\n      let offset = 8;\n      let remaining = sampleCount;\n      if (dataOffsetPresent) {\n        offset += 4;\n      }\n      if (firstSampleFlagsPresent && sampleCount) {\n        const isNonSyncSample = trun[offset + 1] & 0x01;\n        if (!isNonSyncSample && trackTimes.keyFrameIndex === undefined) {\n          trackTimes.keyFrameIndex = sampleIndex;\n        }\n        offset += 4;\n        if (sampleDurationPresent) {\n          sampleDuration = readUint32(trun, offset);\n          offset += 4;\n        } else {\n          sampleDuration = defaultSampleDuration;\n        }\n        if (sampleSizePresent) {\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          offset += 4;\n        }\n        sampleDTS += sampleDuration;\n        rawDuration += sampleDuration;\n        remaining--;\n      }\n      while (remaining--) {\n        if (sampleDurationPresent) {\n          sampleDuration = readUint32(trun, offset);\n          offset += 4;\n        } else {\n          sampleDuration = defaultSampleDuration;\n        }\n        if (sampleSizePresent) {\n          offset += 4;\n        }\n        if (sampleFlagsPresent) {\n          const isNonSyncSample = trun[offset + 1] & 0x01;\n          if (!isNonSyncSample) {\n            if (trackTimes.keyFrameIndex === undefined) {\n              trackTimes.keyFrameIndex =\n                trackTimes.sampleCount - (remaining + 1);\n              trackTimes.keyFrameStart = sampleDTS;\n            }\n          }\n          offset += 4;\n        }\n        if (sampleCompositionTimeOffsetPresent) {\n          offset += 4;\n        }\n        sampleDTS += sampleDuration;\n        rawDuration += sampleDuration;\n      }\n      if (!rawDuration && defaultSampleDuration) {\n        rawDuration += defaultSampleDuration * sampleCount;\n      }\n    }\n    trackTimes.duration += rawDuration;\n  }\n  if (!Object.keys(tracks).some((trackId) => tracks[trackId].duration)) {\n    // If duration samples are not available in the traf use sidx subsegment_duration\n    let sidxMinStart = Infinity;\n    let sidxMaxEnd = 0;\n    const sidxs = findBox(data, ['sidx']);\n    for (let i = 0; i < sidxs.length; i++) {\n      const sidx = parseSegmentIndex(sidxs[i]);\n      if (sidx?.references) {\n        sidxMinStart = Math.min(\n          sidxMinStart,\n          sidx.earliestPresentationTime / sidx.timescale,\n        );\n        const subSegmentDuration = sidx.references.reduce(\n          (dur, ref) => dur + ref.info.duration || 0,\n          0,\n        );\n        sidxMaxEnd = Math.max(\n          sidxMaxEnd,\n          subSegmentDuration + sidx.earliestPresentationTime / sidx.timescale,\n        );\n      }\n    }\n    if (sidxMaxEnd && Number.isFinite(sidxMaxEnd)) {\n      Object.keys(tracks).forEach((trackId) => {\n        if (!tracks[trackId].duration) {\n          tracks[trackId].duration =\n            sidxMaxEnd * tracks[trackId].timescale - tracks[trackId].start;\n        }\n      });\n    }\n  }\n  return tracks;\n}\n\n// TODO: Check if the last moof+mdat pair is part of the valid range\nexport function segmentValidRange(\n  data: Uint8Array<ArrayBuffer>,\n): SegmentedRange {\n  const segmentedRange: SegmentedRange = {\n    valid: null,\n    remainder: null,\n  };\n\n  const moofs = findBox(data, ['moof']);\n  if (moofs.length < 2) {\n    segmentedRange.remainder = data;\n    return segmentedRange;\n  }\n  const last = moofs[moofs.length - 1];\n  // Offset by 8 bytes; findBox offsets the start by as much\n  segmentedRange.valid = data.slice(0, last.byteOffset - 8);\n  segmentedRange.remainder = data.slice(last.byteOffset - 8);\n  return segmentedRange;\n}\n\nexport interface SegmentedRange {\n  valid: Uint8Array<ArrayBuffer> | null;\n  remainder: Uint8Array<ArrayBuffer> | null;\n}\n\nexport function appendUint8Array(data1: Uint8Array, data2: Uint8Array) {\n  const temp = new Uint8Array(data1.length + data2.length);\n  temp.set(data1);\n  temp.set(data2, data1.length);\n  return temp;\n}\n\nexport interface IEmsgParsingData {\n  schemeIdUri: string;\n  value: string;\n  timeScale: number;\n  presentationTimeDelta?: number;\n  presentationTime?: number;\n  eventDuration: number;\n  id: number;\n  payload: Uint8Array;\n}\n\nexport function parseSamples(\n  timeOffset: number,\n  track: PassthroughTrack,\n): UserdataSample[] {\n  const seiSamples = [] as UserdataSample[];\n  const videoData = track.samples;\n  const timescale = track.timescale;\n  const trackId = track.id;\n  let isHEVCFlavor = false;\n\n  const moofs = findBox(videoData, ['moof']);\n  moofs.map((moof) => {\n    const moofOffset = moof.byteOffset - 8;\n    const trafs = findBox(moof, ['traf']);\n    trafs.map((traf) => {\n      // get the base media decode time from the tfdt\n      const baseTime = findBox(traf, ['tfdt']).map((tfdt) => {\n        const version = tfdt[0];\n        let result = readUint32(tfdt, 4);\n        if (version === 1) {\n          result *= Math.pow(2, 32);\n          result += readUint32(tfdt, 8);\n        }\n        return result / timescale;\n      })[0];\n\n      if ((baseTime as any) !== undefined) {\n        timeOffset = baseTime;\n      }\n\n      return findBox(traf, ['tfhd']).map((tfhd) => {\n        const id = readUint32(tfhd, 4);\n        const tfhdFlags = readUint32(tfhd, 0) & 0xffffff;\n        const baseDataOffsetPresent = (tfhdFlags & 0x000001) !== 0;\n        const sampleDescriptionIndexPresent = (tfhdFlags & 0x000002) !== 0;\n        const defaultSampleDurationPresent = (tfhdFlags & 0x000008) !== 0;\n        let defaultSampleDuration = 0;\n        const defaultSampleSizePresent = (tfhdFlags & 0x000010) !== 0;\n        let defaultSampleSize = 0;\n        const defaultSampleFlagsPresent = (tfhdFlags & 0x000020) !== 0;\n        let tfhdOffset = 8;\n\n        if (id === trackId) {\n          if (baseDataOffsetPresent) {\n            tfhdOffset += 8;\n          }\n          if (sampleDescriptionIndexPresent) {\n            tfhdOffset += 4;\n          }\n          if (defaultSampleDurationPresent) {\n            defaultSampleDuration = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleSizePresent) {\n            defaultSampleSize = readUint32(tfhd, tfhdOffset);\n            tfhdOffset += 4;\n          }\n          if (defaultSampleFlagsPresent) {\n            tfhdOffset += 4;\n          }\n          if (track.type === 'video') {\n            isHEVCFlavor = isHEVC(track.codec);\n          }\n\n          findBox(traf, ['trun']).map((trun) => {\n            const version = trun[0];\n            const flags = readUint32(trun, 0) & 0xffffff;\n            const dataOffsetPresent = (flags & 0x000001) !== 0;\n            let dataOffset = 0;\n            const firstSampleFlagsPresent = (flags & 0x000004) !== 0;\n            const sampleDurationPresent = (flags & 0x000100) !== 0;\n            let sampleDuration = 0;\n            const sampleSizePresent = (flags & 0x000200) !== 0;\n            let sampleSize = 0;\n            const sampleFlagsPresent = (flags & 0x000400) !== 0;\n            const sampleCompositionOffsetsPresent = (flags & 0x000800) !== 0;\n            let compositionOffset = 0;\n            const sampleCount = readUint32(trun, 4);\n            let trunOffset = 8; // past version, flags, and sample count\n\n            if (dataOffsetPresent) {\n              dataOffset = readUint32(trun, trunOffset);\n              trunOffset += 4;\n            }\n            if (firstSampleFlagsPresent) {\n              trunOffset += 4;\n            }\n\n            let sampleOffset = dataOffset + moofOffset;\n\n            for (let ix = 0; ix < sampleCount; ix++) {\n              if (sampleDurationPresent) {\n                sampleDuration = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleDuration = defaultSampleDuration;\n              }\n              if (sampleSizePresent) {\n                sampleSize = readUint32(trun, trunOffset);\n                trunOffset += 4;\n              } else {\n                sampleSize = defaultSampleSize;\n              }\n              if (sampleFlagsPresent) {\n                trunOffset += 4;\n              }\n              if (sampleCompositionOffsetsPresent) {\n                if (version === 0) {\n                  compositionOffset = readUint32(trun, trunOffset);\n                } else {\n                  compositionOffset = readSint32(trun, trunOffset);\n                }\n                trunOffset += 4;\n              }\n              if (track.type === ElementaryStreamTypes.VIDEO) {\n                let naluTotalSize = 0;\n                while (naluTotalSize < sampleSize) {\n                  const naluSize = readUint32(videoData, sampleOffset);\n                  sampleOffset += 4;\n                  if (isSEIMessage(isHEVCFlavor, videoData[sampleOffset])) {\n                    const data = videoData.subarray(\n                      sampleOffset,\n                      sampleOffset + naluSize,\n                    );\n                    parseSEIMessageFromNALu(\n                      data,\n                      isHEVCFlavor ? 2 : 1,\n                      timeOffset + compositionOffset / timescale,\n                      seiSamples,\n                    );\n                  }\n                  sampleOffset += naluSize;\n                  naluTotalSize += naluSize + 4;\n                }\n              }\n\n              timeOffset += sampleDuration / timescale;\n            }\n          });\n        }\n      });\n    });\n  });\n  return seiSamples;\n}\n\nexport function isHEVC(codec: string | undefined) {\n  if (!codec) {\n    return false;\n  }\n  const baseCodec = codec.substring(0, 4);\n  return (\n    baseCodec === 'hvc1' ||\n    baseCodec === 'hev1' ||\n    // Dolby Vision\n    baseCodec === 'dvh1' ||\n    baseCodec === 'dvhe'\n  );\n}\n\nfunction isSEIMessage(isHEVCFlavor: boolean, naluHeader: number) {\n  if (isHEVCFlavor) {\n    const naluType = (naluHeader >> 1) & 0x3f;\n    return naluType === 39 || naluType === 40;\n  } else {\n    const naluType = naluHeader & 0x1f;\n    return naluType === 6;\n  }\n}\n\nexport function parseSEIMessageFromNALu(\n  unescapedData: Uint8Array,\n  headerSize: number,\n  pts: number,\n  samples: UserdataSample[],\n) {\n  const data = discardEPB(unescapedData);\n  let seiPtr = 0;\n  // skip nal header\n  seiPtr += headerSize;\n  let payloadType = 0;\n  let payloadSize = 0;\n  let b = 0;\n\n  while (seiPtr < data.length) {\n    payloadType = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadType += b;\n    } while (b === 0xff);\n\n    // Parse payload size.\n    payloadSize = 0;\n    do {\n      if (seiPtr >= data.length) {\n        break;\n      }\n      b = data[seiPtr++];\n      payloadSize += b;\n    } while (b === 0xff);\n\n    const leftOver = data.length - seiPtr;\n    // Create a variable to process the payload\n    let payPtr = seiPtr;\n\n    // Increment the seiPtr to the end of the payload\n    if (payloadSize < leftOver) {\n      seiPtr += payloadSize;\n    } else if (payloadSize > leftOver) {\n      // Some type of corruption has happened?\n      logger.error(\n        `Malformed SEI payload. ${payloadSize} is too small, only ${leftOver} bytes left to parse.`,\n      );\n      // We might be able to parse some data, but let's be safe and ignore it.\n      break;\n    }\n\n    if (payloadType === 4) {\n      const countryCode = data[payPtr++];\n      if (countryCode === 181) {\n        const providerCode = readUint16(data, payPtr);\n        payPtr += 2;\n\n        if (providerCode === 49) {\n          const userStructure = readUint32(data, payPtr);\n          payPtr += 4;\n\n          if (userStructure === 0x47413934) {\n            const userDataType = data[payPtr++];\n\n            // Raw CEA-608 bytes wrapped in CEA-708 packet\n            if (userDataType === 3) {\n              const firstByte = data[payPtr++];\n              const totalCCs = 0x1f & firstByte;\n              const enabled = 0x40 & firstByte;\n              const totalBytes = enabled ? 2 + totalCCs * 3 : 0;\n              const byteArray = new Uint8Array(totalBytes);\n              if (enabled) {\n                byteArray[0] = firstByte;\n                for (let i = 1; i < totalBytes; i++) {\n                  byteArray[i] = data[payPtr++];\n                }\n              }\n\n              samples.push({\n                type: userDataType,\n                payloadType,\n                pts,\n                bytes: byteArray,\n              });\n            }\n          }\n        }\n      }\n    } else if (payloadType === 5) {\n      if (payloadSize > 16) {\n        const uuidStrArray: Array<string> = [];\n        for (let i = 0; i < 16; i++) {\n          const b = data[payPtr++].toString(16);\n          uuidStrArray.push(b.length == 1 ? '0' + b : b);\n\n          if (i === 3 || i === 5 || i === 7 || i === 9) {\n            uuidStrArray.push('-');\n          }\n        }\n        const length = payloadSize - 16;\n        const userDataBytes = new Uint8Array(length);\n        for (let i = 0; i < length; i++) {\n          userDataBytes[i] = data[payPtr++];\n        }\n\n        samples.push({\n          payloadType,\n          pts,\n          uuid: uuidStrArray.join(''),\n          userData: utf8ArrayToStr(userDataBytes),\n          userDataBytes,\n        });\n      }\n    }\n  }\n}\n\n/**\n * remove Emulation Prevention bytes from a RBSP\n */\nexport function discardEPB(data: Uint8Array): Uint8Array {\n  const length = data.byteLength;\n  const EPBPositions = [] as Array<number>;\n  let i = 1;\n\n  // Find all `Emulation Prevention Bytes`\n  while (i < length - 2) {\n    if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n      EPBPositions.push(i + 2);\n      i += 2;\n    } else {\n      i++;\n    }\n  }\n\n  // If no Emulation Prevention Bytes were found just return the original\n  // array\n  if (EPBPositions.length === 0) {\n    return data;\n  }\n\n  // Create a new array to hold the NAL unit data\n  const newLength = length - EPBPositions.length;\n  const newData = new Uint8Array(newLength);\n  let sourceIndex = 0;\n\n  for (i = 0; i < newLength; sourceIndex++, i++) {\n    if (sourceIndex === EPBPositions[0]) {\n      // Skip this byte\n      sourceIndex++;\n      // Remove this position index\n      EPBPositions.shift();\n    }\n    newData[i] = data[sourceIndex];\n  }\n  return newData;\n}\n\nexport function parseEmsg(data: Uint8Array): IEmsgParsingData {\n  const version = data[0];\n  let schemeIdUri: string = '';\n  let value: string = '';\n  let timeScale: number = 0;\n  let presentationTimeDelta: number = 0;\n  let presentationTime: number = 0;\n  let eventDuration: number = 0;\n  let id: number = 0;\n  let offset: number = 0;\n\n  if (version === 0) {\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    timeScale = readUint32(data, 12);\n    presentationTimeDelta = readUint32(data, 16);\n    eventDuration = readUint32(data, 20);\n    id = readUint32(data, 24);\n    offset = 28;\n  } else if (version === 1) {\n    offset += 4;\n    timeScale = readUint32(data, offset);\n    offset += 4;\n    const leftPresentationTime = readUint32(data, offset);\n    offset += 4;\n    const rightPresentationTime = readUint32(data, offset);\n    offset += 4;\n    presentationTime = 2 ** 32 * leftPresentationTime + rightPresentationTime;\n    if (!Number.isSafeInteger(presentationTime)) {\n      presentationTime = Number.MAX_SAFE_INTEGER;\n      logger.warn(\n        'Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box',\n      );\n    }\n\n    eventDuration = readUint32(data, offset);\n    offset += 4;\n    id = readUint32(data, offset);\n    offset += 4;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    schemeIdUri += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n\n    while (bin2str(data.subarray(offset, offset + 1)) !== '\\0') {\n      value += bin2str(data.subarray(offset, offset + 1));\n      offset += 1;\n    }\n\n    value += bin2str(data.subarray(offset, offset + 1));\n    offset += 1;\n  }\n  const payload = data.subarray(offset, data.byteLength);\n\n  return {\n    schemeIdUri,\n    value,\n    timeScale,\n    presentationTime,\n    presentationTimeDelta,\n    eventDuration,\n    id,\n    payload,\n  };\n}\n\nexport function mp4Box(type: ArrayLike<number>, ...payload: Uint8Array[]) {\n  const len = payload.length;\n  let size = 8;\n  let i = len;\n  while (i--) {\n    size += payload[i].byteLength;\n  }\n  const result = new Uint8Array(size);\n  result[0] = (size >> 24) & 0xff;\n  result[1] = (size >> 16) & 0xff;\n  result[2] = (size >> 8) & 0xff;\n  result[3] = size & 0xff;\n  result.set(type, 4);\n  for (i = 0, size = 8; i < len; i++) {\n    result.set(payload[i], size);\n    size += payload[i].byteLength;\n  }\n  return result;\n}\n\nexport function mp4pssh(\n  systemId: Uint8Array,\n  keyids: Array<Uint8Array> | null,\n  data: Uint8Array,\n) {\n  if (systemId.byteLength !== 16) {\n    throw new RangeError('Invalid system id');\n  }\n  let version;\n  let kids;\n  if (keyids) {\n    version = 1;\n    kids = new Uint8Array(keyids.length * 16);\n    for (let ix = 0; ix < keyids.length; ix++) {\n      const k = keyids[ix]; // uint8array\n      if (k.byteLength !== 16) {\n        throw new RangeError('Invalid key');\n      }\n      kids.set(k, ix * 16);\n    }\n  } else {\n    version = 0;\n    kids = new Uint8Array();\n  }\n  let kidCount;\n  if (version > 0) {\n    kidCount = new Uint8Array(4);\n    if (keyids!.length > 0) {\n      new DataView(kidCount.buffer).setUint32(0, keyids!.length, false);\n    }\n  } else {\n    kidCount = new Uint8Array();\n  }\n  const dataSize = new Uint8Array(4);\n  if (data.byteLength > 0) {\n    new DataView(dataSize.buffer).setUint32(0, data.byteLength, false);\n  }\n  return mp4Box(\n    [112, 115, 115, 104],\n    new Uint8Array([\n      version,\n      0x00,\n      0x00,\n      0x00, // Flags\n    ]),\n    systemId, // 16 bytes\n    kidCount,\n    kids,\n    dataSize,\n    data,\n  );\n}\n\nexport type PsshData = {\n  version: 0 | 1;\n  systemId: KeySystemIds;\n  kids: null | Uint8Array<ArrayBuffer>[];\n  data: null | Uint8Array<ArrayBuffer>;\n  offset: number;\n  size: number;\n};\n\nexport type PsshInvalidResult = {\n  systemId?: undefined;\n  kids?: undefined;\n  offset: number;\n  size: number;\n};\n\nexport function parseMultiPssh(\n  initData: ArrayBuffer,\n): (PsshData | PsshInvalidResult)[] {\n  const results: (PsshData | PsshInvalidResult)[] = [];\n  if (initData instanceof ArrayBuffer) {\n    const length = initData.byteLength;\n    let offset = 0;\n    while (offset + 32 < length) {\n      const view = new DataView(initData, offset);\n      const pssh = parsePssh(view);\n      results.push(pssh);\n      offset += pssh.size;\n    }\n  }\n  return results;\n}\n\nfunction parsePssh(view: DataView<ArrayBuffer>): PsshData | PsshInvalidResult {\n  const size = view.getUint32(0);\n  const offset = view.byteOffset;\n  const length = view.byteLength;\n  if (length < size) {\n    return {\n      offset,\n      size: length,\n    };\n  }\n  const type = view.getUint32(4);\n  if (type !== 0x70737368) {\n    return { offset, size };\n  }\n  const version = view.getUint32(8) >>> 24;\n  if (version !== 0 && version !== 1) {\n    return { offset, size };\n  }\n  const buffer = view.buffer;\n  const systemId = arrayToHex(\n    new Uint8Array(buffer, offset + 12, 16),\n  ) as KeySystemIds;\n\n  let kids: null | Uint8Array<ArrayBuffer>[] = null;\n  let data: null | Uint8Array<ArrayBuffer> = null;\n  let dataSizeOffset = 0;\n\n  if (version === 0) {\n    dataSizeOffset = 28;\n  } else {\n    const kidCounts = view.getUint32(28);\n    if (!kidCounts || length < 32 + kidCounts * 16) {\n      return { offset, size };\n    }\n    kids = [];\n    for (let i = 0; i < kidCounts; i++) {\n      kids.push(new Uint8Array(buffer, offset + 32 + i * 16, 16));\n    }\n    dataSizeOffset = 32 + kidCounts * 16;\n  }\n\n  if (!dataSizeOffset) {\n    return { offset, size };\n  }\n\n  const dataSizeOrKidCount = view.getUint32(dataSizeOffset);\n  if (size - 32 < dataSizeOrKidCount) {\n    return { offset, size };\n  }\n  data = new Uint8Array(\n    buffer,\n    offset + dataSizeOffset + 4,\n    dataSizeOrKidCount,\n  );\n  return {\n    version,\n    systemId,\n    kids,\n    data,\n    offset,\n    size,\n  };\n}\n","import { getMediaSource } from './mediasource-helper';\nimport { isHEVC } from './mp4-tools';\n\nexport const userAgentHevcSupportIsInaccurate = () => {\n  return /\\(Windows.+Firefox\\//i.test(navigator.userAgent);\n};\n\n// from http://mp4ra.org/codecs.html\n// values indicate codec selection preference (lower is higher priority)\nexport const sampleEntryCodesISO = {\n  audio: {\n    a3ds: 1,\n    'ac-3': 0.95,\n    'ac-4': 1,\n    alac: 0.9,\n    alaw: 1,\n    dra1: 1,\n    'dts+': 1,\n    'dts-': 1,\n    dtsc: 1,\n    dtse: 1,\n    dtsh: 1,\n    'ec-3': 0.9,\n    enca: 1,\n    fLaC: 0.9, // MP4-RA listed codec entry for FLAC\n    flac: 0.9, // legacy browser codec name for FLAC\n    FLAC: 0.9, // some manifests may list \"FLAC\" with Apple's tools\n    g719: 1,\n    g726: 1,\n    m4ae: 1,\n    mha1: 1,\n    mha2: 1,\n    mhm1: 1,\n    mhm2: 1,\n    mlpa: 1,\n    mp4a: 1,\n    'raw ': 1,\n    Opus: 1,\n    opus: 1, // browsers expect this to be lowercase despite MP4RA says 'Opus'\n    samr: 1,\n    sawb: 1,\n    sawp: 1,\n    sevc: 1,\n    sqcp: 1,\n    ssmv: 1,\n    twos: 1,\n    ulaw: 1,\n  },\n  video: {\n    avc1: 1,\n    avc2: 1,\n    avc3: 1,\n    avc4: 1,\n    avcp: 1,\n    av01: 0.8,\n    dav1: 0.8,\n    drac: 1,\n    dva1: 1,\n    dvav: 1,\n    dvh1: 0.7,\n    dvhe: 0.7,\n    encv: 1,\n    hev1: 0.75,\n    hvc1: 0.75,\n    mjp2: 1,\n    mp4v: 1,\n    mvc1: 1,\n    mvc2: 1,\n    mvc3: 1,\n    mvc4: 1,\n    resv: 1,\n    rv60: 1,\n    s263: 1,\n    svc1: 1,\n    svc2: 1,\n    'vc-1': 1,\n    vp08: 1,\n    vp09: 0.9,\n  },\n  text: {\n    stpp: 1,\n    wvtt: 1,\n  },\n} as const;\n\nexport type CodecType = 'audio' | 'video';\n\nexport function isCodecType(codec: string, type: CodecType): boolean {\n  const typeCodes = sampleEntryCodesISO[type];\n  return !!typeCodes && !!typeCodes[codec.slice(0, 4)];\n}\n\nexport function areCodecsMediaSourceSupported(\n  codecs: string,\n  type: CodecType,\n  preferManagedMediaSource = true,\n): boolean {\n  return !codecs\n    .split(',')\n    .some(\n      (codec) =>\n        !isCodecMediaSourceSupported(codec, type, preferManagedMediaSource),\n    );\n}\n\nfunction isCodecMediaSourceSupported(\n  codec: string,\n  type: CodecType,\n  preferManagedMediaSource = true,\n): boolean {\n  const MediaSource = getMediaSource(preferManagedMediaSource);\n  return MediaSource?.isTypeSupported(mimeTypeForCodec(codec, type)) ?? false;\n}\n\nexport function mimeTypeForCodec(codec: string, type: CodecType): string {\n  return `${type}/mp4;codecs=${codec}`;\n}\n\nexport function videoCodecPreferenceValue(\n  videoCodec: string | undefined,\n): number {\n  if (videoCodec) {\n    const fourCC = videoCodec.substring(0, 4);\n    return sampleEntryCodesISO.video[fourCC];\n  }\n  return 2;\n}\n\nexport function codecsSetSelectionPreferenceValue(codecSet: string): number {\n  const limitedHevcSupport = userAgentHevcSupportIsInaccurate();\n  return codecSet.split(',').reduce((num, fourCC) => {\n    const lowerPriority = limitedHevcSupport && isHEVC(fourCC);\n    const preferenceValue = lowerPriority\n      ? 9\n      : sampleEntryCodesISO.video[fourCC];\n    if (preferenceValue) {\n      return (preferenceValue * 2 + num) / (num ? 3 : 2);\n    }\n    return (sampleEntryCodesISO.audio[fourCC] + num) / (num ? 2 : 1);\n  }, 0);\n}\n\ninterface CodecNameCache {\n  flac?: string;\n  opus?: string;\n}\n\nconst CODEC_COMPATIBLE_NAMES: CodecNameCache = {};\n\ntype LowerCaseCodecType = 'flac' | 'opus';\n\nfunction getCodecCompatibleNameLower(\n  lowerCaseCodec: LowerCaseCodecType,\n  preferManagedMediaSource = true,\n): string {\n  if (CODEC_COMPATIBLE_NAMES[lowerCaseCodec]) {\n    return CODEC_COMPATIBLE_NAMES[lowerCaseCodec]!;\n  }\n\n  const codecsToCheck = {\n    // Idealy fLaC and Opus would be first (spec-compliant) but\n    // some browsers will report that fLaC is supported then fail.\n    // see: https://bugs.chromium.org/p/chromium/issues/detail?id=1422728\n    flac: ['flac', 'fLaC', 'FLAC'],\n    opus: ['opus', 'Opus'],\n    // Replace audio codec info if browser does not support mp4a.40.34,\n    // and demuxer can fallback to 'audio/mpeg' or 'audio/mp4;codecs=\"mp3\"'\n    'mp4a.40.34': ['mp3'],\n  }[lowerCaseCodec];\n\n  for (let i = 0; i < codecsToCheck.length; i++) {\n    if (\n      isCodecMediaSourceSupported(\n        codecsToCheck[i],\n        'audio',\n        preferManagedMediaSource,\n      )\n    ) {\n      CODEC_COMPATIBLE_NAMES[lowerCaseCodec] = codecsToCheck[i];\n      return codecsToCheck[i];\n    } else if (\n      codecsToCheck[i] === 'mp3' &&\n      getMediaSource(preferManagedMediaSource)?.isTypeSupported('audio/mpeg')\n    ) {\n      return '';\n    }\n  }\n\n  return lowerCaseCodec;\n}\n\nconst AUDIO_CODEC_REGEXP = /flac|opus|mp4a\\.40\\.34/i;\nexport function getCodecCompatibleName(\n  codec: string,\n  preferManagedMediaSource = true,\n): string {\n  return codec.replace(AUDIO_CODEC_REGEXP, (m) =>\n    getCodecCompatibleNameLower(\n      m.toLowerCase() as LowerCaseCodecType,\n      preferManagedMediaSource,\n    ),\n  );\n}\n\nexport function replaceVideoCodec(\n  originalCodecs: string | undefined,\n  newVideoCodec: string | undefined,\n): string | undefined {\n  const codecs: string[] = [];\n  if (originalCodecs) {\n    const allCodecs = originalCodecs.split(',');\n    for (let i = 0; i < allCodecs.length; i++) {\n      if (!isCodecType(allCodecs[i], 'video')) {\n        codecs.push(allCodecs[i]);\n      }\n    }\n  }\n  if (newVideoCodec) {\n    codecs.push(newVideoCodec);\n  }\n  return codecs.join(',');\n}\n\nexport function pickMostCompleteCodecName(\n  parsedCodec: string | undefined,\n  levelCodec: string | undefined,\n): string | undefined {\n  // Parsing of mp4a codecs strings in mp4-tools from media is incomplete as of d8c6c7a\n  // so use level codec is parsed codec is unavailable or incomplete\n  if (\n    parsedCodec &&\n    (parsedCodec.length > 4 ||\n      ['ac-3', 'ec-3', 'alac', 'fLaC', 'Opus'].indexOf(parsedCodec) !== -1)\n  ) {\n    if (\n      isCodecSupportedAsType(parsedCodec, 'audio') ||\n      isCodecSupportedAsType(parsedCodec, 'video')\n    ) {\n      return parsedCodec;\n    }\n  }\n  if (levelCodec) {\n    const levelCodecs = levelCodec.split(',');\n    if (levelCodecs.length > 1) {\n      if (parsedCodec) {\n        for (let i = levelCodecs.length; i--; ) {\n          if (levelCodecs[i].substring(0, 4) === parsedCodec.substring(0, 4)) {\n            return levelCodecs[i];\n          }\n        }\n      }\n      return levelCodecs[0];\n    }\n  }\n  return levelCodec || parsedCodec;\n}\n\nfunction isCodecSupportedAsType(codec: string, type: CodecType): boolean {\n  return isCodecType(codec, type) && isCodecMediaSourceSupported(codec, type);\n}\n\nexport function convertAVC1ToAVCOTI(videoCodecs: string): string {\n  // Convert avc1 codec string from RFC-4281 to RFC-6381 for MediaSource.isTypeSupported\n  // Examples: avc1.66.30 to avc1.42001e and avc1.77.30,avc1.66.30 to avc1.4d001e,avc1.42001e.\n  const codecs = videoCodecs.split(',');\n  for (let i = 0; i < codecs.length; i++) {\n    const avcdata = codecs[i].split('.');\n    // only convert codec strings starting with avc1 (Examples: avc1.64001f,dvh1.05.07)\n    if (avcdata.length > 2 && avcdata[0] === 'avc1') {\n      codecs[i] = `avc1.${parseInt(avcdata[1]).toString(16)}${(\n        '000' + parseInt(avcdata[2]).toString(16)\n      ).slice(-4)}`;\n    }\n  }\n  return codecs.join(',');\n}\n\nexport function fillInMissingAV01Params(videoCodec: string): string {\n  // Used to fill in incomplete AV1 playlist CODECS strings for mediaCapabilities.decodingInfo queries\n  if (videoCodec.startsWith('av01.')) {\n    const av1params = videoCodec.split('.');\n    const placeholders = ['0', '111', '01', '01', '01', '0'];\n    for (let i = av1params.length; i > 4 && i < 10; i++) {\n      av1params[i] = placeholders[i - 4];\n    }\n    return av1params.join('.');\n  }\n  return videoCodec;\n}\n\nexport interface TypeSupported {\n  mpeg: boolean;\n  mp3: boolean;\n  ac3: boolean;\n}\n\nexport function getM2TSSupportedAudioTypes(\n  preferManagedMediaSource: boolean,\n): TypeSupported {\n  const MediaSource = getMediaSource(preferManagedMediaSource) || {\n    isTypeSupported: () => false,\n  };\n  return {\n    mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n    mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"'),\n    ac3: __USE_M2TS_ADVANCED_CODECS__\n      ? MediaSource.isTypeSupported('audio/mp4; codecs=\"ac-3\"')\n      : false,\n  };\n}\n\nexport function getCodecsForMimeType(mimeType: string): string {\n  return mimeType.replace(/^.+codecs=[\"']?([^\"']+).*$/, '$1');\n}\n","import {\n  fillInMissingAV01Params,\n  getCodecsForMimeType,\n  mimeTypeForCodec,\n  userAgentHevcSupportIsInaccurate,\n} from './codecs';\nimport { isHEVC } from './mp4-tools';\nimport type { AudioTracksByGroup } from './rendition-helper';\nimport type { Level, VideoRange } from '../types/level';\nimport type { AudioSelectionOption } from '../types/media-playlist';\n\nexport type MediaDecodingInfo = {\n  supported: boolean;\n  configurations: readonly MediaDecodingConfiguration[];\n  decodingInfoResults: readonly MediaCapabilitiesDecodingInfo[];\n  error?: Error;\n};\n\n// @ts-ignore\nconst supportedResult: MediaCapabilitiesDecodingInfo = {\n  supported: true,\n  powerEfficient: true,\n  smooth: true,\n  // keySystemAccess: null,\n};\n\n// @ts-ignore\nconst unsupportedResult: MediaCapabilitiesDecodingInfo = {\n  supported: false,\n  smooth: false,\n  powerEfficient: false,\n  // keySystemAccess: null,\n};\n\nexport const SUPPORTED_INFO_DEFAULT: MediaDecodingInfo = {\n  supported: true,\n  configurations: [] as MediaDecodingConfiguration[],\n  decodingInfoResults: [supportedResult],\n} as const;\n\nexport function getUnsupportedResult(\n  error: Error,\n  configurations: MediaDecodingConfiguration[],\n): MediaDecodingInfo {\n  return {\n    supported: false,\n    configurations,\n    decodingInfoResults: [unsupportedResult],\n    error,\n  };\n}\n\nexport function requiresMediaCapabilitiesDecodingInfo(\n  level: Level,\n  audioTracksByGroup: AudioTracksByGroup,\n  currentVideoRange: VideoRange | undefined,\n  currentFrameRate: number,\n  currentBw: number,\n  audioPreference: AudioSelectionOption | undefined,\n): boolean {\n  // Only test support when configuration is exceeds minimum options\n  const videoCodecs = level.videoCodec;\n  const audioGroups = level.audioCodec ? level.audioGroups : null;\n  const audioCodecPreference = audioPreference?.audioCodec;\n  const channelsPreference = audioPreference?.channels;\n  const maxChannels = channelsPreference\n    ? parseInt(channelsPreference)\n    : audioCodecPreference\n      ? Infinity\n      : 2;\n  let audioChannels: Record<string, number> | null = null;\n  if (audioGroups?.length) {\n    try {\n      if (audioGroups.length === 1 && audioGroups[0]) {\n        audioChannels = audioTracksByGroup.groups[audioGroups[0]].channels;\n      } else {\n        audioChannels = audioGroups.reduce(\n          (acc, groupId) => {\n            if (groupId) {\n              const audioTrackGroup = audioTracksByGroup.groups[groupId];\n              if (!audioTrackGroup) {\n                throw new Error(`Audio track group ${groupId} not found`);\n              }\n              // Sum all channel key values\n              Object.keys(audioTrackGroup.channels).forEach((key) => {\n                acc[key] = (acc[key] || 0) + audioTrackGroup.channels[key];\n              });\n            }\n            return acc;\n          },\n          { 2: 0 },\n        );\n      }\n    } catch (error) {\n      return true;\n    }\n  }\n  return (\n    (videoCodecs !== undefined &&\n      // Force media capabilities check for HEVC to avoid failure on Windows\n      (videoCodecs.split(',').some((videoCodec) => isHEVC(videoCodec)) ||\n        (level.width > 1920 && level.height > 1088) ||\n        (level.height > 1920 && level.width > 1088) ||\n        level.frameRate > Math.max(currentFrameRate, 30) ||\n        (level.videoRange !== 'SDR' &&\n          level.videoRange !== currentVideoRange) ||\n        level.bitrate > Math.max(currentBw, 8e6))) ||\n    (!!audioChannels &&\n      Number.isFinite(maxChannels) &&\n      Object.keys(audioChannels).some(\n        (channels) => parseInt(channels) > maxChannels,\n      ))\n  );\n}\n\nexport function getMediaDecodingInfoPromise(\n  level: Level,\n  audioTracksByGroup: AudioTracksByGroup,\n  mediaCapabilities: MediaCapabilities | undefined,\n  cache: Record<\n    string,\n    Promise<MediaCapabilitiesDecodingInfo> | undefined\n  > = {},\n): Promise<MediaDecodingInfo> {\n  const videoCodecs = level.videoCodec;\n  if ((!videoCodecs && !level.audioCodec) || !mediaCapabilities) {\n    return Promise.resolve(SUPPORTED_INFO_DEFAULT);\n  }\n\n  const configurations: MediaDecodingConfiguration[] = [];\n\n  const videoDecodeList = makeVideoConfigurations(level);\n  const videoCount = videoDecodeList.length;\n  const audioDecodeList = makeAudioConfigurations(\n    level,\n    audioTracksByGroup,\n    videoCount > 0,\n  );\n  const audioCount = audioDecodeList.length;\n  for (let i = videoCount || 1 * audioCount || 1; i--; ) {\n    const configuration: MediaDecodingConfiguration = {\n      type: 'media-source',\n    };\n    if (videoCount) {\n      configuration.video = videoDecodeList[i % videoCount];\n    }\n    if (audioCount) {\n      configuration.audio = audioDecodeList[i % audioCount];\n      const audioBitrate = configuration.audio.bitrate;\n      if (configuration.video && audioBitrate) {\n        configuration.video.bitrate -= audioBitrate;\n      }\n    }\n    configurations.push(configuration);\n  }\n\n  if (videoCodecs) {\n    // Override Windows Firefox HEVC MediaCapabilities result (https://github.com/video-dev/hls.js/issues/7046)\n    const ua = navigator.userAgent;\n    if (\n      videoCodecs.split(',').some((videoCodec) => isHEVC(videoCodec)) &&\n      userAgentHevcSupportIsInaccurate()\n    ) {\n      return Promise.resolve(\n        getUnsupportedResult(\n          new Error(\n            `Overriding Windows Firefox HEVC MediaCapabilities result based on user-agent string: (${ua})`,\n          ),\n          configurations,\n        ),\n      );\n    }\n  }\n\n  return Promise.all(\n    configurations.map((configuration) => {\n      // Cache MediaCapabilities promises\n      const decodingInfoKey = getMediaDecodingInfoKey(configuration);\n      return (\n        cache[decodingInfoKey] ||\n        (cache[decodingInfoKey] = mediaCapabilities.decodingInfo(configuration))\n      );\n    }),\n  )\n    .then((decodingInfoResults) => ({\n      supported: !decodingInfoResults.some((info) => !info.supported),\n      configurations,\n      decodingInfoResults,\n    }))\n    .catch((error) => ({\n      supported: false,\n      configurations,\n      decodingInfoResults: [] as MediaCapabilitiesDecodingInfo[],\n      error,\n    }));\n}\n\nfunction makeVideoConfigurations(level: Level): VideoConfiguration[] {\n  const videoCodecs = level.videoCodec?.split(',');\n  const bitrate = getVariantDecodingBitrate(level);\n  const width = level.width || 640;\n  const height = level.height || 480;\n  // Assume a framerate of 30fps since MediaCapabilities will not accept Level default of 0.\n  const framerate = level.frameRate || 30;\n  const videoRange = level.videoRange.toLowerCase() as 'sdr' | 'pq' | 'hlg';\n  return videoCodecs\n    ? videoCodecs.map((videoCodec: string) => {\n        const videoConfiguration: VideoConfiguration = {\n          contentType: mimeTypeForCodec(\n            fillInMissingAV01Params(videoCodec),\n            'video',\n          ),\n          width,\n          height,\n          bitrate,\n          framerate,\n        };\n        if (videoRange !== 'sdr') {\n          videoConfiguration.transferFunction = videoRange as TransferFunction;\n        }\n        return videoConfiguration;\n      })\n    : [];\n}\n\nfunction makeAudioConfigurations(\n  level: Level,\n  audioTracksByGroup: AudioTracksByGroup,\n  hasVideo: boolean,\n): AudioConfiguration[] {\n  const audioCodecs = level.audioCodec?.split(',');\n  const combinedBitrate = getVariantDecodingBitrate(level);\n  if (audioCodecs && level.audioGroups) {\n    return level.audioGroups.reduce((configurations, audioGroupId) => {\n      const tracks = audioGroupId\n        ? audioTracksByGroup.groups[audioGroupId]?.tracks\n        : null;\n      if (tracks) {\n        return tracks.reduce((configs, audioTrack) => {\n          if (audioTrack.groupId === audioGroupId) {\n            const channelsNumber = parseFloat(audioTrack.channels || '');\n            audioCodecs.forEach((audioCodec) => {\n              const audioConfiguration: AudioConfiguration = {\n                contentType: mimeTypeForCodec(audioCodec, 'audio'),\n                bitrate: hasVideo\n                  ? estimatedAudioBitrate(audioCodec, combinedBitrate)\n                  : combinedBitrate,\n              };\n              if (channelsNumber) {\n                audioConfiguration.channels = '' + channelsNumber;\n              }\n              configs.push(audioConfiguration);\n            });\n          }\n          return configs;\n        }, configurations);\n      }\n      return configurations;\n    }, [] as AudioConfiguration[]);\n  }\n  return [];\n}\n\nfunction estimatedAudioBitrate(\n  audioCodec: string,\n  levelBitrate: number,\n): number {\n  if (levelBitrate <= 1) {\n    return 1;\n  }\n  let audioBitrate = 128000;\n  if (audioCodec === 'ec-3') {\n    audioBitrate = 768000;\n  } else if (audioCodec === 'ac-3') {\n    audioBitrate = 640000;\n  }\n  return Math.min(levelBitrate / 2, audioBitrate); // Don't exceed some % of level bitrate\n}\n\nfunction getVariantDecodingBitrate(level: Level): number {\n  return (\n    Math.ceil(Math.max(level.bitrate * 0.9, level.averageBitrate) / 1000) *\n      1000 || 1\n  );\n}\n\nfunction getMediaDecodingInfoKey(config: MediaDecodingConfiguration): string {\n  let key = '';\n  const { audio, video } = config;\n  if (video) {\n    const codec = getCodecsForMimeType(video.contentType);\n    key += `${codec}_r${video.height}x${video.width}f${Math.ceil(video.framerate)}${\n      video.transferFunction || 'sd'\n    }_${Math.ceil(video.bitrate / 1e5)}`;\n  }\n  if (audio) {\n    const codec = getCodecsForMimeType(audio.contentType);\n    key += `${video ? '_' : ''}${codec}_c${audio.channels}`;\n  }\n  return key;\n}\n","import type { MediaPlaylist } from './media-playlist';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { AttrList } from '../utils/attr-list';\nimport type { MediaDecodingInfo } from '../utils/mediacapabilities-helper';\n\nexport interface LevelParsed extends CodecsParsed {\n  attrs: LevelAttributes;\n  bitrate: number;\n  details?: LevelDetails;\n  height?: number;\n  id?: number;\n  name: string;\n  supplemental?: CodecsParsed;\n  url: string;\n  width?: number;\n}\n\nexport interface CodecsParsed {\n  audioCodec?: string;\n  videoCodec?: string;\n  textCodec?: string;\n  unknownCodecs?: string[];\n}\n\nexport interface LevelAttributes extends AttrList {\n  'ALLOWED-CPC'?: string;\n  AUDIO?: string;\n  'AVERAGE-BANDWIDTH'?: string;\n  BANDWIDTH?: string;\n  'CLOSED-CAPTIONS'?: string;\n  CODECS?: string;\n  'FRAME-RATE'?: string;\n  'HDCP-LEVEL'?: 'TYPE-0' | 'TYPE-1' | 'NONE';\n  'PATHWAY-ID'?: string;\n  RESOLUTION?: string;\n  SCORE?: string;\n  'STABLE-VARIANT-ID'?: string;\n  SUBTITLES?: string;\n  'SUPPLEMENTAL-CODECS'?: string;\n  VIDEO?: string;\n  'VIDEO-RANGE'?: VideoRange;\n}\n\nexport const HdcpLevels = ['NONE', 'TYPE-0', 'TYPE-1', null] as const;\nexport type HdcpLevel = (typeof HdcpLevels)[number];\n\nexport function isHdcpLevel(value: any): value is HdcpLevel {\n  return HdcpLevels.indexOf(value) > -1;\n}\n\nexport const VideoRangeValues = ['SDR', 'PQ', 'HLG'] as const;\nexport type VideoRange = (typeof VideoRangeValues)[number];\n\nexport function isVideoRange(value: any): value is VideoRange {\n  return !!value && VideoRangeValues.indexOf(value) > -1;\n}\n\nexport type VariableMap = Record<string, string>;\n\nexport const enum HlsSkip {\n  No = '',\n  Yes = 'YES',\n  v2 = 'v2',\n}\n\nexport function getSkipValue(details: LevelDetails): HlsSkip {\n  const { canSkipUntil, canSkipDateRanges, age } = details;\n  // A Client SHOULD NOT request a Playlist Delta Update unless it already\n  // has a version of the Playlist that is no older than one-half of the Skip Boundary.\n  // @see: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-6.3.7\n  const playlistRecentEnough = age < canSkipUntil / 2;\n  if (canSkipUntil && playlistRecentEnough) {\n    if (canSkipDateRanges) {\n      return HlsSkip.v2;\n    }\n    return HlsSkip.Yes;\n  }\n  return HlsSkip.No;\n}\n\nexport class HlsUrlParameters {\n  msn?: number;\n  part?: number;\n  skip?: HlsSkip;\n\n  constructor(msn?: number, part?: number, skip?: HlsSkip) {\n    this.msn = msn;\n    this.part = part;\n    this.skip = skip;\n  }\n\n  addDirectives(uri: string): string | never {\n    const url: URL = new self.URL(uri);\n    if (this.msn !== undefined) {\n      url.searchParams.set('_HLS_msn', this.msn.toString());\n    }\n    if (this.part !== undefined) {\n      url.searchParams.set('_HLS_part', this.part.toString());\n    }\n    if (this.skip) {\n      url.searchParams.set('_HLS_skip', this.skip);\n    }\n    return url.href;\n  }\n}\n\nexport class Level {\n  public readonly _attrs: LevelAttributes[];\n  public readonly audioCodec: string | undefined;\n  public readonly bitrate: number;\n  public readonly codecSet: string;\n  public readonly url: string[];\n  public readonly frameRate: number;\n  public readonly height: number;\n  public readonly id: number;\n  public readonly name: string;\n  public readonly supplemental: CodecsParsed | undefined;\n  public readonly videoCodec: string | undefined;\n  public readonly width: number;\n  public details?: LevelDetails;\n  public fragmentError: number = 0;\n  public loadError: number = 0;\n  public loaded?: { bytes: number; duration: number };\n  public realBitrate: number = 0;\n  public supportedPromise?: Promise<MediaDecodingInfo>;\n  public supportedResult?: MediaDecodingInfo;\n  private _avgBitrate: number = 0;\n  private _audioGroups?: (string | undefined)[];\n  private _subtitleGroups?: (string | undefined)[];\n  // Deprecated (retained for backwards compatibility)\n  private readonly _urlId: number = 0;\n\n  constructor(data: LevelParsed | MediaPlaylist) {\n    this.url = [data.url];\n    this._attrs = [data.attrs];\n    this.bitrate = data.bitrate;\n    if (data.details) {\n      this.details = data.details;\n    }\n    this.id = data.id || 0;\n    this.name = data.name;\n    this.width = data.width || 0;\n    this.height = data.height || 0;\n    this.frameRate = data.attrs.optionalFloat('FRAME-RATE', 0);\n    this._avgBitrate = data.attrs.decimalInteger('AVERAGE-BANDWIDTH');\n    this.audioCodec = data.audioCodec;\n    this.videoCodec = data.videoCodec;\n    this.codecSet = [data.videoCodec, data.audioCodec]\n      .filter((c) => !!c)\n      .map((s: string) => s.substring(0, 4))\n      .join(',');\n    if ('supplemental' in data) {\n      this.supplemental = data.supplemental;\n      const supplementalVideo = data.supplemental?.videoCodec;\n      if (supplementalVideo && supplementalVideo !== data.videoCodec) {\n        this.codecSet += `,${supplementalVideo.substring(0, 4)}`;\n      }\n    }\n    this.addGroupId('audio', data.attrs.AUDIO);\n    this.addGroupId('text', data.attrs.SUBTITLES);\n  }\n\n  get maxBitrate(): number {\n    return Math.max(this.realBitrate, this.bitrate);\n  }\n\n  get averageBitrate(): number {\n    return this._avgBitrate || this.realBitrate || this.bitrate;\n  }\n\n  get attrs(): LevelAttributes {\n    return this._attrs[0];\n  }\n\n  get codecs(): string {\n    return this.attrs.CODECS || '';\n  }\n\n  get pathwayId(): string {\n    return this.attrs['PATHWAY-ID'] || '.';\n  }\n\n  get videoRange(): VideoRange {\n    return this.attrs['VIDEO-RANGE'] || 'SDR';\n  }\n\n  get score(): number {\n    return this.attrs.optionalFloat('SCORE', 0);\n  }\n\n  get uri(): string {\n    return this.url[0] || '';\n  }\n\n  hasAudioGroup(groupId: string | undefined): boolean {\n    return hasGroup(this._audioGroups, groupId);\n  }\n\n  hasSubtitleGroup(groupId: string | undefined): boolean {\n    return hasGroup(this._subtitleGroups, groupId);\n  }\n\n  get audioGroups(): (string | undefined)[] | undefined {\n    return this._audioGroups;\n  }\n\n  get subtitleGroups(): (string | undefined)[] | undefined {\n    return this._subtitleGroups;\n  }\n\n  addGroupId(type: string, groupId: string | undefined) {\n    if (!groupId) {\n      return;\n    }\n    if (type === 'audio') {\n      let audioGroups = this._audioGroups;\n      if (!audioGroups) {\n        audioGroups = this._audioGroups = [];\n      }\n      if (audioGroups.indexOf(groupId) === -1) {\n        audioGroups.push(groupId);\n      }\n    } else if (type === 'text') {\n      let subtitleGroups = this._subtitleGroups;\n      if (!subtitleGroups) {\n        subtitleGroups = this._subtitleGroups = [];\n      }\n      if (subtitleGroups.indexOf(groupId) === -1) {\n        subtitleGroups.push(groupId);\n      }\n    }\n  }\n\n  // Deprecated methods (retained for backwards compatibility)\n  get urlId(): number {\n    return 0;\n  }\n\n  set urlId(value: number) {}\n\n  get audioGroupIds(): (string | undefined)[] | undefined {\n    return this.audioGroups ? [this.audioGroupId] : undefined;\n  }\n\n  get textGroupIds(): (string | undefined)[] | undefined {\n    return this.subtitleGroups ? [this.textGroupId] : undefined;\n  }\n\n  get audioGroupId(): string | undefined {\n    return this.audioGroups?.[0];\n  }\n\n  get textGroupId(): string | undefined {\n    return this.subtitleGroups?.[0];\n  }\n\n  addFallback() {}\n}\n\nfunction hasGroup(\n  groups: (string | undefined)[] | undefined,\n  groupId: string | undefined,\n): boolean {\n  if (!groupId || !groups) {\n    return false;\n  }\n  return groups.indexOf(groupId) !== -1;\n}\n","import { type VideoRange, VideoRangeValues } from '../types/level';\nimport type { VideoSelectionOption } from '../types/media-playlist';\n\n/**\n * @returns Whether we can detect and validate HDR capability within the window context\n */\nexport function isHdrSupported() {\n  if (typeof matchMedia === 'function') {\n    const mediaQueryList = matchMedia('(dynamic-range: high)');\n    const badQuery = matchMedia('bad query');\n    if (mediaQueryList.media !== badQuery.media) {\n      return mediaQueryList.matches === true;\n    }\n  }\n  return false;\n}\n\n/**\n * Sanitizes inputs to return the active video selection options for HDR/SDR.\n * When both inputs are null:\n *\n *    `{ preferHDR: false, allowedVideoRanges: [] }`\n *\n * When `currentVideoRange` non-null, maintain the active range:\n *\n *    `{ preferHDR: currentVideoRange !== 'SDR', allowedVideoRanges: [currentVideoRange] }`\n *\n * When VideoSelectionOption non-null:\n *\n *  - Allow all video ranges if `allowedVideoRanges` unspecified.\n *  - If `preferHDR` is non-null use the value to filter `allowedVideoRanges`.\n *  - Else check window for HDR support and set `preferHDR` to the result.\n *\n * @param currentVideoRange\n * @param videoPreference\n */\nexport function getVideoSelectionOptions(\n  currentVideoRange: VideoRange | undefined,\n  videoPreference: VideoSelectionOption | undefined,\n) {\n  let preferHDR = false;\n  let allowedVideoRanges: Array<VideoRange> = [];\n\n  if (currentVideoRange) {\n    preferHDR = currentVideoRange !== 'SDR';\n    allowedVideoRanges = [currentVideoRange];\n  }\n\n  if (videoPreference) {\n    allowedVideoRanges =\n      videoPreference.allowedVideoRanges || VideoRangeValues.slice(0);\n    const allowAutoPreferHDR =\n      allowedVideoRanges.join('') !== 'SDR' && !videoPreference.videoCodec;\n    preferHDR =\n      videoPreference.preferHDR !== undefined\n        ? videoPreference.preferHDR\n        : allowAutoPreferHDR && isHdrSupported();\n    if (!preferHDR) {\n      allowedVideoRanges = ['SDR'];\n    }\n  }\n\n  return {\n    preferHDR,\n    allowedVideoRanges,\n  };\n}\n","const omitCircularRefsReplacer = (\n  replacer: ((this: any, key: string, value: any) => any) | undefined,\n) => {\n  const known = new WeakSet();\n  return (_, value) => {\n    if (replacer) {\n      value = replacer(_, value);\n    }\n    if (typeof value === 'object' && value !== null) {\n      if (known.has(value)) {\n        return;\n      }\n      known.add(value);\n    }\n    return value;\n  };\n};\n\nexport const stringify = <T>(\n  object: T,\n  replacer?: (this: any, key: string, value: any) => any,\n): string => JSON.stringify(object, omitCircularRefsReplacer(replacer));\n","import { codecsSetSelectionPreferenceValue } from './codecs';\nimport { getVideoSelectionOptions } from './hdr';\nimport { logger } from './logger';\nimport { stringify } from './safe-json-stringify';\nimport type Hls from '../hls';\nimport type { Level, VideoRange } from '../types/level';\nimport type {\n  AudioSelectionOption,\n  MediaPlaylist,\n  SubtitleSelectionOption,\n  VideoSelectionOption,\n} from '../types/media-playlist';\n\nexport type CodecSetTier = {\n  minBitrate: number;\n  minHeight: number;\n  minFramerate: number;\n  minIndex: number;\n  maxScore: number;\n  videoRanges: Record<string, number>;\n  channels: Record<string, number>;\n  hasDefaultAudio: boolean;\n  fragmentError: number;\n};\n\ntype AudioTrackGroup = {\n  tracks: MediaPlaylist[];\n  channels: Record<string, number>;\n  hasDefault: boolean;\n  hasAutoSelect: boolean;\n};\ntype StartParameters = {\n  codecSet: string | undefined;\n  videoRanges: Array<VideoRange>;\n  preferHDR: boolean;\n  minFramerate: number;\n  minBitrate: number;\n  minIndex: number;\n};\n\nexport function getStartCodecTier(\n  codecTiers: Record<string, CodecSetTier>,\n  currentVideoRange: VideoRange | undefined,\n  currentBw: number,\n  audioPreference: AudioSelectionOption | undefined,\n  videoPreference: VideoSelectionOption | undefined,\n): StartParameters {\n  const codecSets = Object.keys(codecTiers);\n  const channelsPreference = audioPreference?.channels;\n  const audioCodecPreference = audioPreference?.audioCodec;\n  const videoCodecPreference = videoPreference?.videoCodec;\n  const preferStereo = channelsPreference && parseInt(channelsPreference) === 2;\n  // Use first level set to determine stereo, and minimum resolution and framerate\n  let hasStereo = false;\n  let hasCurrentVideoRange = false;\n  let minHeight = Infinity;\n  let minFramerate = Infinity;\n  let minBitrate = Infinity;\n  let minIndex = Infinity;\n  let selectedScore = 0;\n  let videoRanges: Array<VideoRange> = [];\n\n  const { preferHDR, allowedVideoRanges } = getVideoSelectionOptions(\n    currentVideoRange,\n    videoPreference,\n  );\n\n  for (let i = codecSets.length; i--; ) {\n    const tier = codecTiers[codecSets[i]];\n    hasStereo ||= tier.channels[2] > 0;\n    minHeight = Math.min(minHeight, tier.minHeight);\n    minFramerate = Math.min(minFramerate, tier.minFramerate);\n    minBitrate = Math.min(minBitrate, tier.minBitrate);\n    const matchingVideoRanges = allowedVideoRanges.filter(\n      (range) => tier.videoRanges[range] > 0,\n    );\n    if (matchingVideoRanges.length > 0) {\n      hasCurrentVideoRange = true;\n    }\n  }\n  minHeight = Number.isFinite(minHeight) ? minHeight : 0;\n  minFramerate = Number.isFinite(minFramerate) ? minFramerate : 0;\n  const maxHeight = Math.max(1080, minHeight);\n  const maxFramerate = Math.max(30, minFramerate);\n  minBitrate = Number.isFinite(minBitrate) ? minBitrate : currentBw;\n  currentBw = Math.max(minBitrate, currentBw);\n  // If there are no variants with matching preference, set currentVideoRange to undefined\n  if (!hasCurrentVideoRange) {\n    currentVideoRange = undefined;\n  }\n  const hasMultipleSets = codecSets.length > 1;\n  const codecSet = codecSets.reduce(\n    (selected: string | undefined, candidate: string) => {\n      // Remove candiates which do not meet bitrate, default audio, stereo or channels preference, 1080p or lower, 30fps or lower, or SDR/HDR selection if present\n      const candidateTier = codecTiers[candidate];\n      if (candidate === selected) {\n        return selected;\n      }\n      videoRanges = hasCurrentVideoRange\n        ? allowedVideoRanges.filter(\n            (range) => candidateTier.videoRanges[range] > 0,\n          )\n        : [];\n      if (hasMultipleSets) {\n        if (candidateTier.minBitrate > currentBw) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `min bitrate of ${candidateTier.minBitrate} > current estimate of ${currentBw}`,\n          );\n          return selected;\n        }\n        if (!candidateTier.hasDefaultAudio) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `no renditions with default or auto-select sound found`,\n          );\n          return selected;\n        }\n        if (\n          audioCodecPreference &&\n          candidate.indexOf(audioCodecPreference.substring(0, 4)) % 5 !== 0\n        ) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `audio codec preference \"${audioCodecPreference}\" not found`,\n          );\n          return selected;\n        }\n        if (channelsPreference && !preferStereo) {\n          if (!candidateTier.channels[channelsPreference]) {\n            logStartCodecCandidateIgnored(\n              candidate,\n              `no renditions with ${channelsPreference} channel sound found (channels options: ${Object.keys(\n                candidateTier.channels,\n              )})`,\n            );\n            return selected;\n          }\n        } else if (\n          (!audioCodecPreference || preferStereo) &&\n          hasStereo &&\n          candidateTier.channels['2'] === 0\n        ) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `no renditions with stereo sound found`,\n          );\n          return selected;\n        }\n        if (candidateTier.minHeight > maxHeight) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `min resolution of ${candidateTier.minHeight} > maximum of ${maxHeight}`,\n          );\n          return selected;\n        }\n        if (candidateTier.minFramerate > maxFramerate) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `min framerate of ${candidateTier.minFramerate} > maximum of ${maxFramerate}`,\n          );\n          return selected;\n        }\n        if (\n          !videoRanges.some((range) => candidateTier.videoRanges[range] > 0)\n        ) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `no variants with VIDEO-RANGE of ${stringify(videoRanges)} found`,\n          );\n          return selected;\n        }\n        if (\n          videoCodecPreference &&\n          candidate.indexOf(videoCodecPreference.substring(0, 4)) % 5 !== 0\n        ) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `video codec preference \"${videoCodecPreference}\" not found`,\n          );\n          return selected;\n        }\n        if (candidateTier.maxScore < selectedScore) {\n          logStartCodecCandidateIgnored(\n            candidate,\n            `max score of ${candidateTier.maxScore} < selected max of ${selectedScore}`,\n          );\n          return selected;\n        }\n      }\n      // Remove candiates with less preferred codecs or more errors\n      if (\n        selected &&\n        (codecsSetSelectionPreferenceValue(candidate) >=\n          codecsSetSelectionPreferenceValue(selected) ||\n          candidateTier.fragmentError > codecTiers[selected].fragmentError)\n      ) {\n        return selected;\n      }\n      minIndex = candidateTier.minIndex;\n      selectedScore = candidateTier.maxScore;\n      return candidate;\n    },\n    undefined,\n  );\n  return {\n    codecSet,\n    videoRanges,\n    preferHDR,\n    minFramerate,\n    minBitrate,\n    minIndex,\n  };\n}\n\nfunction logStartCodecCandidateIgnored(codeSet: string, reason: string) {\n  logger.log(\n    `[abr] start candidates with \"${codeSet}\" ignored because ${reason}`,\n  );\n}\n\nexport type AudioTracksByGroup = {\n  hasDefaultAudio: boolean;\n  hasAutoSelectAudio: boolean;\n  groups: Record<string, AudioTrackGroup>;\n};\n\nexport function getAudioTracksByGroup(allAudioTracks: MediaPlaylist[]) {\n  return allAudioTracks.reduce(\n    (audioTracksByGroup: AudioTracksByGroup, track) => {\n      let trackGroup = audioTracksByGroup.groups[track.groupId];\n      if (!trackGroup) {\n        trackGroup = audioTracksByGroup.groups[track.groupId] = {\n          tracks: [],\n          channels: { 2: 0 },\n          hasDefault: false,\n          hasAutoSelect: false,\n        };\n      }\n      trackGroup.tracks.push(track);\n      const channelsKey = track.channels || '2';\n      trackGroup.channels[channelsKey] =\n        (trackGroup.channels[channelsKey] || 0) + 1;\n      trackGroup.hasDefault = trackGroup.hasDefault || track.default;\n      trackGroup.hasAutoSelect = trackGroup.hasAutoSelect || track.autoselect;\n      if (trackGroup.hasDefault) {\n        audioTracksByGroup.hasDefaultAudio = true;\n      }\n      if (trackGroup.hasAutoSelect) {\n        audioTracksByGroup.hasAutoSelectAudio = true;\n      }\n      return audioTracksByGroup;\n    },\n    {\n      hasDefaultAudio: false,\n      hasAutoSelectAudio: false,\n      groups: {},\n    },\n  );\n}\n\nexport function getCodecTiers(\n  levels: Level[],\n  audioTracksByGroup: AudioTracksByGroup,\n  minAutoLevel: number,\n  maxAutoLevel: number,\n): Record<string, CodecSetTier> {\n  return levels\n    .slice(minAutoLevel, maxAutoLevel + 1)\n    .reduce((tiers: Record<string, CodecSetTier>, level, index) => {\n      if (!level.codecSet) {\n        return tiers;\n      }\n      const audioGroups = level.audioGroups;\n      let tier = tiers[level.codecSet];\n      if (!tier) {\n        tiers[level.codecSet] = tier = {\n          minBitrate: Infinity,\n          minHeight: Infinity,\n          minFramerate: Infinity,\n          minIndex: index,\n          maxScore: 0,\n          videoRanges: { SDR: 0 },\n          channels: { '2': 0 },\n          hasDefaultAudio: !audioGroups,\n          fragmentError: 0,\n        };\n      }\n      tier.minBitrate = Math.min(tier.minBitrate, level.bitrate);\n      const lesserWidthOrHeight = Math.min(level.height, level.width);\n      tier.minHeight = Math.min(tier.minHeight, lesserWidthOrHeight);\n      tier.minFramerate = Math.min(tier.minFramerate, level.frameRate);\n      tier.minIndex = Math.min(tier.minIndex, index);\n      tier.maxScore = Math.max(tier.maxScore, level.score);\n      tier.fragmentError += level.fragmentError;\n      tier.videoRanges[level.videoRange] =\n        (tier.videoRanges[level.videoRange] || 0) + 1;\n      if (__USE_ALT_AUDIO__ && audioGroups) {\n        audioGroups.forEach((audioGroupId) => {\n          if (!audioGroupId) {\n            return;\n          }\n          const audioGroup = audioTracksByGroup.groups[audioGroupId];\n          if (!audioGroup) {\n            return;\n          }\n          // Default audio is any group with DEFAULT=YES, or if missing then any group with AUTOSELECT=YES, or all variants\n          tier.hasDefaultAudio =\n            tier.hasDefaultAudio || audioTracksByGroup.hasDefaultAudio\n              ? audioGroup.hasDefault\n              : audioGroup.hasAutoSelect ||\n                (!audioTracksByGroup.hasDefaultAudio &&\n                  !audioTracksByGroup.hasAutoSelectAudio);\n          Object.keys(audioGroup.channels).forEach((channels) => {\n            tier.channels[channels] =\n              (tier.channels[channels] || 0) + audioGroup.channels[channels];\n          });\n        });\n      }\n      return tiers;\n    }, {});\n}\n\nexport function getBasicSelectionOption(\n  option:\n    | MediaPlaylist\n    | AudioSelectionOption\n    | SubtitleSelectionOption\n    | undefined,\n): Partial<AudioSelectionOption | SubtitleSelectionOption> | undefined {\n  if (!option) {\n    return option;\n  }\n  const { lang, assocLang, characteristics, channels, audioCodec } =\n    option as AudioSelectionOption;\n  return { lang, assocLang, characteristics, channels, audioCodec };\n}\n\nexport function findMatchingOption(\n  option: MediaPlaylist | AudioSelectionOption | SubtitleSelectionOption,\n  tracks: MediaPlaylist[],\n  matchPredicate?: (\n    option: MediaPlaylist | AudioSelectionOption | SubtitleSelectionOption,\n    track: MediaPlaylist,\n  ) => boolean,\n): number {\n  if ('attrs' in option) {\n    const index = tracks.indexOf(option);\n    if (index !== -1) {\n      return index;\n    }\n  }\n  for (let i = 0; i < tracks.length; i++) {\n    const track = tracks[i];\n    if (matchesOption(option, track, matchPredicate)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function matchesOption(\n  option: MediaPlaylist | AudioSelectionOption | SubtitleSelectionOption,\n  track: MediaPlaylist,\n  matchPredicate?: (\n    option: MediaPlaylist | AudioSelectionOption | SubtitleSelectionOption,\n    track: MediaPlaylist,\n  ) => boolean,\n): boolean {\n  const { groupId, name, lang, assocLang, default: isDefault } = option;\n  const forced = (option as SubtitleSelectionOption).forced;\n  return (\n    (groupId === undefined || track.groupId === groupId) &&\n    (name === undefined || track.name === name) &&\n    (lang === undefined || languagesMatch(lang, track.lang)) &&\n    (lang === undefined || track.assocLang === assocLang) &&\n    (isDefault === undefined || track.default === isDefault) &&\n    (forced === undefined || track.forced === forced) &&\n    (!('characteristics' in option) ||\n      characteristicsMatch(\n        option.characteristics || '',\n        track.characteristics,\n      )) &&\n    (matchPredicate === undefined || matchPredicate(option, track))\n  );\n}\n\nfunction languagesMatch(languageA: string, languageB: string = '--'): boolean {\n  if (languageA.length === languageB.length) {\n    return languageA === languageB;\n  }\n  return languageA.startsWith(languageB) || languageB.startsWith(languageA);\n}\n\nfunction characteristicsMatch(\n  characteristicsA: string,\n  characteristicsB: string = '',\n): boolean {\n  const arrA = characteristicsA.split(',');\n  const arrB = characteristicsB.split(',');\n  // Expects each item to be unique:\n  return (\n    arrA.length === arrB.length && !arrA.some((el) => arrB.indexOf(el) === -1)\n  );\n}\n\nexport function audioMatchPredicate(\n  option: MediaPlaylist | AudioSelectionOption,\n  track: MediaPlaylist,\n) {\n  const { audioCodec, channels } = option;\n  return (\n    (audioCodec === undefined ||\n      (track.audioCodec || '').substring(0, 4) ===\n        audioCodec.substring(0, 4)) &&\n    (channels === undefined || channels === (track.channels || '2'))\n  );\n}\n\nexport function findClosestLevelWithAudioGroup(\n  option: MediaPlaylist | AudioSelectionOption,\n  levels: Level[],\n  allAudioTracks: MediaPlaylist[],\n  searchIndex: number,\n  matchPredicate: (\n    option: MediaPlaylist | AudioSelectionOption,\n    track: MediaPlaylist,\n  ) => boolean,\n): number {\n  const currentLevel = levels[searchIndex];\n  // Are there variants with same URI as current level?\n  // If so, find a match that does not require any level URI change\n  const variants = levels.reduce(\n    (variantMap: { [uri: string]: number[] }, level, index) => {\n      const uri = level.uri;\n      const renditions = variantMap[uri] || (variantMap[uri] = []);\n      renditions.push(index);\n      return variantMap;\n    },\n    {},\n  );\n  const renditions = variants[currentLevel.uri];\n  if (renditions.length > 1) {\n    searchIndex = Math.max.apply(Math, renditions);\n  }\n  // Find best match\n  const currentVideoRange = currentLevel.videoRange;\n  const currentFrameRate = currentLevel.frameRate;\n  const currentVideoCodec = currentLevel.codecSet.substring(0, 4);\n  const matchingVideo = searchDownAndUpList(\n    levels,\n    searchIndex,\n    (level: Level) => {\n      if (\n        level.videoRange !== currentVideoRange ||\n        level.frameRate !== currentFrameRate ||\n        level.codecSet.substring(0, 4) !== currentVideoCodec\n      ) {\n        return false;\n      }\n      const audioGroups = level.audioGroups;\n      const tracks = allAudioTracks.filter(\n        (track): boolean =>\n          !audioGroups || audioGroups.indexOf(track.groupId) !== -1,\n      );\n      return findMatchingOption(option, tracks, matchPredicate) > -1;\n    },\n  );\n  if (matchingVideo > -1) {\n    return matchingVideo;\n  }\n  return searchDownAndUpList(levels, searchIndex, (level: Level) => {\n    const audioGroups = level.audioGroups;\n    const tracks = allAudioTracks.filter(\n      (track): boolean =>\n        !audioGroups || audioGroups.indexOf(track.groupId) !== -1,\n    );\n    return findMatchingOption(option, tracks, matchPredicate) > -1;\n  });\n}\n\nfunction searchDownAndUpList(\n  arr: any[],\n  searchIndex: number,\n  predicate: (item: any) => boolean,\n): number {\n  for (let i = searchIndex; i > -1; i--) {\n    if (predicate(arr[i])) {\n      return i;\n    }\n  }\n  for (let i = searchIndex + 1; i < arr.length; i++) {\n    if (predicate(arr[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function useAlternateAudio(\n  audioTrackUrl: string | undefined,\n  hls: Hls,\n): boolean {\n  return !!audioTrackUrl && audioTrackUrl !== hls.loadLevelObj?.uri;\n}\n","import { ErrorDetails } from '../errors';\nimport { Events } from '../events';\nimport { PlaylistLevelType } from '../types/loader';\nimport EwmaBandWidthEstimator from '../utils/ewma-bandwidth-estimator';\nimport { Logger } from '../utils/logger';\nimport {\n  getMediaDecodingInfoPromise,\n  requiresMediaCapabilitiesDecodingInfo,\n  SUPPORTED_INFO_DEFAULT,\n} from '../utils/mediacapabilities-helper';\nimport {\n  type AudioTracksByGroup,\n  type CodecSetTier,\n  getAudioTracksByGroup,\n  getCodecTiers,\n  getStartCodecTier,\n} from '../utils/rendition-helper';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type Hls from '../hls';\nimport type { Fragment } from '../loader/fragment';\nimport type { Part } from '../loader/fragment';\nimport type { AbrComponentAPI } from '../types/component-api';\nimport type {\n  ErrorData,\n  FragBufferedData,\n  FragLoadedData,\n  FragLoadingData,\n  LevelLoadedData,\n  LevelSwitchingData,\n  ManifestLoadingData,\n} from '../types/events';\nimport type { Level, VideoRange } from '../types/level';\nimport type { LoaderStats } from '../types/loader';\n\nclass AbrController extends Logger implements AbrComponentAPI {\n  protected hls: Hls;\n  private lastLevelLoadSec: number = 0;\n  private lastLoadedFragLevel: number = -1;\n  private firstSelection: number = -1;\n  private _nextAutoLevel: number = -1;\n  private nextAutoLevelKey: string = '';\n  private audioTracksByGroup: AudioTracksByGroup | null = null;\n  private codecTiers: Record<string, CodecSetTier> | null = null;\n  private timer: number = -1;\n  private fragCurrent: Fragment | null = null;\n  private partCurrent: Part | null = null;\n  private bitrateTestDelay: number = 0;\n  private rebufferNotice: number = -1;\n  private supportedCache: Record<\n    string,\n    Promise<MediaCapabilitiesDecodingInfo>\n  > = {};\n\n  public bwEstimator: EwmaBandWidthEstimator;\n\n  constructor(hls: Hls) {\n    super('abr', hls.logger);\n    this.hls = hls;\n    this.bwEstimator = this.initEstimator();\n    this.registerListeners();\n  }\n\n  public resetEstimator(abrEwmaDefaultEstimate?: number) {\n    if (abrEwmaDefaultEstimate) {\n      this.log(`setting initial bwe to ${abrEwmaDefaultEstimate}`);\n      this.hls.config.abrEwmaDefaultEstimate = abrEwmaDefaultEstimate;\n    }\n    this.firstSelection = -1;\n    this.bwEstimator = this.initEstimator();\n  }\n\n  private initEstimator(): EwmaBandWidthEstimator {\n    const config = this.hls.config;\n    return new EwmaBandWidthEstimator(\n      config.abrEwmaSlowVoD,\n      config.abrEwmaFastVoD,\n      config.abrEwmaDefaultEstimate,\n    );\n  }\n\n  protected registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n    hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.on(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  protected unregisterListeners() {\n    const { hls } = this;\n    if (!hls) {\n      return;\n    }\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n    hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.off(Events.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  public destroy() {\n    this.unregisterListeners();\n    this.clearTimer();\n    // @ts-ignore\n    this.hls = this._abandonRulesCheck = this.supportedCache = null;\n    this.fragCurrent = this.partCurrent = null;\n  }\n\n  protected onManifestLoading(\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData,\n  ) {\n    this.lastLoadedFragLevel = -1;\n    this.firstSelection = -1;\n    this.lastLevelLoadSec = 0;\n    this.supportedCache = {};\n    this.fragCurrent = this.partCurrent = null;\n    this.onLevelsUpdated();\n    this.clearTimer();\n  }\n\n  private onLevelsUpdated() {\n    if (this.lastLoadedFragLevel > -1 && this.fragCurrent) {\n      this.lastLoadedFragLevel = this.fragCurrent.level;\n    }\n    this._nextAutoLevel = -1;\n    this.onMaxAutoLevelUpdated();\n    this.codecTiers = null;\n    this.audioTracksByGroup = null;\n  }\n\n  private onMaxAutoLevelUpdated() {\n    this.firstSelection = -1;\n    this.nextAutoLevelKey = '';\n  }\n\n  protected onFragLoading(event: Events.FRAG_LOADING, data: FragLoadingData) {\n    const frag = data.frag;\n    if (this.ignoreFragment(frag)) {\n      return;\n    }\n    if (!frag.bitrateTest) {\n      this.fragCurrent = frag;\n      this.partCurrent = data.part ?? null;\n    }\n    this.clearTimer();\n    this.timer = self.setInterval(this._abandonRulesCheck, 100);\n  }\n\n  protected onLevelSwitching(\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData,\n  ): void {\n    this.clearTimer();\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData) {\n    if (data.fatal) {\n      return;\n    }\n    switch (data.details) {\n      case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n      case ErrorDetails.BUFFER_APPEND_ERROR:\n        // Reset last loaded level so that a new selection can be made after calling recoverMediaError\n        this.lastLoadedFragLevel = -1;\n        this.firstSelection = -1;\n        break;\n      case ErrorDetails.FRAG_LOAD_TIMEOUT: {\n        const frag = data.frag;\n        const { fragCurrent, partCurrent: part } = this;\n        if (\n          frag &&\n          fragCurrent &&\n          frag.sn === fragCurrent.sn &&\n          frag.level === fragCurrent.level\n        ) {\n          const now = performance.now();\n          const stats: LoaderStats = part ? part.stats : frag.stats;\n          const timeLoading = now - stats.loading.start;\n          const ttfb = stats.loading.first\n            ? stats.loading.first - stats.loading.start\n            : -1;\n          const loadedFirstByte = stats.loaded && ttfb > -1;\n          if (loadedFirstByte) {\n            const ttfbEstimate = this.bwEstimator.getEstimateTTFB();\n            this.bwEstimator.sample(\n              timeLoading - Math.min(ttfbEstimate, ttfb),\n              stats.loaded,\n            );\n          } else {\n            this.bwEstimator.sampleTTFB(timeLoading);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  private getTimeToLoadFrag(\n    timeToFirstByteSec: number,\n    bandwidth: number,\n    fragSizeBits: number,\n    isSwitch: boolean,\n  ): number {\n    const fragLoadSec = timeToFirstByteSec + fragSizeBits / bandwidth;\n    const playlistLoadSec = isSwitch\n      ? timeToFirstByteSec + this.lastLevelLoadSec\n      : 0;\n    return fragLoadSec + playlistLoadSec;\n  }\n\n  protected onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData) {\n    const config = this.hls.config;\n    const { loading } = data.stats;\n    const timeLoadingMs = loading.end - loading.first;\n    if (Number.isFinite(timeLoadingMs)) {\n      this.lastLevelLoadSec = timeLoadingMs / 1000;\n    }\n    if (data.details.live) {\n      this.bwEstimator.update(config.abrEwmaSlowLive, config.abrEwmaFastLive);\n    } else {\n      this.bwEstimator.update(config.abrEwmaSlowVoD, config.abrEwmaFastVoD);\n    }\n    if (this.timer > -1) {\n      this._abandonRulesCheck(data.levelInfo);\n    }\n  }\n\n  /*\n      This method monitors the download rate of the current fragment, and will downswitch if that fragment will not load\n      quickly enough to prevent underbuffering\n    */\n  private _abandonRulesCheck = (levelLoaded?: Level) => {\n    const { fragCurrent: frag, partCurrent: part, hls } = this;\n    const { autoLevelEnabled, media } = hls;\n    if (!frag || !media) {\n      return;\n    }\n\n    const now = performance.now();\n    const stats: LoaderStats = part ? part.stats : frag.stats;\n    const duration = part ? part.duration : frag.duration;\n    const timeLoading = now - stats.loading.start;\n    const minAutoLevel = hls.minAutoLevel;\n    const loadingFragForLevel = frag.level;\n    const currentAutoLevel = this._nextAutoLevel;\n    // If frag loading is aborted, complete, or from lowest level, stop timer and return\n    if (\n      stats.aborted ||\n      (stats.loaded && stats.loaded === stats.total) ||\n      loadingFragForLevel <= minAutoLevel\n    ) {\n      this.clearTimer();\n      // reset forced auto level value so that next level will be selected\n      this._nextAutoLevel = -1;\n      return;\n    }\n\n    // This check only runs if we're in ABR mode\n    if (!autoLevelEnabled) {\n      return;\n    }\n\n    // Must be loading/loaded a new level or be in a playing state\n    const fragBlockingSwitch =\n      currentAutoLevel > -1 && currentAutoLevel !== loadingFragForLevel;\n    const levelChange = !!levelLoaded || fragBlockingSwitch;\n    if (\n      !levelChange &&\n      (media.paused || !media.playbackRate || !media.readyState)\n    ) {\n      return;\n    }\n\n    const bufferInfo = hls.mainForwardBufferInfo;\n    if (!levelChange && bufferInfo === null) {\n      return;\n    }\n\n    const ttfbEstimate = this.bwEstimator.getEstimateTTFB();\n    const playbackRate = Math.abs(media.playbackRate);\n    // To maintain stable adaptive playback, only begin monitoring frag loading after half or more of its playback duration has passed\n    if (\n      timeLoading <=\n      Math.max(ttfbEstimate, 1000 * (duration / (playbackRate * 2)))\n    ) {\n      return;\n    }\n\n    // bufferStarvationDelay is an estimate of the amount time (in seconds) it will take to exhaust the buffer\n    const bufferStarvationDelay = bufferInfo\n      ? bufferInfo.len / playbackRate\n      : 0;\n    const ttfb = stats.loading.first\n      ? stats.loading.first - stats.loading.start\n      : -1;\n    const loadedFirstByte = stats.loaded && ttfb > -1;\n    const bwEstimate: number = this.getBwEstimate();\n    const levels = hls.levels;\n    const level = levels[loadingFragForLevel];\n    const expectedLen = Math.max(\n      stats.loaded,\n      Math.round((duration * (frag.bitrate || level.averageBitrate)) / 8),\n    );\n    let timeStreaming = loadedFirstByte ? timeLoading - ttfb : timeLoading;\n    if (timeStreaming < 1 && loadedFirstByte) {\n      timeStreaming = Math.min(timeLoading, (stats.loaded * 8) / bwEstimate);\n    }\n    const loadRate = loadedFirstByte\n      ? (stats.loaded * 1000) / timeStreaming\n      : 0;\n    // fragLoadDelay is an estimate of the time (in seconds) it will take to buffer the remainder of the fragment\n    const ttfbSeconds = ttfbEstimate / 1000;\n    const fragLoadedDelay = loadRate\n      ? (expectedLen - stats.loaded) / loadRate\n      : (expectedLen * 8) / bwEstimate + ttfbSeconds;\n    // Only downswitch if the time to finish loading the current fragment is greater than the amount of buffer left\n    if (fragLoadedDelay <= bufferStarvationDelay) {\n      return;\n    }\n\n    const bwe = loadRate ? loadRate * 8 : bwEstimate;\n    const live =\n      (levelLoaded?.details || this.hls.latestLevelDetails)?.live === true;\n    const abrBandWidthUpFactor = this.hls.config.abrBandWidthUpFactor;\n    let fragLevelNextLoadedDelay: number = Number.POSITIVE_INFINITY;\n    let nextLoadLevel: number;\n    // Iterate through lower level and try to find the largest one that avoids rebuffering\n    for (\n      nextLoadLevel = loadingFragForLevel - 1;\n      nextLoadLevel > minAutoLevel;\n      nextLoadLevel--\n    ) {\n      // compute time to load next fragment at lower level\n      // 8 = bits per byte (bps/Bps)\n      const levelNextBitrate = levels[nextLoadLevel].maxBitrate;\n      const requiresLevelLoad = !levels[nextLoadLevel].details || live;\n      fragLevelNextLoadedDelay = this.getTimeToLoadFrag(\n        ttfbSeconds,\n        bwe,\n        duration * levelNextBitrate,\n        requiresLevelLoad,\n      );\n      if (\n        fragLevelNextLoadedDelay <\n        Math.min(bufferStarvationDelay, duration + ttfbSeconds)\n      ) {\n        break;\n      }\n    }\n    // Only emergency switch down if it takes less time to load a new fragment at lowest level instead of continuing\n    // to load the current one\n    if (fragLevelNextLoadedDelay >= fragLoadedDelay) {\n      return;\n    }\n\n    // if estimated load time of new segment is completely unreasonable, ignore and do not emergency switch down\n    if (fragLevelNextLoadedDelay > duration * 10) {\n      return;\n    }\n    if (loadedFirstByte) {\n      // If there has been loading progress, sample bandwidth using loading time offset by minimum TTFB time\n      this.bwEstimator.sample(\n        timeLoading - Math.min(ttfbEstimate, ttfb),\n        stats.loaded,\n      );\n    } else {\n      // If there has been no loading progress, sample TTFB\n      this.bwEstimator.sampleTTFB(timeLoading);\n    }\n    const nextLoadLevelBitrate = levels[nextLoadLevel].maxBitrate;\n    if (this.getBwEstimate() * abrBandWidthUpFactor > nextLoadLevelBitrate) {\n      this.resetEstimator(nextLoadLevelBitrate);\n    }\n    const bestSwitchLevel = this.findBestLevel(\n      nextLoadLevelBitrate,\n      minAutoLevel,\n      nextLoadLevel,\n      0,\n      bufferStarvationDelay,\n      1,\n      1,\n    );\n    if (bestSwitchLevel > -1) {\n      nextLoadLevel = bestSwitchLevel;\n    }\n\n    this.warn(`Fragment ${frag.sn}${\n      part ? ' part ' + part.index : ''\n    } of level ${loadingFragForLevel} is loading too slowly;\n      Fragment duration: ${frag.duration.toFixed(3)}\n      Time to underbuffer: ${bufferStarvationDelay.toFixed(3)} s\n      Estimated load time for current fragment: ${fragLoadedDelay.toFixed(3)} s\n      Estimated load time for down switch fragment: ${fragLevelNextLoadedDelay.toFixed(\n        3,\n      )} s\n      TTFB estimate: ${ttfb | 0} ms\n      Current BW estimate: ${\n        Number.isFinite(bwEstimate) ? bwEstimate | 0 : 'Unknown'\n      } bps\n      New BW estimate: ${this.getBwEstimate() | 0} bps\n      Switching to level ${nextLoadLevel} @ ${nextLoadLevelBitrate | 0} bps`);\n\n    hls.nextLoadLevel = hls.nextAutoLevel = nextLoadLevel;\n\n    this.clearTimer();\n    const abortAndSwitch = () => {\n      // Are nextLoadLevel details available or is stream-controller still in \"WAITING_LEVEL\" state?\n      this.clearTimer();\n      if (\n        this.fragCurrent === frag &&\n        this.hls.loadLevel === nextLoadLevel &&\n        nextLoadLevel > 0\n      ) {\n        const bufferStarvationDelay = this.getStarvationDelay();\n        this\n          .warn(`Aborting inflight request ${nextLoadLevel > 0 ? 'and switching down' : ''}\n      Fragment duration: ${frag.duration.toFixed(3)} s\n      Time to underbuffer: ${bufferStarvationDelay.toFixed(3)} s`);\n        frag.abortRequests();\n        this.fragCurrent = this.partCurrent = null;\n        if (nextLoadLevel > minAutoLevel) {\n          let lowestSwitchLevel = this.findBestLevel(\n            this.hls.levels[minAutoLevel].bitrate,\n            minAutoLevel,\n            nextLoadLevel,\n            0,\n            bufferStarvationDelay,\n            1,\n            1,\n          );\n          if (lowestSwitchLevel === -1) {\n            lowestSwitchLevel = minAutoLevel;\n          }\n          this.hls.nextLoadLevel = this.hls.nextAutoLevel = lowestSwitchLevel;\n          this.resetEstimator(this.hls.levels[lowestSwitchLevel].bitrate);\n        }\n      }\n    };\n    if (fragBlockingSwitch || fragLoadedDelay > fragLevelNextLoadedDelay * 2) {\n      abortAndSwitch();\n    } else {\n      this.timer = self.setInterval(\n        abortAndSwitch,\n        fragLevelNextLoadedDelay * 1000,\n      );\n    }\n\n    hls.trigger(Events.FRAG_LOAD_EMERGENCY_ABORTED, { frag, part, stats });\n  };\n\n  protected onFragLoaded(\n    event: Events.FRAG_LOADED,\n    { frag, part }: FragLoadedData,\n  ) {\n    const stats = part ? part.stats : frag.stats;\n    if (frag.type === PlaylistLevelType.MAIN) {\n      this.bwEstimator.sampleTTFB(stats.loading.first - stats.loading.start);\n    }\n    if (this.ignoreFragment(frag)) {\n      return;\n    }\n    // stop monitoring bw once frag loaded\n    this.clearTimer();\n    // reset forced auto level value so that next level will be selected\n    if (frag.level === this._nextAutoLevel) {\n      this._nextAutoLevel = -1;\n    }\n    this.firstSelection = -1;\n\n    // compute level average bitrate\n    if (this.hls.config.abrMaxWithRealBitrate) {\n      const duration = part ? part.duration : frag.duration;\n      const level = this.hls.levels[frag.level];\n      const loadedBytes =\n        (level.loaded ? level.loaded.bytes : 0) + stats.loaded;\n      const loadedDuration =\n        (level.loaded ? level.loaded.duration : 0) + duration;\n      level.loaded = { bytes: loadedBytes, duration: loadedDuration };\n      level.realBitrate = Math.round((8 * loadedBytes) / loadedDuration);\n    }\n    if (frag.bitrateTest) {\n      const fragBufferedData: FragBufferedData = {\n        stats,\n        frag,\n        part,\n        id: frag.type,\n      };\n      this.onFragBuffered(Events.FRAG_BUFFERED, fragBufferedData);\n      frag.bitrateTest = false;\n    } else {\n      // store level id after successful fragment load for playback\n      this.lastLoadedFragLevel = frag.level;\n    }\n  }\n\n  protected onFragBuffered(\n    event: Events.FRAG_BUFFERED,\n    data: FragBufferedData,\n  ) {\n    const { frag, part } = data;\n    const stats = part?.stats.loaded ? part.stats : frag.stats;\n\n    if (stats.aborted) {\n      return;\n    }\n    if (this.ignoreFragment(frag)) {\n      return;\n    }\n    // Use the difference between parsing and request instead of buffering and request to compute fragLoadingProcessing;\n    // rationale is that buffer appending only happens once media is attached. This can happen when config.startFragPrefetch\n    // is used. If we used buffering in that case, our BW estimate sample will be very large.\n    const processingMs =\n      stats.parsing.end -\n      stats.loading.start -\n      Math.min(\n        stats.loading.first - stats.loading.start,\n        this.bwEstimator.getEstimateTTFB(),\n      );\n    this.bwEstimator.sample(processingMs, stats.loaded);\n    stats.bwEstimate = this.getBwEstimate();\n    if (frag.bitrateTest) {\n      this.bitrateTestDelay = processingMs / 1000;\n    } else {\n      this.bitrateTestDelay = 0;\n    }\n  }\n\n  private ignoreFragment(frag: Fragment): boolean {\n    // Only count non-alt-audio frags which were actually buffered in our BW calculations\n    return frag.type !== PlaylistLevelType.MAIN || frag.sn === 'initSegment';\n  }\n\n  public clearTimer() {\n    if (this.timer > -1) {\n      self.clearInterval(this.timer);\n      this.timer = -1;\n    }\n  }\n\n  public get firstAutoLevel(): number {\n    const { maxAutoLevel, minAutoLevel } = this.hls;\n    const bwEstimate = this.getBwEstimate();\n    const maxStartDelay = this.hls.config.maxStarvationDelay;\n    const abrAutoLevel = this.findBestLevel(\n      bwEstimate,\n      minAutoLevel,\n      maxAutoLevel,\n      0,\n      maxStartDelay,\n      1,\n      1,\n    );\n    if (abrAutoLevel > -1) {\n      return abrAutoLevel;\n    }\n    const firstLevel = this.hls.firstLevel;\n    const clamped = Math.min(Math.max(firstLevel, minAutoLevel), maxAutoLevel);\n    this.warn(\n      `Could not find best starting auto level. Defaulting to first in playlist ${firstLevel} clamped to ${clamped}`,\n    );\n    return clamped;\n  }\n\n  public get forcedAutoLevel(): number {\n    if (this.nextAutoLevelKey) {\n      return -1;\n    }\n    return this._nextAutoLevel;\n  }\n\n  // return next auto level\n  public get nextAutoLevel(): number {\n    const forcedAutoLevel = this.forcedAutoLevel;\n    const bwEstimator = this.bwEstimator;\n    const useEstimate = bwEstimator.canEstimate();\n    const loadedFirstFrag = this.lastLoadedFragLevel > -1;\n    // in case next auto level has been forced, and bw not available or not reliable, return forced value\n    if (\n      forcedAutoLevel !== -1 &&\n      (!useEstimate ||\n        !loadedFirstFrag ||\n        this.nextAutoLevelKey === this.getAutoLevelKey())\n    ) {\n      return forcedAutoLevel;\n    }\n\n    // compute next level using ABR logic\n    const nextABRAutoLevel =\n      useEstimate && loadedFirstFrag\n        ? this.getNextABRAutoLevel()\n        : this.firstAutoLevel;\n\n    // use forced auto level while it hasn't errored more than ABR selection\n    if (forcedAutoLevel !== -1) {\n      const levels = this.hls.levels;\n      if (\n        levels.length > Math.max(forcedAutoLevel, nextABRAutoLevel) &&\n        levels[forcedAutoLevel].loadError <= levels[nextABRAutoLevel].loadError\n      ) {\n        return forcedAutoLevel;\n      }\n    }\n\n    // save result until state has changed\n    this._nextAutoLevel = nextABRAutoLevel;\n    this.nextAutoLevelKey = this.getAutoLevelKey();\n\n    return nextABRAutoLevel;\n  }\n\n  private getAutoLevelKey(): string {\n    return `${this.getBwEstimate()}_${this.getStarvationDelay().toFixed(2)}`;\n  }\n\n  private getNextABRAutoLevel(): number {\n    const { fragCurrent, partCurrent, hls } = this;\n    if (hls.levels.length <= 1) {\n      return hls.loadLevel;\n    }\n    const { maxAutoLevel, config, minAutoLevel } = hls;\n    const currentFragDuration = partCurrent\n      ? partCurrent.duration\n      : fragCurrent\n        ? fragCurrent.duration\n        : 0;\n    const avgbw = this.getBwEstimate();\n    // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n    const bufferStarvationDelay = this.getStarvationDelay();\n\n    let bwFactor = config.abrBandWidthFactor;\n    let bwUpFactor = config.abrBandWidthUpFactor;\n\n    // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n    if (bufferStarvationDelay) {\n      const bestLevel = this.findBestLevel(\n        avgbw,\n        minAutoLevel,\n        maxAutoLevel,\n        bufferStarvationDelay,\n        0,\n        bwFactor,\n        bwUpFactor,\n      );\n      if (bestLevel >= 0) {\n        this.rebufferNotice = -1;\n        return bestLevel;\n      }\n    }\n    // not possible to get rid of rebuffering... try to find level that will guarantee less than maxStarvationDelay of rebuffering\n    let maxStarvationDelay = currentFragDuration\n      ? Math.min(currentFragDuration, config.maxStarvationDelay)\n      : config.maxStarvationDelay;\n\n    if (!bufferStarvationDelay) {\n      // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n      const bitrateTestDelay = this.bitrateTestDelay;\n      if (bitrateTestDelay) {\n        // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n        // max video loading delay used in  automatic start level selection :\n        // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n        // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n        // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n        const maxLoadingDelay = currentFragDuration\n          ? Math.min(currentFragDuration, config.maxLoadingDelay)\n          : config.maxLoadingDelay;\n        maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n        this.info(\n          `bitrate test took ${Math.round(\n            1000 * bitrateTestDelay,\n          )}ms, set first fragment max fetchDuration to ${Math.round(\n            1000 * maxStarvationDelay,\n          )} ms`,\n        );\n        // don't use conservative factor on bitrate test\n        bwFactor = bwUpFactor = 1;\n      }\n    }\n    const bestLevel = this.findBestLevel(\n      avgbw,\n      minAutoLevel,\n      maxAutoLevel,\n      bufferStarvationDelay,\n      maxStarvationDelay,\n      bwFactor,\n      bwUpFactor,\n    );\n    if (this.rebufferNotice !== bestLevel) {\n      this.rebufferNotice = bestLevel;\n      this.info(\n        `${\n          bufferStarvationDelay ? 'rebuffering expected' : 'buffer is empty'\n        }, optimal quality level ${bestLevel}`,\n      );\n    }\n    if (bestLevel > -1) {\n      return bestLevel;\n    }\n    // If no matching level found, see if min auto level would be a better option\n    const minLevel = hls.levels[minAutoLevel];\n    const autoLevel = hls.loadLevelObj;\n    if (autoLevel && minLevel?.bitrate < autoLevel.bitrate) {\n      return minAutoLevel;\n    }\n    // or if bitrate is not lower, continue to use loadLevel\n    return hls.loadLevel;\n  }\n\n  private getStarvationDelay(): number {\n    const hls = this.hls;\n    const media = hls.media;\n    if (!media) {\n      return Infinity;\n    }\n    // playbackRate is the absolute value of the playback rate; if media.playbackRate is 0, we use 1 to load as\n    // if we're playing back at the normal rate.\n    const playbackRate =\n      media && media.playbackRate !== 0 ? Math.abs(media.playbackRate) : 1.0;\n    const bufferInfo = hls.mainForwardBufferInfo;\n    return (bufferInfo ? bufferInfo.len : 0) / playbackRate;\n  }\n\n  private getBwEstimate(): number {\n    return this.bwEstimator.canEstimate()\n      ? this.bwEstimator.getEstimate()\n      : this.hls.config.abrEwmaDefaultEstimate;\n  }\n\n  private findBestLevel(\n    currentBw: number,\n    minAutoLevel: number,\n    maxAutoLevel: number,\n    bufferStarvationDelay: number,\n    maxStarvationDelay: number,\n    bwFactor: number,\n    bwUpFactor: number,\n  ): number {\n    const maxFetchDuration: number = bufferStarvationDelay + maxStarvationDelay;\n    const lastLoadedFragLevel = this.lastLoadedFragLevel;\n    const selectionBaseLevel =\n      lastLoadedFragLevel === -1 ? this.hls.firstLevel : lastLoadedFragLevel;\n    const { fragCurrent, partCurrent } = this;\n    const { levels, allAudioTracks, loadLevel, config } = this.hls;\n    if (levels.length === 1) {\n      return 0;\n    }\n    const level = levels[selectionBaseLevel] as Level | undefined;\n    const live = !!this.hls.latestLevelDetails?.live;\n    const firstSelection = loadLevel === -1 || lastLoadedFragLevel === -1;\n    let currentCodecSet: string | undefined;\n    let currentVideoRange: VideoRange | undefined = 'SDR';\n    let currentFrameRate = level?.frameRate || 0;\n\n    const { audioPreference, videoPreference } = config;\n    const audioTracksByGroup =\n      this.audioTracksByGroup ||\n      (this.audioTracksByGroup = getAudioTracksByGroup(allAudioTracks));\n    let minStartIndex = -1;\n    if (firstSelection) {\n      if (this.firstSelection !== -1) {\n        return this.firstSelection;\n      }\n      const codecTiers =\n        this.codecTiers ||\n        (this.codecTiers = getCodecTiers(\n          levels,\n          audioTracksByGroup,\n          minAutoLevel,\n          maxAutoLevel,\n        ));\n      const startTier = getStartCodecTier(\n        codecTiers,\n        currentVideoRange,\n        currentBw,\n        audioPreference,\n        videoPreference,\n      );\n      const {\n        codecSet,\n        videoRanges,\n        minFramerate,\n        minBitrate,\n        minIndex,\n        preferHDR,\n      } = startTier;\n      minStartIndex = minIndex;\n      currentCodecSet = codecSet;\n      currentVideoRange = preferHDR\n        ? videoRanges[videoRanges.length - 1]\n        : videoRanges[0];\n      currentFrameRate = minFramerate;\n      currentBw = Math.max(currentBw, minBitrate);\n      this.log(`picked start tier ${stringify(startTier)}`);\n    } else {\n      currentCodecSet = level?.codecSet;\n      currentVideoRange = level?.videoRange;\n    }\n\n    const currentFragDuration = partCurrent\n      ? partCurrent.duration\n      : fragCurrent\n        ? fragCurrent.duration\n        : 0;\n\n    const ttfbEstimateSec = this.bwEstimator.getEstimateTTFB() / 1000;\n    const levelsSkipped: number[] = [];\n    for (let i = maxAutoLevel; i >= minAutoLevel; i--) {\n      const levelInfo = levels[i];\n      const upSwitch = i > selectionBaseLevel;\n      if (!levelInfo) {\n        continue;\n      }\n      if (\n        __USE_MEDIA_CAPABILITIES__ &&\n        config.useMediaCapabilities &&\n        !levelInfo.supportedResult &&\n        !levelInfo.supportedPromise\n      ) {\n        const mediaCapabilities = navigator.mediaCapabilities as\n          | MediaCapabilities\n          | undefined;\n        if (\n          typeof mediaCapabilities?.decodingInfo === 'function' &&\n          requiresMediaCapabilitiesDecodingInfo(\n            levelInfo,\n            audioTracksByGroup,\n            currentVideoRange,\n            currentFrameRate,\n            currentBw,\n            audioPreference,\n          )\n        ) {\n          levelInfo.supportedPromise = getMediaDecodingInfoPromise(\n            levelInfo,\n            audioTracksByGroup,\n            mediaCapabilities,\n            this.supportedCache,\n          );\n          levelInfo.supportedPromise\n            .then((decodingInfo) => {\n              if (!this.hls) {\n                return;\n              }\n              levelInfo.supportedResult = decodingInfo;\n              const levels = this.hls.levels;\n              const index = levels.indexOf(levelInfo);\n              if (decodingInfo.error) {\n                this.warn(\n                  `MediaCapabilities decodingInfo error: \"${\n                    decodingInfo.error\n                  }\" for level ${index} ${stringify(decodingInfo)}`,\n                );\n              } else if (!decodingInfo.supported) {\n                this.warn(\n                  `Unsupported MediaCapabilities decodingInfo result for level ${index} ${stringify(\n                    decodingInfo,\n                  )}`,\n                );\n                if (index > -1 && levels.length > 1) {\n                  this.log(`Removing unsupported level ${index}`);\n                  this.hls.removeLevel(index);\n                  if (this.hls.loadLevel === -1) {\n                    this.hls.nextLoadLevel = 0;\n                  }\n                }\n              } else if (\n                decodingInfo.decodingInfoResults.some(\n                  (info) =>\n                    info.smooth === false || info.powerEfficient === false,\n                )\n              ) {\n                this.log(\n                  `MediaCapabilities decodingInfo for level ${index} not smooth or powerEfficient: ${stringify(decodingInfo)}`,\n                );\n              }\n            })\n            .catch((error) => {\n              this.warn(\n                `Error handling MediaCapabilities decodingInfo: ${error}`,\n              );\n            });\n        } else {\n          levelInfo.supportedResult = SUPPORTED_INFO_DEFAULT;\n        }\n      }\n\n      // skip candidates which change codec-family or video-range,\n      // and which decrease or increase frame-rate for up and down-switch respectfully\n      if (\n        (currentCodecSet && levelInfo.codecSet !== currentCodecSet) ||\n        (currentVideoRange && levelInfo.videoRange !== currentVideoRange) ||\n        (upSwitch && currentFrameRate > levelInfo.frameRate) ||\n        (!upSwitch &&\n          currentFrameRate > 0 &&\n          currentFrameRate < levelInfo.frameRate) ||\n        levelInfo.supportedResult?.decodingInfoResults?.some(\n          (info) => info.smooth === false,\n        )\n      ) {\n        if (!firstSelection || i !== minStartIndex) {\n          levelsSkipped.push(i);\n          continue;\n        }\n      }\n\n      const levelDetails = levelInfo.details;\n      const avgDuration =\n        (partCurrent\n          ? levelDetails?.partTarget\n          : levelDetails?.averagetargetduration) || currentFragDuration;\n\n      let adjustedbw: number;\n      // follow algorithm captured from stagefright :\n      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n      // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n      // consider only 80% of the available bandwidth, but if we are switching up,\n      // be even more conservative (70%) to avoid overestimating and immediately\n      // switching back.\n      if (!upSwitch) {\n        adjustedbw = bwFactor * currentBw;\n      } else {\n        adjustedbw = bwUpFactor * currentBw;\n      }\n\n      // Use average bitrate when starvation delay (buffer length) is gt or eq two segment durations and rebuffering is not expected (maxStarvationDelay > 0)\n      const bitrate: number =\n        currentFragDuration &&\n        bufferStarvationDelay >= currentFragDuration * 2 &&\n        maxStarvationDelay === 0\n          ? levelInfo.averageBitrate\n          : levelInfo.maxBitrate;\n      const fetchDuration: number = this.getTimeToLoadFrag(\n        ttfbEstimateSec,\n        adjustedbw,\n        bitrate * avgDuration,\n        levelDetails === undefined,\n      );\n\n      const canSwitchWithinTolerance =\n        // if adjusted bw is greater than level bitrate AND\n        adjustedbw >= bitrate &&\n        // no level change, or new level has no error history\n        (i === lastLoadedFragLevel ||\n          (levelInfo.loadError === 0 && levelInfo.fragmentError === 0)) &&\n        // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n        // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n        // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that findBestLevel will return -1\n        (fetchDuration <= ttfbEstimateSec ||\n          !Number.isFinite(fetchDuration) ||\n          (live && !this.bitrateTestDelay) ||\n          fetchDuration < maxFetchDuration);\n      if (canSwitchWithinTolerance) {\n        const forcedAutoLevel = this.forcedAutoLevel;\n        if (\n          i !== loadLevel &&\n          (forcedAutoLevel === -1 || forcedAutoLevel !== loadLevel)\n        ) {\n          if (levelsSkipped.length) {\n            this.trace(\n              `Skipped level(s) ${levelsSkipped.join(\n                ',',\n              )} of ${maxAutoLevel} max with CODECS and VIDEO-RANGE:\"${\n                levels[levelsSkipped[0]].codecs\n              }\" ${levels[levelsSkipped[0]].videoRange}; not compatible with \"${\n                currentCodecSet\n              }\" ${currentVideoRange}`,\n            );\n          }\n          this.info(\n            `switch candidate:${selectionBaseLevel}->${i} adjustedbw(${Math.round(\n              adjustedbw,\n            )})-bitrate=${Math.round(\n              adjustedbw - bitrate,\n            )} ttfb:${ttfbEstimateSec.toFixed(\n              1,\n            )} avgDuration:${avgDuration.toFixed(\n              1,\n            )} maxFetchDuration:${maxFetchDuration.toFixed(\n              1,\n            )} fetchDuration:${fetchDuration.toFixed(\n              1,\n            )} firstSelection:${firstSelection} codecSet:${levelInfo.codecSet} videoRange:${levelInfo.videoRange} hls.loadLevel:${loadLevel}`,\n          );\n        }\n        if (firstSelection) {\n          this.firstSelection = i;\n        }\n        // as we are looping from highest to lowest, this will return the best achievable quality level\n        return i;\n      }\n    }\n    // not enough time budget even with quality level 0 ... rebuffering might happen\n    return -1;\n  }\n\n  public set nextAutoLevel(nextLevel: number) {\n    const value = this.deriveNextAutoLevel(nextLevel);\n    if (this._nextAutoLevel !== value) {\n      this.nextAutoLevelKey = '';\n      this._nextAutoLevel = value;\n    }\n  }\n\n  protected deriveNextAutoLevel(nextLevel: number) {\n    const { maxAutoLevel, minAutoLevel } = this.hls;\n    return Math.min(Math.max(nextLevel, minAutoLevel), maxAutoLevel);\n  }\n}\n\nexport default AbrController;\n","type BinarySearchComparison<T> = (candidate: T) => -1 | 0 | 1;\n\nconst BinarySearch = {\n  /**\n   * Searches for an item in an array which matches a certain condition.\n   * This requires the condition to only match one item in the array,\n   * and for the array to be ordered.\n   *\n   * @param list The array to search.\n   * @param comparisonFn\n   *      Called and provided a candidate item as the first argument.\n   *      Should return:\n   *          > -1 if the item should be located at a lower index than the provided item.\n   *          > 1 if the item should be located at a higher index than the provided item.\n   *          > 0 if the item is the item you're looking for.\n   *\n   * @returns the object if found, otherwise returns null\n   */\n  search: function <T>(\n    list: T[],\n    comparisonFn: BinarySearchComparison<T>,\n  ): T | null {\n    let minIndex: number = 0;\n    let maxIndex: number = list.length - 1;\n    let currentIndex: number | null = null;\n    let currentElement: T | null = null;\n\n    while (minIndex <= maxIndex) {\n      currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      currentElement = list[currentIndex];\n\n      const comparisonResult = comparisonFn(currentElement);\n      if (comparisonResult > 0) {\n        minIndex = currentIndex + 1;\n      } else if (comparisonResult < 0) {\n        maxIndex = currentIndex - 1;\n      } else {\n        return currentElement;\n      }\n    }\n\n    return null;\n  },\n};\n\nexport default BinarySearch;\n","import BinarySearch from '../utils/binary-search';\nimport type { Fragment, MediaFragment } from '../loader/fragment';\nimport type { LevelDetails } from '../loader/level-details';\n\n/**\n * Returns first fragment whose endPdt value exceeds the given PDT, or null.\n * @param fragments - The array of candidate fragments\n * @param PDTValue - The PDT value which must be exceeded\n * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n */\nexport function findFragmentByPDT(\n  fragments: MediaFragment[],\n  PDTValue: number | null,\n  maxFragLookUpTolerance: number,\n): MediaFragment | null {\n  if (\n    PDTValue === null ||\n    !Array.isArray(fragments) ||\n    !fragments.length ||\n    !Number.isFinite(PDTValue)\n  ) {\n    return null;\n  }\n\n  // if less than start\n  const startPDT = fragments[0].programDateTime;\n  if (PDTValue < (startPDT || 0)) {\n    return null;\n  }\n\n  const endPDT = fragments[fragments.length - 1].endProgramDateTime;\n  if (PDTValue >= (endPDT || 0)) {\n    return null;\n  }\n\n  for (let seg = 0; seg < fragments.length; ++seg) {\n    const frag = fragments[seg];\n    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {\n      return frag;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.\n * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus\n * breaking any traps which would cause the same fragment to be continuously selected within a small range.\n * @param fragPrevious - The last frag successfully appended\n * @param fragments - The array of candidate fragments\n * @param bufferEnd - The end of the contiguous buffered range the playhead is currently within\n * @param maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous\n * @returns a matching fragment or null\n */\nexport function findFragmentByPTS(\n  fragPrevious: MediaFragment | null,\n  fragments: MediaFragment[],\n  bufferEnd: number = 0,\n  maxFragLookUpTolerance: number = 0,\n  nextFragLookupTolerance: number = 0.005,\n): MediaFragment | null {\n  let fragNext: MediaFragment | null = null;\n  if (fragPrevious) {\n    fragNext = fragments[1 + fragPrevious.sn - fragments[0].sn] || null;\n    // check for buffer-end rounding error\n    const bufferEdgeError = (fragPrevious.endDTS as number) - bufferEnd;\n    if (bufferEdgeError > 0 && bufferEdgeError < 0.0000015) {\n      bufferEnd += 0.0000015;\n    }\n    if (\n      fragNext &&\n      fragPrevious.level !== fragNext.level &&\n      fragNext.end <= fragPrevious.end\n    ) {\n      fragNext = fragments[2 + fragPrevious.sn - fragments[0].sn] || null;\n    }\n  } else if (bufferEnd === 0 && fragments[0].start === 0) {\n    fragNext = fragments[0];\n  }\n  // Prefer the next fragment if it's within tolerance\n  if (\n    fragNext &&\n    (((!fragPrevious || fragPrevious.level === fragNext.level) &&\n      fragmentWithinToleranceTest(\n        bufferEnd,\n        maxFragLookUpTolerance,\n        fragNext,\n      ) === 0) ||\n      fragmentWithinFastStartSwitch(\n        fragNext,\n        fragPrevious,\n        Math.min(nextFragLookupTolerance, maxFragLookUpTolerance),\n      ))\n  ) {\n    return fragNext;\n  }\n  // We might be seeking past the tolerance so find the best match\n  const foundFragment = BinarySearch.search(\n    fragments,\n    fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance),\n  );\n  if (foundFragment && (foundFragment !== fragPrevious || !fragNext)) {\n    return foundFragment;\n  }\n  // If no match was found return the next fragment after fragPrevious, or null\n  return fragNext;\n}\n\nfunction fragmentWithinFastStartSwitch(\n  fragNext: Fragment,\n  fragPrevious: Fragment | null,\n  nextFragLookupTolerance: number,\n): boolean {\n  if (\n    fragPrevious &&\n    fragPrevious.start === 0 &&\n    fragPrevious.level < fragNext.level &&\n    (fragPrevious.endPTS || 0) > 0\n  ) {\n    const firstDuration = fragPrevious.tagList.reduce((duration, tag) => {\n      if (tag[0] === 'INF') {\n        duration += parseFloat(tag[1]);\n      }\n      return duration;\n    }, nextFragLookupTolerance);\n    return fragNext.start <= firstDuration;\n  }\n  return false;\n}\n\n/**\n * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.\n * @param candidate - The fragment to test\n * @param bufferEnd - The end of the current buffered range the playhead is currently within\n * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns 0 if it matches, 1 if too low, -1 if too high\n */\nexport function fragmentWithinToleranceTest(\n  bufferEnd = 0,\n  maxFragLookUpTolerance = 0,\n  candidate: MediaFragment,\n) {\n  // eagerly accept an accurate match (no tolerance)\n  if (\n    candidate.start <= bufferEnd &&\n    candidate.start + candidate.duration > bufferEnd\n  ) {\n    return 0;\n  }\n  // offset should be within fragment boundary - config.maxFragLookUpTolerance\n  // this is to cope with situations like\n  // bufferEnd = 9.991\n  // frag[Ø] : [0,10]\n  // frag[1] : [10,20]\n  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n  //              frag start               frag start+duration\n  //                  |-----------------------------|\n  //              <--->                         <--->\n  //  ...--------><-----------------------------><---------....\n  // previous frag         matching fragment         next frag\n  //  return -1             return 0                 return 1\n  // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n  const candidateLookupTolerance = Math.min(\n    maxFragLookUpTolerance,\n    candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0),\n  );\n  if (\n    candidate.start + candidate.duration - candidateLookupTolerance <=\n    bufferEnd\n  ) {\n    return 1;\n  } else if (\n    candidate.start - candidateLookupTolerance > bufferEnd &&\n    candidate.start\n  ) {\n    // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n    return -1;\n  }\n\n  return 0;\n}\n\n/**\n * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.\n * This function tests the candidate's program date time values, as represented in Unix time\n * @param candidate - The fragment to test\n * @param pdtBufferEnd - The Unix time representing the end of the current buffered range\n * @param maxFragLookUpTolerance - The amount of time that a fragment's start can be within in order to be considered contiguous\n * @returns true if contiguous, false otherwise\n */\nexport function pdtWithinToleranceTest(\n  pdtBufferEnd: number,\n  maxFragLookUpTolerance: number,\n  candidate: MediaFragment,\n): boolean {\n  const candidateLookupTolerance =\n    Math.min(\n      maxFragLookUpTolerance,\n      candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0),\n    ) * 1000;\n\n  // endProgramDateTime can be null, default to zero\n  const endProgramDateTime = candidate.endProgramDateTime || 0;\n  return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;\n}\n\nexport function findFragWithCC(\n  fragments: MediaFragment[],\n  cc: number,\n): MediaFragment | null {\n  return BinarySearch.search(fragments, (candidate) => {\n    if (candidate.cc < cc) {\n      return 1;\n    } else if (candidate.cc > cc) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\nexport function findNearestWithCC(\n  details: LevelDetails | undefined,\n  cc: number,\n  pos: number,\n): MediaFragment | null {\n  if (details) {\n    if (details.startCC <= cc && details.endCC >= cc) {\n      let fragments = details.fragments;\n      const { fragmentHint } = details;\n      if (fragmentHint) {\n        fragments = fragments.concat(fragmentHint);\n      }\n      let closest: MediaFragment | undefined;\n      BinarySearch.search(fragments, (candidate) => {\n        if (candidate.cc < cc) {\n          return 1;\n        }\n        if (candidate.cc > cc) {\n          return -1;\n        }\n        closest = candidate;\n        if (candidate.end <= pos) {\n          return 1;\n        }\n        if (candidate.start > pos) {\n          return -1;\n        }\n        return 0;\n      });\n      return closest || null;\n    }\n  }\n  return null;\n}\n","import { ErrorDetails } from '../errors';\nimport type { LoaderConfig, LoadPolicy, RetryConfig } from '../config';\nimport type { ErrorData } from '../types/events';\nimport type { LoaderResponse } from '../types/loader';\n\nexport function isTimeoutError(error: ErrorData): boolean {\n  switch (error.details) {\n    case ErrorDetails.FRAG_LOAD_TIMEOUT:\n    case ErrorDetails.KEY_LOAD_TIMEOUT:\n    case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n    case ErrorDetails.MANIFEST_LOAD_TIMEOUT:\n      return true;\n  }\n  return false;\n}\n\nexport function isKeyError(error: ErrorData): boolean {\n  return error.details.startsWith('key');\n}\n\nexport function isUnusableKeyError(error: ErrorData): boolean {\n  return isKeyError(error) && !!error.frag && !error.frag.decryptdata;\n}\n\nexport function getRetryConfig(\n  loadPolicy: LoadPolicy,\n  error: ErrorData,\n): RetryConfig | null {\n  const isTimeout = isTimeoutError(error);\n  return loadPolicy.default[`${isTimeout ? 'timeout' : 'error'}Retry`];\n}\n\nexport function getRetryDelay(\n  retryConfig: RetryConfig,\n  retryCount: number,\n): number {\n  // exponential backoff capped to max retry delay\n  const backoffFactor =\n    retryConfig.backoff === 'linear' ? 1 : Math.pow(2, retryCount);\n  return Math.min(\n    backoffFactor * retryConfig.retryDelayMs,\n    retryConfig.maxRetryDelayMs,\n  );\n}\n\nexport function getLoaderConfigWithoutReties(\n  loderConfig: LoaderConfig,\n): LoaderConfig {\n  return {\n    ...loderConfig,\n    ...{\n      errorRetry: null,\n      timeoutRetry: null,\n    },\n  };\n}\n\nexport function shouldRetry(\n  retryConfig: RetryConfig | null | undefined,\n  retryCount: number,\n  isTimeout: boolean,\n  loaderResponse?: LoaderResponse | undefined,\n): retryConfig is RetryConfig & boolean {\n  if (!retryConfig) {\n    return false;\n  }\n  const httpStatus = loaderResponse?.code;\n  const retry =\n    retryCount < retryConfig.maxNumRetry &&\n    (retryForHttpStatus(httpStatus) || !!isTimeout);\n  return retryConfig.shouldRetry\n    ? retryConfig.shouldRetry(\n        retryConfig,\n        retryCount,\n        isTimeout,\n        loaderResponse,\n        retry,\n      )\n    : retry;\n}\n\nexport function retryForHttpStatus(httpStatus: number | undefined): boolean {\n  // Do not retry on status 4xx, status 0 (CORS error), or undefined (decrypt/gap/parse error)\n  return (\n    offlineHttpStatus(httpStatus) ||\n    (!!httpStatus && (httpStatus < 400 || httpStatus > 499))\n  );\n}\n\nexport function offlineHttpStatus(httpStatus: number | undefined): boolean {\n  return httpStatus === 0 && navigator.onLine === false;\n}\n","import { findFragmentByPTS } from './fragment-finders';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { HdcpLevels } from '../types/level';\nimport { PlaylistContextType, PlaylistLevelType } from '../types/loader';\nimport { getCodecsForMimeType } from '../utils/codecs';\nimport {\n  getRetryConfig,\n  isKeyError,\n  isTimeoutError,\n  isUnusableKeyError,\n  shouldRetry,\n} from '../utils/error-helper';\nimport { arrayToHex } from '../utils/hex';\nimport { Logger } from '../utils/logger';\nimport type { RetryConfig } from '../config';\nimport type { LevelKey } from '../hls';\nimport type Hls from '../hls';\nimport type { Fragment, MediaFragment } from '../loader/fragment';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type { ErrorData } from '../types/events';\nimport type { HdcpLevel, Level } from '../types/level';\n\nexport const enum NetworkErrorAction {\n  DoNothing = 0,\n  SendEndCallback = 1, // Reserved for future use\n  SendAlternateToPenaltyBox = 2,\n  RemoveAlternatePermanently = 3, // Reserved for future use\n  InsertDiscontinuity = 4, // Reserved for future use\n  RetryRequest = 5,\n}\n\nexport const enum ErrorActionFlags {\n  None = 0,\n  MoveAllAlternatesMatchingHost = 1,\n  MoveAllAlternatesMatchingHDCP = 2,\n  MoveAllAlternatesMatchingKey = 4,\n  SwitchToSDR = 8,\n}\n\nexport type IErrorAction = {\n  action: NetworkErrorAction;\n  flags: ErrorActionFlags;\n  retryCount?: number;\n  retryConfig?: RetryConfig;\n  hdcpLevel?: HdcpLevel;\n  nextAutoLevel?: number;\n  resolved?: boolean;\n};\nexport default class ErrorController\n  extends Logger\n  implements NetworkComponentAPI\n{\n  private readonly hls: Hls;\n  private playlistError: number = 0;\n\n  constructor(hls: Hls) {\n    super('error-controller', hls.logger);\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  private registerListeners() {\n    const hls = this.hls;\n    hls.on(Events.ERROR, this.onError, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n  }\n\n  private unregisterListeners() {\n    const hls = this.hls;\n    if (!hls) {\n      return;\n    }\n    hls.off(Events.ERROR, this.onError, this);\n    hls.off(Events.ERROR, this.onErrorOut, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n  }\n\n  destroy() {\n    this.unregisterListeners();\n    // @ts-ignore\n    this.hls = null;\n  }\n\n  startLoad(startPosition: number): void {}\n\n  stopLoad(): void {\n    this.playlistError = 0;\n  }\n\n  private getVariantLevelIndex(frag: Fragment | undefined): number {\n    if (frag?.type === PlaylistLevelType.MAIN) {\n      return frag.level;\n    }\n    return this.getVariantIndex();\n  }\n\n  private getVariantIndex(): number {\n    const hls = this.hls;\n    const currentLevel = hls.currentLevel;\n    if (hls.loadLevelObj?.details || currentLevel === -1) {\n      return hls.loadLevel;\n    }\n    return currentLevel;\n  }\n\n  private variantHasKey(\n    level: Level | undefined,\n    keyInError: LevelKey,\n  ): boolean {\n    if (level) {\n      if (level.details?.hasKey(keyInError)) {\n        return true;\n      }\n      const audioGroupsIds = level.audioGroups;\n      if (audioGroupsIds) {\n        const audioTracks = this.hls.allAudioTracks.filter(\n          (track) => audioGroupsIds.indexOf(track.groupId) >= 0,\n        );\n        return audioTracks.some((track) => track.details?.hasKey(keyInError));\n      }\n    }\n    return false;\n  }\n\n  private onManifestLoading() {\n    this.playlistError = 0;\n  }\n\n  private onLevelUpdated() {\n    this.playlistError = 0;\n  }\n\n  private onError(event: Events.ERROR, data: ErrorData) {\n    if (data.fatal) {\n      return;\n    }\n    const hls = this.hls;\n    const context = data.context;\n\n    switch (data.details) {\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.KEY_LOAD_ERROR:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n        data.errorAction = this.getFragRetryOrSwitchAction(data);\n        return;\n      case ErrorDetails.FRAG_PARSING_ERROR:\n        // ignore empty segment errors marked as gap\n        if (data.frag?.gap) {\n          data.errorAction = createDoNothingErrorAction();\n          return;\n        }\n      // falls through\n      case ErrorDetails.FRAG_GAP:\n      case ErrorDetails.FRAG_DECRYPT_ERROR: {\n        // Switch level if possible, otherwise allow retry count to reach max error retries\n        data.errorAction = this.getFragRetryOrSwitchAction(data);\n        data.errorAction.action = NetworkErrorAction.SendAlternateToPenaltyBox;\n        return;\n      }\n      case ErrorDetails.LEVEL_EMPTY_ERROR:\n      case ErrorDetails.LEVEL_PARSING_ERROR:\n        {\n          // Only retry when empty and live\n          const levelIndex =\n            data.parent === PlaylistLevelType.MAIN\n              ? (data.level as number)\n              : hls.loadLevel;\n          if (\n            data.details === ErrorDetails.LEVEL_EMPTY_ERROR &&\n            !!data.context?.levelDetails?.live\n          ) {\n            data.errorAction = this.getPlaylistRetryOrSwitchAction(\n              data,\n              levelIndex,\n            );\n          } else {\n            // Escalate to fatal if not retrying or switching\n            data.levelRetry = false;\n            data.errorAction = this.getLevelSwitchAction(data, levelIndex);\n          }\n        }\n        return;\n      case ErrorDetails.LEVEL_LOAD_ERROR:\n      case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        if (typeof context?.level === 'number') {\n          data.errorAction = this.getPlaylistRetryOrSwitchAction(\n            data,\n            context.level,\n          );\n        }\n        return;\n      case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:\n      case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:\n      case ErrorDetails.SUBTITLE_LOAD_ERROR:\n      case ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT:\n        if (context) {\n          const level = hls.loadLevelObj;\n          if (\n            level &&\n            ((context.type === PlaylistContextType.AUDIO_TRACK &&\n              level.hasAudioGroup(context.groupId)) ||\n              (context.type === PlaylistContextType.SUBTITLE_TRACK &&\n                level.hasSubtitleGroup(context.groupId)))\n          ) {\n            // Perform Pathway switch or Redundant failover if possible for fastest recovery\n            // otherwise allow playlist retry count to reach max error retries\n            data.errorAction = this.getPlaylistRetryOrSwitchAction(\n              data,\n              hls.loadLevel,\n            );\n            data.errorAction.action =\n              NetworkErrorAction.SendAlternateToPenaltyBox;\n            data.errorAction.flags =\n              ErrorActionFlags.MoveAllAlternatesMatchingHost;\n            return;\n          }\n        }\n        return;\n      case ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:\n        {\n          data.errorAction = {\n            action: NetworkErrorAction.SendAlternateToPenaltyBox,\n            flags: ErrorActionFlags.MoveAllAlternatesMatchingHDCP,\n          };\n        }\n        return;\n      case ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED:\n      case ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR:\n      case ErrorDetails.KEY_SYSTEM_NO_SESSION:\n        {\n          data.errorAction = {\n            action: NetworkErrorAction.SendAlternateToPenaltyBox,\n            flags: ErrorActionFlags.MoveAllAlternatesMatchingKey,\n          };\n        }\n        return;\n      case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n      case ErrorDetails.REMUX_ALLOC_ERROR:\n      case ErrorDetails.BUFFER_APPEND_ERROR:\n        // Buffer-controller can set errorAction when append errors can be ignored or resolved locally\n        if (!data.errorAction) {\n          data.errorAction = this.getLevelSwitchAction(\n            data,\n            data.level ?? hls.loadLevel,\n          );\n        }\n        return;\n      case ErrorDetails.INTERNAL_EXCEPTION:\n      case ErrorDetails.BUFFER_APPENDING_ERROR:\n      case ErrorDetails.BUFFER_FULL_ERROR:\n      case ErrorDetails.LEVEL_SWITCH_ERROR:\n      case ErrorDetails.BUFFER_STALLED_ERROR:\n      case ErrorDetails.BUFFER_SEEK_OVER_HOLE:\n      case ErrorDetails.BUFFER_NUDGE_ON_STALL:\n        data.errorAction = createDoNothingErrorAction();\n        return;\n    }\n\n    if (data.type === ErrorTypes.KEY_SYSTEM_ERROR) {\n      // Do not retry level. Should be fatal if ErrorDetails.KEY_SYSTEM_<ERROR> not handled with early return above.\n      data.levelRetry = false;\n      data.errorAction = createDoNothingErrorAction();\n    }\n  }\n\n  private getPlaylistRetryOrSwitchAction(\n    data: ErrorData,\n    levelIndex: number | null | undefined,\n  ): IErrorAction {\n    const hls = this.hls;\n    const retryConfig = getRetryConfig(hls.config.playlistLoadPolicy, data);\n    const retryCount = this.playlistError++;\n    const retry = shouldRetry(\n      retryConfig,\n      retryCount,\n      isTimeoutError(data),\n      data.response,\n    );\n    if (retry) {\n      return {\n        action: NetworkErrorAction.RetryRequest,\n        flags: ErrorActionFlags.None,\n        retryConfig,\n        retryCount,\n      };\n    }\n    const errorAction = this.getLevelSwitchAction(data, levelIndex);\n    if (retryConfig) {\n      errorAction.retryConfig = retryConfig;\n      errorAction.retryCount = retryCount;\n    }\n    return errorAction;\n  }\n\n  private getFragRetryOrSwitchAction(data: ErrorData): IErrorAction {\n    const hls = this.hls;\n    // Share fragment error count accross media options (main, audio, subs)\n    // This allows for level based rendition switching when media option assets fail\n    const variantLevelIndex = this.getVariantLevelIndex(data.frag);\n    const level = hls.levels[variantLevelIndex];\n    const { fragLoadPolicy, keyLoadPolicy } = hls.config;\n    const retryConfig = getRetryConfig(\n      isKeyError(data) ? keyLoadPolicy : fragLoadPolicy,\n      data,\n    );\n    const fragmentErrors = hls.levels.reduce(\n      (acc, level) => acc + level.fragmentError,\n      0,\n    );\n    // Switch levels when out of retried or level index out of bounds\n    if (level) {\n      if (data.details !== ErrorDetails.FRAG_GAP) {\n        level.fragmentError++;\n      }\n      if (!isUnusableKeyError(data)) {\n        const retry = shouldRetry(\n          retryConfig,\n          fragmentErrors,\n          isTimeoutError(data),\n          data.response,\n        );\n        if (retry) {\n          return {\n            action: NetworkErrorAction.RetryRequest,\n            flags: ErrorActionFlags.None,\n            retryConfig,\n            retryCount: fragmentErrors,\n          };\n        }\n      }\n    }\n    // Reach max retry count, or Missing level reference\n    // Switch to valid index\n    const errorAction = this.getLevelSwitchAction(data, variantLevelIndex);\n    // Add retry details to allow skipping of FRAG_PARSING_ERROR\n    if (retryConfig) {\n      errorAction.retryConfig = retryConfig;\n      errorAction.retryCount = fragmentErrors;\n    }\n    return errorAction;\n  }\n\n  private getLevelSwitchAction(\n    data: ErrorData,\n    levelIndex: number | null | undefined,\n  ): IErrorAction {\n    const hls = this.hls;\n    if (levelIndex === null || levelIndex === undefined) {\n      levelIndex = hls.loadLevel;\n    }\n    const level = this.hls.levels[levelIndex];\n    if (level) {\n      const errorDetails = data.details;\n      level.loadError++;\n      if (errorDetails === ErrorDetails.BUFFER_APPEND_ERROR) {\n        level.fragmentError++;\n      }\n      // Search for next level to retry\n      let nextLevel = -1;\n      const { levels, loadLevel, minAutoLevel, maxAutoLevel } = hls;\n      if (!hls.autoLevelEnabled && !hls.config.preserveManualLevelOnError) {\n        hls.loadLevel = -1;\n      }\n      const fragErrorType = data.frag?.type;\n      // Find alternate audio codec if available on audio codec error\n      const isAudioCodecError =\n        (fragErrorType === PlaylistLevelType.AUDIO &&\n          errorDetails === ErrorDetails.FRAG_PARSING_ERROR) ||\n        (data.sourceBufferName === 'audio' &&\n          (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR ||\n            errorDetails === ErrorDetails.BUFFER_APPEND_ERROR));\n      const findAudioCodecAlternate =\n        isAudioCodecError &&\n        levels.some(({ audioCodec }) => level.audioCodec !== audioCodec);\n      // Find alternate video codec if available on video codec error\n      const isVideoCodecError =\n        data.sourceBufferName === 'video' &&\n        (errorDetails === ErrorDetails.BUFFER_ADD_CODEC_ERROR ||\n          errorDetails === ErrorDetails.BUFFER_APPEND_ERROR);\n      const findVideoCodecAlternate =\n        isVideoCodecError &&\n        levels.some(\n          ({ codecSet, audioCodec }) =>\n            level.codecSet !== codecSet && level.audioCodec === audioCodec,\n        );\n      const { type: playlistErrorType, groupId: playlistErrorGroupId } =\n        data.context ?? {};\n      for (let i = levels.length; i--; ) {\n        const candidate = (i + loadLevel) % levels.length;\n        if (\n          candidate !== loadLevel &&\n          candidate >= minAutoLevel &&\n          candidate <= maxAutoLevel &&\n          levels[candidate].loadError === 0\n        ) {\n          const levelCandidate = levels[candidate];\n          // Skip level switch if GAP tag is found in next level at same position\n          if (\n            errorDetails === ErrorDetails.FRAG_GAP &&\n            fragErrorType === PlaylistLevelType.MAIN &&\n            data.frag\n          ) {\n            const levelDetails = levels[candidate].details;\n            if (levelDetails) {\n              const fragCandidate = findFragmentByPTS(\n                data.frag as MediaFragment,\n                levelDetails.fragments,\n                data.frag.start,\n              );\n              if (fragCandidate?.gap) {\n                continue;\n              }\n            }\n          } else if (\n            (playlistErrorType === PlaylistContextType.AUDIO_TRACK &&\n              levelCandidate.hasAudioGroup(playlistErrorGroupId)) ||\n            (playlistErrorType === PlaylistContextType.SUBTITLE_TRACK &&\n              levelCandidate.hasSubtitleGroup(playlistErrorGroupId))\n          ) {\n            // For audio/subs playlist errors find another group ID or fallthrough to redundant fail-over\n            continue;\n          } else if (\n            (fragErrorType === PlaylistLevelType.AUDIO &&\n              level.audioGroups?.some((groupId) =>\n                levelCandidate.hasAudioGroup(groupId),\n              )) ||\n            (fragErrorType === PlaylistLevelType.SUBTITLE &&\n              level.subtitleGroups?.some((groupId) =>\n                levelCandidate.hasSubtitleGroup(groupId),\n              )) ||\n            (findAudioCodecAlternate &&\n              level.audioCodec === levelCandidate.audioCodec) ||\n            (findVideoCodecAlternate &&\n              level.codecSet === levelCandidate.codecSet) ||\n            (!findAudioCodecAlternate &&\n              level.codecSet !== levelCandidate.codecSet)\n          ) {\n            // For video/audio/subs frag errors find another group ID or fallthrough to redundant fail-over\n            continue;\n          }\n          nextLevel = candidate;\n          break;\n        }\n      }\n      if (nextLevel > -1 && hls.loadLevel !== nextLevel) {\n        data.levelRetry = true;\n        this.playlistError = 0;\n        return {\n          action: NetworkErrorAction.SendAlternateToPenaltyBox,\n          flags: ErrorActionFlags.None,\n          nextAutoLevel: nextLevel,\n        };\n      }\n    }\n    // No levels to switch / Manual level selection / Level not found\n    // Resolve with Pathway switch, Redundant fail-over, or stay on lowest Level\n    return {\n      action: NetworkErrorAction.SendAlternateToPenaltyBox,\n      flags: ErrorActionFlags.MoveAllAlternatesMatchingHost,\n    };\n  }\n\n  public onErrorOut(event: Events.ERROR, data: ErrorData) {\n    switch (data.errorAction?.action) {\n      case NetworkErrorAction.DoNothing:\n        break;\n      case NetworkErrorAction.SendAlternateToPenaltyBox:\n        this.sendAlternateToPenaltyBox(data);\n        if (\n          !data.errorAction.resolved &&\n          data.details !== ErrorDetails.FRAG_GAP\n        ) {\n          data.fatal = true;\n        } else if (/MediaSource readyState: ended/.test(data.error.message)) {\n          this.warn(\n            `MediaSource ended after \"${data.sourceBufferName}\" sourceBuffer append error. Attempting to recover from media error.`,\n          );\n          this.hls.recoverMediaError();\n        }\n        break;\n      case NetworkErrorAction.RetryRequest:\n        // handled by stream and playlist/level controllers\n        break;\n    }\n\n    if (data.fatal) {\n      this.hls.stopLoad();\n      return;\n    }\n  }\n\n  private sendAlternateToPenaltyBox(data: ErrorData) {\n    const hls = this.hls;\n    const errorAction = data.errorAction;\n    if (!errorAction) {\n      return;\n    }\n    const { flags } = errorAction;\n    const nextAutoLevel = errorAction.nextAutoLevel;\n\n    switch (flags) {\n      case ErrorActionFlags.None:\n        this.switchLevel(data, nextAutoLevel);\n        break;\n      case ErrorActionFlags.MoveAllAlternatesMatchingHDCP: {\n        const levelIndex = this.getVariantLevelIndex(data.frag);\n        const level = hls.levels[levelIndex];\n        const restrictedHdcpLevel = (level as Level | undefined)?.attrs[\n          'HDCP-LEVEL'\n        ];\n        errorAction.hdcpLevel = restrictedHdcpLevel;\n        if (restrictedHdcpLevel === 'NONE') {\n          this.warn(`HDCP policy resticted output with HDCP-LEVEL=NONE`);\n        } else if (restrictedHdcpLevel) {\n          hls.maxHdcpLevel =\n            HdcpLevels[HdcpLevels.indexOf(restrictedHdcpLevel) - 1];\n          errorAction.resolved = true;\n          this.warn(\n            `Restricting playback to HDCP-LEVEL of \"${hls.maxHdcpLevel}\" or lower`,\n          );\n          break;\n        }\n        // Fallthrough when no HDCP-LEVEL attribute is found\n      }\n      // eslint-disable-next-line no-fallthrough\n      case ErrorActionFlags.MoveAllAlternatesMatchingKey: {\n        const levelKey = data.decryptdata;\n        if (levelKey) {\n          // Penalize all levels with key\n          const levels = this.hls.levels;\n          const levelCountWithError = levels.length;\n          for (let i = levelCountWithError; i--; ) {\n            if (this.variantHasKey(levels[i], levelKey)) {\n              this.log(\n                `Banned key found in level ${i} (${levels[i].bitrate}bps) or audio group \"${levels[i].audioGroups?.join(',')}\" (${data.frag?.type} fragment) ${arrayToHex(levelKey.keyId || [])}`,\n              );\n              levels[i].fragmentError++;\n              levels[i].loadError++;\n              this.log(`Removing level ${i} with key error (${data.error})`);\n              this.hls.removeLevel(i);\n            }\n          }\n          const frag = data.frag;\n          if (this.hls.levels.length < levelCountWithError) {\n            errorAction.resolved = true;\n          } else if (frag && frag.type !== PlaylistLevelType.MAIN) {\n            // Ignore key error for audio track with unmatched key (main session error)\n            const fragLevelKey = frag.decryptdata;\n            if (fragLevelKey && !levelKey.matches(fragLevelKey)) {\n              errorAction.resolved = true;\n            }\n          }\n        }\n        break;\n      }\n    }\n    // If not resolved by previous actions try to switch to next level\n    if (!errorAction.resolved) {\n      this.switchLevel(data, nextAutoLevel);\n    }\n  }\n\n  private switchLevel(data: ErrorData, levelIndex: number | undefined) {\n    if (levelIndex !== undefined && data.errorAction) {\n      this.warn(`switching to level ${levelIndex} after ${data.details}`);\n      this.hls.nextAutoLevel = levelIndex;\n      data.errorAction.resolved = true;\n      // Stream controller is responsible for this but won't switch on false start\n      this.hls.nextLoadLevel = this.hls.nextAutoLevel;\n      if (\n        data.details === ErrorDetails.BUFFER_ADD_CODEC_ERROR &&\n        data.mimeType &&\n        data.sourceBufferName !== 'audiovideo'\n      ) {\n        const codec = getCodecsForMimeType(data.mimeType);\n        const levels = this.hls.levels;\n        for (let i = levels.length; i--; ) {\n          if (levels[i][`${data.sourceBufferName}Codec`] === codec) {\n            this.log(\n              `Removing level ${i} for ${data.details} (\"${codec}\" not supported)`,\n            );\n            this.hls.removeLevel(i);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function createDoNothingErrorAction(resolved?: boolean): IErrorAction {\n  const errorAction: IErrorAction = {\n    action: NetworkErrorAction.DoNothing,\n    flags: ErrorActionFlags.None,\n  };\n  if (resolved) {\n    errorAction.resolved = true;\n  }\n  return errorAction;\n}\n","import { Events } from '../events';\nimport type Hls from '../hls';\nimport type { Fragment, MediaFragment, Part } from '../loader/fragment';\nimport type { SourceBufferName } from '../types/buffer';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  BufferAppendedData,\n  FragBufferedData,\n  FragLoadedData,\n} from '../types/events';\nimport type {\n  FragmentBufferedRange,\n  FragmentEntity,\n  FragmentTimeRange,\n} from '../types/fragment-tracker';\nimport type { PlaylistLevelType } from '../types/loader';\n\nexport const enum FragmentState {\n  NOT_LOADED = 'NOT_LOADED',\n  APPENDING = 'APPENDING',\n  PARTIAL = 'PARTIAL',\n  OK = 'OK',\n}\n\nexport class FragmentTracker implements ComponentAPI {\n  private activePartLists: { [key in PlaylistLevelType]?: Part[] } =\n    Object.create(null);\n  private endListFragments: { [key in PlaylistLevelType]?: FragmentEntity } =\n    Object.create(null);\n  private fragments: Partial<Record<string, FragmentEntity>> =\n    Object.create(null);\n  private timeRanges:\n    | {\n        [key in SourceBufferName]?: TimeRanges;\n      }\n    | null = Object.create(null);\n\n  private bufferPadding: number = 0.2;\n  private hls: Hls | null;\n  private hasGaps: boolean = false;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n\n    this._registerListeners();\n  }\n\n  private _registerListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n    }\n  }\n\n  private _unregisterListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n      hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n    }\n  }\n\n  public destroy() {\n    this._unregisterListeners();\n    // @ts-ignore\n    this.hls =\n      // @ts-ignore\n      this.fragments =\n      // @ts-ignore\n      this.activePartLists =\n      // @ts-ignore\n      this.endListFragments =\n      this.timeRanges =\n        null;\n  }\n\n  /**\n   * Return a Fragment or Part with an appended range that matches the position and levelType\n   * Otherwise, return null\n   */\n  public getAppendedFrag(\n    position: number,\n    levelType: PlaylistLevelType,\n  ): MediaFragment | Part | null {\n    const activeParts = this.activePartLists[levelType];\n    if (activeParts) {\n      for (let i = activeParts.length; i--; ) {\n        const activePart = activeParts[i];\n        if (!activePart as any) {\n          break;\n        }\n        if (\n          activePart.start <= position &&\n          position <= activePart.end &&\n          activePart.loaded\n        ) {\n          return activePart;\n        }\n      }\n    }\n    return this.getBufferedFrag(position, levelType);\n  }\n\n  /**\n   * Return a buffered Fragment that matches the position and levelType.\n   * A buffered Fragment is one whose loading, parsing and appending is done (completed or \"partial\" meaning aborted).\n   * If not found any Fragment, return null\n   */\n  public getBufferedFrag(\n    position: number,\n    levelType: PlaylistLevelType,\n  ): MediaFragment | null {\n    return this.getFragAtPos(position, levelType, true);\n  }\n\n  public getFragAtPos(\n    position: number,\n    levelType: PlaylistLevelType,\n    buffered?: boolean,\n  ): MediaFragment | null {\n    const { fragments } = this;\n    const keys = Object.keys(fragments);\n    for (let i = keys.length; i--; ) {\n      const fragmentEntity = fragments[keys[i]];\n      if (\n        fragmentEntity?.body.type === levelType &&\n        (!buffered || fragmentEntity.buffered)\n      ) {\n        const frag = fragmentEntity.body;\n        if (frag.start <= position && position <= frag.end) {\n          return frag;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Partial fragments effected by coded frame eviction will be removed\n   * The browser will unload parts of the buffer to free up memory for new buffer data\n   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)\n   */\n  public detectEvictedFragments(\n    elementaryStream: SourceBufferName,\n    timeRange: TimeRanges,\n    playlistType: PlaylistLevelType,\n    appendedPart?: Part | null,\n    removeAppending?: boolean,\n  ) {\n    if (this.timeRanges) {\n      this.timeRanges[elementaryStream] = timeRange;\n    }\n    // Check if any flagged fragments have been unloaded\n    // excluding anything newer than appendedPartSn\n    const appendedPartSn = appendedPart?.fragment.sn || -1;\n    Object.keys(this.fragments).forEach((key) => {\n      const fragmentEntity = this.fragments[key];\n      if (!fragmentEntity) {\n        return;\n      }\n      if (appendedPartSn >= fragmentEntity.body.sn) {\n        return;\n      }\n      if (\n        !fragmentEntity.buffered &&\n        (!fragmentEntity.loaded || removeAppending)\n      ) {\n        if (fragmentEntity.body.type === playlistType) {\n          this.removeFragment(fragmentEntity.body);\n        }\n        return;\n      }\n      const esData = fragmentEntity.range[elementaryStream];\n      if (!esData) {\n        return;\n      }\n      if (esData.time.length === 0) {\n        this.removeFragment(fragmentEntity.body);\n        return;\n      }\n      esData.time.some((time: FragmentTimeRange) => {\n        const isNotBuffered = !this.isTimeBuffered(\n          time.startPTS,\n          time.endPTS,\n          timeRange,\n        );\n        if (isNotBuffered) {\n          // Unregister partial fragment as it needs to load again to be reused\n          this.removeFragment(fragmentEntity.body);\n        }\n        return isNotBuffered;\n      });\n    });\n  }\n\n  /**\n   * Checks if the fragment passed in is loaded in the buffer properly\n   * Partially loaded fragments will be registered as a partial fragment\n   */\n  public detectPartialFragments(data: FragBufferedData) {\n    const timeRanges = this.timeRanges;\n    if (!timeRanges || data.frag.sn === 'initSegment') {\n      return;\n    }\n\n    const frag = data.frag as MediaFragment;\n    const fragKey = getFragmentKey(frag);\n    const fragmentEntity = this.fragments[fragKey];\n    if (!fragmentEntity || (fragmentEntity.buffered && frag.gap)) {\n      return;\n    }\n    const isFragHint = !frag.relurl;\n    Object.keys(timeRanges).forEach((elementaryStream: SourceBufferName) => {\n      const streamInfo = frag.elementaryStreams[elementaryStream];\n      if (!streamInfo) {\n        return;\n      }\n      const timeRange = timeRanges[elementaryStream] as TimeRanges;\n      const partial = isFragHint || streamInfo.partial === true;\n      fragmentEntity.range[elementaryStream] = this.getBufferedTimes(\n        frag,\n        data.part,\n        partial,\n        timeRange,\n      );\n    });\n    fragmentEntity.loaded = null;\n    if (Object.keys(fragmentEntity.range).length) {\n      fragmentEntity.buffered = true;\n      const endList = (fragmentEntity.body.endList =\n        frag.endList || fragmentEntity.body.endList);\n      if (endList) {\n        this.endListFragments[fragmentEntity.body.type] = fragmentEntity;\n      }\n      if (!isPartial(fragmentEntity)) {\n        // Remove older fragment parts from lookup after frag is tracked as buffered\n        this.removeParts(frag.sn - 1, frag.type);\n      }\n    } else {\n      // remove fragment if nothing was appended\n      this.removeFragment(fragmentEntity.body);\n    }\n  }\n\n  private removeParts(snToKeep: number, levelType: PlaylistLevelType) {\n    const activeParts = this.activePartLists[levelType];\n    if (!activeParts) {\n      return;\n    }\n    this.activePartLists[levelType] = filterParts(\n      activeParts,\n      (part) => part.fragment.sn >= snToKeep,\n    );\n  }\n\n  public fragBuffered(frag: MediaFragment, force?: true) {\n    const fragKey = getFragmentKey(frag);\n    let fragmentEntity = this.fragments[fragKey];\n    if (!fragmentEntity && force) {\n      fragmentEntity = this.fragments[fragKey] = {\n        body: frag,\n        appendedPTS: null,\n        loaded: null,\n        buffered: false,\n        range: Object.create(null),\n      };\n      if (frag.gap) {\n        this.hasGaps = true;\n      }\n    }\n    if (fragmentEntity) {\n      fragmentEntity.loaded = null;\n      fragmentEntity.buffered = true;\n    }\n  }\n\n  private getBufferedTimes(\n    fragment: Fragment,\n    part: Part | null,\n    partial: boolean,\n    timeRange: TimeRanges,\n  ): FragmentBufferedRange {\n    const buffered: FragmentBufferedRange = {\n      time: [],\n      partial,\n    };\n    const startPTS = fragment.start;\n    const endPTS = fragment.end;\n    const minEndPTS = fragment.minEndPTS || endPTS;\n    const maxStartPTS = fragment.maxStartPTS || startPTS;\n    for (let i = 0; i < timeRange.length; i++) {\n      const startTime = timeRange.start(i) - this.bufferPadding;\n      const endTime = timeRange.end(i) + this.bufferPadding;\n      if (maxStartPTS >= startTime && minEndPTS <= endTime) {\n        // Fragment is entirely contained in buffer\n        // No need to check the other timeRange times since it's completely playable\n        buffered.time.push({\n          startPTS: Math.max(startPTS, timeRange.start(i)),\n          endPTS: Math.min(endPTS, timeRange.end(i)),\n        });\n        break;\n      } else if (startPTS < endTime && endPTS > startTime) {\n        const start = Math.max(startPTS, timeRange.start(i));\n        const end = Math.min(endPTS, timeRange.end(i));\n        if (end > start) {\n          buffered.partial = true;\n          // Check for intersection with buffer\n          // Get playable sections of the fragment\n          buffered.time.push({\n            startPTS: start,\n            endPTS: end,\n          });\n        }\n      } else if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        break;\n      }\n    }\n    return buffered;\n  }\n\n  /**\n   * Gets the partial fragment for a certain time\n   */\n  public getPartialFragment(time: number): MediaFragment | null {\n    let bestFragment: Fragment | null = null;\n    let timePadding: number;\n    let startTime: number;\n    let endTime: number;\n    let bestOverlap: number = 0;\n    const { bufferPadding, fragments } = this;\n    Object.keys(fragments).forEach((key) => {\n      const fragmentEntity = fragments[key];\n      if (!fragmentEntity) {\n        return;\n      }\n      if (isPartial(fragmentEntity)) {\n        startTime = fragmentEntity.body.start - bufferPadding;\n        endTime = fragmentEntity.body.end + bufferPadding;\n        if (time >= startTime && time <= endTime) {\n          // Use the fragment that has the most padding from start and end time\n          timePadding = Math.min(time - startTime, endTime - time);\n          if (bestOverlap <= timePadding) {\n            bestFragment = fragmentEntity.body;\n            bestOverlap = timePadding;\n          }\n        }\n      }\n    });\n    return bestFragment;\n  }\n\n  public isEndListAppended(type: PlaylistLevelType): boolean {\n    const lastFragmentEntity = this.endListFragments[type];\n    return (\n      lastFragmentEntity !== undefined &&\n      (lastFragmentEntity.buffered || isPartial(lastFragmentEntity))\n    );\n  }\n\n  public getState(fragment: Fragment): FragmentState {\n    const fragKey = getFragmentKey(fragment);\n    const fragmentEntity = this.fragments[fragKey];\n\n    if (fragmentEntity) {\n      if (!fragmentEntity.buffered) {\n        return FragmentState.APPENDING;\n      } else if (isPartial(fragmentEntity)) {\n        return FragmentState.PARTIAL;\n      } else {\n        return FragmentState.OK;\n      }\n    }\n\n    return FragmentState.NOT_LOADED;\n  }\n\n  private isTimeBuffered(\n    startPTS: number,\n    endPTS: number,\n    timeRange: TimeRanges,\n  ): boolean {\n    let startTime;\n    let endTime;\n    for (let i = 0; i < timeRange.length; i++) {\n      startTime = timeRange.start(i) - this.bufferPadding;\n      endTime = timeRange.end(i) + this.bufferPadding;\n      if (startPTS >= startTime && endPTS <= endTime) {\n        return true;\n      }\n\n      if (endPTS <= startTime) {\n        // No need to check the rest of the timeRange as it is in order\n        return false;\n      }\n    }\n\n    return false;\n  }\n\n  private onManifestLoading() {\n    this.removeAllFragments();\n  }\n\n  private onFragLoaded(event: Events.FRAG_LOADED, data: FragLoadedData) {\n    // don't track initsegment (for which sn is not a number)\n    // don't track frags used for bitrateTest, they're irrelevant.\n    if (data.frag.sn === 'initSegment' || data.frag.bitrateTest) {\n      return;\n    }\n\n    const frag = data.frag as MediaFragment;\n    // Fragment entity `loaded` FragLoadedData is null when loading parts\n    const loaded = data.part ? null : data;\n\n    const fragKey = getFragmentKey(frag);\n    this.fragments[fragKey] = {\n      body: frag,\n      appendedPTS: null,\n      loaded,\n      buffered: false,\n      range: Object.create(null),\n    };\n  }\n\n  private onBufferAppended(\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData,\n  ) {\n    const { frag, part, timeRanges, type } = data;\n    if (frag.sn === 'initSegment') {\n      return;\n    }\n    const playlistType = frag.type;\n    if (part) {\n      let activeParts = this.activePartLists[playlistType];\n      if (!activeParts) {\n        this.activePartLists[playlistType] = activeParts = [];\n      }\n      activeParts.push(part);\n    }\n    // Store the latest timeRanges loaded in the buffer\n    this.timeRanges = timeRanges;\n    const timeRange = timeRanges[type] as TimeRanges;\n    this.detectEvictedFragments(type, timeRange, playlistType, part);\n  }\n\n  private onFragBuffered(event: Events.FRAG_BUFFERED, data: FragBufferedData) {\n    this.detectPartialFragments(data);\n  }\n\n  private hasFragment(fragment: Fragment): boolean {\n    const fragKey = getFragmentKey(fragment);\n    return !!this.fragments[fragKey];\n  }\n\n  public hasFragments(type?: PlaylistLevelType): boolean {\n    const { fragments } = this;\n    const keys = Object.keys(fragments);\n    if (!type) {\n      return keys.length > 0;\n    }\n    for (let i = keys.length; i--; ) {\n      const fragmentEntity = fragments[keys[i]];\n      if (fragmentEntity?.body.type === type) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public hasParts(type: PlaylistLevelType): boolean {\n    return !!this.activePartLists[type]?.length;\n  }\n\n  public removeFragmentsInRange(\n    start: number,\n    end: number,\n    playlistType: PlaylistLevelType,\n    withGapOnly?: boolean,\n    unbufferedOnly?: boolean,\n  ) {\n    if (withGapOnly && !this.hasGaps) {\n      return;\n    }\n    Object.keys(this.fragments).forEach((key) => {\n      const fragmentEntity = this.fragments[key];\n      if (!fragmentEntity) {\n        return;\n      }\n      const frag = fragmentEntity.body;\n      if (frag.type !== playlistType || (withGapOnly && !frag.gap)) {\n        return;\n      }\n      if (\n        frag.start < end &&\n        frag.end > start &&\n        (fragmentEntity.buffered || unbufferedOnly)\n      ) {\n        this.removeFragment(frag);\n      }\n    });\n  }\n\n  public removeFragment(fragment: Fragment) {\n    const fragKey = getFragmentKey(fragment);\n    fragment.clearElementaryStreamInfo();\n    const activeParts = this.activePartLists[fragment.type];\n    if (activeParts) {\n      const snToRemove = fragment.sn;\n      this.activePartLists[fragment.type] = filterParts(\n        activeParts,\n        (part) => part.fragment.sn !== snToRemove,\n      );\n    }\n    delete this.fragments[fragKey];\n    if (fragment.endList) {\n      delete this.endListFragments[fragment.type];\n    }\n  }\n\n  public removeAllFragments() {\n    this.fragments = Object.create(null);\n    this.endListFragments = Object.create(null);\n    this.activePartLists = Object.create(null);\n    this.hasGaps = false;\n    const partlist = this.hls?.latestLevelDetails?.partList;\n    if (partlist) {\n      partlist.forEach((part) => part.clearElementaryStreamInfo());\n    }\n  }\n}\n\nfunction isPartial(fragmentEntity: FragmentEntity): boolean {\n  return (\n    fragmentEntity.buffered &&\n    !!(\n      fragmentEntity.body.gap ||\n      fragmentEntity.range.video?.partial ||\n      fragmentEntity.range.audio?.partial ||\n      fragmentEntity.range.audiovideo?.partial\n    )\n  );\n}\n\nfunction getFragmentKey(fragment: Fragment): string {\n  return `${fragment.type}_${fragment.level}_${fragment.sn}`;\n}\n\nfunction filterParts(partList: Part[], predicate: (part: Part) => boolean) {\n  return partList.filter((part) => {\n    const keep = predicate(part);\n    if (!keep) {\n      part.clearElementaryStreamInfo();\n    }\n    return keep;\n  });\n}\n","export const enum DecrypterAesMode {\n  cbc = 0,\n  ctr = 1,\n}\n","import { DecrypterAesMode } from './decrypter-aes-mode';\n\nexport default class AESCrypto {\n  private subtle: SubtleCrypto;\n  private aesIV: Uint8Array;\n  private aesMode: DecrypterAesMode;\n\n  constructor(subtle: SubtleCrypto, iv: Uint8Array, aesMode: DecrypterAesMode) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n    this.aesMode = aesMode;\n  }\n\n  decrypt(data: ArrayBuffer, key: CryptoKey) {\n    switch (this.aesMode) {\n      case DecrypterAesMode.cbc:\n        return this.subtle.decrypt(\n          { name: 'AES-CBC', iv: this.aesIV },\n          key,\n          data,\n        );\n      case DecrypterAesMode.ctr:\n        return this.subtle.decrypt(\n          { name: 'AES-CTR', counter: this.aesIV, length: 64 }, //64 : NIST SP800-38A standard suggests that the counter should occupy half of the counter block\n          key,\n          data,\n        );\n      default:\n        throw new Error(`[AESCrypto] invalid aes mode ${this.aesMode}`);\n    }\n  }\n}\n","// PKCS7\nexport function removePadding(array: Uint8Array<ArrayBuffer>) {\n  const outputBytes = array.byteLength;\n  const paddingBytes =\n    outputBytes && new DataView(array.buffer).getUint8(outputBytes - 1);\n  if (paddingBytes) {\n    return array.slice(0, outputBytes - paddingBytes);\n  }\n  return array;\n}\n\nexport default class AESDecryptor {\n  private rcon: Array<number> = [\n    0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,\n  ];\n  private subMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private invSubMix: Array<Uint32Array> = [\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n    new Uint32Array(256),\n  ];\n  private sBox: Uint32Array = new Uint32Array(256);\n  private invSBox: Uint32Array = new Uint32Array(256);\n  private key: Uint32Array = new Uint32Array(0);\n\n  private ksRows: number = 0;\n  private keySize: number = 0;\n  private keySchedule!: Uint32Array;\n  private invKeySchedule!: Uint32Array;\n\n  constructor() {\n    this.initTable();\n  }\n\n  // Using view.getUint32() also swaps the byte order.\n  uint8ArrayToUint32Array_(arrayBuffer) {\n    const view = new DataView(arrayBuffer);\n    const newArray = new Uint32Array(4);\n    for (let i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n\n    return newArray;\n  }\n\n  initTable() {\n    const sBox = this.sBox;\n    const invSBox = this.invSBox;\n    const subMix = this.subMix;\n    const subMix0 = subMix[0];\n    const subMix1 = subMix[1];\n    const subMix2 = subMix[2];\n    const subMix3 = subMix[3];\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const d = new Uint32Array(256);\n    let x = 0;\n    let xi = 0;\n    let i = 0;\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x;\n\n      // Compute multiplication\n      const x2 = d[x];\n      const x4 = d[x2];\n      const x8 = d[x4];\n\n      // Compute sub/invSub bytes, mix columns tables\n      let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      subMix0[x] = (t << 24) | (t >>> 8);\n      subMix1[x] = (t << 16) | (t >>> 16);\n      subMix2[x] = (t << 8) | (t >>> 24);\n      subMix3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      invSubMix0[sx] = (t << 24) | (t >>> 8);\n      invSubMix1[sx] = (t << 16) | (t >>> 16);\n      invSubMix2[sx] = (t << 8) | (t >>> 24);\n      invSubMix3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }\n\n  expandKey(keyBuffer: ArrayBuffer) {\n    // convert keyBuffer to Uint32Array\n    const key = this.uint8ArrayToUint32Array_(keyBuffer);\n    let sameKey = true;\n    let offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = key[offset] === this.key[offset];\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    const keySize = (this.keySize = key.length);\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    const ksRows = (this.ksRows = (keySize + 6 + 1) * 4);\n    let ksRow;\n    let invKsRow;\n\n    const keySchedule = (this.keySchedule = new Uint32Array(ksRows));\n    const invKeySchedule = (this.invKeySchedule = new Uint32Array(ksRows));\n    const sbox = this.sBox;\n    const rcon = this.rcon;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    let prev;\n    let t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = (t << 8) | (t >>> 24);\n\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n\n        // Mix Rcon\n        t ^= rcon[(ksRow / keySize) | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4) {\n        // Sub word\n        t =\n          (sbox[t >>> 24] << 24) |\n          (sbox[(t >>> 16) & 0xff] << 16) |\n          (sbox[(t >>> 8) & 0xff] << 8) |\n          sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] =\n          invSubMix0[sbox[t >>> 24]] ^\n          invSubMix1[sbox[(t >>> 16) & 0xff]] ^\n          invSubMix2[sbox[(t >>> 8) & 0xff]] ^\n          invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  }\n\n  // Adding this as a method greatly improves performance.\n  networkToHostOrderSwap(word) {\n    return (\n      (word << 24) |\n      ((word & 0xff00) << 8) |\n      ((word & 0xff0000) >> 8) |\n      (word >>> 24)\n    );\n  }\n\n  decrypt(\n    inputArrayBuffer: ArrayBufferLike,\n    offset: number,\n    aesIV: ArrayBuffer,\n  ) {\n    const nRounds = this.keySize + 6;\n    const invKeySchedule = this.invKeySchedule;\n    const invSBOX = this.invSBox;\n\n    const invSubMix = this.invSubMix;\n    const invSubMix0 = invSubMix[0];\n    const invSubMix1 = invSubMix[1];\n    const invSubMix2 = invSubMix[2];\n    const invSubMix3 = invSubMix[3];\n\n    const initVector = this.uint8ArrayToUint32Array_(aesIV);\n    let initVector0 = initVector[0];\n    let initVector1 = initVector[1];\n    let initVector2 = initVector[2];\n    let initVector3 = initVector[3];\n\n    const inputInt32 = new Int32Array(inputArrayBuffer);\n    const outputInt32 = new Int32Array(inputInt32.length);\n\n    let t0, t1, t2, t3;\n    let s0, s1, s2, s3;\n    let inputWords0, inputWords1, inputWords2, inputWords3;\n\n    let ksRow, i;\n    const swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n\n      ksRow = 4;\n\n      // Iterate through the rounds of decryption\n      for (i = 1; i < nRounds; i++) {\n        t0 =\n          invSubMix0[s0 >>> 24] ^\n          invSubMix1[(s1 >> 16) & 0xff] ^\n          invSubMix2[(s2 >> 8) & 0xff] ^\n          invSubMix3[s3 & 0xff] ^\n          invKeySchedule[ksRow];\n        t1 =\n          invSubMix0[s1 >>> 24] ^\n          invSubMix1[(s2 >> 16) & 0xff] ^\n          invSubMix2[(s3 >> 8) & 0xff] ^\n          invSubMix3[s0 & 0xff] ^\n          invKeySchedule[ksRow + 1];\n        t2 =\n          invSubMix0[s2 >>> 24] ^\n          invSubMix1[(s3 >> 16) & 0xff] ^\n          invSubMix2[(s0 >> 8) & 0xff] ^\n          invSubMix3[s1 & 0xff] ^\n          invKeySchedule[ksRow + 2];\n        t3 =\n          invSubMix0[s3 >>> 24] ^\n          invSubMix1[(s0 >> 16) & 0xff] ^\n          invSubMix2[(s1 >> 8) & 0xff] ^\n          invSubMix3[s2 & 0xff] ^\n          invKeySchedule[ksRow + 3];\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n\n        ksRow = ksRow + 4;\n      }\n\n      // Shift rows, sub bytes, add round key\n      t0 =\n        (invSBOX[s0 >>> 24] << 24) ^\n        (invSBOX[(s1 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s2 >> 8) & 0xff] << 8) ^\n        invSBOX[s3 & 0xff] ^\n        invKeySchedule[ksRow];\n      t1 =\n        (invSBOX[s1 >>> 24] << 24) ^\n        (invSBOX[(s2 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s3 >> 8) & 0xff] << 8) ^\n        invSBOX[s0 & 0xff] ^\n        invKeySchedule[ksRow + 1];\n      t2 =\n        (invSBOX[s2 >>> 24] << 24) ^\n        (invSBOX[(s3 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s0 >> 8) & 0xff] << 8) ^\n        invSBOX[s1 & 0xff] ^\n        invKeySchedule[ksRow + 2];\n      t3 =\n        (invSBOX[s3 >>> 24] << 24) ^\n        (invSBOX[(s0 >> 16) & 0xff] << 16) ^\n        (invSBOX[(s1 >> 8) & 0xff] << 8) ^\n        invSBOX[s2 & 0xff] ^\n        invKeySchedule[ksRow + 3];\n\n      // Write\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n      // reset initVector to last 4 unsigned int\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n\n      offset = offset + 4;\n    }\n\n    return outputInt32.buffer;\n  }\n}\n","import { DecrypterAesMode } from './decrypter-aes-mode';\n\nexport default class FastAESKey {\n  private subtle: SubtleCrypto;\n  private key: ArrayBuffer;\n  private aesMode: DecrypterAesMode;\n\n  constructor(\n    subtle: SubtleCrypto,\n    key: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ) {\n    this.subtle = subtle;\n    this.key = key;\n    this.aesMode = aesMode;\n  }\n\n  expandKey() {\n    const subtleAlgoName = getSubtleAlgoName(this.aesMode);\n    return this.subtle.importKey(\n      'raw',\n      this.key,\n      { name: subtleAlgoName },\n      false,\n      ['encrypt', 'decrypt'],\n    );\n  }\n}\n\nfunction getSubtleAlgoName(aesMode: DecrypterAesMode) {\n  switch (aesMode) {\n    case DecrypterAesMode.cbc:\n      return 'AES-CBC';\n    case DecrypterAesMode.ctr:\n      return 'AES-CTR';\n    default:\n      throw new Error(`[FastAESKey] invalid aes mode ${aesMode}`);\n  }\n}\n","import AESCrypto from './aes-crypto';\nimport AESDecryptor, { removePadding } from './aes-decryptor';\nimport { DecrypterAesMode } from './decrypter-aes-mode';\nimport FastAESKey from './fast-aes-key';\nimport { logger } from '../utils/logger';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\n\nconst CHUNK_SIZE = 16; // 16 bytes, 128 bits\n\nexport default class Decrypter {\n  private logEnabled: boolean = true;\n  private removePKCS7Padding: boolean;\n  private subtle: SubtleCrypto | null = null;\n  private softwareDecrypter: AESDecryptor | null = null;\n  private key: ArrayBuffer | null = null;\n  private fastAesKey: FastAESKey | null = null;\n  private remainderData: Uint8Array<ArrayBuffer> | null = null;\n  private currentIV: ArrayBuffer | null = null;\n  private currentResult: ArrayBuffer | null = null;\n  private useSoftware: boolean;\n  private enableSoftwareAES: boolean;\n\n  constructor(config: HlsConfig, { removePKCS7Padding = true } = {}) {\n    this.enableSoftwareAES = config.enableSoftwareAES;\n    this.removePKCS7Padding = removePKCS7Padding;\n    // built in decryptor expects PKCS7 padding\n    if (removePKCS7Padding) {\n      try {\n        const browserCrypto = self.crypto;\n        if (browserCrypto) {\n          this.subtle =\n            browserCrypto.subtle ||\n            ((browserCrypto as any).webkitSubtle as SubtleCrypto);\n        }\n      } catch (e) {\n        /* no-op */\n      }\n    }\n    this.useSoftware = !this.subtle;\n  }\n\n  destroy() {\n    this.subtle = null;\n    this.softwareDecrypter = null;\n    this.key = null;\n    this.fastAesKey = null;\n    this.remainderData = null;\n    this.currentIV = null;\n    this.currentResult = null;\n  }\n\n  public isSync() {\n    return this.useSoftware;\n  }\n\n  public flush(): Uint8Array<ArrayBuffer> | null {\n    const { currentResult, remainderData } = this;\n    if (!currentResult || remainderData) {\n      this.reset();\n      return null;\n    }\n    const data = new Uint8Array(currentResult);\n    this.reset();\n    if (this.removePKCS7Padding) {\n      return removePadding(data);\n    }\n    return data;\n  }\n\n  public reset() {\n    this.currentResult = null;\n    this.currentIV = null;\n    this.remainderData = null;\n    if (this.softwareDecrypter) {\n      this.softwareDecrypter = null;\n    }\n  }\n\n  public decrypt(\n    data: Uint8Array | ArrayBuffer,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): Promise<ArrayBuffer> {\n    if (this.useSoftware) {\n      return new Promise((resolve, reject) => {\n        const dataView = ArrayBuffer.isView(data) ? data : new Uint8Array(data);\n        this.softwareDecrypt(dataView, key, iv, aesMode);\n        const decryptResult = this.flush();\n        if (decryptResult) {\n          resolve(decryptResult.buffer);\n        } else {\n          reject(new Error('[softwareDecrypt] Failed to decrypt data'));\n        }\n      });\n    }\n    return this.webCryptoDecrypt(new Uint8Array(data), key, iv, aesMode);\n  }\n\n  // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n  // data is handled in the flush() call\n  public softwareDecrypt(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): ArrayBuffer | null {\n    const { currentIV, currentResult, remainderData } = this;\n    if (aesMode !== DecrypterAesMode.cbc || key.byteLength !== 16) {\n      logger.warn('SoftwareDecrypt: can only handle AES-128-CBC');\n      return null;\n    }\n    this.logOnce('JS AES decrypt');\n    // The output is staggered during progressive parsing - the current result is cached, and emitted on the next call\n    // This is done in order to strip PKCS7 padding, which is found at the end of each segment. We only know we've reached\n    // the end on flush(), but by that time we have already received all bytes for the segment.\n    // Progressive decryption does not work with WebCrypto\n\n    if (remainderData) {\n      data = appendUint8Array(remainderData, data);\n      this.remainderData = null;\n    }\n\n    // Byte length must be a multiple of 16 (AES-128 = 128 bit blocks = 16 bytes)\n    const currentChunk = this.getValidChunk(data);\n    if (!currentChunk.length) {\n      return null;\n    }\n\n    if (currentIV) {\n      iv = currentIV;\n    }\n\n    let softwareDecrypter = this.softwareDecrypter;\n    if (!softwareDecrypter) {\n      softwareDecrypter = this.softwareDecrypter = new AESDecryptor();\n    }\n    softwareDecrypter.expandKey(key);\n\n    const result = currentResult;\n\n    this.currentResult = softwareDecrypter.decrypt(currentChunk.buffer, 0, iv);\n    this.currentIV = currentChunk.slice(-16).buffer;\n\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  public webCryptoDecrypt(\n    data: Uint8Array<ArrayBuffer>,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): Promise<ArrayBuffer> {\n    if (this.key !== key || !this.fastAesKey) {\n      if (!this.subtle) {\n        return Promise.resolve(this.onWebCryptoError(data, key, iv, aesMode));\n      }\n      this.key = key;\n      this.fastAesKey = new FastAESKey(this.subtle, key, aesMode);\n    }\n    return this.fastAesKey\n      .expandKey()\n      .then((aesKey: CryptoKey) => {\n        // decrypt using web crypto\n        if (!this.subtle) {\n          return Promise.reject(new Error('web crypto not initialized'));\n        }\n        this.logOnce('WebCrypto AES decrypt');\n        const crypto = new AESCrypto(this.subtle, new Uint8Array(iv), aesMode);\n        return crypto.decrypt(data.buffer, aesKey);\n      })\n      .catch((err) => {\n        logger.warn(\n          `[decrypter]: WebCrypto Error, disable WebCrypto API, ${err.name}: ${err.message}`,\n        );\n\n        return this.onWebCryptoError(data, key, iv, aesMode);\n      });\n  }\n\n  private onWebCryptoError(\n    data: Uint8Array,\n    key: ArrayBuffer,\n    iv: ArrayBuffer,\n    aesMode: DecrypterAesMode,\n  ): ArrayBuffer | never {\n    const enableSoftwareAES = this.enableSoftwareAES;\n    if (enableSoftwareAES) {\n      this.useSoftware = true;\n      this.logEnabled = true;\n      this.softwareDecrypt(data, key, iv, aesMode);\n      const decryptResult = this.flush();\n      if (decryptResult) {\n        return decryptResult.buffer;\n      }\n    }\n    throw new Error(\n      'WebCrypto' +\n        (enableSoftwareAES ? ' and softwareDecrypt' : '') +\n        ': failed to decrypt data',\n    );\n  }\n\n  private getValidChunk(data: Uint8Array): Uint8Array {\n    let currentChunk = data;\n    const splitPoint = data.length - (data.length % CHUNK_SIZE);\n    if (splitPoint !== data.length) {\n      currentChunk = data.slice(0, splitPoint);\n      this.remainderData = data.slice(splitPoint);\n    }\n    return currentChunk;\n  }\n\n  private logOnce(msg: string) {\n    if (!this.logEnabled) {\n      return;\n    }\n    logger.log(`[decrypter]: ${msg}`);\n    this.logEnabled = false;\n  }\n}\n","import { ErrorDetails, ErrorTypes } from '../errors';\nimport { getLoaderConfigWithoutReties } from '../utils/error-helper';\nimport type { BaseSegment, Fragment, Part } from './fragment';\nimport type { HlsConfig } from '../config';\nimport type {\n  ErrorData,\n  FragLoadedData,\n  PartsLoadedData,\n} from '../types/events';\nimport type {\n  FragmentLoaderContext,\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n} from '../types/loader';\n\nconst MIN_CHUNK_SIZE = Math.pow(2, 17); // 128kb\n\nexport default class FragmentLoader {\n  private readonly config: HlsConfig;\n  private loader: Loader<FragmentLoaderContext> | null = null;\n  private partLoadTimeout: number = -1;\n\n  constructor(config: HlsConfig) {\n    this.config = config;\n  }\n\n  destroy() {\n    if (this.loader) {\n      this.loader.destroy();\n      this.loader = null;\n    }\n  }\n\n  abort() {\n    if (this.loader) {\n      // Abort the loader for current fragment. Only one may load at any given time\n      this.loader.abort();\n    }\n  }\n\n  load(\n    frag: Fragment,\n    onProgress?: FragmentLoadProgressCallback,\n  ): Promise<FragLoadedData> {\n    const url = frag.url;\n    if (!url) {\n      return Promise.reject(\n        new LoadError({\n          type: ErrorTypes.NETWORK_ERROR,\n          details: ErrorDetails.FRAG_LOAD_ERROR,\n          fatal: false,\n          frag,\n          error: new Error(\n            `Fragment does not have a ${url ? 'part list' : 'url'}`,\n          ),\n          networkDetails: null,\n        }),\n      );\n    }\n    this.abort();\n\n    const config = this.config;\n    const FragmentILoader = config.fLoader;\n    const DefaultILoader = config.loader;\n\n    return new Promise((resolve, reject) => {\n      if (this.loader) {\n        this.loader.destroy();\n      }\n      if (frag.gap) {\n        if (frag.tagList.some((tags) => tags[0] === 'GAP')) {\n          reject(createGapLoadError(frag));\n          return;\n        } else {\n          // Reset temporary treatment as GAP tag\n          frag.gap = false;\n        }\n      }\n      const loader = (this.loader = FragmentILoader\n        ? new FragmentILoader(config)\n        : (new DefaultILoader(config) as Loader<FragmentLoaderContext>));\n      const loaderContext = createLoaderContext(frag);\n      frag.loader = loader;\n      const loadPolicy = getLoaderConfigWithoutReties(\n        config.fragLoadPolicy.default,\n      );\n      const loaderConfig: LoaderConfiguration = {\n        loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: 0,\n        highWaterMark: frag.sn === 'initSegment' ? Infinity : MIN_CHUNK_SIZE,\n      };\n      // Assign frag stats to the loader's stats reference\n      frag.stats = loader.stats;\n      const callbacks: LoaderCallbacks<FragmentLoaderContext> = {\n        onSuccess: (response, stats, context, networkDetails) => {\n          this.resetLoader(frag, loader);\n          let payload = response.data as ArrayBuffer;\n          if (context.resetIV && frag.decryptdata) {\n            frag.decryptdata.iv = new Uint8Array(payload.slice(0, 16));\n            payload = payload.slice(16);\n          }\n          resolve({\n            frag,\n            part: null,\n            payload,\n            networkDetails,\n          });\n        },\n        onError: (response, context, networkDetails, stats) => {\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_ERROR,\n              fatal: false,\n              frag,\n              response: { url, data: undefined, ...response },\n              error: new Error(`HTTP Error ${response.code} ${response.text}`),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n        onAbort: (stats, context, networkDetails) => {\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.INTERNAL_ABORTED,\n              fatal: false,\n              frag,\n              error: new Error('Aborted'),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n        onTimeout: (stats, context, networkDetails) => {\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_TIMEOUT,\n              fatal: false,\n              frag,\n              error: new Error(`Timeout after ${loaderConfig.timeout}ms`),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n      };\n      if (onProgress) {\n        callbacks.onProgress = (stats, context, data, networkDetails) =>\n          onProgress({\n            frag,\n            part: null,\n            payload: data as ArrayBuffer,\n            networkDetails,\n          });\n      }\n      loader.load(loaderContext, loaderConfig, callbacks);\n    });\n  }\n\n  public loadPart(\n    frag: Fragment,\n    part: Part,\n    onProgress: FragmentLoadProgressCallback,\n  ): Promise<FragLoadedData> {\n    this.abort();\n\n    const config = this.config;\n    const FragmentILoader = config.fLoader;\n    const DefaultILoader = config.loader;\n\n    return new Promise((resolve, reject) => {\n      if (this.loader) {\n        this.loader.destroy();\n      }\n      if (frag.gap || part.gap) {\n        reject(createGapLoadError(frag, part));\n        return;\n      }\n      const loader = (this.loader = FragmentILoader\n        ? new FragmentILoader(config)\n        : (new DefaultILoader(config) as Loader<FragmentLoaderContext>));\n      const loaderContext = createLoaderContext(frag, part);\n      frag.loader = loader;\n      // Should we define another load policy for parts?\n      const loadPolicy = getLoaderConfigWithoutReties(\n        config.fragLoadPolicy.default,\n      );\n      const loaderConfig: LoaderConfiguration = {\n        loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: 0,\n        highWaterMark: MIN_CHUNK_SIZE,\n      };\n      // Assign part stats to the loader's stats reference\n      part.stats = loader.stats;\n      loader.load(loaderContext, loaderConfig, {\n        onSuccess: (response, stats, context, networkDetails) => {\n          this.resetLoader(frag, loader);\n          this.updateStatsFromPart(frag, part);\n          const partLoadedData: FragLoadedData = {\n            frag,\n            part,\n            payload: response.data as ArrayBuffer,\n            networkDetails,\n          };\n          onProgress(partLoadedData);\n          resolve(partLoadedData);\n        },\n        onError: (response, context, networkDetails, stats) => {\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_ERROR,\n              fatal: false,\n              frag,\n              part,\n              response: {\n                url: loaderContext.url,\n                data: undefined,\n                ...response,\n              },\n              error: new Error(`HTTP Error ${response.code} ${response.text}`),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n        onAbort: (stats, context, networkDetails) => {\n          frag.stats.aborted = part.stats.aborted;\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.INTERNAL_ABORTED,\n              fatal: false,\n              frag,\n              part,\n              error: new Error('Aborted'),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n        onTimeout: (stats, context, networkDetails) => {\n          this.resetLoader(frag, loader);\n          reject(\n            new LoadError({\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.FRAG_LOAD_TIMEOUT,\n              fatal: false,\n              frag,\n              part,\n              error: new Error(`Timeout after ${loaderConfig.timeout}ms`),\n              networkDetails,\n              stats,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  private updateStatsFromPart(frag: Fragment, part: Part) {\n    const fragStats = frag.stats;\n    const partStats = part.stats;\n    const partTotal = partStats.total;\n    fragStats.loaded += partStats.loaded;\n    if (partTotal) {\n      const estTotalParts = Math.round(frag.duration / part.duration);\n      const estLoadedParts = Math.min(\n        Math.round(fragStats.loaded / partTotal),\n        estTotalParts,\n      );\n      const estRemainingParts = estTotalParts - estLoadedParts;\n      const estRemainingBytes =\n        estRemainingParts * Math.round(fragStats.loaded / estLoadedParts);\n      fragStats.total = fragStats.loaded + estRemainingBytes;\n    } else {\n      fragStats.total = Math.max(fragStats.loaded, fragStats.total);\n    }\n    const fragLoading = fragStats.loading;\n    const partLoading = partStats.loading;\n    if (fragLoading.start) {\n      // add to fragment loader latency\n      fragLoading.first += partLoading.first - partLoading.start;\n    } else {\n      fragLoading.start = partLoading.start;\n      fragLoading.first = partLoading.first;\n    }\n    fragLoading.end = partLoading.end;\n  }\n\n  private resetLoader(frag: Fragment, loader: Loader<FragmentLoaderContext>) {\n    frag.loader = null;\n    if (this.loader === loader) {\n      self.clearTimeout(this.partLoadTimeout);\n      this.loader = null;\n    }\n    loader.destroy();\n  }\n}\n\nfunction createLoaderContext(\n  frag: Fragment,\n  part: Part | null = null,\n): FragmentLoaderContext {\n  const segment: BaseSegment = part || frag;\n  const loaderContext: FragmentLoaderContext = {\n    frag,\n    part,\n    responseType: 'arraybuffer',\n    url: segment.url,\n    headers: {},\n    rangeStart: 0,\n    rangeEnd: 0,\n  };\n  const start = segment.byteRangeStartOffset as number;\n  const end = segment.byteRangeEndOffset as number;\n  if (Number.isFinite(start) && Number.isFinite(end)) {\n    let byteRangeStart = start;\n    let byteRangeEnd = end;\n    if (\n      frag.sn === 'initSegment' &&\n      isMethodFullSegmentAesCbc(frag.decryptdata?.method)\n    ) {\n      // MAP segment encrypted with method 'AES-128' or 'AES-256' (cbc), when served with HTTP Range,\n      // has the unencrypted size specified in the range.\n      // Ref: https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-08#section-6.3.6\n      const fragmentLen = end - start;\n      if (fragmentLen % 16) {\n        byteRangeEnd = end + (16 - (fragmentLen % 16));\n      }\n      if (start !== 0) {\n        loaderContext.resetIV = true;\n        byteRangeStart = start - 16;\n      }\n    }\n    loaderContext.rangeStart = byteRangeStart;\n    loaderContext.rangeEnd = byteRangeEnd;\n  }\n  return loaderContext;\n}\n\nfunction createGapLoadError(frag: Fragment, part?: Part): LoadError {\n  const error = new Error(`GAP ${frag.gap ? 'tag' : 'attribute'} found`);\n  const errorData: FragLoadFailResult = {\n    type: ErrorTypes.MEDIA_ERROR,\n    details: ErrorDetails.FRAG_GAP,\n    fatal: false,\n    frag,\n    error,\n    networkDetails: null,\n  };\n  if (part) {\n    errorData.part = part;\n  }\n  (part ? part : frag).stats.aborted = true;\n  return new LoadError(errorData);\n}\n\nfunction isMethodFullSegmentAesCbc(method) {\n  return method === 'AES-128' || method === 'AES-256';\n}\n\nexport class LoadError extends Error {\n  public readonly data: FragLoadFailResult;\n  constructor(data: FragLoadFailResult) {\n    super(data.error.message);\n    this.data = data;\n  }\n}\n\nexport interface FragLoadFailResult extends ErrorData {\n  frag: Fragment;\n  part?: Part;\n  response?: {\n    data: any;\n    // error status code\n    code: number;\n    // error description\n    text: string;\n    url: string;\n  };\n  networkDetails: any;\n}\n\nexport type FragmentLoadProgressCallback = (\n  result: FragLoadedData | PartsLoadedData,\n) => void;\n","import { type ILogger, Logger } from './utils/logger';\n\n/**\n * @ignore\n * Sub-class specialization of EventHandler base class.\n *\n * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,\n * scheduled asynchroneously, avoiding recursive calls in the same tick.\n *\n * The task itself is implemented in `doTick`. It can be requested and called for single execution\n * using the `tick` method.\n *\n * It will be assured that the task execution method (`tick`) only gets called once per main loop \"tick\",\n * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.\n *\n * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,\n * and cancelled with `clearNextTick`.\n *\n * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).\n *\n * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.\n *\n * Further explanations:\n *\n * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously\n * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.\n *\n * When the task execution (`tick` method) is called in re-entrant way this is detected and\n * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further\n * task processing on the next main loop iteration (also known as \"next tick\" in the Node/JS runtime lingo).\n */\nexport default class TaskLoop extends Logger {\n  private readonly _boundTick: () => void;\n  private _tickTimer: number | null = null;\n  private _tickInterval: number | null = null;\n  private _tickCallCount = 0;\n\n  constructor(label: string, logger: ILogger) {\n    super(label, logger);\n    this._boundTick = this.tick.bind(this);\n  }\n\n  public destroy() {\n    this.onHandlerDestroying();\n    this.onHandlerDestroyed();\n  }\n\n  protected onHandlerDestroying() {\n    // clear all timers before unregistering from event bus\n    this.clearNextTick();\n    this.clearInterval();\n  }\n\n  protected onHandlerDestroyed() {}\n\n  public hasInterval(): boolean {\n    return !!this._tickInterval;\n  }\n\n  public hasNextTick(): boolean {\n    return !!this._tickTimer;\n  }\n\n  /**\n   * @param millis - Interval time (ms)\n   * @eturns True when interval has been scheduled, false when already scheduled (no effect)\n   */\n  public setInterval(millis: number): boolean {\n    if (!this._tickInterval) {\n      this._tickCallCount = 0;\n      this._tickInterval = self.setInterval(this._boundTick, millis);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @returns True when interval was cleared, false when none was set (no effect)\n   */\n  public clearInterval(): boolean {\n    if (this._tickInterval) {\n      self.clearInterval(this._tickInterval);\n      this._tickInterval = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @returns True when timeout was cleared, false when none was set (no effect)\n   */\n  public clearNextTick(): boolean {\n    if (this._tickTimer) {\n      self.clearTimeout(this._tickTimer);\n      this._tickTimer = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Will call the subclass doTick implementation in this main loop tick\n   * or in the next one (via setTimeout(,0)) in case it has already been called\n   * in this tick (in case this is a re-entrant call).\n   */\n  public tick(): void {\n    this._tickCallCount++;\n    if (this._tickCallCount === 1) {\n      this.doTick();\n      // re-entrant call to tick from previous doTick call stack\n      // -> schedule a call on the next main loop iteration to process this task processing request\n      if (this._tickCallCount > 1) {\n        // make sure only one timer exists at any time at max\n        this.tickImmediate();\n      }\n      this._tickCallCount = 0;\n    }\n  }\n\n  public tickImmediate(): void {\n    this.clearNextTick();\n    this._tickTimer = self.setTimeout(this._boundTick, 0);\n  }\n\n  /**\n   * For subclass to implement task logic\n   * @abstract\n   */\n  protected doTick(): void {}\n}\n","import type { SourceBufferName } from './buffer';\nimport type { HlsChunkPerformanceTiming } from './loader';\nimport type { RemuxerResult } from './remuxer';\n\nexport interface TransmuxerResult {\n  remuxResult: RemuxerResult;\n  chunkMeta: ChunkMetadata;\n}\n\nexport class ChunkMetadata {\n  public readonly level: number;\n  public readonly sn: number;\n  public readonly part: number;\n  public readonly id: number;\n  public readonly size: number;\n  public readonly partial: boolean;\n  public readonly transmuxing: HlsChunkPerformanceTiming =\n    getNewPerformanceTiming();\n  public readonly buffering: {\n    [key in SourceBufferName]: HlsChunkPerformanceTiming;\n  } = {\n    audio: getNewPerformanceTiming(),\n    video: getNewPerformanceTiming(),\n    audiovideo: getNewPerformanceTiming(),\n  };\n\n  constructor(\n    level: number,\n    sn: number,\n    id: number,\n    size = 0,\n    part = -1,\n    partial = false,\n  ) {\n    this.level = level;\n    this.sn = sn;\n    this.id = id;\n    this.size = size;\n    this.part = part;\n    this.partial = partial;\n  }\n}\n\nfunction getNewPerformanceTiming(): HlsChunkPerformanceTiming {\n  return { start: 0, executeStart: 0, executeEnd: 0, end: 0 };\n}\n","/**\n * Provides methods dealing with buffer length retrieval for example.\n *\n * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.\n *\n * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered\n */\n\nimport { logger } from './logger';\n\nexport type BufferTimeRange = {\n  start: number;\n  end: number;\n};\n\nexport type Bufferable = {\n  buffered: TimeRanges;\n};\n\nexport type BufferInfo = {\n  len: number;\n  start: number;\n  end: number;\n  nextStart?: number;\n  buffered?: BufferTimeRange[];\n  bufferedIndex: number;\n};\n\nconst noopBuffered: TimeRanges = {\n  length: 0,\n  start: () => 0,\n  end: () => 0,\n};\n\nexport class BufferHelper {\n  /**\n   * Return true if `media`'s buffered include `position`\n   */\n  static isBuffered(media: Bufferable, position: number): boolean {\n    if (media) {\n      const buffered = BufferHelper.getBuffered(media);\n      for (let i = buffered.length; i--; ) {\n        if (position >= buffered.start(i) && position <= buffered.end(i)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  static bufferedRanges(media: Bufferable | null): BufferTimeRange[] {\n    if (media) {\n      const timeRanges = BufferHelper.getBuffered(media);\n      return BufferHelper.timeRangesToArray(timeRanges);\n    }\n    return [];\n  }\n\n  static timeRangesToArray(timeRanges: TimeRanges): BufferTimeRange[] {\n    const buffered: BufferTimeRange[] = [];\n    for (let i = 0; i < timeRanges.length; i++) {\n      buffered.push({ start: timeRanges.start(i), end: timeRanges.end(i) });\n    }\n    return buffered;\n  }\n\n  static bufferInfo(\n    media: Bufferable | null,\n    pos: number,\n    maxHoleDuration: number,\n  ): BufferInfo {\n    if (media) {\n      const buffered = BufferHelper.bufferedRanges(media);\n      if (buffered.length) {\n        return BufferHelper.bufferedInfo(buffered, pos, maxHoleDuration);\n      }\n    }\n    return { len: 0, start: pos, end: pos, bufferedIndex: -1 };\n  }\n\n  static bufferedInfo(\n    buffered: BufferTimeRange[],\n    pos: number,\n    maxHoleDuration: number,\n  ): BufferInfo {\n    pos = Math.max(0, pos);\n    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n    if (buffered.length > 1) {\n      buffered.sort((a, b) => a.start - b.start || b.end - a.end);\n    }\n\n    let bufferedIndex: number = -1;\n    let buffered2: BufferTimeRange[] = [];\n    if (maxHoleDuration) {\n      // there might be some small holes between buffer time range\n      // consider that holes smaller than maxHoleDuration are irrelevant and build another\n      // buffer time range representations that discards those holes\n      for (let i = 0; i < buffered.length; i++) {\n        if (pos >= buffered[i].start && pos <= buffered[i].end) {\n          bufferedIndex = i;\n        }\n        const buf2len = buffered2.length;\n        if (buf2len) {\n          const buf2end = buffered2[buf2len - 1].end;\n          // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n          if (buffered[i].start - buf2end < maxHoleDuration) {\n            // merge overlapping time ranges\n            // update lastRange.end only if smaller than item.end\n            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n            if (buffered[i].end > buf2end) {\n              buffered2[buf2len - 1].end = buffered[i].end;\n            }\n          } else {\n            // big hole\n            buffered2.push(buffered[i]);\n          }\n        } else {\n          // first value\n          buffered2.push(buffered[i]);\n        }\n      }\n    } else {\n      buffered2 = buffered;\n    }\n\n    let bufferLen = 0;\n\n    let nextStart: number | undefined;\n\n    // bufferStart and bufferEnd are buffer boundaries around current playback position (pos)\n    let bufferStart: number = pos;\n    let bufferEnd: number = pos;\n    for (let i = 0; i < buffered2.length; i++) {\n      const start = buffered2[i].start;\n      const end = buffered2[i].end;\n      // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n      if (bufferedIndex === -1 && pos >= start && pos <= end) {\n        bufferedIndex = i;\n      }\n      if (pos + maxHoleDuration >= start && pos < end) {\n        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n        bufferStart = start;\n        bufferEnd = end;\n        bufferLen = bufferEnd - pos;\n      } else if (pos + maxHoleDuration < start) {\n        nextStart = start;\n        break;\n      }\n    }\n    return {\n      len: bufferLen,\n      start: bufferStart || 0,\n      end: bufferEnd || 0,\n      nextStart,\n      buffered,\n      bufferedIndex,\n    };\n  }\n\n  /**\n   * Safe method to get buffered property.\n   * SourceBuffer.buffered may throw if SourceBuffer is removed from it's MediaSource\n   */\n  static getBuffered(media: Bufferable): TimeRanges {\n    try {\n      return media.buffered || noopBuffered;\n    } catch (e) {\n      logger.log('failed to get media.buffered', e);\n      return noopBuffered;\n    }\n  }\n}\n","import type { AttrList } from './attr-list';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { ParsedMultivariantPlaylist } from '../loader/m3u8-parser';\nimport type { VariableMap } from '../types/level';\n\nconst VARIABLE_REPLACEMENT_REGEX = /\\{\\$([a-zA-Z0-9-_]+)\\}/g;\n\nexport function hasVariableReferences(str: string): boolean {\n  return VARIABLE_REPLACEMENT_REGEX.test(str);\n}\n\nexport function substituteVariables(\n  parsed: Pick<\n    ParsedMultivariantPlaylist | LevelDetails,\n    'variableList' | 'hasVariableRefs' | 'playlistParsingError'\n  >,\n  value: string,\n): string {\n  if (parsed.variableList !== null || parsed.hasVariableRefs) {\n    const variableList = parsed.variableList;\n    return value.replace(\n      VARIABLE_REPLACEMENT_REGEX,\n      (variableReference: string) => {\n        const variableName = variableReference.substring(\n          2,\n          variableReference.length - 1,\n        );\n        const variableValue = variableList?.[variableName];\n        if (variableValue === undefined) {\n          parsed.playlistParsingError ||= new Error(\n            `Missing preceding EXT-X-DEFINE tag for Variable Reference: \"${variableName}\"`,\n          );\n          return variableReference;\n        }\n        return variableValue;\n      },\n    );\n  }\n  return value;\n}\n\nexport function addVariableDefinition(\n  parsed: Pick<\n    ParsedMultivariantPlaylist | LevelDetails,\n    'variableList' | 'playlistParsingError'\n  >,\n  attr: AttrList,\n  parentUrl: string,\n) {\n  let variableList = parsed.variableList;\n  if (!variableList) {\n    parsed.variableList = variableList = {};\n  }\n  let NAME: string;\n  let VALUE;\n  if ('QUERYPARAM' in attr) {\n    NAME = attr.QUERYPARAM;\n    try {\n      const searchParams = new self.URL(parentUrl).searchParams;\n      if (searchParams.has(NAME)) {\n        VALUE = searchParams.get(NAME);\n      } else {\n        throw new Error(\n          `\"${NAME}\" does not match any query parameter in URI: \"${parentUrl}\"`,\n        );\n      }\n    } catch (error) {\n      parsed.playlistParsingError ||= new Error(\n        `EXT-X-DEFINE QUERYPARAM: ${error.message}`,\n      );\n    }\n  } else {\n    NAME = attr.NAME;\n    VALUE = attr.VALUE;\n  }\n  if (NAME in variableList) {\n    parsed.playlistParsingError ||= new Error(\n      `EXT-X-DEFINE duplicate Variable Name declarations: \"${NAME}\"`,\n    );\n  } else {\n    variableList[NAME] = VALUE || '';\n  }\n}\n\nexport function importVariableDefinition(\n  parsed: Pick<\n    ParsedMultivariantPlaylist | LevelDetails,\n    'variableList' | 'playlistParsingError'\n  >,\n  attr: AttrList,\n  sourceVariableList: VariableMap | null,\n) {\n  const IMPORT = attr.IMPORT;\n  if (sourceVariableList && IMPORT in sourceVariableList) {\n    let variableList = parsed.variableList;\n    if (!variableList) {\n      parsed.variableList = variableList = {};\n    }\n    variableList[IMPORT] = sourceVariableList[IMPORT];\n  } else {\n    parsed.playlistParsingError ||= new Error(\n      `EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: \"${IMPORT}\"`,\n    );\n  }\n}\n","import { logger } from './logger';\nimport { substituteVariables } from './variable-substitution';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { ParsedMultivariantPlaylist } from '../loader/m3u8-parser';\n\nconst DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/;\nconst ATTR_LIST_REGEX = /(.+?)=(\".*?\"|.*?)(?:,|$)/g;\n\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\nexport class AttrList {\n  [key: string]: any;\n\n  constructor(\n    attrs: string | Record<string, any>,\n    parsed?: Pick<\n      ParsedMultivariantPlaylist | LevelDetails,\n      'variableList' | 'hasVariableRefs' | 'playlistParsingError'\n    >,\n  ) {\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs, parsed);\n    }\n    Object.assign(this, attrs);\n  }\n\n  get clientAttrs(): string[] {\n    return Object.keys(this).filter((attr) => attr.substring(0, 2) === 'X-');\n  }\n\n  decimalInteger(attrName: string): number {\n    const intValue = parseInt(this[attrName], 10);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  }\n\n  hexadecimalInteger(attrName: string) {\n    if (this[attrName]) {\n      let stringValue = (this[attrName] || '0x').slice(2);\n      stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;\n\n      const value = new Uint8Array(stringValue.length / 2);\n      for (let i = 0; i < stringValue.length / 2; i++) {\n        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n      }\n\n      return value;\n    }\n    return null;\n  }\n\n  hexadecimalIntegerAsNumber(attrName: string): number {\n    const intValue = parseInt(this[attrName], 16);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n\n    return intValue;\n  }\n\n  decimalFloatingPoint(attrName: string): number {\n    return parseFloat(this[attrName]);\n  }\n\n  optionalFloat(attrName: string, defaultValue: number): number {\n    const value = this[attrName];\n    return value ? parseFloat(value) : defaultValue;\n  }\n\n  enumeratedString(attrName: string): string | undefined {\n    return this[attrName];\n  }\n\n  enumeratedStringList<T extends { [key: string]: boolean }>(\n    attrName: string,\n    dict: T,\n  ): { [key in keyof T]: boolean } {\n    const attrValue = this[attrName];\n    return (attrValue ? attrValue.split(/[ ,]+/) : []).reduce(\n      (result: { [key in keyof T]: boolean }, identifier: string) => {\n        result[identifier.toLowerCase() as keyof T] = true;\n        return result;\n      },\n      dict,\n    );\n  }\n\n  bool(attrName: string): boolean {\n    return this[attrName] === 'YES';\n  }\n\n  decimalResolution(attrName: string):\n    | {\n        width: number;\n        height: number;\n      }\n    | undefined {\n    const res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n    if (res === null) {\n      return undefined;\n    }\n\n    return {\n      width: parseInt(res[1], 10),\n      height: parseInt(res[2], 10),\n    };\n  }\n\n  static parseAttrList(\n    input: string,\n    parsed?: Pick<\n      ParsedMultivariantPlaylist | LevelDetails,\n      'variableList' | 'hasVariableRefs' | 'playlistParsingError'\n    >,\n  ): Record<string, string> {\n    let match: RegExpExecArray | null;\n    const attrs = {};\n    const quote = '\"';\n    ATTR_LIST_REGEX.lastIndex = 0;\n    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n      const name = match[1].trim();\n      let value = match[2];\n      const quotedString =\n        value.indexOf(quote) === 0 &&\n        value.lastIndexOf(quote) === value.length - 1;\n      let hexadecimalSequence = false;\n      if (quotedString) {\n        value = value.slice(1, -1);\n      } else {\n        switch (name) {\n          case 'IV':\n          case 'SCTE35-CMD':\n          case 'SCTE35-IN':\n          case 'SCTE35-OUT':\n            hexadecimalSequence = true;\n        }\n      }\n      if (parsed && (quotedString || hexadecimalSequence)) {\n        if (__USE_VARIABLE_SUBSTITUTION__) {\n          value = substituteVariables(parsed, value);\n        }\n      } else if (!hexadecimalSequence && !quotedString) {\n        switch (name) {\n          case 'CLOSED-CAPTIONS':\n            if (value === 'NONE') {\n              break;\n            }\n          // falls through\n          case 'ALLOWED-CPC':\n          case 'CLASS':\n          case 'ASSOC-LANGUAGE':\n          case 'AUDIO':\n          case 'BYTERANGE':\n          case 'CHANNELS':\n          case 'CHARACTERISTICS':\n          case 'CODECS':\n          case 'DATA-ID':\n          case 'END-DATE':\n          case 'GROUP-ID':\n          case 'ID':\n          case 'IMPORT':\n          case 'INSTREAM-ID':\n          case 'KEYFORMAT':\n          case 'KEYFORMATVERSIONS':\n          case 'LANGUAGE':\n          case 'NAME':\n          case 'PATHWAY-ID':\n          case 'QUERYPARAM':\n          case 'RECENTLY-REMOVED-DATERANGES':\n          case 'SERVER-URI':\n          case 'STABLE-RENDITION-ID':\n          case 'STABLE-VARIANT-ID':\n          case 'START-DATE':\n          case 'SUBTITLES':\n          case 'SUPPLEMENTAL-CODECS':\n          case 'URI':\n          case 'VALUE':\n          case 'VIDEO':\n          case 'X-ASSET-LIST':\n          case 'X-ASSET-URI':\n            // Since we are not checking tag:attribute combination, just warn rather than ignoring attribute\n            logger.warn(`${input}: attribute ${name} is missing quotes`);\n          // continue;\n        }\n      }\n      attrs[name] = value;\n    }\n    return attrs;\n  }\n}\n","import { AttrList } from '../utils/attr-list';\nimport { logger } from '../utils/logger';\nimport type { MediaFragmentRef } from './fragment';\n\n// Avoid exporting const enum so that these values can be inlined\nconst enum DateRangeAttribute {\n  ID = 'ID',\n  CLASS = 'CLASS',\n  CUE = 'CUE',\n  START_DATE = 'START-DATE',\n  DURATION = 'DURATION',\n  END_DATE = 'END-DATE',\n  END_ON_NEXT = 'END-ON-NEXT',\n  PLANNED_DURATION = 'PLANNED-DURATION',\n  SCTE35_OUT = 'SCTE35-OUT',\n  SCTE35_IN = 'SCTE35-IN',\n  SCTE35_CMD = 'SCTE35-CMD',\n}\n\nexport type DateRangeCue = {\n  pre: boolean;\n  post: boolean;\n  once: boolean;\n};\n\nconst CLASS_INTERSTITIAL = 'com.apple.hls.interstitial';\n\nexport function isDateRangeCueAttribute(attrName: string): boolean {\n  return (\n    attrName !== DateRangeAttribute.ID &&\n    attrName !== DateRangeAttribute.CLASS &&\n    attrName !== DateRangeAttribute.CUE &&\n    attrName !== DateRangeAttribute.START_DATE &&\n    attrName !== DateRangeAttribute.DURATION &&\n    attrName !== DateRangeAttribute.END_DATE &&\n    attrName !== DateRangeAttribute.END_ON_NEXT\n  );\n}\n\nexport function isSCTE35Attribute(attrName: string): boolean {\n  return (\n    attrName === DateRangeAttribute.SCTE35_OUT ||\n    attrName === DateRangeAttribute.SCTE35_IN ||\n    attrName === DateRangeAttribute.SCTE35_CMD\n  );\n}\n\nexport class DateRange {\n  public attr: AttrList;\n  public tagAnchor: MediaFragmentRef | null;\n  public tagOrder: number;\n  private _startDate: Date;\n  private _endDate?: Date;\n  private _dateAtEnd?: Date;\n  private _cue?: DateRangeCue;\n  private _badValueForSameId?: string;\n\n  constructor(\n    dateRangeAttr: AttrList,\n    dateRangeWithSameId?: DateRange | undefined,\n    tagCount: number = 0,\n  ) {\n    this.tagAnchor = dateRangeWithSameId?.tagAnchor || null;\n    this.tagOrder = dateRangeWithSameId?.tagOrder ?? tagCount;\n    if (dateRangeWithSameId) {\n      const previousAttr = dateRangeWithSameId.attr;\n      for (const key in previousAttr) {\n        if (\n          Object.prototype.hasOwnProperty.call(dateRangeAttr, key) &&\n          dateRangeAttr[key] !== previousAttr[key]\n        ) {\n          logger.warn(\n            `DATERANGE tag attribute: \"${key}\" does not match for tags with ID: \"${dateRangeAttr.ID}\"`,\n          );\n          this._badValueForSameId = key;\n          break;\n        }\n      }\n      // Merge DateRange tags with the same ID\n      dateRangeAttr = Object.assign(\n        new AttrList({}),\n        previousAttr,\n        dateRangeAttr,\n      );\n    }\n    this.attr = dateRangeAttr;\n    if (dateRangeWithSameId) {\n      this._startDate = dateRangeWithSameId._startDate;\n      this._cue = dateRangeWithSameId._cue;\n      this._endDate = dateRangeWithSameId._endDate;\n      this._dateAtEnd = dateRangeWithSameId._dateAtEnd;\n    } else {\n      this._startDate = new Date(dateRangeAttr[DateRangeAttribute.START_DATE]);\n    }\n    if (DateRangeAttribute.END_DATE in this.attr) {\n      const endDate =\n        dateRangeWithSameId?.endDate ||\n        new Date(this.attr[DateRangeAttribute.END_DATE]);\n      if (Number.isFinite(endDate.getTime())) {\n        this._endDate = endDate;\n      }\n    }\n  }\n\n  get id(): string {\n    return this.attr.ID;\n  }\n\n  get class(): string {\n    return this.attr.CLASS;\n  }\n\n  get cue(): DateRangeCue {\n    const _cue = this._cue;\n    if (_cue === undefined) {\n      return (this._cue = this.attr.enumeratedStringList(\n        this.attr.CUE ? 'CUE' : 'X-CUE',\n        {\n          pre: false,\n          post: false,\n          once: false,\n        },\n      ));\n    }\n    return _cue;\n  }\n\n  get startTime(): number {\n    const { tagAnchor } = this;\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (tagAnchor === null || tagAnchor.programDateTime === null) {\n      logger.warn(\n        `Expected tagAnchor Fragment with PDT set for DateRange \"${this.id}\": ${tagAnchor}`,\n      );\n      return NaN;\n    }\n    return (\n      tagAnchor.start +\n      (this.startDate.getTime() - tagAnchor.programDateTime) / 1000\n    );\n  }\n\n  get startDate(): Date {\n    return this._startDate;\n  }\n\n  get endDate(): Date | null {\n    const dateAtEnd = this._endDate || this._dateAtEnd;\n    if (dateAtEnd) {\n      return dateAtEnd;\n    }\n    const duration = this.duration;\n    if (duration !== null) {\n      return (this._dateAtEnd = new Date(\n        this._startDate.getTime() + duration * 1000,\n      ));\n    }\n    return null;\n  }\n\n  get duration(): number | null {\n    if (DateRangeAttribute.DURATION in this.attr) {\n      const duration = this.attr.decimalFloatingPoint(\n        DateRangeAttribute.DURATION,\n      );\n      if (Number.isFinite(duration)) {\n        return duration;\n      }\n    } else if (this._endDate) {\n      return (this._endDate.getTime() - this._startDate.getTime()) / 1000;\n    }\n    return null;\n  }\n\n  get plannedDuration(): number | null {\n    if (DateRangeAttribute.PLANNED_DURATION in this.attr) {\n      return this.attr.decimalFloatingPoint(\n        DateRangeAttribute.PLANNED_DURATION,\n      );\n    }\n    return null;\n  }\n\n  get endOnNext(): boolean {\n    return this.attr.bool(DateRangeAttribute.END_ON_NEXT);\n  }\n\n  get isInterstitial(): boolean {\n    return this.class === CLASS_INTERSTITIAL;\n  }\n\n  get isValid(): boolean {\n    return (\n      !!this.id &&\n      !this._badValueForSameId &&\n      Number.isFinite(this.startDate.getTime()) &&\n      (this.duration === null || this.duration >= 0) &&\n      (!this.endOnNext || !!this.class) &&\n      (!this.attr.CUE ||\n        (!this.cue.pre && !this.cue.post) ||\n        this.cue.pre !== this.cue.post) &&\n      (!this.isInterstitial ||\n        'X-ASSET-URI' in this.attr ||\n        'X-ASSET-LIST' in this.attr)\n    );\n  }\n}\n","import type { DateRange } from './date-range';\nimport type { Fragment, MediaFragment, Part } from './fragment';\nimport type { LevelKey } from './level-key';\nimport type { VariableMap } from '../types/level';\nimport type { AttrList } from '../utils/attr-list';\nimport type { KeySystemFormats } from '../utils/mediakeys-helper';\n\nconst DEFAULT_TARGET_DURATION = 10;\n\n/**\n * Object representing parsed data from an HLS Media Playlist. Found in {@link hls.js#Level.details}.\n */\nexport class LevelDetails {\n  public PTSKnown: boolean = false;\n  public alignedSliding: boolean = false;\n  public averagetargetduration?: number;\n  public endCC: number = 0;\n  public endSN: number = 0;\n  public fragments: MediaFragment[];\n  public fragmentHint?: MediaFragment;\n  public partList: Part[] | null = null;\n  public dateRanges: Record<string, DateRange | undefined>;\n  public dateRangeTagCount: number = 0;\n  public live: boolean = true;\n  public requestScheduled: number = -1;\n  public ageHeader: number = 0;\n  public advancedDateTime?: number;\n  public updated: boolean = true;\n  public advanced: boolean = true;\n  public misses: number = 0;\n  public startCC: number = 0;\n  public startSN: number = 0;\n  public startTimeOffset: number | null = null;\n  public targetduration: number = 0;\n  public totalduration: number = 0;\n  public type: string | null = null;\n  public url: string;\n  public m3u8: string = '';\n  public version: number | null = null;\n  public canBlockReload: boolean = false;\n  public canSkipUntil: number = 0;\n  public canSkipDateRanges: boolean = false;\n  public skippedSegments: number = 0;\n  public recentlyRemovedDateranges?: string[];\n  public partHoldBack: number = 0;\n  public holdBack: number = 0;\n  public partTarget: number = 0;\n  public preloadHint?: AttrList;\n  public renditionReports?: AttrList[];\n  public tuneInGoal: number = 0;\n  public deltaUpdateFailed?: boolean;\n  public driftStartTime: number = 0;\n  public driftEndTime: number = 0;\n  public driftStart: number = 0;\n  public driftEnd: number = 0;\n  public encryptedFragments: Fragment[];\n  public playlistParsingError: Error | null = null;\n  public variableList: VariableMap | null = null;\n  public hasVariableRefs = false;\n  public appliedTimelineOffset?: number;\n\n  constructor(baseUrl: string) {\n    this.fragments = [];\n    this.encryptedFragments = [];\n    this.dateRanges = {};\n    this.url = baseUrl;\n  }\n\n  reloaded(previous: LevelDetails | undefined) {\n    if (!previous) {\n      this.advanced = true;\n      this.updated = true;\n      return;\n    }\n    const partSnDiff = this.lastPartSn - previous.lastPartSn;\n    const partIndexDiff = this.lastPartIndex - previous.lastPartIndex;\n    this.updated =\n      this.endSN !== previous.endSN ||\n      !!partIndexDiff ||\n      !!partSnDiff ||\n      !this.live;\n    this.advanced =\n      this.endSN > previous.endSN ||\n      partSnDiff > 0 ||\n      (partSnDiff === 0 && partIndexDiff > 0);\n    if (this.updated || this.advanced) {\n      this.misses = Math.floor(previous.misses * 0.6);\n    } else {\n      this.misses = previous.misses + 1;\n    }\n  }\n\n  hasKey(levelKey: LevelKey): boolean {\n    return this.encryptedFragments.some((frag) => {\n      let decryptdata = frag.decryptdata;\n      if (!decryptdata) {\n        frag.setKeyFormat(levelKey.keyFormat as KeySystemFormats);\n        decryptdata = frag.decryptdata;\n      }\n      return !!decryptdata && levelKey.matches(decryptdata);\n    });\n  }\n\n  get hasProgramDateTime(): boolean {\n    if (this.fragments.length) {\n      return Number.isFinite(\n        this.fragments[this.fragments.length - 1].programDateTime,\n      );\n    }\n    return false;\n  }\n\n  get levelTargetDuration(): number {\n    return (\n      this.averagetargetduration ||\n      this.targetduration ||\n      DEFAULT_TARGET_DURATION\n    );\n  }\n\n  get drift(): number {\n    const runTime = this.driftEndTime - this.driftStartTime;\n    if (runTime > 0) {\n      const runDuration = this.driftEnd - this.driftStart;\n      return (runDuration * 1000) / runTime;\n    }\n    return 1;\n  }\n\n  get edge(): number {\n    return this.partEnd || this.fragmentEnd;\n  }\n\n  get partEnd(): number {\n    if (this.partList?.length) {\n      return this.partList[this.partList.length - 1].end;\n    }\n    return this.fragmentEnd;\n  }\n\n  get fragmentEnd(): number {\n    if (this.fragments.length) {\n      return this.fragments[this.fragments.length - 1].end;\n    }\n    return 0;\n  }\n\n  get fragmentStart(): number {\n    if (this.fragments.length) {\n      return this.fragments[0].start;\n    }\n    return 0;\n  }\n\n  get age(): number {\n    if (this.advancedDateTime) {\n      return Math.max(Date.now() - this.advancedDateTime, 0) / 1000;\n    }\n    return 0;\n  }\n\n  get lastPartIndex(): number {\n    if (this.partList?.length) {\n      return this.partList[this.partList.length - 1].index;\n    }\n    return -1;\n  }\n\n  get maxPartIndex(): number {\n    const partList = this.partList;\n    if (partList) {\n      const lastIndex = this.lastPartIndex;\n      if (lastIndex !== -1) {\n        for (let i = partList.length; i--; ) {\n          if (partList[i].index > lastIndex) {\n            return partList[i].index;\n          }\n        }\n        return lastIndex;\n      }\n    }\n    return 0;\n  }\n\n  get lastPartSn(): number {\n    if (this.partList?.length) {\n      return this.partList[this.partList.length - 1].fragment.sn;\n    }\n    return this.endSN;\n  }\n\n  get expired(): boolean {\n    if (this.live && this.age && this.misses < 3) {\n      const playlistWindowDuration = this.partEnd - this.fragmentStart;\n      return (\n        this.age >\n        Math.max(playlistWindowDuration, this.totalduration) +\n          this.levelTargetDuration\n      );\n    }\n    return false;\n  }\n}\n","export function arrayValuesMatch(\n  a: (string | number)[] | Uint8Array,\n  b: (string | number)[] | Uint8Array,\n): boolean {\n  if (a.length === b.length) {\n    return !a.some((value: string | number, i: number) => value !== b[i]);\n  }\n  return false;\n}\n\nexport function optionalArrayValuesMatch(\n  a: (string | number)[] | Uint8Array | null | undefined,\n  b: (string | number)[] | Uint8Array | null | undefined,\n): boolean {\n  if (!a && !b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return arrayValuesMatch(a, b);\n}\n","import { DecrypterAesMode } from '../crypt/decrypter-aes-mode';\n\nexport function isFullSegmentEncryption(method: string): boolean {\n  return (\n    method === 'AES-128' || method === 'AES-256' || method === 'AES-256-CTR'\n  );\n}\n\nexport function getAesModeFromFullSegmentMethod(\n  method: string,\n): DecrypterAesMode {\n  switch (method) {\n    case 'AES-128':\n    case 'AES-256':\n      return DecrypterAesMode.cbc;\n    case 'AES-256-CTR':\n      return DecrypterAesMode.ctr;\n    default:\n      throw new Error(`invalid full segment method ${method}`);\n  }\n}\n","export function base64ToBase64Url(base64encodedStr: string): string {\n  return base64encodedStr\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n}\n\nexport function strToBase64Encode(str: string): string {\n  return btoa(str);\n}\n\nexport function base64DecodeToStr(str: string): string {\n  return atob(str);\n}\n\nexport function base64Encode(input: Uint8Array): string {\n  return btoa(String.fromCharCode(...input));\n}\n\nexport function base64UrlEncode(input: Uint8Array): string {\n  return base64ToBase64Url(base64Encode(input));\n}\n\nexport function base64Decode(base64encodedStr: string) {\n  return Uint8Array.from(atob(base64encodedStr), (c) => c.charCodeAt(0));\n}\n","// breaking up those two types in order to clarify what is happening in the decoding path.\ntype DecodedFrame<T> = { key: string; data: T; info?: any };\nexport type Frame = DecodedFrame<ArrayBuffer | string>;\n// http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\n\nexport function strToUtf8array(str: string) {\n  return Uint8Array.from(unescape(encodeURIComponent(str)), (c) =>\n    c.charCodeAt(0),\n  );\n}\n","import { base64Decode } from './numeric-encoding-utils';\nimport { strToUtf8array } from './utf8-utils';\n\nfunction getKeyIdBytes(str: string): Uint8Array<ArrayBuffer> {\n  const keyIdbytes = strToUtf8array(str).subarray(0, 16);\n  const paddedkeyIdbytes = new Uint8Array(16);\n  paddedkeyIdbytes.set(keyIdbytes, 16 - keyIdbytes.length);\n  return paddedkeyIdbytes;\n}\n\nexport function changeEndianness(keyId: Uint8Array) {\n  const swap = function (array: Uint8Array, from: number, to: number) {\n    const cur = array[from];\n    array[from] = array[to];\n    array[to] = cur;\n  };\n\n  swap(keyId, 0, 3);\n  swap(keyId, 1, 2);\n  swap(keyId, 4, 5);\n  swap(keyId, 6, 7);\n}\n\nexport function convertDataUriToArrayBytes(\n  uri: string,\n): Uint8Array<ArrayBuffer> | null {\n  // data:[<media type][;attribute=value][;base64],<data>\n  const colonsplit = uri.split(':');\n  let keydata: Uint8Array<ArrayBuffer> | null = null;\n  if (colonsplit[0] === 'data' && colonsplit.length === 2) {\n    const semicolonsplit = colonsplit[1].split(';');\n    const commasplit = semicolonsplit[semicolonsplit.length - 1].split(',');\n    if (commasplit.length === 2) {\n      const isbase64 = commasplit[0] === 'base64';\n      const data = commasplit[1];\n      if (isbase64) {\n        semicolonsplit.splice(-1, 1); // remove from processing\n        keydata = base64Decode(data);\n      } else {\n        keydata = getKeyIdBytes(data);\n      }\n    }\n  }\n  return keydata;\n}\n","/** returns `undefined` is `self` is missing, e.g. in node */\nexport const optionalSelf = typeof self !== 'undefined' ? self : undefined;\n","import { optionalSelf } from './global';\nimport { changeEndianness } from './keysystem-util';\nimport { base64Decode } from './numeric-encoding-utils';\nimport type { DRMSystemOptions, EMEControllerConfig } from '../config';\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess\n */\nexport const enum KeySystems {\n  CLEARKEY = 'org.w3.clearkey',\n  FAIRPLAY = 'com.apple.fps',\n  PLAYREADY = 'com.microsoft.playready',\n  WIDEVINE = 'com.widevine.alpha',\n}\n\n// Playlist #EXT-X-KEY KEYFORMAT values\nexport const enum KeySystemFormats {\n  CLEARKEY = 'org.w3.clearkey',\n  FAIRPLAY = 'com.apple.streamingkeydelivery',\n  PLAYREADY = 'com.microsoft.playready',\n  WIDEVINE = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed',\n}\n\nexport function keySystemFormatToKeySystemDomain(\n  format: KeySystemFormats,\n): KeySystems | undefined {\n  switch (format) {\n    case KeySystemFormats.FAIRPLAY:\n      return KeySystems.FAIRPLAY;\n    case KeySystemFormats.PLAYREADY:\n      return KeySystems.PLAYREADY;\n    case KeySystemFormats.WIDEVINE:\n      return KeySystems.WIDEVINE;\n    case KeySystemFormats.CLEARKEY:\n      return KeySystems.CLEARKEY;\n  }\n}\n\n// System IDs for which we can extract a key ID from \"encrypted\" event PSSH\nexport const enum KeySystemIds {\n  CENC = '1077efecc0b24d02ace33c1e52e2fb4b',\n  CLEARKEY = 'e2719d58a985b3c9781ab030af78d30e',\n  FAIRPLAY = '94ce86fb07ff4f43adb893d2fa968ca2',\n  PLAYREADY = '9a04f07998404286ab92e65be0885f95',\n  WIDEVINE = 'edef8ba979d64acea3c827dcd51d21ed',\n}\n\nexport function keySystemIdToKeySystemDomain(\n  systemId: KeySystemIds,\n): KeySystems | undefined {\n  if (systemId === KeySystemIds.WIDEVINE) {\n    return KeySystems.WIDEVINE;\n  } else if (systemId === KeySystemIds.PLAYREADY) {\n    return KeySystems.PLAYREADY;\n  } else if (\n    systemId === KeySystemIds.CENC ||\n    systemId === KeySystemIds.CLEARKEY\n  ) {\n    return KeySystems.CLEARKEY;\n  }\n}\n\nexport function keySystemDomainToKeySystemFormat(\n  keySystem: KeySystems,\n): KeySystemFormats | undefined {\n  switch (keySystem) {\n    case KeySystems.FAIRPLAY:\n      return KeySystemFormats.FAIRPLAY;\n    case KeySystems.PLAYREADY:\n      return KeySystemFormats.PLAYREADY;\n    case KeySystems.WIDEVINE:\n      return KeySystemFormats.WIDEVINE;\n    case KeySystems.CLEARKEY:\n      return KeySystemFormats.CLEARKEY;\n  }\n}\n\nexport function getKeySystemsForConfig(\n  config: EMEControllerConfig,\n): KeySystems[] {\n  const { drmSystems, widevineLicenseUrl } = config;\n  const keySystemsToAttempt: KeySystems[] = drmSystems\n    ? [\n        KeySystems.FAIRPLAY,\n        KeySystems.WIDEVINE,\n        KeySystems.PLAYREADY,\n        KeySystems.CLEARKEY,\n      ].filter((keySystem) => !!drmSystems[keySystem])\n    : [];\n  if (!keySystemsToAttempt[KeySystems.WIDEVINE] && widevineLicenseUrl) {\n    keySystemsToAttempt.push(KeySystems.WIDEVINE);\n  }\n  return keySystemsToAttempt;\n}\n\nexport type MediaKeyFunc = (\n  keySystem: KeySystems,\n  supportedConfigurations: MediaKeySystemConfiguration[],\n) => Promise<MediaKeySystemAccess>;\n\nexport const requestMediaKeySystemAccess = (function (): MediaKeyFunc | null {\n  if (optionalSelf?.navigator?.requestMediaKeySystemAccess) {\n    return self.navigator.requestMediaKeySystemAccess.bind(self.navigator);\n  } else {\n    return null;\n  }\n})();\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration\n */\nexport function getSupportedMediaKeySystemConfigurations(\n  keySystem: KeySystems,\n  audioCodecs: string[],\n  videoCodecs: string[],\n  drmSystemOptions: DRMSystemOptions,\n): MediaKeySystemConfiguration[] {\n  let initDataTypes: string[];\n  switch (keySystem) {\n    case KeySystems.FAIRPLAY:\n      initDataTypes = ['cenc', 'sinf'];\n      break;\n    case KeySystems.WIDEVINE:\n    case KeySystems.PLAYREADY:\n      initDataTypes = ['cenc'];\n      break;\n    case KeySystems.CLEARKEY:\n      initDataTypes = ['cenc', 'keyids'];\n      break;\n    default:\n      throw new Error(`Unknown key-system: ${keySystem}`);\n  }\n  return createMediaKeySystemConfigurations(\n    initDataTypes,\n    audioCodecs,\n    videoCodecs,\n    drmSystemOptions,\n  );\n}\n\nfunction createMediaKeySystemConfigurations(\n  initDataTypes: string[],\n  audioCodecs: string[],\n  videoCodecs: string[],\n  drmSystemOptions: DRMSystemOptions,\n): MediaKeySystemConfiguration[] {\n  const baseConfig: MediaKeySystemConfiguration = {\n    initDataTypes: initDataTypes,\n    persistentState: drmSystemOptions.persistentState || 'optional',\n    distinctiveIdentifier: drmSystemOptions.distinctiveIdentifier || 'optional',\n    sessionTypes: drmSystemOptions.sessionTypes || [\n      drmSystemOptions.sessionType || 'temporary',\n    ],\n    audioCapabilities: audioCodecs.map((codec) => ({\n      contentType: `audio/mp4; codecs=${codec}`,\n      robustness: drmSystemOptions.audioRobustness || '',\n      encryptionScheme: drmSystemOptions.audioEncryptionScheme || null,\n    })),\n    videoCapabilities: videoCodecs.map((codec) => ({\n      contentType: `video/mp4; codecs=${codec}`,\n      robustness: drmSystemOptions.videoRobustness || '',\n      encryptionScheme: drmSystemOptions.videoEncryptionScheme || null,\n    })),\n  };\n\n  return [baseConfig];\n}\n\nexport function isPersistentSessionType(\n  drmSystemOptions: DRMSystemOptions | undefined,\n): boolean {\n  return (\n    !!drmSystemOptions &&\n    (drmSystemOptions.sessionType === 'persistent-license' ||\n      !!drmSystemOptions.sessionTypes?.some(\n        (type) => type === 'persistent-license',\n      ))\n  );\n}\n\nexport function parsePlayReadyWRM(keyBytes: Uint8Array<ArrayBuffer>) {\n  const keyBytesUtf16 = new Uint16Array(\n    keyBytes.buffer,\n    keyBytes.byteOffset,\n    keyBytes.byteLength / 2,\n  );\n  const keyByteStr = String.fromCharCode.apply(null, Array.from(keyBytesUtf16));\n\n  // Parse Playready WRMHeader XML\n  const xmlKeyBytes = keyByteStr.substring(\n    keyByteStr.indexOf('<'),\n    keyByteStr.length,\n  );\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xmlKeyBytes, 'text/xml');\n  const keyData = xmlDoc.getElementsByTagName('KID')[0];\n  if (keyData) {\n    const keyId = keyData.childNodes[0]\n      ? keyData.childNodes[0].nodeValue\n      : keyData.getAttribute('VALUE');\n    if (keyId) {\n      const keyIdArray = base64Decode(keyId).subarray(0, 16);\n      // KID value in PRO is a base64-encoded little endian GUID interpretation of UUID\n      // KID value in ‘tenc’ is a big endian UUID GUID interpretation of UUID\n      changeEndianness(keyIdArray);\n      return keyIdArray;\n    }\n  }\n  return null;\n}\n","import { arrayValuesMatch, optionalArrayValuesMatch } from '../utils/arrays';\nimport { isFullSegmentEncryption } from '../utils/encryption-methods-util';\nimport { hexToArrayBuffer } from '../utils/hex';\nimport { convertDataUriToArrayBytes } from '../utils/keysystem-util';\nimport { logger } from '../utils/logger';\nimport { KeySystemFormats, parsePlayReadyWRM } from '../utils/mediakeys-helper';\nimport { mp4pssh, parseMultiPssh } from '../utils/mp4-tools';\n\nlet keyUriToKeyIdMap: { [uri: string]: Uint8Array<ArrayBuffer> } = {};\n\nexport interface DecryptData {\n  uri: string;\n  method: string;\n  keyFormat: string;\n  keyFormatVersions: number[];\n  iv: Uint8Array<ArrayBuffer> | null;\n  key: Uint8Array<ArrayBuffer> | null;\n  keyId: Uint8Array<ArrayBuffer> | null;\n  pssh: Uint8Array<ArrayBuffer> | null;\n  encrypted: boolean;\n  isCommonEncryption: boolean;\n}\n\nexport class LevelKey implements DecryptData {\n  public readonly uri: string;\n  public readonly method: string;\n  public readonly keyFormat: string;\n  public readonly keyFormatVersions: number[];\n  public readonly encrypted: boolean;\n  public readonly isCommonEncryption: boolean;\n  public iv: Uint8Array<ArrayBuffer> | null = null;\n  public key: Uint8Array<ArrayBuffer> | null = null;\n  public keyId: Uint8Array<ArrayBuffer> | null = null;\n  public pssh: Uint8Array<ArrayBuffer> | null = null;\n\n  static clearKeyUriToKeyIdMap() {\n    keyUriToKeyIdMap = {};\n  }\n\n  static setKeyIdForUri(uri: string, keyId: Uint8Array<ArrayBuffer>) {\n    keyUriToKeyIdMap[uri] = keyId;\n  }\n\n  constructor(\n    method: string,\n    uri: string,\n    format: string,\n    formatversions: number[] = [1],\n    iv: Uint8Array<ArrayBuffer> | null = null,\n    keyId?: string,\n  ) {\n    this.method = method;\n    this.uri = uri;\n    this.keyFormat = format;\n    this.keyFormatVersions = formatversions;\n    this.iv = iv;\n    this.encrypted = method ? method !== 'NONE' : false;\n    this.isCommonEncryption =\n      this.encrypted && !isFullSegmentEncryption(method);\n    if (keyId?.startsWith('0x')) {\n      this.keyId = new Uint8Array(hexToArrayBuffer(keyId));\n    }\n  }\n\n  public matches(key: LevelKey): boolean {\n    return (\n      key.uri === this.uri &&\n      key.method === this.method &&\n      key.encrypted === this.encrypted &&\n      key.keyFormat === this.keyFormat &&\n      arrayValuesMatch(key.keyFormatVersions, this.keyFormatVersions) &&\n      optionalArrayValuesMatch(key.iv, this.iv) &&\n      optionalArrayValuesMatch(key.keyId, this.keyId)\n    );\n  }\n\n  public isSupported(): boolean {\n    // If it's Segment encryption or No encryption, just select that key system\n    if (this.method) {\n      if (isFullSegmentEncryption(this.method) || this.method === 'NONE') {\n        return true;\n      }\n      if (this.keyFormat === 'identity') {\n        // Maintain support for clear SAMPLE-AES with MPEG-3 TS\n        return this.method === 'SAMPLE-AES';\n      } else if (__USE_EME_DRM__) {\n        switch (this.keyFormat) {\n          case KeySystemFormats.FAIRPLAY:\n          case KeySystemFormats.WIDEVINE:\n          case KeySystemFormats.PLAYREADY:\n          case KeySystemFormats.CLEARKEY:\n            return (\n              ['SAMPLE-AES', 'SAMPLE-AES-CENC', 'SAMPLE-AES-CTR'].indexOf(\n                this.method,\n              ) !== -1\n            );\n        }\n      }\n    }\n    return false;\n  }\n\n  public getDecryptData(\n    sn: number | 'initSegment',\n    levelKeys?: { [key: string]: LevelKey | undefined },\n  ): LevelKey | null {\n    if (!this.encrypted || !this.uri) {\n      return null;\n    }\n\n    if (isFullSegmentEncryption(this.method)) {\n      let iv = this.iv;\n      if (!iv) {\n        if (typeof sn !== 'number') {\n          // We are fetching decryption data for a initialization segment\n          // If the segment was encrypted with AES-128/256\n          // It must have an IV defined. We cannot substitute the Segment Number in.\n          logger.warn(\n            `missing IV for initialization segment with method=\"${this.method}\" - compliance issue`,\n          );\n\n          // Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.\n          sn = 0;\n        }\n        iv = createInitializationVector(sn);\n      }\n      const decryptdata = new LevelKey(\n        this.method,\n        this.uri,\n        'identity',\n        this.keyFormatVersions,\n        iv,\n      );\n      return decryptdata;\n    }\n\n    if (!__USE_EME_DRM__) {\n      return this;\n    }\n\n    if (this.keyId) {\n      // Handle case where key id is changed in KEY_LOADING event handler #7542#issuecomment-3305203929\n      const assignedKeyId = keyUriToKeyIdMap[this.uri];\n      if (assignedKeyId && !arrayValuesMatch(this.keyId, assignedKeyId)) {\n        LevelKey.setKeyIdForUri(this.uri, this.keyId);\n      }\n\n      if (this.pssh) {\n        return this;\n      }\n    }\n\n    // Key bytes are signalled the KEYID attribute, typically only found on WideVine KEY tags\n    // Initialize keyId if possible\n    const keyBytes = convertDataUriToArrayBytes(this.uri);\n    if (keyBytes) {\n      switch (this.keyFormat) {\n        case KeySystemFormats.WIDEVINE:\n          // Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using\n          // the playlist-key before the \"encrypted\" event. (Comment out to only use \"encrypted\" path.)\n          this.pssh = keyBytes;\n          // In case of Widevine, if KEYID is not in the playlist, assume only two fields in the pssh KEY tag URI.\n          if (!this.keyId) {\n            const results = parseMultiPssh(keyBytes.buffer);\n            if (results.length) {\n              const psshData = results[0];\n              this.keyId = psshData.kids?.length ? psshData.kids[0] : null;\n            }\n          }\n          if (!this.keyId) {\n            this.keyId = getKeyIdFromPlayReadyKey(levelKeys);\n          }\n          break;\n        case KeySystemFormats.PLAYREADY: {\n          const PlayReadyKeySystemUUID = new Uint8Array([\n            0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6,\n            0x5b, 0xe0, 0x88, 0x5f, 0x95,\n          ]);\n\n          // Setting `pssh` on this LevelKey/DecryptData allows HLS.js to generate a session using\n          // the playlist-key before the \"encrypted\" event. (Comment out to only use \"encrypted\" path.)\n          this.pssh = mp4pssh(PlayReadyKeySystemUUID, null, keyBytes);\n\n          this.keyId = parsePlayReadyWRM(keyBytes);\n\n          break;\n        }\n        default: {\n          let keydata = keyBytes.subarray(0, 16);\n          if (keydata.length !== 16) {\n            const padded = new Uint8Array(16);\n            padded.set(keydata, 16 - keydata.length);\n            keydata = padded;\n          }\n          this.keyId = keydata;\n          break;\n        }\n      }\n    }\n\n    // Default behavior: get keyId from other KEY tag or URI lookup\n    if (!this.keyId || this.keyId.byteLength !== 16) {\n      let keyId: Uint8Array<ArrayBuffer> | null | undefined;\n      keyId = getKeyIdFromWidevineKey(levelKeys);\n      if (!keyId) {\n        keyId = getKeyIdFromPlayReadyKey(levelKeys);\n        if (!keyId) {\n          keyId = keyUriToKeyIdMap[this.uri];\n        }\n      }\n      if (keyId) {\n        this.keyId = keyId;\n        LevelKey.setKeyIdForUri(this.uri, keyId);\n      }\n    }\n\n    return this;\n  }\n}\n\nfunction getKeyIdFromWidevineKey(\n  levelKeys: { [key: string]: LevelKey | undefined } | undefined,\n) {\n  const widevineKey = levelKeys?.[KeySystemFormats.WIDEVINE];\n  if (widevineKey) {\n    return widevineKey.keyId;\n  }\n  return null;\n}\n\nfunction getKeyIdFromPlayReadyKey(\n  levelKeys: { [key: string]: LevelKey | undefined } | undefined,\n) {\n  const playReadyKey = levelKeys?.[KeySystemFormats.PLAYREADY];\n  if (playReadyKey) {\n    const playReadyKeyBytes = convertDataUriToArrayBytes(playReadyKey.uri);\n    if (playReadyKeyBytes) {\n      return parsePlayReadyWRM(playReadyKeyBytes);\n    }\n  }\n  return null;\n}\n\nfunction createInitializationVector(segmentNumber: number) {\n  const uint8View = new Uint8Array(16);\n  for (let i = 12; i < 16; i++) {\n    uint8View[i] = (segmentNumber >> (8 * (15 - i))) & 0xff;\n  }\n  return uint8View;\n}\n","import { buildAbsoluteURL } from 'url-toolkit';\nimport { DateRange } from './date-range';\nimport { Fragment, Part } from './fragment';\nimport { LevelDetails } from './level-details';\nimport { LevelKey } from './level-key';\nimport { AttrList } from '../utils/attr-list';\nimport { isCodecType } from '../utils/codecs';\nimport { logger } from '../utils/logger';\nimport {\n  addVariableDefinition,\n  hasVariableReferences,\n  importVariableDefinition,\n  substituteVariables,\n} from '../utils/variable-substitution';\nimport type { MediaFragment } from './fragment';\nimport type { ContentSteeringOptions } from '../types/events';\nimport type {\n  CodecsParsed,\n  LevelAttributes,\n  LevelParsed,\n  VariableMap,\n} from '../types/level';\nimport type { PlaylistLevelType } from '../types/loader';\nimport type { MediaAttributes, MediaPlaylist } from '../types/media-playlist';\nimport type { CodecType } from '../utils/codecs';\n\ntype M3U8ParserFragments = Array<Fragment | null>;\n\nexport type ParsedMultivariantPlaylist = {\n  contentSteering: ContentSteeringOptions | null;\n  levels: LevelParsed[];\n  playlistParsingError: Error | null;\n  sessionData: Record<string, AttrList> | null;\n  sessionKeys: LevelKey[] | null;\n  startTimeOffset: number | null;\n  variableList: VariableMap | null;\n  hasVariableRefs: boolean;\n};\n\ntype ParsedMultivariantMediaOptions = {\n  AUDIO?: MediaPlaylist[];\n  SUBTITLES?: MediaPlaylist[];\n  'CLOSED-CAPTIONS'?: MediaPlaylist[];\n};\n\ntype LevelKeys = { [key: string]: LevelKey | undefined };\n\nconst MASTER_PLAYLIST_REGEX =\n  /#EXT-X-STREAM-INF:([^\\r\\n]*)(?:[\\r\\n](?:#[^\\r\\n]*)?)*([^\\r\\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\\r\\n]*)[\\r\\n]+/g;\nconst MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\n\nconst IS_MEDIA_PLAYLIST = /^#EXT(?:INF|-X-TARGETDURATION):/m; // Handle empty Media Playlist (first EXTINF not signaled, but TARGETDURATION present)\n\nconst LEVEL_PLAYLIST_REGEX_FAST = new RegExp(\n  [\n    /#EXTINF:\\s*(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n    /(?!#) *(\\S[^\\r\\n]*)/.source, // segment URI, group 3 => the URI (note newline is not eaten)\n    /#.*/.source, // All other non-segment oriented tags will match with all groups empty\n  ].join('|'),\n  'g',\n);\n\nconst LEVEL_PLAYLIST_REGEX_SLOW = new RegExp(\n  [\n    /#EXT-X-(PROGRAM-DATE-TIME|BYTERANGE|DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/\n      .source,\n    /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\\d+)/\n      .source,\n    /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source,\n    /(#)([^:]*):(.*)/.source,\n    /(#)(.*)(?:.*)\\r?\\n?/.source,\n  ].join('|'),\n);\n\nexport default class M3U8Parser {\n  static findGroup(\n    groups: (\n      | { id?: string; audioCodec?: string }\n      | { id?: string; textCodec?: string }\n    )[],\n    mediaGroupId: string,\n  ):\n    | { id?: string; audioCodec?: string }\n    | { id?: string; textCodec?: string }\n    | undefined {\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      if (group.id === mediaGroupId) {\n        return group;\n      }\n    }\n  }\n\n  static resolve(url, baseUrl) {\n    return buildAbsoluteURL(baseUrl, url, { alwaysNormalize: true });\n  }\n\n  static isMediaPlaylist(str: string): boolean {\n    return IS_MEDIA_PLAYLIST.test(str);\n  }\n\n  static parseMasterPlaylist(\n    string: string,\n    baseurl: string,\n  ): ParsedMultivariantPlaylist {\n    const hasVariableRefs = __USE_VARIABLE_SUBSTITUTION__\n      ? hasVariableReferences(string)\n      : false;\n    const parsed: ParsedMultivariantPlaylist = {\n      contentSteering: null,\n      levels: [],\n      playlistParsingError: null,\n      sessionData: null,\n      sessionKeys: null,\n      startTimeOffset: null,\n      variableList: null,\n      hasVariableRefs,\n    };\n    const levelsWithKnownCodecs: LevelParsed[] = [];\n\n    MASTER_PLAYLIST_REGEX.lastIndex = 0;\n    if (!string.startsWith('#EXTM3U')) {\n      parsed.playlistParsingError = new Error('no EXTM3U delimiter');\n      return parsed;\n    }\n    let result: RegExpExecArray | null;\n    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {\n      if (result[1]) {\n        // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1\n        const attrs = new AttrList(result[1], parsed) as LevelAttributes;\n        const uri = __USE_VARIABLE_SUBSTITUTION__\n          ? substituteVariables(parsed, result[2])\n          : result[2];\n        const level: LevelParsed = {\n          attrs,\n          bitrate:\n            attrs.decimalInteger('BANDWIDTH') ||\n            attrs.decimalInteger('AVERAGE-BANDWIDTH'),\n          name: attrs.NAME,\n          url: M3U8Parser.resolve(uri, baseurl),\n        };\n\n        const resolution = attrs.decimalResolution('RESOLUTION');\n        if (resolution) {\n          level.width = resolution.width;\n          level.height = resolution.height;\n        }\n\n        setCodecs(attrs.CODECS, level);\n        const supplementalCodecs = attrs['SUPPLEMENTAL-CODECS'];\n        if (supplementalCodecs) {\n          level.supplemental = {};\n          setCodecs(supplementalCodecs, level.supplemental);\n        }\n\n        if (!level.unknownCodecs?.length) {\n          levelsWithKnownCodecs.push(level);\n        }\n\n        parsed.levels.push(level);\n      } else if (result[3]) {\n        const tag = result[3];\n        const attributes = result[4];\n        switch (tag) {\n          case 'SESSION-DATA': {\n            // #EXT-X-SESSION-DATA\n            const sessionAttrs = new AttrList(attributes, parsed);\n            const dataId = sessionAttrs['DATA-ID'];\n            if (dataId) {\n              if (parsed.sessionData === null) {\n                parsed.sessionData = {};\n              }\n              parsed.sessionData[dataId] = sessionAttrs;\n            }\n            break;\n          }\n          case 'SESSION-KEY': {\n            // #EXT-X-SESSION-KEY\n            const sessionKey = parseKey(attributes, baseurl, parsed);\n            if (sessionKey.encrypted && sessionKey.isSupported()) {\n              if (parsed.sessionKeys === null) {\n                parsed.sessionKeys = [];\n              }\n              parsed.sessionKeys.push(sessionKey);\n            } else {\n              logger.warn(\n                `[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: \"${attributes}\"`,\n              );\n            }\n            break;\n          }\n          case 'DEFINE': {\n            // #EXT-X-DEFINE\n            if (__USE_VARIABLE_SUBSTITUTION__) {\n              const variableAttributes = new AttrList(attributes, parsed);\n              addVariableDefinition(parsed, variableAttributes, baseurl);\n            }\n            break;\n          }\n          case 'CONTENT-STEERING': {\n            // #EXT-X-CONTENT-STEERING\n            const contentSteeringAttributes = new AttrList(attributes, parsed);\n            parsed.contentSteering = {\n              uri: M3U8Parser.resolve(\n                contentSteeringAttributes['SERVER-URI'],\n                baseurl,\n              ),\n              pathwayId: contentSteeringAttributes['PATHWAY-ID'] || '.',\n            };\n            break;\n          }\n          case 'START': {\n            // #EXT-X-START\n            parsed.startTimeOffset = parseStartTimeOffset(attributes);\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    }\n    // Filter out levels with unknown codecs if it does not remove all levels\n    const stripUnknownCodecLevels =\n      levelsWithKnownCodecs.length > 0 &&\n      levelsWithKnownCodecs.length < parsed.levels.length;\n\n    parsed.levels = stripUnknownCodecLevels\n      ? levelsWithKnownCodecs\n      : parsed.levels;\n    if (parsed.levels.length === 0) {\n      parsed.playlistParsingError = new Error('no levels found in manifest');\n    }\n\n    return parsed;\n  }\n\n  static parseMasterPlaylistMedia(\n    string: string,\n    baseurl: string,\n    parsed: ParsedMultivariantPlaylist,\n  ): ParsedMultivariantMediaOptions {\n    let result: RegExpExecArray | null;\n    const results: ParsedMultivariantMediaOptions = {};\n    const levels = parsed.levels;\n    const groupsByType = {\n      AUDIO: levels.map((level: LevelParsed) => ({\n        id: level.attrs.AUDIO,\n        audioCodec: level.audioCodec,\n      })),\n      SUBTITLES: levels.map((level: LevelParsed) => ({\n        id: level.attrs.SUBTITLES,\n        textCodec: level.textCodec,\n      })),\n      'CLOSED-CAPTIONS': [],\n    };\n    let id = 0;\n    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n      const attrs = new AttrList(result[1], parsed) as MediaAttributes;\n      const type = attrs.TYPE;\n      if (type) {\n        const groups:\n          | (typeof groupsByType)[keyof typeof groupsByType]\n          | undefined = groupsByType[type];\n        const medias: MediaPlaylist[] = results[type] || [];\n        results[type] = medias;\n        const lang = attrs.LANGUAGE;\n        const assocLang = attrs['ASSOC-LANGUAGE'];\n        const channels = attrs.CHANNELS;\n        const characteristics = attrs.CHARACTERISTICS;\n        const instreamId = attrs['INSTREAM-ID'];\n        const media: MediaPlaylist = {\n          attrs,\n          bitrate: 0,\n          id: id++,\n          groupId: attrs['GROUP-ID'] || '',\n          name: attrs.NAME || lang || '',\n          type,\n          default: attrs.bool('DEFAULT'),\n          autoselect: attrs.bool('AUTOSELECT'),\n          forced: attrs.bool('FORCED'),\n          lang,\n          url: attrs.URI ? M3U8Parser.resolve(attrs.URI, baseurl) : '',\n        };\n        if (assocLang) {\n          media.assocLang = assocLang;\n        }\n        if (channels) {\n          media.channels = channels;\n        }\n        if (characteristics) {\n          media.characteristics = characteristics;\n        }\n        if (instreamId) {\n          media.instreamId = instreamId;\n        }\n\n        if (groups?.length) {\n          // If there are audio or text groups signalled in the manifest, let's look for a matching codec string for this track\n          // If we don't find the track signalled, lets use the first audio groups codec we have\n          // Acting as a best guess\n          const groupCodec =\n            M3U8Parser.findGroup(groups, media.groupId as string) || groups[0];\n          assignCodec(media, groupCodec, 'audioCodec');\n          assignCodec(media, groupCodec, 'textCodec');\n        }\n\n        medias.push(media);\n      }\n    }\n    return results;\n  }\n\n  static parseLevelPlaylist(\n    string: string,\n    baseurl: string,\n    id: number,\n    type: PlaylistLevelType,\n    levelUrlId: number,\n    multivariantVariableList: VariableMap | null,\n  ): LevelDetails {\n    const base = { url: baseurl };\n    const level = new LevelDetails(baseurl);\n    const fragments: M3U8ParserFragments = level.fragments;\n    const programDateTimes: MediaFragment[] = [];\n    // The most recent init segment seen (applies to all subsequent segments)\n    let currentInitSegment: Fragment | null = null;\n    let currentSN = 0;\n    let currentPart = 0;\n    let totalduration = 0;\n    let discontinuityCounter = 0;\n    let currentBitrate = 0;\n    let prevFrag: Fragment | null = null;\n    let frag: Fragment = new Fragment(type, base);\n    let result: RegExpExecArray | RegExpMatchArray | null;\n    let i: number;\n    let levelkeys: LevelKeys | undefined;\n    let firstPdtIndex = -1;\n    let createNextFrag = false;\n    let nextByteRange: string | null = null;\n    let serverControlAttrs: AttrList | undefined;\n\n    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n    level.m3u8 = string;\n    level.hasVariableRefs = __USE_VARIABLE_SUBSTITUTION__\n      ? hasVariableReferences(string)\n      : false;\n    if (LEVEL_PLAYLIST_REGEX_FAST.exec(string)?.[0] !== '#EXTM3U') {\n      level.playlistParsingError = new Error(\n        'Missing format identifier #EXTM3U',\n      );\n      return level;\n    }\n    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n      if (createNextFrag) {\n        createNextFrag = false;\n        frag = new Fragment(type, base);\n        // setup the next fragment for part loading\n        frag.playlistOffset = totalduration;\n        frag.setStart(totalduration);\n        frag.sn = currentSN;\n        frag.cc = discontinuityCounter;\n        if (currentBitrate) {\n          frag.bitrate = currentBitrate;\n        }\n        frag.level = id;\n        if (currentInitSegment) {\n          frag.initSegment = currentInitSegment;\n          if (currentInitSegment.rawProgramDateTime) {\n            frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n            currentInitSegment.rawProgramDateTime = null;\n          }\n          if (nextByteRange) {\n            frag.setByteRange(nextByteRange);\n            nextByteRange = null;\n          }\n        }\n      }\n\n      const duration = result[1];\n      if (duration) {\n        // INF\n        frag.duration = parseFloat(duration);\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const title = (' ' + result[2]).slice(1);\n        frag.title = title || null;\n        frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);\n      } else if (result[3]) {\n        // url\n        if (Number.isFinite(frag.duration)) {\n          frag.playlistOffset = totalduration;\n          frag.setStart(totalduration);\n          if (levelkeys) {\n            setFragLevelKeys(frag, levelkeys, level);\n          }\n          frag.sn = currentSN;\n          frag.level = id;\n          frag.cc = discontinuityCounter;\n          fragments.push(frag);\n          // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n          const uri = (' ' + result[3]).slice(1);\n          frag.relurl = __USE_VARIABLE_SUBSTITUTION__\n            ? substituteVariables(level, uri)\n            : uri;\n          assignProgramDateTime(\n            frag as MediaFragment,\n            prevFrag as MediaFragment,\n            programDateTimes,\n          );\n          prevFrag = frag;\n          totalduration += frag.duration;\n          currentSN++;\n          currentPart = 0;\n          createNextFrag = true;\n        }\n      } else {\n        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n        if (!result) {\n          logger.warn('No matches on slow regex match for level playlist!');\n          continue;\n        }\n        for (i = 1; i < result.length; i++) {\n          if ((result[i] as any) !== undefined) {\n            break;\n          }\n        }\n\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const tag = (' ' + result[i]).slice(1);\n        const value1 = (' ' + result[i + 1]).slice(1);\n        const value2 = result[i + 2] ? (' ' + result[i + 2]).slice(1) : null;\n\n        switch (tag) {\n          case 'BYTERANGE':\n            if (prevFrag) {\n              frag.setByteRange(value1, prevFrag);\n            } else {\n              frag.setByteRange(value1);\n            }\n            break;\n          case 'PROGRAM-DATE-TIME':\n            // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n            frag.rawProgramDateTime = value1;\n            frag.tagList.push(['PROGRAM-DATE-TIME', value1]);\n            if (firstPdtIndex === -1) {\n              firstPdtIndex = fragments.length;\n            }\n            break;\n          case 'PLAYLIST-TYPE':\n            if (level.type) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            level.type = value1.toUpperCase();\n            break;\n          case 'MEDIA-SEQUENCE':\n            if (level.startSN !== 0) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            } else if (fragments.length > 0) {\n              assignMustAppearBeforeSegmentsError(level, tag, result);\n            }\n            currentSN = level.startSN = parseInt(value1);\n            break;\n          case 'SKIP': {\n            if (level.skippedSegments) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            const skipAttrs = new AttrList(value1, level);\n            const skippedSegments =\n              skipAttrs.decimalInteger('SKIPPED-SEGMENTS');\n            if (Number.isFinite(skippedSegments)) {\n              level.skippedSegments += skippedSegments;\n              // This will result in fragments[] containing undefined values, which we will fill in with `mergeDetails`\n              for (let i = skippedSegments; i--; ) {\n                fragments.push(null);\n              }\n              currentSN += skippedSegments;\n            }\n            const recentlyRemovedDateranges = skipAttrs.enumeratedString(\n              'RECENTLY-REMOVED-DATERANGES',\n            );\n            if (recentlyRemovedDateranges) {\n              level.recentlyRemovedDateranges = (\n                level.recentlyRemovedDateranges || []\n              ).concat(recentlyRemovedDateranges.split('\\t'));\n            }\n            break;\n          }\n          case 'TARGETDURATION':\n            if (level.targetduration !== 0) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            level.targetduration = Math.max(parseInt(value1), 1);\n            break;\n          case 'VERSION':\n            if (level.version !== null) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            level.version = parseInt(value1);\n            break;\n          case 'INDEPENDENT-SEGMENTS':\n            break;\n          case 'ENDLIST':\n            if (!level.live) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            level.live = false;\n            break;\n          case '#':\n            if (value1 || value2) {\n              frag.tagList.push(value2 ? [value1, value2] : [value1]);\n            }\n            break;\n          case 'DISCONTINUITY':\n            discontinuityCounter++;\n            frag.tagList.push(['DIS']);\n            break;\n          case 'GAP':\n            frag.gap = true;\n            frag.tagList.push([tag]);\n            break;\n          case 'BITRATE':\n            frag.tagList.push([tag, value1]);\n            currentBitrate = parseInt(value1) * 1000;\n            if (Number.isFinite(currentBitrate)) {\n              frag.bitrate = currentBitrate;\n            } else {\n              currentBitrate = 0;\n            }\n            break;\n          case 'DATERANGE': {\n            const dateRangeAttr = new AttrList(value1, level);\n            const dateRange = new DateRange(\n              dateRangeAttr,\n              level.dateRanges[dateRangeAttr.ID],\n              level.dateRangeTagCount,\n            );\n            level.dateRangeTagCount++;\n            if (dateRange.isValid || level.skippedSegments) {\n              level.dateRanges[dateRange.id] = dateRange;\n            } else {\n              logger.warn(`Ignoring invalid DATERANGE tag: \"${value1}\"`);\n            }\n            // Add to fragment tag list for backwards compatibility (< v1.2.0)\n            frag.tagList.push(['EXT-X-DATERANGE', value1]);\n            break;\n          }\n          case 'DEFINE': {\n            if (__USE_VARIABLE_SUBSTITUTION__) {\n              const variableAttributes = new AttrList(value1, level);\n              if ('IMPORT' in variableAttributes) {\n                importVariableDefinition(\n                  level,\n                  variableAttributes,\n                  multivariantVariableList,\n                );\n              } else {\n                addVariableDefinition(level, variableAttributes, baseurl);\n              }\n            }\n            break;\n          }\n\n          case 'DISCONTINUITY-SEQUENCE':\n            if (level.startCC !== 0) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            } else if (fragments.length > 0) {\n              assignMustAppearBeforeSegmentsError(level, tag, result);\n            }\n            level.startCC = discontinuityCounter = parseInt(value1);\n            break;\n          case 'KEY': {\n            const levelKey = parseKey(value1, baseurl, level);\n            if (levelKey.isSupported()) {\n              if (levelKey.method === 'NONE') {\n                levelkeys = undefined;\n                break;\n              }\n              if (!levelkeys) {\n                levelkeys = {};\n              }\n              const currentKey = levelkeys[levelKey.keyFormat];\n              // Ignore duplicate playlist KEY tags\n              if (!currentKey?.matches(levelKey)) {\n                if (currentKey) {\n                  levelkeys = Object.assign({}, levelkeys);\n                }\n                levelkeys[levelKey.keyFormat] = levelKey;\n              }\n            } else {\n              logger.warn(\n                `[Keys] Ignoring unsupported EXT-X-KEY tag: \"${value1}\"${__USE_EME_DRM__ ? '' : ' (light build)'}`,\n              );\n            }\n            break;\n          }\n          case 'START':\n            level.startTimeOffset = parseStartTimeOffset(value1);\n            break;\n          case 'MAP': {\n            const mapAttrs = new AttrList(value1, level);\n            if (frag.duration) {\n              // Initial segment tag is after segment duration tag.\n              //   #EXTINF: 6.0\n              //   #EXT-X-MAP:URI=\"init.mp4\n              const init = new Fragment(type, base);\n              setInitSegment(init, mapAttrs, id, levelkeys);\n              currentInitSegment = init;\n              frag.initSegment = currentInitSegment;\n              if (\n                currentInitSegment.rawProgramDateTime &&\n                !frag.rawProgramDateTime\n              ) {\n                frag.rawProgramDateTime = currentInitSegment.rawProgramDateTime;\n              }\n            } else {\n              // Initial segment tag is before segment duration tag\n              // Handle case where EXT-X-MAP is declared after EXT-X-BYTERANGE\n              const end = frag.byteRangeEndOffset;\n              if (end) {\n                const start = frag.byteRangeStartOffset as number;\n                nextByteRange = `${end - start}@${start}`;\n              } else {\n                nextByteRange = null;\n              }\n              setInitSegment(frag, mapAttrs, id, levelkeys);\n              currentInitSegment = frag;\n              createNextFrag = true;\n            }\n            currentInitSegment.cc = discontinuityCounter;\n            break;\n          }\n          case 'SERVER-CONTROL': {\n            if (serverControlAttrs) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            serverControlAttrs = new AttrList(value1);\n            level.canBlockReload = serverControlAttrs.bool('CAN-BLOCK-RELOAD');\n            level.canSkipUntil = serverControlAttrs.optionalFloat(\n              'CAN-SKIP-UNTIL',\n              0,\n            );\n            level.canSkipDateRanges =\n              level.canSkipUntil > 0 &&\n              serverControlAttrs.bool('CAN-SKIP-DATERANGES');\n            level.partHoldBack = serverControlAttrs.optionalFloat(\n              'PART-HOLD-BACK',\n              0,\n            );\n            level.holdBack = serverControlAttrs.optionalFloat('HOLD-BACK', 0);\n            break;\n          }\n          case 'PART-INF': {\n            if (level.partTarget) {\n              assignMultipleMediaPlaylistTagOccuranceError(level, tag, result);\n            }\n            const partInfAttrs = new AttrList(value1);\n            level.partTarget = partInfAttrs.decimalFloatingPoint('PART-TARGET');\n            break;\n          }\n          case 'PART': {\n            let partList = level.partList;\n            if (!partList) {\n              partList = level.partList = [];\n            }\n            const previousFragmentPart =\n              currentPart > 0 ? partList[partList.length - 1] : undefined;\n            const index = currentPart++;\n            const partAttrs = new AttrList(value1, level);\n            const part = new Part(\n              partAttrs,\n              frag as MediaFragment,\n              base,\n              index,\n              previousFragmentPart,\n            );\n            partList.push(part);\n            frag.duration += part.duration;\n            break;\n          }\n          case 'PRELOAD-HINT': {\n            const preloadHintAttrs = new AttrList(value1, level);\n            level.preloadHint = preloadHintAttrs;\n            break;\n          }\n          case 'RENDITION-REPORT': {\n            const renditionReportAttrs = new AttrList(value1, level);\n            level.renditionReports = level.renditionReports || [];\n            level.renditionReports.push(renditionReportAttrs);\n            break;\n          }\n          default:\n            logger.warn(`line parsed but not handled: ${result}`);\n            break;\n        }\n      }\n    }\n    if (prevFrag && !prevFrag.relurl) {\n      fragments.pop();\n      totalduration -= prevFrag.duration;\n      if (level.partList) {\n        level.fragmentHint = prevFrag as MediaFragment;\n      }\n    } else if (level.partList) {\n      assignProgramDateTime(\n        frag as MediaFragment,\n        prevFrag as MediaFragment,\n        programDateTimes,\n      );\n      frag.cc = discontinuityCounter;\n      level.fragmentHint = frag as MediaFragment;\n      if (levelkeys) {\n        setFragLevelKeys(frag, levelkeys, level);\n      }\n    }\n    if (!level.targetduration) {\n      level.playlistParsingError = new Error(`Missing Target Duration`);\n    }\n    const fragmentLength = fragments.length;\n    const firstFragment = fragments[0];\n    const lastFragment = fragments[fragmentLength - 1];\n    totalduration += level.skippedSegments * level.targetduration;\n    if (totalduration > 0 && fragmentLength && lastFragment) {\n      level.averagetargetduration = totalduration / fragmentLength;\n      const lastSn = lastFragment.sn;\n      level.endSN = lastSn !== 'initSegment' ? lastSn : 0;\n      if (!level.live) {\n        lastFragment.endList = true;\n      }\n      /**\n       * Backfill any missing PDT values\n       * \"If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after\n       * one or more Media Segment URIs, the client SHOULD extrapolate\n       * backward from that tag (using EXTINF durations and/or media\n       * timestamps) to associate dates with those segments.\"\n       * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs\n       * computed.\n       */\n      if (firstPdtIndex > 0) {\n        backfillProgramDateTimes(fragments, firstPdtIndex);\n        if (firstFragment) {\n          programDateTimes.unshift(firstFragment as MediaFragment);\n        }\n      }\n    }\n    if (level.fragmentHint) {\n      totalduration += level.fragmentHint.duration;\n    }\n    level.totalduration = totalduration;\n    if (programDateTimes.length && level.dateRangeTagCount && firstFragment) {\n      mapDateRanges(programDateTimes, level);\n    }\n\n    level.endCC = discontinuityCounter;\n\n    return level;\n  }\n}\n\nexport function mapDateRanges(\n  programDateTimes: MediaFragment[],\n  details: LevelDetails,\n) {\n  // Make sure DateRanges are mapped to a ProgramDateTime tag that applies a date to a segment that overlaps with its start date\n  let programDateTimeCount = programDateTimes.length;\n  if (!programDateTimeCount) {\n    if (details.hasProgramDateTime) {\n      const lastFragment = details.fragments[details.fragments.length - 1];\n      programDateTimes.push(lastFragment);\n      programDateTimeCount++;\n    } else {\n      // no segments with EXT-X-PROGRAM-DATE-TIME references in playlist history\n      return;\n    }\n  }\n  const lastProgramDateTime = programDateTimes[programDateTimeCount - 1];\n  const playlistEnd = details.live ? Infinity : details.totalduration;\n  const dateRangeIds = Object.keys(details.dateRanges);\n  for (let i = dateRangeIds.length; i--; ) {\n    const dateRange = details.dateRanges[dateRangeIds[i]]!;\n    const startDateTime = dateRange.startDate.getTime();\n    dateRange.tagAnchor = lastProgramDateTime.ref;\n    for (let j = programDateTimeCount; j--; ) {\n      if (programDateTimes[j]?.sn < details.startSN) {\n        break;\n      }\n      const fragIndex = findFragmentWithStartDate(\n        details,\n        startDateTime,\n        programDateTimes,\n        j,\n        playlistEnd,\n      );\n      if (fragIndex !== -1) {\n        dateRange.tagAnchor = details.fragments[fragIndex].ref;\n        break;\n      }\n    }\n  }\n}\n\nfunction findFragmentWithStartDate(\n  details: LevelDetails,\n  startDateTime: number,\n  programDateTimes: MediaFragment[],\n  index: number,\n  endTime: number,\n): number {\n  const pdtFragment = programDateTimes[index] as MediaFragment | undefined;\n  if (pdtFragment) {\n    // find matching range between PDT tags\n    const pdtStart = pdtFragment.programDateTime as number;\n    if (startDateTime >= pdtStart || index === 0) {\n      const durationBetweenPdt =\n        (programDateTimes[index + 1]?.start || endTime) - pdtFragment.start;\n      if (startDateTime <= pdtStart + durationBetweenPdt * 1000) {\n        // map to fragment with date-time range\n        const startIndex = programDateTimes[index].sn - details.startSN;\n        if (startIndex < 0) {\n          return -1;\n        }\n        const fragments = details.fragments;\n        if (fragments.length > programDateTimes.length) {\n          const endSegment =\n            programDateTimes[index + 1] || fragments[fragments.length - 1];\n          const endIndex = endSegment.sn - details.startSN;\n          for (let i = endIndex; i > startIndex; i--) {\n            const fragStartDateTime = fragments[i].programDateTime as number;\n            if (\n              startDateTime >= fragStartDateTime &&\n              startDateTime < fragStartDateTime + fragments[i].duration * 1000\n            ) {\n              return i;\n            }\n          }\n        }\n        return startIndex;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction parseKey(\n  keyTagAttributes: string,\n  baseurl: string,\n  parsed: ParsedMultivariantPlaylist | LevelDetails,\n): LevelKey {\n  // https://tools.ietf.org/html/rfc8216#section-4.3.2.4\n  const keyAttrs = new AttrList(keyTagAttributes, parsed);\n  const decryptmethod = keyAttrs.METHOD ?? '';\n  const decrypturi = keyAttrs.URI;\n  const decryptiv = keyAttrs.hexadecimalInteger('IV');\n  const decryptkeyformatversions = keyAttrs.KEYFORMATVERSIONS;\n  // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of \"identity\".\n  const decryptkeyformat = keyAttrs.KEYFORMAT ?? 'identity';\n\n  if (decrypturi && keyAttrs.IV && !decryptiv) {\n    logger.error(`Invalid IV: ${keyAttrs.IV}`);\n  }\n  // If decrypturi is a URI with a scheme, then baseurl will be ignored\n  // No uri is allowed when METHOD is NONE\n  const resolvedUri = decrypturi ? M3U8Parser.resolve(decrypturi, baseurl) : '';\n  const keyFormatVersions = (\n    decryptkeyformatversions ? decryptkeyformatversions : '1'\n  )\n    .split('/')\n    .map(Number)\n    .filter(Number.isFinite);\n\n  return new LevelKey(\n    decryptmethod,\n    resolvedUri,\n    decryptkeyformat,\n    keyFormatVersions,\n    decryptiv,\n    keyAttrs.KEYID,\n  );\n}\n\nfunction parseStartTimeOffset(startAttributes: string): number | null {\n  const startAttrs = new AttrList(startAttributes);\n  const startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');\n  if (Number.isFinite(startTimeOffset)) {\n    return startTimeOffset;\n  }\n  return null;\n}\n\nfunction setCodecs(\n  codecsAttributeValue: string | undefined,\n  level: CodecsParsed,\n) {\n  let codecs = (codecsAttributeValue || '').split(/[ ,]+/).filter((c) => c);\n  ['video', 'audio', 'text'].forEach((type: CodecType) => {\n    const filtered = codecs.filter((codec) => isCodecType(codec, type));\n    if (filtered.length) {\n      // Comma separated list of all codecs for type\n      level[`${type}Codec`] = filtered.map((c) => c.split('/')[0]).join(',');\n      // Remove known codecs so that only unknownCodecs are left after iterating through each type\n      codecs = codecs.filter((codec) => filtered.indexOf(codec) === -1);\n    }\n  });\n  level.unknownCodecs = codecs;\n}\n\nfunction assignCodec(\n  media: MediaPlaylist,\n  groupItem: { audioCodec?: string; textCodec?: string },\n  codecProperty: 'audioCodec' | 'textCodec',\n) {\n  const codecValue = groupItem[codecProperty];\n  if (codecValue) {\n    media[codecProperty] = codecValue;\n  }\n}\n\nfunction backfillProgramDateTimes(\n  fragments: M3U8ParserFragments,\n  firstPdtIndex: number,\n) {\n  let fragPrev = fragments[firstPdtIndex] as Fragment;\n  for (let i = firstPdtIndex; i--; ) {\n    const frag = fragments[i];\n    // Exit on delta-playlist skipped segments\n    if (!frag) {\n      return;\n    }\n    frag.programDateTime =\n      (fragPrev.programDateTime as number) - frag.duration * 1000;\n    fragPrev = frag;\n  }\n}\n\nexport function assignProgramDateTime(\n  frag: MediaFragment,\n  prevFrag: MediaFragment | null,\n  programDateTimes: MediaFragment[],\n) {\n  if (frag.rawProgramDateTime) {\n    programDateTimes.push(frag);\n  } else if (prevFrag?.programDateTime) {\n    frag.programDateTime = prevFrag.endProgramDateTime;\n  }\n}\n\nfunction setInitSegment(\n  frag: Fragment,\n  mapAttrs: AttrList,\n  id: number,\n  levelkeys: LevelKeys | undefined,\n) {\n  frag.relurl = mapAttrs.URI;\n  if (mapAttrs.BYTERANGE) {\n    frag.setByteRange(mapAttrs.BYTERANGE);\n  }\n  frag.level = id;\n  frag.sn = 'initSegment';\n  if (levelkeys) {\n    frag.levelkeys = levelkeys;\n  }\n  frag.initSegment = null;\n}\n\nfunction setFragLevelKeys(\n  frag: Fragment,\n  levelkeys: LevelKeys,\n  level: LevelDetails,\n) {\n  frag.levelkeys = levelkeys;\n  const { encryptedFragments } = level;\n  if (\n    (!encryptedFragments.length ||\n      encryptedFragments[encryptedFragments.length - 1].levelkeys !==\n        levelkeys) &&\n    Object.keys(levelkeys).some(\n      (format) => levelkeys[format]!.isCommonEncryption,\n    )\n  ) {\n    encryptedFragments.push(frag);\n  }\n}\n\nfunction assignMultipleMediaPlaylistTagOccuranceError(\n  level: LevelDetails,\n  tag: string,\n  result: string[],\n) {\n  level.playlistParsingError = new Error(\n    `#EXT-X-${tag} must not appear more than once (${result[0]})`,\n  );\n}\n\nfunction assignMustAppearBeforeSegmentsError(\n  level: LevelDetails,\n  tag: string,\n  result: string[],\n) {\n  level.playlistParsingError = new Error(\n    `#EXT-X-${tag} must appear before the first Media Segment (${result[0]})`,\n  );\n}\n","/**\n * Provides methods dealing with playlist sliding and drift\n */\n\nimport { stringify } from './safe-json-stringify';\nimport { DateRange } from '../loader/date-range';\nimport { assignProgramDateTime, mapDateRanges } from '../loader/m3u8-parser';\nimport type { ILogger } from './logger';\nimport type { Fragment, MediaFragment, Part } from '../loader/fragment';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { Level } from '../types/level';\n\ntype FragmentIntersection = (\n  oldFrag: MediaFragment,\n  newFrag: MediaFragment,\n  newFragIndex: number,\n  newFragments: MediaFragment[],\n) => void;\ntype PartIntersection = (oldPart: Part, newPart: Part) => void;\n\nexport function updatePTS(\n  fragments: MediaFragment[],\n  fromIdx: number,\n  toIdx: number,\n): void {\n  const fragFrom = fragments[fromIdx];\n  const fragTo = fragments[toIdx];\n  updateFromToPTS(fragFrom, fragTo);\n}\n\nfunction updateFromToPTS(fragFrom: MediaFragment, fragTo: MediaFragment) {\n  const fragToPTS = fragTo.startPTS as number;\n  // if we know startPTS[toIdx]\n  if (Number.isFinite(fragToPTS)) {\n    // update fragment duration.\n    // it helps to fix drifts between playlist reported duration and fragment real duration\n    let duration: number = 0;\n    let frag: Fragment;\n    if (fragTo.sn > fragFrom.sn) {\n      duration = fragToPTS - fragFrom.start;\n      frag = fragFrom;\n    } else {\n      duration = fragFrom.start - fragToPTS;\n      frag = fragTo;\n    }\n    if (frag.duration !== duration) {\n      frag.setDuration(duration);\n    }\n    // we dont know startPTS[toIdx]\n  } else if (fragTo.sn > fragFrom.sn) {\n    const contiguous = fragFrom.cc === fragTo.cc;\n    // TODO: With part-loading end/durations we need to confirm the whole fragment is loaded before using (or setting) minEndPTS\n    if (contiguous && fragFrom.minEndPTS) {\n      fragTo.setStart(fragFrom.start + (fragFrom.minEndPTS - fragFrom.start));\n    } else {\n      fragTo.setStart(fragFrom.start + fragFrom.duration);\n    }\n  } else {\n    fragTo.setStart(Math.max(fragFrom.start - fragTo.duration, 0));\n  }\n}\n\nexport function updateFragPTSDTS(\n  details: LevelDetails | undefined,\n  frag: MediaFragment,\n  startPTS: number,\n  endPTS: number,\n  startDTS: number,\n  endDTS: number,\n  logger: ILogger,\n): number {\n  const parsedMediaDuration = endPTS - startPTS;\n  if (parsedMediaDuration <= 0) {\n    logger.warn('Fragment should have a positive duration', frag);\n    endPTS = startPTS + frag.duration;\n    endDTS = startDTS + frag.duration;\n  }\n  let maxStartPTS = startPTS;\n  let minEndPTS = endPTS;\n  const fragStartPts = frag.startPTS as number;\n  const fragEndPts = frag.endPTS as number;\n  if (Number.isFinite(fragStartPts)) {\n    // delta PTS between audio and video\n    const deltaPTS = Math.abs(fragStartPts - startPTS);\n    if (details && deltaPTS > details.totalduration) {\n      logger.warn(\n        `media timestamps and playlist times differ by ${deltaPTS}s for level ${frag.level} ${details.url}`,\n      );\n    } else if (!Number.isFinite(frag.deltaPTS as number)) {\n      frag.deltaPTS = deltaPTS;\n    } else {\n      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS as number);\n    }\n\n    maxStartPTS = Math.max(startPTS, fragStartPts);\n    startPTS = Math.min(startPTS, fragStartPts);\n    startDTS =\n      frag.startDTS !== undefined\n        ? Math.min(startDTS, frag.startDTS)\n        : startDTS;\n\n    minEndPTS = Math.min(endPTS, fragEndPts);\n    endPTS = Math.max(endPTS, fragEndPts);\n    endDTS = frag.endDTS !== undefined ? Math.max(endDTS, frag.endDTS) : endDTS;\n  }\n\n  const drift = startPTS - frag.start;\n  if (frag.start !== 0) {\n    frag.setStart(startPTS);\n  }\n  frag.setDuration(endPTS - frag.start);\n  frag.startPTS = startPTS;\n  frag.maxStartPTS = maxStartPTS;\n  frag.startDTS = startDTS;\n  frag.endPTS = endPTS;\n  frag.minEndPTS = minEndPTS;\n  frag.endDTS = endDTS;\n\n  const sn = frag.sn;\n  // exit if sn out of range\n  if (!details || sn < details.startSN || sn > details.endSN) {\n    return 0;\n  }\n  let i: number;\n  const fragIdx = sn - details.startSN;\n  const fragments = details.fragments;\n  // update frag reference in fragments array\n  // rationale is that fragments array might not contain this frag object.\n  // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()\n  // if we don't update frag, we won't be able to propagate PTS info on the playlist\n  // resulting in invalid sliding computation\n  fragments[fragIdx] = frag;\n  // adjust fragment PTS/duration from seqnum-1 to frag 0\n  for (i = fragIdx; i > 0; i--) {\n    updateFromToPTS(fragments[i], fragments[i - 1]);\n  }\n\n  // adjust fragment PTS/duration from seqnum to last frag\n  for (i = fragIdx; i < fragments.length - 1; i++) {\n    updateFromToPTS(fragments[i], fragments[i + 1]);\n  }\n  if (details.fragmentHint) {\n    updateFromToPTS(fragments[fragments.length - 1], details.fragmentHint);\n  }\n\n  details.PTSKnown = details.alignedSliding = true;\n  return drift;\n}\n\nexport function mergeDetails(\n  oldDetails: LevelDetails,\n  newDetails: LevelDetails,\n  logger: ILogger,\n) {\n  if (oldDetails === newDetails) {\n    return;\n  }\n  // Track the last initSegment processed. Initialize it to the last one on the timeline.\n  let currentInitSegment: Fragment | null = null;\n  const oldFragments = oldDetails.fragments;\n  for (let i = oldFragments.length - 1; i >= 0; i--) {\n    const oldInit = oldFragments[i].initSegment;\n    if (oldInit) {\n      currentInitSegment = oldInit;\n      break;\n    }\n  }\n\n  if (oldDetails.fragmentHint) {\n    // prevent PTS and duration from being adjusted on the next hint\n    delete oldDetails.fragmentHint.endPTS;\n  }\n  // check if old/new playlists have fragments in common\n  // loop through overlapping SN and update startPTS, cc, and duration if any found\n  let PTSFrag: MediaFragment | undefined;\n  mapFragmentIntersection(\n    oldDetails,\n    newDetails,\n    (oldFrag, newFrag, newFragIndex, newFragments) => {\n      if (\n        (!newDetails.startCC || newDetails.skippedSegments) &&\n        newFrag.cc !== oldFrag.cc\n      ) {\n        const ccOffset = oldFrag.cc - newFrag.cc;\n        for (let i = newFragIndex; i < newFragments.length; i++) {\n          newFragments[i].cc += ccOffset;\n        }\n        newDetails.endCC = newFragments[newFragments.length - 1].cc;\n      }\n      if (\n        Number.isFinite(oldFrag.startPTS) &&\n        Number.isFinite(oldFrag.endPTS)\n      ) {\n        newFrag.setStart((newFrag.startPTS = oldFrag.startPTS!));\n        newFrag.startDTS = oldFrag.startDTS;\n        newFrag.maxStartPTS = oldFrag.maxStartPTS;\n\n        newFrag.endPTS = oldFrag.endPTS;\n        newFrag.endDTS = oldFrag.endDTS;\n        newFrag.minEndPTS = oldFrag.minEndPTS;\n        newFrag.setDuration(oldFrag.endPTS! - oldFrag.startPTS!);\n\n        if (newFrag.duration) {\n          PTSFrag = newFrag;\n        }\n\n        // PTS is known when any segment has startPTS and endPTS\n        newDetails.PTSKnown = newDetails.alignedSliding = true;\n      }\n\n      if (oldFrag.hasStreams) {\n        newFrag.elementaryStreams = oldFrag.elementaryStreams;\n      }\n\n      newFrag.loader = oldFrag.loader;\n\n      if (oldFrag.hasStats) {\n        newFrag.stats = oldFrag.stats;\n      }\n\n      if (oldFrag.initSegment) {\n        newFrag.initSegment = oldFrag.initSegment;\n        currentInitSegment = oldFrag.initSegment;\n      }\n    },\n  );\n\n  const newFragments = newDetails.fragments;\n  const fragmentsToCheck = newDetails.fragmentHint\n    ? newFragments.concat(newDetails.fragmentHint)\n    : newFragments;\n  if (currentInitSegment) {\n    fragmentsToCheck.forEach((frag) => {\n      if (\n        (frag as any) &&\n        (!frag.initSegment ||\n          frag.initSegment.relurl === currentInitSegment?.relurl)\n      ) {\n        frag.initSegment = currentInitSegment;\n      }\n    });\n  }\n\n  if (newDetails.skippedSegments) {\n    newDetails.deltaUpdateFailed = newFragments.some((frag) => !frag as any);\n    if (newDetails.deltaUpdateFailed) {\n      logger.warn(\n        '[level-helper] Previous playlist missing segments skipped in delta playlist',\n      );\n      for (let i = newDetails.skippedSegments; i--; ) {\n        newFragments.shift();\n      }\n      newDetails.startSN = newFragments[0].sn;\n    } else {\n      if (newDetails.canSkipDateRanges) {\n        newDetails.dateRanges = mergeDateRanges(\n          oldDetails.dateRanges,\n          newDetails,\n          logger,\n        );\n      }\n      const programDateTimes = oldDetails.fragments.filter(\n        (frag) => frag.rawProgramDateTime,\n      );\n      if (oldDetails.hasProgramDateTime && !newDetails.hasProgramDateTime) {\n        for (let i = 1; i < fragmentsToCheck.length; i++) {\n          if (fragmentsToCheck[i].programDateTime === null) {\n            assignProgramDateTime(\n              fragmentsToCheck[i],\n              fragmentsToCheck[i - 1],\n              programDateTimes,\n            );\n          }\n        }\n      }\n      mapDateRanges(programDateTimes, newDetails);\n    }\n    newDetails.endCC = newFragments[newFragments.length - 1].cc;\n  }\n  if (!newDetails.startCC) {\n    const fragPriorToNewStart = getFragmentWithSN(\n      oldDetails,\n      newDetails.startSN - 1,\n    );\n    newDetails.startCC = fragPriorToNewStart?.cc ?? newFragments[0].cc;\n  }\n\n  // Merge parts\n  mapPartIntersection(\n    oldDetails.partList,\n    newDetails.partList,\n    (oldPart: Part, newPart: Part) => {\n      newPart.elementaryStreams = oldPart.elementaryStreams;\n      newPart.stats = oldPart.stats;\n    },\n  );\n\n  // if at least one fragment contains PTS info, recompute PTS information for all fragments\n  if (PTSFrag) {\n    updateFragPTSDTS(\n      newDetails,\n      PTSFrag,\n      PTSFrag.startPTS as number,\n      PTSFrag.endPTS as number,\n      PTSFrag.startDTS as number,\n      PTSFrag.endDTS as number,\n      logger,\n    );\n  } else {\n    // ensure that delta is within oldFragments range\n    // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n    // in that case we also need to adjust start offset of all fragments\n    adjustSliding(oldDetails, newDetails);\n  }\n\n  if (newFragments.length) {\n    newDetails.totalduration = newDetails.edge - newFragments[0].start;\n  }\n\n  newDetails.driftStartTime = oldDetails.driftStartTime;\n  newDetails.driftStart = oldDetails.driftStart;\n  const advancedDateTime = newDetails.advancedDateTime;\n  if (newDetails.advanced && advancedDateTime) {\n    const edge = newDetails.edge;\n    if (!newDetails.driftStart) {\n      newDetails.driftStartTime = advancedDateTime;\n      newDetails.driftStart = edge;\n    }\n    newDetails.driftEndTime = advancedDateTime;\n    newDetails.driftEnd = edge;\n  } else {\n    newDetails.driftEndTime = oldDetails.driftEndTime;\n    newDetails.driftEnd = oldDetails.driftEnd;\n    newDetails.advancedDateTime = oldDetails.advancedDateTime;\n  }\n  if (newDetails.requestScheduled === -1) {\n    newDetails.requestScheduled = oldDetails.requestScheduled;\n  }\n}\n\nfunction mergeDateRanges(\n  oldDateRanges: Record<string, DateRange | undefined>,\n  newDetails: LevelDetails,\n  logger: ILogger,\n): Record<string, DateRange | undefined> {\n  const { dateRanges: deltaDateRanges, recentlyRemovedDateranges } = newDetails;\n  const dateRanges = Object.assign({}, oldDateRanges);\n  if (recentlyRemovedDateranges) {\n    recentlyRemovedDateranges.forEach((id) => {\n      delete dateRanges[id];\n    });\n  }\n  const mergeIds = Object.keys(dateRanges);\n  const mergeCount = mergeIds.length;\n  if (!mergeCount) {\n    return deltaDateRanges;\n  }\n  Object.keys(deltaDateRanges).forEach((id) => {\n    const mergedDateRange = dateRanges[id];\n    const dateRange = new DateRange(deltaDateRanges[id]!.attr, mergedDateRange);\n    if (dateRange.isValid) {\n      dateRanges[id] = dateRange;\n      if (!mergedDateRange) {\n        dateRange.tagOrder += mergeCount;\n      }\n    } else {\n      logger.warn(\n        `Ignoring invalid Playlist Delta Update DATERANGE tag: \"${stringify(\n          deltaDateRanges[id]!.attr,\n        )}\"`,\n      );\n    }\n  });\n  return dateRanges;\n}\n\nexport function mapPartIntersection(\n  oldParts: Part[] | null,\n  newParts: Part[] | null,\n  intersectionFn: PartIntersection,\n) {\n  if (oldParts && newParts) {\n    let delta = 0;\n    for (let i = 0, len = oldParts.length; i <= len; i++) {\n      const oldPart = oldParts[i];\n      const newPart = newParts[i + delta];\n      if (\n        (oldPart as any) &&\n        (newPart as any) &&\n        oldPart.index === newPart.index &&\n        oldPart.fragment.sn === newPart.fragment.sn\n      ) {\n        intersectionFn(oldPart, newPart);\n      } else {\n        delta--;\n      }\n    }\n  }\n}\n\nexport function mapFragmentIntersection(\n  oldDetails: LevelDetails,\n  newDetails: LevelDetails,\n  intersectionFn: FragmentIntersection,\n) {\n  const skippedSegments = newDetails.skippedSegments;\n  const start =\n    Math.max(oldDetails.startSN, newDetails.startSN) - newDetails.startSN;\n  const end =\n    (oldDetails.fragmentHint ? 1 : 0) +\n    (skippedSegments\n      ? newDetails.endSN\n      : Math.min(oldDetails.endSN, newDetails.endSN)) -\n    newDetails.startSN;\n  const delta = newDetails.startSN - oldDetails.startSN;\n  const newFrags = newDetails.fragmentHint\n    ? newDetails.fragments.concat(newDetails.fragmentHint)\n    : newDetails.fragments;\n  const oldFrags = oldDetails.fragmentHint\n    ? oldDetails.fragments.concat(oldDetails.fragmentHint)\n    : oldDetails.fragments;\n\n  for (let i = start; i <= end; i++) {\n    const oldFrag = oldFrags[delta + i];\n    let newFrag = newFrags[i];\n    if (skippedSegments && (!newFrag as any) && (oldFrag as any)) {\n      // Fill in skipped segments in delta playlist\n      newFrag = newDetails.fragments[i] = oldFrag;\n    }\n    if ((oldFrag as any) && (newFrag as any)) {\n      intersectionFn(oldFrag, newFrag, i, newFrags);\n      const uriBefore = oldFrag.relurl;\n      const uriAfter = newFrag.relurl;\n      if (uriBefore && notEqualAfterStrippingQueries(uriBefore, uriAfter)) {\n        newDetails.playlistParsingError = getSequenceError(\n          `media sequence mismatch ${newFrag.sn}:`,\n          oldDetails,\n          newDetails,\n          oldFrag,\n          newFrag,\n        );\n        return;\n      } else if (oldFrag.cc !== newFrag.cc) {\n        newDetails.playlistParsingError = getSequenceError(\n          `discontinuity sequence mismatch (${oldFrag.cc}!=${newFrag.cc})`,\n          oldDetails,\n          newDetails,\n          oldFrag,\n          newFrag,\n        );\n        return;\n      }\n    }\n  }\n}\n\nfunction getSequenceError(\n  message: string,\n  oldDetails: LevelDetails,\n  newDetails: LevelDetails,\n  oldFrag: MediaFragment,\n  newFrag: MediaFragment,\n): Error {\n  return new Error(\n    `${message} ${newFrag.url}\nPlaylist starting @${oldDetails.startSN}\n${oldDetails.m3u8}\n\nPlaylist starting @${newDetails.startSN}\n${newDetails.m3u8}`,\n  );\n}\n\nexport function adjustSliding(\n  oldDetails: LevelDetails,\n  newDetails: LevelDetails,\n  matchingStableVariantOrRendition: boolean = true,\n): void {\n  const delta =\n    newDetails.startSN + newDetails.skippedSegments - oldDetails.startSN;\n  const oldFragments = oldDetails.fragments;\n  const advancedOrStable = delta >= 0;\n  let sliding = 0;\n  if (advancedOrStable && delta < oldFragments.length) {\n    sliding = oldFragments[delta].start;\n  } else if (advancedOrStable && newDetails.startSN === oldDetails.endSN + 1) {\n    sliding = oldDetails.fragmentEnd;\n  } else if (advancedOrStable && matchingStableVariantOrRendition) {\n    // align with expected position (updated playlist start sequence is past end sequence of last update)\n    sliding = oldDetails.fragmentStart + delta * newDetails.levelTargetDuration;\n  } else if (!newDetails.skippedSegments && newDetails.fragmentStart === 0) {\n    // align new start with old (playlist switch has a sequence with no overlap and should not be used for alignment)\n    sliding = oldDetails.fragmentStart;\n  } else {\n    // new details already has a sliding offset or has skipped segments\n    return;\n  }\n  addSliding(newDetails, sliding);\n}\n\nexport function addSliding(details: LevelDetails, sliding: number) {\n  if (sliding) {\n    const fragments = details.fragments;\n    for (let i = details.skippedSegments; i < fragments.length; i++) {\n      fragments[i].addStart(sliding);\n    }\n    if (details.fragmentHint) {\n      details.fragmentHint.addStart(sliding);\n    }\n  }\n}\n\nexport function computeReloadInterval(\n  newDetails: LevelDetails,\n  distanceToLiveEdgeMs: number = Infinity,\n): number {\n  let reloadInterval = 1000 * newDetails.targetduration;\n\n  if (newDetails.updated) {\n    // Use last segment duration when shorter than target duration and near live edge\n    const fragments = newDetails.fragments;\n    const liveEdgeMaxTargetDurations = 4;\n    if (\n      fragments.length &&\n      reloadInterval * liveEdgeMaxTargetDurations > distanceToLiveEdgeMs\n    ) {\n      const lastSegmentDuration =\n        fragments[fragments.length - 1].duration * 1000;\n      if (lastSegmentDuration < reloadInterval) {\n        reloadInterval = lastSegmentDuration;\n      }\n    }\n  } else {\n    // estimate = 'miss half average';\n    // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n    // changed then it MUST wait for a period of one-half the target\n    // duration before retrying.\n    reloadInterval /= 2;\n  }\n\n  return Math.round(reloadInterval);\n}\n\nexport function getFragmentWithSN(\n  details: LevelDetails | undefined,\n  sn: number,\n  fragCurrent?: Fragment | null,\n): MediaFragment | null {\n  if (!details) {\n    return null;\n  }\n  let fragment = details.fragments[sn - details.startSN] as\n    | MediaFragment\n    | undefined;\n  if (fragment) {\n    return fragment;\n  }\n  fragment = details.fragmentHint;\n  if (fragment && fragment.sn === sn) {\n    return fragment;\n  }\n  if (sn < details.startSN && fragCurrent && fragCurrent.sn === sn) {\n    return fragCurrent as MediaFragment;\n  }\n  return null;\n}\n\nexport function getPartWith(\n  details: LevelDetails | undefined,\n  sn: number,\n  partIndex: number,\n): Part | null {\n  if (!details) {\n    return null;\n  }\n  return findPart(details.partList, sn, partIndex);\n}\n\nexport function findPart(\n  partList: Part[] | null | undefined,\n  sn: number,\n  partIndex: number,\n): Part | null {\n  if (partList) {\n    for (let i = partList.length; i--; ) {\n      const part = partList[i];\n      if (part.index === partIndex && part.fragment.sn === sn) {\n        return part;\n      }\n    }\n  }\n  return null;\n}\n\nexport function reassignFragmentLevelIndexes(levels: Level[]) {\n  levels.forEach((level, index) => {\n    level.details?.fragments.forEach((fragment) => {\n      fragment.level = index;\n      if (fragment.initSegment) {\n        fragment.initSegment.level = index;\n      }\n    });\n  });\n}\n\nfunction notEqualAfterStrippingQueries(\n  uriBefore: string,\n  uriAfter: string | undefined,\n): boolean {\n  if (uriBefore !== uriAfter && uriAfter) {\n    return stripQuery(uriBefore) !== stripQuery(uriAfter);\n  }\n  return false;\n}\n\nfunction stripQuery(uri: string): string {\n  return uri.replace(/\\?[^?]*$/, '');\n}\n","import { adjustSliding } from './level-helper';\nimport { logger } from './logger';\nimport type { Fragment } from '../loader/fragment';\nimport type { LevelDetails } from '../loader/level-details';\n\nexport function findFirstFragWithCC(\n  fragments: Fragment[],\n  cc: number,\n): Fragment | null {\n  for (let i = 0, len = fragments.length; i < len; i++) {\n    if (fragments[i]?.cc === cc) {\n      return fragments[i];\n    }\n  }\n  return null;\n}\n\nexport function shouldAlignOnDiscontinuities(\n  refDetails: LevelDetails | undefined,\n  details: LevelDetails,\n): refDetails is LevelDetails & boolean {\n  if (refDetails) {\n    if (\n      details.startCC < refDetails.endCC &&\n      details.endCC > refDetails.startCC\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction adjustFragmentStart(frag: Fragment, sliding: number) {\n  const start = frag.start + sliding;\n  frag.startPTS = start;\n  frag.setStart(start);\n  frag.endPTS = start + frag.duration;\n}\n\nexport function adjustSlidingStart(sliding: number, details: LevelDetails) {\n  // Update segments\n  const fragments = details.fragments;\n  for (let i = 0, len = fragments.length; i < len; i++) {\n    adjustFragmentStart(fragments[i], sliding);\n  }\n  // Update LL-HLS parts at the end of the playlist\n  if (details.fragmentHint) {\n    adjustFragmentStart(details.fragmentHint, sliding);\n  }\n  details.alignedSliding = true;\n}\n\n/**\n * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a\n * contiguous stream with the last fragments.\n * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to\n * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time\n * and an extra download.\n * @param lastLevel\n * @param details\n */\nexport function alignStream(\n  switchDetails: LevelDetails | undefined,\n  details: LevelDetails,\n) {\n  if (!switchDetails) {\n    return;\n  }\n  alignDiscontinuities(details, switchDetails);\n  if (!details.alignedSliding) {\n    // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.\n    // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same\n    // discontinuity sequence.\n    alignMediaPlaylistByPDT(details, switchDetails);\n  }\n  if (!details.alignedSliding && !details.skippedSegments) {\n    // Try to align on sn so that we pick a better start fragment.\n    // Do not perform this on playlists with delta updates as this is only to align levels on switch\n    // and adjustSliding only adjusts fragments after skippedSegments.\n    adjustSliding(switchDetails, details, false);\n  }\n}\n\n/**\n * Ajust the start of fragments in `details` by the difference in time between fragments of the latest\n * shared discontinuity sequence change.\n * @param lastLevel - The details of the last loaded level\n * @param details - The details of the new level\n */\nexport function alignDiscontinuities(\n  details: LevelDetails,\n  refDetails: LevelDetails | undefined,\n) {\n  if (!shouldAlignOnDiscontinuities(refDetails, details)) {\n    return;\n  }\n  const targetCC = Math.min(refDetails.endCC, details.endCC);\n  const refFrag = findFirstFragWithCC(refDetails.fragments, targetCC);\n  const frag = findFirstFragWithCC(details.fragments, targetCC);\n  if (!refFrag || !frag) {\n    return;\n  }\n  logger.log(`Aligning playlist at start of dicontinuity sequence ${targetCC}`);\n  const delta = refFrag.start - frag.start;\n  adjustSlidingStart(delta, details);\n}\n\n/**\n * Ensures appropriate time-alignment between renditions based on PDT.\n * This function assumes the timelines represented in `refDetails` are accurate, including the PDTs\n * for the last discontinuity sequence number shared by both playlists when present,\n * and uses the \"wallclock\"/PDT timeline as a cross-reference to `details`, adjusting the presentation\n * times/timelines of `details` accordingly.\n * Given the asynchronous nature of fetches and initial loads of live `main` and audio/subtitle tracks,\n * the primary purpose of this function is to ensure the \"local timelines\" of audio/subtitle tracks\n * are aligned to the main/video timeline, using PDT as the cross-reference/\"anchor\" that should\n * be consistent across playlists, per the HLS spec.\n * @param details - The details of the rendition you'd like to time-align (e.g. an audio rendition).\n * @param refDetails - The details of the reference rendition with start and PDT times for alignment.\n */\nexport function alignMediaPlaylistByPDT(\n  details: LevelDetails,\n  refDetails: LevelDetails,\n) {\n  if (!details.hasProgramDateTime || !refDetails.hasProgramDateTime) {\n    return;\n  }\n\n  const fragments = details.fragments;\n  const refFragments = refDetails.fragments;\n  if (!fragments.length || !refFragments.length) {\n    return;\n  }\n\n  // Calculate a delta to apply to all fragments according to the delta in PDT times and start times\n  // of a fragment in the reference details, and a fragment in the target details of the same discontinuity.\n  // If a fragment of the same discontinuity was not found use the middle fragment of both.\n  let refFrag: Fragment | null | undefined;\n  let frag: Fragment | null | undefined;\n  const targetCC = Math.min(refDetails.endCC, details.endCC);\n  if (refDetails.startCC < targetCC && details.startCC < targetCC) {\n    refFrag = findFirstFragWithCC(refFragments, targetCC);\n    frag = findFirstFragWithCC(fragments, targetCC);\n  }\n  if (!refFrag || !frag) {\n    refFrag = refFragments[Math.floor(refFragments.length / 2)];\n    frag =\n      findFirstFragWithCC(fragments, refFrag.cc) ||\n      fragments[Math.floor(fragments.length / 2)];\n  }\n  const refPDT = refFrag.programDateTime;\n  const targetPDT = frag.programDateTime;\n  if (!refPDT || !targetPDT) {\n    return;\n  }\n\n  const delta = (targetPDT - refPDT) / 1000 - (frag.start - refFrag.start);\n  adjustSlidingStart(delta, details);\n}\n","export function addEventListener(\n  el: EventTarget,\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n) {\n  removeEventListener(el, type, listener);\n  el.addEventListener(type, listener);\n}\n\nexport function removeEventListener(\n  el: EventTarget,\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n) {\n  el.removeEventListener(type, listener);\n}\n","/**\n *  TimeRanges to string helper\n */\n\nconst TimeRanges = {\n  toString: function (r: TimeRanges) {\n    let log = '';\n    const len = r.length;\n    for (let i = 0; i < len; i++) {\n      log += `[${r.start(i).toFixed(3)}-${r.end(i).toFixed(3)}]`;\n    }\n\n    return log;\n  },\n};\n\nexport default TimeRanges;\n","import { ErrorActionFlags, NetworkErrorAction } from './error-controller';\nimport {\n  findFragmentByPDT,\n  findFragmentByPTS,\n  findNearestWithCC,\n} from './fragment-finders';\nimport { FragmentState } from './fragment-tracker';\nimport Decrypter from '../crypt/decrypter';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport {\n  type Fragment,\n  isMediaFragment,\n  type MediaFragment,\n  type Part,\n} from '../loader/fragment';\nimport FragmentLoader from '../loader/fragment-loader';\nimport TaskLoop from '../task-loop';\nimport { PlaylistLevelType } from '../types/loader';\nimport { ChunkMetadata } from '../types/transmuxer';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport { alignStream } from '../utils/discontinuities';\nimport {\n  getAesModeFromFullSegmentMethod,\n  isFullSegmentEncryption,\n} from '../utils/encryption-methods-util';\nimport {\n  getRetryDelay,\n  isUnusableKeyError,\n  offlineHttpStatus,\n} from '../utils/error-helper';\nimport {\n  addEventListener,\n  removeEventListener,\n} from '../utils/event-listener-helper';\nimport {\n  findPart,\n  getFragmentWithSN,\n  getPartWith,\n  updateFragPTSDTS,\n} from '../utils/level-helper';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport TimeRanges from '../utils/time-ranges';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type { HlsConfig } from '../config';\nimport type TransmuxerInterface from '../demux/transmuxer-interface';\nimport type Hls from '../hls';\nimport type {\n  FragmentLoadProgressCallback,\n  LoadError,\n} from '../loader/fragment-loader';\nimport type KeyLoader from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { SourceBufferName } from '../types/buffer';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  BufferAppendingData,\n  BufferFlushingData,\n  ErrorData,\n  FragLoadedData,\n  KeyLoadedData,\n  ManifestLoadedData,\n  MediaAttachedData,\n  MediaDetachingData,\n  PartsLoadedData,\n} from '../types/events';\nimport type { Level } from '../types/level';\nimport type { InitSegmentData, RemuxedTrack } from '../types/remuxer';\nimport type { Bufferable, BufferInfo } from '../utils/buffer-helper';\nimport type { TimestampOffset } from '../utils/timescale-conversion';\n\ntype ResolveFragLoaded = (FragLoadedEndData) => void;\ntype RejectFragLoaded = (LoadError) => void;\n\nexport const State = {\n  STOPPED: 'STOPPED',\n  IDLE: 'IDLE',\n  KEY_LOADING: 'KEY_LOADING',\n  FRAG_LOADING: 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_TRACK: 'WAITING_TRACK',\n  PARSING: 'PARSING',\n  PARSED: 'PARSED',\n  ENDED: 'ENDED',\n  ERROR: 'ERROR',\n  WAITING_INIT_PTS: 'WAITING_INIT_PTS',\n  WAITING_LEVEL: 'WAITING_LEVEL',\n};\n\nexport type InFlightData = {\n  frag: Fragment | null;\n  state: (typeof State)[keyof typeof State];\n};\n\nexport default class BaseStreamController\n  extends TaskLoop\n  implements NetworkComponentAPI\n{\n  protected hls: Hls;\n\n  protected fragPrevious: MediaFragment | null = null;\n  protected fragCurrent: Fragment | null = null;\n  protected fragmentTracker: FragmentTracker;\n  protected transmuxer: TransmuxerInterface | null = null;\n  protected _state: (typeof State)[keyof typeof State] = State.STOPPED;\n  protected playlistType: PlaylistLevelType;\n  protected media: HTMLMediaElement | null = null;\n  protected mediaBuffer: Bufferable | null = null;\n  protected config: HlsConfig;\n  protected bitrateTest: boolean = false;\n  protected lastCurrentTime: number = 0;\n  protected nextLoadPosition: number = 0;\n  protected startPosition: number = 0;\n  protected startTimeOffset: number | null = null;\n  protected retryDate: number = 0;\n  protected levels: Array<Level> | null = null;\n  protected fragmentLoader: FragmentLoader;\n  protected keyLoader: KeyLoader;\n  protected levelLastLoaded: Level | null = null;\n  protected startFragRequested: boolean = false;\n  protected decrypter: Decrypter;\n  protected initPTS: TimestampOffset[] = [];\n  protected buffering: boolean = true;\n  protected loadingParts: boolean = false;\n  private loopSn?: string | number;\n\n  constructor(\n    hls: Hls,\n    fragmentTracker: FragmentTracker,\n    keyLoader: KeyLoader,\n    logPrefix: string,\n    playlistType: PlaylistLevelType,\n  ) {\n    super(logPrefix, hls.logger);\n    this.playlistType = playlistType;\n    this.hls = hls;\n    this.fragmentLoader = new FragmentLoader(hls.config);\n    this.keyLoader = keyLoader;\n    this.fragmentTracker = fragmentTracker;\n    this.config = hls.config;\n    this.decrypter = new Decrypter(hls.config);\n  }\n\n  protected registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  protected unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  protected doTick() {\n    this.onTickEnd();\n  }\n\n  protected onTickEnd() {}\n\n  public startLoad(startPosition: number): void {}\n\n  public stopLoad() {\n    if (this.state === State.STOPPED) {\n      return;\n    }\n    this.fragmentLoader.abort();\n    this.keyLoader.abort(this.playlistType);\n    const frag = this.fragCurrent;\n    if (frag?.loader) {\n      frag.abortRequests();\n      this.fragmentTracker.removeFragment(frag);\n    }\n    this.resetTransmuxer();\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    this.clearInterval();\n    this.clearNextTick();\n    this.state = State.STOPPED;\n  }\n\n  public get startPositionValue(): number {\n    const { nextLoadPosition, startPosition } = this;\n    if (startPosition === -1 && nextLoadPosition) {\n      return nextLoadPosition;\n    }\n    return startPosition;\n  }\n\n  public get bufferingEnabled(): boolean {\n    return this.buffering;\n  }\n\n  public pauseBuffering() {\n    this.buffering = false;\n  }\n\n  public resumeBuffering() {\n    this.buffering = true;\n  }\n\n  public get inFlightFrag(): InFlightData {\n    return { frag: this.fragCurrent, state: this.state };\n  }\n\n  protected _streamEnded(\n    bufferInfo: BufferInfo,\n    levelDetails: LevelDetails,\n  ): boolean {\n    // Stream is never \"ended\" when playlist is live or media is detached\n    if (levelDetails.live || !this.media) {\n      return false;\n    }\n    // Stream is not \"ended\" when nothing is buffered past the start\n    const bufferEnd = bufferInfo.end || 0;\n    const timelineStart = this.config.timelineOffset || 0;\n    if (bufferEnd <= timelineStart) {\n      return false;\n    }\n    // Stream is not \"ended\" when there is a second buffered range starting before the end of the playlist\n    const bufferedRanges = bufferInfo.buffered;\n    if (\n      this.config.maxBufferHole &&\n      bufferedRanges &&\n      bufferedRanges.length > 1\n    ) {\n      // make sure bufferInfo accounts for any gaps\n      bufferInfo = BufferHelper.bufferedInfo(\n        bufferedRanges,\n        bufferInfo.start,\n        0,\n      );\n    }\n    const nextStart = bufferInfo.nextStart;\n    const hasSecondBufferedRange =\n      nextStart && nextStart > timelineStart && nextStart < levelDetails.edge;\n    if (hasSecondBufferedRange) {\n      return false;\n    }\n    // Playhead is in unbuffered region. Marking EoS now could result in Safari failing to dispatch \"ended\" event following seek on start.\n    if (this.media.currentTime < bufferInfo.start) {\n      return false;\n    }\n    const partList = levelDetails.partList;\n    // Since the last part isn't guaranteed to correspond to the last playlist segment for Low-Latency HLS,\n    // check instead if the last part is buffered.\n    if (partList?.length) {\n      const lastPart = partList[partList.length - 1];\n\n      // Checking the midpoint of the part for potential margin of error and related issues.\n      // NOTE: Technically I believe parts could yield content that is < the computed duration (including potential a duration of 0)\n      // and still be spec-compliant, so there may still be edge cases here. Likewise, there could be issues in end of stream\n      // part mismatches for independent audio and video playlists/segments.\n      const lastPartBuffered = BufferHelper.isBuffered(\n        this.media,\n        lastPart.start + lastPart.duration / 2,\n      );\n      return lastPartBuffered;\n    }\n\n    const playlistType =\n      levelDetails.fragments[levelDetails.fragments.length - 1].type;\n    return this.fragmentTracker.isEndListAppended(playlistType);\n  }\n\n  public getLevelDetails(): LevelDetails | undefined {\n    if (this.levels && this.levelLastLoaded !== null) {\n      return this.levelLastLoaded.details;\n    }\n  }\n\n  protected get timelineOffset(): number {\n    const configuredTimelineOffset = this.config.timelineOffset;\n    if (configuredTimelineOffset) {\n      return (\n        this.getLevelDetails()?.appliedTimelineOffset ||\n        configuredTimelineOffset\n      );\n    }\n    return 0;\n  }\n\n  protected onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    const media = (this.media = this.mediaBuffer = data.media);\n    addEventListener(media, 'seeking', this.onMediaSeeking);\n    addEventListener(media, 'ended', this.onMediaEnded);\n    const config = this.config;\n    if (this.levels && config.autoStartLoad && this.state === State.STOPPED) {\n      this.startLoad(config.startPosition);\n    }\n  }\n\n  protected onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const transferringMedia = !!data.transferMedia;\n    const media = this.media;\n    if (media === null) {\n      return;\n    }\n    if (media.ended) {\n      this.log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    }\n\n    // remove video listeners\n    removeEventListener(media, 'seeking', this.onMediaSeeking);\n    removeEventListener(media, 'ended', this.onMediaEnded);\n\n    if (this.keyLoader && !transferringMedia) {\n      this.keyLoader.detach();\n    }\n    this.media = this.mediaBuffer = null;\n    this.loopSn = undefined;\n    if (transferringMedia) {\n      this.resetLoadingState();\n      this.resetTransmuxer();\n      return;\n    }\n    this.loadingParts = false;\n    this.fragmentTracker.removeAllFragments();\n    this.stopLoad();\n  }\n\n  protected onManifestLoading() {\n    this.initPTS = [];\n    this.levels = this.levelLastLoaded = this.fragCurrent = null;\n    this.lastCurrentTime = this.startPosition = 0;\n    this.startFragRequested = false;\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData) {}\n\n  protected onMediaSeeking = () => {\n    const { config, fragCurrent, media, mediaBuffer, state } = this;\n    const currentTime: number = media ? media.currentTime : 0;\n    const bufferInfo = BufferHelper.bufferInfo(\n      mediaBuffer ? mediaBuffer : media,\n      currentTime,\n      config.maxBufferHole,\n    );\n    const noFowardBuffer = !bufferInfo.len;\n\n    this.log(\n      `Media seeking to ${\n        Number.isFinite(currentTime) ? currentTime.toFixed(3) : currentTime\n      }, state: ${state}, ${noFowardBuffer ? 'out of' : 'in'} buffer`,\n    );\n\n    if (this.state === State.ENDED) {\n      this.resetLoadingState();\n    } else if (fragCurrent) {\n      // Seeking while frag load is in progress\n      const tolerance = config.maxFragLookUpTolerance;\n      const fragStartOffset = fragCurrent.start - tolerance;\n      const fragEndOffset =\n        fragCurrent.start + fragCurrent.duration + tolerance;\n      // if seeking out of buffered range or into new one\n      if (\n        noFowardBuffer ||\n        fragEndOffset < bufferInfo.start ||\n        fragStartOffset > bufferInfo.end\n      ) {\n        const pastFragment = currentTime > fragEndOffset;\n        // if the seek position is outside the current fragment range\n        if (currentTime < fragStartOffset || pastFragment) {\n          if (pastFragment && fragCurrent.loader) {\n            this.log(\n              `Cancelling fragment load for seek (sn: ${fragCurrent.sn})`,\n            );\n            fragCurrent.abortRequests();\n            this.resetLoadingState();\n          }\n          this.fragPrevious = null;\n        }\n      }\n    }\n\n    if (media) {\n      // Remove gap fragments\n      this.fragmentTracker.removeFragmentsInRange(\n        currentTime,\n        Infinity,\n        this.playlistType,\n        true,\n      );\n\n      // Don't set lastCurrentTime with backward seeks (allows for frag selection with strict tolerances)\n      const lastCurrentTime = this.lastCurrentTime;\n      if (currentTime > lastCurrentTime) {\n        this.lastCurrentTime = currentTime;\n      }\n\n      if (!this.loadingParts) {\n        const bufferEnd = Math.max(bufferInfo.end, currentTime);\n        const shouldLoadParts = this.shouldLoadParts(\n          this.getLevelDetails(),\n          bufferEnd,\n        );\n        if (shouldLoadParts) {\n          this.log(\n            `LL-Part loading ON after seeking to ${currentTime.toFixed(\n              2,\n            )} with buffer @${bufferEnd.toFixed(2)}`,\n          );\n          this.loadingParts = shouldLoadParts;\n        }\n      }\n    }\n\n    // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n    if (!this.hls.hasEnoughToStart) {\n      this.log(\n        `Setting ${noFowardBuffer ? 'startPosition' : 'nextLoadPosition'} to ${currentTime} for seek without enough to start`,\n      );\n      this.nextLoadPosition = currentTime;\n      if (noFowardBuffer) {\n        this.startPosition = currentTime;\n      }\n    }\n\n    if (noFowardBuffer && this.state === State.IDLE) {\n      // Async tick to speed up processing\n      this.tickImmediate();\n    }\n  };\n\n  protected onMediaEnded = () => {\n    // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n    this.log(`setting startPosition to 0 because media ended`);\n    this.startPosition = this.lastCurrentTime = 0;\n  };\n\n  protected onManifestLoaded(\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ): void {\n    this.startTimeOffset = data.startTimeOffset;\n  }\n\n  protected onHandlerDestroying() {\n    this.stopLoad();\n    if (this.transmuxer) {\n      this.transmuxer.destroy();\n      this.transmuxer = null;\n    }\n    super.onHandlerDestroying();\n    // @ts-ignore\n    this.hls = this.onMediaSeeking = this.onMediaEnded = null;\n  }\n\n  protected onHandlerDestroyed() {\n    this.state = State.STOPPED;\n    if (this.fragmentLoader) {\n      this.fragmentLoader.destroy();\n    }\n    if (this.keyLoader) {\n      this.keyLoader.destroy();\n    }\n    if (this.decrypter) {\n      this.decrypter.destroy();\n    }\n\n    this.hls =\n      this.log =\n      this.warn =\n      this.decrypter =\n      this.keyLoader =\n      this.fragmentLoader =\n      this.fragmentTracker =\n        null as any;\n    super.onHandlerDestroyed();\n  }\n\n  protected loadFragment(\n    frag: MediaFragment,\n    level: Level,\n    targetBufferTime: number,\n  ) {\n    this.startFragRequested = true;\n    this._loadFragForPlayback(frag, level, targetBufferTime);\n  }\n\n  private _loadFragForPlayback(\n    fragment: MediaFragment,\n    level: Level,\n    targetBufferTime: number,\n  ) {\n    const progressCallback: FragmentLoadProgressCallback = (\n      data: FragLoadedData,\n    ) => {\n      const frag = data.frag;\n      if (this.fragContextChanged(frag)) {\n        this.warn(\n          `${frag.type} sn: ${frag.sn}${\n            data.part ? ' part: ' + data.part.index : ''\n          } of ${this.fragInfo(frag, false, data.part)}) was dropped during download.`,\n        );\n        this.fragmentTracker.removeFragment(frag);\n        return;\n      }\n      frag.stats.chunkCount++;\n      this._handleFragmentLoadProgress(data);\n    };\n\n    this._doFragLoad(fragment, level, targetBufferTime, progressCallback)\n      .then((data) => {\n        if (!data) {\n          // if we're here we probably needed to backtrack or are waiting for more parts\n          return;\n        }\n        const state = this.state;\n        const frag = data.frag;\n        if (this.fragContextChanged(frag)) {\n          if (\n            state === State.FRAG_LOADING ||\n            (!this.fragCurrent && state === State.PARSING)\n          ) {\n            this.fragmentTracker.removeFragment(frag);\n            this.state = State.IDLE;\n          }\n          return;\n        }\n\n        if ('payload' in data) {\n          this.log(\n            `Loaded ${frag.type} sn: ${frag.sn} of ${this.playlistLabel()} ${frag.level}`,\n          );\n          this.hls.trigger(Events.FRAG_LOADED, data);\n        }\n\n        // Pass through the whole payload; controllers not implementing progressive loading receive data from this callback\n        this._handleFragmentLoadComplete(data);\n      })\n      .catch((reason) => {\n        if (this.state === State.STOPPED || this.state === State.ERROR) {\n          return;\n        }\n        this.warn(`Frag error: ${reason?.message || reason}`);\n        this.resetFragmentLoading(fragment);\n      });\n  }\n\n  protected clearTrackerIfNeeded(frag: Fragment) {\n    const { fragmentTracker } = this;\n    const fragState = fragmentTracker.getState(frag);\n    if (fragState === FragmentState.APPENDING) {\n      // Lower the max buffer length and try again\n      const playlistType = frag.type as PlaylistLevelType;\n      const bufferedInfo = this.getFwdBufferInfo(\n        this.mediaBuffer,\n        playlistType,\n      );\n      const minForwardBufferLength = Math.max(\n        frag.duration,\n        bufferedInfo ? bufferedInfo.len : this.config.maxBufferLength,\n      );\n      // If backtracking, always remove from the tracker without reducing max buffer length\n      const backtrackFragment = (this as any).backtrackFragment as\n        | Fragment\n        | undefined;\n      const backtracked = backtrackFragment\n        ? (frag.sn as number) - (backtrackFragment.sn as number)\n        : 0;\n      if (\n        backtracked === 1 ||\n        this.reduceMaxBufferLength(minForwardBufferLength, frag.duration)\n      ) {\n        fragmentTracker.removeFragment(frag);\n      }\n    } else if (this.mediaBuffer?.buffered.length === 0) {\n      // Stop gap for bad tracker / buffer flush behavior\n      fragmentTracker.removeAllFragments();\n    } else if (fragmentTracker.hasParts(frag.type)) {\n      // In low latency mode, remove fragments for which only some parts were buffered\n      fragmentTracker.detectPartialFragments({\n        frag,\n        part: null,\n        stats: frag.stats,\n        id: frag.type,\n      });\n      if (fragmentTracker.getState(frag) === FragmentState.PARTIAL) {\n        fragmentTracker.removeFragment(frag);\n      }\n    }\n  }\n\n  protected checkLiveUpdate(details: LevelDetails) {\n    if (details.updated && !details.live) {\n      // Live stream ended, update fragment tracker\n      const lastFragment = details.fragments[details.fragments.length - 1];\n      this.fragmentTracker.detectPartialFragments({\n        frag: lastFragment,\n        part: null,\n        stats: lastFragment.stats,\n        id: lastFragment.type,\n      });\n    }\n    if (!details.fragments[0]) {\n      details.deltaUpdateFailed = true;\n    }\n  }\n\n  protected waitForLive(levelInfo: Level) {\n    const details = levelInfo.details;\n    return (\n      details?.live &&\n      details.type !== 'EVENT' &&\n      (this.levelLastLoaded !== levelInfo || details.expired)\n    );\n  }\n\n  protected flushMainBuffer(\n    startOffset: number,\n    endOffset: number,\n    type: SourceBufferName | null = null,\n  ) {\n    if (!(startOffset - endOffset)) {\n      return;\n    }\n    // When alternate audio is playing, the audio-stream-controller is responsible for the audio buffer. Otherwise,\n    // passing a null type flushes both buffers\n    const flushScope: BufferFlushingData = { startOffset, endOffset, type };\n    this.hls.trigger(Events.BUFFER_FLUSHING, flushScope);\n  }\n\n  protected _loadInitSegment(fragment: Fragment, level: Level) {\n    this._doFragLoad(fragment, level)\n      .then((data) => {\n        const frag = data?.frag;\n        if (!frag || this.fragContextChanged(frag) || !this.levels) {\n          throw new Error('init load aborted');\n        }\n\n        return data;\n      })\n      .then((data: FragLoadedData) => {\n        const { hls } = this;\n        const { frag, payload } = data;\n        const decryptData = frag.decryptdata;\n\n        // check to see if the payload needs to be decrypted\n        if (\n          payload &&\n          payload.byteLength > 0 &&\n          decryptData?.key &&\n          decryptData.iv &&\n          isFullSegmentEncryption(decryptData.method)\n        ) {\n          const startTime = self.performance.now();\n          // decrypt init segment data\n          return this.decrypter\n            .decrypt(\n              new Uint8Array(payload),\n              decryptData.key.buffer,\n              decryptData.iv.buffer,\n              getAesModeFromFullSegmentMethod(decryptData.method),\n            )\n            .catch((err) => {\n              hls.trigger(Events.ERROR, {\n                type: ErrorTypes.MEDIA_ERROR,\n                details: ErrorDetails.FRAG_DECRYPT_ERROR,\n                fatal: false,\n                error: err,\n                reason: err.message,\n                frag,\n              });\n              throw err;\n            })\n            .then((decryptedData) => {\n              const endTime = self.performance.now();\n              hls.trigger(Events.FRAG_DECRYPTED, {\n                frag,\n                payload: decryptedData,\n                stats: {\n                  tstart: startTime,\n                  tdecrypt: endTime,\n                },\n              });\n              data.payload = decryptedData;\n              return this.completeInitSegmentLoad(data);\n            });\n        }\n        return this.completeInitSegmentLoad(data);\n      })\n      .catch((reason) => {\n        if (this.state === State.STOPPED || this.state === State.ERROR) {\n          return;\n        }\n        this.warn(reason);\n        this.resetFragmentLoading(fragment);\n      });\n  }\n\n  private completeInitSegmentLoad(data: FragLoadedData) {\n    const { levels } = this;\n    if (!levels) {\n      throw new Error('init load aborted, missing levels');\n    }\n    const stats = data.frag.stats;\n    if (this.state !== State.STOPPED) {\n      this.state = State.IDLE;\n    }\n    data.frag.data = new Uint8Array(data.payload);\n    stats.parsing.start = stats.buffering.start = self.performance.now();\n    stats.parsing.end = stats.buffering.end = self.performance.now();\n    this.tick();\n  }\n\n  protected unhandledEncryptionError(\n    initSegment: InitSegmentData,\n    frag: Fragment,\n  ): boolean {\n    const tracks = initSegment.tracks;\n    if (\n      tracks &&\n      !frag.encrypted &&\n      (tracks.audio?.encrypted || tracks.video?.encrypted) &&\n      (!this.config.emeEnabled || !this.keyLoader.emeController)\n    ) {\n      const media = this.media;\n      const error = new Error(\n        __USE_EME_DRM__\n          ? `Encrypted track with no key in ${this.fragInfo(frag)} (media ${media ? 'attached mediaKeys: ' + media.mediaKeys : 'detached'})`\n          : 'EME not supported (light build)',\n      );\n      this.warn(error.message);\n      // Ignore if media is detached or mediaKeys are set\n      if (!media || media.mediaKeys) {\n        return false;\n      }\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.KEY_SYSTEM_ERROR,\n        details: ErrorDetails.KEY_SYSTEM_NO_KEYS,\n        fatal: !__USE_EME_DRM__,\n        error,\n        frag,\n      });\n      this.resetTransmuxer();\n      return true;\n    }\n    return false;\n  }\n\n  protected fragContextChanged(frag: Fragment | null) {\n    const { fragCurrent } = this;\n    return (\n      !frag ||\n      !fragCurrent ||\n      frag.sn !== fragCurrent.sn ||\n      frag.level !== fragCurrent.level\n    );\n  }\n\n  protected fragBufferedComplete(frag: Fragment, part: Part | null) {\n    const media = this.mediaBuffer ? this.mediaBuffer : this.media;\n    this.log(\n      `Buffered ${frag.type} sn: ${frag.sn}${\n        part ? ' part: ' + part.index : ''\n      } of ${this.fragInfo(frag, false, part)} > buffer:${\n        media\n          ? TimeRanges.toString(BufferHelper.getBuffered(media))\n          : '(detached)'\n      })`,\n    );\n    if (isMediaFragment(frag)) {\n      if (frag.type !== PlaylistLevelType.SUBTITLE) {\n        const el = frag.elementaryStreams;\n        if (!Object.keys(el).some((type) => !!el[type])) {\n          // empty segment\n          this.state = State.IDLE;\n          return;\n        }\n      }\n      const level = this.levels?.[frag.level];\n      if (level?.fragmentError) {\n        this.log(\n          `Resetting level fragment error count of ${level.fragmentError} on frag buffered`,\n        );\n        level.fragmentError = 0;\n      }\n    }\n    this.state = State.IDLE;\n  }\n\n  protected _handleFragmentLoadComplete(fragLoadedEndData: PartsLoadedData) {\n    const { transmuxer } = this;\n    if (!transmuxer) {\n      return;\n    }\n    const { frag, part, partsLoaded } = fragLoadedEndData;\n    // If we did not load parts, or loaded all parts, we have complete (not partial) fragment data\n    const complete =\n      !partsLoaded ||\n      partsLoaded.length === 0 ||\n      partsLoaded.some((fragLoaded) => !fragLoaded);\n    const chunkMeta = new ChunkMetadata(\n      frag.level,\n      frag.sn as number,\n      frag.stats.chunkCount + 1,\n      0,\n      part ? part.index : -1,\n      !complete,\n    );\n    transmuxer.flush(chunkMeta);\n  }\n\n  protected _handleFragmentLoadProgress(\n    frag: PartsLoadedData | FragLoadedData,\n  ) {}\n\n  protected _doFragLoad(\n    frag: Fragment,\n    level: Level,\n    targetBufferTime: number | null = null,\n    progressCallback?: FragmentLoadProgressCallback,\n  ): Promise<PartsLoadedData | FragLoadedData | null> {\n    this.fragCurrent = frag;\n    const details = level.details;\n    if (!this.levels || !details) {\n      throw new Error(\n        `frag load aborted, missing level${details ? '' : ' detail'}s`,\n      );\n    }\n\n    let keyLoadingPromise: Promise<KeyLoadedData | void> | null = null;\n    if (frag.encrypted && !frag.decryptdata?.key) {\n      this.log(\n        `Loading key for ${frag.sn} of [${details.startSN}-${details.endSN}], ${this.playlistLabel()} ${frag.level}`,\n      );\n      this.state = State.KEY_LOADING;\n      this.fragCurrent = frag;\n      keyLoadingPromise = this.keyLoader.load(frag).then((keyLoadedData) => {\n        if (!this.fragContextChanged(keyLoadedData.frag)) {\n          this.hls.trigger(Events.KEY_LOADED, keyLoadedData);\n          if (this.state === State.KEY_LOADING) {\n            this.state = State.IDLE;\n          }\n          return keyLoadedData;\n        }\n      });\n      this.hls.trigger(Events.KEY_LOADING, { frag });\n      if ((this.fragCurrent as Fragment | null) === null) {\n        this.log(`context changed in KEY_LOADING`);\n        return Promise.resolve(null);\n      }\n    } else if (!frag.encrypted) {\n      keyLoadingPromise = this.keyLoader.loadClear(\n        frag,\n        details.encryptedFragments,\n        this.startFragRequested,\n      );\n      if (keyLoadingPromise) {\n        this.log(`[eme] blocking frag load until media-keys acquired`);\n      }\n    }\n\n    const fragPrevious = this.fragPrevious;\n    if (\n      isMediaFragment(frag) &&\n      (!fragPrevious || frag.sn !== fragPrevious.sn)\n    ) {\n      const shouldLoadParts = this.shouldLoadParts(level.details, frag.end);\n      if (shouldLoadParts !== this.loadingParts) {\n        this.log(\n          `LL-Part loading ${\n            shouldLoadParts ? 'ON' : 'OFF'\n          } loading sn ${fragPrevious?.sn}->${frag.sn}`,\n        );\n        this.loadingParts = shouldLoadParts;\n      }\n    }\n    targetBufferTime = Math.max(frag.start, targetBufferTime || 0);\n    if (this.loadingParts && isMediaFragment(frag)) {\n      const partList = details.partList;\n      if (partList && progressCallback) {\n        if (targetBufferTime > details.fragmentEnd && details.fragmentHint) {\n          frag = details.fragmentHint;\n        }\n        const partIndex = this.getNextPart(partList, frag, targetBufferTime);\n        if (partIndex > -1) {\n          const part = partList[partIndex];\n          frag = this.fragCurrent = part.fragment;\n          this.log(\n            `Loading ${frag.type} sn: ${frag.sn} part: ${part.index} (${partIndex}/${partList.length - 1}) of ${this.fragInfo(frag, false, part)}) cc: ${\n              frag.cc\n            } [${details.startSN}-${details.endSN}], target: ${parseFloat(\n              targetBufferTime.toFixed(3),\n            )}`,\n          );\n          this.nextLoadPosition = part.start + part.duration;\n          this.state = State.FRAG_LOADING;\n          let result: Promise<PartsLoadedData | FragLoadedData | null>;\n          if (keyLoadingPromise) {\n            result = keyLoadingPromise\n              .then((keyLoadedData) => {\n                if (\n                  !keyLoadedData ||\n                  this.fragContextChanged(keyLoadedData.frag)\n                ) {\n                  return null;\n                }\n                return this.doFragPartsLoad(\n                  frag,\n                  part,\n                  level,\n                  progressCallback,\n                );\n              })\n              .catch((error) => this.handleFragLoadError(error));\n          } else {\n            result = this.doFragPartsLoad(\n              frag,\n              part,\n              level,\n              progressCallback,\n            ).catch((error: LoadError) => this.handleFragLoadError(error));\n          }\n          this.hls.trigger(Events.FRAG_LOADING, {\n            frag,\n            part,\n            targetBufferTime,\n          });\n          if (this.fragCurrent === null) {\n            return Promise.reject(\n              new Error(\n                `frag load aborted, context changed in FRAG_LOADING parts`,\n              ),\n            );\n          }\n          return result;\n        } else if (\n          !frag.url ||\n          this.loadedEndOfParts(partList, targetBufferTime)\n        ) {\n          // Fragment hint has no parts\n          return Promise.resolve(null);\n        }\n      }\n    }\n\n    if (isMediaFragment(frag) && this.loadingParts) {\n      this.log(\n        `LL-Part loading OFF after next part miss @${targetBufferTime.toFixed(\n          2,\n        )} Check buffer at sn: ${frag.sn} loaded parts: ${details.partList?.filter((p) => p.loaded).map((p) => `[${p.start}-${p.end}]`)}`,\n      );\n      this.loadingParts = false;\n    } else if (!frag.url) {\n      // Selected fragment hint for part but not loading parts\n      return Promise.resolve(null);\n    }\n\n    this.log(\n      `Loading ${frag.type} sn: ${frag.sn} of ${this.fragInfo(frag, false)}) cc: ${frag.cc} ${\n        '[' + details.startSN + '-' + details.endSN + ']'\n      }, target: ${parseFloat(targetBufferTime.toFixed(3))}`,\n    );\n    // Don't update nextLoadPosition for fragments which are not buffered\n    if (Number.isFinite(frag.sn as number) && !this.bitrateTest) {\n      this.nextLoadPosition = frag.start + frag.duration;\n    }\n    this.state = State.FRAG_LOADING;\n\n    // Load key before streaming fragment data\n    const dataOnProgress = this.config.progressive;\n    let result: Promise<PartsLoadedData | FragLoadedData | null>;\n    if (dataOnProgress && keyLoadingPromise) {\n      result = keyLoadingPromise\n        .then((keyLoadedData) => {\n          if (!keyLoadedData || this.fragContextChanged(keyLoadedData.frag)) {\n            return null;\n          }\n          return this.fragmentLoader.load(frag, progressCallback);\n        })\n        .catch((error) => this.handleFragLoadError(error));\n    } else {\n      // load unencrypted fragment data with progress event,\n      // or handle fragment result after key and fragment are finished loading\n      result = Promise.all([\n        this.fragmentLoader.load(\n          frag,\n          dataOnProgress ? progressCallback : undefined,\n        ),\n        keyLoadingPromise,\n      ])\n        .then(([fragLoadedData]) => {\n          if (!dataOnProgress && progressCallback) {\n            progressCallback(fragLoadedData);\n          }\n          return fragLoadedData;\n        })\n        .catch((error) => this.handleFragLoadError(error));\n    }\n    this.hls.trigger(Events.FRAG_LOADING, { frag, targetBufferTime });\n    if (this.fragCurrent === null) {\n      return Promise.reject(\n        new Error(`frag load aborted, context changed in FRAG_LOADING`),\n      );\n    }\n    return result;\n  }\n\n  private doFragPartsLoad(\n    frag: Fragment,\n    fromPart: Part,\n    level: Level,\n    progressCallback: FragmentLoadProgressCallback,\n  ): Promise<PartsLoadedData | null> {\n    return new Promise(\n      (resolve: ResolveFragLoaded, reject: RejectFragLoaded) => {\n        const partsLoaded: FragLoadedData[] = [];\n        const initialPartList = level.details?.partList;\n        const loadPart = (part: Part) => {\n          this.fragmentLoader\n            .loadPart(frag, part, progressCallback)\n            .then((partLoadedData: FragLoadedData) => {\n              partsLoaded[part.index] = partLoadedData;\n              const loadedPart = partLoadedData.part as Part;\n              this.hls.trigger(Events.FRAG_LOADED, partLoadedData);\n              const nextPart =\n                getPartWith(level.details, frag.sn as number, part.index + 1) ||\n                findPart(initialPartList, frag.sn as number, part.index + 1);\n              if (nextPart) {\n                loadPart(nextPart);\n              } else {\n                return resolve({\n                  frag,\n                  part: loadedPart,\n                  partsLoaded,\n                });\n              }\n            })\n            .catch(reject);\n        };\n        loadPart(fromPart);\n      },\n    );\n  }\n\n  private handleFragLoadError(\n    error: LoadError | Error | (Error & { data: ErrorData }),\n  ) {\n    if ('data' in error) {\n      const data = error.data;\n      if (data.frag && data.details === ErrorDetails.INTERNAL_ABORTED) {\n        this.handleFragLoadAborted(data.frag, data.part);\n      } else if (data.frag && data.type === ErrorTypes.KEY_SYSTEM_ERROR) {\n        data.frag.abortRequests();\n        this.resetStartWhenNotLoaded();\n        this.resetFragmentLoading(data.frag);\n      } else {\n        this.hls.trigger(Events.ERROR, data as ErrorData);\n      }\n    } else {\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.OTHER_ERROR,\n        details: ErrorDetails.INTERNAL_EXCEPTION,\n        err: error,\n        error,\n        fatal: true,\n      });\n    }\n    return null;\n  }\n\n  protected _handleTransmuxerFlush(chunkMeta: ChunkMetadata) {\n    const context = this.getCurrentContext(chunkMeta);\n    if (!context || this.state !== State.PARSING) {\n      if (\n        !this.fragCurrent &&\n        this.state !== State.STOPPED &&\n        this.state !== State.ERROR\n      ) {\n        this.state = State.IDLE;\n      }\n      return;\n    }\n    const { frag, part, level } = context;\n    const now = self.performance.now();\n    frag.stats.parsing.end = now;\n    if (part) {\n      part.stats.parsing.end = now;\n    }\n    // See if part loading should be disabled/enabled based on buffer and playback position.\n    const levelDetails = this.getLevelDetails();\n    const loadingPartsAtEdge = levelDetails && frag.sn > levelDetails.endSN;\n    const shouldLoadParts =\n      loadingPartsAtEdge || this.shouldLoadParts(levelDetails, frag.end);\n    if (shouldLoadParts !== this.loadingParts) {\n      this.log(\n        `LL-Part loading ${\n          shouldLoadParts ? 'ON' : 'OFF'\n        } after parsing segment ending @${frag.end.toFixed(2)}`,\n      );\n      this.loadingParts = shouldLoadParts;\n    }\n    this.updateLevelTiming(frag, part, level, chunkMeta.partial);\n  }\n\n  private shouldLoadParts(\n    details: LevelDetails | undefined,\n    bufferEnd: number,\n  ): boolean {\n    if (this.config.lowLatencyMode) {\n      if (!details) {\n        return this.loadingParts;\n      }\n      if (details.partList) {\n        // Buffer must be ahead of first part + duration of parts after last segment\n        // and playback must be at or past segment adjacent to part list\n        const firstPart = details.partList[0];\n        // Loading of VTT subtitle parts is not implemented in subtitle-stream-controller (#7460)\n        if (firstPart.fragment.type === PlaylistLevelType.SUBTITLE) {\n          return false;\n        }\n        const safePartStart =\n          firstPart.end + (details.fragmentHint?.duration || 0);\n        if (bufferEnd >= safePartStart) {\n          const playhead = this.hls.hasEnoughToStart\n            ? this.media?.currentTime || this.lastCurrentTime\n            : this.getLoadPosition();\n          if (playhead > firstPart.start - firstPart.fragment.duration) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  protected getCurrentContext(\n    chunkMeta: ChunkMetadata,\n  ): { frag: MediaFragment; part: Part | null; level: Level } | null {\n    const { levels, fragCurrent } = this;\n    const { level: levelIndex, sn, part: partIndex } = chunkMeta;\n    if (!levels?.[levelIndex]) {\n      this.warn(\n        `Levels object was unset while buffering fragment ${sn} of ${this.playlistLabel()} ${levelIndex}. The current chunk will not be buffered.`,\n      );\n      return null;\n    }\n    const level = levels[levelIndex];\n    const levelDetails = level.details;\n\n    const part =\n      partIndex > -1 ? getPartWith(levelDetails, sn, partIndex) : null;\n    const frag = part\n      ? part.fragment\n      : getFragmentWithSN(levelDetails, sn, fragCurrent);\n    if (!frag) {\n      return null;\n    }\n    if (fragCurrent && fragCurrent !== frag) {\n      frag.stats = fragCurrent.stats;\n    }\n    return { frag, part, level };\n  }\n\n  protected bufferFragmentData(\n    data: RemuxedTrack,\n    frag: Fragment,\n    part: Part | null,\n    chunkMeta: ChunkMetadata,\n    noBacktracking?: boolean,\n  ) {\n    if (this.state !== State.PARSING) {\n      return;\n    }\n\n    const { data1, data2 } = data;\n    let buffer = data1;\n    if (data2) {\n      // Combine the moof + mdat so that we buffer with a single append\n      buffer = appendUint8Array(data1, data2);\n    }\n\n    if (!buffer.length) {\n      return;\n    }\n    const offsetTimestamp = this.initPTS[frag.cc] as\n      | TimestampOffset\n      | undefined;\n    const offset = offsetTimestamp\n      ? -offsetTimestamp.baseTime / offsetTimestamp.timescale\n      : undefined;\n    const segment: BufferAppendingData = {\n      type: data.type,\n      frag,\n      part,\n      chunkMeta,\n      offset,\n      parent: frag.type,\n      data: buffer,\n    };\n    this.hls.trigger(Events.BUFFER_APPENDING, segment);\n\n    if (data.dropped && data.independent && !part) {\n      if (noBacktracking) {\n        return;\n      }\n      // Clear buffer so that we reload previous segments sequentially if required\n      this.flushBufferGap(frag);\n    }\n  }\n\n  protected flushBufferGap(frag: Fragment) {\n    const media = this.media;\n    if (!media) {\n      return;\n    }\n    // If currentTime is not buffered, clear the back buffer so that we can backtrack as much as needed\n    if (!BufferHelper.isBuffered(media, media.currentTime)) {\n      this.flushMainBuffer(0, frag.start);\n      return;\n    }\n    // Remove back-buffer without interrupting playback to allow back tracking\n    const currentTime = media.currentTime;\n    const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n    const fragDuration = frag.duration;\n    const segmentFraction = Math.min(\n      this.config.maxFragLookUpTolerance * 2,\n      fragDuration * 0.25,\n    );\n    const start = Math.max(\n      Math.min(frag.start - segmentFraction, bufferInfo.end - segmentFraction),\n      currentTime + segmentFraction,\n    );\n    if (frag.start - start > segmentFraction) {\n      this.flushMainBuffer(start, frag.start);\n    }\n  }\n\n  protected getFwdBufferInfo(\n    bufferable: Bufferable | null,\n    type: PlaylistLevelType,\n  ): BufferInfo | null {\n    const pos = this.getLoadPosition();\n    if (!Number.isFinite(pos)) {\n      return null;\n    }\n    const backwardSeek = this.lastCurrentTime > pos;\n    const maxBufferHole =\n      backwardSeek || this.media?.paused ? 0 : this.config.maxBufferHole;\n    return this.getFwdBufferInfoAtPos(bufferable, pos, type, maxBufferHole);\n  }\n\n  protected getFwdBufferInfoAtPos(\n    bufferable: Bufferable | null,\n    pos: number,\n    type: PlaylistLevelType,\n    maxBufferHole: number,\n  ): BufferInfo | null {\n    const bufferInfo = BufferHelper.bufferInfo(bufferable, pos, maxBufferHole);\n    // Workaround flaw in getting forward buffer when maxBufferHole is smaller than gap at current pos\n    if (bufferInfo.len === 0 && bufferInfo.nextStart !== undefined) {\n      const bufferedFragAtPos = this.fragmentTracker.getBufferedFrag(pos, type);\n      if (\n        bufferedFragAtPos &&\n        (bufferInfo.nextStart <= bufferedFragAtPos.end || bufferedFragAtPos.gap)\n      ) {\n        const gapDuration = Math.max(\n          Math.min(bufferInfo.nextStart, bufferedFragAtPos.end) - pos,\n          maxBufferHole,\n        );\n        return BufferHelper.bufferInfo(bufferable, pos, gapDuration);\n      }\n    }\n    return bufferInfo;\n  }\n\n  protected getMaxBufferLength(levelBitrate?: number): number {\n    const { config } = this;\n    let maxBufLen: number;\n    if (levelBitrate) {\n      maxBufLen = Math.max(\n        (8 * config.maxBufferSize) / levelBitrate,\n        config.maxBufferLength,\n      );\n    } else {\n      maxBufLen = config.maxBufferLength;\n    }\n    return Math.min(maxBufLen, config.maxMaxBufferLength);\n  }\n\n  protected reduceMaxBufferLength(threshold: number, fragDuration: number) {\n    const config = this.config;\n    const minLength = Math.max(\n      Math.min(threshold - fragDuration, config.maxBufferLength),\n      fragDuration,\n    );\n    const reducedLength = Math.max(\n      threshold - fragDuration * 3,\n      config.maxMaxBufferLength / 2,\n      minLength,\n    );\n    if (reducedLength >= minLength) {\n      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n      config.maxMaxBufferLength = reducedLength;\n      this.warn(`Reduce max buffer length to ${reducedLength}s`);\n      return true;\n    }\n    return false;\n  }\n\n  protected getAppendedFrag(\n    position: number,\n    playlistType: PlaylistLevelType = PlaylistLevelType.MAIN,\n  ): Fragment | null {\n    const fragOrPart = (this.fragmentTracker as any)\n      ? this.fragmentTracker.getAppendedFrag(position, playlistType)\n      : null;\n    if (fragOrPart && 'fragment' in fragOrPart) {\n      return fragOrPart.fragment;\n    }\n    return fragOrPart;\n  }\n\n  protected getNextFragment(\n    pos: number,\n    levelDetails: LevelDetails,\n  ): Fragment | null {\n    const fragments = levelDetails.fragments;\n    const fragLen = fragments.length;\n\n    if (!fragLen) {\n      return null;\n    }\n\n    // find fragment index, contiguous with end of buffer position\n    const { config } = this;\n    const start = fragments[0].start;\n    const canLoadParts = config.lowLatencyMode && !!levelDetails.partList;\n    let frag: MediaFragment | null = null;\n\n    if (levelDetails.live) {\n      const initialLiveManifestSize = config.initialLiveManifestSize;\n      if (fragLen < initialLiveManifestSize) {\n        this.warn(\n          `Not enough fragments to start playback (have: ${fragLen}, need: ${initialLiveManifestSize})`,\n        );\n        return null;\n      }\n      // The real fragment start times for a live stream are only known after the PTS range for that level is known.\n      // In order to discover the range, we load the best matching fragment for that level and demux it.\n      // Do not load using live logic if the starting frag is requested - we want to use getFragmentAtPosition() so that\n      // we get the fragment matching that start time\n      if (\n        (!levelDetails.PTSKnown &&\n          !this.startFragRequested &&\n          this.startPosition === -1) ||\n        pos < start\n      ) {\n        if (canLoadParts && !this.loadingParts) {\n          this.log(`LL-Part loading ON for initial live fragment`);\n          this.loadingParts = true;\n        }\n        frag = this.getInitialLiveFragment(levelDetails);\n        const mainStart = this.hls.startPosition;\n        const liveSyncPosition = this.hls.liveSyncPosition;\n        const startPosition = frag\n          ? (mainStart !== -1 && mainStart >= start\n              ? mainStart\n              : liveSyncPosition) || frag.start\n          : pos;\n        this.log(\n          `Setting startPosition to ${startPosition} to match start frag at live edge. mainStart: ${mainStart} liveSyncPosition: ${liveSyncPosition} frag.start: ${frag?.start}`,\n        );\n        this.startPosition = this.nextLoadPosition = startPosition;\n      }\n    } else if (pos <= start) {\n      // VoD playlist: if loadPosition before start of playlist, load first fragment\n      frag = fragments[0];\n    }\n\n    // If we haven't run into any special cases already, just load the fragment most closely matching the requested position\n    if (!frag) {\n      const end = this.loadingParts\n        ? levelDetails.partEnd\n        : levelDetails.fragmentEnd;\n      frag = this.getFragmentAtPosition(pos, end, levelDetails);\n    }\n    let programFrag = this.filterReplacedPrimary(frag, levelDetails);\n    if (!programFrag && frag) {\n      const curSNIdx = frag.sn - levelDetails.startSN;\n      programFrag = this.filterReplacedPrimary(\n        fragments[curSNIdx + 1] || null,\n        levelDetails,\n      );\n    }\n    return this.mapToInitFragWhenRequired(programFrag);\n  }\n\n  protected isLoopLoading(frag: Fragment, targetBufferTime: number): boolean {\n    const trackerState = this.fragmentTracker.getState(frag);\n    return (\n      (trackerState === FragmentState.OK ||\n        (trackerState === FragmentState.PARTIAL && !!frag.gap)) &&\n      this.nextLoadPosition > targetBufferTime\n    );\n  }\n\n  protected getNextFragmentLoopLoading(\n    frag: Fragment,\n    levelDetails: LevelDetails,\n    bufferInfo: BufferInfo,\n    playlistType: PlaylistLevelType,\n    maxBufLen: number,\n  ): Fragment | null {\n    let nextFragment: Fragment | null = null;\n    if (frag.gap) {\n      nextFragment = this.getNextFragment(this.nextLoadPosition, levelDetails);\n      if (nextFragment && !nextFragment.gap && bufferInfo.nextStart) {\n        // Media buffered after GAP tags should not make the next buffer timerange exceed forward buffer length\n        const nextbufferInfo = this.getFwdBufferInfoAtPos(\n          this.mediaBuffer ? this.mediaBuffer : this.media,\n          bufferInfo.nextStart,\n          playlistType,\n          0,\n        );\n        if (\n          nextbufferInfo !== null &&\n          bufferInfo.len + nextbufferInfo.len >= maxBufLen\n        ) {\n          // Returning here might result in not finding an audio and video candiate to skip to\n          const sn = nextFragment.sn;\n          if (this.loopSn !== sn) {\n            this.log(\n              `buffer full after gaps in \"${playlistType}\" playlist starting at sn: ${sn}`,\n            );\n            this.loopSn = sn;\n          }\n          return null;\n        }\n      }\n    }\n    this.loopSn = undefined;\n    return nextFragment;\n  }\n\n  protected get primaryPrefetch(): boolean {\n    if (interstitialsEnabled(this.config)) {\n      const playingInterstitial =\n        this.hls.interstitialsManager?.playingItem?.event;\n      if (playingInterstitial) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected filterReplacedPrimary(\n    frag: MediaFragment | null,\n    details: LevelDetails | undefined,\n  ): MediaFragment | null {\n    if (!frag) {\n      return frag;\n    }\n    if (\n      interstitialsEnabled(this.config) &&\n      frag.type !== PlaylistLevelType.SUBTITLE\n    ) {\n      // Do not load fragments outside the buffering schedule segment\n      const interstitials = this.hls.interstitialsManager;\n      const bufferingItem = interstitials?.bufferingItem;\n      if (bufferingItem) {\n        const bufferingInterstitial = bufferingItem.event;\n        if (bufferingInterstitial) {\n          // Do not stream fragments while buffering Interstitial Events (except for overlap at the start)\n          if (\n            bufferingInterstitial.appendInPlace ||\n            Math.abs(frag.start - bufferingItem.start) > 1 ||\n            bufferingItem.start === 0\n          ) {\n            return null;\n          }\n        } else {\n          // Limit fragment loading to media in schedule item\n          if (frag.end <= bufferingItem.start && details?.live === false) {\n            // fragment ends by schedule item start\n            // this.fragmentTracker.fragBuffered(frag, true);\n            return null;\n          }\n          if (frag.start > bufferingItem.end && bufferingItem.nextEvent) {\n            // fragment is past schedule item end\n            // allow some overflow when not appending in place to prevent stalls\n            if (\n              bufferingItem.nextEvent.appendInPlace ||\n              frag.start - bufferingItem.end > 1\n            ) {\n              return null;\n            }\n          }\n        }\n      }\n      // Skip loading of fragments that overlap completely with appendInPlace interstitials\n      const playerQueue = interstitials?.playerQueue;\n      if (playerQueue) {\n        for (let i = playerQueue.length; i--; ) {\n          const interstitial = playerQueue[i].interstitial;\n          if (\n            interstitial.appendInPlace &&\n            frag.start >= interstitial.startTime &&\n            frag.end <= interstitial.resumeTime\n          ) {\n            return null;\n          }\n        }\n      }\n    }\n    return frag;\n  }\n\n  mapToInitFragWhenRequired(frag: Fragment | null): typeof frag {\n    // If an initSegment is present, it must be buffered first\n    if (frag?.initSegment && !frag.initSegment.data && !this.bitrateTest) {\n      return frag.initSegment;\n    }\n\n    return frag;\n  }\n\n  getNextPart(\n    partList: Part[],\n    frag: Fragment,\n    targetBufferTime: number,\n  ): number {\n    let nextPart = -1;\n    let contiguous = false;\n    let independentAttrOmitted = true;\n    for (let i = 0, len = partList.length; i < len; i++) {\n      const part = partList[i];\n      independentAttrOmitted = independentAttrOmitted && !part.independent;\n      if (nextPart > -1 && targetBufferTime < part.start) {\n        break;\n      }\n      const loaded = part.loaded;\n      if (loaded) {\n        nextPart = -1;\n      } else if (\n        contiguous ||\n        ((part.independent || independentAttrOmitted) && part.fragment === frag)\n      ) {\n        if (part.fragment !== frag) {\n          this.warn(\n            `Need buffer at ${targetBufferTime} but next unloaded part starts at ${part.start}`,\n          );\n        }\n        nextPart = i;\n      }\n      contiguous = loaded;\n    }\n    return nextPart;\n  }\n\n  private loadedEndOfParts(\n    partList: Part[],\n    targetBufferTime: number,\n  ): boolean {\n    let part: Part;\n    for (let i = partList.length; i--; ) {\n      part = partList[i];\n      if (!part.loaded) {\n        return false;\n      }\n      if (targetBufferTime > part.start) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /*\n   This method is used find the best matching first fragment for a live playlist. This fragment is used to calculate the\n   \"sliding\" of the playlist, which is its offset from the start of playback. After sliding we can compute the real\n   start and end times for each fragment in the playlist (after which this method will not need to be called).\n  */\n  protected getInitialLiveFragment(\n    levelDetails: LevelDetails,\n  ): MediaFragment | null {\n    const fragments = levelDetails.fragments;\n    const fragPrevious = this.fragPrevious;\n    let frag: MediaFragment | null = null;\n    if (fragPrevious) {\n      if (levelDetails.hasProgramDateTime) {\n        // Prefer using PDT, because it can be accurate enough to choose the correct fragment without knowing the level sliding\n        this.log(\n          `Live playlist, switching playlist, load frag with same PDT: ${fragPrevious.programDateTime}`,\n        );\n        frag = findFragmentByPDT(\n          fragments,\n          fragPrevious.endProgramDateTime,\n          this.config.maxFragLookUpTolerance,\n        );\n      }\n      if (!frag) {\n        // SN does not need to be accurate between renditions, but depending on the packaging it may be so.\n        const targetSN = (fragPrevious.sn as number) + 1;\n        if (\n          targetSN >= levelDetails.startSN &&\n          targetSN <= levelDetails.endSN\n        ) {\n          const fragNext = fragments[targetSN - levelDetails.startSN];\n          // Ensure that we're staying within the continuity range, since PTS resets upon a new range\n          if (fragPrevious.cc === fragNext.cc) {\n            frag = fragNext;\n            this.log(\n              `Live playlist, switching playlist, load frag with next SN: ${\n                frag!.sn\n              }`,\n            );\n          }\n        }\n        // It's important to stay within the continuity range if available; otherwise the fragments in the playlist\n        // will have the wrong start times\n        if (!frag) {\n          frag = findNearestWithCC(\n            levelDetails,\n            fragPrevious.cc,\n            fragPrevious.end,\n          );\n          if (frag) {\n            this.log(\n              `Live playlist, switching playlist, load frag with same CC: ${frag.sn}`,\n            );\n          }\n        }\n      }\n    } else {\n      // Find a new start fragment when fragPrevious is null\n      const liveStart = this.hls.liveSyncPosition;\n      if (liveStart !== null) {\n        frag = this.getFragmentAtPosition(\n          liveStart,\n          this.bitrateTest ? levelDetails.fragmentEnd : levelDetails.edge,\n          levelDetails,\n        );\n      }\n    }\n\n    return frag;\n  }\n\n  /*\n  This method finds the best matching fragment given the provided position.\n   */\n  protected getFragmentAtPosition(\n    bufferEnd: number,\n    end: number,\n    levelDetails: LevelDetails,\n  ): MediaFragment | null {\n    const { config } = this;\n    let { fragPrevious } = this;\n    let { fragments, endSN } = levelDetails;\n    const { fragmentHint } = levelDetails;\n    const { maxFragLookUpTolerance } = config;\n    const partList = levelDetails.partList;\n\n    const loadingParts = !!(\n      this.loadingParts &&\n      partList?.length &&\n      fragmentHint\n    );\n    if (\n      loadingParts &&\n      !this.bitrateTest &&\n      partList[partList.length - 1].fragment.sn === fragmentHint.sn\n    ) {\n      // Include incomplete fragment with parts at end\n      fragments = fragments.concat(fragmentHint);\n      endSN = fragmentHint.sn;\n    }\n\n    let frag: MediaFragment | null;\n    if (bufferEnd < end) {\n      const backwardSeek = bufferEnd < this.lastCurrentTime;\n      const lookupTolerance =\n        backwardSeek ||\n        bufferEnd > end - maxFragLookUpTolerance ||\n        this.media?.paused ||\n        !this.startFragRequested\n          ? 0\n          : maxFragLookUpTolerance;\n      // Remove the tolerance if it would put the bufferEnd past the actual end of stream\n      // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)\n      frag = findFragmentByPTS(\n        fragPrevious,\n        fragments,\n        bufferEnd,\n        lookupTolerance,\n      );\n    } else {\n      // reach end of playlist\n      frag = fragments[fragments.length - 1];\n    }\n\n    if (frag) {\n      const curSNIdx = frag.sn - levelDetails.startSN;\n      // Move fragPrevious forward to support forcing the next fragment to load\n      // when the buffer catches up to a previously buffered range.\n      const fragState = this.fragmentTracker.getState(frag);\n      if (\n        fragState === FragmentState.OK ||\n        (fragState === FragmentState.PARTIAL && frag.gap)\n      ) {\n        fragPrevious = frag;\n      }\n      if (\n        fragPrevious &&\n        frag.sn === fragPrevious.sn &&\n        (!loadingParts ||\n          partList[0].fragment.sn > frag.sn ||\n          !levelDetails.live)\n      ) {\n        // Force the next fragment to load if the previous one was already selected. This can occasionally happen with\n        // non-uniform fragment durations\n        const sameLevel = frag.level === fragPrevious.level;\n        if (sameLevel) {\n          const nextFrag = fragments[curSNIdx + 1];\n          if (\n            frag.sn < endSN &&\n            this.fragmentTracker.getState(nextFrag) !== FragmentState.OK\n          ) {\n            frag = nextFrag;\n          } else {\n            frag = null;\n          }\n        }\n      }\n    }\n    return frag;\n  }\n\n  protected alignPlaylists(\n    details: LevelDetails,\n    previousDetails: LevelDetails | undefined,\n    switchDetails: LevelDetails | undefined,\n  ): number {\n    // TODO: If not for `shouldAlignOnDiscontinuities` requiring fragPrevious.cc,\n    //  this could all go in level-helper mergeDetails()\n    const length = details.fragments.length;\n    if (!length) {\n      this.warn(`No fragments in live playlist`);\n      return 0;\n    }\n    const slidingStart = details.fragmentStart;\n    const firstLevelLoad = !previousDetails;\n    const aligned = details.alignedSliding && Number.isFinite(slidingStart);\n    if (firstLevelLoad || (!aligned && !slidingStart)) {\n      alignStream(switchDetails, details);\n      const alignedSlidingStart = details.fragmentStart;\n      this.log(\n        `Live playlist sliding: ${alignedSlidingStart.toFixed(2)} start-sn: ${\n          previousDetails ? previousDetails.startSN : 'na'\n        }->${details.startSN} fragments: ${length}`,\n      );\n      return alignedSlidingStart;\n    }\n    return slidingStart;\n  }\n\n  protected waitForCdnTuneIn(details: LevelDetails) {\n    // Wait for Low-Latency CDN Tune-in to get an updated playlist\n    const advancePartLimit = 3;\n    return (\n      details.live &&\n      details.canBlockReload &&\n      details.partTarget &&\n      details.tuneInGoal >\n        Math.max(details.partHoldBack, details.partTarget * advancePartLimit)\n    );\n  }\n\n  protected setStartPosition(details: LevelDetails, sliding: number) {\n    // compute start position if set to -1. use it straight away if value is defined\n    let startPosition = this.startPosition;\n    if (startPosition < sliding) {\n      startPosition = -1;\n    }\n    const timelineOffset = this.timelineOffset;\n    if (startPosition === -1) {\n      // Use Playlist EXT-X-START:TIME-OFFSET when set\n      // Prioritize Multivariant Playlist offset so that main, audio, and subtitle stream-controller start times match\n      const offsetInMultivariantPlaylist = this.startTimeOffset !== null;\n      const startTimeOffset = offsetInMultivariantPlaylist\n        ? this.startTimeOffset\n        : details.startTimeOffset;\n      if (startTimeOffset !== null && Number.isFinite(startTimeOffset)) {\n        startPosition = sliding + startTimeOffset;\n        if (startTimeOffset < 0) {\n          startPosition += details.edge;\n        }\n        startPosition = Math.min(\n          Math.max(sliding, startPosition),\n          sliding + details.totalduration,\n        );\n        this.log(\n          `Setting startPosition to ${startPosition} for start time offset ${startTimeOffset} found in ${\n            offsetInMultivariantPlaylist ? 'multivariant' : 'media'\n          } playlist`,\n        );\n        this.startPosition = startPosition;\n      } else if (details.live) {\n        // Leave this.startPosition at -1, so that we can use `getInitialLiveFragment` logic when startPosition has\n        // not been specified via the config or an as an argument to startLoad (#3736).\n        startPosition = this.hls.liveSyncPosition || sliding;\n        this.log(\n          `Setting startPosition to -1 to start at live edge ${startPosition}`,\n        );\n        this.startPosition = -1;\n      } else {\n        this.log(`setting startPosition to 0 by default`);\n        this.startPosition = startPosition = 0;\n      }\n      this.lastCurrentTime = startPosition + timelineOffset;\n    }\n    this.nextLoadPosition = startPosition + timelineOffset;\n  }\n\n  protected getLoadPosition(): number {\n    const { media } = this;\n    // if we have not yet loaded any fragment, start loading from start position\n    let pos = 0;\n    if (this.hls?.hasEnoughToStart && media) {\n      pos = media.currentTime;\n    } else if (this.nextLoadPosition >= 0) {\n      pos = this.nextLoadPosition;\n    }\n\n    return pos;\n  }\n\n  private handleFragLoadAborted(frag: Fragment, part: Part | null | undefined) {\n    if (\n      this.transmuxer &&\n      frag.type === this.playlistType &&\n      isMediaFragment(frag) &&\n      frag.stats.aborted\n    ) {\n      this.log(\n        `Fragment ${frag.sn}${part ? ' part ' + part.index : ''} of ${this.playlistLabel()} ${\n          frag.level\n        } was aborted`,\n      );\n      this.resetFragmentLoading(frag);\n    }\n  }\n\n  protected resetFragmentLoading(frag: Fragment) {\n    if (\n      !this.fragCurrent ||\n      (!this.fragContextChanged(frag) &&\n        this.state !== State.FRAG_LOADING_WAITING_RETRY)\n    ) {\n      this.state = State.IDLE;\n    }\n  }\n\n  protected onFragmentOrKeyLoadError(\n    filterType: PlaylistLevelType,\n    data: ErrorData,\n  ) {\n    if (data.chunkMeta && !data.frag) {\n      const context = this.getCurrentContext(data.chunkMeta);\n      if (context) {\n        data.frag = context.frag;\n      }\n    }\n    const frag = data.frag;\n    // Handle frag error related to caller's filterType\n    if (!frag || frag.type !== filterType || !this.levels) {\n      return;\n    }\n    if (this.fragContextChanged(frag)) {\n      this.warn(\n        `Frag load error must match current frag to retry ${frag.url} > ${this.fragCurrent?.url}`,\n      );\n      return;\n    }\n    const gapTagEncountered = data.details === ErrorDetails.FRAG_GAP;\n    if (gapTagEncountered) {\n      this.fragmentTracker.fragBuffered(frag as MediaFragment, true);\n    }\n    // keep retrying until the limit will be reached\n    const errorAction = data.errorAction;\n    if (!errorAction) {\n      this.state = State.ERROR;\n      return;\n    }\n    const { action, flags, retryCount = 0, retryConfig } = errorAction;\n    const couldRetry = !!retryConfig;\n    const retry = couldRetry && action === NetworkErrorAction.RetryRequest;\n    const noAlternate =\n      couldRetry &&\n      !errorAction.resolved &&\n      flags === ErrorActionFlags.MoveAllAlternatesMatchingHost;\n    const live = this.hls.latestLevelDetails?.live;\n    if (\n      !retry &&\n      noAlternate &&\n      isMediaFragment(frag) &&\n      !frag.endList &&\n      live &&\n      !isUnusableKeyError(data)\n    ) {\n      this.resetFragmentErrors(filterType);\n      this.treatAsGap(frag);\n      errorAction.resolved = true;\n    } else if ((retry || noAlternate) && retryCount < retryConfig.maxNumRetry) {\n      const offlineStatus = offlineHttpStatus(data.response?.code);\n      const delay = getRetryDelay(retryConfig, retryCount);\n      this.resetStartWhenNotLoaded();\n      this.retryDate = self.performance.now() + delay;\n      this.state = State.FRAG_LOADING_WAITING_RETRY;\n      errorAction.resolved = true;\n      if (offlineStatus) {\n        this.log(`Waiting for connection (offline)`);\n        this.retryDate = Infinity;\n        data.reason = 'offline';\n        return;\n      }\n      this.warn(\n        `Fragment ${frag.sn} of ${filterType} ${frag.level} errored with ${\n          data.details\n        }, retrying loading ${retryCount + 1}/${\n          retryConfig.maxNumRetry\n        } in ${delay}ms`,\n      );\n    } else if (retryConfig) {\n      this.resetFragmentErrors(filterType);\n      if (retryCount < retryConfig.maxNumRetry) {\n        // Network retry is skipped when level switch is preferred\n        if (\n          !gapTagEncountered &&\n          action !== NetworkErrorAction.RemoveAlternatePermanently\n        ) {\n          errorAction.resolved = true;\n        }\n      } else {\n        this.warn(\n          `${data.details} reached or exceeded max retry (${retryCount})`,\n        );\n        return;\n      }\n    } else if (action === NetworkErrorAction.SendAlternateToPenaltyBox) {\n      this.state = State.WAITING_LEVEL;\n    } else {\n      this.state = State.ERROR;\n    }\n    // Perform next async tick sooner to speed up error action resolution\n    this.tickImmediate();\n  }\n\n  protected checkRetryDate() {\n    const now = self.performance.now();\n    const retryDate = this.retryDate;\n    // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n    const waitingForConnection = retryDate === Infinity;\n    if (\n      !retryDate ||\n      now >= retryDate ||\n      (waitingForConnection && !offlineHttpStatus(0))\n    ) {\n      if (waitingForConnection) {\n        this.log(`Connection restored (online)`);\n      }\n      this.resetStartWhenNotLoaded();\n      this.state = State.IDLE;\n    }\n  }\n\n  protected reduceLengthAndFlushBuffer(data: ErrorData): boolean {\n    // if in appending state\n    if (this.state === State.PARSING || this.state === State.PARSED) {\n      const frag = data.frag;\n      const playlistType = data.parent as PlaylistLevelType;\n      const bufferedInfo = this.getFwdBufferInfo(\n        this.mediaBuffer,\n        playlistType,\n      );\n      // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n      // reduce max buf len if current position is buffered\n      const buffered = bufferedInfo && bufferedInfo.len > 0.5;\n      if (buffered) {\n        this.reduceMaxBufferLength(bufferedInfo.len, frag?.duration || 10);\n      }\n      const flushBuffer = !buffered;\n      if (flushBuffer) {\n        // current position is not buffered, but browser is still complaining about buffer full error\n        // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n        // in that case flush the whole audio buffer to recover\n        this.warn(\n          `Buffer full error while media.currentTime (${this.getLoadPosition()}) is not buffered, flush ${playlistType} buffer`,\n        );\n      }\n      if (frag) {\n        this.fragmentTracker.removeFragment(frag);\n        this.nextLoadPosition = frag.start;\n      }\n      this.resetLoadingState();\n      return flushBuffer;\n    }\n    return false;\n  }\n\n  protected resetFragmentErrors(filterType: PlaylistLevelType) {\n    if (filterType === PlaylistLevelType.AUDIO) {\n      // Reset current fragment since audio track audio is essential and may not have a fail-over track\n      this.fragCurrent = null;\n    }\n    // Fragment errors that result in a level switch or redundant fail-over\n    // should reset the stream controller state to idle\n    if (!this.hls.hasEnoughToStart) {\n      this.startFragRequested = false;\n    }\n    if (this.state !== State.STOPPED) {\n      this.state = State.IDLE;\n    }\n  }\n\n  protected afterBufferFlushed(\n    media: Bufferable,\n    bufferType: SourceBufferName,\n    playlistType: PlaylistLevelType,\n  ) {\n    if (!media) {\n      return;\n    }\n    // After successful buffer flushing, filter flushed fragments from bufferedFrags use mediaBuffered instead of media\n    // (so that we will check against video.buffered ranges in case of alt audio track)\n    const bufferedTimeRanges = BufferHelper.getBuffered(media);\n    this.fragmentTracker.detectEvictedFragments(\n      bufferType,\n      bufferedTimeRanges,\n      playlistType,\n    );\n    if (this.state === State.ENDED) {\n      this.resetLoadingState();\n    }\n  }\n\n  protected resetLoadingState() {\n    this.log('Reset loading state');\n    this.fragCurrent = null;\n    this.fragPrevious = null;\n    if (this.state !== State.STOPPED) {\n      this.state = State.IDLE;\n    }\n  }\n\n  private resetStartWhenNotLoaded() {\n    // if loadedmetadata is not set, it means that first frag request failed\n    // in that case, reset startFragRequested flag\n    if (!this.hls.hasEnoughToStart) {\n      this.startFragRequested = false;\n      const level = this.levelLastLoaded;\n      const details = level ? level.details : null;\n      if (details?.live) {\n        // Update the start position and return to IDLE to recover live start\n        this.log(`resetting startPosition for live start`);\n        this.startPosition = -1;\n        this.setStartPosition(details, details.fragmentStart);\n        this.resetLoadingState();\n      } else {\n        this.nextLoadPosition = this.startPosition;\n      }\n    }\n  }\n\n  protected resetWhenMissingContext(chunkMeta: ChunkMetadata | Fragment) {\n    this.log(\n      `Loading context changed while buffering sn ${chunkMeta.sn} of ${this.playlistLabel()} ${chunkMeta.level === -1 ? '<removed>' : chunkMeta.level}. This chunk will not be buffered.`,\n    );\n    this.removeUnbufferedFrags();\n    this.resetStartWhenNotLoaded();\n    this.resetLoadingState();\n  }\n\n  protected removeUnbufferedFrags(start: number = 0) {\n    this.fragmentTracker.removeFragmentsInRange(\n      start,\n      Infinity,\n      this.playlistType,\n      false,\n      true,\n    );\n  }\n\n  private updateLevelTiming(\n    frag: MediaFragment,\n    part: Part | null,\n    level: Level,\n    partial: boolean,\n  ) {\n    const details = level.details;\n    if (!details) {\n      this.warn('level.details undefined');\n      return;\n    }\n    const parsed = Object.keys(frag.elementaryStreams).reduce(\n      (result, type) => {\n        const info = frag.elementaryStreams[type];\n        if (info) {\n          const parsedDuration = info.endPTS - info.startPTS;\n          if (parsedDuration <= 0) {\n            // Destroy the transmuxer after it's next time offset failed to advance because duration was <= 0.\n            // The new transmuxer will be configured with a time offset matching the next fragment start,\n            // preventing the timeline from shifting.\n            this.warn(\n              `Could not parse fragment ${frag.sn} ${type} duration reliably (${parsedDuration})`,\n            );\n            return result || false;\n          }\n          const drift = partial\n            ? 0\n            : updateFragPTSDTS(\n                details,\n                frag,\n                info.startPTS,\n                info.endPTS,\n                info.startDTS,\n                info.endDTS,\n                this,\n              );\n          this.hls.trigger(Events.LEVEL_PTS_UPDATED, {\n            details,\n            level,\n            drift,\n            type,\n            frag,\n            start: info.startPTS,\n            end: info.endPTS,\n          });\n          return true;\n        }\n        return result;\n      },\n      false,\n    );\n    if (!parsed) {\n      if (level.fragmentError === 0) {\n        // Mark and track the odd empty segment as a gap to avoid reloading\n        this.treatAsGap(frag, level);\n      }\n      if (this.transmuxer?.error === null) {\n        const error = new Error(\n          `Found no media in fragment ${frag.sn} of ${this.playlistLabel()} ${frag.level} resetting transmuxer to fallback to playlist timing`,\n        );\n        this.warn(error.message);\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.FRAG_PARSING_ERROR,\n          fatal: false,\n          error,\n          frag,\n          reason: `Found no media in msn ${frag.sn} of ${this.playlistLabel()} \"${level.url}\"`,\n        });\n        if (!this.hls) {\n          return;\n        }\n        this.resetTransmuxer();\n      }\n      // For this error fallthrough. Marking parsed will allow advancing to next fragment.\n    }\n    this.state = State.PARSED;\n    this.log(\n      `Parsed ${frag.type} sn: ${frag.sn}${\n        part ? ' part: ' + part.index : ''\n      } of ${this.fragInfo(frag, false, part)})`,\n    );\n    this.hls.trigger(Events.FRAG_PARSED, { frag, part });\n  }\n\n  private playlistLabel() {\n    return this.playlistType === PlaylistLevelType.MAIN ? 'level' : 'track';\n  }\n\n  private fragInfo(\n    frag: Fragment,\n    pts: boolean = true,\n    part?: Part | null,\n  ): string {\n    return `${this.playlistLabel()} ${frag.level} (${part ? 'part' : 'frag'}:[${((pts && !part ? frag.startPTS : (part || frag).start) ?? NaN).toFixed(3)}-${(\n      (pts && !part ? frag.endPTS : (part || frag).end) ?? NaN\n    ).toFixed(\n      3,\n    )}]${part && frag.type === 'main' ? 'INDEPENDENT=' + (part.independent ? 'YES' : 'NO') : ''}`;\n  }\n\n  private treatAsGap(frag: MediaFragment, level?: Level) {\n    if (level) {\n      level.fragmentError++;\n    }\n    frag.gap = true;\n    this.fragmentTracker.removeFragment(frag);\n    this.fragmentTracker.fragBuffered(frag, true);\n  }\n\n  protected resetTransmuxer() {\n    this.transmuxer?.reset();\n  }\n\n  protected recoverWorkerError(data: ErrorData) {\n    if (data.event === 'demuxerWorker') {\n      this.fragmentTracker.removeAllFragments();\n      if (this.transmuxer) {\n        this.transmuxer.destroy();\n        this.transmuxer = null;\n      }\n      this.resetStartWhenNotLoaded();\n      this.resetLoadingState();\n    }\n  }\n\n  set state(nextState: (typeof State)[keyof typeof State]) {\n    const previousState = this._state;\n    if (previousState !== nextState) {\n      this._state = nextState;\n      this.log(`${previousState}->${nextState}`);\n    }\n  }\n\n  get state(): (typeof State)[keyof typeof State] {\n    return this._state;\n  }\n}\n\nfunction interstitialsEnabled(config: HlsConfig): boolean {\n  return (\n    __USE_INTERSTITIALS__ &&\n    !!config.interstitialsController &&\n    config.enableInterstitialPlayback !== false\n  );\n}\n","export default class ChunkCache {\n  private chunks: Array<Uint8Array<ArrayBuffer>> = [];\n  public dataLength: number = 0;\n\n  push(chunk: Uint8Array<ArrayBuffer>) {\n    this.chunks.push(chunk);\n    this.dataLength += chunk.length;\n  }\n\n  flush(): Uint8Array<ArrayBuffer> {\n    const { chunks, dataLength } = this;\n    let result: Uint8Array<ArrayBuffer>;\n    if (!chunks.length) {\n      return new Uint8Array(0);\n    } else if (chunks.length === 1) {\n      result = chunks[0];\n    } else {\n      result = concatUint8Arrays(chunks, dataLength);\n    }\n    this.reset();\n    return result;\n  }\n\n  reset() {\n    this.chunks.length = 0;\n    this.dataLength = 0;\n  }\n}\n\nfunction concatUint8Arrays(\n  chunks: Array<Uint8Array<ArrayBuffer>>,\n  dataLength: number,\n): Uint8Array<ArrayBuffer> {\n  const result = new Uint8Array(dataLength);\n  let offset = 0;\n  for (let i = 0; i < chunks.length; i++) {\n    const chunk = chunks[i];\n    result.set(chunk, offset);\n    offset += chunk.length;\n  }\n  return result;\n}\n","/**\n * Returns true if an ID3 footer can be found at offset in data\n *\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n *\n * @returns `true` if an ID3 footer is found\n *\n * @internal\n *\n * @group ID3\n */\nexport function isId3Footer(data, offset) {\n    /*\n     * The footer is a copy of the header, but with a different identifier\n     */\n    if (offset + 10 <= data.length) {\n        // look for '3DI' identifier\n        if (data[offset] === 0x33 &&\n            data[offset + 1] === 0x44 &&\n            data[offset + 2] === 0x49) {\n            // check version is within range\n            if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n                // check size is within range\n                if (data[offset + 6] < 0x80 &&\n                    data[offset + 7] < 0x80 &&\n                    data[offset + 8] < 0x80 &&\n                    data[offset + 9] < 0x80) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=isId3Footer.js.map","/**\n * Returns true if an ID3 header can be found at offset in data\n *\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n *\n * @returns `true` if an ID3 header is found\n *\n * @internal\n *\n * @group ID3\n */\nexport function isId3Header(data, offset) {\n    /*\n     * http://id3.org/id3v2.3.0\n     * [0]     = 'I'\n     * [1]     = 'D'\n     * [2]     = '3'\n     * [3,4]   = {Version}\n     * [5]     = {Flags}\n     * [6-9]   = {ID3 Size}\n     *\n     * An ID3v2 tag can be detected with the following pattern:\n     *  $49 44 33 yy yy xx zz zz zz zz\n     * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n     */\n    if (offset + 10 <= data.length) {\n        // look for 'ID3' identifier\n        if (data[offset] === 0x49 &&\n            data[offset + 1] === 0x44 &&\n            data[offset + 2] === 0x33) {\n            // check version is within range\n            if (data[offset + 3] < 0xff && data[offset + 4] < 0xff) {\n                // check size is within range\n                if (data[offset + 6] < 0x80 &&\n                    data[offset + 7] < 0x80 &&\n                    data[offset + 8] < 0x80 &&\n                    data[offset + 9] < 0x80) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=isId3Header.js.map","/**\n * Read ID3 size\n *\n * @param data - The data to read from\n * @param offset - The offset at which to start reading\n *\n * @returns The size\n *\n * @internal\n *\n * @group ID3\n */\nexport function readId3Size(data, offset) {\n    let size = 0;\n    size = (data[offset] & 0x7f) << 21;\n    size |= (data[offset + 1] & 0x7f) << 14;\n    size |= (data[offset + 2] & 0x7f) << 7;\n    size |= data[offset + 3] & 0x7f;\n    return size;\n}\n//# sourceMappingURL=readId3Size.js.map","import { isId3Footer } from './util/isId3Footer.js';\nimport { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\n/**\n * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n *\n * @param data - The data to search in\n * @param offset - The offset at which to start searching\n *\n * @returns The block of data containing any ID3 tags found\n * or `undefined` if no header is found at the starting offset\n *\n * @internal\n *\n * @group ID3\n */\nexport function getId3Data(data, offset) {\n    const front = offset;\n    let length = 0;\n    while (isId3Header(data, offset)) {\n        // ID3 header is 10 bytes\n        length += 10;\n        const size = readId3Size(data, offset + 6);\n        length += size;\n        if (isId3Footer(data, offset + 10)) {\n            // ID3 footer is 10 bytes\n            length += 10;\n        }\n        offset += length;\n    }\n    if (length > 0) {\n        return data.subarray(front, front + length);\n    }\n    return undefined;\n}\n//# sourceMappingURL=getId3Data.js.map","/**\n * ADTS parser helper\n * @link https://wiki.multimedia.cx/index.php?title=ADTS\n */\nimport { ErrorDetails, ErrorTypes } from '../../errors';\nimport { Events } from '../../events';\nimport { logger } from '../../utils/logger';\nimport type { HlsEventEmitter } from '../../events';\nimport type {\n  AudioFrame,\n  AudioSample,\n  DemuxedAudioTrack,\n} from '../../types/demuxer';\n\ntype AudioConfig = {\n  config: [number, number];\n  samplerate: number;\n  channelCount: number;\n  codec: string;\n  parsedCodec: string;\n  manifestCodec: string | undefined;\n};\n\ntype FrameHeader = {\n  headerLength: number;\n  frameLength: number;\n};\n\nexport function getAudioConfig(\n  observer: HlsEventEmitter,\n  data: Uint8Array,\n  offset: number,\n  manifestCodec: string | undefined,\n): AudioConfig | void {\n  const adtsSamplingRates = [\n    96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025,\n    8000, 7350,\n  ];\n  const byte2 = data[offset + 2];\n  const adtsSamplingIndex = (byte2 >> 2) & 0xf;\n  if (adtsSamplingIndex > 12) {\n    const error = new Error(`invalid ADTS sampling index:${adtsSamplingIndex}`);\n    observer.emit(Events.ERROR, Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_PARSING_ERROR,\n      fatal: true,\n      error,\n      reason: error.message,\n    });\n    return;\n  }\n  // MPEG-4 Audio Object Type (profile_ObjectType+1)\n  const adtsObjectType = ((byte2 >> 6) & 0x3) + 1;\n  const channelCount = ((data[offset + 3] >> 6) & 0x3) | ((byte2 & 1) << 2);\n  const codec = 'mp4a.40.' + adtsObjectType;\n  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n      ISO/IEC 14496-3 - Table 1.13 — Syntax of AudioSpecificConfig()\n    Audio Profile / Audio Object Type\n    0: Null\n    1: AAC Main\n    2: AAC LC (Low Complexity)\n    3: AAC SSR (Scalable Sample Rate)\n    4: AAC LTP (Long Term Prediction)\n    5: SBR (Spectral Band Replication)\n    6: AAC Scalable\n   sampling freq\n    0: 96000 Hz\n    1: 88200 Hz\n    2: 64000 Hz\n    3: 48000 Hz\n    4: 44100 Hz\n    5: 32000 Hz\n    6: 24000 Hz\n    7: 22050 Hz\n    8: 16000 Hz\n    9: 12000 Hz\n    10: 11025 Hz\n    11: 8000 Hz\n    12: 7350 Hz\n    13: Reserved\n    14: Reserved\n    15: frequency is written explictly\n    Channel Configurations\n    These are the channel configurations:\n    0: Defined in AOT Specifc Config\n    1: 1 channel: front-center\n    2: 2 channels: front-left, front-right\n  */\n  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n  const samplerate = adtsSamplingRates[adtsSamplingIndex];\n  let aacSampleIndex = adtsSamplingIndex;\n  if (adtsObjectType === 5 || adtsObjectType === 29) {\n    // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n    // there is a factor 2 between frame sample rate and output sample rate\n    // multiply frequency by 2 (see table above, equivalent to substract 3)\n    aacSampleIndex -= 3;\n  }\n  const config: [number, number] = [\n    (adtsObjectType << 3) | ((aacSampleIndex & 0x0e) >> 1),\n    ((aacSampleIndex & 0x01) << 7) | (channelCount << 3),\n  ];\n  logger.log(\n    `manifest codec:${manifestCodec}, parsed codec:${codec}, channels:${channelCount}, rate:${samplerate} (ADTS object type:${adtsObjectType} sampling index:${adtsSamplingIndex})`,\n  );\n  return {\n    config,\n    samplerate,\n    channelCount,\n    codec,\n    parsedCodec: codec,\n    manifestCodec,\n  };\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\nexport function getHeaderLength(data: Uint8Array, offset: number): number {\n  return data[offset + 1] & 0x01 ? 7 : 9;\n}\n\nexport function getFullFrameLength(data: Uint8Array, offset: number): number {\n  return (\n    ((data[offset + 3] & 0x03) << 11) |\n    (data[offset + 4] << 3) |\n    ((data[offset + 5] & 0xe0) >>> 5)\n  );\n}\n\nexport function canGetFrameLength(data: Uint8Array, offset: number): boolean {\n  return offset + 5 < data.length;\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  return (\n    canGetFrameLength(data, offset) &&\n    isHeaderPattern(data, offset) &&\n    getFullFrameLength(data, offset) <= data.length - offset\n  );\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (isHeader(data, offset)) {\n    // ADTS header Length\n    const headerLength = getHeaderLength(data, offset);\n    if (offset + headerLength >= data.length) {\n      return false;\n    }\n    // ADTS frame Length\n    const frameLength = getFullFrameLength(data, offset);\n    if (frameLength <= headerLength) {\n      return false;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n\nexport function initTrackConfig(\n  track: DemuxedAudioTrack,\n  observer: HlsEventEmitter,\n  data: Uint8Array,\n  offset: number,\n  audioCodec: string | undefined,\n) {\n  if (!track.samplerate) {\n    const config = getAudioConfig(observer, data, offset, audioCodec);\n    if (!config) {\n      return;\n    }\n    Object.assign(track, config);\n  }\n}\n\nexport function getFrameDuration(samplerate: number): number {\n  return (1024 * 90000) / samplerate;\n}\n\nexport function parseFrameHeader(\n  data: Uint8Array,\n  offset: number,\n): FrameHeader | void {\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  const headerLength = getHeaderLength(data, offset);\n  if (offset + headerLength <= data.length) {\n    // retrieve frame size\n    const frameLength = getFullFrameLength(data, offset) - headerLength;\n    if (frameLength > 0) {\n      // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}`);\n      return { headerLength, frameLength };\n    }\n  }\n}\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number,\n): AudioFrame {\n  const frameDuration = getFrameDuration(track.samplerate as number);\n  const stamp = pts + frameIndex * frameDuration;\n  const header = parseFrameHeader(data, offset);\n  let unit: Uint8Array;\n  if (header) {\n    const { frameLength, headerLength } = header;\n    const length = headerLength + frameLength;\n    const missing = Math.max(0, offset + length - data.length);\n    // logger.log(`AAC frame ${frameIndex}, pts:${stamp} length@offset/total: ${frameLength}@${offset+headerLength}/${data.byteLength} missing: ${missing}`);\n    if (missing) {\n      unit = new Uint8Array(length - headerLength);\n      unit.set(data.subarray(offset + headerLength, data.length), 0);\n    } else {\n      unit = data.subarray(offset + headerLength, offset + length);\n    }\n\n    const sample: AudioSample = {\n      unit,\n      pts: stamp,\n    };\n    if (!missing) {\n      track.samples.push(sample as AudioSample);\n    }\n\n    return { sample, length, missing };\n  }\n  // overflow incomplete header\n  const length = data.length - offset;\n  unit = new Uint8Array(length);\n  unit.set(data.subarray(offset, data.length), 0);\n  const sample: AudioSample = {\n    unit,\n    pts: stamp,\n  };\n  return { sample, length, missing: -1 };\n}\n","import { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\n/**\n * Checks if the given data contains an ID3 tag.\n *\n * @param data - The data to check\n * @param offset - The offset at which to start checking\n *\n * @returns `true` if an ID3 tag is found\n *\n * @group ID3\n *\n * @beta\n */\nexport function canParseId3(data, offset) {\n    return (isId3Header(data, offset) &&\n        readId3Size(data, offset + 6) + 10 <= data.length - offset);\n}\n//# sourceMappingURL=canParseId3.js.map","export function toArrayBuffer(view) {\n    if (view instanceof ArrayBuffer) {\n        return view;\n    }\n    else {\n        if (view.byteOffset == 0 && view.byteLength == view.buffer.byteLength) {\n            // This is a TypedArray over the whole buffer.\n            return view.buffer;\n        }\n        // This is a 'view' on the buffer.  Create a new buffer that only contains\n        // the data.  Note that since this isn't an ArrayBuffer, the 'new' call\n        // will allocate a new buffer to hold the copy.\n        return new Uint8Array(view).buffer;\n    }\n}\n//# sourceMappingURL=toArrayBuffer.js.map","export function toUint8(data, offset = 0, length = Infinity) {\n    return view(data, offset, length, Uint8Array);\n}\nfunction view(data, offset, length, Type) {\n    const buffer = unsafeGetArrayBuffer(data);\n    let bytesPerElement = 1;\n    if ('BYTES_PER_ELEMENT' in Type) {\n        bytesPerElement = Type.BYTES_PER_ELEMENT;\n    }\n    // Absolute end of the |data| view within |buffer|.\n    const dataOffset = isArrayBufferView(data) ? data.byteOffset : 0;\n    const dataEnd = ((dataOffset) + data.byteLength) / bytesPerElement;\n    // Absolute start of the result within |buffer|.\n    const rawStart = ((dataOffset) + offset) / bytesPerElement;\n    const start = Math.floor(Math.max(0, Math.min(rawStart, dataEnd)));\n    // Absolute end of the result within |buffer|.\n    const end = Math.floor(Math.min(start + Math.max(length, 0), dataEnd));\n    return new Type(buffer, start, end - start);\n}\nfunction unsafeGetArrayBuffer(view) {\n    if (view instanceof ArrayBuffer) {\n        return view;\n    }\n    else {\n        return view.buffer;\n    }\n}\nfunction isArrayBufferView(obj) {\n    return obj && obj.buffer instanceof ArrayBuffer && obj.byteLength !== undefined && obj.byteOffset !== undefined;\n}\n//# sourceMappingURL=utf8.js.map","import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\nimport { toArrayBuffer } from './toArrayBuffer.js';\nimport { toUint8 } from './utf8.js';\nexport function decodeId3ImageFrame(frame) {\n    const metadataFrame = {\n        key: frame.type,\n        description: '',\n        data: '',\n        mimeType: null,\n        pictureType: null,\n    };\n    const utf8Encoding = 0x03;\n    if (frame.size < 2) {\n        return undefined;\n    }\n    if (frame.data[0] !== utf8Encoding) {\n        console.log('Ignore frame with unrecognized character ' + 'encoding');\n        return undefined;\n    }\n    const mimeTypeEndIndex = frame.data.subarray(1).indexOf(0);\n    if (mimeTypeEndIndex === -1) {\n        return undefined;\n    }\n    const mimeType = utf8ArrayToStr(toUint8(frame.data, 1, mimeTypeEndIndex));\n    const pictureType = frame.data[2 + mimeTypeEndIndex];\n    const descriptionEndIndex = frame.data\n        .subarray(3 + mimeTypeEndIndex)\n        .indexOf(0);\n    if (descriptionEndIndex === -1) {\n        return undefined;\n    }\n    const description = utf8ArrayToStr(toUint8(frame.data, 3 + mimeTypeEndIndex, descriptionEndIndex));\n    let data;\n    if (mimeType === '-->') {\n        data = utf8ArrayToStr(toUint8(frame.data, 4 + mimeTypeEndIndex + descriptionEndIndex));\n    }\n    else {\n        data = toArrayBuffer(frame.data.subarray(4 + mimeTypeEndIndex + descriptionEndIndex));\n    }\n    metadataFrame.mimeType = mimeType;\n    metadataFrame.pictureType = pictureType;\n    metadataFrame.description = description;\n    metadataFrame.data = data;\n    return metadataFrame;\n}\n//# sourceMappingURL=decodeId3ImageFrame.js.map","import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\n/**\n * Decode an ID3 PRIV frame.\n *\n * @param frame - the ID3 PRIV frame\n *\n * @returns The decoded ID3 PRIV frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function decodeId3PrivFrame(frame) {\n    /*\n    Format: <text string>\\0<binary data>\n    */\n    if (frame.size < 2) {\n        return undefined;\n    }\n    const owner = utf8ArrayToStr(frame.data, true);\n    const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n    return { key: frame.type, info: owner, data: privateData.buffer };\n}\n//# sourceMappingURL=decodeId3PrivFrame.js.map","import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\n/**\n * Decodes an ID3 text frame\n *\n * @param frame - the ID3 text frame\n *\n * @returns The decoded ID3 text frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function decodeId3TextFrame(frame) {\n    if (frame.size < 2) {\n        return undefined;\n    }\n    if (frame.type === 'TXXX') {\n        /*\n        Format:\n        [0]   = {Text Encoding}\n        [1-?] = {Description}\\0{Value}\n        */\n        let index = 1;\n        const description = utf8ArrayToStr(frame.data.subarray(index), true);\n        index += description.length + 1;\n        const value = utf8ArrayToStr(frame.data.subarray(index));\n        return { key: frame.type, info: description, data: value };\n    }\n    /*\n    Format:\n    [0]   = {Text Encoding}\n    [1-?] = {Value}\n    */\n    const text = utf8ArrayToStr(frame.data.subarray(1));\n    return { key: frame.type, info: '', data: text };\n}\n//# sourceMappingURL=decodeId3TextFrame.js.map","import { utf8ArrayToStr } from '../../utils/utf8ArrayToStr.js';\n/**\n * Decode a URL frame\n *\n * @param frame - the ID3 URL frame\n *\n * @returns The decoded ID3 URL frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function decodeId3UrlFrame(frame) {\n    if (frame.type === 'WXXX') {\n        /*\n        Format:\n        [0]   = {Text Encoding}\n        [1-?] = {Description}\\0{URL}\n        */\n        if (frame.size < 2) {\n            return undefined;\n        }\n        let index = 1;\n        const description = utf8ArrayToStr(frame.data.subarray(index), true);\n        index += description.length + 1;\n        const value = utf8ArrayToStr(frame.data.subarray(index));\n        return { key: frame.type, info: description, data: value };\n    }\n    /*\n    Format:\n    [0-?] = {URL}\n    */\n    const url = utf8ArrayToStr(frame.data);\n    return { key: frame.type, info: '', data: url };\n}\n//# sourceMappingURL=decodeId3UrlFrame.js.map","import { decodeId3ImageFrame } from './decodeId3ImageFrame.js';\nimport { decodeId3PrivFrame } from './decodeId3PrivFrame.js';\nimport { decodeId3TextFrame } from './decodeId3TextFrame.js';\nimport { decodeId3UrlFrame } from './decodeId3UrlFrame.js';\n/**\n * Decode an ID3 frame.\n *\n * @param frame - the ID3 frame\n *\n * @returns The decoded ID3 frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function decodeId3Frame(frame) {\n    if (frame.type === 'PRIV') {\n        return decodeId3PrivFrame(frame);\n    }\n    else if (frame.type[0] === 'W') {\n        return decodeId3UrlFrame(frame);\n    }\n    else if (frame.type === 'APIC') {\n        return decodeId3ImageFrame(frame);\n    }\n    return decodeId3TextFrame(frame);\n}\n//# sourceMappingURL=decodeId3Frame.js.map","import { readId3Size } from './readId3Size.js';\n/**\n * Returns the data of an ID3 frame.\n *\n * @param data - The data to read from\n *\n * @returns The data of the ID3 frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function getId3FrameData(data) {\n    /*\n    Frame ID       $xx xx xx xx (four characters)\n    Size           $xx xx xx xx\n    Flags          $xx xx\n    */\n    const type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n    const size = readId3Size(data, 4);\n    // skip frame id, size, and flags\n    const offset = 10;\n    return { type, size, data: data.subarray(offset, offset + size) };\n}\n//# sourceMappingURL=getId3FrameData.js.map","import { decodeId3Frame } from './util/decodeId3Frame.js';\nimport { getId3FrameData } from './util/getId3FrameData.js';\nimport { isId3Footer } from './util/isId3Footer.js';\nimport { isId3Header } from './util/isId3Header.js';\nimport { readId3Size } from './util/readId3Size.js';\nconst HEADER_FOOTER_SIZE = 10;\nconst FRAME_SIZE = 10;\n/**\n * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n *\n * @param id3Data - The ID3 data containing one or more ID3 tags\n *\n * @returns Array of ID3 frame objects\n *\n * @group ID3\n *\n * @beta\n */\nexport function getId3Frames(id3Data) {\n    let offset = 0;\n    const frames = [];\n    while (isId3Header(id3Data, offset)) {\n        const size = readId3Size(id3Data, offset + 6);\n        if ((id3Data[offset + 5] >> 6) & 1) {\n            // skip extended header\n            offset += HEADER_FOOTER_SIZE;\n        }\n        // skip past ID3 header\n        offset += HEADER_FOOTER_SIZE;\n        const end = offset + size;\n        // loop through frames in the ID3 tag\n        while (offset + FRAME_SIZE < end) {\n            const frameData = getId3FrameData(id3Data.subarray(offset));\n            const frame = decodeId3Frame(frameData);\n            if (frame) {\n                frames.push(frame);\n            }\n            // skip frame header and frame data\n            offset += frameData.size + HEADER_FOOTER_SIZE;\n        }\n        if (isId3Footer(id3Data, offset)) {\n            offset += HEADER_FOOTER_SIZE;\n        }\n    }\n    return frames;\n}\n//# sourceMappingURL=getId3Frames.js.map","/**\n * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n *\n * @param frame - the ID3 frame\n *\n * @returns `true` if the ID3 frame is an Elementary Stream timestamp frame\n *\n * @internal\n *\n * @group ID3\n */\nexport function isId3TimestampFrame(frame) {\n    return (frame &&\n        frame.key === 'PRIV' &&\n        frame.info === 'com.apple.streaming.transportStreamTimestamp');\n}\n//# sourceMappingURL=isId3TimestampFrame.js.map","/**\n * Read a 33 bit timestamp from an ID3 frame.\n *\n * @param timeStampFrame - the ID3 frame\n *\n * @returns The timestamp\n *\n * @internal\n *\n * @group ID3\n */\nexport function readId3Timestamp(timeStampFrame) {\n    if (timeStampFrame.data.byteLength === 8) {\n        const data = new Uint8Array(timeStampFrame.data);\n        // timestamp is 33 bit expressed as a big-endian eight-octet number,\n        // with the upper 31 bits set to zero.\n        const pts33Bit = data[3] & 0x1;\n        let timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];\n        timestamp /= 45;\n        if (pts33Bit) {\n            timestamp += 47721858.84;\n        } // 2^32 / 90\n        return Math.round(timestamp);\n    }\n    return undefined;\n}\n//# sourceMappingURL=readId3Timestamp.js.map","import { getId3Frames } from './getId3Frames.js';\nimport { isId3TimestampFrame } from './isId3TimestampFrame.js';\nimport { readId3Timestamp } from './util/readId3Timestamp.js';\n/**\n * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n *\n * @param data - Block of data containing one or more ID3 tags\n *\n * @returns The timestamp\n *\n * @group ID3\n *\n * @beta\n */\nexport function getId3Timestamp(data) {\n    const frames = getId3Frames(data);\n    for (let i = 0; i < frames.length; i++) {\n        const frame = frames[i];\n        if (isId3TimestampFrame(frame)) {\n            return readId3Timestamp(frame);\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=getId3Timestamp.js.map","import type { RationalTimestamp } from '../utils/timescale-conversion';\n\nexport interface Demuxer {\n  demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes?: boolean,\n    flush?: boolean,\n  ): DemuxerResult;\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult>;\n  flush(timeOffset?: number): DemuxerResult | Promise<DemuxerResult>;\n  destroy(): void;\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  );\n  resetTimeStamp(defaultInitPTS?: RationalTimestamp | null): void;\n  resetContiguity(): void;\n}\n\nexport interface DemuxerResult {\n  audioTrack: DemuxedAudioTrack;\n  videoTrack: DemuxedVideoTrackBase;\n  id3Track: DemuxedMetadataTrack;\n  textTrack: DemuxedUserdataTrack;\n}\n\nexport interface DemuxedTrack {\n  type: string;\n  id: number;\n  pid: number;\n  inputTimeScale: number;\n  sequenceNumber: number;\n  samples:\n    | AudioSample[]\n    | VideoSample[]\n    | MetadataSample[]\n    | UserdataSample[]\n    | Uint8Array;\n  timescale?: number;\n  container?: string;\n  dropped: number;\n  duration?: number;\n  pesData?: ElementaryStreamData | null;\n  codec?: string;\n}\n\nexport interface PassthroughTrack extends DemuxedTrack {\n  sampleDuration: number;\n  samples: Uint8Array;\n  timescale: number;\n  duration: number;\n  codec: string;\n  supplemental: string | undefined;\n}\nexport interface DemuxedAudioTrack extends DemuxedTrack {\n  type: 'audio';\n  segmentCodec: 'aac' | 'ac3' | 'mp3';\n  config?: number[] | Uint8Array;\n  samplerate?: number;\n  channelCount?: number;\n  manifestCodec?: string;\n  parsedCodec?: string;\n  samples: AudioSample[];\n}\n\nexport type DemuxedAAC = DemuxedAudioTrack & {\n  segmentCodec: 'aac';\n  samples: AACAudioSample[];\n};\n\nexport type DemuxedAC3 = DemuxedAudioTrack & {\n  segmentCodec: 'ac3';\n  config: Uint8Array;\n};\n\nexport interface DemuxedVideoTrackBase extends DemuxedTrack {\n  width?: number;\n  height?: number;\n  pixelRatio?: [number, number];\n  audFound?: boolean;\n  vps?: Uint8Array[];\n  pps?: Uint8Array[];\n  sps?: Uint8Array[];\n  naluState?: number;\n  segmentCodec?: string;\n  manifestCodec?: string;\n  samples: VideoSample[] | Uint8Array;\n  params?: object;\n}\n\nexport interface DemuxedVideoTrack extends DemuxedVideoTrackBase {\n  type: 'video';\n  segmentCodec: 'avc' | 'hevc';\n  samples: VideoSample[];\n  pixelRatio: [number, number];\n  width: number;\n  height: number;\n}\n\nexport type DemuxedAVC1 = DemuxedVideoTrack & {\n  segmentCodec: 'avc';\n  pps: Uint8Array[];\n  sps: Uint8Array[];\n};\n\nexport type DemuxedHEVC = DemuxedVideoTrack & {\n  segmentCodec: 'hevc';\n  params: {\n    general_profile_space: number;\n    general_tier_flag: number;\n    general_profile_idc: number;\n    general_profile_compatibility_flags: number[];\n    general_constraint_indicator_flags: number[];\n    general_level_idc: number;\n    min_spatial_segmentation_idc: number;\n    parallelismType: number;\n    chroma_format_idc: number;\n    bit_depth_luma_minus8: number;\n    bit_depth_chroma_minus8: number;\n    frame_rate: { fps: string; fixed: boolean };\n    temporal_id_nested: number;\n    num_temporal_layers: number;\n  };\n  pps: Uint8Array[];\n  sps: Uint8Array[];\n  vps: Uint8Array;\n};\n\nexport interface DemuxedMetadataTrack extends DemuxedTrack {\n  samples: MetadataSample[];\n}\n\nexport interface DemuxedUserdataTrack extends DemuxedTrack {\n  samples: UserdataSample[];\n}\n\nexport enum MetadataSchema {\n  audioId3 = 'org.id3',\n  dateRange = 'com.apple.quicktime.HLS',\n  emsg = 'https://aomedia.org/emsg/ID3',\n  misbklv = 'urn:misb:KLV:bin:1910.1',\n}\nexport interface MetadataSample {\n  pts: number;\n  dts: number;\n  duration: number;\n  len?: number;\n  data: Uint8Array;\n  type: MetadataSchema;\n}\n\nexport interface UserdataSample {\n  pts: number;\n  bytes?: Uint8Array;\n  type?: number;\n  payloadType?: number;\n  uuid?: string;\n  userData?: string;\n  userDataBytes?: Uint8Array;\n}\n\nexport interface VideoSample {\n  dts: number;\n  pts: number;\n  key: boolean;\n  frame: boolean;\n  units: VideoSampleUnit[];\n  length: number;\n}\n\nexport interface VideoSampleUnit {\n  data: Uint8Array;\n  type: number;\n  state?: number;\n}\n\nexport type AudioSample = {\n  unit: Uint8Array;\n  pts: number;\n};\n\nexport type AACAudioSample = {\n  unit: Uint8Array<ArrayBuffer>;\n};\n\nexport type AudioFrame = {\n  sample: AudioSample;\n  length: number;\n  missing: number;\n};\n\nexport interface ElementaryStreamData {\n  data: Uint8Array[];\n  size: number;\n}\n\nexport interface KeyData {\n  method: string;\n  key: Uint8Array<ArrayBuffer>;\n  iv: Uint8Array<ArrayBuffer>;\n}\n","import type { DemuxedTrack } from '../types/demuxer';\n\nexport function dummyTrack(type = '', inputTimeScale = 90000): DemuxedTrack {\n  return {\n    type,\n    id: -1,\n    pid: -1,\n    inputTimeScale,\n    sequenceNumber: -1,\n    samples: [],\n    dropped: 0,\n  };\n}\n","import { canParseId3 } from '@svta/common-media-library/id3/canParseId3';\nimport { getId3Data } from '@svta/common-media-library/id3/getId3Data';\nimport { getId3Timestamp } from '@svta/common-media-library/id3/getId3Timestamp';\nimport {\n  type AudioFrame,\n  type DemuxedAudioTrack,\n  type DemuxedMetadataTrack,\n  type DemuxedUserdataTrack,\n  type DemuxedVideoTrackBase,\n  type Demuxer,\n  type DemuxerResult,\n  type KeyData,\n  MetadataSchema,\n} from '../../types/demuxer';\nimport { appendUint8Array } from '../../utils/mp4-tools';\nimport { dummyTrack } from '../dummy-demuxed-track';\nimport type {\n  RationalTimestamp,\n  TimestampOffset,\n} from '../../utils/timescale-conversion';\n\nclass BaseAudioDemuxer implements Demuxer {\n  protected _audioTrack?: DemuxedAudioTrack;\n  protected _id3Track?: DemuxedMetadataTrack;\n  protected frameIndex: number = 0;\n  protected cachedData: Uint8Array | null = null;\n  protected basePTS: number | null = null;\n  protected initPTS: TimestampOffset | null = null;\n  protected lastPTS: number | null = null;\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    this._id3Track = {\n      type: 'id3',\n      id: 3,\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n    };\n  }\n\n  resetTimeStamp(deaultTimestamp: TimestampOffset | null) {\n    this.initPTS = deaultTimestamp;\n    this.resetContiguity();\n  }\n\n  resetContiguity(): void {\n    this.basePTS = null;\n    this.lastPTS = null;\n    this.frameIndex = 0;\n  }\n\n  canParse(data: Uint8Array, offset: number): boolean {\n    return false;\n  }\n\n  appendFrame(\n    track: DemuxedAudioTrack,\n    data: Uint8Array,\n    offset: number,\n  ): AudioFrame | void {}\n\n  // feed incoming data to the front of the parsing pipeline\n  demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    if (this.cachedData) {\n      data = appendUint8Array(this.cachedData, data);\n      this.cachedData = null;\n    }\n\n    let id3Data: Uint8Array | undefined = getId3Data(data, 0);\n    let offset = id3Data ? id3Data.length : 0;\n    let lastDataIndex;\n    const track = this._audioTrack as DemuxedAudioTrack;\n    const id3Track = this._id3Track as DemuxedMetadataTrack;\n    const timestamp = id3Data ? getId3Timestamp(id3Data) : undefined;\n    const length = data.length;\n\n    if (\n      this.basePTS === null ||\n      (this.frameIndex === 0 && Number.isFinite(timestamp))\n    ) {\n      this.basePTS = initPTSFn(timestamp, timeOffset, this.initPTS);\n      this.lastPTS = this.basePTS;\n    }\n\n    if (this.lastPTS === null) {\n      this.lastPTS = this.basePTS;\n    }\n\n    // more expressive than alternative: id3Data?.length\n    if (id3Data && id3Data.length > 0) {\n      id3Track.samples.push({\n        pts: this.lastPTS,\n        dts: this.lastPTS,\n        data: id3Data,\n        type: MetadataSchema.audioId3,\n        duration: Number.POSITIVE_INFINITY,\n      });\n    }\n\n    while (offset < length) {\n      if (this.canParse(data, offset)) {\n        const frame = this.appendFrame(track, data, offset);\n        if (frame) {\n          this.frameIndex++;\n          this.lastPTS = frame.sample.pts;\n          offset += frame.length;\n          lastDataIndex = offset;\n        } else {\n          offset = length;\n        }\n      } else if (canParseId3(data, offset)) {\n        // after a canParse, a call to getId3Data *should* always returns some data\n        id3Data = getId3Data(data, offset)!;\n        id3Track.samples.push({\n          pts: this.lastPTS,\n          dts: this.lastPTS,\n          data: id3Data,\n          type: MetadataSchema.audioId3,\n          duration: Number.POSITIVE_INFINITY,\n        });\n        offset += id3Data.length;\n        lastDataIndex = offset;\n      } else {\n        offset++;\n      }\n      if (offset === length && lastDataIndex !== length) {\n        const partialData = data.slice(lastDataIndex);\n        if (this.cachedData) {\n          this.cachedData = appendUint8Array(this.cachedData, partialData);\n        } else {\n          this.cachedData = partialData;\n        }\n      }\n    }\n\n    return {\n      audioTrack: track,\n      videoTrack: dummyTrack() as DemuxedVideoTrackBase,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error(\n        `[${this}] This demuxer does not support Sample-AES decryption`,\n      ),\n    );\n  }\n\n  flush(timeOffset: number): DemuxerResult {\n    // Parse cache in case of remaining frames.\n    const cachedData = this.cachedData;\n    if (cachedData) {\n      this.cachedData = null;\n      this.demux(cachedData, 0);\n    }\n\n    return {\n      audioTrack: this._audioTrack as DemuxedAudioTrack,\n      videoTrack: dummyTrack() as DemuxedVideoTrackBase,\n      id3Track: this._id3Track as DemuxedMetadataTrack,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  destroy() {\n    this.cachedData = null;\n    // @ts-ignore\n    this._audioTrack = this._id3Track = undefined;\n  }\n}\n\n/**\n * Initialize PTS\n * <p>\n *    use timestamp unless it is undefined, NaN or Infinity\n * </p>\n */\nexport const initPTSFn = (\n  timestamp: number | undefined,\n  timeOffset: number,\n  initPTS: RationalTimestamp | null,\n): number => {\n  if (Number.isFinite(timestamp as number)) {\n    return timestamp! * 90;\n  }\n  const init90kHz = initPTS\n    ? (initPTS.baseTime * 90000) / initPTS.timescale\n    : 0;\n  return timeOffset * 90000 + init90kHz;\n};\nexport default BaseAudioDemuxer;\n","/**\n *  MPEG parser helper\n */\nimport type { DemuxedAudioTrack } from '../../types/demuxer';\n\nlet chromeVersion: number | null = null;\n\nconst BitratesMap = [\n  32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56,\n  64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80,\n  96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144,\n  160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144,\n  160,\n];\n\nconst SamplingRateMap = [\n  44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000,\n];\n\nconst SamplesCoefficients = [\n  // MPEG 2.5\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // Reserved\n  [\n    0, // Reserved\n    0, // Layer3\n    0, // Layer2\n    0, // Layer1\n  ],\n  // MPEG 2\n  [\n    0, // Reserved\n    72, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n  // MPEG 1\n  [\n    0, // Reserved\n    144, // Layer3\n    144, // Layer2\n    12, // Layer1\n  ],\n];\n\nconst BytesInSlot = [\n  0, // Reserved\n  1, // Layer3\n  1, // Layer2\n  4, // Layer1\n];\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  offset: number,\n  pts: number,\n  frameIndex: number,\n) {\n  // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n  if (offset + 24 > data.length) {\n    return;\n  }\n\n  const header = parseHeader(data, offset);\n  if (header && offset + header.frameLength <= data.length) {\n    const frameDuration = (header.samplesPerFrame * 90000) / header.sampleRate;\n    const stamp = pts + frameIndex * frameDuration;\n    const sample = {\n      unit: data.subarray(offset, offset + header.frameLength),\n      pts: stamp,\n      dts: stamp,\n    };\n\n    track.config = [];\n    track.channelCount = header.channelCount;\n    track.samplerate = header.sampleRate;\n    track.samples.push(sample);\n\n    return { sample, length: header.frameLength, missing: 0 };\n  }\n}\n\nexport function parseHeader(data: Uint8Array, offset: number) {\n  const mpegVersion = (data[offset + 1] >> 3) & 3;\n  const mpegLayer = (data[offset + 1] >> 1) & 3;\n  const bitRateIndex = (data[offset + 2] >> 4) & 15;\n  const sampleRateIndex = (data[offset + 2] >> 2) & 3;\n  if (\n    mpegVersion !== 1 &&\n    bitRateIndex !== 0 &&\n    bitRateIndex !== 15 &&\n    sampleRateIndex !== 3\n  ) {\n    const paddingBit = (data[offset + 2] >> 1) & 1;\n    const channelMode = data[offset + 3] >> 6;\n    const columnInBitrates =\n      mpegVersion === 3 ? 3 - mpegLayer : mpegLayer === 3 ? 3 : 4;\n    const bitRate =\n      BitratesMap[columnInBitrates * 14 + bitRateIndex - 1] * 1000;\n    const columnInSampleRates =\n      mpegVersion === 3 ? 0 : mpegVersion === 2 ? 1 : 2;\n    const sampleRate =\n      SamplingRateMap[columnInSampleRates * 3 + sampleRateIndex];\n    const channelCount = channelMode === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n    const sampleCoefficient = SamplesCoefficients[mpegVersion][mpegLayer];\n    const bytesInSlot = BytesInSlot[mpegLayer];\n    const samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;\n    const frameLength =\n      Math.floor((sampleCoefficient * bitRate) / sampleRate + paddingBit) *\n      bytesInSlot;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    const needChromeFix = !!chromeVersion && chromeVersion <= 87;\n\n    if (\n      needChromeFix &&\n      mpegLayer === 2 &&\n      bitRate >= 224000 &&\n      channelMode === 0\n    ) {\n      // Work around bug in Chromium by setting channelMode to dual-channel (01) instead of stereo (00)\n      data[offset + 3] = data[offset + 3] | 0x80;\n    }\n\n    return { sampleRate, channelCount, frameLength, samplesPerFrame };\n  }\n}\n\nexport function isHeaderPattern(data: Uint8Array, offset: number): boolean {\n  return (\n    data[offset] === 0xff &&\n    (data[offset + 1] & 0xe0) === 0xe0 &&\n    (data[offset + 1] & 0x06) !== 0x00\n  );\n}\n\nexport function isHeader(data: Uint8Array, offset: number): boolean {\n  // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n  // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n  // More info http://www.mp3-tech.org/programmer/frame_header.html\n  return offset + 1 < data.length && isHeaderPattern(data, offset);\n}\n\nexport function canParse(data: Uint8Array, offset: number): boolean {\n  const headerSize = 4;\n\n  return isHeaderPattern(data, offset) && headerSize <= data.length - offset;\n}\n\nexport function probe(data: Uint8Array, offset: number): boolean {\n  // same as isHeader but we also check that MPEG frame follows last MPEG frame\n  // or end of data is reached\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    // MPEG header Length\n    const headerLength = 4;\n    // MPEG frame Length\n    const header = parseHeader(data, offset);\n    let frameLength = headerLength;\n    if (header?.frameLength) {\n      frameLength = header.frameLength;\n    }\n\n    const newOffset = offset + frameLength;\n    return newOffset === data.length || isHeader(data, newOffset);\n  }\n  return false;\n}\n","/**\n * AAC demuxer\n */\nimport { getId3Data } from '@svta/common-media-library/id3/getId3Data';\nimport * as ADTS from './adts';\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport * as MpegAudio from './mpegaudio';\nimport type { HlsConfig } from '../../config';\nimport type { HlsEventEmitter } from '../../events';\nimport type { DemuxedAudioTrack } from '../../types/demuxer';\nimport type { ILogger } from '../../utils/logger';\n\nclass AACDemuxer extends BaseAudioDemuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n\n  constructor(observer: HlsEventEmitter, config) {\n    super();\n    this.observer = observer;\n    this.config = config;\n  }\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/adts',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'aac',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n  static probe(data: Uint8Array | undefined, logger: ILogger): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    const id3Data = getId3Data(data, 0);\n    let offset = id3Data?.length || 0;\n\n    if (MpegAudio.probe(data, offset)) {\n      return false;\n    }\n\n    for (let length = data.length; offset < length; offset++) {\n      if (ADTS.probe(data, offset)) {\n        logger.log('ADTS sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return ADTS.canParse(data, offset);\n  }\n\n  appendFrame(track: DemuxedAudioTrack, data: Uint8Array, offset: number) {\n    ADTS.initTrackConfig(\n      track,\n      this.observer,\n      data,\n      offset,\n      track.manifestCodec,\n    );\n    const frame = ADTS.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS as number,\n      this.frameIndex,\n    );\n    if (frame && frame.missing === 0) {\n      return frame;\n    }\n  }\n}\n\nexport default AACDemuxer;\n","export const getAudioBSID = (data: Uint8Array, offset: number): number => {\n  // check the bsid to confirm ac-3 | ec-3\n  let bsid = 0;\n  let numBits = 5;\n  offset += numBits;\n  const temp = new Uint32Array(1); // unsigned 32 bit for temporary storage\n  const mask = new Uint32Array(1); // unsigned 32 bit mask value\n  const byte = new Uint8Array(1); // unsigned 8 bit for temporary storage\n  while (numBits > 0) {\n    byte[0] = data[offset];\n    // read remaining bits, upto 8 bits at a time\n    const bits = Math.min(numBits, 8);\n    const shift = 8 - bits;\n    mask[0] = (0xff000000 >>> (24 + shift)) << shift;\n    temp[0] = (byte[0] & mask[0]) >> shift;\n    bsid = !bsid ? temp[0] : (bsid << bits) | temp[0];\n    offset += 1;\n    numBits -= bits;\n  }\n  return bsid;\n};\n","import { getId3Data } from '@svta/common-media-library/id3/getId3Data';\nimport { getId3Timestamp } from '@svta/common-media-library/id3/getId3Timestamp';\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport { getAudioBSID } from './dolby';\nimport type { HlsEventEmitter } from '../../events';\nimport type { AudioFrame, DemuxedAudioTrack } from '../../types/demuxer';\n\nexport class AC3Demuxer extends BaseAudioDemuxer {\n  private readonly observer: HlsEventEmitter;\n\n  constructor(observer: HlsEventEmitter) {\n    super();\n    this.observer = observer;\n  }\n\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/ac-3',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'ac3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  canParse(data: Uint8Array, offset: number): boolean {\n    return offset + 64 < data.length;\n  }\n\n  appendFrame(\n    track: DemuxedAudioTrack,\n    data: Uint8Array,\n    offset: number,\n  ): AudioFrame | void {\n    const frameLength = appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS as number,\n      this.frameIndex,\n    );\n    if (frameLength !== -1) {\n      const sample = track.samples[track.samples.length - 1];\n      return { sample, length: frameLength, missing: 0 };\n    }\n  }\n\n  static probe(data: Uint8Array | undefined): boolean {\n    if (!data) {\n      return false;\n    }\n\n    const id3Data = getId3Data(data, 0);\n    if (!id3Data) {\n      return false;\n    }\n\n    // look for the ac-3 sync bytes\n    const offset = id3Data.length;\n    if (\n      data[offset] === 0x0b &&\n      data[offset + 1] === 0x77 &&\n      getId3Timestamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3\n      getAudioBSID(data, offset) < 16\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function appendFrame(\n  track: DemuxedAudioTrack,\n  data: Uint8Array,\n  start: number,\n  pts: number,\n  frameIndex: number,\n): number {\n  if (start + 8 > data.length) {\n    return -1; // not enough bytes left\n  }\n\n  if (data[start] !== 0x0b || data[start + 1] !== 0x77) {\n    return -1; // invalid magic\n  }\n\n  // get sample rate\n  const samplingRateCode = data[start + 4] >> 6;\n  if (samplingRateCode >= 3) {\n    return -1; // invalid sampling rate\n  }\n\n  const samplingRateMap = [48000, 44100, 32000];\n  const sampleRate = samplingRateMap[samplingRateCode];\n\n  // get frame size\n  const frameSizeCode = data[start + 4] & 0x3f;\n  const frameSizeMap = [\n    64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105,\n    144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174,\n    240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244,\n    336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417,\n    576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558,\n    768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975,\n    1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728,\n    1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920,\n  ];\n\n  const frameLength = frameSizeMap[frameSizeCode * 3 + samplingRateCode] * 2;\n  if (start + frameLength > data.length) {\n    return -1;\n  }\n\n  // get channel count\n  const channelMode = data[start + 6] >> 5;\n  let skipCount = 0;\n  if (channelMode === 2) {\n    skipCount += 2;\n  } else {\n    if (channelMode & 1 && channelMode !== 1) {\n      skipCount += 2;\n    }\n    if (channelMode & 4) {\n      skipCount += 2;\n    }\n  }\n\n  const lfeon =\n    (((data[start + 6] << 8) | data[start + 7]) >> (12 - skipCount)) & 1;\n\n  const channelsMap = [2, 1, 2, 3, 3, 4, 4, 5];\n  const channelCount = channelsMap[channelMode] + lfeon;\n\n  // build dac3 box\n  const bsid = data[start + 5] >> 3;\n  const bsmod = data[start + 5] & 7;\n\n  const config = new Uint8Array([\n    (samplingRateCode << 6) | (bsid << 1) | (bsmod >> 2),\n    ((bsmod & 3) << 6) |\n      (channelMode << 3) |\n      (lfeon << 2) |\n      (frameSizeCode >> 4),\n    (frameSizeCode << 4) & 0xe0,\n  ]);\n\n  const frameDuration = (1536 / sampleRate) * 90000;\n  const stamp = pts + frameIndex * frameDuration;\n  const unit = data.subarray(start, start + frameLength);\n\n  track.config = config;\n  track.channelCount = channelCount;\n  track.samplerate = sampleRate;\n  track.samples.push({ unit, pts: stamp });\n\n  return frameLength;\n}\n","/**\n * MP3 demuxer\n */\nimport { getId3Data } from '@svta/common-media-library/id3/getId3Data';\nimport { getId3Timestamp } from '@svta/common-media-library/id3/getId3Timestamp';\nimport BaseAudioDemuxer from './base-audio-demuxer';\nimport { getAudioBSID } from './dolby';\nimport * as MpegAudio from './mpegaudio';\nimport { logger } from '../../utils/logger';\n\nclass MP3Demuxer extends BaseAudioDemuxer {\n  resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    super.resetInitSegment(initSegment, audioCodec, videoCodec, trackDuration);\n    this._audioTrack = {\n      container: 'audio/mpeg',\n      type: 'audio',\n      id: 2,\n      pid: -1,\n      sequenceNumber: 0,\n      segmentCodec: 'mp3',\n      samples: [],\n      manifestCodec: audioCodec,\n      duration: trackDuration,\n      inputTimeScale: 90000,\n      dropped: 0,\n    };\n  }\n\n  static probe(data: Uint8Array | undefined): boolean {\n    if (!data) {\n      return false;\n    }\n\n    // check if data contains ID3 timestamp and MPEG sync word\n    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n    // More info http://www.mp3-tech.org/programmer/frame_header.html\n    const id3Data = getId3Data(data, 0);\n    let offset = id3Data?.length || 0;\n\n    // Check for ac-3|ec-3 sync bytes and return false if present\n    if (\n      id3Data &&\n      data[offset] === 0x0b &&\n      data[offset + 1] === 0x77 &&\n      getId3Timestamp(id3Data) !== undefined &&\n      // check the bsid to confirm ac-3 or ec-3 (not mp3)\n      getAudioBSID(data, offset) <= 16\n    ) {\n      return false;\n    }\n\n    for (let length = data.length; offset < length; offset++) {\n      if (MpegAudio.probe(data, offset)) {\n        logger.log('MPEG Audio sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  canParse(data, offset) {\n    return MpegAudio.canParse(data, offset);\n  }\n\n  appendFrame(track, data, offset) {\n    if (this.basePTS === null) {\n      return;\n    }\n    return MpegAudio.appendFrame(\n      track,\n      data,\n      offset,\n      this.basePTS,\n      this.frameIndex,\n    );\n  }\n}\n\nexport default MP3Demuxer;\n","/**\n * MP4 demuxer\n */\nimport { dummyTrack } from './dummy-demuxed-track';\nimport {\n  type DemuxedAudioTrack,\n  type DemuxedMetadataTrack,\n  type DemuxedUserdataTrack,\n  type Demuxer,\n  type DemuxerResult,\n  type KeyData,\n  MetadataSchema,\n  type PassthroughTrack,\n} from '../types/demuxer';\nimport {\n  appendUint8Array,\n  findBox,\n  hasMoofData,\n  parseEmsg,\n  parseInitSegment,\n  parseSamples,\n  RemuxerTrackIdConfig,\n  segmentValidRange,\n} from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type { IEmsgParsingData } from '../utils/mp4-tools';\n\nconst emsgSchemePattern = /\\/emsg[-/]ID3/i;\n\nclass MP4Demuxer implements Demuxer {\n  private remainderData: Uint8Array | null = null;\n  private timeOffset: number = 0;\n  private config: HlsConfig;\n  private videoTrack?: PassthroughTrack;\n  private audioTrack?: DemuxedAudioTrack;\n  private id3Track?: DemuxedMetadataTrack;\n  private txtTrack?: DemuxedUserdataTrack;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig) {\n    this.config = config;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n  ) {\n    const videoTrack = (this.videoTrack = dummyTrack(\n      'video',\n      1,\n    ) as PassthroughTrack);\n    const audioTrack = (this.audioTrack = dummyTrack(\n      'audio',\n      1,\n    ) as DemuxedAudioTrack);\n    const captionTrack = (this.txtTrack = dummyTrack(\n      'text',\n      1,\n    ) as DemuxedUserdataTrack);\n\n    this.id3Track = dummyTrack('id3', 1) as DemuxedMetadataTrack;\n    this.timeOffset = 0;\n\n    if (!initSegment?.byteLength) {\n      return;\n    }\n    const initData = parseInitSegment(initSegment);\n\n    if (initData.video) {\n      const { id, timescale, codec, supplemental } = initData.video;\n      videoTrack.id = id;\n      videoTrack.timescale = captionTrack.timescale = timescale;\n      videoTrack.codec = codec;\n      videoTrack.supplemental = supplemental;\n    }\n\n    if (initData.audio) {\n      const { id, timescale, codec } = initData.audio;\n      audioTrack.id = id;\n      audioTrack.timescale = timescale;\n      audioTrack.codec = codec;\n    }\n\n    captionTrack.id = RemuxerTrackIdConfig.text;\n    videoTrack.sampleDuration = 0;\n    videoTrack.duration = audioTrack.duration = trackDuration;\n  }\n\n  public resetContiguity(): void {\n    this.remainderData = null;\n  }\n\n  static probe(data: Uint8Array) {\n    return hasMoofData(data);\n  }\n\n  public demux(data: Uint8Array, timeOffset: number): DemuxerResult {\n    this.timeOffset = timeOffset;\n    // Load all data into the avc track. The CMAF remuxer will look for the data in the samples object; the rest of the fields do not matter\n    let videoSamples = data;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    if (this.config.progressive) {\n      // Split the bytestream into two ranges: one encompassing all data up until the start of the last moof, and everything else.\n      // This is done to guarantee that we're sending valid data to MSE - when demuxing progressively, we have no guarantee\n      // that the fetch loader gives us flush moof+mdat pairs. If we push jagged data to MSE, it will throw an exception.\n      if (this.remainderData) {\n        videoSamples = appendUint8Array(this.remainderData, data);\n      }\n      const segmentedData = segmentValidRange(videoSamples);\n      this.remainderData = segmentedData.remainder;\n      videoTrack.samples = segmentedData.valid || new Uint8Array();\n    } else {\n      videoTrack.samples = videoSamples;\n    }\n    const id3Track = this.extractID3Track(videoTrack, timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: this.audioTrack as DemuxedAudioTrack,\n      id3Track,\n      textTrack: this.txtTrack as DemuxedUserdataTrack,\n    };\n  }\n\n  public flush() {\n    const timeOffset = this.timeOffset;\n    const videoTrack = this.videoTrack as PassthroughTrack;\n    const textTrack = this.txtTrack as DemuxedUserdataTrack;\n    videoTrack.samples = this.remainderData || new Uint8Array();\n    this.remainderData = null;\n\n    const id3Track = this.extractID3Track(videoTrack, this.timeOffset);\n    textTrack.samples = parseSamples(timeOffset, videoTrack);\n\n    return {\n      videoTrack,\n      audioTrack: dummyTrack() as DemuxedAudioTrack,\n      id3Track,\n      textTrack: dummyTrack() as DemuxedUserdataTrack,\n    };\n  }\n\n  private extractID3Track(\n    videoTrack: PassthroughTrack,\n    timeOffset: number,\n  ): DemuxedMetadataTrack {\n    const id3Track = this.id3Track as DemuxedMetadataTrack;\n    if (videoTrack.samples.length) {\n      const emsgs = findBox(videoTrack.samples, ['emsg']);\n      if (emsgs) {\n        emsgs.forEach((data: Uint8Array) => {\n          const emsgInfo = parseEmsg(data);\n          if (emsgSchemePattern.test(emsgInfo.schemeIdUri)) {\n            const pts = getEmsgStartTime(emsgInfo, timeOffset);\n            let duration =\n              emsgInfo.eventDuration === 0xffffffff\n                ? Number.POSITIVE_INFINITY\n                : emsgInfo.eventDuration / emsgInfo.timeScale;\n            // Safari takes anything <= 0.001 seconds and maps it to Infinity\n            if (duration <= 0.001) {\n              duration = Number.POSITIVE_INFINITY;\n            }\n            const payload = emsgInfo.payload;\n            id3Track.samples.push({\n              data: payload,\n              len: payload.byteLength,\n              dts: pts,\n              pts: pts,\n              type: MetadataSchema.emsg,\n              duration: duration,\n            });\n          } else if (\n            this.config.enableEmsgKLVMetadata &&\n            emsgInfo.schemeIdUri.startsWith('urn:misb:KLV:bin:1910.1')\n          ) {\n            const pts = getEmsgStartTime(emsgInfo, timeOffset);\n            id3Track.samples.push({\n              data: emsgInfo.payload,\n              len: emsgInfo.payload.byteLength,\n              dts: pts,\n              pts: pts,\n              type: MetadataSchema.misbklv,\n              duration: Number.POSITIVE_INFINITY,\n            });\n          }\n        });\n      }\n    }\n    return id3Track;\n  }\n\n  demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    return Promise.reject(\n      new Error('The MP4 demuxer does not support SAMPLE-AES decryption'),\n    );\n  }\n\n  destroy() {\n    // @ts-ignore\n    this.config = null;\n    this.remainderData = null;\n    this.videoTrack =\n      this.audioTrack =\n      this.id3Track =\n      this.txtTrack =\n        undefined;\n  }\n}\n\nfunction getEmsgStartTime(\n  emsgInfo: IEmsgParsingData,\n  timeOffset: number,\n): number {\n  return Number.isFinite(emsgInfo.presentationTime)\n    ? (emsgInfo.presentationTime as number) / emsgInfo.timeScale\n    : timeOffset +\n        (emsgInfo.presentationTimeDelta as number) / emsgInfo.timeScale;\n}\n\nexport default MP4Demuxer;\n","/**\n * SAMPLE-AES decrypter\n */\n\nimport Decrypter from '../crypt/decrypter';\nimport { DecrypterAesMode } from '../crypt/decrypter-aes-mode';\nimport { discardEPB } from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type {\n  AACAudioSample,\n  DemuxedVideoTrackBase,\n  KeyData,\n  VideoSample,\n  VideoSampleUnit,\n} from '../types/demuxer';\n\nclass SampleAesDecrypter {\n  private keyData: KeyData;\n  private decrypter: Decrypter;\n\n  constructor(observer: HlsEventEmitter, config: HlsConfig, keyData: KeyData) {\n    this.keyData = keyData;\n    this.decrypter = new Decrypter(config, {\n      removePKCS7Padding: false,\n    });\n  }\n\n  decryptBuffer(encryptedData: Uint8Array | ArrayBuffer): Promise<ArrayBuffer> {\n    return this.decrypter.decrypt(\n      encryptedData,\n      this.keyData.key.buffer,\n      this.keyData.iv.buffer,\n      DecrypterAesMode.cbc,\n    );\n  }\n\n  // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  private decryptAacSample(\n    samples: AACAudioSample[],\n    sampleIndex: number,\n    callback: () => void,\n  ) {\n    const curUnit = samples[sampleIndex].unit;\n    if (curUnit.length <= 16) {\n      // No encrypted portion in this sample (first 16 bytes is not\n      // encrypted, see https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/HLS_Sample_Encryption/Encryption/Encryption.html),\n      return;\n    }\n    const encryptedData = curUnit.subarray(\n      16,\n      curUnit.length - (curUnit.length % 16),\n    );\n    const encryptedBuffer = encryptedData.buffer.slice(\n      encryptedData.byteOffset,\n      encryptedData.byteOffset + encryptedData.length,\n    );\n\n    this.decryptBuffer(encryptedBuffer)\n      .then((decryptedBuffer: ArrayBuffer) => {\n        const decryptedData = new Uint8Array(decryptedBuffer);\n        curUnit.set(decryptedData, 16);\n\n        if (!this.decrypter.isSync()) {\n          this.decryptAacSamples(samples, sampleIndex + 1, callback);\n        }\n      })\n      .catch(callback);\n  }\n\n  decryptAacSamples(\n    samples: AACAudioSample[],\n    sampleIndex: number,\n    callback: () => void,\n  ) {\n    for (; ; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      this.decryptAacSample(samples, sampleIndex, callback);\n\n      if (!this.decrypter.isSync()) {\n        return;\n      }\n    }\n  }\n\n  // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  getAvcEncryptedData(decodedData: Uint8Array) {\n    const encryptedDataLen =\n      Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    const encryptedData = new Int8Array(encryptedDataLen);\n    let outputPos = 0;\n    for (\n      let inputPos = 32;\n      inputPos < decodedData.length - 16;\n      inputPos += 160, outputPos += 16\n    ) {\n      encryptedData.set(\n        decodedData.subarray(inputPos, inputPos + 16),\n        outputPos,\n      );\n    }\n\n    return encryptedData;\n  }\n\n  getAvcDecryptedUnit(decodedData: Uint8Array, decryptedData: ArrayBufferLike) {\n    const uint8DecryptedData = new Uint8Array(decryptedData);\n    let inputPos = 0;\n    for (\n      let outputPos = 32;\n      outputPos < decodedData.length - 16;\n      outputPos += 160, inputPos += 16\n    ) {\n      decodedData.set(\n        uint8DecryptedData.subarray(inputPos, inputPos + 16),\n        outputPos,\n      );\n    }\n\n    return decodedData;\n  }\n\n  decryptAvcSample(\n    samples: VideoSample[],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void,\n    curUnit: VideoSampleUnit,\n  ) {\n    const decodedData = discardEPB(curUnit.data);\n    const encryptedData = this.getAvcEncryptedData(decodedData);\n\n    this.decryptBuffer(encryptedData.buffer)\n      .then((decryptedBuffer) => {\n        curUnit.data = this.getAvcDecryptedUnit(decodedData, decryptedBuffer);\n\n        if (!this.decrypter.isSync()) {\n          this.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n        }\n      })\n      .catch(callback);\n  }\n\n  decryptAvcSamples(\n    samples: DemuxedVideoTrackBase['samples'],\n    sampleIndex: number,\n    unitIndex: number,\n    callback: () => void,\n  ) {\n    if (samples instanceof Uint8Array) {\n      throw new Error('Cannot decrypt samples of type Uint8Array');\n    }\n\n    for (; ; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      const curUnits = samples[sampleIndex].units;\n      for (; ; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        const curUnit = curUnits[unitIndex];\n        if (\n          curUnit.data.length <= 48 ||\n          (curUnit.type !== 1 && curUnit.type !== 5)\n        ) {\n          continue;\n        }\n\n        this.decryptAvcSample(\n          samples,\n          sampleIndex,\n          unitIndex,\n          callback,\n          curUnit,\n        );\n\n        if (!this.decrypter.isSync()) {\n          return;\n        }\n      }\n    }\n  }\n}\n\nexport default SampleAesDecrypter;\n","import { appendUint8Array } from '../../utils/mp4-tools';\nimport type {\n  DemuxedUserdataTrack,\n  DemuxedVideoTrack,\n  VideoSample,\n  VideoSampleUnit,\n} from '../../types/demuxer';\nimport type { ParsedVideoSample } from '../tsdemuxer';\nimport type { PES } from '../tsdemuxer';\n\nabstract class BaseVideoParser {\n  protected VideoSample: ParsedVideoSample | null = null;\n\n  protected createVideoSample(\n    key: boolean,\n    pts: number | undefined,\n    dts: number | undefined,\n  ): ParsedVideoSample {\n    return {\n      key,\n      frame: false,\n      pts,\n      dts,\n      units: [],\n      length: 0,\n    };\n  }\n\n  protected getLastNalUnit(\n    samples: VideoSample[],\n  ): VideoSampleUnit | undefined {\n    let VideoSample = this.VideoSample;\n    let lastUnit: VideoSampleUnit | undefined;\n    // try to fallback to previous sample if current one is empty\n    if (!VideoSample || VideoSample.units.length === 0) {\n      VideoSample = samples[samples.length - 1];\n    }\n    if (VideoSample?.units) {\n      const units = VideoSample.units;\n      lastUnit = units[units.length - 1];\n    }\n    return lastUnit;\n  }\n\n  protected pushAccessUnit(\n    VideoSample: ParsedVideoSample,\n    videoTrack: DemuxedVideoTrack,\n  ) {\n    if (VideoSample.units.length && VideoSample.frame) {\n      // if sample does not have PTS/DTS, patch with last sample PTS/DTS\n      if (VideoSample.pts === undefined) {\n        const samples = videoTrack.samples;\n        const nbSamples = samples.length;\n        if (nbSamples) {\n          const lastSample = samples[nbSamples - 1];\n          VideoSample.pts = lastSample.pts;\n          VideoSample.dts = lastSample.dts;\n        } else {\n          // dropping samples, no timestamp found\n          videoTrack.dropped++;\n          return;\n        }\n      }\n      videoTrack.samples.push(VideoSample as VideoSample);\n    }\n  }\n\n  abstract parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    last: boolean,\n  );\n\n  protected abstract getNALuType(data: Uint8Array, offset: number): number;\n\n  protected parseNALu(\n    track: DemuxedVideoTrack,\n    array: Uint8Array,\n    endOfSegment: boolean,\n  ): Array<{\n    data: Uint8Array;\n    type: number;\n    state?: number;\n  }> {\n    const len = array.byteLength;\n    let state = track.naluState || 0;\n    const lastState = state;\n    const units: VideoSampleUnit[] = [];\n    let i = 0;\n    let value: number;\n    let overflow: number;\n    let unitType: number;\n    let lastUnitStart = -1;\n    let lastUnitType: number = 0;\n    // logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0;\n      // NALu type is value read from offset 0\n      lastUnitType = this.getNALuType(array, 0);\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++];\n      // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      }\n      // here we have state either equal to 2 or 3\n      if (!value) {\n        state = 3;\n      } else if (value === 1) {\n        overflow = i - state - 1;\n        if (lastUnitStart >= 0) {\n          const unit: VideoSampleUnit = {\n            data: array.subarray(lastUnitStart, overflow),\n            type: lastUnitType,\n          };\n          // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          const lastUnit = this.getLastNalUnit(track.samples);\n          if (lastUnit) {\n            if (lastState && i <= 4 - lastState) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n              // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(\n                  0,\n                  lastUnit.data.byteLength - lastState,\n                );\n              }\n            }\n            // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n\n            if (overflow > 0) {\n              // logger.log('first NALU found with overflow:' + overflow);\n              lastUnit.data = appendUint8Array(\n                lastUnit.data,\n                array.subarray(0, overflow),\n              );\n              lastUnit.state = 0;\n            }\n          }\n        }\n        // check if we can read unit type\n        if (i < len) {\n          unitType = this.getNALuType(array, i);\n          // logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n    if (lastUnitStart >= 0 && state >= 0) {\n      const unit: VideoSampleUnit = {\n        data: array.subarray(lastUnitStart, len),\n        type: lastUnitType,\n        state: state,\n      };\n      units.push(unit);\n      // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    }\n    // no NALu found\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      const lastUnit = this.getLastNalUnit(track.samples);\n      if (lastUnit) {\n        lastUnit.data = appendUint8Array(lastUnit.data, array);\n      }\n    }\n    track.naluState = state;\n    return units;\n  }\n}\n\nexport default BaseVideoParser;\n","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n */\n\nimport { logger } from '../../utils/logger';\n\nclass ExpGolomb {\n  private data: Uint8Array;\n  public bytesAvailable: number;\n  private word: number;\n  private bitsAvailable: number;\n\n  constructor(data: Uint8Array) {\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  // ():void\n  loadWord(): void {\n    const data = this.data;\n    const bytesAvailable = this.bytesAvailable;\n    const position = data.byteLength - bytesAvailable;\n    const workingBytes = new Uint8Array(4);\n    const availableBytes = Math.min(4, bytesAvailable);\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0);\n    // track the amount of this.data that has been processed\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  }\n\n  // (count:int):void\n  skipBits(count: number): void {\n    let skipBytes; // :int\n    count = Math.min(count, this.bytesAvailable * 8 + this.bitsAvailable);\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= skipBytes << 3;\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  }\n\n  // (size:int):uint\n  readBits(size: number): number {\n    let bits = Math.min(this.bitsAvailable, size); // :uint\n    const valu = this.word >>> (32 - bits); // :uint\n    if (size > 32) {\n      logger.error('Cannot read more than 32 bits at a time');\n    }\n\n    this.bitsAvailable -= bits;\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    } else {\n      throw new Error('no bits available');\n    }\n\n    bits = size - bits;\n    if (bits > 0 && this.bitsAvailable) {\n      return (valu << bits) | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  }\n\n  // ():uint\n  skipLZ(): number {\n    let leadingZeroCount; // :uint\n    for (\n      leadingZeroCount = 0;\n      leadingZeroCount < this.bitsAvailable;\n      ++leadingZeroCount\n    ) {\n      if ((this.word & (0x80000000 >>> leadingZeroCount)) !== 0) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    // we exhausted word and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  }\n\n  // ():void\n  skipUEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():void\n  skipEG(): void {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():uint\n  readUEG(): number {\n    const clz = this.skipLZ(); // :uint\n    return this.readBits(clz + 1) - 1;\n  }\n\n  // ():int\n  readEG(): number {\n    const valu = this.readUEG(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  }\n\n  // Some convenience functions\n  // :Boolean\n  readBoolean(): boolean {\n    return this.readBits(1) === 1;\n  }\n\n  // ():int\n  readUByte(): number {\n    return this.readBits(8);\n  }\n\n  // ():int\n  readUShort(): number {\n    return this.readBits(16);\n  }\n\n  // ():int\n  readUInt(): number {\n    return this.readBits(32);\n  }\n}\n\nexport default ExpGolomb;\n","import BaseVideoParser from './base-video-parser';\nimport ExpGolomb from './exp-golomb';\nimport { parseSEIMessageFromNALu } from '../../utils/mp4-tools';\nimport type {\n  DemuxedUserdataTrack,\n  DemuxedVideoTrack,\n} from '../../types/demuxer';\nimport type { PES } from '../tsdemuxer';\n\nclass AvcVideoParser extends BaseVideoParser {\n  public parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    endOfSegment: boolean,\n  ) {\n    const units = this.parseNALu(track, pes.data, endOfSegment);\n    let VideoSample = this.VideoSample;\n    let push: boolean;\n    let spsfound = false;\n    // free pes.data to save up some memory\n    (pes as any).data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (VideoSample && units.length && !track.audFound) {\n      this.pushAccessUnit(VideoSample, track);\n      VideoSample = this.VideoSample = this.createVideoSample(\n        false,\n        pes.pts,\n        pes.dts,\n      );\n    }\n\n    units.forEach((unit) => {\n      switch (unit.type) {\n        // NDR\n        case 1: {\n          let iskey = false;\n          push = true;\n          const data = unit.data;\n          // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n          if (spsfound && data.length > 4) {\n            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n            const sliceType = this.readSliceType(data);\n            // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n            // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n            // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n            // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n            // if (sliceType === 2 || sliceType === 7) {\n            if (\n              sliceType === 2 ||\n              sliceType === 4 ||\n              sliceType === 7 ||\n              sliceType === 9\n            ) {\n              iskey = true;\n            }\n          }\n\n          if (iskey) {\n            // if we have non-keyframe data already, that cannot belong to the same frame as a keyframe, so force a push\n            if (VideoSample?.frame && !VideoSample.key) {\n              this.pushAccessUnit(VideoSample, track);\n              VideoSample = this.VideoSample = null;\n            }\n          }\n\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n            );\n          }\n          VideoSample.frame = true;\n          VideoSample.key = iskey;\n\n          break;\n          // IDR\n        }\n        case 5:\n          push = true;\n          // handle PES not starting with AUD\n          // if we have frame data already, that cannot belong to the same frame, so force a push\n          if (VideoSample?.frame && !VideoSample.key) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = this.VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n            );\n          }\n\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n        // SEI\n        case 6: {\n          push = true;\n          parseSEIMessageFromNALu(\n            unit.data,\n            1,\n            pes.pts as number,\n            textTrack.samples,\n          );\n          break;\n          // SPS\n        }\n        case 7: {\n          push = true;\n          spsfound = true;\n          const sps = unit.data;\n          const config = this.readSPS(sps);\n          if (\n            !track.sps ||\n            track.width !== config.width ||\n            track.height !== config.height ||\n            track.pixelRatio?.[0] !== config.pixelRatio[0] ||\n            track.pixelRatio?.[1] !== config.pixelRatio[1]\n          ) {\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.sps = [sps];\n            const codecarray = sps.subarray(1, 4);\n            let codecstring = 'avc1.';\n            for (let i = 0; i < 3; i++) {\n              let h = codecarray[i].toString(16);\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n\n              codecstring += h;\n            }\n            track.codec = codecstring;\n          }\n          break;\n        }\n        // PPS\n        case 8:\n          push = true;\n\n          track.pps = [unit.data];\n\n          break;\n        // AUD\n        case 9:\n          push = true;\n          track.audFound = true;\n          if (VideoSample?.frame) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              false,\n              pes.pts,\n              pes.dts,\n            );\n          }\n          break;\n        // Filler Data\n        case 12:\n          push = true;\n          break;\n        default:\n          push = false;\n\n          break;\n      }\n      if (VideoSample && push) {\n        const units = VideoSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (endOfSegment && VideoSample) {\n      this.pushAccessUnit(VideoSample, track);\n      this.VideoSample = null;\n    }\n  }\n\n  protected getNALuType(data: Uint8Array, offset: number): number {\n    return data[offset] & 0x1f;\n  }\n\n  readSliceType(data: Uint8Array) {\n    const eg = new ExpGolomb(data);\n    // skip NALu type\n    eg.readUByte();\n    // discard first_mb_in_slice\n    eg.readUEG();\n    // return slice_type\n    return eg.readUEG();\n  }\n\n  /**\n   * The scaling list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList(count: number, reader: ExpGolomb): void {\n    let lastScale = 8;\n    let nextScale = 8;\n    let deltaScale;\n    for (let j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = reader.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  }\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @returns an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSPS(sps: Uint8Array): {\n    width: number;\n    height: number;\n    pixelRatio: [number, number];\n  } {\n    const eg = new ExpGolomb(sps);\n    let frameCropLeftOffset = 0;\n    let frameCropRightOffset = 0;\n    let frameCropTopOffset = 0;\n    let frameCropBottomOffset = 0;\n    let numRefFramesInPicOrderCntCycle;\n    let scalingListCount;\n    let i;\n    const readUByte = eg.readUByte.bind(eg);\n    const readBits = eg.readBits.bind(eg);\n    const readUEG = eg.readUEG.bind(eg);\n    const readBoolean = eg.readBoolean.bind(eg);\n    const skipBits = eg.skipBits.bind(eg);\n    const skipEG = eg.skipEG.bind(eg);\n    const skipUEG = eg.skipUEG.bind(eg);\n    const skipScalingList = this.skipScalingList.bind(this);\n\n    readUByte();\n    const profileIdc = readUByte(); // profile_idc\n    readBits(5); // profileCompat constraint_set[0-4]_flag, u(5)\n    skipBits(3); // reserved_zero_3bits u(3),\n    readUByte(); // level_idc u(8)\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n    if (\n      profileIdc === 100 ||\n      profileIdc === 110 ||\n      profileIdc === 122 ||\n      profileIdc === 244 ||\n      profileIdc === 44 ||\n      profileIdc === 83 ||\n      profileIdc === 86 ||\n      profileIdc === 118 ||\n      profileIdc === 128\n    ) {\n      const chromaFormatIdc = readUEG();\n      if (chromaFormatIdc === 3) {\n        skipBits(1);\n      } // separate_colour_plane_flag\n\n      skipUEG(); // bit_depth_luma_minus8\n      skipUEG(); // bit_depth_chroma_minus8\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, eg);\n            } else {\n              skipScalingList(64, eg);\n            }\n          }\n        }\n      }\n    }\n    skipUEG(); // log2_max_frame_num_minus4\n    const picOrderCntType = readUEG();\n    if (picOrderCntType === 0) {\n      readUEG(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n      skipEG(); // offset_for_non_ref_pic\n      skipEG(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = readUEG();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG();\n      } // offset_for_ref_frame[ i ]\n    }\n    skipUEG(); // max_num_ref_frames\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    const picWidthInMbsMinus1 = readUEG();\n    const picHeightInMapUnitsMinus1 = readUEG();\n    const frameMbsOnlyFlag = readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1);\n    } // mb_adaptive_frame_field_flag\n\n    skipBits(1); // direct_8x8_inference_flag\n    if (readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n    let pixelRatio: [number, number] = [1, 1];\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        const aspectRatioIdc = readUByte();\n        switch (aspectRatioIdc) {\n          case 1:\n            pixelRatio = [1, 1];\n            break;\n          case 2:\n            pixelRatio = [12, 11];\n            break;\n          case 3:\n            pixelRatio = [10, 11];\n            break;\n          case 4:\n            pixelRatio = [16, 11];\n            break;\n          case 5:\n            pixelRatio = [40, 33];\n            break;\n          case 6:\n            pixelRatio = [24, 11];\n            break;\n          case 7:\n            pixelRatio = [20, 11];\n            break;\n          case 8:\n            pixelRatio = [32, 11];\n            break;\n          case 9:\n            pixelRatio = [80, 33];\n            break;\n          case 10:\n            pixelRatio = [18, 11];\n            break;\n          case 11:\n            pixelRatio = [15, 11];\n            break;\n          case 12:\n            pixelRatio = [64, 33];\n            break;\n          case 13:\n            pixelRatio = [160, 99];\n            break;\n          case 14:\n            pixelRatio = [4, 3];\n            break;\n          case 15:\n            pixelRatio = [3, 2];\n            break;\n          case 16:\n            pixelRatio = [2, 1];\n            break;\n          case 255: {\n            pixelRatio = [\n              (readUByte() << 8) | readUByte(),\n              (readUByte() << 8) | readUByte(),\n            ];\n            break;\n          }\n        }\n      }\n    }\n    return {\n      width: Math.ceil(\n        (picWidthInMbsMinus1 + 1) * 16 -\n          frameCropLeftOffset * 2 -\n          frameCropRightOffset * 2,\n      ),\n      height:\n        (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 -\n        (frameMbsOnlyFlag ? 2 : 4) *\n          (frameCropTopOffset + frameCropBottomOffset),\n      pixelRatio: pixelRatio,\n    };\n  }\n}\n\nexport default AvcVideoParser;\n","import BaseVideoParser from './base-video-parser';\nimport ExpGolomb from './exp-golomb';\nimport { parseSEIMessageFromNALu } from '../../utils/mp4-tools';\nimport type {\n  DemuxedUserdataTrack,\n  DemuxedVideoTrack,\n} from '../../types/demuxer';\nimport type { ParsedVideoSample } from '../tsdemuxer';\nimport type { PES } from '../tsdemuxer';\n\nclass HevcVideoParser extends BaseVideoParser {\n  protected initVPS: Uint8Array | null = null;\n\n  public parsePES(\n    track: DemuxedVideoTrack,\n    textTrack: DemuxedUserdataTrack,\n    pes: PES,\n    endOfSegment: boolean,\n  ) {\n    const units = this.parseNALu(track, pes.data, endOfSegment);\n    let VideoSample = this.VideoSample;\n    let push: boolean;\n    let spsfound = false;\n    // free pes.data to save up some memory\n    (pes as any).data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD (only do this if AUD never found)\n    if (VideoSample && units.length && !track.audFound) {\n      this.pushAccessUnit(VideoSample, track);\n      VideoSample = this.VideoSample = this.createVideoSample(\n        false,\n        pes.pts,\n        pes.dts,\n      );\n    }\n\n    units.forEach((unit) => {\n      switch (unit.type) {\n        // NON-IDR, NON RANDOM ACCESS SLICE\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              false,\n              pes.pts,\n              pes.dts,\n            );\n          }\n          VideoSample.frame = true;\n          push = true;\n          break;\n\n        // CRA, BLA (random access picture)\n        case 16:\n        case 17:\n        case 18:\n        case 21:\n          push = true;\n          if (spsfound) {\n            // handle PES not starting with AUD\n            // if we have frame data already, that cannot belong to the same frame, so force a push\n            if (VideoSample?.frame && !VideoSample.key) {\n              this.pushAccessUnit(VideoSample, track);\n              VideoSample = this.VideoSample = null;\n            }\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n            );\n          }\n\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n\n        // IDR\n        case 19:\n        case 20:\n          push = true;\n          // handle PES not starting with AUD\n          // if we have frame data already, that cannot belong to the same frame, so force a push\n          if (VideoSample?.frame && !VideoSample.key) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = this.VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n            );\n          }\n\n          VideoSample.key = true;\n          VideoSample.frame = true;\n          break;\n\n        // SEI\n        case 39:\n          push = true;\n          parseSEIMessageFromNALu(\n            unit.data,\n            2, // NALu header size\n            pes.pts as number,\n            textTrack.samples,\n          );\n          break;\n\n        // VPS\n        case 32:\n          push = true;\n          if (!track.vps) {\n            if (typeof track.params !== 'object') {\n              track.params = {};\n            }\n            track.params = Object.assign(track.params, this.readVPS(unit.data));\n            this.initVPS = unit.data;\n          }\n          track.vps = [unit.data];\n          break;\n\n        // SPS\n        case 33:\n          push = true;\n          spsfound = true;\n          if (\n            track.vps !== undefined &&\n            track.vps[0] !== this.initVPS &&\n            track.sps !== undefined &&\n            !this.matchSPS(track.sps[0], unit.data)\n          ) {\n            this.initVPS = track.vps[0];\n            track.sps = track.pps = undefined;\n          }\n          if (!track.sps) {\n            const config = this.readSPS(unit.data);\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.codec = config.codecString;\n            track.sps = [];\n            if (typeof track.params !== 'object') {\n              track.params = {};\n            }\n            for (const prop in config.params) {\n              track.params[prop] = config.params[prop];\n            }\n          }\n          this.pushParameterSet(track.sps, unit.data, track.vps);\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              true,\n              pes.pts,\n              pes.dts,\n            );\n          }\n          VideoSample.key = true;\n          break;\n\n        // PPS\n        case 34:\n          push = true;\n          if (typeof track.params === 'object') {\n            if (!track.pps) {\n              track.pps = [];\n              const config = this.readPPS(unit.data);\n              for (const prop in config) {\n                track.params[prop] = config[prop];\n              }\n            }\n            this.pushParameterSet(track.pps, unit.data, track.vps);\n          }\n          break;\n\n        // ACCESS UNIT DELIMITER\n        case 35:\n          push = true;\n          track.audFound = true;\n          if (VideoSample?.frame) {\n            this.pushAccessUnit(VideoSample, track);\n            VideoSample = null;\n          }\n          if (!VideoSample) {\n            VideoSample = this.VideoSample = this.createVideoSample(\n              false,\n              pes.pts,\n              pes.dts,\n            );\n          }\n          break;\n\n        default:\n          push = false;\n          break;\n      }\n      if (VideoSample && push) {\n        const units = VideoSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (endOfSegment && VideoSample) {\n      this.pushAccessUnit(VideoSample, track);\n      this.VideoSample = null;\n    }\n  }\n\n  private pushParameterSet(\n    parameterSets: Uint8Array[],\n    data: Uint8Array,\n    vps: Uint8Array[] | undefined,\n  ) {\n    if ((vps && vps[0] === this.initVPS) || (!vps && !parameterSets.length)) {\n      parameterSets.push(data);\n    }\n  }\n\n  protected getNALuType(data: Uint8Array, offset: number): number {\n    return (data[offset] & 0x7e) >>> 1;\n  }\n\n  protected ebsp2rbsp(arr: Uint8Array): Uint8Array {\n    const dst = new Uint8Array(arr.byteLength);\n    let dstIdx = 0;\n    for (let i = 0; i < arr.byteLength; i++) {\n      if (i >= 2) {\n        // Unescape: Skip 0x03 after 00 00\n        if (arr[i] === 0x03 && arr[i - 1] === 0x00 && arr[i - 2] === 0x00) {\n          continue;\n        }\n      }\n      dst[dstIdx] = arr[i];\n      dstIdx++;\n    }\n    return new Uint8Array(dst.buffer, 0, dstIdx);\n  }\n\n  protected pushAccessUnit(\n    VideoSample: ParsedVideoSample,\n    videoTrack: DemuxedVideoTrack,\n  ) {\n    super.pushAccessUnit(VideoSample, videoTrack);\n    if (this.initVPS) {\n      this.initVPS = null; // null initVPS to prevent possible track's sps/pps growth until next VPS\n    }\n  }\n\n  readVPS(vps: Uint8Array): {\n    numTemporalLayers: number;\n    temporalIdNested: boolean;\n  } {\n    const eg = new ExpGolomb(vps);\n    // remove header\n    eg.readUByte();\n    eg.readUByte();\n\n    eg.readBits(4); // video_parameter_set_id\n    eg.skipBits(2);\n    eg.readBits(6); // max_layers_minus1\n    const max_sub_layers_minus1 = eg.readBits(3);\n    const temporal_id_nesting_flag = eg.readBoolean();\n    // ...vui fps can be here, but empty fps value is not critical for metadata\n\n    return {\n      numTemporalLayers: max_sub_layers_minus1 + 1,\n      temporalIdNested: temporal_id_nesting_flag,\n    };\n  }\n\n  readSPS(sps: Uint8Array): {\n    codecString: string;\n    params: object;\n    width: number;\n    height: number;\n    pixelRatio: [number, number];\n  } {\n    const eg = new ExpGolomb(this.ebsp2rbsp(sps));\n    eg.readUByte();\n    eg.readUByte();\n\n    eg.readBits(4); //video_parameter_set_id\n    const max_sub_layers_minus1 = eg.readBits(3);\n    eg.readBoolean(); // temporal_id_nesting_flag\n\n    // profile_tier_level\n    const general_profile_space = eg.readBits(2);\n    const general_tier_flag = eg.readBoolean();\n    const general_profile_idc = eg.readBits(5);\n    const general_profile_compatibility_flags_1 = eg.readUByte();\n    const general_profile_compatibility_flags_2 = eg.readUByte();\n    const general_profile_compatibility_flags_3 = eg.readUByte();\n    const general_profile_compatibility_flags_4 = eg.readUByte();\n    const general_constraint_indicator_flags_1 = eg.readUByte();\n    const general_constraint_indicator_flags_2 = eg.readUByte();\n    const general_constraint_indicator_flags_3 = eg.readUByte();\n    const general_constraint_indicator_flags_4 = eg.readUByte();\n    const general_constraint_indicator_flags_5 = eg.readUByte();\n    const general_constraint_indicator_flags_6 = eg.readUByte();\n    const general_level_idc = eg.readUByte();\n    const sub_layer_profile_present_flags: boolean[] = [];\n    const sub_layer_level_present_flags: boolean[] = [];\n    for (let i = 0; i < max_sub_layers_minus1; i++) {\n      sub_layer_profile_present_flags.push(eg.readBoolean());\n      sub_layer_level_present_flags.push(eg.readBoolean());\n    }\n    if (max_sub_layers_minus1 > 0) {\n      for (let i = max_sub_layers_minus1; i < 8; i++) {\n        eg.readBits(2);\n      }\n    }\n    for (let i = 0; i < max_sub_layers_minus1; i++) {\n      if (sub_layer_profile_present_flags[i]) {\n        eg.readUByte(); // sub_layer_profile_space, sub_layer_tier_flag, sub_layer_profile_idc\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte(); // sub_layer_profile_compatibility_flag\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n        eg.readUByte();\n      }\n      if (sub_layer_level_present_flags[i]) {\n        eg.readUByte();\n      }\n    }\n\n    eg.readUEG(); // seq_parameter_set_id\n    const chroma_format_idc = eg.readUEG();\n    if (chroma_format_idc == 3) {\n      eg.skipBits(1); //separate_colour_plane_flag\n    }\n    const pic_width_in_luma_samples = eg.readUEG();\n    const pic_height_in_luma_samples = eg.readUEG();\n    const conformance_window_flag = eg.readBoolean();\n    let pic_left_offset = 0,\n      pic_right_offset = 0,\n      pic_top_offset = 0,\n      pic_bottom_offset = 0;\n    if (conformance_window_flag) {\n      pic_left_offset += eg.readUEG();\n      pic_right_offset += eg.readUEG();\n      pic_top_offset += eg.readUEG();\n      pic_bottom_offset += eg.readUEG();\n    }\n    const bit_depth_luma_minus8 = eg.readUEG();\n    const bit_depth_chroma_minus8 = eg.readUEG();\n    const log2_max_pic_order_cnt_lsb_minus4 = eg.readUEG();\n    const sub_layer_ordering_info_present_flag = eg.readBoolean();\n    for (\n      let i = sub_layer_ordering_info_present_flag ? 0 : max_sub_layers_minus1;\n      i <= max_sub_layers_minus1;\n      i++\n    ) {\n      eg.skipUEG(); // max_dec_pic_buffering_minus1[i]\n      eg.skipUEG(); // max_num_reorder_pics[i]\n      eg.skipUEG(); // max_latency_increase_plus1[i]\n    }\n    eg.skipUEG(); // log2_min_luma_coding_block_size_minus3\n    eg.skipUEG(); // log2_diff_max_min_luma_coding_block_size\n    eg.skipUEG(); // log2_min_transform_block_size_minus2\n    eg.skipUEG(); // log2_diff_max_min_transform_block_size\n    eg.skipUEG(); // max_transform_hierarchy_depth_inter\n    eg.skipUEG(); // max_transform_hierarchy_depth_intra\n    const scaling_list_enabled_flag = eg.readBoolean();\n    if (scaling_list_enabled_flag) {\n      const sps_scaling_list_data_present_flag = eg.readBoolean();\n      if (sps_scaling_list_data_present_flag) {\n        for (let sizeId = 0; sizeId < 4; sizeId++) {\n          for (\n            let matrixId = 0;\n            matrixId < (sizeId === 3 ? 2 : 6);\n            matrixId++\n          ) {\n            const scaling_list_pred_mode_flag = eg.readBoolean();\n            if (!scaling_list_pred_mode_flag) {\n              eg.readUEG(); // scaling_list_pred_matrix_id_delta\n            } else {\n              const coefNum = Math.min(64, 1 << (4 + (sizeId << 1)));\n              if (sizeId > 1) {\n                eg.readEG();\n              }\n              for (let i = 0; i < coefNum; i++) {\n                eg.readEG();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    eg.readBoolean(); // amp_enabled_flag\n    eg.readBoolean(); // sample_adaptive_offset_enabled_flag\n    const pcm_enabled_flag = eg.readBoolean();\n    if (pcm_enabled_flag) {\n      eg.readUByte();\n      eg.skipUEG();\n      eg.skipUEG();\n      eg.readBoolean();\n    }\n    const num_short_term_ref_pic_sets = eg.readUEG();\n    let num_delta_pocs = 0;\n    for (let i = 0; i < num_short_term_ref_pic_sets; i++) {\n      let inter_ref_pic_set_prediction_flag = false;\n      if (i !== 0) {\n        inter_ref_pic_set_prediction_flag = eg.readBoolean();\n      }\n      if (inter_ref_pic_set_prediction_flag) {\n        if (i === num_short_term_ref_pic_sets) {\n          eg.readUEG();\n        }\n        eg.readBoolean();\n        eg.readUEG();\n        let next_num_delta_pocs = 0;\n        for (let j = 0; j <= num_delta_pocs; j++) {\n          const used_by_curr_pic_flag = eg.readBoolean();\n          let use_delta_flag = false;\n          if (!used_by_curr_pic_flag) {\n            use_delta_flag = eg.readBoolean();\n          }\n          if (used_by_curr_pic_flag || use_delta_flag) {\n            next_num_delta_pocs++;\n          }\n        }\n        num_delta_pocs = next_num_delta_pocs;\n      } else {\n        const num_negative_pics = eg.readUEG();\n        const num_positive_pics = eg.readUEG();\n        num_delta_pocs = num_negative_pics + num_positive_pics;\n        for (let j = 0; j < num_negative_pics; j++) {\n          eg.readUEG();\n          eg.readBoolean();\n        }\n        for (let j = 0; j < num_positive_pics; j++) {\n          eg.readUEG();\n          eg.readBoolean();\n        }\n      }\n    }\n\n    const long_term_ref_pics_present_flag = eg.readBoolean();\n    if (long_term_ref_pics_present_flag) {\n      const num_long_term_ref_pics_sps = eg.readUEG();\n      for (let i = 0; i < num_long_term_ref_pics_sps; i++) {\n        for (let j = 0; j < log2_max_pic_order_cnt_lsb_minus4 + 4; j++) {\n          eg.readBits(1);\n        }\n        eg.readBits(1);\n      }\n    }\n\n    let min_spatial_segmentation_idc = 0;\n    let sar_width = 1,\n      sar_height = 1;\n    let fps_fixed = true,\n      fps_den = 1,\n      fps_num = 0;\n    eg.readBoolean(); // sps_temporal_mvp_enabled_flag\n    eg.readBoolean(); // strong_intra_smoothing_enabled_flag\n    let default_display_window_flag = false;\n    const vui_parameters_present_flag = eg.readBoolean();\n    if (vui_parameters_present_flag) {\n      const aspect_ratio_info_present_flag = eg.readBoolean();\n      if (aspect_ratio_info_present_flag) {\n        const aspect_ratio_idc = eg.readUByte();\n        const sar_width_table = [\n          1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2,\n        ];\n        const sar_height_table = [\n          1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1,\n        ];\n        if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n          sar_width = sar_width_table[aspect_ratio_idc - 1];\n          sar_height = sar_height_table[aspect_ratio_idc - 1];\n        } else if (aspect_ratio_idc === 255) {\n          sar_width = eg.readBits(16);\n          sar_height = eg.readBits(16);\n        }\n      }\n      const overscan_info_present_flag = eg.readBoolean();\n      if (overscan_info_present_flag) {\n        eg.readBoolean();\n      }\n      const video_signal_type_present_flag = eg.readBoolean();\n      if (video_signal_type_present_flag) {\n        eg.readBits(3);\n        eg.readBoolean();\n        const colour_description_present_flag = eg.readBoolean();\n        if (colour_description_present_flag) {\n          eg.readUByte();\n          eg.readUByte();\n          eg.readUByte();\n        }\n      }\n      const chroma_loc_info_present_flag = eg.readBoolean();\n      if (chroma_loc_info_present_flag) {\n        eg.readUEG();\n        eg.readUEG();\n      }\n      eg.readBoolean(); // neutral_chroma_indication_flag\n      eg.readBoolean(); // field_seq_flag\n      eg.readBoolean(); // frame_field_info_present_flag\n      default_display_window_flag = eg.readBoolean();\n      if (default_display_window_flag) {\n        eg.skipUEG();\n        eg.skipUEG();\n        eg.skipUEG();\n        eg.skipUEG();\n      }\n      const vui_timing_info_present_flag = eg.readBoolean();\n      if (vui_timing_info_present_flag) {\n        fps_den = eg.readBits(32);\n        fps_num = eg.readBits(32);\n        const vui_poc_proportional_to_timing_flag = eg.readBoolean();\n        if (vui_poc_proportional_to_timing_flag) {\n          eg.readUEG();\n        }\n        const vui_hrd_parameters_present_flag = eg.readBoolean();\n        if (vui_hrd_parameters_present_flag) {\n          //const commonInfPresentFlag = true;\n          //if (commonInfPresentFlag) {\n          const nal_hrd_parameters_present_flag = eg.readBoolean();\n          const vcl_hrd_parameters_present_flag = eg.readBoolean();\n          let sub_pic_hrd_params_present_flag = false;\n          if (\n            nal_hrd_parameters_present_flag ||\n            vcl_hrd_parameters_present_flag\n          ) {\n            sub_pic_hrd_params_present_flag = eg.readBoolean();\n            if (sub_pic_hrd_params_present_flag) {\n              eg.readUByte();\n              eg.readBits(5);\n              eg.readBoolean();\n              eg.readBits(5);\n            }\n            eg.readBits(4); // bit_rate_scale\n            eg.readBits(4); // cpb_size_scale\n            if (sub_pic_hrd_params_present_flag) {\n              eg.readBits(4);\n            }\n            eg.readBits(5);\n            eg.readBits(5);\n            eg.readBits(5);\n          }\n          //}\n          for (let i = 0; i <= max_sub_layers_minus1; i++) {\n            fps_fixed = eg.readBoolean(); // fixed_pic_rate_general_flag\n            const fixed_pic_rate_within_cvs_flag =\n              fps_fixed || eg.readBoolean();\n            let low_delay_hrd_flag = false;\n            if (fixed_pic_rate_within_cvs_flag) {\n              eg.readEG();\n            } else {\n              low_delay_hrd_flag = eg.readBoolean();\n            }\n            const cpb_cnt = low_delay_hrd_flag ? 1 : eg.readUEG() + 1;\n            if (nal_hrd_parameters_present_flag) {\n              for (let j = 0; j < cpb_cnt; j++) {\n                eg.readUEG();\n                eg.readUEG();\n                if (sub_pic_hrd_params_present_flag) {\n                  eg.readUEG();\n                  eg.readUEG();\n                }\n                eg.skipBits(1);\n              }\n            }\n            if (vcl_hrd_parameters_present_flag) {\n              for (let j = 0; j < cpb_cnt; j++) {\n                eg.readUEG();\n                eg.readUEG();\n                if (sub_pic_hrd_params_present_flag) {\n                  eg.readUEG();\n                  eg.readUEG();\n                }\n                eg.skipBits(1);\n              }\n            }\n          }\n        }\n      }\n      const bitstream_restriction_flag = eg.readBoolean();\n      if (bitstream_restriction_flag) {\n        eg.readBoolean(); // tiles_fixed_structure_flag\n        eg.readBoolean(); // motion_vectors_over_pic_boundaries_flag\n        eg.readBoolean(); // restricted_ref_pic_lists_flag\n        min_spatial_segmentation_idc = eg.readUEG();\n      }\n    }\n\n    let width = pic_width_in_luma_samples,\n      height = pic_height_in_luma_samples;\n    if (conformance_window_flag) {\n      let chroma_scale_w = 1,\n        chroma_scale_h = 1;\n      if (chroma_format_idc === 1) {\n        // YUV 420\n        chroma_scale_w = chroma_scale_h = 2;\n      } else if (chroma_format_idc == 2) {\n        // YUV 422\n        chroma_scale_w = 2;\n      }\n      width =\n        pic_width_in_luma_samples -\n        chroma_scale_w * pic_right_offset -\n        chroma_scale_w * pic_left_offset;\n      height =\n        pic_height_in_luma_samples -\n        chroma_scale_h * pic_bottom_offset -\n        chroma_scale_h * pic_top_offset;\n    }\n\n    const profile_space_string = general_profile_space\n      ? ['A', 'B', 'C'][general_profile_space]\n      : '';\n    const profile_compatibility_buf =\n      (general_profile_compatibility_flags_1 << 24) |\n      (general_profile_compatibility_flags_2 << 16) |\n      (general_profile_compatibility_flags_3 << 8) |\n      general_profile_compatibility_flags_4;\n    let profile_compatibility_rev = 0;\n    for (let i = 0; i < 32; i++) {\n      profile_compatibility_rev =\n        (profile_compatibility_rev |\n          (((profile_compatibility_buf >> i) & 1) << (31 - i))) >>>\n        0; // reverse bit position (and cast as UInt32)\n    }\n    let profile_compatibility_flags_string =\n      profile_compatibility_rev.toString(16);\n    if (\n      general_profile_idc === 1 &&\n      profile_compatibility_flags_string === '2'\n    ) {\n      profile_compatibility_flags_string = '6';\n    }\n    const tier_flag_string = general_tier_flag ? 'H' : 'L';\n\n    return {\n      codecString: `hvc1.${profile_space_string}${general_profile_idc}.${profile_compatibility_flags_string}.${tier_flag_string}${general_level_idc}.B0`,\n      params: {\n        general_tier_flag,\n        general_profile_idc,\n        general_profile_space,\n        general_profile_compatibility_flags: [\n          general_profile_compatibility_flags_1,\n          general_profile_compatibility_flags_2,\n          general_profile_compatibility_flags_3,\n          general_profile_compatibility_flags_4,\n        ],\n        general_constraint_indicator_flags: [\n          general_constraint_indicator_flags_1,\n          general_constraint_indicator_flags_2,\n          general_constraint_indicator_flags_3,\n          general_constraint_indicator_flags_4,\n          general_constraint_indicator_flags_5,\n          general_constraint_indicator_flags_6,\n        ],\n        general_level_idc,\n        bit_depth: bit_depth_luma_minus8 + 8,\n        bit_depth_luma_minus8,\n        bit_depth_chroma_minus8,\n        min_spatial_segmentation_idc,\n        chroma_format_idc: chroma_format_idc,\n        frame_rate: {\n          fixed: fps_fixed,\n          fps: fps_num / fps_den,\n        },\n      },\n      width,\n      height,\n      pixelRatio: [sar_width, sar_height],\n    };\n  }\n\n  readPPS(pps: Uint8Array): {\n    parallelismType: number;\n  } {\n    const eg = new ExpGolomb(this.ebsp2rbsp(pps));\n    eg.readUByte();\n    eg.readUByte();\n    eg.skipUEG(); // pic_parameter_set_id\n    eg.skipUEG(); // seq_parameter_set_id\n    eg.skipBits(2); // dependent_slice_segments_enabled_flag, output_flag_present_flag\n    eg.skipBits(3); // num_extra_slice_header_bits\n    eg.skipBits(2); // sign_data_hiding_enabled_flag, cabac_init_present_flag\n    eg.skipUEG();\n    eg.skipUEG();\n    eg.skipEG(); // init_qp_minus26\n    eg.skipBits(2); // constrained_intra_pred_flag, transform_skip_enabled_flag\n    const cu_qp_delta_enabled_flag = eg.readBoolean();\n    if (cu_qp_delta_enabled_flag) {\n      eg.skipUEG();\n    }\n    eg.skipEG(); // cb_qp_offset\n    eg.skipEG(); // cr_qp_offset\n    eg.skipBits(4); // pps_slice_chroma_qp_offsets_present_flag, weighted_pred_flag, weighted_bipred_flag, transquant_bypass_enabled_flag\n    const tiles_enabled_flag = eg.readBoolean();\n    const entropy_coding_sync_enabled_flag = eg.readBoolean();\n    let parallelismType = 1; // slice-based parallel decoding\n    if (entropy_coding_sync_enabled_flag && tiles_enabled_flag) {\n      parallelismType = 0; // mixed-type parallel decoding\n    } else if (entropy_coding_sync_enabled_flag) {\n      parallelismType = 3; // wavefront-based parallel decoding\n    } else if (tiles_enabled_flag) {\n      parallelismType = 2; // tile-based parallel decoding\n    }\n\n    return {\n      parallelismType,\n    };\n  }\n\n  matchSPS(sps1: Uint8Array, sps2: Uint8Array): boolean {\n    // compare without headers and VPS related params\n    return (\n      String.fromCharCode.apply(null, sps1).substr(3) ===\n      String.fromCharCode.apply(null, sps2).substr(3)\n    );\n  }\n}\n\nexport default HevcVideoParser;\n","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 (or HEVC/H265) NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n */\n\nimport * as AC3 from './audio/ac3-demuxer';\nimport * as ADTS from './audio/adts';\nimport * as MpegAudio from './audio/mpegaudio';\nimport SampleAesDecrypter from './sample-aes';\nimport AvcVideoParser from './video/avc-video-parser';\nimport HevcVideoParser from './video/hevc-video-parser';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport {\n  type DemuxedAudioTrack,\n  type DemuxedMetadataTrack,\n  type DemuxedTrack,\n  type DemuxedUserdataTrack,\n  type DemuxedVideoTrack,\n  type Demuxer,\n  type DemuxerResult,\n  type ElementaryStreamData,\n  type KeyData,\n  MetadataSchema,\n  type VideoSample,\n} from '../types/demuxer';\nimport { appendUint8Array, RemuxerTrackIdConfig } from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type BaseVideoParser from './video/base-video-parser';\nimport type { AudioFrame, DemuxedAAC } from '../types/demuxer';\nimport type { TypeSupported } from '../utils/codecs';\nimport type { ILogger } from '../utils/logger';\n\nexport type ParsedTimestamp = {\n  pts?: number;\n  dts?: number;\n};\n\nexport type PES = ParsedTimestamp & {\n  data: Uint8Array;\n  len: number;\n};\n\nexport type ParsedVideoSample = ParsedTimestamp &\n  Omit<VideoSample, 'pts' | 'dts'>;\n\nconst PACKET_LENGTH = 188;\n\nclass TSDemuxer implements Demuxer {\n  private readonly logger: ILogger;\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n  private readonly typeSupported: TypeSupported;\n\n  private sampleAes: SampleAesDecrypter | null = null;\n  private pmtParsed: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private _pmtId: number = -1;\n\n  private _videoTrack?: DemuxedVideoTrack;\n  private _audioTrack?: DemuxedAudioTrack;\n  private _id3Track?: DemuxedMetadataTrack;\n  private _txtTrack?: DemuxedUserdataTrack;\n  private aacOverFlow: AudioFrame | null = null;\n  private remainderData: Uint8Array | null = null;\n  private videoParser: BaseVideoParser | null;\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported: TypeSupported,\n    logger: ILogger,\n  ) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.logger = logger;\n    this.videoParser = null;\n  }\n\n  static probe(data: Uint8Array, logger: ILogger) {\n    const syncOffset = TSDemuxer.syncOffset(data);\n    if (syncOffset > 0) {\n      logger.warn(\n        `MPEG2-TS detected but first sync word found @ offset ${syncOffset}`,\n      );\n    }\n    return syncOffset !== -1;\n  }\n\n  static syncOffset(data: Uint8Array): number {\n    const length = data.length;\n    let scanwindow = Math.min(PACKET_LENGTH * 5, length - PACKET_LENGTH) + 1;\n    let i = 0;\n    while (i < scanwindow) {\n      // a TS init segment should contain at least 2 TS packets: PAT and PMT, each starting with 0x47\n      let foundPat = false;\n      let packetStart = -1;\n      let tsPackets = 0;\n      for (let j = i; j < length; j += PACKET_LENGTH) {\n        if (\n          data[j] === 0x47 &&\n          (length - j === PACKET_LENGTH || data[j + PACKET_LENGTH] === 0x47)\n        ) {\n          tsPackets++;\n          if (packetStart === -1) {\n            packetStart = j;\n            // First sync word found at offset, increase scan length (#5251)\n            if (packetStart !== 0) {\n              scanwindow =\n                Math.min(\n                  packetStart + PACKET_LENGTH * 99,\n                  data.length - PACKET_LENGTH,\n                ) + 1;\n            }\n          }\n          if (!foundPat) {\n            foundPat = parsePID(data, j) === 0;\n          }\n          // Sync word found at 0 with 3 packets, or found at offset least 2 packets up to scanwindow (#5501)\n          if (\n            foundPat &&\n            tsPackets > 1 &&\n            ((packetStart === 0 && tsPackets > 2) ||\n              j + PACKET_LENGTH > scanwindow)\n          ) {\n            return packetStart;\n          }\n        } else if (tsPackets) {\n          // Exit if sync word found, but does not contain contiguous packets\n          return -1;\n        } else {\n          break;\n        }\n      }\n      i++;\n    }\n    return -1;\n  }\n\n  /**\n   * Creates a track model internal to demuxer used to drive remuxing input\n   */\n  static createTrack(\n    type: 'audio' | 'video' | 'id3' | 'text',\n    duration?: number,\n  ): DemuxedTrack {\n    return {\n      container:\n        type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,\n      type,\n      id: RemuxerTrackIdConfig[type],\n      pid: -1,\n      inputTimeScale: 90000,\n      sequenceNumber: 0,\n      samples: [],\n      dropped: 0,\n      duration: type === 'audio' ? duration : undefined,\n    };\n  }\n\n  /**\n   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)\n   * Resets all internal track instances of the demuxer.\n   */\n  public resetInitSegment(\n    initSegment: Uint8Array | undefined,\n    audioCodec: string,\n    videoCodec: string,\n    trackDuration: number,\n  ) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n\n    this._videoTrack = TSDemuxer.createTrack('video') as DemuxedVideoTrack;\n    this._videoTrack.duration = trackDuration;\n    this._audioTrack = TSDemuxer.createTrack(\n      'audio',\n      trackDuration,\n    ) as DemuxedAudioTrack;\n    this._id3Track = TSDemuxer.createTrack('id3') as DemuxedMetadataTrack;\n    this._txtTrack = TSDemuxer.createTrack('text') as DemuxedUserdataTrack;\n    this._audioTrack.segmentCodec = 'aac';\n\n    // flush any partial content\n    this.videoParser = null;\n    this.aacOverFlow = null;\n    this.remainderData = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n  }\n\n  public resetTimeStamp() {}\n\n  public resetContiguity(): void {\n    const { _audioTrack, _videoTrack, _id3Track } = this;\n    if (_audioTrack) {\n      _audioTrack.pesData = null;\n    }\n    if (_videoTrack) {\n      _videoTrack.pesData = null;\n    }\n    if (_id3Track) {\n      _id3Track.pesData = null;\n    }\n    this.aacOverFlow = null;\n    this.remainderData = null;\n  }\n\n  public demux(\n    data: Uint8Array,\n    timeOffset: number,\n    isSampleAes = false,\n    flush = false,\n  ): DemuxerResult {\n    if (!isSampleAes) {\n      this.sampleAes = null;\n    }\n\n    let pes: PES | null;\n\n    const videoTrack = this._videoTrack as DemuxedVideoTrack;\n    const audioTrack = this._audioTrack as DemuxedAudioTrack;\n    const id3Track = this._id3Track as DemuxedMetadataTrack;\n    const textTrack = this._txtTrack as DemuxedUserdataTrack;\n\n    let videoPid = videoTrack.pid;\n    let videoData = videoTrack.pesData;\n    let audioPid = audioTrack.pid;\n    let id3Pid = id3Track.pid;\n    let audioData = audioTrack.pesData;\n    let id3Data = id3Track.pesData;\n    let unknownPID: number | null = null;\n    let pmtParsed = this.pmtParsed;\n    let pmtId = this._pmtId;\n\n    let len = data.length;\n    if (this.remainderData) {\n      data = appendUint8Array(this.remainderData, data);\n      len = data.length;\n      this.remainderData = null;\n    }\n\n    if (len < PACKET_LENGTH && !flush) {\n      this.remainderData = data;\n      return {\n        audioTrack,\n        videoTrack,\n        id3Track,\n        textTrack,\n      };\n    }\n\n    const syncOffset = Math.max(0, TSDemuxer.syncOffset(data));\n    len -= (len - syncOffset) % PACKET_LENGTH;\n    if (len < data.byteLength && !flush) {\n      this.remainderData = new Uint8Array(\n        data.buffer,\n        len,\n        data.buffer.byteLength - len,\n      );\n    }\n\n    // loop through TS packets\n    let tsPacketErrors = 0;\n    for (let start = syncOffset; start < len; start += PACKET_LENGTH) {\n      if (data[start] === 0x47) {\n        const stt = !!(data[start + 1] & 0x40);\n        const pid = parsePID(data, start);\n        const atf = (data[start + 3] & 0x30) >> 4;\n\n        // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n        let offset: number;\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4];\n          // continue if there is only adaptation field\n          if (offset === start + PACKET_LENGTH) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n        switch (pid) {\n          case videoPid:\n            if (stt) {\n              if (videoData && (pes = parsePES(videoData, this.logger))) {\n                this.readyVideoParser(videoTrack.segmentCodec);\n                if (this.videoParser !== null) {\n                  this.videoParser.parsePES(videoTrack, textTrack, pes, false);\n                }\n              }\n\n              videoData = { data: [], size: 0 };\n            }\n            if (videoData) {\n              videoData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              videoData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case audioPid:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData, this.logger))) {\n                switch (audioTrack.segmentCodec) {\n                  case 'aac':\n                    this.parseAACPES(audioTrack, pes);\n                    break;\n                  case 'mp3':\n                    this.parseMPEGPES(audioTrack, pes);\n                    break;\n                  case 'ac3':\n                    if (__USE_M2TS_ADVANCED_CODECS__) {\n                      this.parseAC3PES(audioTrack, pes);\n                    }\n                    break;\n                }\n              }\n              audioData = { data: [], size: 0 };\n            }\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              audioData.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case id3Pid:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data, this.logger))) {\n                this.parseID3PES(id3Track, pes);\n              }\n\n              id3Data = { data: [], size: 0 };\n            }\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + PACKET_LENGTH));\n              id3Data.size += start + PACKET_LENGTH - offset;\n            }\n            break;\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            pmtId = this._pmtId = parsePAT(data, offset);\n            // this.logger.log('PMT PID:'  + this._pmtId);\n            break;\n          case pmtId: {\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n\n            const parsedPIDs = parsePMT(\n              data,\n              offset,\n              this.typeSupported,\n              isSampleAes,\n              this.observer,\n              this.logger,\n            );\n\n            // only update track id if track PID found while parsing PMT\n            // this is to avoid resetting the PID to -1 in case\n            // track PID transiently disappears from the stream\n            // this could happen in case of transient missing audio samples for example\n            // NOTE this is only the PID of the track as found in TS,\n            // but we are not using this for MP4 track IDs.\n            videoPid = parsedPIDs.videoPid;\n            if (videoPid > 0) {\n              videoTrack.pid = videoPid;\n              videoTrack.segmentCodec = parsedPIDs.segmentVideoCodec;\n            }\n\n            audioPid = parsedPIDs.audioPid;\n            if (audioPid > 0) {\n              audioTrack.pid = audioPid;\n              audioTrack.segmentCodec = parsedPIDs.segmentAudioCodec;\n            }\n            id3Pid = parsedPIDs.id3Pid;\n            if (id3Pid > 0) {\n              id3Track.pid = id3Pid;\n            }\n\n            if (unknownPID !== null && !pmtParsed) {\n              this.logger.warn(\n                `MPEG-TS PMT found at ${start} after unknown PID '${unknownPID}'. Backtracking to sync byte @${syncOffset} to parse all TS packets.`,\n              );\n              unknownPID = null;\n              // we set it to -188, the += 188 in the for loop will reset start to 0\n              start = syncOffset - 188;\n            }\n            pmtParsed = this.pmtParsed = true;\n            break;\n          }\n          case 0x11:\n          case 0x1fff:\n            break;\n          default:\n            unknownPID = pid;\n            break;\n        }\n      } else {\n        tsPacketErrors++;\n      }\n    }\n\n    if (tsPacketErrors > 0) {\n      emitParsingError(\n        this.observer,\n        new Error(\n          `Found ${tsPacketErrors} TS packet/s that do not start with 0x47`,\n        ),\n        undefined,\n        this.logger,\n      );\n    }\n\n    videoTrack.pesData = videoData;\n    audioTrack.pesData = audioData;\n    id3Track.pesData = id3Data;\n\n    const demuxResult: DemuxerResult = {\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n    };\n\n    if (flush) {\n      this.extractRemainingSamples(demuxResult);\n    }\n\n    return demuxResult;\n  }\n\n  public flush(): DemuxerResult | Promise<DemuxerResult> {\n    const { remainderData } = this;\n    this.remainderData = null;\n    let result: DemuxerResult;\n    if (remainderData) {\n      result = this.demux(remainderData, -1, false, true);\n    } else {\n      result = {\n        videoTrack: this._videoTrack as DemuxedVideoTrack,\n        audioTrack: this._audioTrack as DemuxedAudioTrack,\n        id3Track: this._id3Track as DemuxedMetadataTrack,\n        textTrack: this._txtTrack as DemuxedUserdataTrack,\n      };\n    }\n    this.extractRemainingSamples(result);\n    if (this.sampleAes) {\n      return this.decrypt(result, this.sampleAes);\n    }\n    return result;\n  }\n\n  private extractRemainingSamples(demuxResult: DemuxerResult) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const videoData = videoTrack.pesData;\n    const audioData = audioTrack.pesData;\n    const id3Data = id3Track.pesData;\n    // try to parse last PES packets\n    let pes: PES | null;\n    if (videoData && (pes = parsePES(videoData, this.logger))) {\n      this.readyVideoParser(videoTrack.segmentCodec);\n      if (this.videoParser !== null) {\n        this.videoParser.parsePES(\n          videoTrack as DemuxedVideoTrack,\n          textTrack as DemuxedUserdataTrack,\n          pes,\n          true,\n        );\n        videoTrack.pesData = null;\n      }\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      videoTrack.pesData = videoData;\n    }\n\n    if (audioData && (pes = parsePES(audioData, this.logger))) {\n      switch (audioTrack.segmentCodec) {\n        case 'aac':\n          this.parseAACPES(audioTrack, pes);\n          break;\n        case 'mp3':\n          this.parseMPEGPES(audioTrack, pes);\n          break;\n        case 'ac3':\n          if (__USE_M2TS_ADVANCED_CODECS__) {\n            this.parseAC3PES(audioTrack, pes);\n          }\n          break;\n      }\n      audioTrack.pesData = null;\n    } else {\n      if (audioData?.size) {\n        this.logger.log(\n          'last AAC PES packet truncated,might overlap between fragments',\n        );\n      }\n\n      // either audioData null or PES truncated, keep it for next frag parsing\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data, this.logger))) {\n      this.parseID3PES(id3Track, pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n  }\n\n  public demuxSampleAes(\n    data: Uint8Array,\n    keyData: KeyData,\n    timeOffset: number,\n  ): Promise<DemuxerResult> {\n    const demuxResult = this.demux(\n      data,\n      timeOffset,\n      true,\n      !this.config.progressive,\n    );\n    const sampleAes = (this.sampleAes = new SampleAesDecrypter(\n      this.observer,\n      this.config,\n      keyData,\n    ));\n    return this.decrypt(demuxResult, sampleAes);\n  }\n\n  private readyVideoParser(codec: string | undefined) {\n    if (this.videoParser === null) {\n      if (codec === 'avc') {\n        this.videoParser = new AvcVideoParser();\n      } else if (__USE_M2TS_ADVANCED_CODECS__ && codec === 'hevc') {\n        this.videoParser = new HevcVideoParser();\n      }\n    }\n  }\n\n  private decrypt(\n    demuxResult: DemuxerResult,\n    sampleAes: SampleAesDecrypter,\n  ): Promise<DemuxerResult> {\n    return new Promise((resolve) => {\n      const { audioTrack, videoTrack } = demuxResult;\n      if (audioTrack.samples && audioTrack.segmentCodec === 'aac') {\n        sampleAes.decryptAacSamples(\n          (audioTrack as DemuxedAAC).samples,\n          0,\n          () => {\n            if (videoTrack.samples) {\n              sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n                resolve(demuxResult);\n              });\n            } else {\n              resolve(demuxResult);\n            }\n          },\n        );\n      } else if (videoTrack.samples) {\n        sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, () => {\n          resolve(demuxResult);\n        });\n      }\n    });\n  }\n\n  public destroy() {\n    if (this.observer) {\n      this.observer.removeAllListeners();\n    }\n    // @ts-ignore\n    this.config = this.logger = this.observer = null;\n    this.aacOverFlow =\n      this.videoParser =\n      this.remainderData =\n      this.sampleAes =\n        null;\n    this._videoTrack =\n      this._audioTrack =\n      this._id3Track =\n      this._txtTrack =\n        undefined;\n  }\n\n  private parseAACPES(track: DemuxedAudioTrack, pes: PES) {\n    let startOffset = 0;\n    const aacOverFlow = this.aacOverFlow;\n    let data = pes.data;\n    if (aacOverFlow) {\n      this.aacOverFlow = null;\n      const frameMissingBytes = aacOverFlow.missing;\n      const sampleLength = aacOverFlow.sample.unit.byteLength;\n      // logger.log(`AAC: append overflowing ${sampleLength} bytes to beginning of new PES`);\n      if (frameMissingBytes === -1) {\n        data = appendUint8Array(aacOverFlow.sample.unit, data);\n      } else {\n        const frameOverflowBytes = sampleLength - frameMissingBytes;\n        aacOverFlow.sample.unit.set(\n          data.subarray(0, frameMissingBytes),\n          frameOverflowBytes,\n        );\n        track.samples.push(aacOverFlow.sample);\n        startOffset = aacOverFlow.missing;\n      }\n    }\n    // look for ADTS header (0xFFFx)\n    let offset: number;\n    let len: number;\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (ADTS.isHeader(data, offset)) {\n        break;\n      }\n    }\n    // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n    if (offset !== startOffset) {\n      let reason: string;\n      const recoverable = offset < len - 1;\n      if (recoverable) {\n        reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n      } else {\n        reason = 'No ADTS header found in AAC PES';\n      }\n      emitParsingError(\n        this.observer,\n        new Error(reason),\n        recoverable,\n        this.logger,\n      );\n      if (!recoverable) {\n        return;\n      }\n    }\n\n    ADTS.initTrackConfig(track, this.observer, data, offset, this.audioCodec);\n\n    let pts: number;\n    if (pes.pts !== undefined) {\n      pts = pes.pts;\n    } else if (aacOverFlow) {\n      // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n      // first sample PTS should be equal to last sample PTS + frameDuration\n      const frameDuration = ADTS.getFrameDuration(track.samplerate as number);\n      pts = aacOverFlow.sample.pts + frameDuration;\n    } else {\n      this.logger.warn('[tsdemuxer]: AAC PES unknown PTS');\n      return;\n    }\n\n    // scan for aac samples\n    let frameIndex = 0;\n    let frame;\n    while (offset < len) {\n      frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n      offset += frame.length;\n      if (!frame.missing) {\n        frameIndex++;\n        for (; offset < len - 1; offset++) {\n          if (ADTS.isHeader(data, offset)) {\n            break;\n          }\n        }\n      } else {\n        this.aacOverFlow = frame;\n        break;\n      }\n    }\n  }\n\n  private parseMPEGPES(track: DemuxedAudioTrack, pes: PES) {\n    const data = pes.data;\n    const length = data.length;\n    let frameIndex = 0;\n    let offset = 0;\n    const pts = pes.pts;\n    if (pts === undefined) {\n      this.logger.warn('[tsdemuxer]: MPEG PES unknown PTS');\n      return;\n    }\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        const frame = MpegAudio.appendFrame(\n          track,\n          data,\n          offset,\n          pts,\n          frameIndex,\n        );\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          // logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        // nothing found, keep looking\n        offset++;\n      }\n    }\n  }\n\n  private parseAC3PES(track: DemuxedAudioTrack, pes: PES) {\n    if (__USE_M2TS_ADVANCED_CODECS__) {\n      const data = pes.data;\n      const pts = pes.pts;\n      if (pts === undefined) {\n        this.logger.warn('[tsdemuxer]: AC3 PES unknown PTS');\n        return;\n      }\n      const length = data.length;\n      let frameIndex = 0;\n      let offset = 0;\n      let parsed;\n\n      while (\n        offset < length &&\n        (parsed = AC3.appendFrame(track, data, offset, pts, frameIndex++)) > 0\n      ) {\n        offset += parsed;\n      }\n    }\n  }\n\n  private parseID3PES(id3Track: DemuxedMetadataTrack, pes: PES) {\n    if (pes.pts === undefined) {\n      this.logger.warn('[tsdemuxer]: ID3 PES unknown PTS');\n      return;\n    }\n    const id3Sample = Object.assign({}, pes as Required<PES>, {\n      type: this._videoTrack ? MetadataSchema.emsg : MetadataSchema.audioId3,\n      duration: Number.POSITIVE_INFINITY,\n    });\n    id3Track.samples.push(id3Sample);\n  }\n}\n\nfunction parsePID(data: Uint8Array, offset: number): number {\n  // pid is a 13-bit field starting at the last bit of TS[1]\n  return ((data[offset + 1] & 0x1f) << 8) + data[offset + 2];\n}\n\nfunction parsePAT(data: Uint8Array, offset: number): number {\n  // skip the PSI header and parse the first PMT entry\n  return ((data[offset + 10] & 0x1f) << 8) | data[offset + 11];\n}\n\nfunction parsePMT(\n  data: Uint8Array,\n  offset: number,\n  typeSupported: TypeSupported,\n  isSampleAes: boolean,\n  observer: HlsEventEmitter,\n  logger: ILogger,\n) {\n  const result = {\n    audioPid: -1,\n    videoPid: -1,\n    id3Pid: -1,\n    segmentVideoCodec: 'avc' as 'avc' | 'hevc',\n    segmentAudioCodec: 'aac' as 'aac' | 'ac3' | 'mp3',\n  };\n  const sectionLength = ((data[offset + 1] & 0x0f) << 8) | data[offset + 2];\n  const tableEnd = offset + 3 + sectionLength - 4;\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  const programInfoLength =\n    ((data[offset + 10] & 0x0f) << 8) | data[offset + 11];\n  // advance the offset to the first entry in the mapping table\n  offset += 12 + programInfoLength;\n  while (offset < tableEnd) {\n    const pid = parsePID(data, offset);\n    const esInfoLength = ((data[offset + 3] & 0x0f) << 8) | data[offset + 4];\n    switch (data[offset]) {\n      case 0xcf: // SAMPLE-AES AAC\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('ADTS AAC', logger);\n          break;\n        }\n      /* falls through */\n      case 0x0f: // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n        // logger.log('AAC PID:'  + pid);\n        if (result.audioPid === -1) {\n          result.audioPid = pid;\n        }\n\n        break;\n\n      // Packetized metadata (ID3)\n      case 0x15:\n        // logger.log('ID3 PID:'  + pid);\n        if (result.id3Pid === -1) {\n          result.id3Pid = pid;\n        }\n\n        break;\n\n      case 0xdb: // SAMPLE-AES AVC\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('H.264', logger);\n          break;\n        }\n      /* falls through */\n      case 0x1b: // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n        // logger.log('AVC PID:'  + pid);\n        if (result.videoPid === -1) {\n          result.videoPid = pid;\n        }\n\n        break;\n\n      // ISO/IEC 11172-3 (MPEG-1 audio)\n      // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n      case 0x03:\n      case 0x04:\n        // logger.log('MPEG PID:'  + pid);\n        if (!typeSupported.mpeg && !typeSupported.mp3) {\n          logger.log('MPEG audio found, not supported in this browser');\n        } else if (result.audioPid === -1) {\n          result.audioPid = pid;\n          result.segmentAudioCodec = 'mp3';\n        }\n        break;\n\n      case 0xc1: // SAMPLE-AES AC3\n        if (!isSampleAes) {\n          logEncryptedSamplesFoundInUnencryptedStream('AC-3', logger);\n          break;\n        }\n      /* falls through */\n      case 0x81:\n        if (__USE_M2TS_ADVANCED_CODECS__) {\n          if (!typeSupported.ac3) {\n            logger.log('AC-3 audio found, not supported in this browser');\n          } else if (result.audioPid === -1) {\n            result.audioPid = pid;\n            result.segmentAudioCodec = 'ac3';\n          }\n        } else {\n          logger.warn('AC-3 in M2TS support not included in build');\n        }\n        break;\n\n      case 0x06:\n        // stream_type 6 can mean a lot of different things in case of DVB.\n        // We need to look at the descriptors. Right now, we're only interested\n        // in AC-3 audio, so we do the descriptor parsing only when we don't have\n        // an audio PID yet.\n        if (result.audioPid === -1 && esInfoLength > 0) {\n          let parsePos = offset + 5;\n          let remaining = esInfoLength;\n\n          while (remaining > 2) {\n            const descriptorId = data[parsePos];\n\n            switch (descriptorId) {\n              case 0x6a: // DVB Descriptor for AC-3\n                if (__USE_M2TS_ADVANCED_CODECS__) {\n                  if (typeSupported.ac3 !== true) {\n                    logger.log(\n                      'AC-3 audio found, not supported in this browser for now',\n                    );\n                  } else {\n                    result.audioPid = pid;\n                    result.segmentAudioCodec = 'ac3';\n                  }\n                } else {\n                  logger.warn('AC-3 in M2TS support not included in build');\n                }\n                break;\n            }\n\n            const descriptorLen = data[parsePos + 1] + 2;\n            parsePos += descriptorLen;\n            remaining -= descriptorLen;\n          }\n        }\n        break;\n\n      case 0xc2: // SAMPLE-AES EC3\n      /* falls through */\n      case 0x87:\n        emitParsingError(\n          observer,\n          new Error('Unsupported EC-3 in M2TS found'),\n          undefined,\n          logger,\n        );\n        return result;\n\n      case 0x24: // ITU-T Rec. H.265 and ISO/IEC 23008-2 (HEVC)\n        if (__USE_M2TS_ADVANCED_CODECS__) {\n          if (result.videoPid === -1) {\n            result.videoPid = pid;\n            result.segmentVideoCodec = 'hevc';\n            logger.log('HEVC in M2TS found');\n          }\n        } else {\n          emitParsingError(\n            observer,\n            new Error('Unsupported HEVC in M2TS found'),\n            undefined,\n            logger,\n          );\n          return result;\n        }\n        break;\n\n      default:\n        // logger.log('unknown stream type:' + data[offset]);\n        break;\n    }\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += esInfoLength + 5;\n  }\n  return result;\n}\n\nfunction emitParsingError(\n  observer: HlsEventEmitter,\n  error: Error,\n  levelRetry: boolean | undefined,\n  logger: ILogger,\n) {\n  logger.warn(`parsing error: ${error.message}`);\n  observer.emit(Events.ERROR, Events.ERROR, {\n    type: ErrorTypes.MEDIA_ERROR,\n    details: ErrorDetails.FRAG_PARSING_ERROR,\n    fatal: false,\n    levelRetry,\n    error,\n    reason: error.message,\n  });\n}\n\nfunction logEncryptedSamplesFoundInUnencryptedStream(\n  type: string,\n  logger: ILogger,\n) {\n  logger.log(`${type} with AES-128-CBC encryption found in unencrypted stream`);\n}\n\nfunction parsePES(stream: ElementaryStreamData, logger: ILogger): PES | null {\n  let i = 0;\n  let frag: Uint8Array;\n  let pesLen: number;\n  let pesHdrLen: number;\n  let pesPts: number | undefined;\n  let pesDts: number | undefined;\n  const data = stream.data;\n  // safety check\n  if (!stream || stream.size === 0) {\n    return null;\n  }\n\n  // we might need up to 19 bytes to read PES header\n  // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n  // usually only one merge is needed (and this is rare ...)\n  while (data[0].length < 19 && data.length > 1) {\n    data[0] = appendUint8Array(data[0], data[1]);\n    data.splice(1, 1);\n  }\n  // retrieve PTS/DTS from first fragment\n  frag = data[0];\n  const pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n  if (pesPrefix === 1) {\n    pesLen = (frag[4] << 8) + frag[5];\n    // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n    // minus 6 : PES header size\n    if (pesLen && pesLen > stream.size - 6) {\n      return null;\n    }\n\n    const pesFlags = frag[7];\n    if (pesFlags & 0xc0) {\n      /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n          as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n          as Bitwise operators treat their operands as a sequence of 32 bits */\n      pesPts =\n        (frag[9] & 0x0e) * 536870912 + // 1 << 29\n        (frag[10] & 0xff) * 4194304 + // 1 << 22\n        (frag[11] & 0xfe) * 16384 + // 1 << 14\n        (frag[12] & 0xff) * 128 + // 1 << 7\n        (frag[13] & 0xfe) / 2;\n\n      if (pesFlags & 0x40) {\n        pesDts =\n          (frag[14] & 0x0e) * 536870912 + // 1 << 29\n          (frag[15] & 0xff) * 4194304 + // 1 << 22\n          (frag[16] & 0xfe) * 16384 + // 1 << 14\n          (frag[17] & 0xff) * 128 + // 1 << 7\n          (frag[18] & 0xfe) / 2;\n\n        if (pesPts - pesDts > 60 * 90000) {\n          logger.warn(\n            `${Math.round(\n              (pesPts - pesDts) / 90000,\n            )}s delta between PTS and DTS, align them`,\n          );\n          pesPts = pesDts;\n        }\n      } else {\n        pesDts = pesPts;\n      }\n    }\n    pesHdrLen = frag[8];\n    // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n    let payloadStartOffset = pesHdrLen + 9;\n    if (stream.size <= payloadStartOffset) {\n      return null;\n    }\n    stream.size -= payloadStartOffset;\n    // reassemble PES packet\n    const pesData = new Uint8Array(stream.size);\n    for (let j = 0, dataLen = data.length; j < dataLen; j++) {\n      frag = data[j];\n      let len = frag.byteLength;\n      if (payloadStartOffset) {\n        if (payloadStartOffset > len) {\n          // trim full frag if PES header bigger than frag\n          payloadStartOffset -= len;\n          continue;\n        } else {\n          // trim partial frag if PES header smaller than frag\n          frag = frag.subarray(payloadStartOffset);\n          len -= payloadStartOffset;\n          payloadStartOffset = 0;\n        }\n      }\n      pesData.set(frag, i);\n      i += len;\n    }\n    if (pesLen) {\n      // payload size : remove PES header + PES extension\n      pesLen -= pesHdrLen + 3;\n    }\n    return { data: pesData, pts: pesPts, dts: pesDts, len: pesLen };\n  }\n  return null;\n}\n\nexport default TSDemuxer;\n","/**\n *  AAC helper\n */\n\nclass AAC {\n  static getSilentFrame(\n    codec?: string,\n    channelCount?: number,\n  ): Uint8Array | undefined {\n    switch (codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([\n            0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80,\n          ]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x8e,\n          ]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38,\n          ]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([\n            0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64,\n            0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2,\n            0x00, 0x20, 0x08, 0xe0,\n          ]);\n        }\n\n        break;\n      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([\n            0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0,\n            0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,\n            0x5a, 0x5e,\n          ]);\n        }\n        break;\n    }\n    return undefined;\n  }\n}\n\nexport default AAC;\n","/**\n * Generate MP4 Box\n */\n\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport type {\n  DemuxedAC3,\n  DemuxedAudioTrack,\n  DemuxedAVC1,\n  DemuxedHEVC,\n  DemuxedVideoTrack,\n} from '../types/demuxer';\nimport type {\n  Mp4SampleFlags,\n  RemuxedAudioTrackSamples,\n  RemuxedVideoTrackSamples,\n} from '../types/remuxer';\n\ntype MediaTrackType = DemuxedAudioTrack | DemuxedVideoTrack;\ntype RemuxedTrackType = RemuxedAudioTrackSamples | RemuxedVideoTrackSamples;\n\ntype HdlrTypes = {\n  video: Uint8Array;\n  audio: Uint8Array;\n};\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4 {\n  public static types: Record<string, number[]>;\n  private static HDLR_TYPES: HdlrTypes;\n  private static STTS: Uint8Array;\n  private static STSC: Uint8Array;\n  private static STCO: Uint8Array;\n  private static STSZ: Uint8Array;\n  private static VMHD: Uint8Array;\n  private static SMHD: Uint8Array;\n  private static STSD: Uint8Array;\n  private static FTYP: Uint8Array;\n  private static DINF: Uint8Array;\n\n  static init() {\n    MP4.types = {\n      avc1: [], // codingname\n      avcC: [],\n      hvc1: [],\n      hvcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      dac3: [],\n      'ac-3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: [],\n    };\n\n    let i: string;\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [\n          i.charCodeAt(0),\n          i.charCodeAt(1),\n          i.charCodeAt(2),\n          i.charCodeAt(3),\n        ];\n      }\n    }\n\n    const videoHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x76,\n      0x69,\n      0x64,\n      0x65, // handler_type: 'vide'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x56,\n      0x69,\n      0x64,\n      0x65,\n      0x6f,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'VideoHandler'\n    ]);\n\n    const audioHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0x73,\n      0x6f,\n      0x75,\n      0x6e, // handler_type: 'soun'\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x53,\n      0x6f,\n      0x75,\n      0x6e,\n      0x64,\n      0x48,\n      0x61,\n      0x6e,\n      0x64,\n      0x6c,\n      0x65,\n      0x72,\n      0x00, // name: 'SoundHandler'\n    ]);\n\n    MP4.HDLR_TYPES = {\n      video: videoHdlr,\n      audio: audioHdlr,\n    };\n\n    const dref = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01, // entry_count\n      0x00,\n      0x00,\n      0x00,\n      0x0c, // entry_size\n      0x75,\n      0x72,\n      0x6c,\n      0x20, // 'url' type\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x01, // entry_flags\n    ]);\n\n    const stco = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // entry_count\n    ]);\n\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n    MP4.STSZ = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_size\n      0x00,\n      0x00,\n      0x00,\n      0x00, // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x01, // flags\n      0x00,\n      0x00, // graphicsmode\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([\n      0x00, // version\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00, // balance\n      0x00,\n      0x00, // reserved\n    ]);\n\n    MP4.STSD = new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n    ]); // entry_count\n\n    const majorBrand = new Uint8Array([105, 115, 111, 109]); // isom\n    const avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1\n    const minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    MP4.FTYP = MP4.box(\n      MP4.types.ftyp,\n      majorBrand,\n      minorVersion,\n      majorBrand,\n      avc1Brand,\n    );\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  }\n\n  static box(type: number[], ...payload: Uint8Array[]) {\n    let size = 8;\n    let i = payload.length;\n    const len = i;\n    // calculate the total size we need to allocate\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n\n    const result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  static hdlr(type: keyof HdlrTypes) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  }\n\n  static mdat(data: Uint8Array) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n  static mdhd(timescale: number, duration: number) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.mdhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x00, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (timescale >> 24) & 0xff,\n        (timescale >> 16) & 0xff,\n        (timescale >> 8) & 0xff,\n        timescale & 0xff, // timescale\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x55,\n        0xc4, // 'und' language (undetermined)\n        0x00,\n        0x00,\n      ]),\n    );\n  }\n\n  static mdia(track: MediaTrackType) {\n    return MP4.box(\n      MP4.types.mdia,\n      MP4.mdhd(track.timescale || 0, track.duration || 0),\n      MP4.hdlr(track.type),\n      MP4.minf(track),\n    );\n  }\n\n  static mfhd(sequenceNumber: number) {\n    return MP4.box(\n      MP4.types.mfhd,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00,\n        0x00, // flags\n        sequenceNumber >> 24,\n        (sequenceNumber >> 16) & 0xff,\n        (sequenceNumber >> 8) & 0xff,\n        sequenceNumber & 0xff, // sequence_number\n      ]),\n    );\n  }\n\n  static minf(track: MediaTrackType) {\n    if (track.type === 'audio') {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.smhd, MP4.SMHD),\n        MP4.DINF,\n        MP4.stbl(track),\n      );\n    } else {\n      return MP4.box(\n        MP4.types.minf,\n        MP4.box(MP4.types.vmhd, MP4.VMHD),\n        MP4.DINF,\n        MP4.stbl(track),\n      );\n    }\n  }\n\n  static moof(\n    sn: number,\n    baseMediaDecodeTime: number,\n    track: RemuxedTrackType,\n  ) {\n    return MP4.box(\n      MP4.types.moof,\n      MP4.mfhd(sn),\n      MP4.traf(track, baseMediaDecodeTime),\n    );\n  }\n\n  static moov(tracks: MediaTrackType[]) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(\n      null,\n      [\n        MP4.types.moov,\n        MP4.mvhd(tracks[0].timescale || 0, tracks[0].duration || 0),\n      ]\n        .concat(boxes)\n        .concat(MP4.mvex(tracks)),\n    );\n  }\n\n  static mvex(tracks: MediaTrackType[]) {\n    let i = tracks.length;\n    const boxes: Uint8Array[] = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.mvex, ...boxes]);\n  }\n\n  static mvhd(timescale: number, duration: number) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    const bytes = new Uint8Array([\n      0x01, // version 1\n      0x00,\n      0x00,\n      0x00, // flags\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x02, // creation_time\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x03, // modification_time\n      (timescale >> 24) & 0xff,\n      (timescale >> 16) & 0xff,\n      (timescale >> 8) & 0xff,\n      timescale & 0xff, // timescale\n      upperWordDuration >> 24,\n      (upperWordDuration >> 16) & 0xff,\n      (upperWordDuration >> 8) & 0xff,\n      upperWordDuration & 0xff,\n      lowerWordDuration >> 24,\n      (lowerWordDuration >> 16) & 0xff,\n      (lowerWordDuration >> 8) & 0xff,\n      lowerWordDuration & 0xff,\n      0x00,\n      0x01,\n      0x00,\n      0x00, // 1.0 rate\n      0x01,\n      0x00, // 1.0 volume\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x01,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x40,\n      0x00,\n      0x00,\n      0x00, // transformation: unity matrix\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // pre_defined\n      0xff,\n      0xff,\n      0xff,\n      0xff, // next_track_ID\n    ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  }\n\n  static sdtp(track: RemuxedTrackType) {\n    const samples = track.samples || [];\n    const bytes = new Uint8Array(4 + samples.length);\n    let i: number;\n    let flags: Mp4SampleFlags;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] =\n        (flags.dependsOn << 4) |\n        (flags.isDependedOn << 2) |\n        flags.hasRedundancy;\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  }\n\n  static stbl(track: MediaTrackType) {\n    return MP4.box(\n      MP4.types.stbl,\n      MP4.stsd(track),\n      MP4.box(MP4.types.stts, MP4.STTS),\n      MP4.box(MP4.types.stsc, MP4.STSC),\n      MP4.box(MP4.types.stsz, MP4.STSZ),\n      MP4.box(MP4.types.stco, MP4.STCO),\n    );\n  }\n\n  static avc1(track: DemuxedAVC1) {\n    let sps: number[] = [];\n    let pps: number[] = [];\n    let i;\n    let data;\n    let len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xff);\n      sps.push(len & 0xff);\n\n      // SPS\n      sps = sps.concat(Array.prototype.slice.call(data));\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xff);\n      pps.push(len & 0xff);\n\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    const avcc = MP4.box(\n      MP4.types.avcC,\n      new Uint8Array(\n        [\n          0x01, // version\n          sps[3], // profile\n          sps[4], // profile compat\n          sps[5], // level\n          0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n          0xe0 | track.sps.length, // 3bit reserved (111) + numOfSequenceParameterSets\n        ]\n          .concat(sps)\n          .concat([\n            track.pps.length, // numOfPictureParameterSets\n          ])\n          .concat(pps),\n      ),\n    ); // \"PPS\"\n    const width = track.width;\n    const height = track.height;\n    const hSpacing = track.pixelRatio[0];\n    const vSpacing = track.pixelRatio[1];\n\n    return MP4.box(\n      MP4.types.avc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x64,\n        0x61,\n        0x69,\n        0x6c, // dailymotion/hls.js\n        0x79,\n        0x6d,\n        0x6f,\n        0x74,\n        0x69,\n        0x6f,\n        0x6e,\n        0x2f,\n        0x68,\n        0x6c,\n        0x73,\n        0x2e,\n        0x6a,\n        0x73,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0x11,\n        0x11,\n      ]), // pre_defined = -1\n      avcc,\n      MP4.box(\n        MP4.types.btrt,\n        new Uint8Array([\n          0x00,\n          0x1c,\n          0x9c,\n          0x80, // bufferSizeDB\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0, // maxBitrate\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0,\n        ]),\n      ), // avgBitrate\n      MP4.box(\n        MP4.types.pasp,\n        new Uint8Array([\n          hSpacing >> 24, // hSpacing\n          (hSpacing >> 16) & 0xff,\n          (hSpacing >> 8) & 0xff,\n          hSpacing & 0xff,\n          vSpacing >> 24, // vSpacing\n          (vSpacing >> 16) & 0xff,\n          (vSpacing >> 8) & 0xff,\n          vSpacing & 0xff,\n        ]),\n      ),\n    );\n  }\n\n  static esds(track: DemuxedAudioTrack) {\n    const config = track.config as [number, number];\n    return new Uint8Array([\n      0x00, // version 0\n      0x00,\n      0x00,\n      0x00, // flags\n\n      0x03, // descriptor_type\n      0x19, // length\n\n      0x00,\n      0x01, // es_id\n\n      0x00, // stream_priority\n\n      0x04, // descriptor_type\n      0x11, // length\n      0x40, // codec : mpeg4_audio\n      0x15, // stream_type\n      0x00,\n      0x00,\n      0x00, // buffer_size\n      0x00,\n      0x00,\n      0x00,\n      0x00, // maxBitrate\n      0x00,\n      0x00,\n      0x00,\n      0x00, // avgBitrate\n\n      0x05, // descriptor_type\n      0x02, // length\n      ...config,\n      0x06,\n      0x01,\n      0x02, // GASpecificConfig)); // length + audio config descriptor\n    ]);\n  }\n\n  static audioStsd(track: DemuxedAudioTrack) {\n    const samplerate = track.samplerate || 0;\n    return new Uint8Array([\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      0x01, // data_reference_index\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved\n      0x00,\n      track.channelCount || 0, // channelcount\n      0x00,\n      0x10, // sampleSize:16bits\n      0x00,\n      0x00,\n      0x00,\n      0x00, // reserved2\n      (samplerate >> 8) & 0xff,\n      samplerate & 0xff, //\n      0x00,\n      0x00,\n    ]);\n  }\n\n  static mp4a(track: DemuxedAudioTrack) {\n    return MP4.box(\n      MP4.types.mp4a,\n      MP4.audioStsd(track),\n      MP4.box(MP4.types.esds, MP4.esds(track)),\n    );\n  }\n\n  static mp3(track: DemuxedAudioTrack) {\n    return MP4.box(MP4.types['.mp3'], MP4.audioStsd(track));\n  }\n\n  static ac3(track: DemuxedAudioTrack) {\n    return MP4.box(\n      MP4.types['ac-3'],\n      MP4.audioStsd(track),\n      MP4.box(MP4.types.dac3, track.config as Uint8Array),\n    );\n  }\n\n  static stsd(track: MediaTrackType | DemuxedAC3): Uint8Array {\n    const { segmentCodec } = track;\n    if (track.type === 'audio') {\n      if (segmentCodec === 'aac') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n      }\n      if (\n        __USE_M2TS_ADVANCED_CODECS__ &&\n        segmentCodec === 'ac3' &&\n        track.config\n      ) {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.ac3(track));\n      }\n      if (segmentCodec === 'mp3' && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n    } else {\n      if (track.pps && track.sps) {\n        if (segmentCodec === 'avc') {\n          return MP4.box(\n            MP4.types.stsd,\n            MP4.STSD,\n            MP4.avc1(track as DemuxedAVC1),\n          );\n        }\n        if (\n          __USE_M2TS_ADVANCED_CODECS__ &&\n          segmentCodec === 'hevc' &&\n          track.vps\n        ) {\n          return MP4.box(\n            MP4.types.stsd,\n            MP4.STSD,\n            MP4.hvc1(track as DemuxedHEVC),\n          );\n        }\n      } else {\n        throw new Error(`video track missing pps or sps`);\n      }\n    }\n\n    throw new Error(\n      `unsupported ${track.type} segment codec (${segmentCodec}/${track.codec})`,\n    );\n  }\n\n  static tkhd(track: MediaTrackType) {\n    const id = track.id;\n    const duration = (track.duration || 0) * (track.timescale || 0);\n    const width = (track as any).width || 0;\n    const height = (track as any).height || 0;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(\n      MP4.types.tkhd,\n      new Uint8Array([\n        0x01, // version 1\n        0x00,\n        0x00,\n        0x07, // flags\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x02, // creation_time\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x03, // modification_time\n        (id >> 24) & 0xff,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        upperWordDuration >> 24,\n        (upperWordDuration >> 16) & 0xff,\n        (upperWordDuration >> 8) & 0xff,\n        upperWordDuration & 0xff,\n        lowerWordDuration >> 24,\n        (lowerWordDuration >> 16) & 0xff,\n        (lowerWordDuration >> 8) & 0xff,\n        lowerWordDuration & 0xff,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00, // layer\n        0x00,\n        0x00, // alternate_group\n        0x00,\n        0x00, // non-audio track volume\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x01,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x40,\n        0x00,\n        0x00,\n        0x00, // transformation: unity matrix\n        (width >> 8) & 0xff,\n        width & 0xff,\n        0x00,\n        0x00, // width\n        (height >> 8) & 0xff,\n        height & 0xff,\n        0x00,\n        0x00, // height\n      ]),\n    );\n  }\n\n  static traf(track: RemuxedTrackType, baseMediaDecodeTime: number) {\n    const sampleDependencyTable = MP4.sdtp(track);\n    const id = track.id;\n    const upperWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime / (UINT32_MAX + 1),\n    );\n    const lowerWordBaseMediaDecodeTime = Math.floor(\n      baseMediaDecodeTime % (UINT32_MAX + 1),\n    );\n    return MP4.box(\n      MP4.types.traf,\n      MP4.box(\n        MP4.types.tfhd,\n        new Uint8Array([\n          0x00, // version 0\n          0x00,\n          0x00,\n          0x00, // flags\n          id >> 24,\n          (id >> 16) & 0xff,\n          (id >> 8) & 0xff,\n          id & 0xff, // track_ID\n        ]),\n      ),\n      MP4.box(\n        MP4.types.tfdt,\n        new Uint8Array([\n          0x01, // version 1\n          0x00,\n          0x00,\n          0x00, // flags\n          upperWordBaseMediaDecodeTime >> 24,\n          (upperWordBaseMediaDecodeTime >> 16) & 0xff,\n          (upperWordBaseMediaDecodeTime >> 8) & 0xff,\n          upperWordBaseMediaDecodeTime & 0xff,\n          lowerWordBaseMediaDecodeTime >> 24,\n          (lowerWordBaseMediaDecodeTime >> 16) & 0xff,\n          (lowerWordBaseMediaDecodeTime >> 8) & 0xff,\n          lowerWordBaseMediaDecodeTime & 0xff,\n        ]),\n      ),\n      MP4.trun(\n        track,\n        sampleDependencyTable.length +\n          16 + // tfhd\n          20 + // tfdt\n          8 + // traf header\n          16 + // mfhd\n          8 + // moof header\n          8,\n      ), // mdat header\n      sampleDependencyTable,\n    );\n  }\n\n  /**\n   * Generate a track box.\n   * @param track a track definition\n   */\n  static trak(track: MediaTrackType) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  }\n\n  static trex(track: MediaTrackType) {\n    const id = track.id;\n    return MP4.box(\n      MP4.types.trex,\n      new Uint8Array([\n        0x00, // version 0\n        0x00,\n        0x00,\n        0x00, // flags\n        id >> 24,\n        (id >> 16) & 0xff,\n        (id >> 8) & 0xff,\n        id & 0xff, // track_ID\n        0x00,\n        0x00,\n        0x00,\n        0x01, // default_sample_description_index\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_duration\n        0x00,\n        0x00,\n        0x00,\n        0x00, // default_sample_size\n        0x00,\n        0x01,\n        0x00,\n        0x01, // default_sample_flags\n      ]),\n    );\n  }\n\n  static trun(track: MediaTrackType, offset: number) {\n    const samples = track.samples || [];\n    const len = samples.length;\n    const arraylen = 12 + 16 * len;\n    const array = new Uint8Array(arraylen);\n    let i;\n    let sample;\n    let duration;\n    let size;\n    let flags;\n    let cts;\n    offset += 8 + arraylen;\n    array.set(\n      [\n        track.type === 'video' ? 0x01 : 0x00, // version 1 for video with signed-int sample_composition_time_offset\n        0x00,\n        0x0f,\n        0x01, // flags\n        (len >>> 24) & 0xff,\n        (len >>> 16) & 0xff,\n        (len >>> 8) & 0xff,\n        len & 0xff, // sample_count\n        (offset >>> 24) & 0xff,\n        (offset >>> 16) & 0xff,\n        (offset >>> 8) & 0xff,\n        offset & 0xff, // data_offset\n      ],\n      0,\n    );\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set(\n        [\n          (duration >>> 24) & 0xff,\n          (duration >>> 16) & 0xff,\n          (duration >>> 8) & 0xff,\n          duration & 0xff, // sample_duration\n          (size >>> 24) & 0xff,\n          (size >>> 16) & 0xff,\n          (size >>> 8) & 0xff,\n          size & 0xff, // sample_size\n          (flags.isLeading << 2) | flags.dependsOn,\n          (flags.isDependedOn << 6) |\n            (flags.hasRedundancy << 4) |\n            (flags.paddingValue << 1) |\n            flags.isNonSync,\n          flags.degradPrio & (0xf0 << 8),\n          flags.degradPrio & 0x0f, // sample_flags\n          (cts >>> 24) & 0xff,\n          (cts >>> 16) & 0xff,\n          (cts >>> 8) & 0xff,\n          cts & 0xff, // sample_composition_time_offset\n        ],\n        12 + 16 * i,\n      );\n    }\n    return MP4.box(MP4.types.trun, array);\n  }\n\n  static initSegment(tracks: MediaTrackType[]) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n\n    const movie = MP4.moov(tracks);\n    const result = appendUint8Array(MP4.FTYP, movie);\n    return result;\n  }\n\n  static hvc1(track: DemuxedHEVC) {\n    if (!__USE_M2TS_ADVANCED_CODECS__) {\n      return new Uint8Array();\n    }\n    const ps = track.params;\n    const units: Uint8Array[][] = [track.vps, track.sps, track.pps];\n    const NALuLengthSize = 4;\n    const config = new Uint8Array([\n      0x01,\n      (ps.general_profile_space << 6) |\n        (ps.general_tier_flag ? 32 : 0) |\n        ps.general_profile_idc,\n      ps.general_profile_compatibility_flags[0],\n      ps.general_profile_compatibility_flags[1],\n      ps.general_profile_compatibility_flags[2],\n      ps.general_profile_compatibility_flags[3],\n      ps.general_constraint_indicator_flags[0],\n      ps.general_constraint_indicator_flags[1],\n      ps.general_constraint_indicator_flags[2],\n      ps.general_constraint_indicator_flags[3],\n      ps.general_constraint_indicator_flags[4],\n      ps.general_constraint_indicator_flags[5],\n      ps.general_level_idc,\n      240 | (ps.min_spatial_segmentation_idc >> 8),\n      255 & ps.min_spatial_segmentation_idc,\n      252 | ps.parallelismType,\n      252 | ps.chroma_format_idc,\n      248 | ps.bit_depth_luma_minus8,\n      248 | ps.bit_depth_chroma_minus8,\n      0x00,\n      parseInt(ps.frame_rate.fps),\n      (NALuLengthSize - 1) |\n        (ps.temporal_id_nested << 2) |\n        (ps.num_temporal_layers << 3) |\n        (ps.frame_rate.fixed ? 64 : 0),\n      units.length,\n    ]);\n\n    // compute hvcC size in bytes\n    let length = config.length;\n    for (let i = 0; i < units.length; i += 1) {\n      length += 3;\n      for (let j = 0; j < units[i].length; j += 1) {\n        length += 2 + units[i][j].length;\n      }\n    }\n\n    const hvcC = new Uint8Array(length);\n    hvcC.set(config, 0);\n    length = config.length;\n    // append parameter set units: one vps, one or more sps and pps\n    const iMax = units.length - 1;\n    for (let i = 0; i < units.length; i += 1) {\n      hvcC.set(\n        new Uint8Array([\n          (32 + i) | (i === iMax ? 128 : 0),\n          0x00,\n          units[i].length,\n        ]),\n        length,\n      );\n      length += 3;\n      for (let j = 0; j < units[i].length; j += 1) {\n        hvcC.set(\n          new Uint8Array([units[i][j].length >> 8, units[i][j].length & 255]),\n          length,\n        );\n        length += 2;\n        hvcC.set(units[i][j], length);\n        length += units[i][j].length;\n      }\n    }\n    const hvcc = MP4.box(MP4.types.hvcC, hvcC);\n    const width = track.width;\n    const height = track.height;\n    const hSpacing = track.pixelRatio[0];\n    const vSpacing = track.pixelRatio[1];\n\n    return MP4.box(\n      MP4.types.hvc1,\n      new Uint8Array([\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // data_reference_index\n        0x00,\n        0x00, // pre_defined\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // pre_defined\n        (width >> 8) & 0xff,\n        width & 0xff, // width\n        (height >> 8) & 0xff,\n        height & 0xff, // height\n        0x00,\n        0x48,\n        0x00,\n        0x00, // horizresolution\n        0x00,\n        0x48,\n        0x00,\n        0x00, // vertresolution\n        0x00,\n        0x00,\n        0x00,\n        0x00, // reserved\n        0x00,\n        0x01, // frame_count\n        0x12,\n        0x64,\n        0x61,\n        0x69,\n        0x6c, // dailymotion/hls.js\n        0x79,\n        0x6d,\n        0x6f,\n        0x74,\n        0x69,\n        0x6f,\n        0x6e,\n        0x2f,\n        0x68,\n        0x6c,\n        0x73,\n        0x2e,\n        0x6a,\n        0x73,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00,\n        0x00, // compressorname\n        0x00,\n        0x18, // depth = 24\n        0x11,\n        0x11,\n      ]), // pre_defined = -1\n      hvcc,\n      MP4.box(\n        MP4.types.btrt,\n        new Uint8Array([\n          0x00,\n          0x1c,\n          0x9c,\n          0x80, // bufferSizeDB\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0, // maxBitrate\n          0x00,\n          0x2d,\n          0xc6,\n          0xc0,\n        ]),\n      ), // avgBitrate\n      MP4.box(\n        MP4.types.pasp,\n        new Uint8Array([\n          hSpacing >> 24, // hSpacing\n          (hSpacing >> 16) & 0xff,\n          (hSpacing >> 8) & 0xff,\n          hSpacing & 0xff,\n          vSpacing >> 24, // vSpacing\n          (vSpacing >> 16) & 0xff,\n          (vSpacing >> 8) & 0xff,\n          vSpacing & 0xff,\n        ]),\n      ),\n    );\n  }\n}\n\nexport default MP4;\n","const MPEG_TS_CLOCK_FREQ_HZ = 90000;\n\nexport type RationalTimestamp = {\n  baseTime: number; // ticks\n  timescale: number; // ticks per second\n};\n\nexport type TimestampOffset = RationalTimestamp & { trackId: number };\n\nexport function toTimescaleFromBase(\n  baseTime: number,\n  destScale: number,\n  srcBase: number = 1,\n  round: boolean = false,\n): number {\n  const result = baseTime * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`\n  return round ? Math.round(result) : result;\n}\n\nexport function toTimescaleFromScale(\n  baseTime: number,\n  destScale: number,\n  srcScale: number = 1,\n  round: boolean = false,\n): number {\n  return toTimescaleFromBase(baseTime, destScale, 1 / srcScale, round);\n}\n\nexport function toMsFromMpegTsClock(\n  baseTime: number,\n  round: boolean = false,\n): number {\n  return toTimescaleFromBase(baseTime, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);\n}\n\nexport function toMpegTsClockFromTimescale(\n  baseTime: number,\n  srcScale: number = 1,\n): number {\n  return toTimescaleFromBase(baseTime, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);\n}\n\nexport function timestampToString(timestamp: TimestampOffset): string {\n  const { baseTime, timescale, trackId } = timestamp;\n  return `${baseTime / timescale} (${baseTime}/${timescale}) trackId: ${trackId}`;\n}\n","import AAC from './aac-helper';\nimport MP4 from './mp4-generator';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { PlaylistLevelType } from '../types/loader';\nimport { type ILogger, Logger } from '../utils/logger';\nimport {\n  timestampToString,\n  toMsFromMpegTsClock,\n} from '../utils/timescale-conversion';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type { SourceBufferName } from '../types/buffer';\nimport type {\n  AudioSample,\n  DemuxedAudioTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n  DemuxedVideoTrack,\n  VideoSample,\n} from '../types/demuxer';\nimport type {\n  InitSegmentData,\n  Mp4Sample,\n  RemuxedMetadata,\n  RemuxedTrack,\n  RemuxedUserdata,\n  Remuxer,\n  RemuxerResult,\n} from '../types/remuxer';\nimport type { TrackSet } from '../types/track';\nimport type { TypeSupported } from '../utils/codecs';\nimport type {\n  RationalTimestamp,\n  TimestampOffset,\n} from '../utils/timescale-conversion';\n\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000; // 10 seconds\nconst AAC_SAMPLES_PER_FRAME = 1024;\nconst MPEG_AUDIO_SAMPLE_PER_FRAME = 1152;\nconst AC3_SAMPLES_PER_FRAME = 1536;\n\nlet chromeVersion: number | null = null;\nlet safariWebkitVersion: number | null = null;\n\nfunction createMp4Sample(\n  isKeyframe: boolean,\n  duration: number,\n  size: number,\n  cts: number,\n): Mp4Sample {\n  return {\n    duration,\n    size,\n    cts,\n    flags: {\n      isLeading: 0,\n      isDependedOn: 0,\n      hasRedundancy: 0,\n      degradPrio: 0,\n      dependsOn: isKeyframe ? 2 : 1,\n      isNonSync: isKeyframe ? 0 : 1,\n    },\n  };\n}\nexport default class MP4Remuxer extends Logger implements Remuxer {\n  private readonly observer: HlsEventEmitter;\n  private readonly config: HlsConfig;\n  private readonly typeSupported: TypeSupported;\n  private ISGenerated: boolean = false;\n  private _initPTS: TimestampOffset | null = null;\n  private _initDTS: TimestampOffset | null = null;\n  private nextVideoTs: number | null = null;\n  private nextAudioTs: number | null = null;\n  private videoSampleDuration: number | null = null;\n  private isAudioContiguous: boolean = false;\n  private isVideoContiguous: boolean = false;\n  private videoTrackConfig?: {\n    width?: number;\n    height?: number;\n    pixelRatio?: [number, number];\n  };\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported: TypeSupported,\n    logger: ILogger,\n  ) {\n    super('mp4-remuxer', logger);\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.ISGenerated = false;\n\n    if (chromeVersion === null) {\n      const userAgent = navigator.userAgent || '';\n      const result = userAgent.match(/Chrome\\/(\\d+)/i);\n      chromeVersion = result ? parseInt(result[1]) : 0;\n    }\n    if (safariWebkitVersion === null) {\n      const result = navigator.userAgent.match(/Safari\\/(\\d+)/i);\n      safariWebkitVersion = result ? parseInt(result[1]) : 0;\n    }\n  }\n\n  destroy() {\n    // @ts-ignore\n    this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;\n  }\n\n  resetTimeStamp(defaultTimeStamp: TimestampOffset | null) {\n    const initPTS = this._initPTS;\n    if (\n      !initPTS ||\n      !defaultTimeStamp ||\n      defaultTimeStamp.trackId !== initPTS.trackId ||\n      defaultTimeStamp.baseTime !== initPTS.baseTime ||\n      defaultTimeStamp.timescale !== initPTS.timescale\n    ) {\n      this.log(\n        `Reset initPTS: ${initPTS ? timestampToString(initPTS) : initPTS} > ${defaultTimeStamp ? timestampToString(defaultTimeStamp) : defaultTimeStamp}`,\n      );\n    }\n\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  }\n\n  resetNextTimestamp() {\n    this.log('reset next timestamp');\n    this.isVideoContiguous = false;\n    this.isAudioContiguous = false;\n  }\n\n  resetInitSegment() {\n    this.log('ISGenerated flag reset');\n    this.ISGenerated = false;\n    this.videoTrackConfig = undefined;\n  }\n\n  getVideoStartPts(videoSamples: VideoSample[]) {\n    // Get the minimum PTS value relative to the first sample's PTS, normalized for 33-bit wrapping\n    let rolloverDetected = false;\n    const firstPts = videoSamples[0].pts;\n    const startPTS = videoSamples.reduce((minPTS, sample) => {\n      let pts = sample.pts;\n      let delta = pts - minPTS;\n      if (delta < -4294967296) {\n        // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation\n        rolloverDetected = true;\n        pts = normalizePts(pts, firstPts);\n        delta = pts - minPTS;\n      }\n      if (delta > 0) {\n        return minPTS;\n      }\n      return pts;\n    }, firstPts);\n    if (rolloverDetected) {\n      this.debug('PTS rollover detected');\n    }\n    return startPTS;\n  }\n\n  remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedVideoTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    flush: boolean,\n    playlistType: PlaylistLevelType,\n  ): RemuxerResult {\n    let video: RemuxedTrack | undefined;\n    let audio: RemuxedTrack | undefined;\n    let initSegment: InitSegmentData | undefined;\n    let text: RemuxedUserdata | undefined;\n    let id3: RemuxedMetadata | undefined;\n    let independent: boolean | undefined;\n    let audioTimeOffset = timeOffset;\n    let videoTimeOffset = timeOffset;\n\n    // If we're remuxing audio and video progressively, wait until we've received enough samples for each track before proceeding.\n    // This is done to synchronize the audio and video streams. We know if the current segment will have samples if the \"pid\"\n    // parameter is greater than -1. The pid is set when the PMT is parsed, which contains the tracks list.\n    // However, if the initSegment has already been generated, or we've reached the end of a segment (flush),\n    // then we can remux one track without waiting for the other.\n    const hasAudio = audioTrack.pid > -1;\n    const hasVideo = videoTrack.pid > -1;\n    const length = videoTrack.samples.length;\n    const enoughAudioSamples = audioTrack.samples.length > 0;\n    const enoughVideoSamples = (flush && length > 0) || length > 1;\n    const canRemuxAvc =\n      ((!hasAudio || enoughAudioSamples) &&\n        (!hasVideo || enoughVideoSamples)) ||\n      this.ISGenerated ||\n      flush;\n\n    if (canRemuxAvc) {\n      if (this.ISGenerated) {\n        const config = this.videoTrackConfig;\n        if (\n          (config &&\n            (videoTrack.width !== config.width ||\n              videoTrack.height !== config.height ||\n              videoTrack.pixelRatio?.[0] !== config.pixelRatio?.[0] ||\n              videoTrack.pixelRatio?.[1] !== config.pixelRatio?.[1])) ||\n          (!config && enoughVideoSamples) ||\n          (this.nextAudioTs === null && enoughAudioSamples)\n        ) {\n          this.resetInitSegment();\n        }\n      }\n      if (!this.ISGenerated) {\n        initSegment = this.generateIS(\n          audioTrack,\n          videoTrack,\n          timeOffset,\n          accurateTimeOffset,\n        );\n      }\n\n      const isVideoContiguous = this.isVideoContiguous;\n      let firstKeyFrameIndex = -1;\n      let firstKeyFramePTS;\n\n      if (enoughVideoSamples) {\n        firstKeyFrameIndex = findKeyframeIndex(videoTrack.samples);\n        if (!isVideoContiguous && this.config.forceKeyFrameOnDiscontinuity) {\n          independent = true;\n          if (firstKeyFrameIndex > 0) {\n            this.warn(\n              `Dropped ${firstKeyFrameIndex} out of ${length} video samples due to a missing keyframe`,\n            );\n            const startPTS = this.getVideoStartPts(videoTrack.samples);\n            videoTrack.samples = videoTrack.samples.slice(firstKeyFrameIndex);\n            videoTrack.dropped += firstKeyFrameIndex;\n            videoTimeOffset +=\n              (videoTrack.samples[0].pts - startPTS) /\n              videoTrack.inputTimeScale;\n            firstKeyFramePTS = videoTimeOffset;\n          } else if (firstKeyFrameIndex === -1) {\n            this.warn(`No keyframe found out of ${length} video samples`);\n            independent = false;\n          }\n        }\n      }\n\n      if (this.ISGenerated) {\n        if (enoughAudioSamples && enoughVideoSamples) {\n          // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)\n          // if first audio DTS is not aligned with first video DTS then we need to take that into account\n          // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small\n          // drift between audio and video streams\n          const startPTS = this.getVideoStartPts(videoTrack.samples);\n          const tsDelta =\n            normalizePts(audioTrack.samples[0].pts, startPTS) - startPTS;\n          const audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;\n          audioTimeOffset += Math.max(0, audiovideoTimestampDelta);\n          videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);\n        }\n\n        // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is calculated in remuxAudio.\n        if (enoughAudioSamples) {\n          // if initSegment was generated without audio samples, regenerate it again\n          if (!audioTrack.samplerate) {\n            this.warn('regenerate InitSegment as audio detected');\n            initSegment = this.generateIS(\n              audioTrack,\n              videoTrack,\n              timeOffset,\n              accurateTimeOffset,\n            );\n          }\n          audio = this.remuxAudio(\n            audioTrack,\n            audioTimeOffset,\n            this.isAudioContiguous,\n            accurateTimeOffset,\n            hasVideo ||\n              enoughVideoSamples ||\n              playlistType === PlaylistLevelType.AUDIO\n              ? videoTimeOffset\n              : undefined,\n          );\n          if (enoughVideoSamples) {\n            const audioTrackLength = audio ? audio.endPTS - audio.startPTS : 0;\n            // if initSegment was generated without video samples, regenerate it again\n            if (!videoTrack.inputTimeScale) {\n              this.warn('regenerate InitSegment as video detected');\n              initSegment = this.generateIS(\n                audioTrack,\n                videoTrack,\n                timeOffset,\n                accurateTimeOffset,\n              );\n            }\n            video = this.remuxVideo(\n              videoTrack,\n              videoTimeOffset,\n              isVideoContiguous,\n              audioTrackLength,\n            );\n          }\n        } else if (enoughVideoSamples) {\n          video = this.remuxVideo(\n            videoTrack,\n            videoTimeOffset,\n            isVideoContiguous,\n            0,\n          );\n        }\n        if (video) {\n          video.firstKeyFrame = firstKeyFrameIndex;\n          video.independent = firstKeyFrameIndex !== -1;\n          video.firstKeyFramePTS = firstKeyFramePTS;\n        }\n      }\n    }\n\n    // Allow ID3 and text to remux, even if more audio/video samples are required\n    if (this.ISGenerated && this._initPTS && this._initDTS) {\n      if (id3Track.samples.length) {\n        id3 = flushTextTrackMetadataCueSamples(\n          id3Track,\n          timeOffset,\n          this._initPTS,\n          this._initDTS,\n        );\n      }\n\n      if (textTrack.samples.length) {\n        text = flushTextTrackUserdataCueSamples(\n          textTrack,\n          timeOffset,\n          this._initPTS,\n        );\n      }\n    }\n\n    return {\n      audio,\n      video,\n      initSegment,\n      independent,\n      text,\n      id3,\n    };\n  }\n\n  computeInitPts(\n    basetime: number,\n    timescale: number,\n    presentationTime: number,\n    type: 'audio' | 'video',\n  ): number {\n    const offset = Math.round(presentationTime * timescale);\n    let timestamp = normalizePts(basetime, offset);\n    if (timestamp < offset + timescale) {\n      this.log(\n        `Adjusting PTS for rollover in timeline near ${(offset - timestamp) / timescale} ${type}`,\n      );\n      while (timestamp < offset + timescale) {\n        timestamp += 8589934592;\n      }\n    }\n    return timestamp - offset;\n  }\n\n  generateIS(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: DemuxedVideoTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n  ): InitSegmentData | undefined {\n    const audioSamples = audioTrack.samples;\n    const videoSamples = videoTrack.samples;\n    const typeSupported = this.typeSupported;\n    const tracks: TrackSet = {};\n    const _initPTS = this._initPTS;\n    let computePTSDTS = !_initPTS || accurateTimeOffset;\n    let container = 'audio/mp4';\n    let initPTS: number | undefined;\n    let initDTS: number | undefined;\n    let timescale: number | undefined;\n    let trackId: number = -1;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      switch (audioTrack.segmentCodec) {\n        case 'mp3':\n          if (typeSupported.mpeg) {\n            // Chrome and Safari\n            container = 'audio/mpeg';\n            audioTrack.codec = '';\n          } else if (typeSupported.mp3) {\n            // Firefox\n            audioTrack.codec = 'mp3';\n          }\n          break;\n\n        case 'ac3':\n          audioTrack.codec = 'ac-3';\n          break;\n      }\n      tracks.audio = {\n        id: 'audio',\n        container: container,\n        codec: audioTrack.codec,\n        initSegment:\n          audioTrack.segmentCodec === 'mp3' && typeSupported.mpeg\n            ? new Uint8Array(0)\n            : MP4.initSegment([audioTrack]),\n        metadata: {\n          channelCount: audioTrack.channelCount,\n        },\n      };\n      if (computePTSDTS) {\n        trackId = audioTrack.id;\n        timescale = audioTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          // remember first PTS of this demuxing context. for audio, PTS = DTS\n          initPTS = initDTS = this.computeInitPts(\n            audioSamples[0].pts,\n            timescale,\n            timeOffset,\n            'audio',\n          );\n        } else {\n          computePTSDTS = false;\n        }\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      videoTrack.timescale = videoTrack.inputTimeScale;\n      tracks.video = {\n        id: 'main',\n        container: 'video/mp4',\n        codec: videoTrack.codec,\n        initSegment: MP4.initSegment([videoTrack]),\n        metadata: {\n          width: videoTrack.width,\n          height: videoTrack.height,\n        },\n      };\n      if (computePTSDTS) {\n        trackId = videoTrack.id;\n        timescale = videoTrack.inputTimeScale;\n        if (!_initPTS || timescale !== _initPTS.timescale) {\n          const basePTS = this.getVideoStartPts(videoSamples);\n          const baseDTS = normalizePts(videoSamples[0].dts, basePTS);\n          const videoInitDTS = this.computeInitPts(\n            baseDTS,\n            timescale,\n            timeOffset,\n            'video',\n          );\n          const videoInitPTS = this.computeInitPts(\n            basePTS,\n            timescale,\n            timeOffset,\n            'video',\n          );\n          initDTS = Math.min(initDTS as number, videoInitDTS);\n          initPTS = Math.min(initPTS as number, videoInitPTS);\n        } else {\n          computePTSDTS = false;\n        }\n      }\n      this.videoTrackConfig = {\n        width: videoTrack.width,\n        height: videoTrack.height,\n        pixelRatio: videoTrack.pixelRatio,\n      };\n    }\n\n    if (Object.keys(tracks).length) {\n      this.ISGenerated = true;\n      if (computePTSDTS) {\n        if (_initPTS) {\n          this.warn(\n            `Timestamps at playlist time: ${accurateTimeOffset ? '' : '~'}${timeOffset} ${initPTS! / timescale!} != initPTS: ${_initPTS.baseTime / _initPTS.timescale} (${_initPTS.baseTime}/${_initPTS.timescale}) trackId: ${_initPTS.trackId}`,\n          );\n        }\n        this.log(\n          `Found initPTS at playlist time: ${timeOffset} offset: ${initPTS! / timescale!} (${initPTS}/${timescale}) trackId: ${trackId}`,\n        );\n        this._initPTS = {\n          baseTime: initPTS as number,\n          timescale: timescale as number,\n          trackId: trackId as number,\n        };\n        this._initDTS = {\n          baseTime: initDTS as number,\n          timescale: timescale as number,\n          trackId: trackId as number,\n        };\n      } else {\n        initPTS = timescale = undefined;\n      }\n\n      return {\n        tracks,\n        initPTS,\n        timescale,\n        trackId,\n      };\n    }\n  }\n\n  remuxVideo(\n    track: DemuxedVideoTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    audioTrackLength: number,\n  ): RemuxedTrack | undefined {\n    const timeScale: number = track.inputTimeScale;\n    const inputSamples: Array<VideoSample> = track.samples;\n    const outputSamples: Array<Mp4Sample> = [];\n    const nbSamples = inputSamples.length;\n    const initPTS = this._initPTS as RationalTimestamp;\n    const initTime = (initPTS.baseTime * timeScale) / initPTS.timescale;\n    let nextVideoTs = this.nextVideoTs;\n    let offset = 8;\n    let mp4SampleDuration = this.videoSampleDuration;\n    let firstDTS;\n    let lastDTS;\n    let minPTS: number = Number.POSITIVE_INFINITY;\n    let maxPTS: number = Number.NEGATIVE_INFINITY;\n    let sortSamples = false;\n\n    // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n    if (!contiguous || nextVideoTs === null) {\n      const pts = initTime + timeOffset * timeScale;\n      const cts =\n        inputSamples[0].pts -\n        normalizePts(inputSamples[0].dts, inputSamples[0].pts);\n      if (\n        chromeVersion &&\n        nextVideoTs !== null &&\n        Math.abs(pts - cts - (nextVideoTs + initTime)) < 15000\n      ) {\n        // treat as contigous to adjust samples that would otherwise produce video buffer gaps in Chrome\n        contiguous = true;\n      } else {\n        // if not contiguous, let's use target timeOffset\n        nextVideoTs = pts - cts - initTime;\n      }\n    }\n\n    // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n    const nextVideoPts = nextVideoTs + initTime;\n    for (let i = 0; i < nbSamples; i++) {\n      const sample = inputSamples[i];\n      sample.pts = normalizePts(sample.pts, nextVideoPts);\n      sample.dts = normalizePts(sample.dts, nextVideoPts);\n      if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) {\n        sortSamples = true;\n      }\n    }\n\n    // sort video samples by DTS then PTS then demux id order\n    if (sortSamples) {\n      inputSamples.sort(function (a, b) {\n        const deltadts = a.dts - b.dts;\n        const deltapts = a.pts - b.pts;\n        return deltadts || deltapts;\n      });\n    }\n\n    // Get first/last DTS\n    firstDTS = inputSamples[0].dts;\n    lastDTS = inputSamples[inputSamples.length - 1].dts;\n\n    // Sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n    // set this constant duration as being the avg delta between consecutive DTS.\n    const inputDuration = lastDTS - firstDTS;\n    const averageSampleDuration = inputDuration\n      ? Math.round(inputDuration / (nbSamples - 1))\n      : mp4SampleDuration || track.inputTimeScale / 30;\n\n    // if fragment are contiguous, detect hole/overlapping between fragments\n    if (contiguous) {\n      // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)\n      const delta = firstDTS - nextVideoPts;\n      const foundHole = delta > averageSampleDuration;\n      const foundOverlap = delta < -1;\n      if (foundHole || foundOverlap) {\n        if (foundHole) {\n          this.warn(\n            `${(track.segmentCodec || '').toUpperCase()}: ${toMsFromMpegTsClock(\n              delta,\n              true,\n            )} ms (${delta}dts) hole between fragments detected at ${timeOffset.toFixed(\n              3,\n            )}`,\n          );\n        } else {\n          this.warn(\n            `${(track.segmentCodec || '').toUpperCase()}: ${toMsFromMpegTsClock(\n              -delta,\n              true,\n            )} ms (${delta}dts) overlapping between fragments detected at ${timeOffset.toFixed(\n              3,\n            )}`,\n          );\n        }\n        if (\n          !foundOverlap ||\n          nextVideoPts >= inputSamples[0].pts ||\n          chromeVersion\n        ) {\n          firstDTS = nextVideoPts;\n          const firstPTS = inputSamples[0].pts - delta;\n          if (foundHole) {\n            inputSamples[0].dts = firstDTS;\n            inputSamples[0].pts = firstPTS;\n          } else {\n            let isPTSOrderRetained = true;\n            for (let i = 0; i < inputSamples.length; i++) {\n              if (inputSamples[i].dts > firstPTS && isPTSOrderRetained) {\n                break;\n              }\n\n              const prevPTS = inputSamples[i].pts;\n              inputSamples[i].dts -= delta;\n              inputSamples[i].pts -= delta;\n\n              // check to see if this sample's PTS order has changed\n              // relative to the next one\n              if (i < inputSamples.length - 1) {\n                const nextSamplePTS = inputSamples[i + 1].pts;\n                const currentSamplePTS = inputSamples[i].pts;\n\n                const currentOrder = nextSamplePTS <= currentSamplePTS;\n                const prevOrder = nextSamplePTS <= prevPTS;\n\n                isPTSOrderRetained = currentOrder == prevOrder;\n              }\n            }\n          }\n          this.log(\n            `Video: Initial PTS/DTS adjusted: ${toMsFromMpegTsClock(\n              firstPTS,\n              true,\n            )}/${toMsFromMpegTsClock(\n              firstDTS,\n              true,\n            )}, delta: ${toMsFromMpegTsClock(delta, true)} ms`,\n          );\n        }\n      }\n    }\n\n    firstDTS = Math.max(0, firstDTS);\n\n    let nbNalu = 0;\n    let naluLen = 0;\n    let dtsStep = firstDTS;\n    for (let i = 0; i < nbSamples; i++) {\n      // compute total/avc sample length and nb of NAL units\n      const sample = inputSamples[i];\n      const units = sample.units;\n      const nbUnits = units.length;\n      let sampleLen = 0;\n      for (let j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      sample.length = sampleLen;\n\n      // ensure sample monotonic DTS\n      if (sample.dts < dtsStep) {\n        sample.dts = dtsStep;\n        dtsStep += (averageSampleDuration / 4) | 0 || 1;\n      } else {\n        dtsStep = sample.dts;\n      }\n\n      minPTS = Math.min(sample.pts, minPTS);\n      maxPTS = Math.max(sample.pts, maxPTS);\n    }\n    lastDTS = inputSamples[nbSamples - 1].dts;\n\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n    const mdatSize = naluLen + 4 * nbNalu + 8;\n    let mdat;\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch (err) {\n      this.observer.emit(Events.ERROR, Events.ERROR, {\n        type: ErrorTypes.MUX_ERROR,\n        details: ErrorDetails.REMUX_ALLOC_ERROR,\n        fatal: false,\n        error: err,\n        bytes: mdatSize,\n        reason: `fail allocating video mdat ${mdatSize}`,\n      });\n      return;\n    }\n    const view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(MP4.types.mdat, 4);\n\n    let stretchedLastFrame = false;\n    let minDtsDelta = Number.POSITIVE_INFINITY;\n    let minPtsDelta = Number.POSITIVE_INFINITY;\n    let maxDtsDelta = Number.NEGATIVE_INFINITY;\n    let maxPtsDelta = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < nbSamples; i++) {\n      const VideoSample = inputSamples[i];\n      const VideoSampleUnits = VideoSample.units;\n      let mp4SampleLength = 0;\n      // convert NALU bitstream to MP4 format (prepend NALU with size field)\n      for (let j = 0, nbUnits = VideoSampleUnits.length; j < nbUnits; j++) {\n        const unit = VideoSampleUnits[j];\n        const unitData = unit.data;\n        const unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      }\n\n      // expected sample duration is the Decoding Timestamp diff of consecutive samples\n      let ptsDelta;\n      if (i < nbSamples - 1) {\n        mp4SampleDuration = inputSamples[i + 1].dts - VideoSample.dts;\n        ptsDelta = inputSamples[i + 1].pts - VideoSample.pts;\n      } else {\n        const config = this.config;\n        const lastFrameDuration =\n          i > 0\n            ? VideoSample.dts - inputSamples[i - 1].dts\n            : averageSampleDuration;\n        ptsDelta =\n          i > 0\n            ? VideoSample.pts - inputSamples[i - 1].pts\n            : averageSampleDuration;\n        if (config.stretchShortVideoTrack && this.nextAudioTs !== null) {\n          // In some cases, a segment's audio track duration may exceed the video track duration.\n          // Since we've already remuxed audio, and we know how long the audio track is, we look to\n          // see if the delta to the next segment is longer than maxBufferHole.\n          // If so, playback would potentially get stuck, so we artificially inflate\n          // the duration of the last frame to minimize any potential gap between segments.\n          const gapTolerance = Math.floor(config.maxBufferHole * timeScale);\n          const deltaToFrameEnd =\n            (audioTrackLength\n              ? minPTS + audioTrackLength * timeScale\n              : this.nextAudioTs + initTime) - VideoSample.pts;\n          if (deltaToFrameEnd > gapTolerance) {\n            // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n            // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.\n            mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n            if (mp4SampleDuration < 0) {\n              mp4SampleDuration = lastFrameDuration;\n            } else {\n              stretchedLastFrame = true;\n            }\n            this.log(\n              `It is approximately ${\n                deltaToFrameEnd / 90\n              } ms to the next segment; using duration ${\n                mp4SampleDuration / 90\n              } ms for the last video frame.`,\n            );\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        } else {\n          mp4SampleDuration = lastFrameDuration;\n        }\n      }\n      const compositionTimeOffset = Math.round(\n        VideoSample.pts - VideoSample.dts,\n      );\n      minDtsDelta = Math.min(minDtsDelta, mp4SampleDuration);\n      maxDtsDelta = Math.max(maxDtsDelta, mp4SampleDuration);\n      minPtsDelta = Math.min(minPtsDelta, ptsDelta);\n      maxPtsDelta = Math.max(maxPtsDelta, ptsDelta);\n\n      outputSamples.push(\n        createMp4Sample(\n          VideoSample.key,\n          mp4SampleDuration,\n          mp4SampleLength,\n          compositionTimeOffset,\n        ),\n      );\n    }\n\n    if (outputSamples.length) {\n      if (chromeVersion) {\n        if (chromeVersion < 70) {\n          // Chrome workaround, mark first sample as being a Random Access Point (keyframe) to avoid sourcebuffer append issue\n          // https://code.google.com/p/chromium/issues/detail?id=229412\n          const flags = outputSamples[0].flags;\n          flags.dependsOn = 2;\n          flags.isNonSync = 0;\n        }\n      } else if (safariWebkitVersion) {\n        // Fix for \"CNN special report, with CC\" in test-streams (Safari browser only)\n        // Ignore DTS when frame durations are irregular. Safari MSE does not handle this leading to gaps.\n        if (\n          maxPtsDelta - minPtsDelta < maxDtsDelta - minDtsDelta &&\n          averageSampleDuration / maxDtsDelta < 0.025 &&\n          outputSamples[0].cts === 0\n        ) {\n          this.warn(\n            'Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.',\n          );\n          let dts = firstDTS;\n          for (let i = 0, len = outputSamples.length; i < len; i++) {\n            const nextDts = dts + outputSamples[i].duration;\n            const pts = dts + outputSamples[i].cts;\n            if (i < len - 1) {\n              const nextPts = nextDts + outputSamples[i + 1].cts;\n              outputSamples[i].duration = nextPts - pts;\n            } else {\n              outputSamples[i].duration = i\n                ? outputSamples[i - 1].duration\n                : averageSampleDuration;\n            }\n            outputSamples[i].cts = 0;\n            dts = nextDts;\n          }\n        }\n      }\n    }\n    // next AVC/HEVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n    mp4SampleDuration =\n      stretchedLastFrame || !mp4SampleDuration\n        ? averageSampleDuration\n        : mp4SampleDuration;\n    const endDTS = lastDTS + mp4SampleDuration;\n    this.nextVideoTs = nextVideoTs = endDTS - initTime;\n    this.videoSampleDuration = mp4SampleDuration;\n    this.isVideoContiguous = true;\n    const moof = MP4.moof(\n      track.sequenceNumber++,\n      firstDTS,\n      Object.assign(track, {\n        samples: outputSamples,\n      }),\n    );\n    const type: SourceBufferName = 'video';\n    const data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: (minPTS - initTime) / timeScale,\n      endPTS: (maxPTS + mp4SampleDuration - initTime) / timeScale,\n      startDTS: (firstDTS - initTime) / timeScale,\n      endDTS: nextVideoTs / timeScale,\n      type,\n      hasAudio: false,\n      hasVideo: true,\n      nb: outputSamples.length,\n      dropped: track.dropped,\n    };\n    track.samples = [];\n    track.dropped = 0;\n    return data;\n  }\n\n  getSamplesPerFrame(track: DemuxedAudioTrack) {\n    switch (track.segmentCodec) {\n      case 'mp3':\n        return MPEG_AUDIO_SAMPLE_PER_FRAME;\n      case 'ac3':\n        return AC3_SAMPLES_PER_FRAME;\n      default:\n        return AAC_SAMPLES_PER_FRAME;\n    }\n  }\n\n  remuxAudio(\n    track: DemuxedAudioTrack,\n    timeOffset: number,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    videoTimeOffset?: number,\n  ): RemuxedTrack | undefined {\n    const inputTimeScale: number = track.inputTimeScale;\n    const mp4timeScale: number = track.samplerate\n      ? track.samplerate\n      : inputTimeScale;\n    const scaleFactor: number = inputTimeScale / mp4timeScale;\n    const mp4SampleDuration: number = this.getSamplesPerFrame(track);\n    const inputSampleDuration: number = mp4SampleDuration * scaleFactor;\n    const initPTS = this._initPTS as RationalTimestamp;\n    const rawMPEG: boolean =\n      track.segmentCodec === 'mp3' && this.typeSupported.mpeg;\n    const outputSamples: Array<Mp4Sample> = [];\n    const alignedWithVideo = videoTimeOffset !== undefined;\n\n    let inputSamples: Array<AudioSample> = track.samples;\n    let offset: number = rawMPEG ? 0 : 8;\n    let nextAudioTs: number = this.nextAudioTs || -1;\n\n    // window.audioSamples ? window.audioSamples.push(inputSamples.map(s => s.pts)) : (window.audioSamples = [inputSamples.map(s => s.pts)]);\n\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n    const initTime = (initPTS.baseTime * inputTimeScale) / initPTS.timescale;\n    const timeOffsetMpegTS = initTime + timeOffset * inputTimeScale;\n    this.isAudioContiguous = contiguous =\n      contiguous ||\n      ((inputSamples.length &&\n        nextAudioTs > 0 &&\n        ((accurateTimeOffset &&\n          Math.abs(timeOffsetMpegTS - (nextAudioTs + initTime)) < 9000) ||\n          Math.abs(\n            normalizePts(inputSamples[0].pts, timeOffsetMpegTS) -\n              (nextAudioTs + initTime),\n          ) <\n            20 * inputSampleDuration)) as boolean);\n\n    // compute normalized PTS\n    inputSamples.forEach(function (sample) {\n      sample.pts = normalizePts(sample.pts, timeOffsetMpegTS);\n    });\n\n    if (!contiguous || nextAudioTs < 0) {\n      const sampleCount = inputSamples.length;\n      // filter out sample with negative PTS that are not playable anyway\n      // if we don't remove these negative samples, they will shift all audio samples forward.\n      // leading to audio overlap between current / next fragment\n      inputSamples = inputSamples.filter((sample) => sample.pts >= 0);\n\n      if (sampleCount !== inputSamples.length) {\n        this.warn(\n          `Removed ${inputSamples.length - sampleCount} of ${sampleCount} samples (initPTS ${initTime} / ${inputTimeScale})`,\n        );\n      }\n\n      // in case all samples have negative PTS, and have been filtered out, return now\n      if (!inputSamples.length) {\n        return;\n      }\n\n      if (videoTimeOffset === 0) {\n        // Set the start to match video so that start gaps larger than inputSampleDuration are filled with silence\n        nextAudioTs = 0;\n      } else if (accurateTimeOffset && !alignedWithVideo) {\n        // When not seeking, not live, and LevelDetails.PTSKnown, use fragment start as predicted next audio PTS\n        nextAudioTs = Math.max(0, timeOffsetMpegTS - initTime);\n      } else {\n        // if frags are not contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS\n        nextAudioTs = inputSamples[0].pts - initTime;\n      }\n    }\n\n    // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n    if (track.segmentCodec === 'aac') {\n      const maxAudioFramesDrift = this.config.maxAudioFramesDrift;\n      for (\n        let i = 0, nextPts = nextAudioTs + initTime;\n        i < inputSamples.length;\n        i++\n      ) {\n        // First, let's see how far off this frame is from where we expect it to be\n        const sample = inputSamples[i];\n        const pts = sample.pts;\n        const delta = pts - nextPts;\n        const duration = Math.abs((1000 * delta) / inputTimeScale);\n\n        // When remuxing with video, if we're overlapping by more than a duration, drop this sample to stay in sync\n        if (\n          delta <= -maxAudioFramesDrift * inputSampleDuration &&\n          alignedWithVideo\n        ) {\n          if (i === 0) {\n            this.warn(\n              `Audio frame @ ${(pts / inputTimeScale).toFixed(\n                3,\n              )}s overlaps marker by ${Math.round(\n                (1000 * delta) / inputTimeScale,\n              )} ms.`,\n            );\n            this.nextAudioTs = nextAudioTs = pts - initTime;\n            nextPts = pts;\n          }\n        } // eslint-disable-line brace-style\n\n        // Insert missing frames if:\n        // 1: We're more than maxAudioFramesDrift frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        // 4: remuxing with video (videoTimeOffset !== undefined)\n        else if (\n          delta >= maxAudioFramesDrift * inputSampleDuration &&\n          duration < MAX_SILENT_FRAME_DURATION &&\n          alignedWithVideo\n        ) {\n          let missing = Math.round(delta / inputSampleDuration);\n          // Adjust nextPts so that silent samples are aligned with media pts. This will prevent media samples from\n          // later being shifted if nextPts is based on timeOffset and delta is not a multiple of inputSampleDuration.\n          nextPts = pts - missing * inputSampleDuration;\n          while (nextPts < 0 && missing && inputSampleDuration) {\n            missing--;\n            nextPts += inputSampleDuration;\n          }\n          if (i === 0) {\n            this.nextAudioTs = nextAudioTs = nextPts - initTime;\n          }\n          this.warn(\n            `Injecting ${missing} audio frames @ ${(\n              (nextPts - initTime) /\n              inputTimeScale\n            ).toFixed(3)}s due to ${Math.round(\n              (1000 * delta) / inputTimeScale,\n            )} ms gap.`,\n          );\n          for (let j = 0; j < missing; j++) {\n            let fillFrame = AAC.getSilentFrame(\n              track.parsedCodec || track.manifestCodec || track.codec,\n              track.channelCount,\n            );\n            if (!fillFrame) {\n              this.log(\n                'Unable to get silent frame for given audio codec; duplicating last frame instead.',\n              );\n              fillFrame = sample.unit.subarray();\n            }\n            inputSamples.splice(i, 0, {\n              unit: fillFrame,\n              pts: nextPts,\n            });\n            nextPts += inputSampleDuration;\n            i++;\n          }\n        }\n        sample.pts = nextPts;\n        nextPts += inputSampleDuration;\n      }\n    }\n    let firstPTS: number | null = null;\n    let lastPTS: number | null = null;\n    let mdat: any;\n    let mdatSize: number = 0;\n    let sampleLength: number = inputSamples.length;\n    while (sampleLength--) {\n      mdatSize += inputSamples[sampleLength].unit.byteLength;\n    }\n    for (let j = 0, nbSamples = inputSamples.length; j < nbSamples; j++) {\n      const audioSample = inputSamples[j];\n      const unit = audioSample.unit;\n      let pts = audioSample.pts;\n      if (lastPTS !== null) {\n        // If we have more than one sample, set the duration of the sample to the \"real\" duration; the PTS diff with\n        // the previous sample\n        const prevSample = outputSamples[j - 1];\n        prevSample.duration = Math.round((pts - lastPTS) / scaleFactor);\n      } else {\n        if (contiguous && track.segmentCodec === 'aac') {\n          // set PTS/DTS to expected PTS/DTS\n          pts = nextAudioTs + initTime;\n        }\n        // remember first PTS of our audioSamples\n        firstPTS = pts;\n        if (mdatSize > 0) {\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          mdatSize += offset;\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch (err) {\n            this.observer.emit(Events.ERROR, Events.ERROR, {\n              type: ErrorTypes.MUX_ERROR,\n              details: ErrorDetails.REMUX_ALLOC_ERROR,\n              fatal: false,\n              error: err,\n              bytes: mdatSize,\n              reason: `fail allocating audio mdat ${mdatSize}`,\n            });\n            return;\n          }\n          if (!rawMPEG) {\n            const view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(MP4.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n      }\n      mdat.set(unit, offset);\n      const unitLen = unit.byteLength;\n      offset += unitLen;\n      // Default the sample's duration to the computed mp4SampleDuration, which will either be 1024 for AAC or 1152 for MPEG\n      // In the case that we have 1 sample, this will be the duration. If we have more than one sample, the duration\n      // becomes the PTS diff with the previous sample\n      outputSamples.push(createMp4Sample(true, mp4SampleDuration, unitLen, 0));\n      lastPTS = pts;\n    }\n\n    // We could end up with no audio samples if all input samples were overlapping with the previously remuxed ones\n    const nbSamples = outputSamples.length;\n    if (!nbSamples) {\n      return;\n    }\n\n    // The next audio sample PTS should be equal to last sample PTS + duration\n    const lastSample = outputSamples[outputSamples.length - 1];\n    nextAudioTs = (lastPTS as number) - initTime;\n    this.nextAudioTs = nextAudioTs + scaleFactor * lastSample.duration;\n\n    // Set the track samples from inputSamples to outputSamples before remuxing\n    const moof = rawMPEG\n      ? new Uint8Array(0)\n      : MP4.moof(\n          track.sequenceNumber++,\n          firstPTS! / scaleFactor,\n          Object.assign({}, track, { samples: outputSamples }),\n        );\n\n    // Clear the track samples. This also clears the samples array in the demuxer, since the reference is shared\n    track.samples = [];\n    const start = (firstPTS! - initTime) / inputTimeScale;\n    const end = nextAudioTs / inputTimeScale;\n    const type: SourceBufferName = 'audio';\n    const audioData = {\n      data1: moof,\n      data2: mdat,\n      startPTS: start,\n      endPTS: end,\n      startDTS: start,\n      endDTS: end,\n      type,\n      hasAudio: true,\n      hasVideo: false,\n      nb: nbSamples,\n    };\n\n    this.isAudioContiguous = true;\n    return audioData;\n  }\n}\n\nexport function normalizePts(value: number, reference: number | null): number {\n  let offset;\n  if (reference === null) {\n    return value;\n  }\n\n  if (reference < value) {\n    // - 2^33\n    offset = -8589934592;\n  } else {\n    // + 2^33\n    offset = 8589934592;\n  }\n  /* PTS is 33bit (from 0 to 2^33 -1)\n    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n    PTS looping occured. fill the gap */\n  while (Math.abs(value - reference) > 4294967296) {\n    value += offset;\n  }\n\n  return value;\n}\n\nfunction findKeyframeIndex(samples: Array<VideoSample>): number {\n  for (let i = 0; i < samples.length; i++) {\n    if (samples[i].key) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function flushTextTrackMetadataCueSamples(\n  track: DemuxedMetadataTrack,\n  timeOffset: number,\n  initPTS: TimestampOffset,\n  initDTS: TimestampOffset,\n): RemuxedMetadata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting id3 pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * inputTimeScale) / initPTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n    sample.dts =\n      normalizePts(\n        sample.dts - (initDTS.baseTime * inputTimeScale) / initDTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n  }\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n\nexport function flushTextTrackUserdataCueSamples(\n  track: DemuxedUserdataTrack,\n  timeOffset: number,\n  initPTS: RationalTimestamp,\n): RemuxedUserdata | undefined {\n  const length = track.samples.length;\n  if (!length) {\n    return;\n  }\n\n  const inputTimeScale = track.inputTimeScale;\n  for (let index = 0; index < length; index++) {\n    const sample = track.samples[index];\n    // setting text pts, dts to relative time\n    // using this._initPTS and this._initDTS to calculate relative time\n    sample.pts =\n      normalizePts(\n        sample.pts - (initPTS.baseTime * inputTimeScale) / initPTS.timescale,\n        timeOffset * inputTimeScale,\n      ) / inputTimeScale;\n  }\n  track.samples.sort((a, b) => a.pts - b.pts);\n  const samples = track.samples;\n  track.samples = [];\n  return {\n    samples,\n  };\n}\n","import {\n  flushTextTrackMetadataCueSamples,\n  flushTextTrackUserdataCueSamples,\n} from './mp4-remuxer';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { getCodecCompatibleName } from '../utils/codecs';\nimport { type ILogger, Logger } from '../utils/logger';\nimport { patchEncyptionData } from '../utils/mp4-tools';\nimport { getSampleData, parseInitSegment } from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type { DecryptData } from '../loader/level-key';\nimport type {\n  DemuxedAudioTrack,\n  DemuxedMetadataTrack,\n  DemuxedUserdataTrack,\n  PassthroughTrack,\n} from '../types/demuxer';\nimport type {\n  InitSegmentData,\n  RemuxedTrack,\n  Remuxer,\n  RemuxerResult,\n} from '../types/remuxer';\nimport type { TrackSet } from '../types/track';\nimport type { TypeSupported } from '../utils/codecs';\nimport type { InitData, InitDataTrack, TrackTimes } from '../utils/mp4-tools';\nimport type { TimestampOffset } from '../utils/timescale-conversion';\n\nclass PassThroughRemuxer extends Logger implements Remuxer {\n  private emitInitSegment: boolean = false;\n  private audioCodec?: string;\n  private videoCodec?: string;\n  private initData?: InitData;\n  private initPTS: TimestampOffset | null = null;\n  private initTracks?: TrackSet;\n  private lastEndTime: number | null = null;\n  private isVideoContiguous: boolean = false;\n\n  constructor(\n    observer: HlsEventEmitter,\n    config: HlsConfig,\n    typeSupported: TypeSupported,\n    logger: ILogger,\n  ) {\n    super('passthrough-remuxer', logger);\n  }\n\n  public destroy() {}\n\n  public resetTimeStamp(defaultInitPTS: TimestampOffset | null) {\n    this.lastEndTime = null;\n    const initPTS = this.initPTS;\n    if (initPTS && defaultInitPTS) {\n      if (\n        initPTS.baseTime === defaultInitPTS.baseTime &&\n        initPTS.timescale === defaultInitPTS.timescale\n      ) {\n        return;\n      }\n    }\n    this.initPTS = defaultInitPTS;\n  }\n\n  public resetNextTimestamp() {\n    this.isVideoContiguous = false;\n    this.lastEndTime = null;\n  }\n\n  public resetInitSegment(\n    initSegment: Uint8Array<ArrayBuffer> | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    decryptdata: DecryptData | null,\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.generateInitSegment(initSegment, decryptdata);\n    this.emitInitSegment = true;\n  }\n\n  private generateInitSegment(\n    initSegment: Uint8Array<ArrayBuffer> | undefined,\n    decryptdata?: DecryptData | null,\n  ) {\n    let { audioCodec, videoCodec } = this;\n    if (!initSegment?.byteLength) {\n      this.initTracks = undefined;\n      this.initData = undefined;\n      return;\n    }\n    const { audio, video } = (this.initData = parseInitSegment(initSegment));\n\n    if (decryptdata) {\n      patchEncyptionData(initSegment, decryptdata);\n    } else {\n      const eitherTrack = audio || video;\n      if (eitherTrack?.encrypted) {\n        this.warn(\n          `Init segment with encrypted track with has no key (\"${eitherTrack.codec}\")!`,\n        );\n      }\n    }\n\n    // Get codec from initSegment\n    if (audio) {\n      audioCodec = getParsedTrackCodec(\n        audio,\n        ElementaryStreamTypes.AUDIO,\n        this,\n      );\n    }\n\n    if (video) {\n      videoCodec = getParsedTrackCodec(\n        video,\n        ElementaryStreamTypes.VIDEO,\n        this,\n      );\n    }\n\n    const tracks: TrackSet = {};\n    if (audio && video) {\n      tracks.audiovideo = {\n        container: 'video/mp4',\n        codec: audioCodec + ',' + videoCodec,\n        supplemental: video.supplemental,\n        encrypted: video.encrypted,\n        initSegment,\n        id: 'main',\n      };\n    } else if (audio) {\n      tracks.audio = {\n        container: 'audio/mp4',\n        codec: audioCodec,\n        encrypted: audio.encrypted,\n        initSegment,\n        id: 'audio',\n      };\n    } else if (video) {\n      tracks.video = {\n        container: 'video/mp4',\n        codec: videoCodec,\n        supplemental: video.supplemental,\n        encrypted: video.encrypted,\n        initSegment,\n        id: 'main',\n      };\n    } else {\n      this.warn('initSegment does not contain moov or trak boxes.');\n    }\n    this.initTracks = tracks;\n  }\n\n  public remux(\n    audioTrack: DemuxedAudioTrack,\n    videoTrack: PassthroughTrack,\n    id3Track: DemuxedMetadataTrack,\n    textTrack: DemuxedUserdataTrack,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n  ): RemuxerResult {\n    let { initPTS, lastEndTime } = this;\n    const result: RemuxerResult = {\n      audio: undefined,\n      video: undefined,\n      text: textTrack,\n      id3: id3Track,\n      initSegment: undefined,\n    };\n\n    // If we haven't yet set a lastEndDTS, or it was reset, set it to the provided timeOffset. We want to use the\n    // lastEndDTS over timeOffset whenever possible; during progressive playback, the media source will not update\n    // the media duration (which is what timeOffset is provided as) before we need to process the next chunk.\n    if (!Number.isFinite(lastEndTime!)) {\n      lastEndTime = this.lastEndTime = timeOffset || 0;\n    }\n\n    // The binary segment data is added to the videoTrack in the mp4demuxer. We don't check to see if the data is only\n    // audio or video (or both); adding it to video was an arbitrary choice.\n    const data = videoTrack.samples;\n    if (!data.length) {\n      return result;\n    }\n\n    const initSegment: InitSegmentData = {\n      initPTS: undefined,\n      timescale: undefined,\n      trackId: undefined,\n    };\n    let initData = this.initData;\n    if (!initData?.length) {\n      this.generateInitSegment(data);\n      initData = this.initData;\n    }\n    if (!initData?.length) {\n      // We can't remux if the initSegment could not be generated\n      this.warn('Failed to generate initSegment.');\n      return result;\n    }\n    if (this.emitInitSegment) {\n      initSegment.tracks = this.initTracks;\n      this.emitInitSegment = false;\n    }\n\n    const trackSampleData = getSampleData(data, initData, this);\n    const audioSampleTimestamps = initData.audio\n      ? trackSampleData[initData.audio.id]\n      : null;\n    const videoSampleTimestamps = initData.video\n      ? trackSampleData[initData.video.id]\n      : null;\n\n    const videoStartTime = toStartEndOrDefault(videoSampleTimestamps, Infinity);\n    const audioStartTime = toStartEndOrDefault(audioSampleTimestamps, Infinity);\n    const videoEndTime = toStartEndOrDefault(videoSampleTimestamps, 0, true);\n    const audioEndTime = toStartEndOrDefault(audioSampleTimestamps, 0, true);\n\n    let decodeTime = timeOffset;\n    let duration = 0;\n\n    const syncOnAudio =\n      audioSampleTimestamps &&\n      (!videoSampleTimestamps ||\n        (!initPTS && audioStartTime < videoStartTime) ||\n        (initPTS && initPTS.trackId === initData.audio!.id));\n    const baseOffsetSamples = syncOnAudio\n      ? audioSampleTimestamps\n      : videoSampleTimestamps;\n\n    if (baseOffsetSamples) {\n      const timescale = baseOffsetSamples.timescale;\n      const baseTime = baseOffsetSamples.start - timeOffset * timescale;\n      const trackId = syncOnAudio ? initData.audio!.id : initData.video!.id;\n\n      decodeTime = baseOffsetSamples.start / timescale;\n      duration = syncOnAudio\n        ? audioEndTime - audioStartTime\n        : videoEndTime - videoStartTime;\n\n      if (\n        (accurateTimeOffset || !initPTS) &&\n        (isInvalidInitPts(initPTS, decodeTime, timeOffset, duration) ||\n          timescale !== initPTS.timescale)\n      ) {\n        if (initPTS) {\n          this.warn(\n            `Timestamps at playlist time: ${accurateTimeOffset ? '' : '~'}${timeOffset} ${baseTime / timescale} != initPTS: ${initPTS.baseTime / initPTS.timescale} (${initPTS.baseTime}/${initPTS.timescale}) trackId: ${initPTS.trackId}`,\n          );\n        }\n        this.log(\n          `Found initPTS at playlist time: ${timeOffset} offset: ${decodeTime - timeOffset} (${baseTime}/${timescale}) trackId: ${trackId}`,\n        );\n        initPTS = null;\n        initSegment.initPTS = baseTime;\n        initSegment.timescale = timescale;\n        initSegment.trackId = trackId;\n      }\n    } else {\n      this.warn(\n        `No audio or video samples found for initPTS at playlist time: ${timeOffset}`,\n      );\n    }\n    if (!initPTS) {\n      if (\n        !initSegment.timescale ||\n        initSegment.trackId === undefined ||\n        initSegment.initPTS === undefined\n      ) {\n        this.warn('Could not set initPTS');\n        initSegment.initPTS = decodeTime;\n        initSegment.timescale = 1;\n        initSegment.trackId = -1;\n      }\n      this.initPTS = initPTS = {\n        baseTime: initSegment.initPTS,\n        timescale: initSegment.timescale,\n        trackId: initSegment.trackId,\n      };\n    } else {\n      initSegment.initPTS = initPTS.baseTime;\n      initSegment.timescale = initPTS.timescale;\n      initSegment.trackId = initPTS.trackId;\n    }\n\n    const startTime = decodeTime - initPTS.baseTime / initPTS.timescale;\n    const endTime = startTime + duration;\n\n    if (duration > 0) {\n      this.lastEndTime = endTime;\n    } else {\n      this.warn('Duration parsed from mp4 should be greater than zero');\n      this.resetNextTimestamp();\n    }\n\n    const hasAudio = !!initData.audio;\n    const hasVideo = !!initData.video;\n\n    let type: any = '';\n    if (hasAudio) {\n      type += 'audio';\n    }\n\n    if (hasVideo) {\n      type += 'video';\n    }\n\n    const encrypted =\n      (initData.audio ? initData.audio.encrypted : false) ||\n      (initData.video ? initData.video.encrypted : false);\n\n    const track: RemuxedTrack = {\n      data1: data,\n      startPTS: startTime,\n      startDTS: startTime,\n      endPTS: endTime,\n      endDTS: endTime,\n      type,\n      hasAudio,\n      hasVideo,\n      nb: 1,\n      dropped: 0,\n      encrypted,\n    };\n\n    result.audio = hasAudio && !hasVideo ? track : undefined;\n    result.video = hasVideo ? track : undefined;\n    const videoSampleCount = videoSampleTimestamps?.sampleCount;\n    if (videoSampleCount) {\n      const firstKeyFrame = videoSampleTimestamps.keyFrameIndex;\n      const independent = firstKeyFrame !== -1;\n      track.nb = videoSampleCount;\n      track.dropped =\n        firstKeyFrame === 0 || this.isVideoContiguous\n          ? 0\n          : independent\n            ? firstKeyFrame\n            : videoSampleCount;\n      track.independent = independent;\n      track.firstKeyFrame = firstKeyFrame;\n      if (independent && videoSampleTimestamps.keyFrameStart) {\n        track.firstKeyFramePTS =\n          (videoSampleTimestamps.keyFrameStart - initPTS.baseTime) /\n          initPTS.timescale;\n      }\n      if (!this.isVideoContiguous) {\n        result.independent = independent;\n      }\n      this.isVideoContiguous ||= independent;\n      if (track.dropped) {\n        this.warn(\n          `fmp4 does not start with IDR: firstIDR ${firstKeyFrame}/${videoSampleCount} dropped: ${track.dropped} start: ${track.firstKeyFramePTS || 'NA'}`,\n        );\n      }\n    }\n\n    result.initSegment = initSegment;\n    result.id3 = flushTextTrackMetadataCueSamples(\n      id3Track,\n      timeOffset,\n      initPTS,\n      initPTS,\n    );\n\n    if (textTrack.samples.length) {\n      result.text = flushTextTrackUserdataCueSamples(\n        textTrack,\n        timeOffset,\n        initPTS,\n      );\n    }\n\n    return result;\n  }\n}\n\nfunction toStartEndOrDefault(\n  trackTimes: TrackTimes | null,\n  defaultValue: number,\n  end: boolean = false,\n): number {\n  return trackTimes?.start !== undefined\n    ? (trackTimes.start + (end ? trackTimes.duration : 0)) /\n        trackTimes.timescale\n    : defaultValue;\n}\n\nfunction isInvalidInitPts(\n  initPTS: TimestampOffset | null,\n  startDTS: number,\n  timeOffset: number,\n  duration: number,\n): initPTS is null {\n  if (initPTS === null) {\n    return true;\n  }\n  // InitPTS is invalid when distance from program would be more than segment duration or a minimum of one second\n  const minDuration = Math.max(duration, 1);\n  const startTime = startDTS - initPTS.baseTime / initPTS.timescale;\n  return Math.abs(startTime - timeOffset) > minDuration;\n}\n\nfunction getParsedTrackCodec(\n  track: InitDataTrack,\n  type: ElementaryStreamTypes.AUDIO | ElementaryStreamTypes.VIDEO,\n  logger: ILogger,\n): string {\n  const parsedCodec = track.codec;\n  if (parsedCodec && parsedCodec.length > 4) {\n    return parsedCodec;\n  }\n  if (type === ElementaryStreamTypes.AUDIO) {\n    if (\n      parsedCodec === 'ec-3' ||\n      parsedCodec === 'ac-3' ||\n      parsedCodec === 'alac'\n    ) {\n      return parsedCodec;\n    }\n    if (parsedCodec === 'fLaC' || parsedCodec === 'Opus') {\n      // Opting not to get `preferManagedMediaSource` from player config for isSupported() check for simplicity\n      const preferManagedMediaSource = false;\n      return getCodecCompatibleName(parsedCodec, preferManagedMediaSource);\n    }\n\n    logger.warn(`Unhandled audio codec \"${parsedCodec}\" in mp4 MAP`);\n    return parsedCodec || 'mp4a';\n  }\n  // Provide defaults based on codec type\n  // This allows for some playback of some fmp4 playlists without CODECS defined in manifest\n  logger.warn(`Unhandled video codec \"${parsedCodec}\" in mp4 MAP`);\n  return parsedCodec || 'avc1';\n}\nexport default PassThroughRemuxer;\n","import AACDemuxer from './audio/aacdemuxer';\nimport { AC3Demuxer } from './audio/ac3-demuxer';\nimport MP3Demuxer from './audio/mp3demuxer';\nimport Decrypter from '../crypt/decrypter';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport TSDemuxer from '../demux/tsdemuxer';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport MP4Remuxer from '../remux/mp4-remuxer';\nimport PassThroughRemuxer from '../remux/passthrough-remuxer';\nimport { PlaylistLevelType } from '../types/loader';\nimport {\n  getAesModeFromFullSegmentMethod,\n  isFullSegmentEncryption,\n} from '../utils/encryption-methods-util';\nimport type { HlsConfig } from '../config';\nimport type { HlsEventEmitter } from '../events';\nimport type { DecryptData } from '../loader/level-key';\nimport type { Demuxer, DemuxerResult, KeyData } from '../types/demuxer';\nimport type { Remuxer } from '../types/remuxer';\nimport type { ChunkMetadata, TransmuxerResult } from '../types/transmuxer';\nimport type { TypeSupported } from '../utils/codecs';\nimport type { ILogger } from '../utils/logger';\nimport type { TimestampOffset } from '../utils/timescale-conversion';\n\nlet now: () => number;\n// performance.now() not available on WebWorker, at least on Safari Desktop\ntry {\n  now = self.performance.now.bind(self.performance);\n} catch (err) {\n  now = Date.now;\n}\n\ntype MuxConfig =\n  | { demux: typeof MP4Demuxer; remux: typeof PassThroughRemuxer }\n  | { demux: typeof TSDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof AC3Demuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof AACDemuxer; remux: typeof MP4Remuxer }\n  | { demux: typeof MP3Demuxer; remux: typeof MP4Remuxer };\n\nconst muxConfig: MuxConfig[] = [\n  { demux: MP4Demuxer, remux: PassThroughRemuxer },\n  { demux: TSDemuxer, remux: MP4Remuxer },\n  { demux: AACDemuxer, remux: MP4Remuxer },\n  { demux: MP3Demuxer, remux: MP4Remuxer },\n];\n\nif (__USE_M2TS_ADVANCED_CODECS__) {\n  muxConfig.splice(2, 0, { demux: AC3Demuxer, remux: MP4Remuxer });\n}\n\nexport default class Transmuxer {\n  private asyncResult: boolean = false;\n  private logger: ILogger;\n  private observer: HlsEventEmitter;\n  private typeSupported: TypeSupported;\n  private config: HlsConfig;\n  private id: PlaylistLevelType;\n  private demuxer?: Demuxer;\n  private remuxer?: Remuxer;\n  private decrypter?: Decrypter;\n  private probe!: Function;\n  private decryptionPromise: Promise<TransmuxerResult> | null = null;\n  private transmuxConfig!: TransmuxConfig;\n  private currentTransmuxState!: TransmuxState;\n\n  constructor(\n    observer: HlsEventEmitter,\n    typeSupported: TypeSupported,\n    config: HlsConfig,\n    vendor: string,\n    id: PlaylistLevelType,\n    logger: ILogger,\n  ) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.id = id;\n    this.logger = logger;\n  }\n\n  configure(transmuxConfig: TransmuxConfig) {\n    this.transmuxConfig = transmuxConfig;\n    if (this.decrypter) {\n      this.decrypter.reset();\n    }\n  }\n\n  push(\n    data: ArrayBuffer,\n    decryptdata: DecryptData | null,\n    chunkMeta: ChunkMetadata,\n    state?: TransmuxState,\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    let uintData: Uint8Array<ArrayBuffer> = new Uint8Array(data);\n    const { currentTransmuxState, transmuxConfig } = this;\n    if (state) {\n      this.currentTransmuxState = state;\n    }\n\n    const {\n      contiguous,\n      discontinuity,\n      trackSwitch,\n      accurateTimeOffset,\n      timeOffset,\n      initSegmentChange,\n    } = state || currentTransmuxState;\n    const {\n      audioCodec,\n      videoCodec,\n      defaultInitPts,\n      duration,\n      initSegmentData,\n    } = transmuxConfig;\n\n    const keyData = getEncryptionType(uintData, decryptdata);\n    if (keyData && isFullSegmentEncryption(keyData.method)) {\n      const decrypter = this.getDecrypter();\n      const aesMode = getAesModeFromFullSegmentMethod(keyData.method);\n\n      // Software decryption is synchronous; webCrypto is not\n      if (decrypter.isSync()) {\n        // Software decryption is progressive. Progressive decryption may not return a result on each call. Any cached\n        // data is handled in the flush() call\n        let decryptedData = decrypter.softwareDecrypt(\n          uintData,\n          keyData.key.buffer,\n          keyData.iv.buffer,\n          aesMode,\n        );\n        // For Low-Latency HLS Parts, decrypt in place, since part parsing is expected on push progress\n        const loadingParts = chunkMeta.part > -1;\n        if (loadingParts) {\n          const data = decrypter.flush();\n          decryptedData = data ? data.buffer : data;\n        }\n        if (!decryptedData) {\n          stats.executeEnd = now();\n          return emptyResult(chunkMeta);\n        }\n        uintData = new Uint8Array(decryptedData);\n      } else {\n        this.asyncResult = true;\n        this.decryptionPromise = decrypter\n          .webCryptoDecrypt(\n            uintData,\n            keyData.key.buffer,\n            keyData.iv.buffer,\n            aesMode,\n          )\n          .then((decryptedData): TransmuxerResult => {\n            // Calling push here is important; if flush() is called while this is still resolving, this ensures that\n            // the decrypted data has been transmuxed\n            const result = this.push(\n              decryptedData,\n              null,\n              chunkMeta,\n            ) as TransmuxerResult;\n            this.decryptionPromise = null;\n            return result;\n          });\n        return this.decryptionPromise;\n      }\n    }\n\n    const resetMuxers = this.needsProbing(discontinuity, trackSwitch);\n    if (resetMuxers) {\n      const error = this.configureTransmuxer(uintData);\n      if (error) {\n        this.logger.warn(`[transmuxer] ${error.message}`);\n        this.observer.emit(Events.ERROR, Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.FRAG_PARSING_ERROR,\n          fatal: false,\n          error,\n          reason: error.message,\n        });\n        stats.executeEnd = now();\n        return emptyResult(chunkMeta);\n      }\n    }\n\n    if (discontinuity || trackSwitch || initSegmentChange || resetMuxers) {\n      this.resetInitSegment(\n        initSegmentData,\n        audioCodec,\n        videoCodec,\n        duration,\n        decryptdata,\n      );\n    }\n\n    if (discontinuity || initSegmentChange || resetMuxers) {\n      this.resetInitialTimestamp(defaultInitPts);\n    }\n\n    if (!contiguous) {\n      this.resetContiguity();\n    }\n\n    const result = this.transmux(\n      uintData,\n      keyData,\n      timeOffset,\n      accurateTimeOffset,\n      chunkMeta,\n    );\n    this.asyncResult = isPromise(result);\n\n    const currentState = this.currentTransmuxState;\n\n    currentState.contiguous = true;\n    currentState.discontinuity = false;\n    currentState.trackSwitch = false;\n\n    stats.executeEnd = now();\n    return result;\n  }\n\n  // Due to data caching, flush calls can produce more than one TransmuxerResult (hence the Array type)\n  flush(\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult[] | Promise<TransmuxerResult[]> {\n    const stats = chunkMeta.transmuxing;\n    stats.executeStart = now();\n\n    const { decrypter, currentTransmuxState, decryptionPromise } = this;\n\n    if (decryptionPromise) {\n      this.asyncResult = true;\n      // Upon resolution, the decryption promise calls push() and returns its TransmuxerResult up the stack. Therefore\n      // only flushing is required for async decryption\n      return decryptionPromise.then(() => {\n        return this.flush(chunkMeta);\n      });\n    }\n\n    const transmuxResults: TransmuxerResult[] = [];\n    const { timeOffset } = currentTransmuxState;\n    if (decrypter) {\n      // The decrypter may have data cached, which needs to be demuxed. In this case we'll have two TransmuxResults\n      // This happens in the case that we receive only 1 push call for a segment (either for non-progressive downloads,\n      // or for progressive downloads with small segments)\n      const decryptedData = decrypter.flush();\n      if (decryptedData) {\n        // Push always returns a TransmuxerResult if decryptdata is null\n        transmuxResults.push(\n          this.push(decryptedData.buffer, null, chunkMeta) as TransmuxerResult,\n        );\n      }\n    }\n\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      // If probing failed, then Hls.js has been given content its not able to handle\n      stats.executeEnd = now();\n      const emptyResults = [emptyResult(chunkMeta)];\n      if (this.asyncResult) {\n        return Promise.resolve(emptyResults);\n      }\n      return emptyResults;\n    }\n\n    const demuxResultOrPromise = demuxer.flush(timeOffset);\n    if (isPromise(demuxResultOrPromise)) {\n      this.asyncResult = true;\n      // Decrypt final SAMPLE-AES samples\n      return demuxResultOrPromise.then((demuxResult) => {\n        this.flushRemux(transmuxResults, demuxResult, chunkMeta);\n        return transmuxResults;\n      });\n    }\n\n    this.flushRemux(transmuxResults, demuxResultOrPromise, chunkMeta);\n    if (this.asyncResult) {\n      return Promise.resolve(transmuxResults);\n    }\n    return transmuxResults;\n  }\n\n  private flushRemux(\n    transmuxResults: TransmuxerResult[],\n    demuxResult: DemuxerResult,\n    chunkMeta: ChunkMetadata,\n  ) {\n    const { audioTrack, videoTrack, id3Track, textTrack } = demuxResult;\n    const { accurateTimeOffset, timeOffset } = this.currentTransmuxState;\n    this.logger.log(\n      `[transmuxer.ts]: Flushed ${this.id} sn: ${chunkMeta.sn}${\n        chunkMeta.part > -1 ? ' part: ' + chunkMeta.part : ''\n      } of ${this.id === PlaylistLevelType.MAIN ? 'level' : 'track'} ${chunkMeta.level}`,\n    );\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      true,\n      this.id,\n    );\n    transmuxResults.push({\n      remuxResult,\n      chunkMeta,\n    });\n\n    chunkMeta.transmuxing.executeEnd = now();\n  }\n\n  resetInitialTimestamp(defaultInitPts: TimestampOffset | null) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetTimeStamp(defaultInitPts);\n    remuxer.resetTimeStamp(defaultInitPts);\n  }\n\n  resetContiguity() {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetContiguity();\n    remuxer.resetNextTimestamp();\n  }\n\n  resetInitSegment(\n    initSegmentData: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    trackDuration: number,\n    decryptdata: DecryptData | null,\n  ) {\n    const { demuxer, remuxer } = this;\n    if (!demuxer || !remuxer) {\n      return;\n    }\n    demuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      trackDuration,\n    );\n    remuxer.resetInitSegment(\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      decryptdata,\n    );\n  }\n\n  destroy(): void {\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = undefined;\n    }\n    if (this.remuxer) {\n      this.remuxer.destroy();\n      this.remuxer = undefined;\n    }\n  }\n\n  private transmux(\n    data: Uint8Array,\n    keyData: KeyData | null,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult | Promise<TransmuxerResult> {\n    let result: TransmuxerResult | Promise<TransmuxerResult>;\n    if (keyData && keyData.method === 'SAMPLE-AES') {\n      result = this.transmuxSampleAes(\n        data,\n        keyData,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta,\n      );\n    } else {\n      result = this.transmuxUnencrypted(\n        data,\n        timeOffset,\n        accurateTimeOffset,\n        chunkMeta,\n      );\n    }\n    return result;\n  }\n\n  private transmuxUnencrypted(\n    data: Uint8Array,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): TransmuxerResult {\n    const { audioTrack, videoTrack, id3Track, textTrack } = (\n      this.demuxer as Demuxer\n    ).demux(data, timeOffset, false, !this.config.progressive);\n    const remuxResult = this.remuxer!.remux(\n      audioTrack,\n      videoTrack,\n      id3Track,\n      textTrack,\n      timeOffset,\n      accurateTimeOffset,\n      false,\n      this.id,\n    );\n    return {\n      remuxResult,\n      chunkMeta,\n    };\n  }\n\n  private transmuxSampleAes(\n    data: Uint8Array,\n    decryptData: KeyData,\n    timeOffset: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n  ): Promise<TransmuxerResult> {\n    return (this.demuxer as Demuxer)\n      .demuxSampleAes(data, decryptData, timeOffset)\n      .then((demuxResult) => {\n        const remuxResult = this.remuxer!.remux(\n          demuxResult.audioTrack,\n          demuxResult.videoTrack,\n          demuxResult.id3Track,\n          demuxResult.textTrack,\n          timeOffset,\n          accurateTimeOffset,\n          false,\n          this.id,\n        );\n        return {\n          remuxResult,\n          chunkMeta,\n        };\n      });\n  }\n\n  private configureTransmuxer(data: Uint8Array): void | Error {\n    const { config, observer, typeSupported } = this;\n    // probe for content type\n    let mux;\n    for (let i = 0, len = muxConfig.length; i < len; i++) {\n      if (muxConfig[i].demux?.probe(data, this.logger)) {\n        mux = muxConfig[i];\n        break;\n      }\n    }\n    if (!mux) {\n      return new Error('Failed to find demuxer by probing fragment data');\n    }\n    // so let's check that current remuxer and demuxer are still valid\n    const demuxer = this.demuxer;\n    const remuxer = this.remuxer;\n    const Remuxer: MuxConfig['remux'] = mux.remux;\n    const Demuxer: MuxConfig['demux'] = mux.demux;\n    if (!remuxer || !(remuxer instanceof Remuxer)) {\n      this.remuxer = new Remuxer(observer, config, typeSupported, this.logger);\n    }\n    if (!demuxer || !(demuxer instanceof Demuxer)) {\n      this.demuxer = new Demuxer(observer, config, typeSupported, this.logger);\n      this.probe = Demuxer.probe;\n    }\n  }\n\n  private needsProbing(discontinuity: boolean, trackSwitch: boolean): boolean {\n    // in case of continuity change, or track switch\n    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)\n    return !this.demuxer || !this.remuxer || discontinuity || trackSwitch;\n  }\n\n  private getDecrypter(): Decrypter {\n    let decrypter = this.decrypter;\n    if (!decrypter) {\n      decrypter = this.decrypter = new Decrypter(this.config);\n    }\n    return decrypter;\n  }\n}\n\nfunction getEncryptionType(\n  data: Uint8Array,\n  decryptData: DecryptData | null,\n): KeyData | null {\n  let encryptionType: KeyData | null = null;\n  if (\n    data.byteLength > 0 &&\n    decryptData?.key != null &&\n    decryptData.iv !== null &&\n    decryptData.method != null\n  ) {\n    encryptionType = decryptData as KeyData;\n  }\n  return encryptionType;\n}\n\nconst emptyResult = (chunkMeta): TransmuxerResult => ({\n  remuxResult: {},\n  chunkMeta,\n});\n\nexport function isPromise<T>(p: Promise<T> | any): p is Promise<T> {\n  return 'then' in p && p.then instanceof Function;\n}\n\nexport class TransmuxConfig {\n  public audioCodec?: string;\n  public videoCodec?: string;\n  public initSegmentData?: Uint8Array;\n  public duration: number;\n  public defaultInitPts: TimestampOffset | null;\n\n  constructor(\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    initSegmentData: Uint8Array | undefined,\n    duration: number,\n    defaultInitPts?: TimestampOffset,\n  ) {\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this.initSegmentData = initSegmentData;\n    this.duration = duration;\n    this.defaultInitPts = defaultInitPts || null;\n  }\n}\n\nexport class TransmuxState {\n  public discontinuity: boolean;\n  public contiguous: boolean;\n  public accurateTimeOffset: boolean;\n  public trackSwitch: boolean;\n  public timeOffset: number;\n  public initSegmentChange: boolean;\n\n  constructor(\n    discontinuity: boolean,\n    contiguous: boolean,\n    accurateTimeOffset: boolean,\n    trackSwitch: boolean,\n    timeOffset: number,\n    initSegmentChange: boolean,\n  ) {\n    this.discontinuity = discontinuity;\n    this.contiguous = contiguous;\n    this.accurateTimeOffset = accurateTimeOffset;\n    this.trackSwitch = trackSwitch;\n    this.timeOffset = timeOffset;\n    this.initSegmentChange = initSegmentChange;\n  }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport Transmuxer, { isPromise } from '../demux/transmuxer';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { enableLogs, type ILogger } from '../utils/logger';\nimport type { RemuxedTrack, RemuxerResult } from '../types/remuxer';\nimport type { ChunkMetadata, TransmuxerResult } from '../types/transmuxer';\n\nconst transmuxers: (Transmuxer | undefined)[] = [];\n\nif (typeof __IN_WORKER__ !== 'undefined' && __IN_WORKER__) {\n  startWorker();\n}\n\nfunction startWorker() {\n  self.addEventListener('message', (ev) => {\n    const data = ev.data;\n    const instanceNo = data.instanceNo;\n    if (instanceNo === undefined) {\n      return;\n    }\n    const transmuxer = transmuxers[instanceNo];\n    if (data.cmd === 'reset') {\n      delete transmuxers[data.resetNo];\n      if (transmuxer) {\n        transmuxer.destroy();\n      }\n      data.cmd = 'init';\n    }\n    if (data.cmd === 'init') {\n      const config = JSON.parse(data.config);\n      const observer = new EventEmitter();\n      observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n      observer.on(Events.ERROR, forwardMessage);\n      const logger = enableLogs(config.debug, data.id);\n      forwardWorkerLogs(logger, instanceNo);\n      transmuxers[instanceNo] = new Transmuxer(\n        observer,\n        data.typeSupported,\n        config,\n        '',\n        data.id,\n        logger,\n      );\n      forwardMessage('init', null, instanceNo);\n      return;\n    }\n    if (!transmuxer) {\n      return;\n    }\n    switch (data.cmd) {\n      case 'configure': {\n        transmuxer.configure(data.config);\n        break;\n      }\n      case 'demux': {\n        const transmuxResult: TransmuxerResult | Promise<TransmuxerResult> =\n          transmuxer.push(\n            data.data,\n            data.decryptdata,\n            data.chunkMeta,\n            data.state,\n          );\n        if (isPromise(transmuxResult)) {\n          transmuxResult\n            .then((data) => {\n              emitTransmuxComplete(self, data, instanceNo);\n            })\n            .catch((error) => {\n              forwardMessage(\n                Events.ERROR,\n                {\n                  instanceNo,\n                  type: ErrorTypes.MEDIA_ERROR,\n                  details: ErrorDetails.FRAG_PARSING_ERROR,\n                  chunkMeta: data.chunkMeta,\n                  fatal: false,\n                  error,\n                  err: error,\n                  reason: `transmuxer-worker push error`,\n                },\n                instanceNo,\n              );\n            });\n        } else {\n          emitTransmuxComplete(self, transmuxResult, instanceNo);\n        }\n        break;\n      }\n      case 'flush': {\n        const chunkMeta = data.chunkMeta as ChunkMetadata;\n        const transmuxResult = transmuxer.flush(chunkMeta);\n        if (isPromise(transmuxResult)) {\n          transmuxResult\n            .then((results: Array<TransmuxerResult>) => {\n              handleFlushResult(\n                self,\n                results as Array<TransmuxerResult>,\n                chunkMeta,\n                instanceNo,\n              );\n            })\n            .catch((error) => {\n              forwardMessage(\n                Events.ERROR,\n                {\n                  type: ErrorTypes.MEDIA_ERROR,\n                  details: ErrorDetails.FRAG_PARSING_ERROR,\n                  chunkMeta: data.chunkMeta,\n                  fatal: false,\n                  error,\n                  err: error,\n                  reason: `transmuxer-worker flush error`,\n                },\n                instanceNo,\n              );\n            });\n        } else {\n          handleFlushResult(\n            self,\n            transmuxResult as Array<TransmuxerResult>,\n            chunkMeta,\n            instanceNo,\n          );\n        }\n        break;\n      }\n      default:\n        break;\n    }\n  });\n}\n\nfunction emitTransmuxComplete(\n  self: any,\n  transmuxResult: TransmuxerResult,\n  instanceNo: number,\n): boolean {\n  if (isEmptyResult(transmuxResult.remuxResult)) {\n    return false;\n  }\n  const transferable: Array<ArrayBuffer> = [];\n  const { audio, video } = transmuxResult.remuxResult;\n  if (audio) {\n    addToTransferable(transferable, audio);\n  }\n  if (video) {\n    addToTransferable(transferable, video);\n  }\n  self.postMessage(\n    { event: 'transmuxComplete', data: transmuxResult, instanceNo },\n    transferable,\n  );\n  return true;\n}\n\n// Converts data to a transferable object https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast)\n// in order to minimize message passing overhead\nfunction addToTransferable(\n  transferable: Array<ArrayBuffer>,\n  track: RemuxedTrack,\n) {\n  if (track.data1) {\n    transferable.push(track.data1.buffer);\n  }\n  if (track.data2) {\n    transferable.push(track.data2.buffer);\n  }\n}\n\nfunction handleFlushResult(\n  self: any,\n  results: Array<TransmuxerResult>,\n  chunkMeta: ChunkMetadata,\n  instanceNo: number,\n) {\n  const parsed = results.reduce(\n    (parsed, result) =>\n      emitTransmuxComplete(self, result, instanceNo) || parsed,\n    false,\n  );\n  if (!parsed) {\n    // Emit at least one \"transmuxComplete\" message even if media is not found to update stream-controller state to PARSING\n    self.postMessage({\n      event: 'transmuxComplete',\n      data: results[0],\n      instanceNo,\n    });\n  }\n  self.postMessage({ event: 'flush', data: chunkMeta, instanceNo });\n}\n\nfunction forwardMessage(event, data, instanceNo) {\n  self.postMessage({ event, data, instanceNo });\n}\n\nfunction forwardWorkerLogs(logger: ILogger, instanceNo: number) {\n  for (const logFn in logger) {\n    logger[logFn] = function () {\n      const message = Array.prototype.join.call(arguments, ' ');\n      forwardMessage(\n        'workerLog',\n        {\n          logType: logFn,\n          message,\n        },\n        instanceNo,\n      );\n    };\n  }\n}\n\nfunction isEmptyResult(remuxResult: RemuxerResult) {\n  return (\n    !remuxResult.audio &&\n    !remuxResult.video &&\n    !remuxResult.text &&\n    !remuxResult.id3 &&\n    !remuxResult.initSegment\n  );\n}\n","export const version = __VERSION__;\n","// ensure the worker ends up in the bundle\n// If the worker should not be included this gets aliased to empty.js\nimport './transmuxer-worker';\nimport { version } from '../version';\n\nconst workerStore: Record<string, WorkerContext> = {};\n\nexport function hasUMDWorker(): boolean {\n  return typeof __HLS_WORKER_BUNDLE__ === 'function';\n}\n\nexport type WorkerContext = {\n  worker: Worker;\n  objectURL?: string;\n  scriptURL?: string;\n  clientCount: number;\n};\n\nexport function injectWorker(): WorkerContext {\n  const workerContext = workerStore[version];\n  if (workerContext) {\n    workerContext.clientCount++;\n    return workerContext;\n  }\n  const blob = new self.Blob(\n    [\n      `var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(${__HLS_WORKER_BUNDLE__.toString()})(true);`,\n    ],\n    {\n      type: 'text/javascript',\n    },\n  );\n  const objectURL = self.URL.createObjectURL(blob);\n  const worker = new self.Worker(objectURL);\n  const result = {\n    worker,\n    objectURL,\n    clientCount: 1,\n  };\n  workerStore[version] = result;\n  return result;\n}\n\nexport function loadWorker(path: string): WorkerContext {\n  const workerContext = workerStore[path];\n  if (workerContext) {\n    workerContext.clientCount++;\n    return workerContext;\n  }\n  const scriptURL = new self.URL(path, self.location.href).href;\n  const worker = new self.Worker(scriptURL);\n  const result = {\n    worker,\n    scriptURL,\n    clientCount: 1,\n  };\n  workerStore[path] = result;\n  return result;\n}\n\nexport function removeWorkerFromStore(path?: string | null) {\n  const workerContext = workerStore[path || version];\n  if (workerContext) {\n    const clientCount = workerContext.clientCount--;\n    if (clientCount === 1) {\n      const { worker, objectURL } = workerContext;\n      delete workerStore[path || version];\n      if (objectURL) {\n        // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n        self.URL.revokeObjectURL(objectURL);\n      }\n      worker.terminate();\n    }\n  }\n}\n","import { EventEmitter } from 'eventemitter3';\nimport {\n  hasUMDWorker,\n  injectWorker,\n  loadWorker,\n  removeWorkerFromStore as removeWorkerClient,\n} from './inject-worker';\nimport Transmuxer, {\n  isPromise,\n  TransmuxConfig,\n  TransmuxState,\n} from '../demux/transmuxer';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { PlaylistLevelType } from '../types/loader';\nimport { getM2TSSupportedAudioTypes } from '../utils/codecs';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type { WorkerContext } from './inject-worker';\nimport type { HlsEventEmitter, HlsListeners } from '../events';\nimport type Hls from '../hls';\nimport type { MediaFragment, Part } from '../loader/fragment';\nimport type { ErrorData, FragDecryptedData } from '../types/events';\nimport type { ChunkMetadata, TransmuxerResult } from '../types/transmuxer';\nimport type { TimestampOffset } from '../utils/timescale-conversion';\n\nlet transmuxerInstanceCount: number = 0;\n\nexport default class TransmuxerInterface {\n  public error: Error | null = null;\n  private hls: Hls;\n  private id: PlaylistLevelType;\n  private instanceNo: number = transmuxerInstanceCount++;\n  private observer: HlsEventEmitter;\n  private frag: MediaFragment | null = null;\n  private part: Part | null = null;\n  private useWorker: boolean;\n  private workerContext: WorkerContext | null = null;\n  private transmuxer: Transmuxer | null = null;\n  private onTransmuxComplete: (transmuxResult: TransmuxerResult) => void;\n  private onFlush: (chunkMeta: ChunkMetadata) => void;\n\n  constructor(\n    hls: Hls,\n    id: PlaylistLevelType,\n    onTransmuxComplete: (transmuxResult: TransmuxerResult) => void,\n    onFlush: (chunkMeta: ChunkMetadata) => void,\n  ) {\n    const config = hls.config;\n    this.hls = hls;\n    this.id = id;\n    this.useWorker = !!config.enableWorker;\n    this.onTransmuxComplete = onTransmuxComplete;\n    this.onFlush = onFlush;\n\n    const forwardMessage = (\n      ev: Events.ERROR | Events.FRAG_DECRYPTED,\n      data: ErrorData | FragDecryptedData,\n    ) => {\n      data = data || {};\n      data.frag = this.frag || undefined;\n      if (ev === Events.ERROR) {\n        data = data as ErrorData;\n        data.parent = this.id;\n        data.part = this.part;\n        this.error = data.error;\n      }\n      this.hls.trigger(ev, data);\n    };\n\n    // forward events to main thread\n    this.observer = new EventEmitter() as HlsEventEmitter;\n    this.observer.on(Events.FRAG_DECRYPTED, forwardMessage);\n    this.observer.on(Events.ERROR, forwardMessage);\n\n    const m2tsTypeSupported = getM2TSSupportedAudioTypes(\n      config.preferManagedMediaSource,\n    );\n\n    if (this.useWorker && typeof Worker !== 'undefined') {\n      const logger = this.hls.logger;\n      const canCreateWorker = config.workerPath || hasUMDWorker();\n      if (canCreateWorker) {\n        try {\n          if (config.workerPath) {\n            logger.log(`loading Web Worker ${config.workerPath} for \"${id}\"`);\n            this.workerContext = loadWorker(config.workerPath);\n          } else {\n            logger.log(`injecting Web Worker for \"${id}\"`);\n            this.workerContext = injectWorker();\n          }\n          const { worker } = this.workerContext;\n          worker.addEventListener('message', this.onWorkerMessage);\n          worker.addEventListener('error', this.onWorkerError);\n          worker.postMessage({\n            instanceNo: this.instanceNo,\n            cmd: 'init',\n            typeSupported: m2tsTypeSupported,\n            id,\n            config: stringify(config),\n          });\n        } catch (err) {\n          logger.warn(\n            `Error setting up \"${id}\" Web Worker, fallback to inline`,\n            err,\n          );\n          this.terminateWorker();\n          this.error = null;\n          this.transmuxer = new Transmuxer(\n            this.observer,\n            m2tsTypeSupported,\n            config,\n            '',\n            id,\n            hls.logger,\n          );\n        }\n        return;\n      }\n    }\n\n    this.transmuxer = new Transmuxer(\n      this.observer,\n      m2tsTypeSupported,\n      config,\n      '',\n      id,\n      hls.logger,\n    );\n  }\n\n  reset() {\n    this.frag = null;\n    this.part = null;\n    if (this.workerContext) {\n      const instanceNo = this.instanceNo;\n      this.instanceNo = transmuxerInstanceCount++;\n      const config = this.hls.config;\n      const m2tsTypeSupported = getM2TSSupportedAudioTypes(\n        config.preferManagedMediaSource,\n      );\n      this.workerContext.worker.postMessage({\n        instanceNo: this.instanceNo,\n        cmd: 'reset',\n        resetNo: instanceNo,\n        typeSupported: m2tsTypeSupported,\n        id: this.id,\n        config: stringify(config),\n      });\n    }\n  }\n\n  private terminateWorker() {\n    if (this.workerContext) {\n      const { worker } = this.workerContext;\n      this.workerContext = null;\n      worker.removeEventListener('message', this.onWorkerMessage);\n      worker.removeEventListener('error', this.onWorkerError);\n      removeWorkerClient(this.hls.config.workerPath);\n    }\n  }\n\n  destroy() {\n    if (this.workerContext) {\n      this.terminateWorker();\n      // @ts-ignore\n      this.onWorkerMessage = this.onWorkerError = null;\n    } else {\n      const transmuxer = this.transmuxer;\n      if (transmuxer) {\n        transmuxer.destroy();\n        this.transmuxer = null;\n      }\n    }\n    const observer = this.observer;\n    if (observer) {\n      observer.removeAllListeners();\n    }\n    this.frag = null;\n    this.part = null;\n    // @ts-ignore\n    this.observer = null;\n    // @ts-ignore\n    this.hls = null;\n  }\n\n  push(\n    data: ArrayBuffer,\n    initSegmentData: Uint8Array | undefined,\n    audioCodec: string | undefined,\n    videoCodec: string | undefined,\n    frag: MediaFragment,\n    part: Part | null,\n    duration: number,\n    accurateTimeOffset: boolean,\n    chunkMeta: ChunkMetadata,\n    defaultInitPTS?: TimestampOffset,\n  ) {\n    chunkMeta.transmuxing.start = self.performance.now();\n    const { instanceNo, transmuxer } = this;\n    const timeOffset = part ? part.start : frag.start;\n    // TODO: push \"clear-lead\" decrypt data for unencrypted fragments in streams with encrypted ones\n    const decryptdata = frag.decryptdata;\n    const lastFrag = this.frag;\n\n    const discontinuity = !(lastFrag && frag.cc === lastFrag.cc);\n    const trackSwitch = !(lastFrag && chunkMeta.level === lastFrag.level);\n    const snDiff = lastFrag ? chunkMeta.sn - lastFrag.sn : -1;\n    const partDiff = this.part ? chunkMeta.part - this.part.index : -1;\n    const progressive =\n      snDiff === 0 &&\n      chunkMeta.id > 1 &&\n      chunkMeta.id === lastFrag?.stats.chunkCount;\n    const contiguous =\n      !trackSwitch &&\n      (snDiff === 1 ||\n        (snDiff === 0 && (partDiff === 1 || (progressive && partDiff <= 0))));\n    const now = self.performance.now();\n\n    if (trackSwitch || snDiff || frag.stats.parsing.start === 0) {\n      frag.stats.parsing.start = now;\n    }\n    if (part && (partDiff || !contiguous)) {\n      part.stats.parsing.start = now;\n    }\n    const initSegmentChange = !(\n      lastFrag && frag.initSegment?.url === lastFrag.initSegment?.url\n    );\n    const state = new TransmuxState(\n      discontinuity,\n      contiguous,\n      accurateTimeOffset,\n      trackSwitch,\n      timeOffset,\n      initSegmentChange,\n    );\n    if (!contiguous || discontinuity || initSegmentChange) {\n      this.hls.logger\n        .log(`[transmuxer-interface]: Starting new transmux session for ${frag.type} sn: ${chunkMeta.sn}${\n        chunkMeta.part > -1 ? ' part: ' + chunkMeta.part : ''\n      } ${this.id === PlaylistLevelType.MAIN ? 'level' : 'track'}: ${chunkMeta.level} id: ${chunkMeta.id}\n        discontinuity: ${discontinuity}\n        trackSwitch: ${trackSwitch}\n        contiguous: ${contiguous}\n        accurateTimeOffset: ${accurateTimeOffset}\n        timeOffset: ${timeOffset}\n        initSegmentChange: ${initSegmentChange}`);\n      const config = new TransmuxConfig(\n        audioCodec,\n        videoCodec,\n        initSegmentData,\n        duration,\n        defaultInitPTS,\n      );\n      this.configureTransmuxer(config);\n    }\n\n    this.frag = frag;\n    this.part = part;\n\n    // Frags with sn of 'initSegment' are not transmuxed\n    if (this.workerContext) {\n      // post fragment payload as transferable objects for ArrayBuffer (no copy)\n      this.workerContext.worker.postMessage(\n        {\n          instanceNo,\n          cmd: 'demux',\n          data,\n          decryptdata,\n          chunkMeta,\n          state,\n        },\n        data instanceof ArrayBuffer ? [data] : [],\n      );\n    } else if (transmuxer) {\n      const transmuxResult = transmuxer.push(\n        data,\n        decryptdata,\n        chunkMeta,\n        state,\n      );\n      if (isPromise(transmuxResult)) {\n        transmuxResult\n          .then((data) => {\n            this.handleTransmuxComplete(data);\n          })\n          .catch((error) => {\n            this.transmuxerError(\n              error,\n              chunkMeta,\n              'transmuxer-interface push error',\n            );\n          });\n      } else {\n        this.handleTransmuxComplete(transmuxResult as TransmuxerResult);\n      }\n    }\n  }\n\n  flush(chunkMeta: ChunkMetadata) {\n    chunkMeta.transmuxing.start = self.performance.now();\n    const { instanceNo, transmuxer } = this;\n    if (this.workerContext) {\n      1;\n      this.workerContext.worker.postMessage({\n        instanceNo,\n        cmd: 'flush',\n        chunkMeta,\n      });\n    } else if (transmuxer) {\n      const transmuxResult = transmuxer.flush(chunkMeta);\n      if (isPromise(transmuxResult)) {\n        transmuxResult\n          .then((data) => {\n            this.handleFlushResult(data, chunkMeta);\n          })\n          .catch((error) => {\n            this.transmuxerError(\n              error,\n              chunkMeta,\n              'transmuxer-interface flush error',\n            );\n          });\n      } else {\n        this.handleFlushResult(transmuxResult, chunkMeta);\n      }\n    }\n  }\n\n  private transmuxerError(\n    error: Error,\n    chunkMeta: ChunkMetadata,\n    reason: string,\n  ) {\n    if (!this.hls) {\n      return;\n    }\n    this.error = error;\n    this.hls.trigger(Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.FRAG_PARSING_ERROR,\n      chunkMeta,\n      frag: this.frag || undefined,\n      part: this.part || undefined,\n      fatal: false,\n      error,\n      err: error,\n      reason,\n    });\n  }\n\n  private handleFlushResult(\n    results: Array<TransmuxerResult>,\n    chunkMeta: ChunkMetadata,\n  ) {\n    results.forEach((result) => {\n      this.handleTransmuxComplete(result);\n    });\n    this.onFlush(chunkMeta);\n  }\n\n  private onWorkerMessage = (\n    event: MessageEvent<{\n      event: string;\n      data?: any;\n      instanceNo?: number;\n    } | null>,\n  ) => {\n    const data = event.data;\n    const hls = this.hls;\n    if (!hls || !data?.event || data.instanceNo !== this.instanceNo) {\n      return;\n    }\n    switch (data.event) {\n      case 'init': {\n        const objectURL = this.workerContext?.objectURL;\n        if (objectURL) {\n          // revoke the Object URL that was used to create transmuxer worker, so as not to leak it\n          self.URL.revokeObjectURL(objectURL);\n        }\n        break;\n      }\n\n      case 'transmuxComplete': {\n        this.handleTransmuxComplete(data.data);\n        break;\n      }\n\n      case 'flush': {\n        this.onFlush(data.data);\n        break;\n      }\n\n      // pass logs from the worker thread to the main logger\n      case 'workerLog': {\n        if (hls.logger[data.data.logType]) {\n          hls.logger[data.data.logType](data.data.message);\n        }\n        break;\n      }\n\n      default: {\n        data.data = data.data || {};\n        data.data.frag = this.frag;\n        data.data.part = this.part;\n        data.data.id = this.id;\n        hls.trigger(data.event as keyof HlsListeners, data.data);\n        break;\n      }\n    }\n  };\n\n  private onWorkerError = (event) => {\n    if (!this.hls) {\n      return;\n    }\n    const error = new Error(\n      `${event.message}  (${event.filename}:${event.lineno})`,\n    );\n    this.hls.config.enableWorker = false;\n    this.hls.logger.warn(\n      `Error in \"${this.id}\" Web Worker, fallback to inline`,\n    );\n    this.hls.trigger(Events.ERROR, {\n      type: ErrorTypes.OTHER_ERROR,\n      details: ErrorDetails.INTERNAL_EXCEPTION,\n      fatal: false,\n      event: 'demuxerWorker',\n      error,\n    });\n  };\n\n  private configureTransmuxer(config: TransmuxConfig) {\n    const { instanceNo, transmuxer } = this;\n    if (this.workerContext) {\n      this.workerContext.worker.postMessage({\n        instanceNo,\n        cmd: 'configure',\n        config,\n      });\n    } else if (transmuxer) {\n      transmuxer.configure(config);\n    }\n  }\n\n  private handleTransmuxComplete(result: TransmuxerResult) {\n    result.chunkMeta.transmuxing.end = self.performance.now();\n    this.onTransmuxComplete(result);\n  }\n}\n","import BaseStreamController, { State } from './base-stream-controller';\nimport { findNearestWithCC } from './fragment-finders';\nimport { FragmentState } from './fragment-tracker';\nimport ChunkCache from '../demux/chunk-cache';\nimport TransmuxerInterface from '../demux/transmuxer-interface';\nimport { ErrorDetails } from '../errors';\nimport { Events } from '../events';\nimport { ElementaryStreamTypes, isMediaFragment } from '../loader/fragment';\nimport { Level } from '../types/level';\nimport { PlaylistContextType, PlaylistLevelType } from '../types/loader';\nimport { ChunkMetadata } from '../types/transmuxer';\nimport {\n  alignDiscontinuities,\n  alignMediaPlaylistByPDT,\n} from '../utils/discontinuities';\nimport {\n  audioMatchPredicate,\n  matchesOption,\n  useAlternateAudio,\n} from '../utils/rendition-helper';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type Hls from '../hls';\nimport type { Fragment, MediaFragment, Part } from '../loader/fragment';\nimport type KeyLoader from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  AudioTracksUpdatedData,\n  AudioTrackSwitchingData,\n  BufferAppendingData,\n  BufferCodecsData,\n  BufferCreatedData,\n  BufferFlushedData,\n  BufferFlushingData,\n  ErrorData,\n  FragBufferedData,\n  FragLoadedData,\n  FragLoadingData,\n  FragParsingMetadataData,\n  FragParsingUserdataData,\n  InitPTSFoundData,\n  LevelLoadedData,\n  MediaDetachingData,\n  TrackLoadedData,\n} from '../types/events';\nimport type { MediaPlaylist } from '../types/media-playlist';\nimport type { TrackSet } from '../types/track';\nimport type { TransmuxerResult } from '../types/transmuxer';\n\nconst TICK_INTERVAL = 100; // how often to tick in ms\n\ntype WaitingForPTSData = {\n  frag: MediaFragment;\n  part: Part | null;\n  cache: ChunkCache;\n  complete: boolean;\n};\n\nclass AudioStreamController\n  extends BaseStreamController\n  implements NetworkComponentAPI\n{\n  private mainAnchor: MediaFragment | null = null;\n  private mainFragLoading: FragLoadingData | null = null;\n  private audioOnly: boolean = false;\n  private bufferedTrack: MediaPlaylist | null = null;\n  private switchingTrack: MediaPlaylist | null = null;\n  private trackId: number = -1;\n  private waitingData: WaitingForPTSData | null = null;\n  private mainDetails: LevelDetails | null = null;\n  private flushing: boolean = false;\n  private bufferFlushed: boolean = false;\n  private cachedTrackLoadedData: TrackLoadedData | null = null;\n\n  constructor(\n    hls: Hls,\n    fragmentTracker: FragmentTracker,\n    keyLoader: KeyLoader,\n  ) {\n    super(\n      hls,\n      fragmentTracker,\n      keyLoader,\n      'audio-stream-controller',\n      PlaylistLevelType.AUDIO,\n    );\n    this.registerListeners();\n  }\n\n  protected onHandlerDestroying() {\n    this.unregisterListeners();\n    super.onHandlerDestroying();\n    this.resetItem();\n  }\n\n  private resetItem() {\n    this.mainDetails =\n      this.mainAnchor =\n      this.mainFragLoading =\n      this.bufferedTrack =\n      this.switchingTrack =\n      this.waitingData =\n      this.cachedTrackLoadedData =\n        null;\n  }\n\n  protected registerListeners() {\n    super.registerListeners();\n    const { hls } = this;\n    hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n    hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.on(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.on(Events.BUFFER_RESET, this.onBufferReset, this);\n    hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.on(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n  }\n\n  protected unregisterListeners() {\n    const { hls } = this;\n    if (!hls) {\n      return;\n    }\n    super.unregisterListeners();\n    hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(Events.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this);\n    hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.off(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.off(Events.BUFFER_RESET, this.onBufferReset, this);\n    hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.off(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n  }\n\n  // INIT_PTS_FOUND is triggered when the video track parsed in the stream-controller has a new PTS value\n  onInitPtsFound(\n    event: Events.INIT_PTS_FOUND,\n    { frag, id, initPTS, timescale, trackId }: InitPTSFoundData,\n  ) {\n    // Always update the new INIT PTS\n    // Can change due level switch\n    if (id === PlaylistLevelType.MAIN) {\n      const cc = frag.cc;\n      const inFlightFrag = this.fragCurrent;\n      this.initPTS[cc] = { baseTime: initPTS, timescale, trackId };\n      this.log(\n        `InitPTS for cc: ${cc} found from main: ${initPTS / timescale} (${initPTS}/${timescale}) trackId: ${trackId}`,\n      );\n      this.mainAnchor = frag;\n      // If we are waiting, tick immediately to unblock audio fragment transmuxing\n      if (this.state === State.WAITING_INIT_PTS) {\n        const waitingData = this.waitingData;\n        if (\n          (!waitingData && !this.loadingParts) ||\n          (waitingData && waitingData.frag.cc !== cc)\n        ) {\n          this.syncWithAnchor(frag, waitingData?.frag);\n        }\n      } else if (\n        !this.hls.hasEnoughToStart &&\n        inFlightFrag &&\n        inFlightFrag.cc !== cc\n      ) {\n        inFlightFrag.abortRequests();\n        this.syncWithAnchor(frag, inFlightFrag);\n      } else if (this.state === State.IDLE) {\n        this.tick();\n      }\n    }\n  }\n\n  protected getLoadPosition(): number {\n    if (!this.startFragRequested && this.nextLoadPosition >= 0) {\n      return this.nextLoadPosition;\n    }\n    return super.getLoadPosition();\n  }\n\n  private syncWithAnchor(\n    mainAnchor: MediaFragment,\n    waitingToAppend: Fragment | undefined,\n  ) {\n    // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found\n    const mainFragLoading = this.mainFragLoading?.frag || null;\n    if (waitingToAppend) {\n      if (mainFragLoading?.cc === waitingToAppend.cc) {\n        // Wait for loading frag to complete and INIT_PTS_FOUND\n        return;\n      }\n    }\n    const targetDiscontinuity = (mainFragLoading || mainAnchor).cc;\n    const trackDetails = this.getLevelDetails();\n    const pos = this.getLoadPosition();\n    const syncFrag = findNearestWithCC(trackDetails, targetDiscontinuity, pos);\n    // Only stop waiting for audioFrag.cc if an audio segment of the same discontinuity domain (cc) is found\n    if (syncFrag) {\n      this.log(`Syncing with main frag at ${syncFrag.start} cc ${syncFrag.cc}`);\n      this.startFragRequested = false;\n      this.nextLoadPosition = syncFrag.start;\n      this.resetLoadingState();\n      if (this.state === State.IDLE) {\n        this.doTickIdle();\n      }\n    }\n  }\n\n  startLoad(startPosition: number, skipSeekToStartPosition?: boolean) {\n    if (!this.levels) {\n      this.startPosition = startPosition;\n      this.state = State.STOPPED;\n      return;\n    }\n    const lastCurrentTime = this.lastCurrentTime;\n    this.stopLoad();\n    this.setInterval(TICK_INTERVAL);\n    if (lastCurrentTime > 0 && startPosition === -1) {\n      this.log(\n        `Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(\n          3,\n        )}`,\n      );\n      startPosition = lastCurrentTime;\n      this.state = State.IDLE;\n    } else {\n      this.state = State.WAITING_TRACK;\n    }\n    this.nextLoadPosition = this.lastCurrentTime =\n      startPosition + this.timelineOffset;\n    this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n    this.tick();\n  }\n\n  doTick() {\n    switch (this.state) {\n      case State.IDLE:\n        this.doTickIdle();\n        break;\n      case State.WAITING_TRACK: {\n        const { levels, trackId } = this;\n        const currenTrack = levels?.[trackId];\n        const details = currenTrack?.details;\n        if (details && !this.waitForLive(currenTrack)) {\n          if (this.waitForCdnTuneIn(details)) {\n            break;\n          }\n          this.state = State.WAITING_INIT_PTS;\n        }\n        break;\n      }\n      case State.FRAG_LOADING_WAITING_RETRY: {\n        this.checkRetryDate();\n        break;\n      }\n      case State.WAITING_INIT_PTS: {\n        // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS\n        const waitingData = this.waitingData;\n        if (waitingData) {\n          const { frag, part, cache, complete } = waitingData;\n          const mainAnchor = this.mainAnchor;\n          if (this.initPTS[frag.cc] !== undefined) {\n            this.waitingData = null;\n            this.state = State.FRAG_LOADING;\n            const payload = cache.flush().buffer;\n            const data: FragLoadedData = {\n              frag,\n              part,\n              payload,\n              networkDetails: null,\n            };\n            this._handleFragmentLoadProgress(data);\n            if (complete) {\n              super._handleFragmentLoadComplete(data);\n            }\n          } else if (mainAnchor && mainAnchor.cc !== waitingData.frag.cc) {\n            this.syncWithAnchor(mainAnchor, waitingData.frag);\n          }\n        } else {\n          this.state = State.IDLE;\n        }\n      }\n    }\n\n    this.onTickEnd();\n  }\n\n  protected resetLoadingState() {\n    const waitingData = this.waitingData;\n    if (waitingData) {\n      this.fragmentTracker.removeFragment(waitingData.frag);\n      this.waitingData = null;\n    }\n    super.resetLoadingState();\n  }\n\n  protected onTickEnd() {\n    const { media } = this;\n    if (!media?.readyState) {\n      // Exit early if we don't have media or if the media hasn't buffered anything yet (readyState 0)\n      return;\n    }\n\n    this.lastCurrentTime = media.currentTime;\n  }\n\n  private doTickIdle() {\n    const { hls, levels, media, trackId } = this;\n    const config = hls.config;\n\n    // 1. if buffering is suspended\n    // 2. if video not attached AND\n    //    start fragment already requested OR start frag prefetch not enabled\n    // 3. if tracks or track not loaded and selected\n    // then exit loop\n    // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n    if (\n      !this.buffering ||\n      (!media &&\n        !this.primaryPrefetch &&\n        (this.startFragRequested || !config.startFragPrefetch)) ||\n      !levels?.[trackId]\n    ) {\n      return;\n    }\n\n    const levelInfo = levels[trackId];\n\n    const trackDetails = levelInfo.details;\n    if (\n      !trackDetails ||\n      this.waitForLive(levelInfo) ||\n      this.waitForCdnTuneIn(trackDetails)\n    ) {\n      this.state = State.WAITING_TRACK;\n      this.startFragRequested = false;\n      return;\n    }\n\n    const bufferable = this.mediaBuffer ? this.mediaBuffer : this.media;\n    if (this.bufferFlushed && bufferable) {\n      this.bufferFlushed = false;\n      this.afterBufferFlushed(\n        bufferable,\n        ElementaryStreamTypes.AUDIO,\n        PlaylistLevelType.AUDIO,\n      );\n    }\n\n    const bufferInfo = this.getFwdBufferInfo(\n      bufferable,\n      PlaylistLevelType.AUDIO,\n    );\n    if (bufferInfo === null) {\n      return;\n    }\n\n    if (!this.switchingTrack && this._streamEnded(bufferInfo, trackDetails)) {\n      hls.trigger(Events.BUFFER_EOS, { type: 'audio' });\n      this.state = State.ENDED;\n      return;\n    }\n\n    const bufferLen = bufferInfo.len;\n    const maxBufLen = hls.maxBufferLength;\n\n    const fragments = trackDetails.fragments;\n    const start = fragments[0].start;\n    const loadPosition = this.getLoadPosition();\n    const targetBufferTime = this.flushing ? loadPosition : bufferInfo.end;\n\n    if (this.switchingTrack && media) {\n      const pos = loadPosition;\n      // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime\n      if (trackDetails.PTSKnown && pos < start) {\n        // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start\n        if (bufferInfo.end > start || bufferInfo.nextStart) {\n          this.log(\n            'Alt audio track ahead of main track, seek to start of alt audio track',\n          );\n          media.currentTime = start + 0.05;\n        }\n      }\n    }\n\n    // if buffer length is less than maxBufLen, or near the end, find a fragment to load\n    if (\n      bufferLen >= maxBufLen &&\n      !this.switchingTrack &&\n      targetBufferTime < fragments[fragments.length - 1].start\n    ) {\n      return;\n    }\n\n    let frag = this.getNextFragment(targetBufferTime, trackDetails);\n    // Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags\n    if (frag && this.isLoopLoading(frag, targetBufferTime)) {\n      frag = this.getNextFragmentLoopLoading(\n        frag,\n        trackDetails,\n        bufferInfo,\n        PlaylistLevelType.MAIN,\n        maxBufLen,\n      );\n    }\n    if (!frag) {\n      this.bufferFlushed = true;\n      return;\n    }\n\n    // Request audio segments up to one fragment ahead of main stream-controller\n    let mainFragLoading = this.mainFragLoading?.frag || null;\n    if (\n      !this.audioOnly &&\n      this.startFragRequested &&\n      mainFragLoading &&\n      isMediaFragment(frag) &&\n      !frag.endList &&\n      (!trackDetails.live ||\n        (!this.loadingParts && targetBufferTime < this.hls.liveSyncPosition!))\n    ) {\n      if (this.fragmentTracker.getState(mainFragLoading) === FragmentState.OK) {\n        this.mainFragLoading = mainFragLoading = null;\n      }\n      if (mainFragLoading && isMediaFragment(mainFragLoading)) {\n        if (frag.start > mainFragLoading.end) {\n          // Get buffered frag at target position from tracker (loaded out of sequence)\n          const mainFragAtPos = this.fragmentTracker.getFragAtPos(\n            targetBufferTime,\n            PlaylistLevelType.MAIN,\n          );\n          if (mainFragAtPos && mainFragAtPos.end > mainFragLoading.end) {\n            mainFragLoading = mainFragAtPos;\n            this.mainFragLoading = {\n              frag: mainFragAtPos,\n              targetBufferTime: null,\n            };\n          }\n        }\n        const atBufferSyncLimit = frag.start > mainFragLoading.end;\n        if (atBufferSyncLimit) {\n          return;\n        }\n      }\n    }\n\n    this.loadFragment(frag, levelInfo, targetBufferTime);\n  }\n\n  protected onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    this.bufferFlushed = this.flushing = false;\n    super.onMediaDetaching(event, data);\n  }\n\n  private onAudioTracksUpdated(\n    event: Events.AUDIO_TRACKS_UPDATED,\n    { audioTracks }: AudioTracksUpdatedData,\n  ) {\n    // Reset tranxmuxer is essential for large context switches (Content Steering)\n    this.resetTransmuxer();\n    this.levels = audioTracks.map((mediaPlaylist) => new Level(mediaPlaylist));\n  }\n\n  private onAudioTrackSwitching(\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData,\n  ) {\n    // if any URL found on new audio track, it is an alternate audio track\n    const altAudio = !!data.url;\n    this.trackId = data.id;\n    const { fragCurrent } = this;\n\n    if (fragCurrent) {\n      fragCurrent.abortRequests();\n      this.removeUnbufferedFrags(fragCurrent.start);\n    }\n    this.resetLoadingState();\n\n    // should we switch tracks ?\n    if (altAudio) {\n      this.switchingTrack = data;\n      // main audio track are handled by stream-controller, just do something if switching to alt audio track\n      this.flushAudioIfNeeded(data);\n      if (this.state !== State.STOPPED) {\n        // switching to audio track, start timer if not already started\n        this.setInterval(TICK_INTERVAL);\n        this.state = State.IDLE;\n        this.tick();\n      }\n    } else {\n      // destroy useless transmuxer when switching audio to main\n      this.resetTransmuxer();\n      this.switchingTrack = null;\n      this.bufferedTrack = data;\n      this.clearInterval();\n    }\n  }\n\n  protected onManifestLoading() {\n    super.onManifestLoading();\n    this.bufferFlushed = this.flushing = this.audioOnly = false;\n    this.resetItem();\n    this.trackId = -1;\n  }\n\n  private onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData) {\n    this.mainDetails = data.details;\n    const cachedTrackLoadedData = this.cachedTrackLoadedData;\n    if (cachedTrackLoadedData) {\n      this.cachedTrackLoadedData = null;\n      this.onAudioTrackLoaded(Events.AUDIO_TRACK_LOADED, cachedTrackLoadedData);\n    }\n  }\n\n  private onAudioTrackLoaded(\n    event: Events.AUDIO_TRACK_LOADED,\n    data: TrackLoadedData,\n  ) {\n    const { levels } = this;\n    const { details: newDetails, id: trackId, groupId, track } = data;\n    if (!levels) {\n      this.warn(\n        `Audio tracks reset while loading track ${trackId} \"${track.name}\" of \"${groupId}\"`,\n      );\n      return;\n    }\n    const mainDetails = this.mainDetails;\n    if (\n      !mainDetails ||\n      newDetails.endCC > mainDetails.endCC ||\n      mainDetails.expired\n    ) {\n      this.cachedTrackLoadedData = data;\n      if (this.state !== State.STOPPED) {\n        this.state = State.WAITING_TRACK;\n      }\n      return;\n    }\n    this.cachedTrackLoadedData = null;\n    this.log(\n      `Audio track ${trackId} \"${track.name}\" of \"${groupId}\" loaded [${newDetails.startSN},${\n        newDetails.endSN\n      }]${\n        newDetails.lastPartSn\n          ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`\n          : ''\n      },duration:${newDetails.totalduration}`,\n    );\n\n    const trackLevel = levels[trackId];\n    let sliding = 0;\n    if (newDetails.live || trackLevel.details?.live) {\n      this.checkLiveUpdate(newDetails);\n      if (newDetails.deltaUpdateFailed) {\n        return;\n      }\n\n      if (trackLevel.details) {\n        sliding = this.alignPlaylists(\n          newDetails,\n          trackLevel.details,\n          this.levelLastLoaded?.details,\n        );\n      }\n      if (!newDetails.alignedSliding) {\n        // Align audio rendition with the \"main\" playlist on discontinuity change\n        // or program-date-time (PDT)\n        alignDiscontinuities(newDetails, mainDetails);\n        if (!newDetails.alignedSliding) {\n          alignMediaPlaylistByPDT(newDetails, mainDetails);\n        }\n        sliding = newDetails.fragmentStart;\n      }\n    }\n    trackLevel.details = newDetails;\n    this.levelLastLoaded = trackLevel;\n\n    // compute start position if we are aligned with the main playlist\n    if (!this.startFragRequested) {\n      this.setStartPosition(mainDetails, sliding);\n    }\n\n    this.hls.trigger(Events.AUDIO_TRACK_UPDATED, {\n      details: newDetails,\n      id: trackId,\n      groupId: data.groupId,\n    });\n\n    // only switch back to IDLE state if we were waiting for track to start downloading a new fragment\n    if (\n      this.state === State.WAITING_TRACK &&\n      !this.waitForCdnTuneIn(newDetails)\n    ) {\n      this.state = State.IDLE;\n    }\n\n    // trigger handler right now\n    this.tick();\n  }\n\n  _handleFragmentLoadProgress(data: FragLoadedData) {\n    const frag = data.frag as MediaFragment;\n    const { part, payload } = data;\n    const { config, trackId, levels } = this;\n    if (!levels) {\n      this.warn(\n        `Audio tracks were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`,\n      );\n      return;\n    }\n\n    const track = levels[trackId] as Level;\n    if (!track) {\n      this.warn('Audio track is undefined on fragment load progress');\n      return;\n    }\n    const details = track.details as LevelDetails;\n    if (!details) {\n      this.warn('Audio track details undefined on fragment load progress');\n      this.removeUnbufferedFrags(frag.start);\n      return;\n    }\n    const audioCodec =\n      config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2';\n\n    let transmuxer = this.transmuxer;\n    if (!transmuxer) {\n      transmuxer = this.transmuxer = new TransmuxerInterface(\n        this.hls,\n        PlaylistLevelType.AUDIO,\n        this._handleTransmuxComplete.bind(this),\n        this._handleTransmuxerFlush.bind(this),\n      );\n    }\n\n    // Check if we have video initPTS\n    // If not we need to wait for it\n    const initPTS = this.initPTS[frag.cc];\n    const initSegmentData = frag.initSegment?.data;\n    if (initPTS !== undefined) {\n      // this.log(`Transmuxing ${sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`);\n      // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n      const accurateTimeOffset = false; // details.PTSKnown || !details.live;\n      const partIndex = part ? part.index : -1;\n      const partial = partIndex !== -1;\n      const chunkMeta = new ChunkMetadata(\n        frag.level,\n        frag.sn,\n        frag.stats.chunkCount,\n        payload.byteLength,\n        partIndex,\n        partial,\n      );\n      transmuxer.push(\n        payload,\n        initSegmentData,\n        audioCodec,\n        '',\n        frag,\n        part,\n        details.totalduration,\n        accurateTimeOffset,\n        chunkMeta,\n        initPTS,\n      );\n    } else {\n      this.log(\n        `Unknown video PTS for cc ${frag.cc}, waiting for video PTS before demuxing audio frag ${frag.sn} of [${details.startSN} ,${details.endSN}],track ${trackId}`,\n      );\n      const { cache } = (this.waitingData = this.waitingData || {\n        frag,\n        part,\n        cache: new ChunkCache(),\n        complete: false,\n      });\n      cache.push(new Uint8Array(payload));\n      if (this.state !== State.STOPPED) {\n        this.state = State.WAITING_INIT_PTS;\n      }\n    }\n  }\n\n  protected _handleFragmentLoadComplete(fragLoadedData: FragLoadedData) {\n    if (this.waitingData) {\n      this.waitingData.complete = true;\n      return;\n    }\n    super._handleFragmentLoadComplete(fragLoadedData);\n  }\n\n  private onBufferReset(/* event: Events.BUFFER_RESET */) {\n    // reset reference to sourcebuffers\n    this.mediaBuffer = null;\n  }\n\n  private onBufferCreated(\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData,\n  ) {\n    this.bufferFlushed = this.flushing = false;\n    const audioTrack = data.tracks.audio;\n    if (audioTrack) {\n      this.mediaBuffer = audioTrack.buffer || null;\n    }\n  }\n\n  private onFragLoading(event: Events.FRAG_LOADING, data: FragLoadingData) {\n    if (\n      !this.audioOnly &&\n      data.frag.type === PlaylistLevelType.MAIN &&\n      isMediaFragment(data.frag)\n    ) {\n      this.mainFragLoading = data;\n      if (this.state === State.IDLE) {\n        this.tick();\n      }\n    }\n  }\n\n  private onFragBuffered(event: Events.FRAG_BUFFERED, data: FragBufferedData) {\n    const { frag, part } = data;\n    if (frag.type !== PlaylistLevelType.AUDIO) {\n      if (\n        !this.audioOnly &&\n        frag.type === PlaylistLevelType.MAIN &&\n        !frag.elementaryStreams.video &&\n        !frag.elementaryStreams.audiovideo\n      ) {\n        this.audioOnly = true;\n        this.mainFragLoading = null;\n      }\n      return;\n    }\n    if (this.fragContextChanged(frag)) {\n      // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n      // Avoid setting state back to IDLE or concluding the audio switch; otherwise, the switched-to track will not buffer\n      this.warn(\n        `Fragment ${frag.sn}${part ? ' p: ' + part.index : ''} of level ${\n          frag.level\n        } finished buffering, but was aborted. state: ${\n          this.state\n        }, audioSwitch: ${\n          this.switchingTrack ? this.switchingTrack.name : 'false'\n        }`,\n      );\n      return;\n    }\n    if (isMediaFragment(frag)) {\n      this.fragPrevious = frag;\n      const track = this.switchingTrack;\n      if (track) {\n        this.bufferedTrack = track;\n        this.switchingTrack = null;\n        this.hls.trigger(Events.AUDIO_TRACK_SWITCHED, { ...track });\n      }\n    }\n    this.fragBufferedComplete(frag, part);\n    if (this.media) {\n      this.tick();\n    }\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData) {\n    if (data.fatal) {\n      this.state = State.ERROR;\n      return;\n    }\n    switch (data.details) {\n      case ErrorDetails.FRAG_GAP:\n      case ErrorDetails.FRAG_PARSING_ERROR:\n      case ErrorDetails.FRAG_DECRYPT_ERROR:\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.KEY_LOAD_ERROR:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n        this.onFragmentOrKeyLoadError(PlaylistLevelType.AUDIO, data);\n        break;\n      case ErrorDetails.AUDIO_TRACK_LOAD_ERROR:\n      case ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT:\n      case ErrorDetails.LEVEL_PARSING_ERROR:\n        // in case of non fatal error while loading track, if not retrying to load track, switch back to IDLE\n        if (\n          !data.levelRetry &&\n          this.state === State.WAITING_TRACK &&\n          data.context?.type === PlaylistContextType.AUDIO_TRACK\n        ) {\n          this.state = State.IDLE;\n        }\n        break;\n      case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n      case ErrorDetails.BUFFER_APPEND_ERROR:\n        if (data.parent !== 'audio') {\n          return;\n        }\n        if (!this.reduceLengthAndFlushBuffer(data)) {\n          this.resetLoadingState();\n        }\n        break;\n      case ErrorDetails.BUFFER_FULL_ERROR:\n        if (data.parent !== 'audio') {\n          return;\n        }\n        if (this.reduceLengthAndFlushBuffer(data)) {\n          this.bufferedTrack = null;\n          super.flushMainBuffer(0, Number.POSITIVE_INFINITY, 'audio');\n        }\n        break;\n      case ErrorDetails.INTERNAL_EXCEPTION:\n        this.recoverWorkerError(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private onBufferFlushing(\n    event: Events.BUFFER_FLUSHING,\n    { type }: BufferFlushingData,\n  ) {\n    if (type !== ElementaryStreamTypes.VIDEO) {\n      this.flushing = true;\n    }\n  }\n\n  private onBufferFlushed(\n    event: Events.BUFFER_FLUSHED,\n    { type }: BufferFlushedData,\n  ) {\n    if (type !== ElementaryStreamTypes.VIDEO) {\n      this.flushing = false;\n      this.bufferFlushed = true;\n      if (this.state === State.ENDED) {\n        this.state = State.IDLE;\n      }\n      const mediaBuffer = this.mediaBuffer || this.media;\n      if (mediaBuffer) {\n        this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.AUDIO);\n        this.tick();\n      }\n    }\n  }\n\n  private _handleTransmuxComplete(transmuxResult: TransmuxerResult) {\n    const id = 'audio';\n    const { hls } = this;\n    const { remuxResult, chunkMeta } = transmuxResult;\n\n    const context = this.getCurrentContext(chunkMeta);\n    if (!context) {\n      this.resetWhenMissingContext(chunkMeta);\n      return;\n    }\n    const { frag, part, level } = context;\n    const { details } = level;\n    const { audio, text, id3, initSegment } = remuxResult;\n\n    // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n    // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n    if (this.fragContextChanged(frag) || !details) {\n      this.fragmentTracker.removeFragment(frag);\n      return;\n    }\n\n    this.state = State.PARSING;\n    if (this.switchingTrack && audio) {\n      this.completeAudioSwitch(this.switchingTrack);\n    }\n\n    if (initSegment?.tracks) {\n      const mapFragment = frag.initSegment || frag;\n      if (this.unhandledEncryptionError(initSegment, frag)) {\n        return;\n      }\n      this._bufferInitSegment(\n        level,\n        initSegment.tracks,\n        mapFragment,\n        chunkMeta,\n      );\n      hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT, {\n        frag: mapFragment,\n        id,\n        tracks: initSegment.tracks,\n      });\n      // Only flush audio from old audio tracks when PTS is known on new audio track\n    }\n    if (audio) {\n      const { startPTS, endPTS, startDTS, endDTS } = audio;\n      if (part) {\n        part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {\n          startPTS,\n          endPTS,\n          startDTS,\n          endDTS,\n        };\n      }\n      frag.setElementaryStreamInfo(\n        ElementaryStreamTypes.AUDIO,\n        startPTS,\n        endPTS,\n        startDTS,\n        endDTS,\n      );\n      this.bufferFragmentData(audio, frag, part, chunkMeta);\n    }\n\n    if (id3?.samples?.length) {\n      const emittedID3: FragParsingMetadataData = Object.assign(\n        {\n          id,\n          frag,\n          details,\n        },\n        id3,\n      );\n      hls.trigger(Events.FRAG_PARSING_METADATA, emittedID3);\n    }\n    if (text) {\n      const emittedText: FragParsingUserdataData = Object.assign(\n        {\n          id,\n          frag,\n          details,\n        },\n        text,\n      );\n      hls.trigger(Events.FRAG_PARSING_USERDATA, emittedText);\n    }\n  }\n\n  private _bufferInitSegment(\n    currentLevel: Level,\n    tracks: TrackSet,\n    frag: Fragment,\n    chunkMeta: ChunkMetadata,\n  ) {\n    if (this.state !== State.PARSING) {\n      return;\n    }\n    // delete any video track found on audio transmuxer\n    if (tracks.video) {\n      delete tracks.video;\n    }\n    if (tracks.audiovideo) {\n      delete tracks.audiovideo;\n    }\n\n    // include levelCodec in audio and video tracks\n    if (!tracks.audio) {\n      return;\n    }\n    const track = tracks.audio;\n\n    track.id = PlaylistLevelType.AUDIO;\n\n    const variantAudioCodecs = currentLevel.audioCodec;\n    this.log(\n      `Init audio buffer, container:${track.container}, codecs[level/parsed]=[${variantAudioCodecs}/${track.codec}]`,\n    );\n    // SourceBuffer will use track.levelCodec if defined\n    if (variantAudioCodecs && variantAudioCodecs.split(',').length === 1) {\n      track.levelCodec = variantAudioCodecs;\n    }\n    this.hls.trigger(Events.BUFFER_CODECS, tracks as BufferCodecsData);\n    const initSegment = track.initSegment;\n    if (initSegment?.byteLength) {\n      const segment: BufferAppendingData = {\n        type: 'audio',\n        frag,\n        part: null,\n        chunkMeta,\n        parent: frag.type,\n        data: initSegment,\n      };\n      this.hls.trigger(Events.BUFFER_APPENDING, segment);\n    }\n    // trigger handler right now\n    this.tickImmediate();\n  }\n\n  protected loadFragment(\n    frag: Fragment,\n    track: Level,\n    targetBufferTime: number,\n  ) {\n    // only load if fragment is not loaded or if in audio switch\n    const fragState = this.fragmentTracker.getState(frag);\n\n    // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch\n    if (\n      this.switchingTrack ||\n      fragState === FragmentState.NOT_LOADED ||\n      fragState === FragmentState.PARTIAL\n    ) {\n      if (!isMediaFragment(frag)) {\n        this._loadInitSegment(frag, track);\n      } else if (track.details?.live && !this.initPTS[frag.cc]) {\n        this.log(\n          `Waiting for video PTS in continuity counter ${frag.cc} of live stream before loading audio fragment ${frag.sn} of level ${this.trackId}`,\n        );\n        this.state = State.WAITING_INIT_PTS;\n        const mainDetails = this.mainDetails;\n        if (\n          mainDetails &&\n          mainDetails.fragmentStart !== track.details.fragmentStart\n        ) {\n          alignMediaPlaylistByPDT(track.details, mainDetails);\n        }\n      } else {\n        super.loadFragment(frag, track, targetBufferTime);\n      }\n    } else {\n      this.clearTrackerIfNeeded(frag);\n    }\n  }\n\n  private flushAudioIfNeeded(switchingTrack: MediaPlaylist) {\n    if (this.media && this.bufferedTrack) {\n      const { name, lang, assocLang, characteristics, audioCodec, channels } =\n        this.bufferedTrack;\n      if (\n        !matchesOption(\n          { name, lang, assocLang, characteristics, audioCodec, channels },\n          switchingTrack,\n          audioMatchPredicate,\n        )\n      ) {\n        if (useAlternateAudio(switchingTrack.url, this.hls)) {\n          this.log('Switching audio track : flushing all audio');\n          super.flushMainBuffer(0, Number.POSITIVE_INFINITY, 'audio');\n          this.bufferedTrack = null;\n        } else {\n          // Main is being buffered. Set bufferedTrack so that it is flushed when switching back to alt-audio\n          this.bufferedTrack = switchingTrack;\n        }\n      }\n    }\n  }\n\n  private completeAudioSwitch(switchingTrack: MediaPlaylist) {\n    const { hls } = this;\n    this.flushAudioIfNeeded(switchingTrack);\n    this.bufferedTrack = switchingTrack;\n    this.switchingTrack = null;\n    hls.trigger(Events.AUDIO_TRACK_SWITCHED, { ...switchingTrack });\n  }\n}\nexport default AudioStreamController;\n","import { NetworkErrorAction } from './error-controller';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport {\n  getSkipValue,\n  HlsSkip,\n  HlsUrlParameters,\n  type Level,\n} from '../types/level';\nimport { getRetryDelay, isTimeoutError } from '../utils/error-helper';\nimport { computeReloadInterval, mergeDetails } from '../utils/level-helper';\nimport { Logger } from '../utils/logger';\nimport type Hls from '../hls';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type { ErrorData } from '../types/events';\nimport type {\n  AudioTrackLoadedData,\n  LevelLoadedData,\n  TrackLoadedData,\n} from '../types/events';\nimport type { MediaPlaylist } from '../types/media-playlist';\n\nexport default class BasePlaylistController\n  extends Logger\n  implements NetworkComponentAPI\n{\n  protected hls: Hls;\n  protected canLoad: boolean = false;\n  private timer: number = -1;\n\n  constructor(hls: Hls, logPrefix: string) {\n    super(logPrefix, hls.logger);\n    this.hls = hls;\n  }\n\n  public destroy() {\n    this.clearTimer();\n    // @ts-ignore\n    this.hls = this.log = this.warn = null;\n  }\n\n  private clearTimer() {\n    if (this.timer !== -1) {\n      self.clearTimeout(this.timer);\n      this.timer = -1;\n    }\n  }\n\n  public startLoad() {\n    this.canLoad = true;\n    this.loadPlaylist();\n  }\n\n  public stopLoad() {\n    this.canLoad = false;\n    this.clearTimer();\n  }\n\n  protected switchParams(\n    playlistUri: string,\n    previous: LevelDetails | undefined,\n    current: LevelDetails | undefined,\n  ): HlsUrlParameters | undefined {\n    const renditionReports = previous?.renditionReports;\n    if (renditionReports) {\n      let foundIndex = -1;\n      for (let i = 0; i < renditionReports.length; i++) {\n        const attr = renditionReports[i];\n        let uri: string;\n        try {\n          uri = new self.URL(attr.URI, previous.url).href;\n        } catch (error) {\n          this.warn(\n            `Could not construct new URL for Rendition Report: ${error}`,\n          );\n          uri = attr.URI || '';\n        }\n        // Use exact match. Otherwise, the last partial match, if any, will be used\n        // (Playlist URI includes a query string that the Rendition Report does not)\n        if (uri === playlistUri) {\n          foundIndex = i;\n          break;\n        } else if (uri === playlistUri.substring(0, uri.length)) {\n          foundIndex = i;\n        }\n      }\n      if (foundIndex !== -1) {\n        const attr = renditionReports[foundIndex];\n        const msn = parseInt(attr['LAST-MSN']) || previous.lastPartSn;\n        let part = parseInt(attr['LAST-PART']) || previous.lastPartIndex;\n        if (this.hls.config.lowLatencyMode) {\n          const currentGoal = Math.min(\n            previous.age - previous.partTarget,\n            previous.targetduration,\n          );\n          if (part >= 0 && currentGoal > previous.partTarget) {\n            part += 1;\n          }\n        }\n        const skip = current && getSkipValue(current);\n        return new HlsUrlParameters(msn, part >= 0 ? part : undefined, skip);\n      }\n    }\n  }\n\n  protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters) {\n    // Loading is handled by the subclasses\n    this.clearTimer();\n  }\n\n  protected loadingPlaylist(\n    playlist: Level | MediaPlaylist,\n    hlsUrlParameters?: HlsUrlParameters,\n  ) {\n    // Loading is handled by the subclasses\n    this.clearTimer();\n  }\n\n  protected shouldLoadPlaylist(\n    playlist: Level | MediaPlaylist | null | undefined,\n  ): playlist is Level | MediaPlaylist {\n    return (\n      this.canLoad &&\n      !!playlist &&\n      !!playlist.url &&\n      (!playlist.details || playlist.details.live)\n    );\n  }\n\n  protected getUrlWithDirectives(\n    uri: string,\n    hlsUrlParameters: HlsUrlParameters | undefined,\n  ): string {\n    if (hlsUrlParameters) {\n      try {\n        return hlsUrlParameters.addDirectives(uri);\n      } catch (error) {\n        this.warn(\n          `Could not construct new URL with HLS Delivery Directives: ${error}`,\n        );\n      }\n    }\n    return uri;\n  }\n\n  protected playlistLoaded(\n    index: number,\n    data: LevelLoadedData | AudioTrackLoadedData | TrackLoadedData,\n    previousDetails?: LevelDetails,\n  ) {\n    const { details, stats } = data;\n\n    // Set last updated date-time\n    const now = self.performance.now();\n    const elapsed = stats.loading.first\n      ? Math.max(0, now - stats.loading.first)\n      : 0;\n    details.advancedDateTime = Date.now() - elapsed;\n\n    // shift fragment starts with timelineOffset\n    const timelineOffset = this.hls.config.timelineOffset;\n    if (timelineOffset !== details.appliedTimelineOffset) {\n      const offset = Math.max(timelineOffset || 0, 0);\n      details.appliedTimelineOffset = offset;\n      details.fragments.forEach((frag) => {\n        frag.setStart(frag.playlistOffset + offset);\n      });\n    }\n\n    // if current playlist is a live playlist, arm a timer to reload it\n    if (details.live || previousDetails?.live) {\n      const levelOrTrack = 'levelInfo' in data ? data.levelInfo : data.track;\n      details.reloaded(previousDetails);\n      // Merge live playlists to adjust fragment starts and fill in delta playlist skipped segments\n      if (previousDetails && details.fragments.length > 0) {\n        mergeDetails(previousDetails, details, this);\n        const error = details.playlistParsingError;\n        if (error) {\n          this.warn(error);\n          const hls = this.hls;\n          if (!hls.config.ignorePlaylistParsingErrors) {\n            const { networkDetails } = data;\n            hls.trigger(Events.ERROR, {\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.LEVEL_PARSING_ERROR,\n              fatal: false,\n              url: details.url,\n              error,\n              reason: error.message,\n              level: (data as any).level || undefined,\n              parent: details.fragments[0]?.type,\n              networkDetails,\n              stats,\n            });\n            return;\n          }\n          details.playlistParsingError = null;\n        }\n      }\n      if (details.requestScheduled === -1) {\n        details.requestScheduled = stats.loading.start;\n      }\n      const bufferInfo = this.hls.mainForwardBufferInfo;\n      const position = bufferInfo ? bufferInfo.end - bufferInfo.len : 0;\n      const distanceToLiveEdgeMs = (details.edge - position) * 1000;\n      const reloadInterval = computeReloadInterval(\n        details,\n        distanceToLiveEdgeMs,\n      );\n      if (details.requestScheduled + reloadInterval < now) {\n        details.requestScheduled = now;\n      } else {\n        details.requestScheduled += reloadInterval;\n      }\n      this.log(\n        `live playlist ${index} ${\n          details.advanced\n            ? 'REFRESHED ' + details.lastPartSn + '-' + details.lastPartIndex\n            : details.updated\n              ? 'UPDATED'\n              : 'MISSED'\n        }`,\n      );\n      if (!this.canLoad || !details.live) {\n        return;\n      }\n      let deliveryDirectives: HlsUrlParameters | undefined;\n      let msn: number | undefined = undefined;\n      let part: number | undefined = undefined;\n      if (details.canBlockReload && details.endSN && details.advanced) {\n        // Load level with LL-HLS delivery directives\n        const lowLatencyMode = this.hls.config.lowLatencyMode;\n        const lastPartSn = details.lastPartSn;\n        const endSn = details.endSN;\n        const lastPartIndex = details.lastPartIndex;\n        const hasParts = lastPartIndex !== -1;\n        const atLastPartOfSegment = lastPartSn === endSn;\n        if (hasParts) {\n          // When low latency mode is disabled, request the last part of the next segment\n          if (atLastPartOfSegment) {\n            msn = endSn + 1;\n            part = lowLatencyMode ? 0 : lastPartIndex;\n          } else {\n            msn = lastPartSn;\n            part = lowLatencyMode ? lastPartIndex + 1 : details.maxPartIndex;\n          }\n        } else {\n          msn = endSn + 1;\n        }\n        // Low-Latency CDN Tune-in: \"age\" header and time since load indicates we're behind by more than one part\n        // Update directives to obtain the Playlist that has the estimated additional duration of media\n        const lastAdvanced = details.age;\n        const cdnAge = lastAdvanced + details.ageHeader;\n        let currentGoal = Math.min(\n          cdnAge - details.partTarget,\n          details.targetduration * 1.5,\n        );\n        if (currentGoal > 0) {\n          if (cdnAge > details.targetduration * 3) {\n            // Omit segment and part directives when the last response was more than 3 target durations ago,\n            this.log(\n              `Playlist last advanced ${lastAdvanced.toFixed(\n                2,\n              )}s ago. Omitting segment and part directives.`,\n            );\n            msn = undefined;\n            part = undefined;\n          } else if (\n            previousDetails?.tuneInGoal &&\n            cdnAge - details.partTarget > previousDetails.tuneInGoal\n          ) {\n            // If we attempted to get the next or latest playlist update, but currentGoal increased,\n            // then we either can't catchup, or the \"age\" header cannot be trusted.\n            this.warn(\n              `CDN Tune-in goal increased from: ${previousDetails.tuneInGoal} to: ${currentGoal} with playlist age: ${details.age}`,\n            );\n            currentGoal = 0;\n          } else {\n            const segments = Math.floor(currentGoal / details.targetduration);\n            msn += segments;\n            if (part !== undefined) {\n              const parts = Math.round(\n                (currentGoal % details.targetduration) / details.partTarget,\n              );\n              part += parts;\n            }\n            this.log(\n              `CDN Tune-in age: ${\n                details.ageHeader\n              }s last advanced ${lastAdvanced.toFixed(\n                2,\n              )}s goal: ${currentGoal} skip sn ${segments} to part ${part}`,\n            );\n          }\n          details.tuneInGoal = currentGoal;\n        }\n        deliveryDirectives = this.getDeliveryDirectives(\n          details,\n          data.deliveryDirectives,\n          msn,\n          part,\n        );\n        if (lowLatencyMode || !atLastPartOfSegment) {\n          details.requestScheduled = now;\n          this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n          return;\n        }\n      } else if (details.canBlockReload || details.canSkipUntil) {\n        deliveryDirectives = this.getDeliveryDirectives(\n          details,\n          data.deliveryDirectives,\n          msn,\n          part,\n        );\n      }\n      if (deliveryDirectives && msn !== undefined && details.canBlockReload) {\n        details.requestScheduled =\n          stats.loading.first +\n          Math.max(reloadInterval - elapsed * 2, reloadInterval / 2);\n      }\n      this.scheduleLoading(levelOrTrack, deliveryDirectives, details);\n    } else {\n      this.clearTimer();\n    }\n  }\n\n  protected scheduleLoading(\n    levelOrTrack: Level | MediaPlaylist,\n    deliveryDirectives?: HlsUrlParameters,\n    updatedDetails?: LevelDetails,\n  ) {\n    const details = updatedDetails || levelOrTrack.details;\n    if (!details) {\n      this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n      return;\n    }\n    const now = self.performance.now();\n    const requestScheduled = details.requestScheduled;\n    if (now >= requestScheduled) {\n      this.loadingPlaylist(levelOrTrack, deliveryDirectives);\n      return;\n    }\n\n    const estimatedTimeUntilUpdate = requestScheduled - now;\n    this.log(\n      `reload live playlist ${levelOrTrack.name || levelOrTrack.bitrate + 'bps'} in ${Math.round(\n        estimatedTimeUntilUpdate,\n      )} ms`,\n    );\n\n    this.clearTimer();\n    this.timer = self.setTimeout(\n      () => this.loadingPlaylist(levelOrTrack, deliveryDirectives),\n      estimatedTimeUntilUpdate,\n    );\n  }\n\n  private getDeliveryDirectives(\n    details: LevelDetails,\n    previousDeliveryDirectives: HlsUrlParameters | null,\n    msn?: number,\n    part?: number,\n  ): HlsUrlParameters {\n    let skip = getSkipValue(details);\n    if (previousDeliveryDirectives?.skip && details.deltaUpdateFailed) {\n      msn = previousDeliveryDirectives.msn;\n      part = previousDeliveryDirectives.part;\n      skip = HlsSkip.No;\n    }\n    return new HlsUrlParameters(msn, part, skip);\n  }\n\n  protected checkRetry(errorEvent: ErrorData): boolean {\n    const errorDetails = errorEvent.details;\n    const isTimeout = isTimeoutError(errorEvent);\n    const errorAction = errorEvent.errorAction;\n    const { action, retryCount = 0, retryConfig } = errorAction || {};\n    const retry =\n      !!errorAction &&\n      !!retryConfig &&\n      (action === NetworkErrorAction.RetryRequest ||\n        (!errorAction.resolved &&\n          action === NetworkErrorAction.SendAlternateToPenaltyBox));\n    if (retry) {\n      if (retryCount >= retryConfig.maxNumRetry) {\n        return false;\n      }\n      if (isTimeout && errorEvent.context?.deliveryDirectives) {\n        // The LL-HLS request already timed out so retry immediately\n        this.warn(\n          `Retrying playlist loading ${retryCount + 1}/${\n            retryConfig.maxNumRetry\n          } after \"${errorDetails}\" without delivery-directives`,\n        );\n        this.loadPlaylist();\n      } else {\n        const delay = getRetryDelay(retryConfig, retryCount);\n        // Schedule level/track reload\n        this.clearTimer();\n        this.timer = self.setTimeout(() => this.loadPlaylist(), delay);\n        this.warn(\n          `Retrying playlist loading ${retryCount + 1}/${\n            retryConfig.maxNumRetry\n          } after \"${errorDetails}\" in ${delay}ms`,\n        );\n      }\n      // `levelRetry = true` used to inform other controllers that a retry is happening\n      errorEvent.levelRetry = true;\n      errorAction.resolved = true;\n    }\n    return retry;\n  }\n}\n","import type { Level } from '../types/level';\nimport type { MediaAttributes, MediaPlaylist } from '../types/media-playlist';\n\nexport function subtitleOptionsIdentical(\n  trackList1: MediaPlaylist[] | Level[],\n  trackList2: MediaPlaylist[],\n): boolean {\n  if (trackList1.length !== trackList2.length) {\n    return false;\n  }\n  for (let i = 0; i < trackList1.length; i++) {\n    if (\n      !mediaAttributesIdentical(\n        trackList1[i].attrs as MediaAttributes,\n        trackList2[i].attrs,\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function mediaAttributesIdentical(\n  attrs1: MediaAttributes,\n  attrs2: MediaAttributes,\n  customAttributes?: string[],\n): boolean {\n  // Media options with the same rendition ID must be bit identical\n  const stableRenditionId = attrs1['STABLE-RENDITION-ID'];\n  if (stableRenditionId && !customAttributes) {\n    return stableRenditionId === attrs2['STABLE-RENDITION-ID'];\n  }\n  // When rendition ID is not present, compare attributes\n  return !(\n    customAttributes || [\n      'LANGUAGE',\n      'NAME',\n      'CHARACTERISTICS',\n      'AUTOSELECT',\n      'DEFAULT',\n      'FORCED',\n      'ASSOC-LANGUAGE',\n    ]\n  ).some(\n    (subtitleAttribute) =>\n      attrs1[subtitleAttribute] !== attrs2[subtitleAttribute],\n  );\n}\n\nexport function subtitleTrackMatchesTextTrack(\n  subtitleTrack: Pick<MediaPlaylist, 'name' | 'lang' | 'attrs'>,\n  textTrack: TextTrack,\n) {\n  return (\n    textTrack.label.toLowerCase() === subtitleTrack.name.toLowerCase() &&\n    (!textTrack.language ||\n      textTrack.language.toLowerCase() ===\n        (subtitleTrack.lang || '').toLowerCase())\n  );\n}\n","import BasePlaylistController from './base-playlist-controller';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { PlaylistContextType } from '../types/loader';\nimport { mediaAttributesIdentical } from '../utils/media-option-attributes';\nimport {\n  audioMatchPredicate,\n  findClosestLevelWithAudioGroup,\n  findMatchingOption,\n  matchesOption,\n  useAlternateAudio,\n} from '../utils/rendition-helper';\nimport type Hls from '../hls';\nimport type {\n  AudioTrackLoadedData,\n  AudioTracksUpdatedData,\n  ErrorData,\n  LevelLoadingData,\n  LevelSwitchingData,\n  ManifestParsedData,\n} from '../types/events';\nimport type { HlsUrlParameters } from '../types/level';\nimport type {\n  AudioSelectionOption,\n  MediaPlaylist,\n} from '../types/media-playlist';\n\nclass AudioTrackController extends BasePlaylistController {\n  private tracks: MediaPlaylist[] = [];\n  private groupIds: (string | undefined)[] | null = null;\n  private tracksInGroup: MediaPlaylist[] = [];\n  private trackId: number = -1;\n  private currentTrack: MediaPlaylist | null = null;\n  private selectDefaultTrack: boolean = true;\n\n  constructor(hls: Hls) {\n    super(hls, 'audio-track-controller');\n    this.registerListeners();\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.on(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.off(Events.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  public destroy() {\n    this.unregisterListeners();\n    this.tracks.length = 0;\n    this.tracksInGroup.length = 0;\n    this.currentTrack = null;\n    super.destroy();\n  }\n\n  protected onManifestLoading(): void {\n    this.tracks = [];\n    this.tracksInGroup = [];\n    this.groupIds = null;\n    this.currentTrack = null;\n    this.trackId = -1;\n    this.selectDefaultTrack = true;\n  }\n\n  protected onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ): void {\n    this.tracks = data.audioTracks || [];\n  }\n\n  protected onAudioTrackLoaded(\n    event: Events.AUDIO_TRACK_LOADED,\n    data: AudioTrackLoadedData,\n  ): void {\n    const { id, groupId, details } = data;\n    const trackInActiveGroup = this.tracksInGroup[id];\n\n    if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {\n      this.warn(\n        `Audio track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup?.groupId}`,\n      );\n      return;\n    }\n\n    const curDetails = trackInActiveGroup.details;\n    trackInActiveGroup.details = data.details;\n    this.log(\n      `Audio track ${id} \"${trackInActiveGroup.name}\" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`,\n    );\n\n    if (id === this.trackId) {\n      this.playlistLoaded(id, data, curDetails);\n    }\n  }\n\n  protected onLevelLoading(\n    event: Events.LEVEL_LOADING,\n    data: LevelLoadingData,\n  ): void {\n    this.switchLevel(data.level);\n  }\n\n  protected onLevelSwitching(\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData,\n  ): void {\n    this.switchLevel(data.level);\n  }\n\n  private switchLevel(levelIndex: number) {\n    const levelInfo = this.hls.levels[levelIndex];\n    if (!levelInfo) {\n      return;\n    }\n    const audioGroups = levelInfo.audioGroups || null;\n    const currentGroups = this.groupIds;\n    let currentTrack = this.currentTrack;\n    if (\n      !audioGroups ||\n      currentGroups?.length !== audioGroups?.length ||\n      audioGroups?.some((groupId) => currentGroups?.indexOf(groupId) === -1)\n    ) {\n      this.groupIds = audioGroups;\n      this.trackId = -1;\n      this.currentTrack = null;\n\n      const audioTracks = this.tracks.filter(\n        (track): boolean =>\n          !audioGroups || audioGroups.indexOf(track.groupId) !== -1,\n      );\n      if (audioTracks.length) {\n        // Disable selectDefaultTrack if there are no default tracks\n        if (\n          this.selectDefaultTrack &&\n          !audioTracks.some((track) => track.default)\n        ) {\n          this.selectDefaultTrack = false;\n        }\n        // track.id should match hls.audioTracks index\n        audioTracks.forEach((track, i) => {\n          track.id = i;\n        });\n      } else if (!currentTrack && !this.tracksInGroup.length) {\n        // Do not dispatch AUDIO_TRACKS_UPDATED when there were and are no tracks\n        return;\n      }\n      this.tracksInGroup = audioTracks;\n\n      // Find preferred track\n      const audioPreference = this.hls.config.audioPreference;\n      if (!currentTrack && audioPreference) {\n        const groupIndex = findMatchingOption(\n          audioPreference,\n          audioTracks,\n          audioMatchPredicate,\n        );\n        if (groupIndex > -1) {\n          currentTrack = audioTracks[groupIndex];\n        } else {\n          const allIndex = findMatchingOption(audioPreference, this.tracks);\n          currentTrack = this.tracks[allIndex];\n        }\n      }\n\n      // Select initial track\n      let trackId = this.findTrackId(currentTrack);\n      if (trackId === -1 && currentTrack) {\n        trackId = this.findTrackId(null);\n      }\n\n      // Dispatch events and load track if needed\n      const audioTracksUpdated: AudioTracksUpdatedData = { audioTracks };\n      this.log(\n        `Updating audio tracks, ${\n          audioTracks.length\n        } track(s) found in group(s): ${audioGroups?.join(',')}`,\n      );\n      this.hls.trigger(Events.AUDIO_TRACKS_UPDATED, audioTracksUpdated);\n\n      const selectedTrackId = this.trackId;\n      if (trackId !== -1 && selectedTrackId === -1) {\n        this.setAudioTrack(trackId);\n      } else if (audioTracks.length && selectedTrackId === -1) {\n        const error = new Error(\n          `No audio track selected for current audio group-ID(s): ${this.groupIds?.join(\n            ',',\n          )} track count: ${audioTracks.length}`,\n        );\n        this.warn(error.message);\n\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.MEDIA_ERROR,\n          details: ErrorDetails.AUDIO_TRACK_LOAD_ERROR,\n          fatal: true,\n          error,\n        });\n      }\n    }\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData): void {\n    if (data.fatal || !data.context) {\n      return;\n    }\n\n    if (\n      data.context.type === PlaylistContextType.AUDIO_TRACK &&\n      data.context.id === this.trackId &&\n      (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)\n    ) {\n      this.checkRetry(data);\n    }\n  }\n\n  get allAudioTracks(): MediaPlaylist[] {\n    return this.tracks;\n  }\n\n  get audioTracks(): MediaPlaylist[] {\n    return this.tracksInGroup;\n  }\n\n  get audioTrack(): number {\n    return this.trackId;\n  }\n\n  set audioTrack(newId: number) {\n    // If audio track is selected from API then don't choose from the manifest default track\n    this.selectDefaultTrack = false;\n    this.setAudioTrack(newId);\n  }\n\n  public setAudioOption(\n    audioOption: MediaPlaylist | AudioSelectionOption | undefined,\n  ): MediaPlaylist | null {\n    const hls = this.hls;\n    hls.config.audioPreference = audioOption;\n    if (audioOption) {\n      const allAudioTracks = this.allAudioTracks;\n      this.selectDefaultTrack = false;\n      if (allAudioTracks.length) {\n        // First see if current option matches (no switch op)\n        const currentTrack = this.currentTrack;\n        if (\n          currentTrack &&\n          matchesOption(audioOption, currentTrack, audioMatchPredicate)\n        ) {\n          return currentTrack;\n        }\n        // Find option in available tracks (tracksInGroup)\n        const groupIndex = findMatchingOption(\n          audioOption,\n          this.tracksInGroup,\n          audioMatchPredicate,\n        );\n        if (groupIndex > -1) {\n          const track = this.tracksInGroup[groupIndex];\n          this.setAudioTrack(groupIndex);\n          return track;\n        } else if (currentTrack) {\n          // Find option in nearest level audio group\n          let searchIndex = hls.loadLevel;\n          if (searchIndex === -1) {\n            searchIndex = hls.firstAutoLevel;\n          }\n          const switchIndex = findClosestLevelWithAudioGroup(\n            audioOption,\n            hls.levels,\n            allAudioTracks,\n            searchIndex,\n            audioMatchPredicate,\n          );\n          if (switchIndex === -1) {\n            // could not find matching variant\n            return null;\n          }\n          // and switch level to acheive the audio group switch\n          hls.nextLoadLevel = switchIndex;\n        }\n        if (audioOption.channels || audioOption.audioCodec) {\n          // Could not find a match with codec / channels predicate\n          // Find a match without channels or codec\n          const withoutCodecAndChannelsMatch = findMatchingOption(\n            audioOption,\n            allAudioTracks,\n          );\n          if (withoutCodecAndChannelsMatch > -1) {\n            return allAudioTracks[withoutCodecAndChannelsMatch];\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  private setAudioTrack(newId: number): void {\n    const tracks = this.tracksInGroup;\n\n    // check if level idx is valid\n    if (newId < 0 || newId >= tracks.length) {\n      this.warn(`Invalid audio track id: ${newId}`);\n      return;\n    }\n\n    this.selectDefaultTrack = false;\n    const lastTrack = this.currentTrack;\n    const track = tracks[newId];\n    const trackLoaded = track.details && !track.details.live;\n    if (newId === this.trackId && track === lastTrack && trackLoaded) {\n      return;\n    }\n    this.log(\n      `Switching to audio-track ${newId} \"${track.name}\" lang:${track.lang} group:${track.groupId} channels:${track.channels}`,\n    );\n    this.trackId = newId;\n    this.currentTrack = track;\n    this.hls.trigger(Events.AUDIO_TRACK_SWITCHING, { ...track });\n    // Do not reload track unless live\n    if (trackLoaded) {\n      return;\n    }\n    const hlsUrlParameters = this.switchParams(\n      track.url,\n      lastTrack?.details,\n      track.details,\n    );\n    this.loadPlaylist(hlsUrlParameters);\n  }\n\n  private findTrackId(currentTrack: MediaPlaylist | null): number {\n    const audioTracks = this.tracksInGroup;\n    for (let i = 0; i < audioTracks.length; i++) {\n      const track = audioTracks[i];\n      if (this.selectDefaultTrack && !track.default) {\n        continue;\n      }\n      if (\n        !currentTrack ||\n        matchesOption(currentTrack, track, audioMatchPredicate)\n      ) {\n        return i;\n      }\n    }\n    if (currentTrack) {\n      const { name, lang, assocLang, characteristics, audioCodec, channels } =\n        currentTrack;\n      for (let i = 0; i < audioTracks.length; i++) {\n        const track = audioTracks[i];\n        if (\n          matchesOption(\n            { name, lang, assocLang, characteristics, audioCodec, channels },\n            track,\n            audioMatchPredicate,\n          )\n        ) {\n          return i;\n        }\n      }\n      for (let i = 0; i < audioTracks.length; i++) {\n        const track = audioTracks[i];\n        if (\n          mediaAttributesIdentical(currentTrack.attrs, track.attrs, [\n            'LANGUAGE',\n            'ASSOC-LANGUAGE',\n            'CHARACTERISTICS',\n          ])\n        ) {\n          return i;\n        }\n      }\n      for (let i = 0; i < audioTracks.length; i++) {\n        const track = audioTracks[i];\n        if (\n          mediaAttributesIdentical(currentTrack.attrs, track.attrs, [\n            'LANGUAGE',\n          ])\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters): void {\n    super.loadPlaylist();\n    const audioTrack = this.currentTrack;\n    if (!this.shouldLoadPlaylist(audioTrack)) {\n      return;\n    }\n    // Do not load audio rendition with URI matching main variant URI\n    if (useAlternateAudio(audioTrack.url, this.hls)) {\n      this.scheduleLoading(audioTrack, hlsUrlParameters);\n    }\n  }\n\n  protected loadingPlaylist(\n    audioTrack: MediaPlaylist,\n    hlsUrlParameters: HlsUrlParameters | undefined,\n  ) {\n    super.loadingPlaylist(audioTrack, hlsUrlParameters);\n    const id = audioTrack.id;\n    const groupId = audioTrack.groupId as string;\n    const url = this.getUrlWithDirectives(audioTrack.url, hlsUrlParameters);\n    const details = audioTrack.details;\n    const age = details?.age;\n    this.log(\n      `Loading audio-track ${id} \"${audioTrack.name}\" lang:${audioTrack.lang} group:${groupId}${\n        hlsUrlParameters?.msn !== undefined\n          ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part\n          : ''\n      }${age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || '' : '') : ''} ${url}`,\n    );\n    this.hls.trigger(Events.AUDIO_TRACK_LOADING, {\n      url,\n      id,\n      groupId,\n      deliveryDirectives: hlsUrlParameters || null,\n      track: audioTrack,\n    });\n  }\n}\n\nexport default AudioTrackController;\n","import type {\n  BufferOperation,\n  BufferOperationQueues,\n  SourceBufferName,\n  SourceBufferTrackSet,\n} from '../types/buffer';\n\nexport default class BufferOperationQueue {\n  private tracks: SourceBufferTrackSet | null;\n  private queues: BufferOperationQueues | null = {\n    video: [],\n    audio: [],\n    audiovideo: [],\n  };\n\n  constructor(sourceBufferReference: SourceBufferTrackSet) {\n    this.tracks = sourceBufferReference;\n  }\n\n  public destroy() {\n    this.tracks = this.queues = null;\n  }\n\n  public append(\n    operation: BufferOperation,\n    type: SourceBufferName,\n    pending?: boolean | undefined,\n  ) {\n    if (this.queues === null || this.tracks === null) {\n      return;\n    }\n    const queue = this.queues[type];\n    queue.push(operation);\n    if (queue.length === 1 && !pending) {\n      this.executeNext(type);\n    }\n  }\n\n  public appendBlocker(type: SourceBufferName): Promise<void> {\n    return new Promise((resolve) => {\n      const operation: BufferOperation = {\n        label: 'async-blocker',\n        execute: resolve,\n        onStart: () => {},\n        onComplete: () => {},\n        onError: () => {},\n      };\n      this.append(operation, type);\n    });\n  }\n\n  public prependBlocker(type: SourceBufferName): Promise<void> {\n    return new Promise((resolve) => {\n      if (this.queues) {\n        const operation: BufferOperation = {\n          label: 'async-blocker-prepend',\n          execute: resolve,\n          onStart: () => {},\n          onComplete: () => {},\n          onError: () => {},\n        };\n        this.queues[type].unshift(operation);\n      }\n    });\n  }\n\n  public removeBlockers() {\n    if (this.queues === null) {\n      return;\n    }\n    [this.queues.video, this.queues.audio, this.queues.audiovideo].forEach(\n      (queue) => {\n        const label = queue[0]?.label;\n        if (label === 'async-blocker' || label === 'async-blocker-prepend') {\n          queue[0].execute();\n          queue.splice(0, 1);\n        }\n      },\n    );\n  }\n\n  public unblockAudio(op: BufferOperation) {\n    if (this.queues === null) {\n      return;\n    }\n    const queue = this.queues.audio;\n    if (queue[0] === op) {\n      this.shiftAndExecuteNext('audio');\n    }\n  }\n\n  public executeNext(type: SourceBufferName) {\n    if (this.queues === null || this.tracks === null) {\n      return;\n    }\n    const queue = this.queues[type];\n    if (queue.length) {\n      const operation: BufferOperation = queue[0];\n      try {\n        // Operations are expected to result in an 'updateend' event being fired. If not, the queue will lock. Operations\n        // which do not end with this event must call _onSBUpdateEnd manually\n        operation.execute();\n      } catch (error) {\n        operation.onError(error);\n        if (this.queues === null || this.tracks === null) {\n          return;\n        }\n\n        // Only shift the current operation off, otherwise the updateend handler will do this for us\n        const sb = this.tracks[type]?.buffer;\n        if (!sb?.updating) {\n          this.shiftAndExecuteNext(type);\n        }\n      }\n    }\n  }\n\n  public shiftAndExecuteNext(type: SourceBufferName) {\n    if (this.queues === null) {\n      return;\n    }\n    this.queues[type].shift();\n    this.executeNext(type);\n  }\n\n  public current(type: SourceBufferName): BufferOperation | null {\n    return this.queues?.[type][0] || null;\n  }\n\n  public toString(): string {\n    const { queues, tracks } = this;\n    if (queues === null || tracks === null) {\n      return `<destroyed>`;\n    }\n    return `\n${this.list('video')}\n${this.list('audio')}\n${this.list('audiovideo')}}`;\n  }\n\n  public list(type: SourceBufferName): string {\n    return this.queues?.[type] || this.tracks?.[type]\n      ? `${type}: (${this.listSbInfo(type)}) ${this.listOps(type)}`\n      : '';\n  }\n\n  private listSbInfo(type: SourceBufferName): string {\n    const track = this.tracks?.[type];\n    const sb = track?.buffer;\n    if (!sb) {\n      return 'none';\n    }\n    return `SourceBuffer${sb.updating ? ' updating' : ''}${track.ended ? ' ended' : ''}${track.ending ? ' ending' : ''}`;\n  }\n\n  private listOps(type: SourceBufferName): string {\n    return this.queues?.[type].map((op) => op.label).join(', ') || '';\n  }\n}\n","import BufferOperationQueue from './buffer-operation-queue';\nimport { createDoNothingErrorAction } from './error-controller';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { ElementaryStreamTypes } from '../loader/fragment';\nimport { PlaylistLevelType } from '../types/loader';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport {\n  areCodecsMediaSourceSupported,\n  getCodecCompatibleName,\n  pickMostCompleteCodecName,\n  replaceVideoCodec,\n} from '../utils/codecs';\nimport { Logger } from '../utils/logger';\nimport {\n  getMediaSource,\n  isCompatibleTrackChange,\n  isManagedMediaSource,\n} from '../utils/mediasource-helper';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type { HlsConfig } from '../config';\nimport type Hls from '../hls';\nimport type { MediaFragment, Part } from '../loader/fragment';\nimport type { LevelDetails } from '../loader/level-details';\nimport type {\n  AttachMediaSourceData,\n  BaseTrack,\n  BaseTrackSet,\n  BufferCreatedTrackSet,\n  BufferOperation,\n  EmptyTuple,\n  ExtendedSourceBuffer,\n  MediaOverrides,\n  ParsedTrack,\n  SourceBufferName,\n  SourceBuffersTuple,\n  SourceBufferTrack,\n  SourceBufferTrackSet,\n} from '../types/buffer';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  BufferAppendingData,\n  BufferCodecsData,\n  BufferEOSData,\n  BufferFlushingData,\n  ErrorData,\n  FragChangedData,\n  FragParsedData,\n  LevelUpdatedData,\n  ManifestParsedData,\n  MediaAttachingData,\n  MediaDetachingData,\n} from '../types/events';\nimport type { ChunkMetadata } from '../types/transmuxer';\n\ninterface BufferedChangeEvent extends Event {\n  readonly addedRanges?: TimeRanges;\n  readonly removedRanges?: TimeRanges;\n}\n\nconst VIDEO_CODEC_PROFILE_REPLACE =\n  /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\\.[^.,]+)+/;\n\nconst TRACK_REMOVED_ERROR_NAME = 'HlsJsTrackRemovedError';\n\nclass HlsJsTrackRemovedError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = TRACK_REMOVED_ERROR_NAME;\n  }\n}\n\nexport default class BufferController extends Logger implements ComponentAPI {\n  private hls: Hls;\n  private fragmentTracker: FragmentTracker;\n  // The level details used to determine duration, target-duration and live\n  private details: LevelDetails | null = null;\n  // cache the self generated object url to detect hijack of video tag\n  private _objectUrl: string | null = null;\n  // A queue of buffer operations which require the SourceBuffer to not be updating upon execution\n  private operationQueue: BufferOperationQueue | null = null;\n\n  // The total number track codecs expected before any sourceBuffers are created (2: audio and video or 1: audiovideo | audio | video)\n  private bufferCodecEventsTotal: number = 0;\n\n  // A reference to the attached media element\n  private media: HTMLMediaElement | null = null;\n\n  // A reference to the active media source\n  private mediaSource: MediaSource | null = null;\n\n  // Last MP3 audio chunk appended\n  private lastMpegAudioChunk: ChunkMetadata | null = null;\n\n  // Audio fragment blocked from appending until corresponding video appends or context changes\n  private blockedAudioAppend: {\n    op: BufferOperation;\n    frag: MediaFragment | Part;\n  } | null = null;\n  // Keep track of video append position for unblocking audio\n  private lastVideoAppendEnd: number = 0;\n  // Whether or not to use ManagedMediaSource API and append source element to media element.\n  private appendSource: boolean;\n  // Transferred MediaSource information used to detmerine if duration end endstream may be appended\n  private transferData?: MediaAttachingData;\n  // Directives used to override default MediaSource handling\n  private overrides?: MediaOverrides;\n  // Error counters\n  private appendErrors = {\n    audio: 0,\n    video: 0,\n    audiovideo: 0,\n  };\n  // Record of required or created buffers by type. SourceBuffer is stored in Track.buffer once created.\n  private tracks: SourceBufferTrackSet = {};\n  // Array of SourceBuffer type and SourceBuffer (or null). One entry per TrackSet in this.tracks.\n  private sourceBuffers: SourceBuffersTuple = [\n    [null, null],\n    [null, null],\n  ];\n\n  constructor(hls: Hls, fragmentTracker: FragmentTracker) {\n    super('buffer-controller', hls.logger);\n    this.hls = hls;\n    this.fragmentTracker = fragmentTracker;\n    this.appendSource = isManagedMediaSource(\n      getMediaSource(hls.config.preferManagedMediaSource),\n    );\n\n    this.initTracks();\n    this.registerListeners();\n  }\n\n  public hasSourceTypes(): boolean {\n    return Object.keys(this.tracks).length > 0;\n  }\n\n  public destroy() {\n    this.unregisterListeners();\n    this.details = null;\n    this.lastMpegAudioChunk = this.blockedAudioAppend = null;\n    this.transferData = this.overrides = undefined;\n    if (this.operationQueue) {\n      this.operationQueue.destroy();\n      this.operationQueue = null;\n    }\n    // @ts-ignore\n    this.hls = this.fragmentTracker = null;\n    // @ts-ignore\n    this._onMediaSourceOpen = this._onMediaSourceClose = null;\n    // @ts-ignore\n    this._onMediaSourceEnded = null;\n    // @ts-ignore\n    this._onStartStreaming = this._onEndStreaming = null;\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.BUFFER_RESET, this.onBufferReset, this);\n    hls.on(Events.BUFFER_APPENDING, this.onBufferAppending, this);\n    hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.on(Events.BUFFER_EOS, this.onBufferEos, this);\n    hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.on(Events.FRAG_PARSED, this.onFragParsed, this);\n    hls.on(Events.FRAG_CHANGED, this.onFragChanged, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.BUFFER_RESET, this.onBufferReset, this);\n    hls.off(Events.BUFFER_APPENDING, this.onBufferAppending, this);\n    hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.off(Events.BUFFER_EOS, this.onBufferEos, this);\n    hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.off(Events.FRAG_PARSED, this.onFragParsed, this);\n    hls.off(Events.FRAG_CHANGED, this.onFragChanged, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  public transferMedia(): AttachMediaSourceData | null {\n    const { media, mediaSource } = this;\n    if (!media) {\n      return null;\n    }\n    const tracks = {};\n    if (this.operationQueue) {\n      const updating = this.isUpdating();\n      if (!updating) {\n        this.operationQueue.removeBlockers();\n      }\n      const queued = this.isQueued();\n      if (updating || queued) {\n        this.warn(\n          `Transfering MediaSource with${queued ? ' operations in queue' : ''}${updating ? ' updating SourceBuffer(s)' : ''} ${this.operationQueue}`,\n        );\n      }\n      this.operationQueue.destroy();\n    }\n    const transferData = this.transferData;\n    if (\n      !this.sourceBufferCount &&\n      transferData &&\n      transferData.mediaSource === mediaSource\n    ) {\n      Object.assign(tracks, transferData.tracks);\n    } else {\n      this.sourceBuffers.forEach((tuple) => {\n        const [type] = tuple;\n        if (type) {\n          tracks[type] = Object.assign({}, this.tracks[type]);\n          this.removeBuffer(type);\n        }\n        tuple[0] = tuple[1] = null;\n      });\n    }\n    return {\n      media,\n      mediaSource,\n      tracks,\n    };\n  }\n\n  private initTracks() {\n    const tracks = {};\n    this.sourceBuffers = [\n      [null, null],\n      [null, null],\n    ];\n    this.tracks = tracks;\n    this.resetQueue();\n    this.resetAppendErrors();\n    this.lastMpegAudioChunk = this.blockedAudioAppend = null;\n    this.lastVideoAppendEnd = 0;\n  }\n\n  private onManifestLoading() {\n    this.bufferCodecEventsTotal = 0;\n    this.details = null;\n  }\n\n  private onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) {\n    // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller\n    // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n    // it will contain the expected nb of source buffers, no need to compute it\n    let codecEvents: number = 2;\n    if ((data.audio && !data.video) || !data.altAudio) {\n      codecEvents = 1;\n    }\n    this.bufferCodecEventsTotal = codecEvents;\n    this.log(`${codecEvents} bufferCodec event(s) expected.`);\n    if (\n      this.transferData?.mediaSource &&\n      this.sourceBufferCount &&\n      codecEvents\n    ) {\n      this.bufferCreated();\n    }\n  }\n\n  private onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) {\n    const media = (this.media = data.media);\n    this.transferData = this.overrides = undefined;\n    const MediaSource = getMediaSource(this.appendSource);\n    if (MediaSource) {\n      const transferringMedia = !!data.mediaSource;\n      if (transferringMedia || data.overrides) {\n        this.transferData = data;\n        this.overrides = data.overrides;\n      }\n      const ms = (this.mediaSource = data.mediaSource || new MediaSource());\n      this.assignMediaSource(ms);\n      if (transferringMedia) {\n        this._objectUrl = media.src;\n        this.attachTransferred();\n      } else {\n        // cache the locally generated object url\n        const objectUrl = (this._objectUrl = self.URL.createObjectURL(ms));\n        // link video and media Source\n        if (this.appendSource) {\n          try {\n            media.removeAttribute('src');\n            // ManagedMediaSource will not open without disableRemotePlayback set to false or source alternatives\n            const MMS = (self as any).ManagedMediaSource;\n            media.disableRemotePlayback =\n              media.disableRemotePlayback || (MMS && ms instanceof MMS);\n            removeSourceChildren(media);\n            addSource(media, objectUrl);\n            media.load();\n          } catch (error) {\n            media.src = objectUrl;\n          }\n        } else {\n          media.src = objectUrl;\n        }\n      }\n      media.addEventListener('emptied', this._onMediaEmptied);\n    }\n  }\n\n  private assignMediaSource(ms: MediaSource) {\n    this.log(\n      `${this.transferData?.mediaSource === ms ? 'transferred' : 'created'} media source: ${(ms.constructor as any)?.name}`,\n    );\n    // MediaSource listeners are arrow functions with a lexical scope, and do not need to be bound\n    ms.addEventListener('sourceopen', this._onMediaSourceOpen);\n    ms.addEventListener('sourceended', this._onMediaSourceEnded);\n    ms.addEventListener('sourceclose', this._onMediaSourceClose);\n    if (this.appendSource) {\n      ms.addEventListener('startstreaming', this._onStartStreaming);\n      ms.addEventListener('endstreaming', this._onEndStreaming);\n    }\n  }\n\n  private attachTransferred() {\n    const media = this.media;\n    const data = this.transferData;\n    if (!data || !media) {\n      return;\n    }\n    const requiredTracks = this.tracks;\n    const transferredTracks = data.tracks;\n    const trackNames = transferredTracks\n      ? Object.keys(transferredTracks)\n      : null;\n    const trackCount = trackNames ? trackNames.length : 0;\n    const mediaSourceOpenCallback = () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.resolve().then(() => {\n        if (this.media && this.mediaSourceOpenOrEnded) {\n          this._onMediaSourceOpen();\n        }\n      });\n    };\n    if (transferredTracks && trackNames && trackCount) {\n      if (!this.tracksReady) {\n        // Wait for CODECS event(s)\n        this.hls.config.startFragPrefetch = true;\n        this.log(`attachTransferred: waiting for SourceBuffer track info`);\n        return;\n      }\n      this\n        .log(`attachTransferred: (bufferCodecEventsTotal ${this.bufferCodecEventsTotal})\nrequired tracks: ${stringify(requiredTracks, (key, value) => (key === 'initSegment' ? undefined : value))};\ntransfer tracks: ${stringify(transferredTracks, (key, value) => (key === 'initSegment' ? undefined : value))}}`);\n      if (!isCompatibleTrackChange(transferredTracks, requiredTracks)) {\n        // destroy attaching media source\n        data.mediaSource = null;\n        data.tracks = undefined;\n\n        const currentTime = media.currentTime;\n\n        const details = this.details;\n        const startTime = Math.max(\n          currentTime,\n          details?.fragments[0].start || 0,\n        );\n        if (startTime - currentTime > 1) {\n          this.log(\n            `attachTransferred: waiting for playback to reach new tracks start time ${currentTime} -> ${startTime}`,\n          );\n          return;\n        }\n        this.warn(\n          `attachTransferred: resetting MediaSource for incompatible tracks (\"${Object.keys(transferredTracks)}\"->\"${Object.keys(requiredTracks)}\") start time: ${startTime} currentTime: ${currentTime}`,\n        );\n        this.onMediaDetaching(Events.MEDIA_DETACHING, {});\n        this.onMediaAttaching(Events.MEDIA_ATTACHING, data);\n        media.currentTime = startTime;\n        return;\n      }\n      this.transferData = undefined;\n      trackNames.forEach((trackName) => {\n        const type = trackName as SourceBufferName;\n        const track = transferredTracks[type];\n        if (track) {\n          const sb = track.buffer;\n          if (sb) {\n            // Purge fragment tracker of ejected segments for existing buffer\n            const fragmentTracker = this.fragmentTracker;\n            const playlistType = track.id as PlaylistLevelType;\n            if (\n              fragmentTracker.hasFragments(playlistType) ||\n              fragmentTracker.hasParts(playlistType)\n            ) {\n              const bufferedTimeRanges = BufferHelper.getBuffered(sb);\n              fragmentTracker.detectEvictedFragments(\n                type,\n                bufferedTimeRanges,\n                playlistType,\n                null,\n                true,\n              );\n            }\n            // Transfer SourceBuffer\n            const sbIndex = sourceBufferNameToIndex(type);\n            const sbTuple = [type, sb] as Exclude<\n              SourceBuffersTuple[typeof sbIndex],\n              EmptyTuple\n            >;\n            this.sourceBuffers[sbIndex] = sbTuple as any;\n            if (sb.updating && this.operationQueue) {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              this.operationQueue.prependBlocker(type);\n            }\n            this.trackSourceBuffer(type, track);\n          }\n        }\n      });\n      mediaSourceOpenCallback();\n      this.bufferCreated();\n    } else {\n      this.log(`attachTransferred: MediaSource w/o SourceBuffers`);\n      mediaSourceOpenCallback();\n    }\n  }\n\n  private get mediaSourceOpenOrEnded(): boolean {\n    const readyState = this.mediaSource?.readyState;\n    return readyState === 'open' || readyState === 'ended';\n  }\n\n  private _onEndStreaming = (event) => {\n    if (!this.hls as any) {\n      return;\n    }\n    if (this.mediaSource?.readyState !== 'open') {\n      return;\n    }\n    this.hls.pauseBuffering();\n  };\n\n  private _onStartStreaming = (event) => {\n    if (!this.hls as any) {\n      return;\n    }\n    this.hls.resumeBuffering();\n  };\n\n  private onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const transferringMedia = !!data.transferMedia;\n    this.transferData = this.overrides = undefined;\n    const { media, mediaSource, _objectUrl } = this;\n    if (mediaSource) {\n      this.log(\n        `media source ${transferringMedia ? 'transferring' : 'detaching'}`,\n      );\n      if (transferringMedia) {\n        // Detach SourceBuffers without removing from MediaSource\n        // and leave `tracks` (required SourceBuffers configuration)\n        this.sourceBuffers.forEach(([type]) => {\n          if (type) {\n            this.removeBuffer(type);\n          }\n        });\n        this.resetQueue();\n      } else {\n        if (this.mediaSourceOpenOrEnded) {\n          const open = mediaSource.readyState === 'open';\n          try {\n            const sourceBuffers = mediaSource.sourceBuffers;\n            for (let i = sourceBuffers.length; i--; ) {\n              if (open) {\n                sourceBuffers[i].abort();\n              }\n              mediaSource.removeSourceBuffer(sourceBuffers[i]);\n            }\n            if (open) {\n              // endOfStream could trigger exception if any sourcebuffer is in updating state\n              // we don't really care about checking sourcebuffer state here,\n              // as we are anyway detaching the MediaSource\n              // let's just avoid this exception to propagate\n              mediaSource.endOfStream();\n            }\n          } catch (err) {\n            this.warn(\n              `onMediaDetaching: ${err.message} while calling endOfStream`,\n            );\n          }\n        }\n        // Clean up the SourceBuffers by invoking onBufferReset\n        if (this.sourceBufferCount) {\n          this.onBufferReset();\n        }\n      }\n      mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);\n      mediaSource.removeEventListener('sourceended', this._onMediaSourceEnded);\n      mediaSource.removeEventListener('sourceclose', this._onMediaSourceClose);\n      if (this.appendSource) {\n        mediaSource.removeEventListener(\n          'startstreaming',\n          this._onStartStreaming,\n        );\n        mediaSource.removeEventListener('endstreaming', this._onEndStreaming);\n      }\n\n      this.mediaSource = null;\n      this._objectUrl = null;\n    }\n\n    // Detach properly the MediaSource from the HTMLMediaElement as\n    // suggested in https://github.com/w3c/media-source/issues/53.\n    if (media) {\n      media.removeEventListener('emptied', this._onMediaEmptied);\n      if (!transferringMedia) {\n        if (_objectUrl) {\n          self.URL.revokeObjectURL(_objectUrl);\n        }\n\n        // clean up video tag src only if it's our own url. some external libraries might\n        // hijack the video tag and change its 'src' without destroying the Hls instance first\n        if (this.mediaSrc === _objectUrl) {\n          media.removeAttribute('src');\n          if (this.appendSource) {\n            removeSourceChildren(media);\n          }\n          media.load();\n        } else {\n          this.warn(\n            'media|source.src was changed by a third party - skip cleanup',\n          );\n        }\n      }\n      this.media = null;\n    }\n\n    this.hls.trigger(Events.MEDIA_DETACHED, data);\n  }\n\n  private onBufferReset() {\n    this.sourceBuffers.forEach(([type]) => {\n      if (type) {\n        this.resetBuffer(type);\n      }\n    });\n    this.initTracks();\n  }\n\n  private resetBuffer(type: SourceBufferName) {\n    const sb = this.tracks[type]?.buffer;\n    this.removeBuffer(type);\n    if (sb) {\n      try {\n        if (this.mediaSource?.sourceBuffers.length) {\n          this.mediaSource.removeSourceBuffer(sb);\n        }\n      } catch (err) {\n        this.warn(`onBufferReset ${type}`, err);\n      }\n    }\n    delete this.tracks[type];\n  }\n\n  private removeBuffer(type: SourceBufferName) {\n    this.removeBufferListeners(type);\n    this.sourceBuffers[sourceBufferNameToIndex(type)] = [null, null];\n    const track = this.tracks[type];\n    if (track) {\n      track.buffer = undefined;\n    }\n  }\n\n  private resetQueue() {\n    if (this.operationQueue) {\n      this.operationQueue.destroy();\n    }\n    this.operationQueue = new BufferOperationQueue(this.tracks);\n  }\n\n  private onBufferCodecs(event: Events.BUFFER_CODECS, data: BufferCodecsData) {\n    const tracks = this.tracks;\n    const trackNames = Object.keys(data);\n    this.log(\n      `BUFFER_CODECS: \"${trackNames}\" (current SB count ${this.sourceBufferCount})`,\n    );\n    const unmuxedToMuxed =\n      ('audiovideo' in data && (tracks.audio || tracks.video)) ||\n      (tracks.audiovideo && ('audio' in data || 'video' in data));\n    const muxedToUnmuxed =\n      !unmuxedToMuxed &&\n      this.sourceBufferCount &&\n      this.media &&\n      trackNames.some((sbName) => !tracks[sbName]);\n    if (unmuxedToMuxed || muxedToUnmuxed) {\n      this.warn(\n        `Unsupported transition between \"${Object.keys(tracks)}\" and \"${trackNames}\" SourceBuffers`,\n      );\n      // Do not add incompatible track ('audiovideo' <-> 'video'/'audio').\n      // Allow following onBufferAppending handle to trigger BUFFER_APPEND_ERROR.\n      // This will either be resolved by level switch or could be handled with recoverMediaError().\n      return;\n    }\n    trackNames.forEach((trackName: SourceBufferName) => {\n      const parsedTrack = data[trackName] as ParsedTrack;\n      const { id, codec, levelCodec, container, metadata, supplemental } =\n        parsedTrack;\n      let track = tracks[trackName];\n      const transferredTrack = this.transferData?.tracks?.[trackName];\n      const sbTrack = transferredTrack?.buffer ? transferredTrack : track;\n      const sbCodec = sbTrack?.pendingCodec || sbTrack?.codec;\n      const trackLevelCodec = sbTrack?.levelCodec;\n      if (!track) {\n        track = tracks[trackName] = {\n          buffer: undefined,\n          listeners: [],\n          codec,\n          supplemental,\n          container,\n          levelCodec,\n          metadata,\n          id,\n        };\n      }\n      // check if SourceBuffer codec needs to change\n      const currentCodecFull = pickMostCompleteCodecName(\n        sbCodec,\n        trackLevelCodec,\n      );\n      const currentCodec = currentCodecFull?.replace(\n        VIDEO_CODEC_PROFILE_REPLACE,\n        '$1',\n      );\n      let trackCodec = pickMostCompleteCodecName(codec, levelCodec);\n      const nextCodec = trackCodec?.replace(VIDEO_CODEC_PROFILE_REPLACE, '$1');\n      if (trackCodec && currentCodecFull && currentCodec !== nextCodec) {\n        if (trackName.slice(0, 5) === 'audio') {\n          trackCodec = getCodecCompatibleName(trackCodec, this.appendSource);\n        }\n        this.log(`switching codec ${sbCodec} to ${trackCodec}`);\n        if (trackCodec !== (track.pendingCodec || track.codec)) {\n          track.pendingCodec = trackCodec;\n        }\n        track.container = container;\n        this.appendChangeType(trackName, container, trackCodec);\n      }\n    });\n\n    if (this.tracksReady || this.sourceBufferCount) {\n      data.tracks = this.sourceBufferTracks;\n    }\n\n    // if sourcebuffers already created, do nothing ...\n    if (this.sourceBufferCount) {\n      return;\n    }\n\n    if (\n      this.bufferCodecEventsTotal > 1 &&\n      !this.tracks.video &&\n      !data.video &&\n      data.audio?.id === 'main'\n    ) {\n      // MVP is missing CODECS and only audio was found in main segment (#7524)\n      this.log(`Main audio-only`);\n      this.bufferCodecEventsTotal = 1;\n    }\n\n    if (this.mediaSourceOpenOrEnded) {\n      this.checkPendingTracks();\n    }\n  }\n\n  public get sourceBufferTracks(): BaseTrackSet {\n    return Object.keys(this.tracks).reduce((baseTracks: BaseTrackSet, type) => {\n      const track = this.tracks[type] as SourceBufferTrack;\n      baseTracks[type] = {\n        id: track.id,\n        container: track.container,\n        codec: track.codec,\n        levelCodec: track.levelCodec,\n      };\n      return baseTracks;\n    }, {});\n  }\n\n  private appendChangeType(\n    type: SourceBufferName,\n    container: string,\n    codec: string,\n  ) {\n    const mimeType = `${container};codecs=${codec}`;\n    const operation: BufferOperation = {\n      label: `change-type=${mimeType}`,\n      execute: () => {\n        const track = this.tracks[type];\n        if (track) {\n          const sb = track.buffer;\n          if (sb?.changeType) {\n            this.log(`changing ${type} sourceBuffer type to ${mimeType}`);\n            sb.changeType(mimeType);\n            track.codec = codec;\n            track.container = container;\n          }\n        }\n        this.shiftAndExecuteNext(type);\n      },\n      onStart: () => {},\n      onComplete: () => {},\n      onError: (error: Error) => {\n        this.warn(`Failed to change ${type} SourceBuffer type`, error);\n      },\n    };\n    this.append(operation, type, this.isPending(this.tracks[type]));\n  }\n\n  private blockAudio(partOrFrag: MediaFragment | Part) {\n    const pStart = partOrFrag.start;\n    const pTime = pStart + partOrFrag.duration * 0.05;\n    const atGap =\n      this.fragmentTracker.getAppendedFrag(pStart, PlaylistLevelType.MAIN)\n        ?.gap === true;\n    if (atGap) {\n      return;\n    }\n    const op: BufferOperation = {\n      label: 'block-audio',\n      execute: () => {\n        const videoTrack = this.tracks.video;\n        if (\n          this.lastVideoAppendEnd > pTime ||\n          (videoTrack?.buffer &&\n            BufferHelper.isBuffered(videoTrack.buffer, pTime)) ||\n          this.fragmentTracker.getAppendedFrag(pTime, PlaylistLevelType.MAIN)\n            ?.gap === true\n        ) {\n          this.blockedAudioAppend = null;\n          this.shiftAndExecuteNext('audio');\n        }\n      },\n      onStart: () => {},\n      onComplete: () => {},\n      onError: (error) => {\n        this.warn('Error executing block-audio operation', error);\n      },\n    };\n    this.blockedAudioAppend = { op, frag: partOrFrag };\n    this.append(op, 'audio', true);\n  }\n\n  private unblockAudio() {\n    const { blockedAudioAppend, operationQueue } = this;\n    if (blockedAudioAppend && operationQueue) {\n      this.blockedAudioAppend = null;\n      operationQueue.unblockAudio(blockedAudioAppend.op);\n    }\n  }\n\n  private onBufferAppending(\n    event: Events.BUFFER_APPENDING,\n    eventData: BufferAppendingData,\n  ) {\n    const { tracks } = this;\n    const { data, type, parent, frag, part, chunkMeta, offset } = eventData;\n    const chunkStats = chunkMeta.buffering[type];\n    const { sn, cc } = frag;\n    const bufferAppendingStart = self.performance.now();\n    chunkStats.start = bufferAppendingStart;\n    const fragBuffering = frag.stats.buffering;\n    const partBuffering = part ? part.stats.buffering : null;\n    if (fragBuffering.start === 0) {\n      fragBuffering.start = bufferAppendingStart;\n    }\n    if (partBuffering && partBuffering.start === 0) {\n      partBuffering.start = bufferAppendingStart;\n    }\n\n    // TODO: Only update timestampOffset when audio/mpeg fragment or part is not contiguous with previously appended\n    // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos).\n    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n    const audioTrack = tracks.audio;\n    let checkTimestampOffset = false;\n    if (type === 'audio' && audioTrack?.container === 'audio/mpeg') {\n      checkTimestampOffset =\n        !this.lastMpegAudioChunk ||\n        chunkMeta.id === 1 ||\n        this.lastMpegAudioChunk.sn !== chunkMeta.sn;\n      this.lastMpegAudioChunk = chunkMeta;\n    }\n\n    // Block audio append until overlapping video append\n    const videoTrack = tracks.video;\n    const videoSb = videoTrack?.buffer;\n    if (videoSb && sn !== 'initSegment') {\n      const partOrFrag = part || (frag as MediaFragment);\n      const blockedAudioAppend = this.blockedAudioAppend;\n      if (\n        type === 'audio' &&\n        parent !== 'main' &&\n        !this.blockedAudioAppend &&\n        !(videoTrack.ending || videoTrack.ended)\n      ) {\n        const pStart = partOrFrag.start;\n        const pTime = pStart + partOrFrag.duration * 0.05;\n        const vbuffered = videoSb.buffered;\n        const vappending = this.currentOp('video');\n        if (!vbuffered.length && !vappending) {\n          // wait for video before appending audio\n          this.blockAudio(partOrFrag);\n        } else if (\n          !vappending &&\n          !BufferHelper.isBuffered(videoSb, pTime) &&\n          this.lastVideoAppendEnd < pTime\n        ) {\n          // audio is ahead of video\n          this.blockAudio(partOrFrag);\n        }\n      } else if (type === 'video') {\n        const videoAppendEnd = partOrFrag.end;\n        if (blockedAudioAppend) {\n          const audioStart = blockedAudioAppend.frag.start;\n          if (\n            videoAppendEnd > audioStart ||\n            videoAppendEnd < this.lastVideoAppendEnd ||\n            BufferHelper.isBuffered(videoSb, audioStart)\n          ) {\n            this.unblockAudio();\n          }\n        }\n        this.lastVideoAppendEnd = videoAppendEnd;\n      }\n    }\n\n    const fragStart = (part || frag).start;\n    const operation: BufferOperation = {\n      label: `append-${type}`,\n      execute: () => {\n        chunkStats.executeStart = self.performance.now();\n\n        const sb = this.tracks[type]?.buffer;\n        if (sb) {\n          if (checkTimestampOffset) {\n            this.updateTimestampOffset(sb, fragStart, 0.1, type, sn, cc);\n          } else if (offset !== undefined && Number.isFinite(offset)) {\n            this.updateTimestampOffset(sb, offset, 0.000001, type, sn, cc);\n          }\n        }\n        this.appendExecutor(data, type);\n      },\n      onStart: () => {\n        // logger.debug(`[buffer-controller]: ${type} SourceBuffer updatestart`);\n      },\n      onComplete: () => {\n        // logger.debug(`[buffer-controller]: ${type} SourceBuffer updateend`);\n        const end = self.performance.now();\n        chunkStats.executeEnd = chunkStats.end = end;\n        if (fragBuffering.first === 0) {\n          fragBuffering.first = end;\n        }\n        if (partBuffering && partBuffering.first === 0) {\n          partBuffering.first = end;\n        }\n\n        const timeRanges = {};\n        this.sourceBuffers.forEach(([type, sb]) => {\n          if (type) {\n            timeRanges[type] = BufferHelper.getBuffered(sb);\n          }\n        });\n        this.appendErrors[type] = 0;\n        if (type === 'audio' || type === 'video') {\n          this.appendErrors.audiovideo = 0;\n        } else {\n          this.appendErrors.audio = 0;\n          this.appendErrors.video = 0;\n        }\n        this.hls.trigger(Events.BUFFER_APPENDED, {\n          type,\n          frag,\n          part,\n          chunkMeta,\n          parent: frag.type,\n          timeRanges,\n        });\n      },\n      onError: (error: Error) => {\n        // in case any error occured while appending, put back segment in segments table\n        const event: ErrorData = {\n          type: ErrorTypes.MEDIA_ERROR,\n          parent: frag.type,\n          details: ErrorDetails.BUFFER_APPEND_ERROR,\n          sourceBufferName: type,\n          frag,\n          part,\n          chunkMeta,\n          error,\n          err: error,\n          fatal: false,\n        };\n        const mediaError = this.media?.error;\n        if (\n          (error as DOMException).code === DOMException.QUOTA_EXCEEDED_ERR ||\n          error.name == 'QuotaExceededError' ||\n          `quota` in error\n        ) {\n          // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n          // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n          event.details = ErrorDetails.BUFFER_FULL_ERROR;\n        } else if (\n          (error as DOMException).code === DOMException.INVALID_STATE_ERR &&\n          this.mediaSourceOpenOrEnded &&\n          !mediaError\n        ) {\n          // Allow retry for \"Failed to execute 'appendBuffer' on 'SourceBuffer': This SourceBuffer is still processing\" errors\n          event.errorAction = createDoNothingErrorAction(true);\n        } else if (\n          error.name === TRACK_REMOVED_ERROR_NAME &&\n          this.sourceBufferCount === 0\n        ) {\n          // Do nothing if sourceBuffers were removed (media is detached and append was not aborted)\n          event.errorAction = createDoNothingErrorAction(true);\n        } else {\n          const appendErrorCount = ++this.appendErrors[type];\n          /* with UHD content, we could get loop of quota exceeded error until\n            browser is able to evict some data from sourcebuffer. Retrying can help recover.\n          */\n          this.warn(\n            `Failed ${appendErrorCount}/${this.hls.config.appendErrorMaxRetry} times to append segment in \"${type}\" sourceBuffer (${mediaError ? mediaError : 'no media error'})`,\n          );\n          if (\n            appendErrorCount >= this.hls.config.appendErrorMaxRetry ||\n            !!mediaError\n          ) {\n            event.fatal = true;\n          }\n        }\n        this.hls.trigger(Events.ERROR, event);\n      },\n    };\n    this.log(\n      `queuing \"${type}\" append sn: ${sn}${part ? ' p: ' + part.index : ''} of ${frag.type === PlaylistLevelType.MAIN ? 'level' : 'track'} ${frag.level} cc: ${cc}`,\n    );\n    this.append(operation, type, this.isPending(this.tracks[type]));\n  }\n\n  private getFlushOp(\n    type: SourceBufferName,\n    start: number,\n    end: number,\n  ): BufferOperation {\n    this.log(`queuing \"${type}\" remove ${start}-${end}`);\n    return {\n      label: 'remove',\n      execute: () => {\n        this.removeExecutor(type, start, end);\n      },\n      onStart: () => {\n        // logger.debug(`[buffer-controller]: Started flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n      },\n      onComplete: () => {\n        // logger.debug(`[buffer-controller]: Finished flushing ${data.startOffset} -> ${data.endOffset} for ${type} Source Buffer`);\n        this.hls.trigger(Events.BUFFER_FLUSHED, { type });\n      },\n      onError: (error: Error) => {\n        this.warn(\n          `Failed to remove ${start}-${end} from \"${type}\" SourceBuffer`,\n          error,\n        );\n      },\n    };\n  }\n\n  private onBufferFlushing(\n    event: Events.BUFFER_FLUSHING,\n    data: BufferFlushingData,\n  ) {\n    const { type, startOffset, endOffset } = data;\n    if (type) {\n      this.append(this.getFlushOp(type, startOffset, endOffset), type);\n    } else {\n      this.sourceBuffers.forEach(([type]) => {\n        if (type) {\n          this.append(this.getFlushOp(type, startOffset, endOffset), type);\n        }\n      });\n    }\n  }\n\n  private onFragParsed(event: Events.FRAG_PARSED, data: FragParsedData) {\n    const { frag, part } = data;\n    const buffersAppendedTo: SourceBufferName[] = [];\n    const elementaryStreams = part\n      ? part.elementaryStreams\n      : frag.elementaryStreams;\n    if (elementaryStreams[ElementaryStreamTypes.AUDIOVIDEO]) {\n      buffersAppendedTo.push('audiovideo');\n    } else {\n      if (elementaryStreams[ElementaryStreamTypes.AUDIO]) {\n        buffersAppendedTo.push('audio');\n      }\n      if (elementaryStreams[ElementaryStreamTypes.VIDEO]) {\n        buffersAppendedTo.push('video');\n      }\n    }\n\n    const onUnblocked = () => {\n      const now = self.performance.now();\n      frag.stats.buffering.end = now;\n      if (part) {\n        part.stats.buffering.end = now;\n      }\n      const stats = part ? part.stats : frag.stats;\n      this.hls.trigger(Events.FRAG_BUFFERED, {\n        frag,\n        part,\n        stats,\n        id: frag.type,\n      });\n    };\n\n    if (buffersAppendedTo.length === 0) {\n      this.warn(\n        `Fragments must have at least one ElementaryStreamType set. type: ${frag.type} level: ${frag.level} sn: ${frag.sn}`,\n      );\n    }\n\n    this.blockBuffers(onUnblocked, buffersAppendedTo).catch((error) => {\n      this.warn(`Fragment buffered callback ${error}`);\n      this.stepOperationQueue(this.sourceBufferTypes);\n    });\n  }\n\n  private onFragChanged(event: Events.FRAG_CHANGED, data: FragChangedData) {\n    this.trimBuffers();\n  }\n\n  public get bufferedToEnd(): boolean {\n    return (\n      this.sourceBufferCount > 0 &&\n      !this.sourceBuffers.some(([type]) => {\n        if (type) {\n          const track = this.tracks[type];\n          if (track) {\n            return !track.ended || track.ending;\n          }\n        }\n        return false;\n      })\n    );\n  }\n\n  // on BUFFER_EOS mark matching sourcebuffer(s) as \"ending\" and \"ended\" and queue endOfStream after remaining operations(s)\n  // an undefined data.type will mark all buffers as EOS.\n  private onBufferEos(event: Events.BUFFER_EOS, data: BufferEOSData) {\n    this.sourceBuffers.forEach(([type]) => {\n      if (type) {\n        const track = this.tracks[type] as SourceBufferTrack;\n        if (!data.type || data.type === type) {\n          track.ending = true;\n          if (!track.ended) {\n            track.ended = true;\n            this.log(`${type} buffer reached EOS`);\n          }\n        }\n      }\n    });\n\n    const allowEndOfStream = this.overrides?.endOfStream !== false;\n    const allTracksEnding =\n      this.sourceBufferCount > 0 &&\n      !this.sourceBuffers.some(([type]) => type && !this.tracks[type]?.ended);\n\n    if (allTracksEnding) {\n      if (allowEndOfStream) {\n        this.log(`Queueing EOS`);\n        this.blockUntilOpen(() => {\n          this.tracksEnded();\n          const { mediaSource } = this;\n          if (!mediaSource || mediaSource.readyState !== 'open') {\n            if (mediaSource) {\n              this.log(\n                `Could not call mediaSource.endOfStream(). mediaSource.readyState: ${mediaSource.readyState}`,\n              );\n            }\n            return;\n          }\n          this.log(`Calling mediaSource.endOfStream()`);\n          // Allow this to throw and be caught by the enqueueing function\n          mediaSource.endOfStream();\n\n          this.hls.trigger(Events.BUFFERED_TO_END, undefined);\n        });\n      } else {\n        this.tracksEnded();\n        this.hls.trigger(Events.BUFFERED_TO_END, undefined);\n      }\n    } else if (data.type === 'video') {\n      // Make sure pending audio appends are unblocked when video reaches end\n      this.unblockAudio();\n    }\n  }\n\n  private tracksEnded() {\n    this.sourceBuffers.forEach(([type]) => {\n      if (type !== null) {\n        const track = this.tracks[type];\n        if (track) {\n          track.ending = false;\n        }\n      }\n    });\n  }\n\n  private onLevelUpdated(\n    event: Events.LEVEL_UPDATED,\n    { details }: LevelUpdatedData,\n  ) {\n    if (!details.fragments.length) {\n      return;\n    }\n    this.details = details;\n    this.updateDuration();\n  }\n\n  private updateDuration() {\n    this.blockUntilOpen(() => {\n      const durationAndRange = this.getDurationAndRange();\n      if (!durationAndRange) {\n        return;\n      }\n      this.updateMediaSource(durationAndRange);\n    });\n  }\n\n  private onError(event: Events.ERROR, data: ErrorData) {\n    if (data.details === ErrorDetails.BUFFER_APPEND_ERROR && data.frag) {\n      const nextAutoLevel = data.errorAction?.nextAutoLevel;\n      if (Number.isFinite(nextAutoLevel) && nextAutoLevel !== data.frag.level) {\n        this.resetAppendErrors();\n      }\n    }\n  }\n\n  private resetAppendErrors() {\n    this.appendErrors = {\n      audio: 0,\n      video: 0,\n      audiovideo: 0,\n    };\n  }\n\n  private trimBuffers() {\n    const { hls, details, media } = this;\n    if (!media || details === null) {\n      return;\n    }\n\n    if (!this.sourceBufferCount) {\n      return;\n    }\n\n    const config: Readonly<HlsConfig> = hls.config;\n    const currentTime = media.currentTime;\n    const targetDuration = details.levelTargetDuration;\n\n    // Support for deprecated liveBackBufferLength\n    const backBufferLength =\n      details.live && config.liveBackBufferLength !== null\n        ? config.liveBackBufferLength\n        : config.backBufferLength;\n\n    if (Number.isFinite(backBufferLength) && backBufferLength >= 0) {\n      const maxBackBufferLength = Math.max(backBufferLength, targetDuration);\n      const targetBackBufferPosition =\n        Math.floor(currentTime / targetDuration) * targetDuration -\n        maxBackBufferLength;\n\n      this.flushBackBuffer(\n        currentTime,\n        targetDuration,\n        targetBackBufferPosition,\n      );\n    }\n\n    const frontBufferFlushThreshold = config.frontBufferFlushThreshold;\n    if (\n      Number.isFinite(frontBufferFlushThreshold) &&\n      frontBufferFlushThreshold > 0\n    ) {\n      const frontBufferLength = Math.max(\n        config.maxBufferLength,\n        frontBufferFlushThreshold,\n      );\n\n      const maxFrontBufferLength = Math.max(frontBufferLength, targetDuration);\n      const targetFrontBufferPosition =\n        Math.floor(currentTime / targetDuration) * targetDuration +\n        maxFrontBufferLength;\n\n      this.flushFrontBuffer(\n        currentTime,\n        targetDuration,\n        targetFrontBufferPosition,\n      );\n    }\n  }\n\n  private flushBackBuffer(\n    currentTime: number,\n    targetDuration: number,\n    targetBackBufferPosition: number,\n  ) {\n    this.sourceBuffers.forEach(([type, sb]) => {\n      if (sb) {\n        const buffered = BufferHelper.getBuffered(sb);\n        // when target buffer start exceeds actual buffer start\n        if (\n          buffered.length > 0 &&\n          targetBackBufferPosition > buffered.start(0)\n        ) {\n          this.hls.trigger(Events.BACK_BUFFER_REACHED, {\n            bufferEnd: targetBackBufferPosition,\n          });\n\n          // Support for deprecated event:\n          const track = this.tracks[type];\n          if (this.details?.live) {\n            this.hls.trigger(Events.LIVE_BACK_BUFFER_REACHED, {\n              bufferEnd: targetBackBufferPosition,\n            });\n          } else if (track?.ended) {\n            this.log(\n              `Cannot flush ${type} back buffer while SourceBuffer is in ended state`,\n            );\n            return;\n          }\n\n          this.hls.trigger(Events.BUFFER_FLUSHING, {\n            startOffset: 0,\n            endOffset: targetBackBufferPosition,\n            type,\n          });\n        }\n      }\n    });\n  }\n\n  private flushFrontBuffer(\n    currentTime: number,\n    targetDuration: number,\n    targetFrontBufferPosition: number,\n  ) {\n    this.sourceBuffers.forEach(([type, sb]) => {\n      if (sb) {\n        const buffered = BufferHelper.getBuffered(sb);\n        const numBufferedRanges = buffered.length;\n        // The buffer is either empty or contiguous\n        if (numBufferedRanges < 2) {\n          return;\n        }\n        const bufferStart = buffered.start(numBufferedRanges - 1);\n        const bufferEnd = buffered.end(numBufferedRanges - 1);\n        // No flush if we can tolerate the current buffer length or the current buffer range we would flush is contiguous with current position\n        if (\n          targetFrontBufferPosition > bufferStart ||\n          (currentTime >= bufferStart && currentTime <= bufferEnd)\n        ) {\n          return;\n        }\n\n        this.hls.trigger(Events.BUFFER_FLUSHING, {\n          startOffset: bufferStart,\n          endOffset: Infinity,\n          type,\n        });\n      }\n    });\n  }\n\n  /**\n   * Update Media Source duration to current level duration or override to Infinity if configuration parameter\n   * 'liveDurationInfinity` is set to `true`\n   * More details: https://github.com/video-dev/hls.js/issues/355\n   */\n  private getDurationAndRange(): {\n    duration: number;\n    start?: number;\n    end?: number;\n  } | null {\n    const { details, mediaSource } = this;\n    if (!details || !this.media || mediaSource?.readyState !== 'open') {\n      return null;\n    }\n    const playlistEnd = details.edge;\n    if (details.live && this.hls.config.liveDurationInfinity) {\n      const len = details.fragments.length;\n      if (len && !!(mediaSource as any).setLiveSeekableRange) {\n        const start = Math.max(0, details.fragmentStart);\n        const end = Math.max(start, playlistEnd);\n\n        return { duration: Infinity, start, end };\n      }\n      return { duration: Infinity };\n    }\n    const overrideDuration = this.overrides?.duration;\n    if (overrideDuration) {\n      if (!Number.isFinite(overrideDuration)) {\n        return null;\n      }\n      return { duration: overrideDuration };\n    }\n    const mediaDuration = this.media.duration;\n    const msDuration = Number.isFinite(mediaSource.duration)\n      ? mediaSource.duration\n      : 0;\n    if (\n      (playlistEnd > msDuration && playlistEnd > mediaDuration) ||\n      !Number.isFinite(mediaDuration)\n    ) {\n      return { duration: playlistEnd };\n    }\n    return null;\n  }\n\n  private updateMediaSource({\n    duration,\n    start,\n    end,\n  }: {\n    duration: number;\n    start?: number;\n    end?: number;\n  }) {\n    const mediaSource = this.mediaSource;\n    if (!this.media || !mediaSource || mediaSource.readyState !== 'open') {\n      return;\n    }\n    if (mediaSource.duration !== duration) {\n      if (Number.isFinite(duration)) {\n        this.log(`Updating MediaSource duration to ${duration.toFixed(3)}`);\n      }\n      mediaSource.duration = duration;\n    }\n    if (start !== undefined && end !== undefined) {\n      this.log(\n        `MediaSource duration is set to ${mediaSource.duration}. Setting seekable range to ${start}-${end}.`,\n      );\n      mediaSource.setLiveSeekableRange(start, end);\n    }\n  }\n\n  private get tracksReady(): boolean {\n    const pendingTrackCount = this.pendingTrackCount;\n    return (\n      pendingTrackCount > 0 &&\n      (pendingTrackCount >= this.bufferCodecEventsTotal ||\n        this.isPending(this.tracks.audiovideo))\n    );\n  }\n\n  private checkPendingTracks() {\n    const { bufferCodecEventsTotal, pendingTrackCount, tracks } = this;\n    this.log(\n      `checkPendingTracks (pending: ${pendingTrackCount} codec events expected: ${bufferCodecEventsTotal}) ${stringify(tracks)}`,\n    );\n    // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.\n    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after\n    // data has been appended to existing ones.\n    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.\n    if (this.tracksReady) {\n      const transferredTracks = this.transferData?.tracks;\n      if (transferredTracks && Object.keys(transferredTracks).length) {\n        this.attachTransferred();\n      } else {\n        // ok, let's create them now !\n        this.createSourceBuffers();\n      }\n    }\n  }\n\n  private bufferCreated() {\n    if (this.sourceBufferCount) {\n      const tracks: BufferCreatedTrackSet = {};\n      this.sourceBuffers.forEach(([type, buffer]) => {\n        if (type) {\n          const track = this.tracks[type] as SourceBufferTrack;\n          tracks[type] = {\n            buffer,\n            container: track.container,\n            codec: track.codec,\n            supplemental: track.supplemental,\n            levelCodec: track.levelCodec,\n            id: track.id,\n            metadata: track.metadata,\n          };\n        }\n      });\n      this.hls.trigger(Events.BUFFER_CREATED, {\n        tracks,\n      });\n      this.log(`SourceBuffers created. Running queue: ${this.operationQueue}`);\n      this.sourceBuffers.forEach(([type]) => {\n        this.executeNext(type);\n      });\n    } else {\n      const error = new Error(\n        'could not create source buffer for media codec(s)',\n      );\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_INCOMPATIBLE_CODECS_ERROR,\n        fatal: true,\n        error,\n        reason: error.message,\n      });\n    }\n  }\n\n  private createSourceBuffers() {\n    const { tracks, sourceBuffers, mediaSource } = this;\n    if (!mediaSource) {\n      throw new Error('createSourceBuffers called when mediaSource was null');\n    }\n\n    for (const trackName in tracks) {\n      const type = trackName as SourceBufferName;\n      const track = tracks[type];\n      if (this.isPending(track)) {\n        const codec = this.getTrackCodec(track, type);\n        const mimeType = `${track.container};codecs=${codec}`;\n        track.codec = codec;\n        this.log(\n          `creating sourceBuffer(${mimeType})${this.currentOp(type) ? ' Queued' : ''} ${stringify(track)}`,\n        );\n        try {\n          const sb = mediaSource.addSourceBuffer(\n            mimeType,\n          ) as ExtendedSourceBuffer;\n          const sbIndex = sourceBufferNameToIndex(type);\n          const sbTuple = [type, sb] as Exclude<\n            SourceBuffersTuple[typeof sbIndex],\n            EmptyTuple\n          >;\n          sourceBuffers[sbIndex] = sbTuple as any;\n          track.buffer = sb;\n        } catch (error) {\n          this.error(\n            `error while trying to add sourceBuffer: ${error.message}`,\n          );\n          // remove init segment from queue and delete track info\n          this.shiftAndExecuteNext(type);\n          this.operationQueue?.removeBlockers();\n          delete this.tracks[type];\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.BUFFER_ADD_CODEC_ERROR,\n            fatal: false,\n            error,\n            sourceBufferName: type,\n            mimeType: mimeType,\n            parent: track.id as PlaylistLevelType,\n          });\n          return;\n        }\n        this.trackSourceBuffer(type, track);\n      }\n    }\n    this.bufferCreated();\n  }\n\n  private getTrackCodec(track: BaseTrack, trackName: SourceBufferName): string {\n    // Use supplemental video codec when supported when adding SourceBuffer (#5558)\n    const supplementalCodec = track.supplemental;\n    let trackCodec = track.codec;\n    if (\n      supplementalCodec &&\n      (trackName === 'video' || trackName === 'audiovideo') &&\n      areCodecsMediaSourceSupported(supplementalCodec, 'video')\n    ) {\n      trackCodec = replaceVideoCodec(trackCodec, supplementalCodec);\n    }\n    const codec = pickMostCompleteCodecName(trackCodec, track.levelCodec);\n    if (codec) {\n      if (trackName.slice(0, 5) === 'audio') {\n        return getCodecCompatibleName(codec, this.appendSource);\n      }\n      return codec;\n    }\n    return '';\n  }\n\n  private trackSourceBuffer(type: SourceBufferName, track: SourceBufferTrack) {\n    const buffer = track.buffer;\n    if (!buffer) {\n      return;\n    }\n    const codec = this.getTrackCodec(track, type);\n    this.tracks[type] = {\n      buffer,\n      codec,\n      container: track.container,\n      levelCodec: track.levelCodec,\n      supplemental: track.supplemental,\n      metadata: track.metadata,\n      id: track.id,\n      listeners: [],\n    };\n    this.removeBufferListeners(type);\n    this.addBufferListener(type, 'updatestart', this.onSBUpdateStart);\n    this.addBufferListener(type, 'updateend', this.onSBUpdateEnd);\n    this.addBufferListener(type, 'error', this.onSBUpdateError);\n    // ManagedSourceBuffer bufferedchange event\n    if (this.appendSource) {\n      this.addBufferListener(\n        type,\n        'bufferedchange',\n        (type: SourceBufferName, event: BufferedChangeEvent) => {\n          // If media was ejected check for a change. Added ranges are redundant with changes on 'updateend' event.\n          const removedRanges = event.removedRanges;\n          if (removedRanges?.length) {\n            this.hls.trigger(Events.BUFFER_FLUSHED, {\n              type: type,\n            });\n          }\n        },\n      );\n    }\n  }\n\n  // Keep as arrow functions so that we can directly reference these functions directly as event listeners\n  private _onMediaSourceOpen = (e?: Event) => {\n    const { media, mediaSource } = this;\n    if (e) {\n      this.log('Media source opened');\n    }\n    if (!media || !mediaSource) {\n      return;\n    }\n    // once received, don't listen anymore to sourceopen event\n    mediaSource.removeEventListener('sourceopen', this._onMediaSourceOpen);\n    media.removeEventListener('emptied', this._onMediaEmptied);\n    this.updateDuration();\n    this.hls.trigger(Events.MEDIA_ATTACHED, {\n      media,\n      mediaSource: mediaSource as MediaSource,\n    });\n\n    if (this.mediaSource !== null) {\n      this.checkPendingTracks();\n    }\n  };\n\n  private _onMediaSourceClose = () => {\n    this.log('Media source closed');\n  };\n\n  private _onMediaSourceEnded = () => {\n    this.log('Media source ended');\n  };\n\n  private _onMediaEmptied = () => {\n    const { mediaSrc, _objectUrl } = this;\n    if (mediaSrc !== _objectUrl) {\n      this.error(\n        `Media element src was set while attaching MediaSource (${_objectUrl} > ${mediaSrc})`,\n      );\n    }\n  };\n\n  private get mediaSrc(): string | undefined {\n    const media = (this.media?.querySelector as any)?.('source') || this.media;\n    return media?.src;\n  }\n\n  private onSBUpdateStart(type: SourceBufferName) {\n    const operation = this.currentOp(type);\n    if (!operation) {\n      return;\n    }\n    operation.onStart();\n  }\n\n  private onSBUpdateEnd(type: SourceBufferName) {\n    if (this.mediaSource?.readyState === 'closed') {\n      this.resetBuffer(type);\n      return;\n    }\n    const operation = this.currentOp(type);\n    if (!operation) {\n      return;\n    }\n    operation.onComplete();\n    this.shiftAndExecuteNext(type);\n  }\n\n  private onSBUpdateError(type: SourceBufferName, event: Event) {\n    const error = new Error(\n      `${type} SourceBuffer error. MediaSource readyState: ${this.mediaSource?.readyState}`,\n    );\n    this.error(`${error}`, event);\n    // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n    // SourceBuffer errors are not necessarily fatal; if so, the HTMLMediaElement will fire an error event\n    this.hls.trigger(Events.ERROR, {\n      type: ErrorTypes.MEDIA_ERROR,\n      details: ErrorDetails.BUFFER_APPENDING_ERROR,\n      sourceBufferName: type,\n      error,\n      fatal: false,\n    });\n    // updateend is always fired after error, so we'll allow that to shift the current operation off of the queue\n    const operation = this.currentOp(type);\n    if (operation) {\n      operation.onError(error);\n    }\n  }\n\n  private updateTimestampOffset(\n    sb: ExtendedSourceBuffer,\n    timestampOffset: number,\n    tolerance: number,\n    type: SourceBufferName,\n    sn: number | 'initSegment',\n    cc: number,\n  ) {\n    const delta = timestampOffset - sb.timestampOffset;\n    if (Math.abs(delta) >= tolerance) {\n      this.log(\n        `Updating ${type} SourceBuffer timestampOffset to ${timestampOffset} (sn: ${sn} cc: ${cc})`,\n      );\n      sb.timestampOffset = timestampOffset;\n    }\n  }\n\n  // This method must result in an updateend event; if remove is not called, onSBUpdateEnd must be called manually\n  private removeExecutor(\n    type: SourceBufferName,\n    startOffset: number,\n    endOffset: number,\n  ) {\n    const { media, mediaSource } = this;\n    const track = this.tracks[type];\n    const sb = track?.buffer;\n    if (!media || !mediaSource || !sb) {\n      this.warn(\n        `Attempting to remove from the ${type} SourceBuffer, but it does not exist`,\n      );\n      this.shiftAndExecuteNext(type);\n      return;\n    }\n    const mediaDuration = Number.isFinite(media.duration)\n      ? media.duration\n      : Infinity;\n    const msDuration = Number.isFinite(mediaSource.duration)\n      ? mediaSource.duration\n      : Infinity;\n    const removeStart = Math.max(0, startOffset);\n    const removeEnd = Math.min(endOffset, mediaDuration, msDuration);\n    if (removeEnd > removeStart && (!track.ending || track.ended)) {\n      track.ended = false;\n      this.log(\n        `Removing [${removeStart},${removeEnd}] from the ${type} SourceBuffer`,\n      );\n      sb.remove(removeStart, removeEnd);\n    } else {\n      // Cycle the queue\n      this.shiftAndExecuteNext(type);\n    }\n  }\n\n  // This method must result in an updateend event; if append is not called, onSBUpdateEnd must be called manually\n  private appendExecutor(\n    data: Uint8Array<ArrayBuffer>,\n    type: SourceBufferName,\n  ) {\n    const track = this.tracks[type];\n    const sb = track?.buffer;\n    if (!sb) {\n      throw new HlsJsTrackRemovedError(\n        `Attempting to append to the ${type} SourceBuffer, but it does not exist`,\n      );\n    }\n    track.ending = false;\n    track.ended = false;\n    sb.appendBuffer(data);\n  }\n\n  private blockUntilOpen(callback: () => void) {\n    if (this.isUpdating() || this.isQueued()) {\n      this.blockBuffers(callback).catch((error) => {\n        this.warn(`SourceBuffer blocked callback ${error}`);\n        this.stepOperationQueue(this.sourceBufferTypes);\n      });\n    } else {\n      try {\n        callback();\n      } catch (error) {\n        this.warn(\n          `Callback run without blocking ${this.operationQueue} ${error}`,\n        );\n      }\n    }\n  }\n\n  private isUpdating(): boolean {\n    return this.sourceBuffers.some(([type, sb]) => type && sb.updating);\n  }\n\n  private isQueued(): boolean {\n    return this.sourceBuffers.some(([type]) => type && !!this.currentOp(type));\n  }\n\n  private isPending(\n    track: SourceBufferTrack | undefined,\n  ): track is SourceBufferTrack {\n    return !!track && !track.buffer;\n  }\n\n  // Enqueues an operation to each SourceBuffer queue which, upon execution, resolves a promise. When all promises\n  // resolve, the onUnblocked function is executed. Functions calling this method do not need to unblock the queue\n  // upon completion, since we already do it here\n  private blockBuffers(\n    onUnblocked: () => void,\n    bufferNames: SourceBufferName[] = this.sourceBufferTypes,\n  ): Promise<void> {\n    if (!bufferNames.length) {\n      this.log('Blocking operation requested, but no SourceBuffers exist');\n      return Promise.resolve().then(onUnblocked);\n    }\n    const { operationQueue } = this;\n\n    // logger.debug(`[buffer-controller]: Blocking ${buffers} SourceBuffer`);\n    const blockingOperations = bufferNames.map((type) =>\n      this.appendBlocker(type),\n    );\n    const audioBlocked = bufferNames.length > 1 && !!this.blockedAudioAppend;\n    if (audioBlocked) {\n      this.unblockAudio();\n    }\n    return Promise.all(blockingOperations).then((result) => {\n      if (operationQueue !== this.operationQueue) {\n        return;\n      }\n      // logger.debug(`[buffer-controller]: Blocking operation resolved; unblocking ${buffers} SourceBuffer`);\n      onUnblocked();\n      this.stepOperationQueue(this.sourceBufferTypes);\n    });\n  }\n\n  private stepOperationQueue(bufferNames: SourceBufferName[]) {\n    bufferNames.forEach((type) => {\n      const sb = this.tracks[type]?.buffer;\n      // Only cycle the queue if the SB is not updating. There's a bug in Chrome which sets the SB updating flag to\n      // true when changing the MediaSource duration (https://bugs.chromium.org/p/chromium/issues/detail?id=959359&can=2&q=mediasource%20duration)\n      // While this is a workaround, it's probably useful to have around\n      if (!sb || sb.updating) {\n        return;\n      }\n      this.shiftAndExecuteNext(type);\n    });\n  }\n\n  private append(\n    operation: BufferOperation,\n    type: SourceBufferName,\n    pending?: boolean,\n  ) {\n    if (this.operationQueue) {\n      this.operationQueue.append(operation, type, pending);\n    }\n  }\n\n  private appendBlocker(type: SourceBufferName): Promise<void> | undefined {\n    if (this.operationQueue) {\n      return this.operationQueue.appendBlocker(type);\n    }\n  }\n\n  private currentOp(type: SourceBufferName): BufferOperation | null {\n    if (this.operationQueue) {\n      return this.operationQueue.current(type);\n    }\n    return null;\n  }\n\n  private executeNext(type: SourceBufferName | null) {\n    if (type && this.operationQueue) {\n      this.operationQueue.executeNext(type);\n    }\n  }\n\n  private shiftAndExecuteNext(type: SourceBufferName) {\n    if (this.operationQueue) {\n      this.operationQueue.shiftAndExecuteNext(type);\n    }\n  }\n\n  private get pendingTrackCount(): number {\n    return Object.keys(this.tracks).reduce(\n      (acc, type) =>\n        acc + (this.isPending(this.tracks[type as SourceBufferName]) ? 1 : 0),\n      0,\n    );\n  }\n\n  private get sourceBufferCount(): number {\n    return this.sourceBuffers.reduce((acc, [type]) => acc + (type ? 1 : 0), 0);\n  }\n\n  private get sourceBufferTypes(): SourceBufferName[] {\n    return this.sourceBuffers\n      .map(([type]) => type)\n      .filter((type) => !!type) as SourceBufferName[];\n  }\n\n  private addBufferListener(\n    type: SourceBufferName,\n    event: string,\n    fn: <K extends keyof SourceBufferEventMap>(\n      type: SourceBufferName,\n      event: SourceBufferEventMap[K],\n    ) => any,\n  ) {\n    const track = this.tracks[type];\n    if (!track) {\n      return;\n    }\n    const buffer = track.buffer;\n    if (!buffer) {\n      return;\n    }\n    const listener = fn.bind(this, type);\n    track.listeners.push({ event, listener });\n    buffer.addEventListener(event, listener);\n  }\n\n  private removeBufferListeners(type: SourceBufferName) {\n    const track = this.tracks[type];\n    if (!track) {\n      return;\n    }\n    const buffer = track.buffer;\n    if (!buffer) {\n      return;\n    }\n    track.listeners.forEach((l) => {\n      buffer.removeEventListener(l.event, l.listener);\n    });\n    track.listeners.length = 0;\n  }\n}\n\nfunction removeSourceChildren(node: HTMLElement) {\n  const sourceChildren = node.querySelectorAll('source');\n  [].slice.call(sourceChildren).forEach((source) => {\n    node.removeChild(source);\n  });\n}\n\nfunction addSource(media: HTMLMediaElement, url: string) {\n  const source = self.document.createElement('source');\n  source.type = 'video/mp4';\n  source.src = url;\n  media.appendChild(source);\n}\n\nfunction sourceBufferNameToIndex(type: SourceBufferName) {\n  return type === 'audio' ? 1 : 0;\n}\n","/*\n * cap stream level to media size dimension controller\n */\n\nimport { Events } from '../events';\nimport type StreamController from './stream-controller';\nimport type Hls from '../hls';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  BufferCodecsData,\n  FPSDropLevelCappingData,\n  LevelsUpdatedData,\n  ManifestParsedData,\n  MediaAttachingData,\n} from '../types/events';\nimport type { Level } from '../types/level';\n\ntype RestrictedLevel = { width: number; height: number; bitrate: number };\nclass CapLevelController implements ComponentAPI {\n  private hls: Hls;\n  private autoLevelCapping: number;\n  private firstLevel: number;\n  private media: HTMLVideoElement | null;\n  private restrictedLevels: RestrictedLevel[];\n  private timer: number | undefined;\n  private clientRect: { width: number; height: number } | null;\n  private streamController?: StreamController;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    this.firstLevel = -1;\n    this.media = null;\n    this.restrictedLevels = [];\n    this.timer = undefined;\n    this.clientRect = null;\n\n    this.registerListeners();\n  }\n\n  public setStreamController(streamController: StreamController) {\n    this.streamController = streamController;\n  }\n\n  public destroy() {\n    if (this.hls) {\n      this.unregisterListener();\n    }\n    if (this.timer) {\n      this.stopCapping();\n    }\n    this.media = null;\n    this.clientRect = null;\n    // @ts-ignore\n    this.hls = this.streamController = null;\n  }\n\n  protected registerListeners() {\n    const { hls } = this;\n    hls.on(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  protected unregisterListener() {\n    const { hls } = this;\n    hls.off(Events.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this);\n    hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  protected onFpsDropLevelCapping(\n    event: Events.FPS_DROP_LEVEL_CAPPING,\n    data: FPSDropLevelCappingData,\n  ) {\n    // Don't add a restricted level more than once\n    const level = this.hls.levels[data.droppedLevel];\n    if (this.isLevelAllowed(level)) {\n      this.restrictedLevels.push({\n        bitrate: level.bitrate,\n        height: level.height,\n        width: level.width,\n      });\n    }\n  }\n\n  protected onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) {\n    this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n    this.clientRect = null;\n    if (this.timer && this.hls.levels.length) {\n      this.detectPlayerSize();\n    }\n  }\n\n  protected onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) {\n    const hls = this.hls;\n    this.restrictedLevels = [];\n    this.firstLevel = data.firstLevel;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // Start capping immediately if the manifest has signaled video codecs\n      this.startCapping();\n    }\n  }\n\n  private onLevelsUpdated(\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData,\n  ) {\n    if (this.timer && Number.isFinite(this.autoLevelCapping)) {\n      this.detectPlayerSize();\n    }\n  }\n\n  // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted\n  // to the first level\n  protected onBufferCodecs(\n    event: Events.BUFFER_CODECS,\n    data: BufferCodecsData,\n  ) {\n    const hls = this.hls;\n    if (hls.config.capLevelToPlayerSize && data.video) {\n      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present\n      this.startCapping();\n    }\n  }\n\n  protected onMediaDetaching() {\n    this.stopCapping();\n    this.media = null;\n  }\n\n  detectPlayerSize() {\n    if (this.media) {\n      if (this.mediaHeight <= 0 || this.mediaWidth <= 0) {\n        this.clientRect = null;\n        return;\n      }\n      const levels = this.hls.levels;\n      if (levels.length) {\n        const hls = this.hls;\n        const maxLevel = this.getMaxLevel(levels.length - 1);\n        if (maxLevel !== this.autoLevelCapping) {\n          hls.logger.log(\n            `Setting autoLevelCapping to ${maxLevel}: ${levels[maxLevel].height}p@${levels[maxLevel].bitrate} for media ${this.mediaWidth}x${this.mediaHeight}`,\n          );\n        }\n        hls.autoLevelCapping = maxLevel;\n        if (\n          hls.autoLevelEnabled &&\n          hls.autoLevelCapping > this.autoLevelCapping &&\n          this.streamController\n        ) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          this.streamController.nextLevelSwitch();\n        }\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n\n  /*\n   * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n   */\n  getMaxLevel(capLevelIndex: number): number {\n    const levels = this.hls.levels;\n    if (!levels.length) {\n      return -1;\n    }\n\n    const validLevels = levels.filter(\n      (level, index) => this.isLevelAllowed(level) && index <= capLevelIndex,\n    );\n\n    this.clientRect = null;\n    return CapLevelController.getMaxLevelByMediaSize(\n      validLevels,\n      this.mediaWidth,\n      this.mediaHeight,\n    );\n  }\n\n  startCapping() {\n    if (this.timer) {\n      // Don't reset capping if started twice; this can happen if the manifest signals a video codec\n      return;\n    }\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    self.clearInterval(this.timer);\n    this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1000);\n    this.detectPlayerSize();\n  }\n\n  stopCapping() {\n    this.restrictedLevels = [];\n    this.firstLevel = -1;\n    this.autoLevelCapping = Number.POSITIVE_INFINITY;\n    if (this.timer) {\n      self.clearInterval(this.timer);\n      this.timer = undefined;\n    }\n  }\n\n  getDimensions(): { width: number; height: number } {\n    if (this.clientRect) {\n      return this.clientRect;\n    }\n    const media = this.media;\n    const boundsRect = {\n      width: 0,\n      height: 0,\n    };\n\n    if (media) {\n      const clientRect = media.getBoundingClientRect();\n      boundsRect.width = clientRect.width;\n      boundsRect.height = clientRect.height;\n      if (!boundsRect.width && !boundsRect.height) {\n        // When the media element has no width or height (equivalent to not being in the DOM),\n        // then use its width and height attributes (media.width, media.height)\n        boundsRect.width =\n          clientRect.right - clientRect.left || media.width || 0;\n        boundsRect.height =\n          clientRect.bottom - clientRect.top || media.height || 0;\n      }\n    }\n    this.clientRect = boundsRect;\n    return boundsRect;\n  }\n\n  get mediaWidth(): number {\n    return this.getDimensions().width * this.contentScaleFactor;\n  }\n\n  get mediaHeight(): number {\n    return this.getDimensions().height * this.contentScaleFactor;\n  }\n\n  get contentScaleFactor(): number {\n    let pixelRatio = 1;\n    if (!this.hls.config.ignoreDevicePixelRatio) {\n      try {\n        pixelRatio = self.devicePixelRatio;\n      } catch (e) {\n        /* no-op */\n      }\n    }\n\n    return Math.min(pixelRatio, this.hls.config.maxDevicePixelRatio);\n  }\n\n  private isLevelAllowed(level: Level): boolean {\n    const restrictedLevels = this.restrictedLevels;\n    return !restrictedLevels.some((restrictedLevel) => {\n      return (\n        level.bitrate === restrictedLevel.bitrate &&\n        level.width === restrictedLevel.width &&\n        level.height === restrictedLevel.height\n      );\n    });\n  }\n\n  static getMaxLevelByMediaSize(\n    levels: Array<Level>,\n    width: number,\n    height: number,\n  ): number {\n    if (!levels?.length) {\n      return -1;\n    }\n\n    // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n    const atGreatestBandwidth = (\n      curLevel: Level,\n      nextLevel: Level | undefined,\n    ) => {\n      if (!nextLevel) {\n        return true;\n      }\n\n      return (\n        curLevel.width !== nextLevel.width ||\n        curLevel.height !== nextLevel.height\n      );\n    };\n\n    // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n    let maxLevelIndex = levels.length - 1;\n    // Prevent changes in aspect-ratio from causing capping to toggle back and forth\n    const squareSize = Math.max(width, height);\n    for (let i = 0; i < levels.length; i += 1) {\n      const level = levels[i];\n      if (\n        (level.width >= squareSize || level.height >= squareSize) &&\n        atGreatestBandwidth(level, levels[i + 1])\n      ) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  }\n}\n\nexport default CapLevelController;\n","/**\n * Common Media Object Type\n *\n * @internal\n */\nexport const CmObjectType = {\n    /**\n     * text file, such as a manifest or playlist\n     */\n    MANIFEST: 'm',\n    /**\n     * audio only\n     */\n    AUDIO: 'a',\n    /**\n     * video only\n     */\n    VIDEO: 'v',\n    /**\n     * muxed audio and video\n     */\n    MUXED: 'av',\n    /**\n     * init segment\n     */\n    INIT: 'i',\n    /**\n     * caption or subtitle\n     */\n    CAPTION: 'c',\n    /**\n     * ISOBMFF timed text track\n     */\n    TIMED_TEXT: 'tt',\n    /**\n     * cryptographic key, license or certificate.\n     */\n    KEY: 'k',\n    /**\n     * other\n     */\n    OTHER: 'o',\n};\n//# sourceMappingURL=CmObjectType.js.map","import { CmObjectType } from '../cta/CmObjectType.js';\n/**\n * Common Media Client Data Object Type\n *\n * @group CMCD\n *\n * @beta\n *\n * @enum\n */\nexport const CmcdObjectType = CmObjectType;\n//# sourceMappingURL=CmcdObjectType.js.map","/**\n * Common Media Streaming Format\n *\n * @internal\n */\nexport const CmStreamingFormat = {\n    /**\n     * MPEG DASH\n     */\n    DASH: 'd',\n    /**\n     * HTTP Live Streaming (HLS)\n     */\n    HLS: 'h',\n    /**\n     * Smooth Streaming\n     */\n    SMOOTH: 's',\n    /**\n     * Other\n     */\n    OTHER: 'o',\n};\n//# sourceMappingURL=CmStreamingFormat.js.map","import { CmStreamingFormat } from '../cta/CmStreamingFormat.js';\n/**\n * Common Media Client Data Streaming Format\n *\n * @group CMCD\n *\n * @enum\n *\n * @beta\n */\nexport const CmcdStreamingFormat = CmStreamingFormat;\n//# sourceMappingURL=CmcdStreamingFormat.js.map","/**\n * Structured Field Item\n *\n * @group Structured Field\n *\n * @beta\n */\nexport class SfItem {\n    constructor(value, params) {\n        if (Array.isArray(value)) {\n            value = value.map((v) => (v instanceof SfItem) ? v : new SfItem(v));\n        }\n        this.value = value;\n        this.params = params;\n    }\n}\n//# sourceMappingURL=SfItem.js.map","export const DICT = 'Dict';\n//# sourceMappingURL=DICT.js.map","function format(value) {\n    if (Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (value instanceof Map) {\n        return 'Map{}';\n    }\n    if (value instanceof Set) {\n        return 'Set{}';\n    }\n    if (typeof value === 'object') {\n        return JSON.stringify(value);\n    }\n    return String(value);\n}\nexport function throwError(action, src, type, cause) {\n    return new Error(`failed to ${action} \"${format(src)}\" as ${type}`, { cause });\n}\n//# sourceMappingURL=throwError.js.map","import { throwError } from '../utils/throwError.js';\nexport function serializeError(src, type, cause) {\n    return throwError('serialize', src, type, cause);\n}\n//# sourceMappingURL=serializeError.js.map","/**\n * A class to represent structured field tokens when `Symbol` is not available.\n *\n * @group Structured Field\n *\n * @beta\n */\nexport class SfToken {\n    constructor(description) {\n        this.description = description;\n    }\n}\n//# sourceMappingURL=SfToken.js.map","export const BARE_ITEM = 'Bare Item';\n//# sourceMappingURL=BARE_ITEM.js.map","export const BOOLEAN = 'Boolean';\n//# sourceMappingURL=BOOLEAN.js.map","import { BOOLEAN } from '../utils/BOOLEAN.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.9.  Serializing a Boolean\n//\n// Given a Boolean as input_boolean, return an ASCII string suitable for\n// use in a HTTP field value.\n//\n// 1.  If input_boolean is not a boolean, fail serialization.\n//\n// 2.  Let output be an empty string.\n//\n// 3.  Append \"?\" to output.\n//\n// 4.  If input_boolean is true, append \"1\" to output.\n//\n// 5.  If input_boolean is false, append \"0\" to output.\n//\n// 6.  Return output.\nexport function serializeBoolean(value) {\n    if (typeof value !== 'boolean') {\n        throw serializeError(value, BOOLEAN);\n    }\n    return value ? '?1' : '?0';\n}\n//# sourceMappingURL=serializeBoolean.js.map","/**\n * Encodes binary data to base64\n *\n * @param binary - The binary data to encode\n * @returns The base64 encoded string\n *\n * @group Utils\n *\n * @beta\n */\nexport function encodeBase64(binary) {\n    return btoa(String.fromCharCode(...binary));\n}\n//# sourceMappingURL=encodeBase64.js.map","export const BYTES = 'Byte Sequence';\n//# sourceMappingURL=BYTES.js.map","import { encodeBase64 } from '../../utils/encodeBase64.js';\nimport { BYTES } from '../utils/BYTES.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.8.  Serializing a Byte Sequence\n//\n// Given a Byte Sequence as input_bytes, return an ASCII string suitable\n// for use in a HTTP field value.\n//\n// 1.  If input_bytes is not a sequence of bytes, fail serialization.\n//\n// 2.  Let output be an empty string.\n//\n// 3.  Append \":\" to output.\n//\n// 4.  Append the result of base64-encoding input_bytes as per\n//     [RFC4648], Section 4, taking account of the requirements below.\n//\n// 5.  Append \":\" to output.\n//\n// 6.  Return output.\n//\n// The encoded data is required to be padded with \"=\", as per [RFC4648],\n// Section 3.2.\n//\n// Likewise, encoded data SHOULD have pad bits set to zero, as per\n// [RFC4648], Section 3.5, unless it is not possible to do so due to\n// implementation constraints.\nexport function serializeByteSequence(value) {\n    if (ArrayBuffer.isView(value) === false) {\n        throw serializeError(value, BYTES);\n    }\n    return `:${encodeBase64(value)}:`;\n}\n//# sourceMappingURL=serializeByteSequence.js.map","export const INTEGER = 'Integer';\n//# sourceMappingURL=INTEGER.js.map","export function isInvalidInt(value) {\n    return value < -999999999999999 || 999999999999999 < value;\n}\n//# sourceMappingURL=isInvalidInt.js.map","import { INTEGER } from '../utils/INTEGER.js';\nimport { isInvalidInt } from '../utils/isInvalidInt.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.4.  Serializing an Integer\n//\n// Given an Integer as input_integer, return an ASCII string suitable\n// for use in a HTTP field value.\n//\n// 1.  If input_integer is not an integer in the range of\n//     -999,999,999,999,999 to 999,999,999,999,999 inclusive, fail\n//     serialization.\n//\n// 2.  Let output be an empty string.\n//\n// 3.  If input_integer is less than (but not equal to) 0, append \"-\" to\n//     output.\n//\n// 4.  Append input_integer's numeric value represented in base 10 using\n//     only decimal digits to output.\n//\n// 5.  Return output.\nexport function serializeInteger(value) {\n    if (isInvalidInt(value)) {\n        throw serializeError(value, INTEGER);\n    }\n    return value.toString();\n}\n//# sourceMappingURL=serializeInteger.js.map","import { serializeInteger } from './serializeInteger.js';\n// 4.1.10.  Serializing a Date\n//\n// Given a Date as input_integer, return an ASCII string suitable for\n// use in an HTTP field value.\n// 1.  Let output be \"@\".\n// 2.  Append to output the result of running Serializing an Integer\n//     with input_date (Section 4.1.4).\n// 3.  Return output.\nexport function serializeDate(value) {\n    return `@${serializeInteger(value.getTime() / 1000)}`;\n}\n//# sourceMappingURL=serializeDate.js.map","/**\n * This implements the rounding procedure described in step 2 of the \"Serializing a Decimal\" specification.\n * This rounding style is known as \"even rounding\", \"banker's rounding\", or \"commercial rounding\".\n *\n * @param value - The value to round\n * @param precision - The number of decimal places to round to\n * @returns The rounded value\n *\n * @group Utils\n *\n * @beta\n */\nexport function roundToEven(value, precision) {\n    if (value < 0) {\n        return -roundToEven(-value, precision);\n    }\n    const decimalShift = Math.pow(10, precision);\n    const isEquidistant = Math.abs(((value * decimalShift) % 1) - 0.5) < Number.EPSILON;\n    if (isEquidistant) {\n        // If the tail of the decimal place is 'equidistant' we round to the nearest even value\n        const flooredValue = Math.floor(value * decimalShift);\n        return (flooredValue % 2 === 0 ? flooredValue : flooredValue + 1) / decimalShift;\n    }\n    else {\n        // Otherwise, proceed as normal\n        return Math.round(value * decimalShift) / decimalShift;\n    }\n}\n//# sourceMappingURL=roundToEven.js.map","export const DECIMAL = 'Decimal';\n//# sourceMappingURL=DECIMAL.js.map","import { roundToEven } from '../../utils/roundToEven.js';\nimport { DECIMAL } from '../utils/DECIMAL.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.5.  Serializing a Decimal\n//\n// Given a decimal number as input_decimal, return an ASCII string\n// suitable for use in a HTTP field value.\n//\n// 1.   If input_decimal is not a decimal number, fail serialization.\n//\n// 2.   If input_decimal has more than three significant digits to the\n//      right of the decimal point, round it to three decimal places,\n//      rounding the final digit to the nearest value, or to the even\n//      value if it is equidistant.\n//\n// 3.   If input_decimal has more than 12 significant digits to the left\n//      of the decimal point after rounding, fail serialization.\n//\n// 4.   Let output be an empty string.\n//\n// 5.   If input_decimal is less than (but not equal to) 0, append \"-\"\n//      to output.\n//\n// 6.   Append input_decimal's integer component represented in base 10\n//      (using only decimal digits) to output; if it is zero, append\n//      \"0\".\n//\n// 7.   Append \".\" to output.\n//\n// 8.   If input_decimal's fractional component is zero, append \"0\" to\n//      output.\n//\n// 9.   Otherwise, append the significant digits of input_decimal's\n//      fractional component represented in base 10 (using only decimal\n//      digits) to output.\n//\n// 10.  Return output.\nexport function serializeDecimal(value) {\n    const roundedValue = roundToEven(value, 3); // round to 3 decimal places\n    if (Math.floor(Math.abs(roundedValue)).toString().length > 12) {\n        throw serializeError(value, DECIMAL);\n    }\n    const stringValue = roundedValue.toString();\n    return stringValue.includes('.') ? stringValue : `${stringValue}.0`;\n}\n//# sourceMappingURL=serializeDecimal.js.map","export const STRING = 'String';\n//# sourceMappingURL=STRING.js.map","export const STRING_REGEX = /[\\x00-\\x1f\\x7f]+/;\n//# sourceMappingURL=STRING_REGEX.js.map","import { STRING } from '../utils/STRING.js';\nimport { STRING_REGEX } from '../utils/STRING_REGEX.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.6.  Serializing a String\n//\n// Given a String as input_string, return an ASCII string suitable for\n// use in a HTTP field value.\n//\n// 1.  Convert input_string into a sequence of ASCII characters; if\n//     conversion fails, fail serialization.\n//\n// 2.  If input_string contains characters in the range %x00-1f or %x7f\n//     (i.e., not in VCHAR or SP), fail serialization.\n//\n// 3.  Let output be the string DQUOTE.\n//\n// 4.  For each character char in input_string:\n//\n//     1.  If char is \"\\\" or DQUOTE:\n//\n//         1.  Append \"\\\" to output.\n//\n//     2.  Append char to output.\n//\n// 5.  Append DQUOTE to output.\n//\n// 6.  Return output.\nexport function serializeString(value) {\n    if (STRING_REGEX.test(value)) {\n        throw serializeError(value, STRING);\n    }\n    return `\"${value.replace(/\\\\/g, `\\\\\\\\`).replace(/\"/g, `\\\\\"`)}\"`;\n}\n//# sourceMappingURL=serializeString.js.map","/**\n * Converts a symbol to a string.\n *\n * @param symbol - The symbol to convert.\n *\n * @returns The string representation of the symbol.\n *\n * @internal\n */\nexport function symbolToStr(symbol) {\n    return symbol.description || symbol.toString().slice(7, -1);\n}\n//# sourceMappingURL=symbolToStr.js.map","export const TOKEN = 'Token';\n//# sourceMappingURL=TOKEN.js.map","import { symbolToStr } from '../../cta/utils/symbolToStr.js';\nimport { TOKEN } from '../utils/TOKEN.js';\nimport { serializeError } from './serializeError.js';\nexport function serializeToken(token) {\n    const value = symbolToStr(token);\n    if (/^([a-zA-Z*])([!#$%&'*+\\-.^_`|~\\w:/]*)$/.test(value) === false) {\n        throw serializeError(value, TOKEN);\n    }\n    return value;\n}\n//# sourceMappingURL=serializeToken.js.map","import { SfToken } from '../SfToken.js';\nimport { BARE_ITEM } from '../utils/BARE_ITEM.js';\nimport { serializeBoolean } from './serializeBoolean.js';\nimport { serializeByteSequence } from './serializeByteSequence.js';\nimport { serializeDate } from './serializeDate.js';\nimport { serializeDecimal } from './serializeDecimal.js';\nimport { serializeError } from './serializeError.js';\nimport { serializeInteger } from './serializeInteger.js';\nimport { serializeString } from './serializeString.js';\nimport { serializeToken } from './serializeToken.js';\n// 4.1.3.1.  Serializing a Bare Item\n//\n// Given an Item as input_item, return an ASCII string suitable for use\n// in a HTTP field value.\n//\n// 1.  If input_item is an Integer, return the result of running\n//     Serializing an Integer (Section 4.1.4) with input_item.\n//\n// 2.  If input_item is a Decimal, return the result of running\n//     Serializing a Decimal (Section 4.1.5) with input_item.\n//\n// 3.  If input_item is a String, return the result of running\n//     Serializing a String (Section 4.1.6) with input_item.\n//\n// 4.  If input_item is a Token, return the result of running\n//     Serializing a Token (Section 4.1.7) with input_item.\n//\n// 5.  If input_item is a Boolean, return the result of running\n//     Serializing a Boolean (Section 4.1.9) with input_item.\n//\n// 6.  If input_item is a Byte Sequence, return the result of running\n//     Serializing a Byte Sequence (Section 4.1.8) with input_item.\n//\n// 7.  If input_item is a Date, return the result of running Serializing\n//     a Date (Section 4.1.10) with input_item.\n//\n// 8.  Otherwise, fail serialization.\nexport function serializeBareItem(value) {\n    switch (typeof value) {\n        case 'number':\n            if (!Number.isFinite(value)) {\n                throw serializeError(value, BARE_ITEM);\n            }\n            if (Number.isInteger(value)) {\n                return serializeInteger(value);\n            }\n            return serializeDecimal(value);\n        case 'string':\n            return serializeString(value);\n        case 'symbol':\n            return serializeToken(value);\n        case 'boolean':\n            return serializeBoolean(value);\n        case 'object':\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            if (value instanceof Uint8Array) {\n                return serializeByteSequence(value);\n            }\n            if (value instanceof SfToken) {\n                return serializeToken(value);\n            }\n        default:\n            // fail\n            throw serializeError(value, BARE_ITEM);\n    }\n}\n//# sourceMappingURL=serializeBareItem.js.map","export const KEY = 'Key';\n//# sourceMappingURL=KEY.js.map","import { KEY } from '../utils/KEY.js';\nimport { serializeError } from './serializeError.js';\n// 4.1.1.3.  Serializing a Key\n//\n// Given a key as input_key, return an ASCII string suitable for use in\n// a HTTP field value.\n//\n// 1.  Convert input_key into a sequence of ASCII characters; if\n//     conversion fails, fail serialization.\n//\n// 2.  If input_key contains characters not in lcalpha, DIGIT, \"_\", \"-\",\n//     \".\", or \"*\" fail serialization.\n//\n// 3.  If the first character of input_key is not lcalpha or \"*\", fail\n//     serialization.\n//\n// 4.  Let output be an empty string.\n//\n// 5.  Append input_key to output.\n//\n// 6.  Return output.\nexport function serializeKey(value) {\n    if (/^[a-z*][a-z0-9\\-_.*]*$/.test(value) === false) {\n        throw serializeError(value, KEY);\n    }\n    return value;\n}\n//# sourceMappingURL=serializeKey.js.map","import { serializeBareItem } from './serializeBareItem.js';\nimport { serializeKey } from './serializeKey.js';\n// 4.1.1.2.  Serializing Parameters\n//\n// Given an ordered Dictionary as input_parameters (each member having a\n// param_name and a param_value), return an ASCII string suitable for\n// use in a HTTP field value.\n//\n// 1.  Let output be an empty string.\n//\n// 2.  For each param_name with a value of param_value in\n//     input_parameters:\n//\n//     1.  Append \";\" to output.\n//\n//     2.  Append the result of running Serializing a Key\n//         (Section 4.1.1.3) with param_name to output.\n//\n//     3.  If param_value is not Boolean true:\n//\n//         1.  Append \"=\" to output.\n//\n//         2.  Append the result of running Serializing a bare Item\n//             (Section 4.1.3.1) with param_value to output.\n//\n// 3.  Return output.\nexport function serializeParams(params) {\n    if (params == null) {\n        return '';\n    }\n    return Object.entries(params)\n        .map(([key, value]) => {\n        if (value === true) {\n            return `;${serializeKey(key)}`; // omit true\n        }\n        return `;${serializeKey(key)}=${serializeBareItem(value)}`;\n    })\n        .join('');\n}\n//# sourceMappingURL=serializeParams.js.map","import { SfItem } from '../SfItem.js';\nimport { serializeBareItem } from './serializeBareItem.js';\nimport { serializeParams } from './serializeParams.js';\n// 4.1.3.  Serializing an Item\n//\n// Given an Item as bare_item and Parameters as item_parameters, return\n// an ASCII string suitable for use in a HTTP field value.\n//\n// 1.  Let output be an empty string.\n//\n// 2.  Append the result of running Serializing a Bare Item\n//     Section 4.1.3.1 with bare_item to output.\n//\n// 3.  Append the result of running Serializing Parameters\n//     Section 4.1.1.2 with item_parameters to output.\n//\n// 4.  Return output.\nexport function serializeItem(value) {\n    if (value instanceof SfItem) {\n        return `${serializeBareItem(value.value)}${serializeParams(value.params)}`;\n    }\n    else {\n        return serializeBareItem(value);\n    }\n}\n//# sourceMappingURL=serializeItem.js.map","import { serializeItem } from './serializeItem.js';\nimport { serializeParams } from './serializeParams.js';\n// 4.1.1.1.  Serializing an Inner List\n//\n// Given an array of (member_value, parameters) tuples as inner_list,\n// and parameters as list_parameters, return an ASCII string suitable\n// for use in a HTTP field value.\n//\n// 1.  Let output be the string \"(\".\n//\n// 2.  For each (member_value, parameters) of inner_list:\n//\n//     1.  Append the result of running Serializing an Item\n//         (Section 4.1.3) with (member_value, parameters) to output.\n//\n//     2.  If more values remain in inner_list, append a single SP to\n//         output.\n//\n// 3.  Append \")\" to output.\n//\n// 4.  Append the result of running Serializing Parameters\n//     (Section 4.1.1.2) with list_parameters to output.\n//\n// 5.  Return output.\nexport function serializeInnerList(value) {\n    return `(${value.value.map(serializeItem).join(' ')})${serializeParams(value.params)}`;\n}\n//# sourceMappingURL=serializeInnerList.js.map","import { SfItem } from '../SfItem.js';\nimport { DICT } from '../utils/DICT.js';\nimport { serializeError } from './serializeError.js';\nimport { serializeInnerList } from './serializeInnerList.js';\nimport { serializeItem } from './serializeItem.js';\nimport { serializeKey } from './serializeKey.js';\nimport { serializeParams } from './serializeParams.js';\n// 4.1.2.  Serializing a Dictionary\n//\n// Given an ordered Dictionary as input_dictionary (each member having a\n// member_name and a tuple value of (member_value, parameters)), return\n// an ASCII string suitable for use in a HTTP field value.\n//\n// 1.  Let output be an empty string.\n//\n// 2.  For each member_name with a value of (member_value, parameters)\n//     in input_dictionary:\n//\n//     1.  Append the result of running Serializing a Key\n//         (Section 4.1.1.3) with member's member_name to output.\n//\n//     2.  If member_value is Boolean true:\n//\n//         1.  Append the result of running Serializing Parameters\n//             (Section 4.1.1.2) with parameters to output.\n//\n//     3.  Otherwise:\n//\n//         1.  Append \"=\" to output.\n//\n//         2.  If member_value is an array, append the result of running\n//             Serializing an Inner List (Section 4.1.1.1) with\n//             (member_value, parameters) to output.\n//\n//         3.  Otherwise, append the result of running Serializing an\n//             Item (Section 4.1.3) with (member_value, parameters) to\n//             output.\n//\n//     4.  If more members remain in input_dictionary:\n//\n//         1.  Append \",\" to output.\n//\n//         2.  Append a single SP to output.\n//\n// 3.  Return output.\nexport function serializeDict(dict, options = { whitespace: true }) {\n    if (typeof dict !== 'object' || dict == null) {\n        throw serializeError(dict, DICT);\n    }\n    const entries = dict instanceof Map ? dict.entries() : Object.entries(dict);\n    const optionalWhiteSpace = (options === null || options === void 0 ? void 0 : options.whitespace) ? ' ' : '';\n    return Array.from(entries)\n        .map(([key, item]) => {\n        if (item instanceof SfItem === false) {\n            item = new SfItem(item);\n        }\n        let output = serializeKey(key);\n        if (item.value === true) {\n            output += serializeParams(item.params);\n        }\n        else {\n            output += '=';\n            if (Array.isArray(item.value)) {\n                output += serializeInnerList(item);\n            }\n            else {\n                output += serializeItem(item);\n            }\n        }\n        return output;\n    })\n        .join(`,${optionalWhiteSpace}`);\n}\n//# sourceMappingURL=serializeDict.js.map","import { serializeDict } from './serialize/serializeDict.js';\n/**\n * Encode an object into a structured field dictionary\n *\n * @param value - The structured field dictionary to encode\n * @param options - Encoding options\n *\n * @returns The structured field string\n *\n * @group Structured Field\n *\n * @beta\n */\nexport function encodeSfDict(value, options) {\n    return serializeDict(value, options);\n}\n//# sourceMappingURL=encodeSfDict.js.map","/**\n * CMCD object header name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_OBJECT = 'CMCD-Object';\n//# sourceMappingURL=CMCD_OBJECT.js.map","/**\n * CMCD request header name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_REQUEST = 'CMCD-Request';\n//# sourceMappingURL=CMCD_REQUEST.js.map","/**\n * CMCD session header name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_SESSION = 'CMCD-Session';\n//# sourceMappingURL=CMCD_SESSION.js.map","/**\n * CMCD status header name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_STATUS = 'CMCD-Status';\n//# sourceMappingURL=CMCD_STATUS.js.map","import { CMCD_OBJECT } from './CMCD_OBJECT.js';\nimport { CMCD_REQUEST } from './CMCD_REQUEST.js';\nimport { CMCD_SESSION } from './CMCD_SESSION.js';\nimport { CMCD_STATUS } from './CMCD_STATUS.js';\n/**\n * The map of CMCD keys to their appropriate header shard.\n *\n * @group CMCD\n *\n * @internal\n */\nexport const CMCD_HEADER_MAP = {\n    // Object\n    br: CMCD_OBJECT,\n    ab: CMCD_OBJECT,\n    d: CMCD_OBJECT,\n    ot: CMCD_OBJECT,\n    tb: CMCD_OBJECT,\n    tpb: CMCD_OBJECT,\n    lb: CMCD_OBJECT,\n    tab: CMCD_OBJECT,\n    lab: CMCD_OBJECT,\n    url: CMCD_OBJECT,\n    // Request\n    pb: CMCD_REQUEST,\n    bl: CMCD_REQUEST,\n    tbl: CMCD_REQUEST,\n    dl: CMCD_REQUEST,\n    ltc: CMCD_REQUEST,\n    mtp: CMCD_REQUEST,\n    nor: CMCD_REQUEST,\n    nrr: CMCD_REQUEST,\n    rc: CMCD_REQUEST,\n    sn: CMCD_REQUEST,\n    sta: CMCD_REQUEST,\n    su: CMCD_REQUEST,\n    ttfb: CMCD_REQUEST,\n    ttfbb: CMCD_REQUEST,\n    ttlb: CMCD_REQUEST,\n    cmsdd: CMCD_REQUEST,\n    cmsds: CMCD_REQUEST,\n    smrt: CMCD_REQUEST,\n    df: CMCD_REQUEST,\n    cs: CMCD_REQUEST,\n    // TODO: Which header to put the `ts` field is not defined yet.\n    ts: CMCD_REQUEST,\n    // Session\n    cid: CMCD_SESSION,\n    pr: CMCD_SESSION,\n    sf: CMCD_SESSION,\n    sid: CMCD_SESSION,\n    st: CMCD_SESSION,\n    v: CMCD_SESSION,\n    msd: CMCD_SESSION,\n    // Status\n    bs: CMCD_STATUS,\n    bsd: CMCD_STATUS,\n    cdn: CMCD_STATUS,\n    rtp: CMCD_STATUS,\n    bg: CMCD_STATUS,\n    pt: CMCD_STATUS,\n    ec: CMCD_STATUS,\n    e: CMCD_STATUS,\n};\n//# sourceMappingURL=CMCD_HEADER_MAP.js.map","import { CMCD_OBJECT } from './CMCD_OBJECT.js';\nimport { CMCD_REQUEST } from './CMCD_REQUEST.js';\nimport { CMCD_SESSION } from './CMCD_SESSION.js';\nimport { CMCD_STATUS } from './CMCD_STATUS.js';\n/**\n * CMCD header fields.\n *\n * @group CMCD\n *\n * @enum\n *\n * @beta\n */\nexport const CmcdHeaderField = {\n    /**\n     * keys whose values vary with the object being requested.\n     */\n    OBJECT: CMCD_OBJECT,\n    /**\n     * keys whose values vary with each request.\n     */\n    REQUEST: CMCD_REQUEST,\n    /**\n     * keys whose values are expected to be invariant over the life of the session.\n     */\n    SESSION: CMCD_SESSION,\n    /**\n     * keys whose values do not vary with every request or object.\n     */\n    STATUS: CMCD_STATUS,\n};\n//# sourceMappingURL=CmcdHeaderField.js.map","import { CMCD_HEADER_MAP } from './CMCD_HEADER_MAP.js';\nimport { CmcdHeaderField } from './CmcdHeaderField.js';\nfunction createHeaderMap(headerMap) {\n    return Object.keys(headerMap)\n        .reduce((acc, field) => {\n        var _a;\n        (_a = headerMap[field]) === null || _a === void 0 ? void 0 : _a.forEach(key => acc[key] = field);\n        return acc;\n    }, {});\n}\n/**\n * Group a CMCD data object into header shards\n *\n * @param cmcd - The CMCD data object to convert.\n * @param customHeaderMap - A map of CMCD header fields to custom CMCD keys.\n *\n * @returns The CMCD header shards.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function groupCmcdHeaders(cmcd, customHeaderMap) {\n    const result = {};\n    if (!cmcd) {\n        return result;\n    }\n    const keys = Object.keys(cmcd);\n    const custom = customHeaderMap ? createHeaderMap(customHeaderMap) : {};\n    return keys.reduce((acc, key) => {\n        var _a;\n        const field = CMCD_HEADER_MAP[key] || custom[key] || CmcdHeaderField.REQUEST;\n        const data = (_a = acc[field]) !== null && _a !== void 0 ? _a : (acc[field] = {});\n        data[key] = cmcd[key];\n        return acc;\n    }, result);\n}\n//# sourceMappingURL=groupCmcdHeaders.js.map","/**\n * Checks if the given key is a token field.\n *\n * @param key - The key to check.\n *\n * @returns `true` if the key is a token field.\n *\n * @internal\n */\nexport function isTokenField(key) {\n    return [\n        'ot',\n        'sf',\n        'st',\n        'e',\n        'sta',\n    ].includes(key);\n}\n//# sourceMappingURL=isTokenField.js.map","/**\n * Checks if the given value is valid\n *\n * @param value - The value to check.\n *\n * @returns `true` if the key is a value is valid.\n *\n * @internal\n */\nexport function isValid(value) {\n    if (typeof value === 'number') {\n        return Number.isFinite(value);\n    }\n    return value != null && value !== '' && value !== false;\n}\n//# sourceMappingURL=isValid.js.map","/**\n * CMCD event mode variable name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_EVENT_MODE = 'event';\n//# sourceMappingURL=CMCD_EVENT_MODE.js.map","/**\n * Constructs a relative path from a URL.\n *\n * @param url - The destination URL\n * @param base - The base URL\n * @returns The relative path\n *\n * @group Utils\n *\n * @beta\n */\nexport function urlToRelativePath(url, base) {\n    const to = new URL(url);\n    const from = new URL(base);\n    if (to.origin !== from.origin) {\n        return url;\n    }\n    const toPath = to.pathname.split('/').slice(1);\n    const fromPath = from.pathname.split('/').slice(1, -1);\n    // remove common parents\n    while (toPath[0] === fromPath[0]) {\n        toPath.shift();\n        fromPath.shift();\n    }\n    // add back paths\n    while (fromPath.length) {\n        fromPath.shift();\n        toPath.unshift('..');\n    }\n    const relativePath = toPath.join('/');\n    // preserve query parameters and hash of the destination url\n    return relativePath + to.search + to.hash;\n}\n//# sourceMappingURL=urlToRelativePath.js.map","import { SfItem } from '../structuredfield/SfItem.js';\nimport { urlToRelativePath } from '../utils/urlToRelativePath.js';\nconst toRounded = (value) => Math.round(value);\nconst toUrlSafe = (value, options) => {\n    if (Array.isArray(value)) {\n        return value.map(item => toUrlSafe(item, options));\n    }\n    if (value instanceof SfItem && typeof value.value === 'string') {\n        return new SfItem(toUrlSafe(value.value, options), value.params);\n    }\n    else {\n        if (options.baseUrl) {\n            value = urlToRelativePath(value, options.baseUrl);\n        }\n        return options.version === 1 ? encodeURIComponent(value) : value;\n    }\n};\nconst toHundred = (value) => toRounded(value / 100) * 100;\nconst nor = (value, options) => {\n    let norValue = value;\n    if (options.version >= 2) {\n        if (value instanceof SfItem && typeof value.value === 'string') {\n            norValue = new SfItem([value]);\n        }\n        else if (typeof value === 'string') {\n            norValue = [value];\n        }\n    }\n    return toUrlSafe(norValue, options);\n};\n/**\n * The default formatters for CMCD values.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_FORMATTER_MAP = {\n    /**\n     * Bitrate (kbps) rounded integer\n     */\n    br: toRounded,\n    /**\n     * Duration (milliseconds) rounded integer\n     */\n    d: toRounded,\n    /**\n     * Buffer Length (milliseconds) rounded nearest 100ms\n     */\n    bl: toHundred,\n    /**\n     * Deadline (milliseconds) rounded nearest 100ms\n     */\n    dl: toHundred,\n    /**\n     * Measured Throughput (kbps) rounded nearest 100kbps\n     */\n    mtp: toHundred,\n    /**\n     * Next Object Request URL encoded\n     */\n    nor,\n    /**\n     * Requested maximum throughput (kbps) rounded nearest 100kbps\n     */\n    rtp: toHundred,\n    /**\n     * Top Bitrate (kbps) rounded integer\n     */\n    tb: toRounded,\n};\n//# sourceMappingURL=CMCD_FORMATTER_MAP.js.map","/**\n * CMCD request mode variable name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_REQUEST_MODE = 'request';\n//# sourceMappingURL=CMCD_REQUEST_MODE.js.map","/**\n * CMCD response mode variable name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_RESPONSE_MODE = 'response';\n//# sourceMappingURL=CMCD_RESPONSE_MODE.js.map","/**\n * Defines the common keys for CMCD (Common Media Client Data) version 2.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_COMMON_KEYS = [\n    'ab',\n    'bg',\n    'bl',\n    'br',\n    'bs',\n    'bsd',\n    'cdn',\n    'cid',\n    'cs',\n    'df',\n    'ec',\n    'lab',\n    'lb',\n    'ltc',\n    'msd',\n    'mtp',\n    'pb',\n    'pr',\n    'pt',\n    'sf',\n    'sid',\n    'sn',\n    'st',\n    'sta',\n    'tab',\n    'tb',\n    'tbl',\n    'tpb',\n    'ts',\n    'v',\n];\n//# sourceMappingURL=CMCD_COMMON_KEYS.js.map","/**\n * Defines the event-specific keys for CMCD (Common Media Client Data) version 2.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_EVENT_KEYS = [\n    'e',\n];\n//# sourceMappingURL=CMCD_EVENT_KEYS.js.map","const CUSTOM_KEY_REGEX = /^[a-zA-Z0-9-.]+-[a-zA-Z0-9-.]+$/;\n/**\n * Check if a key is a custom key.\n *\n * @param key - The key to check.\n *\n * @returns `true` if the key is a custom key, `false` otherwise.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function isCmcdCustomKey(key) {\n    return CUSTOM_KEY_REGEX.test(key);\n}\n//# sourceMappingURL=isCmcdCustomKey.js.map","import { CMCD_COMMON_KEYS } from './CMCD_COMMON_KEYS.js';\nimport { CMCD_EVENT_KEYS } from './CMCD_EVENT_KEYS.js';\nimport { isCmcdCustomKey } from './isCmcdCustomKey.js';\n/**\n * Check if a key is a valid CMCD event key.\n *\n * @param key - The key to check.\n *\n * @returns `true` if the key is a valid CMCD event key, `false` otherwise.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/isCmcdEventKey.test.ts#example}\n */\nexport function isCmcdEventKey(key) {\n    return CMCD_COMMON_KEYS.includes(key) ||\n        CMCD_EVENT_KEYS.includes(key) ||\n        isCmcdCustomKey(key);\n}\n//# sourceMappingURL=isCmcdEventKey.js.map","/**\n * Defines the request-specific keys for CMCD (Common Media Client Data) version 2.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_REQUEST_KEYS = [\n    'd',\n    'dl',\n    'nor',\n    'ot',\n    'rtp',\n    'su',\n];\n//# sourceMappingURL=CMCD_REQUEST_KEYS.js.map","import { CMCD_COMMON_KEYS } from './CMCD_COMMON_KEYS.js';\nimport { CMCD_REQUEST_KEYS } from './CMCD_REQUEST_KEYS.js';\nimport { isCmcdCustomKey } from './isCmcdCustomKey.js';\n/**\n * Check if a key is a valid CMCD request key.\n *\n * @param key - The key to check.\n *\n * @returns `true` if the key is a valid CMCD request key, `false` otherwise.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/isCmcdRequestKey.test.ts#example}\n */\nexport function isCmcdRequestKey(key) {\n    return CMCD_COMMON_KEYS.includes(key) ||\n        CMCD_REQUEST_KEYS.includes(key) ||\n        isCmcdCustomKey(key);\n}\n//# sourceMappingURL=isCmcdRequestKey.js.map","/**\n * CMCD v2 - Response-only and timing keys.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_RESPONSE_KEYS = [\n    'cmsdd',\n    'cmsds',\n    'rc',\n    'smrt',\n    'ttfb',\n    'ttfbb',\n    'ttlb',\n    'url',\n];\n//# sourceMappingURL=CMCD_RESPONSE_KEYS.js.map","import { CMCD_COMMON_KEYS } from './CMCD_COMMON_KEYS.js';\nimport { CMCD_REQUEST_KEYS } from './CMCD_REQUEST_KEYS.js';\nimport { CMCD_RESPONSE_KEYS } from './CMCD_RESPONSE_KEYS.js';\nimport { isCmcdCustomKey } from './isCmcdCustomKey.js';\n/**\n * Check if a key is a valid CMCD response key.\n *\n * @param key - The key to check.\n *\n * @returns `true` if the key is a valid CMCD request key, `false` otherwise.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/isCmcdResponseKey.test.ts#example}\n */\nexport function isCmcdResponseKey(key) {\n    return CMCD_COMMON_KEYS.includes(key) ||\n        CMCD_REQUEST_KEYS.includes(key) ||\n        CMCD_RESPONSE_KEYS.includes(key) ||\n        isCmcdCustomKey(key);\n}\n//# sourceMappingURL=isCmcdResponseKey.js.map","/**\n * Defines the keys for CMCD (Common Media Client Data) version 1.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_V1_KEYS = [\n    'bl',\n    'br',\n    'bs',\n    'cid',\n    'd',\n    'dl',\n    'mtp',\n    'nor',\n    'nrr',\n    'ot',\n    'pr',\n    'rtp',\n    'sf',\n    'sid',\n    'st',\n    'su',\n    'tb',\n    'v',\n];\n//# sourceMappingURL=CMCD_V1_KEYS.js.map","import { CMCD_V1_KEYS } from './CMCD_V1_KEYS.js';\nimport { isCmcdCustomKey } from './isCmcdCustomKey.js';\n/**\n * Filter function for CMCD v1 keys.\n *\n * @param key - The CMCD key to filter.\n *\n * @returns `true` if the key should be included, `false` otherwise.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/isCmcdV1Key.test.ts#example}\n */\nexport function isCmcdV1Key(key) {\n    return CMCD_V1_KEYS.includes(key) || isCmcdCustomKey(key);\n}\n//# sourceMappingURL=isCmcdV1Key.js.map","import { isTokenField } from '../cta/utils/isTokenField.js';\nimport { isValid } from '../cta/utils/isValid.js';\nimport { SfToken } from '../structuredfield/SfToken.js';\nimport { CMCD_EVENT_MODE } from './CMCD_EVENT_MODE.js';\nimport { CMCD_FORMATTER_MAP } from './CMCD_FORMATTER_MAP.js';\nimport { CMCD_REQUEST_MODE } from './CMCD_REQUEST_MODE.js';\nimport { CMCD_RESPONSE_MODE } from './CMCD_RESPONSE_MODE.js';\nimport { isCmcdEventKey } from './isCmcdEventKey.js';\nimport { isCmcdRequestKey } from './isCmcdRequestKey.js';\nimport { isCmcdResponseKey } from './isCmcdResponseKey.js';\nimport { isCmcdV1Key } from './isCmcdV1Key.js';\nconst filterMap = {\n    [CMCD_RESPONSE_MODE]: isCmcdResponseKey,\n    [CMCD_EVENT_MODE]: isCmcdEventKey,\n    [CMCD_REQUEST_MODE]: isCmcdRequestKey,\n};\n/**\n * Convert a generic object to CMCD data.\n *\n * @param obj - The CMCD object to process.\n * @param options - Options for encoding.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function prepareCmcdData(obj, options = {}) {\n    const results = {};\n    if (obj == null || typeof obj !== 'object') {\n        return results;\n    }\n    const version = options.version || obj['v'] || 1;\n    const reportingMode = options.reportingMode || CMCD_REQUEST_MODE;\n    const keyFilter = version === 1 ? isCmcdV1Key : filterMap[reportingMode];\n    // Filter keys based on the version, reporting mode and options\n    let keys = Object.keys(obj).filter(keyFilter);\n    const filter = options.filter;\n    if (typeof filter === 'function') {\n        keys = keys.filter(filter);\n    }\n    // Ensure all required keys are present before sorting\n    const needsTimestamp = reportingMode === CMCD_RESPONSE_MODE || reportingMode === CMCD_EVENT_MODE;\n    if (needsTimestamp && !keys.includes('ts')) {\n        keys.push('ts');\n    }\n    if (version > 1 && !keys.includes('v')) {\n        keys.push('v');\n    }\n    const formatters = Object.assign({}, CMCD_FORMATTER_MAP, options.formatters);\n    const formatterOptions = {\n        version,\n        reportingMode,\n        baseUrl: options.baseUrl,\n    };\n    keys.sort().forEach(key => {\n        let value = obj[key];\n        const formatter = formatters[key];\n        if (typeof formatter === 'function') {\n            value = formatter(value, formatterOptions);\n        }\n        // Version should only be reported if not equal to 1.\n        if (key === 'v') {\n            if (version === 1) {\n                return;\n            }\n            else {\n                value = version;\n            }\n        }\n        // Playback rate should only be sent if not equal to 1.\n        if (key == 'pr' && value === 1) {\n            return;\n        }\n        // Ensure a timestamp is set for response and event modes\n        if (needsTimestamp && key === 'ts' && !Number.isFinite(value)) {\n            value = Date.now();\n        }\n        // ignore invalid values\n        if (!isValid(value)) {\n            return;\n        }\n        if (isTokenField(key) && typeof value === 'string') {\n            value = new SfToken(value);\n        }\n        results[key] = value;\n    });\n    return results;\n}\n//# sourceMappingURL=prepareCmcdData.js.map","import { encodeSfDict } from '../structuredfield/encodeSfDict.js';\nimport { groupCmcdHeaders } from './groupCmcdHeaders.js';\nimport { prepareCmcdData } from './prepareCmcdData.js';\n/**\n * Convert a CMCD data object to request headers\n *\n * @param cmcd - The CMCD data object to convert.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The CMCD header shards.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/toCmcdHeaders.test.ts#example}\n */\nexport function toCmcdHeaders(cmcd, options = {}) {\n    const result = {};\n    if (!cmcd) {\n        return result;\n    }\n    const data = prepareCmcdData(cmcd, options);\n    const shards = groupCmcdHeaders(data, options === null || options === void 0 ? void 0 : options.customHeaderMap);\n    return Object.entries(shards)\n        .reduce((acc, [field, value]) => {\n        const shard = encodeSfDict(value, { whitespace: false });\n        if (shard) {\n            acc[field] = shard;\n        }\n        return acc;\n    }, result);\n}\n//# sourceMappingURL=toCmcdHeaders.js.map","import { toCmcdHeaders } from './toCmcdHeaders.js';\n/**\n * Append CMCD query args to a header object.\n *\n * @param headers - The headers to append to.\n * @param cmcd - The CMCD object to append.\n * @param options - Encode options.\n *\n * @returns The headers with the CMCD header shards appended.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/appendCmcdHeaders.test.ts#example}\n */\nexport function appendCmcdHeaders(headers, cmcd, options) {\n    return Object.assign(headers, toCmcdHeaders(cmcd, options));\n}\n//# sourceMappingURL=appendCmcdHeaders.js.map","/**\n * CMCD parameter name.\n *\n * @group CMCD\n *\n * @beta\n */\nexport const CMCD_PARAM = 'CMCD';\n//# sourceMappingURL=CMCD_PARAM.js.map","import { encodeSfDict } from '../structuredfield/encodeSfDict.js';\nimport { prepareCmcdData } from './prepareCmcdData.js';\n/**\n * Encode a CMCD object to a string.\n *\n * @param cmcd - The CMCD object to encode.\n * @param options - Options for encoding.\n *\n * @returns The encoded CMCD string.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/encodeCmcd.test.ts#example}\n */\nexport function encodeCmcd(cmcd, options = {}) {\n    if (!cmcd) {\n        return '';\n    }\n    return encodeSfDict(prepareCmcdData(cmcd, options), { whitespace: false });\n}\n//# sourceMappingURL=encodeCmcd.js.map","import { encodeCmcd } from './encodeCmcd.js';\n/**\n * Convert a CMCD data object to a URL encoded string.\n *\n * @param cmcd - The CMCD object to convert.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The URL encoded CMCD data.\n *\n * @group CMCD\n *\n * @beta\n */\nexport function toCmcdUrl(cmcd, options = {}) {\n    if (!cmcd) {\n        return '';\n    }\n    const params = encodeCmcd(cmcd, options);\n    return encodeURIComponent(params);\n}\n//# sourceMappingURL=toCmcdUrl.js.map","import { CMCD_PARAM } from './CMCD_PARAM.js';\nimport { toCmcdUrl } from './toCmcdUrl.js';\n/**\n * Convert a CMCD data object to a query arg.\n *\n * @param cmcd - The CMCD object to convert.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The CMCD query arg.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/toCmcdQuery.test.ts#example}\n */\nexport function toCmcdQuery(cmcd, options = {}) {\n    if (!cmcd) {\n        return '';\n    }\n    const value = toCmcdUrl(cmcd, options);\n    return `${CMCD_PARAM}=${value}`;\n}\n//# sourceMappingURL=toCmcdQuery.js.map","import { toCmcdQuery } from './toCmcdQuery.js';\nconst REGEX = /CMCD=[^&#]+/;\n/**\n * Append CMCD query args to a URL.\n *\n * @param url - The URL to append to.\n * @param cmcd - The CMCD object to append.\n * @param options - Options for encoding the CMCD object.\n *\n * @returns The URL with the CMCD query args appended.\n *\n * @group CMCD\n *\n * @beta\n *\n * @example\n * {@includeCode ../../test/cmcd/appendCmcdQuery.test.ts#example}\n */\nexport function appendCmcdQuery(url, cmcd, options) {\n    // TODO: Replace with URLSearchParams once we drop Safari < 10.1 & Chrome < 49 support.\n    // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n    const query = toCmcdQuery(cmcd, options);\n    if (!query) {\n        return url;\n    }\n    if (REGEX.test(url)) {\n        return url.replace(REGEX, query);\n    }\n    const separator = url.includes('?') ? '&' : '?';\n    return `${url}${separator}${query}`;\n}\n//# sourceMappingURL=appendCmcdQuery.js.map","import { CmcdObjectType } from '@svta/common-media-library/cmcd/CmcdObjectType';\nimport { CmcdStreamingFormat } from '@svta/common-media-library/cmcd/CmcdStreamingFormat';\nimport { appendCmcdHeaders } from '@svta/common-media-library/cmcd/appendCmcdHeaders';\nimport { appendCmcdQuery } from '@svta/common-media-library/cmcd/appendCmcdQuery';\nimport { Events } from '../events';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport type {\n  FragmentLoaderConstructor,\n  HlsConfig,\n  PlaylistLoaderConstructor,\n} from '../config';\nimport type Hls from '../hls';\nimport type { Fragment, Part } from '../loader/fragment';\nimport type { ExtendedSourceBuffer } from '../types/buffer';\nimport type { ComponentAPI } from '../types/component-api';\nimport type { BufferCreatedData, MediaAttachedData } from '../types/events';\nimport type {\n  FragmentLoaderContext,\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  PlaylistLoaderContext,\n} from '../types/loader';\nimport type { Cmcd } from '@svta/common-media-library/cmcd/Cmcd';\nimport type { CmcdEncodeOptions } from '@svta/common-media-library/cmcd/CmcdEncodeOptions';\n\n/**\n * Controller to deal with Common Media Client Data (CMCD)\n * @see https://cdn.cta.tech/cta/media/media/resources/standards/pdfs/cta-5004-final.pdf\n */\nexport default class CMCDController implements ComponentAPI {\n  private hls: Hls;\n  private config: HlsConfig;\n  private media?: HTMLMediaElement;\n  private sid?: string;\n  private cid?: string;\n  private useHeaders: boolean = false;\n  private includeKeys?: string[];\n  private initialized: boolean = false;\n  private starved: boolean = false;\n  private buffering: boolean = true;\n  private audioBuffer?: ExtendedSourceBuffer;\n  private videoBuffer?: ExtendedSourceBuffer;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    const config = (this.config = hls.config);\n    const { cmcd } = config;\n\n    if (cmcd != null) {\n      config.pLoader = this.createPlaylistLoader();\n      config.fLoader = this.createFragmentLoader();\n\n      this.sid = cmcd.sessionId || hls.sessionId;\n      this.cid = cmcd.contentId;\n      this.useHeaders = cmcd.useHeaders === true;\n      this.includeKeys = cmcd.includeKeys;\n      this.registerListeners();\n    }\n  }\n\n  private registerListeners() {\n    const hls = this.hls;\n    hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n    hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n  }\n\n  private unregisterListeners() {\n    const hls = this.hls;\n    hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n    hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n  }\n\n  destroy() {\n    this.unregisterListeners();\n    this.onMediaDetached();\n\n    // @ts-ignore\n    this.hls = this.config = this.audioBuffer = this.videoBuffer = null;\n    // @ts-ignore\n    this.onWaiting = this.onPlaying = this.media = null;\n  }\n\n  private onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    this.media = data.media;\n    this.media.addEventListener('waiting', this.onWaiting);\n    this.media.addEventListener('playing', this.onPlaying);\n  }\n\n  private onMediaDetached() {\n    if (!this.media) {\n      return;\n    }\n\n    this.media.removeEventListener('waiting', this.onWaiting);\n    this.media.removeEventListener('playing', this.onPlaying);\n\n    // @ts-ignore\n    this.media = null;\n  }\n\n  private onBufferCreated(\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData,\n  ) {\n    this.audioBuffer = data.tracks.audio?.buffer;\n    this.videoBuffer = data.tracks.video?.buffer;\n  }\n\n  private onWaiting = () => {\n    if (this.initialized) {\n      this.starved = true;\n    }\n\n    this.buffering = true;\n  };\n\n  private onPlaying = () => {\n    if (!this.initialized) {\n      this.initialized = true;\n    }\n\n    this.buffering = false;\n  };\n\n  /**\n   * Create baseline CMCD data\n   */\n  private createData(): Cmcd {\n    return {\n      v: 1,\n      sf: CmcdStreamingFormat.HLS,\n      sid: this.sid,\n      cid: this.cid,\n      pr: this.media?.playbackRate,\n      mtp: this.hls.bandwidthEstimate / 1000,\n    };\n  }\n\n  /**\n   * Apply CMCD data to a request.\n   */\n  private apply(context: LoaderContext, data: Cmcd = {}) {\n    // apply baseline data\n    Object.assign(data, this.createData());\n\n    const isVideo =\n      data.ot === CmcdObjectType.INIT ||\n      data.ot === CmcdObjectType.VIDEO ||\n      data.ot === CmcdObjectType.MUXED;\n\n    if (this.starved && isVideo) {\n      data.bs = true;\n      data.su = true;\n      this.starved = false;\n    }\n\n    if (data.su == null) {\n      data.su = this.buffering;\n    }\n\n    // TODO: Implement rtp, nrr, dl\n\n    const { includeKeys } = this;\n    if (includeKeys) {\n      data = Object.keys(data).reduce((acc, key) => {\n        includeKeys.includes(key) && (acc[key] = data[key]);\n        return acc;\n      }, {});\n    }\n\n    const options: CmcdEncodeOptions = { baseUrl: context.url };\n\n    if (this.useHeaders) {\n      if (!context.headers) {\n        context.headers = {};\n      }\n\n      appendCmcdHeaders(context.headers, data, options);\n    } else {\n      context.url = appendCmcdQuery(context.url, data, options);\n    }\n  }\n\n  /**\n   * Apply CMCD data to a manifest request.\n   */\n  private applyPlaylistData = (context: PlaylistLoaderContext) => {\n    try {\n      this.apply(context, {\n        ot: CmcdObjectType.MANIFEST,\n        su: !this.initialized,\n      });\n    } catch (error) {\n      this.hls.logger.warn('Could not generate manifest CMCD data.', error);\n    }\n  };\n\n  /**\n   * Apply CMCD data to a segment request\n   */\n  private applyFragmentData = (context: FragmentLoaderContext) => {\n    try {\n      const { frag, part } = context;\n      const level = this.hls.levels[frag.level];\n      const ot = this.getObjectType(frag);\n      const data: Cmcd = { d: (part || frag).duration * 1000, ot };\n\n      if (\n        ot === CmcdObjectType.VIDEO ||\n        ot === CmcdObjectType.AUDIO ||\n        ot == CmcdObjectType.MUXED\n      ) {\n        data.br = level.bitrate / 1000;\n        data.tb = this.getTopBandwidth(ot) / 1000;\n        data.bl = this.getBufferLength(ot);\n      }\n\n      const next = part ? this.getNextPart(part) : this.getNextFrag(frag);\n\n      if (next?.url && next.url !== frag.url) {\n        data.nor = next.url;\n      }\n\n      this.apply(context, data);\n    } catch (error) {\n      this.hls.logger.warn('Could not generate segment CMCD data.', error);\n    }\n  };\n\n  private getNextFrag(fragment: Fragment): Fragment | undefined {\n    const levelDetails = this.hls.levels[fragment.level]?.details;\n    if (levelDetails) {\n      const index = (fragment.sn as number) - levelDetails.startSN;\n      return levelDetails.fragments[index + 1];\n    }\n\n    return undefined;\n  }\n\n  private getNextPart(part: Part): Part | undefined {\n    const { index, fragment } = part;\n    const partList = this.hls.levels[fragment.level]?.details?.partList;\n\n    if (partList) {\n      const { sn } = fragment;\n      for (let i = partList.length - 1; i >= 0; i--) {\n        const p = partList[i];\n        if (p.index === index && p.fragment.sn === sn) {\n          return partList[i + 1];\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * The CMCD object type.\n   */\n  private getObjectType(fragment: Fragment): CmcdObjectType | undefined {\n    const { type } = fragment;\n\n    if (type === 'subtitle') {\n      return CmcdObjectType.TIMED_TEXT;\n    }\n\n    if (fragment.sn === 'initSegment') {\n      return CmcdObjectType.INIT;\n    }\n\n    if (type === 'audio') {\n      return CmcdObjectType.AUDIO;\n    }\n\n    if (type === 'main') {\n      if (!this.hls.audioTracks.length) {\n        return CmcdObjectType.MUXED;\n      }\n\n      return CmcdObjectType.VIDEO;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get the highest bitrate.\n   */\n  private getTopBandwidth(type: CmcdObjectType) {\n    let bitrate: number = 0;\n    let levels;\n    const hls = this.hls;\n\n    if (type === CmcdObjectType.AUDIO) {\n      levels = hls.audioTracks;\n    } else {\n      const max = hls.maxAutoLevel;\n      const len = max > -1 ? max + 1 : hls.levels.length;\n      levels = hls.levels.slice(0, len);\n    }\n\n    levels.forEach((level) => {\n      if (level.bitrate > bitrate) {\n        bitrate = level.bitrate;\n      }\n    });\n\n    return bitrate > 0 ? bitrate : NaN;\n  }\n\n  /**\n   * Get the buffer length for a media type in milliseconds\n   */\n  private getBufferLength(type: CmcdObjectType) {\n    const media = this.media;\n    const buffer =\n      type === CmcdObjectType.AUDIO ? this.audioBuffer : this.videoBuffer;\n\n    if (!buffer || !media) {\n      return NaN;\n    }\n\n    const info = BufferHelper.bufferInfo(\n      buffer,\n      media.currentTime,\n      this.config.maxBufferHole,\n    );\n\n    return info.len * 1000;\n  }\n\n  /**\n   * Create a playlist loader\n   */\n  private createPlaylistLoader(): PlaylistLoaderConstructor | undefined {\n    const { pLoader } = this.config;\n    const apply = this.applyPlaylistData;\n    const Ctor = pLoader || (this.config.loader as PlaylistLoaderConstructor);\n\n    return class CmcdPlaylistLoader {\n      private loader: Loader<PlaylistLoaderContext>;\n\n      constructor(config: HlsConfig) {\n        this.loader = new Ctor(config);\n      }\n\n      get stats() {\n        return this.loader.stats;\n      }\n\n      get context() {\n        return this.loader.context;\n      }\n\n      destroy() {\n        this.loader.destroy();\n      }\n\n      abort() {\n        this.loader.abort();\n      }\n\n      load(\n        context: PlaylistLoaderContext,\n        config: LoaderConfiguration,\n        callbacks: LoaderCallbacks<PlaylistLoaderContext>,\n      ) {\n        apply(context);\n        this.loader.load(context, config, callbacks);\n      }\n    };\n  }\n\n  /**\n   * Create a playlist loader\n   */\n  private createFragmentLoader(): FragmentLoaderConstructor | undefined {\n    const { fLoader } = this.config;\n    const apply = this.applyFragmentData;\n    const Ctor = fLoader || (this.config.loader as FragmentLoaderConstructor);\n\n    return class CmcdFragmentLoader {\n      private loader: Loader<FragmentLoaderContext>;\n\n      constructor(config: HlsConfig) {\n        this.loader = new Ctor(config);\n      }\n\n      get stats() {\n        return this.loader.stats;\n      }\n\n      get context() {\n        return this.loader.context;\n      }\n\n      destroy() {\n        this.loader.destroy();\n      }\n\n      abort() {\n        this.loader.abort();\n      }\n\n      load(\n        context: FragmentLoaderContext,\n        config: LoaderConfiguration,\n        callbacks: LoaderCallbacks<FragmentLoaderContext>,\n      ) {\n        apply(context);\n        this.loader.load(context, config, callbacks);\n      }\n    };\n  }\n}\n","import { ErrorActionFlags, NetworkErrorAction } from './error-controller';\nimport { ErrorDetails } from '../errors';\nimport { Events } from '../events';\nimport { Level } from '../types/level';\nimport {\n  type Loader,\n  type LoaderCallbacks,\n  type LoaderConfiguration,\n  type LoaderContext,\n  type LoaderResponse,\n  type LoaderStats,\n  PlaylistContextType,\n} from '../types/loader';\nimport { AttrList } from '../utils/attr-list';\nimport { reassignFragmentLevelIndexes } from '../utils/level-helper';\nimport { Logger } from '../utils/logger';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type { RetryConfig } from '../config';\nimport type Hls from '../hls';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  ErrorData,\n  ManifestLoadedData,\n  ManifestParsedData,\n  SteeringManifestLoadedData,\n} from '../types/events';\nimport type { MediaAttributes, MediaPlaylist } from '../types/media-playlist';\n\nexport type SteeringManifest = {\n  VERSION: 1;\n  TTL: number;\n  'RELOAD-URI'?: string;\n  'PATHWAY-PRIORITY': string[];\n  'PATHWAY-CLONES'?: PathwayClone[];\n};\n\nexport type PathwayClone = {\n  'BASE-ID': string;\n  ID: string;\n  'URI-REPLACEMENT': UriReplacement;\n};\n\nexport type UriReplacement = {\n  HOST?: string;\n  PARAMS?: { [queryParameter: string]: string };\n  'PER-VARIANT-URIS'?: { [stableVariantId: string]: string };\n  'PER-RENDITION-URIS'?: { [stableRenditionId: string]: string };\n};\n\nconst PATHWAY_PENALTY_DURATION_MS = 300000;\n\nexport default class ContentSteeringController\n  extends Logger\n  implements NetworkComponentAPI\n{\n  private readonly hls: Hls;\n  private loader: Loader<LoaderContext> | null = null;\n  private uri: string | null = null;\n  private pathwayId: string = '.';\n  private _pathwayPriority: string[] | null = null;\n  private timeToLoad: number = 300;\n  private reloadTimer: number = -1;\n  private updated: number = 0;\n  private started: boolean = false;\n  private enabled: boolean = true;\n  private levels: Level[] | null = null;\n  private audioTracks: MediaPlaylist[] | null = null;\n  private subtitleTracks: MediaPlaylist[] | null = null;\n  private penalizedPathways: { [pathwayId: string]: number } = {};\n\n  constructor(hls: Hls) {\n    super('content-steering', hls.logger);\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  private registerListeners() {\n    const hls = this.hls;\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private unregisterListeners() {\n    const hls = this.hls;\n    if (!hls) {\n      return;\n    }\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  pathways() {\n    return (this.levels || []).reduce((pathways, level) => {\n      if (pathways.indexOf(level.pathwayId) === -1) {\n        pathways.push(level.pathwayId);\n      }\n      return pathways;\n    }, [] as string[]);\n  }\n\n  get pathwayPriority(): string[] | null {\n    return this._pathwayPriority;\n  }\n\n  set pathwayPriority(pathwayPriority: string[]) {\n    this.updatePathwayPriority(pathwayPriority);\n  }\n\n  startLoad() {\n    this.started = true;\n    this.clearTimeout();\n    if (this.enabled && this.uri) {\n      if (this.updated) {\n        const ttl = this.timeToLoad * 1000 - (performance.now() - this.updated);\n        if (ttl > 0) {\n          this.scheduleRefresh(this.uri, ttl);\n          return;\n        }\n      }\n      this.loadSteeringManifest(this.uri);\n    }\n  }\n\n  stopLoad() {\n    this.started = false;\n    if (this.loader) {\n      this.loader.destroy();\n      this.loader = null;\n    }\n    this.clearTimeout();\n  }\n\n  clearTimeout() {\n    if (this.reloadTimer !== -1) {\n      self.clearTimeout(this.reloadTimer);\n      this.reloadTimer = -1;\n    }\n  }\n\n  destroy() {\n    this.unregisterListeners();\n    this.stopLoad();\n    // @ts-ignore\n    this.hls = null;\n    this.levels = this.audioTracks = this.subtitleTracks = null;\n  }\n\n  removeLevel(levelToRemove: Level) {\n    const levels = this.levels;\n    if (levels) {\n      this.levels = levels.filter((level) => level !== levelToRemove);\n    }\n  }\n\n  private onManifestLoading() {\n    this.stopLoad();\n    this.enabled = true;\n    this.timeToLoad = 300;\n    this.updated = 0;\n    this.uri = null;\n    this.pathwayId = '.';\n    this.levels = this.audioTracks = this.subtitleTracks = null;\n  }\n\n  private onManifestLoaded(\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ) {\n    const { contentSteering } = data;\n    if (contentSteering === null) {\n      return;\n    }\n    this.pathwayId = contentSteering.pathwayId;\n    this.uri = contentSteering.uri;\n    if (this.started) {\n      this.startLoad();\n    }\n  }\n\n  private onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) {\n    this.audioTracks = data.audioTracks;\n    this.subtitleTracks = data.subtitleTracks;\n  }\n\n  private onError(event: Events.ERROR, data: ErrorData) {\n    const { errorAction } = data;\n    if (\n      errorAction?.action === NetworkErrorAction.SendAlternateToPenaltyBox &&\n      errorAction.flags === ErrorActionFlags.MoveAllAlternatesMatchingHost\n    ) {\n      const levels = this.levels;\n      let pathwayPriority = this._pathwayPriority;\n      let errorPathway = this.pathwayId;\n      if (data.context) {\n        const { groupId, pathwayId, type } = data.context;\n        if (groupId && levels) {\n          errorPathway = this.getPathwayForGroupId(groupId, type, errorPathway);\n        } else if (pathwayId) {\n          errorPathway = pathwayId;\n        }\n      }\n      if (!(errorPathway in this.penalizedPathways)) {\n        this.penalizedPathways[errorPathway] = performance.now();\n      }\n      if (!pathwayPriority && levels) {\n        // If PATHWAY-PRIORITY was not provided, list pathways for error handling\n        pathwayPriority = this.pathways();\n      }\n      if (pathwayPriority && pathwayPriority.length > 1) {\n        this.updatePathwayPriority(pathwayPriority);\n        errorAction.resolved = this.pathwayId !== errorPathway;\n      }\n      if (data.details === ErrorDetails.BUFFER_APPEND_ERROR && !data.fatal) {\n        // Error will become fatal in buffer-controller when reaching `appendErrorMaxRetry`\n        // Stream-controllers are expected to reduce buffer length even if this is not deemed a QuotaExceededError\n        errorAction.resolved = true;\n      } else if (!errorAction.resolved) {\n        this.warn(\n          `Could not resolve ${data.details} (\"${\n            data.error.message\n          }\") with content-steering for Pathway: ${errorPathway} levels: ${\n            levels ? levels.length : levels\n          } priorities: ${stringify(\n            pathwayPriority,\n          )} penalized: ${stringify(this.penalizedPathways)}`,\n        );\n      }\n    }\n  }\n\n  public filterParsedLevels(levels: Level[]): Level[] {\n    // Filter levels to only include those that are in the initial pathway\n    this.levels = levels;\n    let pathwayLevels = this.getLevelsForPathway(this.pathwayId);\n    if (pathwayLevels.length === 0) {\n      const pathwayId = levels[0].pathwayId;\n      this.log(\n        `No levels found in Pathway ${this.pathwayId}. Setting initial Pathway to \"${pathwayId}\"`,\n      );\n      pathwayLevels = this.getLevelsForPathway(pathwayId);\n      this.pathwayId = pathwayId;\n    }\n    if (pathwayLevels.length !== levels.length) {\n      this.log(\n        `Found ${pathwayLevels.length}/${levels.length} levels in Pathway \"${this.pathwayId}\"`,\n      );\n    }\n    return pathwayLevels;\n  }\n\n  private getLevelsForPathway(pathwayId: string): Level[] {\n    if (this.levels === null) {\n      return [];\n    }\n    return this.levels.filter((level) => pathwayId === level.pathwayId);\n  }\n\n  private updatePathwayPriority(pathwayPriority: string[]) {\n    this._pathwayPriority = pathwayPriority;\n    let levels: Level[] | undefined;\n\n    // Evaluate if we should remove the pathway from the penalized list\n    const penalizedPathways = this.penalizedPathways;\n    const now = performance.now();\n    Object.keys(penalizedPathways).forEach((pathwayId) => {\n      if (now - penalizedPathways[pathwayId] > PATHWAY_PENALTY_DURATION_MS) {\n        delete penalizedPathways[pathwayId];\n      }\n    });\n    for (let i = 0; i < pathwayPriority.length; i++) {\n      const pathwayId = pathwayPriority[i];\n      if (pathwayId in penalizedPathways) {\n        continue;\n      }\n      if (pathwayId === this.pathwayId) {\n        return;\n      }\n      const selectedIndex = this.hls.nextLoadLevel;\n      const selectedLevel: Level = this.hls.levels[selectedIndex];\n      levels = this.getLevelsForPathway(pathwayId);\n      if (levels.length > 0) {\n        this.log(`Setting Pathway to \"${pathwayId}\"`);\n        this.pathwayId = pathwayId;\n        reassignFragmentLevelIndexes(levels);\n        this.hls.trigger(Events.LEVELS_UPDATED, { levels });\n        // Set LevelController's level to trigger LEVEL_SWITCHING which loads playlist if needed\n        const levelAfterChange = this.hls.levels[selectedIndex];\n        if (selectedLevel && levelAfterChange && this.levels) {\n          if (\n            levelAfterChange.attrs['STABLE-VARIANT-ID'] !==\n              selectedLevel.attrs['STABLE-VARIANT-ID'] &&\n            levelAfterChange.bitrate !== selectedLevel.bitrate\n          ) {\n            this.log(\n              `Unstable Pathways change from bitrate ${selectedLevel.bitrate} to ${levelAfterChange.bitrate}`,\n            );\n          }\n          this.hls.nextLoadLevel = selectedIndex;\n        }\n        break;\n      }\n    }\n  }\n\n  private getPathwayForGroupId(\n    groupId: string,\n    type: PlaylistContextType,\n    defaultPathway: string,\n  ): string {\n    const levels = this.getLevelsForPathway(defaultPathway).concat(\n      this.levels || [],\n    );\n    for (let i = 0; i < levels.length; i++) {\n      if (\n        (type === PlaylistContextType.AUDIO_TRACK &&\n          levels[i].hasAudioGroup(groupId)) ||\n        (type === PlaylistContextType.SUBTITLE_TRACK &&\n          levels[i].hasSubtitleGroup(groupId))\n      ) {\n        return levels[i].pathwayId;\n      }\n    }\n    return defaultPathway;\n  }\n\n  private clonePathways(pathwayClones: PathwayClone[]) {\n    const levels = this.levels;\n    if (!levels) {\n      return;\n    }\n    const audioGroupCloneMap: Record<string, string> = {};\n    const subtitleGroupCloneMap: Record<string, string> = {};\n    pathwayClones.forEach((pathwayClone) => {\n      const {\n        ID: cloneId,\n        'BASE-ID': baseId,\n        'URI-REPLACEMENT': uriReplacement,\n      } = pathwayClone;\n      if (levels.some((level) => level.pathwayId === cloneId)) {\n        return;\n      }\n      const clonedVariants = this.getLevelsForPathway(baseId).map(\n        (baseLevel) => {\n          const attributes = new AttrList(baseLevel.attrs);\n          attributes['PATHWAY-ID'] = cloneId;\n          const clonedAudioGroupId: string | undefined =\n            attributes.AUDIO && `${attributes.AUDIO}_clone_${cloneId}`;\n          const clonedSubtitleGroupId: string | undefined =\n            attributes.SUBTITLES && `${attributes.SUBTITLES}_clone_${cloneId}`;\n          if (clonedAudioGroupId) {\n            audioGroupCloneMap[attributes.AUDIO] = clonedAudioGroupId;\n            attributes.AUDIO = clonedAudioGroupId;\n          }\n          if (clonedSubtitleGroupId) {\n            subtitleGroupCloneMap[attributes.SUBTITLES] = clonedSubtitleGroupId;\n            attributes.SUBTITLES = clonedSubtitleGroupId;\n          }\n          const url = performUriReplacement(\n            baseLevel.uri,\n            attributes['STABLE-VARIANT-ID'],\n            'PER-VARIANT-URIS',\n            uriReplacement,\n          );\n          const clonedLevel = new Level({\n            attrs: attributes,\n            audioCodec: baseLevel.audioCodec,\n            bitrate: baseLevel.bitrate,\n            height: baseLevel.height,\n            name: baseLevel.name,\n            url,\n            videoCodec: baseLevel.videoCodec,\n            width: baseLevel.width,\n          });\n          if (baseLevel.audioGroups) {\n            for (let i = 1; i < baseLevel.audioGroups.length; i++) {\n              clonedLevel.addGroupId(\n                'audio',\n                `${baseLevel.audioGroups[i]}_clone_${cloneId}`,\n              );\n            }\n          }\n          if (baseLevel.subtitleGroups) {\n            for (let i = 1; i < baseLevel.subtitleGroups.length; i++) {\n              clonedLevel.addGroupId(\n                'text',\n                `${baseLevel.subtitleGroups[i]}_clone_${cloneId}`,\n              );\n            }\n          }\n          return clonedLevel;\n        },\n      );\n      levels.push(...clonedVariants);\n      cloneRenditionGroups(\n        this.audioTracks,\n        audioGroupCloneMap,\n        uriReplacement,\n        cloneId,\n      );\n      cloneRenditionGroups(\n        this.subtitleTracks,\n        subtitleGroupCloneMap,\n        uriReplacement,\n        cloneId,\n      );\n    });\n  }\n\n  private loadSteeringManifest(uri: string) {\n    const config = this.hls.config;\n    const Loader = config.loader;\n    if (this.loader) {\n      this.loader.destroy();\n    }\n    this.loader = new Loader(config) as Loader<LoaderContext>;\n\n    let url: URL;\n    try {\n      url = new self.URL(uri);\n    } catch (error) {\n      this.enabled = false;\n      this.log(`Failed to parse Steering Manifest URI: ${uri}`);\n      return;\n    }\n    if (url.protocol !== 'data:') {\n      const throughput =\n        (this.hls.bandwidthEstimate || config.abrEwmaDefaultEstimate) | 0;\n      url.searchParams.set('_HLS_pathway', this.pathwayId);\n      url.searchParams.set('_HLS_throughput', '' + throughput);\n    }\n    const context: LoaderContext = {\n      responseType: 'json',\n      url: url.href,\n    };\n\n    const loadPolicy = config.steeringManifestLoadPolicy.default;\n    const legacyRetryCompatibility: RetryConfig | Record<string, void> =\n      loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};\n    const loaderConfig: LoaderConfiguration = {\n      loadPolicy,\n      timeout: loadPolicy.maxLoadTimeMs,\n      maxRetry: legacyRetryCompatibility.maxNumRetry || 0,\n      retryDelay: legacyRetryCompatibility.retryDelayMs || 0,\n      maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0,\n    };\n\n    const callbacks: LoaderCallbacks<LoaderContext> = {\n      onSuccess: (\n        response: LoaderResponse,\n        stats: LoaderStats,\n        context: LoaderContext,\n        networkDetails: any,\n      ) => {\n        this.log(`Loaded steering manifest: \"${url}\"`);\n        const steeringData = response.data as SteeringManifest;\n        if (steeringData?.VERSION !== 1) {\n          this.log(`Steering VERSION ${steeringData.VERSION} not supported!`);\n          return;\n        }\n        this.updated = performance.now();\n        this.timeToLoad = steeringData.TTL;\n        const {\n          'RELOAD-URI': reloadUri,\n          'PATHWAY-CLONES': pathwayClones,\n          'PATHWAY-PRIORITY': pathwayPriority,\n        } = steeringData;\n        if (reloadUri) {\n          try {\n            this.uri = new self.URL(reloadUri, url).href;\n          } catch (error) {\n            this.enabled = false;\n            this.log(\n              `Failed to parse Steering Manifest RELOAD-URI: ${reloadUri}`,\n            );\n            return;\n          }\n        }\n        this.scheduleRefresh(this.uri || context.url);\n        if (pathwayClones) {\n          this.clonePathways(pathwayClones);\n        }\n\n        const loadedSteeringData: SteeringManifestLoadedData = {\n          steeringManifest: steeringData,\n          url: url.toString(),\n        };\n        this.hls.trigger(Events.STEERING_MANIFEST_LOADED, loadedSteeringData);\n\n        if (pathwayPriority) {\n          this.updatePathwayPriority(pathwayPriority);\n        }\n      },\n\n      onError: (\n        error: { code: number; text: string },\n        context: LoaderContext,\n        networkDetails: any,\n        stats: LoaderStats,\n      ) => {\n        this.log(\n          `Error loading steering manifest: ${error.code} ${error.text} (${context.url})`,\n        );\n        this.stopLoad();\n        if (error.code === 410) {\n          this.enabled = false;\n          this.log(`Steering manifest ${context.url} no longer available`);\n          return;\n        }\n        let ttl = this.timeToLoad * 1000;\n        if (error.code === 429) {\n          const loader = this.loader;\n          if (typeof loader?.getResponseHeader === 'function') {\n            const retryAfter = loader.getResponseHeader('Retry-After');\n            if (retryAfter) {\n              ttl = parseFloat(retryAfter) * 1000;\n            }\n          }\n          this.log(`Steering manifest ${context.url} rate limited`);\n          return;\n        }\n        this.scheduleRefresh(this.uri || context.url, ttl);\n      },\n\n      onTimeout: (\n        stats: LoaderStats,\n        context: LoaderContext,\n        networkDetails: any,\n      ) => {\n        this.log(`Timeout loading steering manifest (${context.url})`);\n        this.scheduleRefresh(this.uri || context.url);\n      },\n    };\n\n    this.log(`Requesting steering manifest: ${url}`);\n    this.loader.load(context, loaderConfig, callbacks);\n  }\n\n  private scheduleRefresh(uri: string, ttlMs: number = this.timeToLoad * 1000) {\n    this.clearTimeout();\n    this.reloadTimer = self.setTimeout(() => {\n      const media = this.hls?.media;\n      if (media && !media.ended) {\n        this.loadSteeringManifest(uri);\n        return;\n      }\n      this.scheduleRefresh(uri, this.timeToLoad * 1000);\n    }, ttlMs);\n  }\n}\n\nfunction cloneRenditionGroups(\n  tracks: MediaPlaylist[] | null,\n  groupCloneMap: Record<string, string>,\n  uriReplacement: UriReplacement,\n  cloneId: string,\n) {\n  if (!tracks) {\n    return;\n  }\n  Object.keys(groupCloneMap).forEach((audioGroupId) => {\n    const clonedTracks = tracks\n      .filter((track) => track.groupId === audioGroupId)\n      .map((track) => {\n        const clonedTrack = Object.assign({}, track);\n        clonedTrack.details = undefined;\n        clonedTrack.attrs = new AttrList(clonedTrack.attrs) as MediaAttributes;\n        clonedTrack.url = clonedTrack.attrs.URI = performUriReplacement(\n          track.url,\n          track.attrs['STABLE-RENDITION-ID'],\n          'PER-RENDITION-URIS',\n          uriReplacement,\n        );\n        clonedTrack.groupId = clonedTrack.attrs['GROUP-ID'] =\n          groupCloneMap[audioGroupId];\n        clonedTrack.attrs['PATHWAY-ID'] = cloneId;\n        return clonedTrack;\n      });\n    tracks.push(...clonedTracks);\n  });\n}\n\nfunction performUriReplacement(\n  uri: string,\n  stableId: string | undefined,\n  perOptionKey: 'PER-VARIANT-URIS' | 'PER-RENDITION-URIS',\n  uriReplacement: UriReplacement,\n): string {\n  const {\n    HOST: host,\n    PARAMS: params,\n    [perOptionKey]: perOptionUris,\n  } = uriReplacement;\n  let perVariantUri;\n  if (stableId) {\n    perVariantUri = perOptionUris?.[stableId];\n    if (perVariantUri) {\n      uri = perVariantUri;\n    }\n  }\n  const url = new self.URL(uri);\n  if (host && !perVariantUri) {\n    url.host = host;\n  }\n  if (params) {\n    Object.keys(params)\n      .sort()\n      .forEach((key) => {\n        if (key) {\n          url.searchParams.set(key, params[key]);\n        }\n      });\n  }\n  return url.href;\n}\n","/**\n * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>\n *\n * DRM support for Hls.js\n */\nimport { EventEmitter } from 'eventemitter3';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { LevelKey } from '../loader/level-key';\nimport { arrayValuesMatch } from '../utils/arrays';\nimport {\n  addEventListener,\n  removeEventListener,\n} from '../utils/event-listener-helper';\nimport { arrayToHex } from '../utils/hex';\nimport { changeEndianness } from '../utils/keysystem-util';\nimport { Logger } from '../utils/logger';\nimport {\n  getKeySystemsForConfig,\n  getSupportedMediaKeySystemConfigurations,\n  isPersistentSessionType,\n  keySystemDomainToKeySystemFormat,\n  keySystemFormatToKeySystemDomain,\n  KeySystems,\n  requestMediaKeySystemAccess,\n} from '../utils/mediakeys-helper';\nimport { bin2str, parseSinf } from '../utils/mp4-tools';\nimport { base64Decode } from '../utils/numeric-encoding-utils';\nimport { stringify } from '../utils/safe-json-stringify';\nimport { strToUtf8array } from '../utils/utf8-utils';\nimport type { EMEControllerConfig, HlsConfig, LoadPolicy } from '../config';\nimport type Hls from '../hls';\nimport type { Fragment } from '../loader/fragment';\nimport type { DecryptData } from '../loader/level-key';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  ErrorData,\n  KeyLoadedData,\n  ManifestLoadedData,\n  MediaAttachedData,\n} from '../types/events';\nimport type {\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n} from '../types/loader';\nimport type { KeySystemFormats } from '../utils/mediakeys-helper';\n\ninterface KeySystemAccessPromises {\n  keySystemAccess: Promise<MediaKeySystemAccess>;\n  mediaKeys?: Promise<MediaKeys>;\n  certificate?: Promise<BufferSource | void>;\n  hasMediaKeys?: boolean;\n}\n\nexport interface MediaKeySessionContext {\n  keySystem: KeySystems;\n  mediaKeys: MediaKeys;\n  decryptdata: LevelKey;\n  mediaKeysSession: MediaKeySession;\n  keyStatus?: MediaKeyStatus;\n  keyStatusTimeouts?: { [keyId: string]: number };\n  licenseXhr?: XMLHttpRequest;\n  _onmessage?: (this: MediaKeySession, ev: MediaKeyMessageEvent) => any;\n  _onkeystatuseschange?: (this: MediaKeySession, ev: Event) => any;\n}\n\n/**\n * Controller to deal with encrypted media extensions (EME)\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API\n *\n * @class\n * @constructor\n */\nclass EMEController extends Logger implements ComponentAPI {\n  public static CDMCleanupPromise: Promise<void> | void;\n\n  private readonly hls: Hls;\n  private readonly config: EMEControllerConfig & {\n    loader: { new (confg: HlsConfig): Loader<LoaderContext> };\n    certLoadPolicy: LoadPolicy;\n    keyLoadPolicy: LoadPolicy;\n  };\n  private media: HTMLMediaElement | null = null;\n  private keyFormatPromise: Promise<KeySystemFormats> | null = null;\n  private keySystemAccessPromises: {\n    [keysystem: string]: KeySystemAccessPromises | undefined;\n  } = {};\n  private _requestLicenseFailureCount: number = 0;\n  private mediaKeySessions: MediaKeySessionContext[] = [];\n  private keyIdToKeySessionPromise: {\n    [keyId: string]: Promise<MediaKeySessionContext> | undefined;\n  } = {};\n  private mediaKeys: MediaKeys | null = null;\n  private setMediaKeysQueue: Promise<void>[] = EMEController.CDMCleanupPromise\n    ? [EMEController.CDMCleanupPromise]\n    : [];\n  private bannedKeyIds: { [keyId: string]: MediaKeyStatus | undefined } = {};\n\n  constructor(hls: Hls) {\n    super('eme', hls.logger);\n    this.hls = hls;\n    this.config = hls.config;\n    this.registerListeners();\n  }\n\n  public destroy() {\n    this.onDestroying();\n    this.onMediaDetached();\n    // Remove any references that could be held in config options or callbacks\n    const config = this.config;\n    config.requestMediaKeySystemAccessFunc = null;\n    config.licenseXhrSetup = config.licenseResponseCallback = undefined;\n    config.drmSystems = config.drmSystemOptions = {};\n    // @ts-ignore\n    this.hls = this.config = this.keyIdToKeySessionPromise = null;\n    // @ts-ignore\n    this.onMediaEncrypted = this.onWaitingForKey = null;\n  }\n\n  private registerListeners() {\n    this.hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    this.hls.on(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n    this.hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    this.hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    this.hls.on(Events.DESTROYING, this.onDestroying, this);\n  }\n\n  private unregisterListeners() {\n    this.hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    this.hls.off(Events.MEDIA_DETACHED, this.onMediaDetached, this);\n    this.hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    this.hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    this.hls.off(Events.DESTROYING, this.onDestroying, this);\n  }\n\n  private getLicenseServerUrl(keySystem: KeySystems): string | undefined {\n    const { drmSystems, widevineLicenseUrl } = this.config;\n    const keySystemConfiguration = drmSystems?.[keySystem];\n\n    if (keySystemConfiguration) {\n      return keySystemConfiguration.licenseUrl;\n    }\n\n    // For backward compatibility\n    if (keySystem === KeySystems.WIDEVINE && widevineLicenseUrl) {\n      return widevineLicenseUrl;\n    }\n  }\n\n  private getLicenseServerUrlOrThrow(keySystem: KeySystems): string | never {\n    const url = this.getLicenseServerUrl(keySystem);\n    if (url === undefined) {\n      throw new Error(\n        `no license server URL configured for key-system \"${keySystem}\"`,\n      );\n    }\n    return url;\n  }\n\n  private getServerCertificateUrl(keySystem: KeySystems): string | void {\n    const { drmSystems } = this.config;\n    const keySystemConfiguration = drmSystems?.[keySystem];\n\n    if (keySystemConfiguration) {\n      return keySystemConfiguration.serverCertificateUrl;\n    } else {\n      this.log(`No Server Certificate in config.drmSystems[\"${keySystem}\"]`);\n    }\n  }\n\n  private attemptKeySystemAccess(\n    keySystemsToAttempt: KeySystems[],\n  ): Promise<{ keySystem: KeySystems; mediaKeys: MediaKeys }> {\n    const levels = this.hls.levels;\n    const uniqueCodec = (value: string | undefined, i, a): value is string =>\n      !!value && a.indexOf(value) === i;\n    const audioCodecs = levels\n      .map((level) => level.audioCodec)\n      .filter(uniqueCodec);\n    const videoCodecs = levels\n      .map((level) => level.videoCodec)\n      .filter(uniqueCodec);\n    if (audioCodecs.length + videoCodecs.length === 0) {\n      videoCodecs.push('avc1.42e01e');\n    }\n\n    return new Promise(\n      (\n        resolve: (result: {\n          keySystem: KeySystems;\n          mediaKeys: MediaKeys;\n        }) => void,\n        reject: (Error) => void,\n      ) => {\n        const attempt = (keySystems) => {\n          const keySystem = keySystems.shift();\n          this.getMediaKeysPromise(keySystem, audioCodecs, videoCodecs)\n            .then((mediaKeys) => resolve({ keySystem, mediaKeys }))\n            .catch((error) => {\n              if (keySystems.length) {\n                attempt(keySystems);\n              } else if (error instanceof EMEKeyError) {\n                reject(error);\n              } else {\n                reject(\n                  new EMEKeyError(\n                    {\n                      type: ErrorTypes.KEY_SYSTEM_ERROR,\n                      details: ErrorDetails.KEY_SYSTEM_NO_ACCESS,\n                      error,\n                      fatal: true,\n                    },\n                    error.message,\n                  ),\n                );\n              }\n            });\n        };\n        attempt(keySystemsToAttempt);\n      },\n    );\n  }\n\n  private requestMediaKeySystemAccess(\n    keySystem: KeySystems,\n    supportedConfigurations: MediaKeySystemConfiguration[],\n  ): Promise<MediaKeySystemAccess> {\n    const { requestMediaKeySystemAccessFunc } = this.config;\n    if (!(typeof requestMediaKeySystemAccessFunc === 'function')) {\n      let errMessage = `Configured requestMediaKeySystemAccess is not a function ${requestMediaKeySystemAccessFunc}`;\n      if (\n        requestMediaKeySystemAccess === null &&\n        self.location.protocol === 'http:'\n      ) {\n        errMessage = `navigator.requestMediaKeySystemAccess is not available over insecure protocol ${location.protocol}`;\n      }\n      return Promise.reject(new Error(errMessage));\n    }\n\n    return requestMediaKeySystemAccessFunc(keySystem, supportedConfigurations);\n  }\n\n  private getMediaKeysPromise(\n    keySystem: KeySystems,\n    audioCodecs: string[],\n    videoCodecs: string[],\n  ): Promise<MediaKeys> {\n    // This can throw, but is caught in event handler callpath\n    const mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(\n      keySystem,\n      audioCodecs,\n      videoCodecs,\n      this.config.drmSystemOptions || {},\n    );\n    let keySystemAccessPromises = this.keySystemAccessPromises[keySystem];\n    let keySystemAccess = keySystemAccessPromises?.keySystemAccess;\n    if (!keySystemAccess) {\n      this.log(\n        `Requesting encrypted media \"${keySystem}\" key-system access with config: ${stringify(\n          mediaKeySystemConfigs,\n        )}`,\n      );\n      keySystemAccess = this.requestMediaKeySystemAccess(\n        keySystem,\n        mediaKeySystemConfigs,\n      );\n      const keySystemAccessPromisesNew = (keySystemAccessPromises =\n        this.keySystemAccessPromises[keySystem] =\n          {\n            keySystemAccess,\n          }) as KeySystemAccessPromises;\n      keySystemAccess.catch((error) => {\n        this.log(\n          `Failed to obtain access to key-system \"${keySystem}\": ${error}`,\n        );\n      });\n      return keySystemAccess.then((mediaKeySystemAccess) => {\n        this.log(\n          `Access for key-system \"${mediaKeySystemAccess.keySystem}\" obtained`,\n        );\n\n        const certificateRequest = this.fetchServerCertificate(keySystem);\n\n        this.log(`Create media-keys for \"${keySystem}\"`);\n        const mediaKeys = (keySystemAccessPromisesNew.mediaKeys =\n          mediaKeySystemAccess.createMediaKeys().then((mediaKeys) => {\n            this.log(`Media-keys created for \"${keySystem}\"`);\n            keySystemAccessPromisesNew.hasMediaKeys = true;\n            return certificateRequest.then((certificate) => {\n              if (certificate) {\n                return this.setMediaKeysServerCertificate(\n                  mediaKeys,\n                  keySystem,\n                  certificate,\n                );\n              }\n              return mediaKeys;\n            });\n          }));\n\n        mediaKeys.catch((error) => {\n          this.error(\n            `Failed to create media-keys for \"${keySystem}\"}: ${error}`,\n          );\n        });\n\n        return mediaKeys;\n      });\n    }\n    return keySystemAccess.then(() => keySystemAccessPromises!.mediaKeys!);\n  }\n\n  private createMediaKeySessionContext({\n    decryptdata,\n    keySystem,\n    mediaKeys,\n  }: {\n    decryptdata: LevelKey;\n    keySystem: KeySystems;\n    mediaKeys: MediaKeys;\n  }): MediaKeySessionContext {\n    this.log(\n      `Creating key-system session \"${keySystem}\" keyId: ${arrayToHex(\n        decryptdata.keyId || ([] as number[]),\n      )} keyUri: ${decryptdata.uri}`,\n    );\n\n    const mediaKeysSession = mediaKeys.createSession();\n\n    const mediaKeySessionContext: MediaKeySessionContext = {\n      decryptdata,\n      keySystem,\n      mediaKeys,\n      mediaKeysSession,\n      keyStatus: 'status-pending',\n    };\n\n    this.mediaKeySessions.push(mediaKeySessionContext);\n\n    return mediaKeySessionContext;\n  }\n\n  private renewKeySession(mediaKeySessionContext: MediaKeySessionContext) {\n    const decryptdata = mediaKeySessionContext.decryptdata;\n    if (decryptdata.pssh) {\n      const keySessionContext = this.createMediaKeySessionContext(\n        mediaKeySessionContext,\n      );\n      const keyId = getKeyIdString(decryptdata);\n      const scheme = 'cenc';\n      this.keyIdToKeySessionPromise[keyId] =\n        this.generateRequestWithPreferredKeySession(\n          keySessionContext,\n          scheme,\n          decryptdata.pssh.buffer,\n          'expired',\n        );\n    } else {\n      this.warn(`Could not renew expired session. Missing pssh initData.`);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.removeSession(mediaKeySessionContext);\n  }\n\n  private updateKeySession(\n    mediaKeySessionContext: MediaKeySessionContext,\n    data: Uint8Array<ArrayBuffer>,\n  ): Promise<void> {\n    const keySession = mediaKeySessionContext.mediaKeysSession;\n    this.log(\n      `Updating key-session \"${keySession.sessionId}\" for keyId ${arrayToHex(\n        mediaKeySessionContext.decryptdata.keyId || [],\n      )}\n      } (data length: ${data.byteLength})`,\n    );\n    return keySession.update(data);\n  }\n\n  public getSelectedKeySystemFormats(): KeySystemFormats[] {\n    return (Object.keys(this.keySystemAccessPromises) as KeySystems[])\n      .map((keySystem) => ({\n        keySystem,\n        hasMediaKeys: this.keySystemAccessPromises[keySystem]!.hasMediaKeys,\n      }))\n      .filter(({ hasMediaKeys }) => !!hasMediaKeys)\n      .map(({ keySystem }) => keySystemDomainToKeySystemFormat(keySystem))\n      .filter((keySystem): keySystem is KeySystemFormats => !!keySystem);\n  }\n\n  public getKeySystemAccess(keySystemsToAttempt: KeySystems[]): Promise<void> {\n    return this.getKeySystemSelectionPromise(keySystemsToAttempt).then(\n      ({ keySystem, mediaKeys }) => {\n        return this.attemptSetMediaKeys(keySystem, mediaKeys);\n      },\n    );\n  }\n\n  public selectKeySystem(\n    keySystemsToAttempt: KeySystems[],\n  ): Promise<KeySystemFormats> {\n    return new Promise((resolve, reject) => {\n      this.getKeySystemSelectionPromise(keySystemsToAttempt)\n        .then(({ keySystem }) => {\n          const keySystemFormat = keySystemDomainToKeySystemFormat(keySystem);\n          if (keySystemFormat) {\n            resolve(keySystemFormat);\n          } else {\n            reject(\n              new Error(`Unable to find format for key-system \"${keySystem}\"`),\n            );\n          }\n        })\n        .catch(reject);\n    });\n  }\n\n  public selectKeySystemFormat(frag: Fragment): Promise<KeySystemFormats> {\n    const keyFormats = Object.keys(frag.levelkeys || {}) as KeySystemFormats[];\n    if (!this.keyFormatPromise) {\n      this.log(\n        `Selecting key-system from fragment (sn: ${frag.sn} ${frag.type}: ${\n          frag.level\n        }) key formats ${keyFormats.join(', ')}`,\n      );\n      this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);\n    }\n    return this.keyFormatPromise;\n  }\n\n  private getKeyFormatPromise(\n    keyFormats: KeySystemFormats[],\n  ): Promise<KeySystemFormats> {\n    const keySystemsInConfig = getKeySystemsForConfig(this.config);\n    const keySystemsToAttempt = keyFormats\n      .map(keySystemFormatToKeySystemDomain)\n      .filter(\n        (value) => !!value && keySystemsInConfig.indexOf(value) !== -1,\n      ) as any as KeySystems[];\n\n    return this.selectKeySystem(keySystemsToAttempt);\n  }\n\n  public getKeyStatus(decryptdata: LevelKey): MediaKeyStatus | undefined {\n    const { mediaKeySessions } = this;\n    for (let i = 0; i < mediaKeySessions.length; i++) {\n      const status = getKeyStatus(decryptdata, mediaKeySessions[i]);\n      if (status) {\n        return status;\n      }\n    }\n    return undefined;\n  }\n\n  public loadKey(data: KeyLoadedData): Promise<MediaKeySessionContext> {\n    const decryptdata = data.keyInfo.decryptdata;\n\n    const keyId = getKeyIdString(decryptdata);\n    const badStatus = this.bannedKeyIds[keyId];\n    if (badStatus || this.getKeyStatus(decryptdata) === 'internal-error') {\n      const error = getKeyStatusError(\n        badStatus || 'internal-error',\n        decryptdata,\n      );\n      this.handleError(error, data.frag);\n      return Promise.reject(error);\n    }\n    const keyDetails = `(keyId: ${keyId} format: \"${decryptdata.keyFormat}\" method: ${decryptdata.method} uri: ${decryptdata.uri})`;\n\n    this.log(`Starting session for key ${keyDetails}`);\n\n    const keyContextPromise = this.keyIdToKeySessionPromise[keyId];\n    if (!keyContextPromise) {\n      const keySessionContextPromise = this.getKeySystemForKeyPromise(\n        decryptdata,\n      )\n        .then(({ keySystem, mediaKeys }) => {\n          this.throwIfDestroyed();\n          this.log(\n            `Handle encrypted media sn: ${data.frag.sn} ${data.frag.type}: ${data.frag.level} using key ${keyDetails}`,\n          );\n\n          return this.attemptSetMediaKeys(keySystem, mediaKeys).then(() => {\n            this.throwIfDestroyed();\n            return this.createMediaKeySessionContext({\n              keySystem,\n              mediaKeys,\n              decryptdata,\n            });\n          });\n        })\n        .then((keySessionContext) => {\n          const scheme = 'cenc';\n          const initData = decryptdata.pssh ? decryptdata.pssh.buffer : null;\n          return this.generateRequestWithPreferredKeySession(\n            keySessionContext,\n            scheme,\n            initData,\n            'playlist-key',\n          );\n        });\n\n      keySessionContextPromise.catch((error) =>\n        this.handleError(error, data.frag),\n      );\n      this.keyIdToKeySessionPromise[keyId] = keySessionContextPromise;\n\n      return keySessionContextPromise;\n    }\n\n    // Re-emit error for playlist key loading\n    keyContextPromise.catch((error) => {\n      if (error instanceof EMEKeyError) {\n        const errorData = { ...error.data };\n        if (this.getKeyStatus(decryptdata) === 'internal-error') {\n          errorData.decryptdata = decryptdata;\n        }\n        const clonedError = new EMEKeyError(errorData, error.message);\n        this.handleError(clonedError, data.frag);\n      }\n    });\n\n    return keyContextPromise;\n  }\n\n  private throwIfDestroyed(message = 'Invalid state'): void | never {\n    if (!this.hls as any) {\n      throw new Error('invalid state');\n    }\n  }\n\n  private handleError(error: EMEKeyError | Error, frag?: Fragment) {\n    if (!this.hls as any) {\n      return;\n    }\n\n    if (error instanceof EMEKeyError) {\n      if (frag) {\n        error.data.frag = frag;\n      }\n      const levelKey = error.data.decryptdata;\n      this.error(\n        `${error.message}${\n          levelKey ? ` (${arrayToHex(levelKey.keyId || [])})` : ''\n        }`,\n      );\n      this.hls.trigger(Events.ERROR, error.data);\n    } else {\n      this.error(error.message);\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.KEY_SYSTEM_ERROR,\n        details: ErrorDetails.KEY_SYSTEM_NO_KEYS,\n        error,\n        fatal: true,\n      });\n    }\n  }\n\n  private getKeySystemForKeyPromise(\n    decryptdata: LevelKey,\n  ): Promise<{ keySystem: KeySystems; mediaKeys: MediaKeys }> {\n    const keyId = getKeyIdString(decryptdata);\n    const mediaKeySessionContext = this.keyIdToKeySessionPromise[keyId];\n    if (!mediaKeySessionContext) {\n      const keySystem = keySystemFormatToKeySystemDomain(\n        decryptdata.keyFormat as KeySystemFormats,\n      );\n      const keySystemsToAttempt = keySystem\n        ? [keySystem]\n        : getKeySystemsForConfig(this.config);\n      return this.attemptKeySystemAccess(keySystemsToAttempt);\n    }\n    return mediaKeySessionContext;\n  }\n\n  private getKeySystemSelectionPromise(\n    keySystemsToAttempt: KeySystems[],\n  ): Promise<{ keySystem: KeySystems; mediaKeys: MediaKeys }> | never {\n    if (!keySystemsToAttempt.length) {\n      keySystemsToAttempt = getKeySystemsForConfig(this.config);\n    }\n    if (keySystemsToAttempt.length === 0) {\n      throw new EMEKeyError(\n        {\n          type: ErrorTypes.KEY_SYSTEM_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_NO_CONFIGURED_LICENSE,\n          fatal: true,\n        },\n        `Missing key-system license configuration options ${stringify({\n          drmSystems: this.config.drmSystems,\n        })}`,\n      );\n    }\n    return this.attemptKeySystemAccess(keySystemsToAttempt);\n  }\n\n  private onMediaEncrypted = (event: MediaEncryptedEvent) => {\n    const { initDataType, initData } = event;\n    const logMessage = `\"${event.type}\" event: init data type: \"${initDataType}\"`;\n    this.debug(logMessage);\n\n    // Ignore event when initData is null\n    if (initData === null) {\n      return;\n    }\n\n    if (!this.keyFormatPromise) {\n      let keySystems = Object.keys(\n        this.keySystemAccessPromises,\n      ) as KeySystems[];\n      if (!keySystems.length) {\n        keySystems = getKeySystemsForConfig(this.config);\n      }\n      const keyFormats = keySystems\n        .map(keySystemDomainToKeySystemFormat)\n        .filter((k) => !!k) as KeySystemFormats[];\n      this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);\n    }\n\n    this.keyFormatPromise\n      .then((keySystemFormat) => {\n        const keySystem = keySystemFormatToKeySystemDomain(keySystemFormat);\n        if (initDataType !== 'sinf' || keySystem !== KeySystems.FAIRPLAY) {\n          this.log(\n            `Ignoring \"${event.type}\" event with init data type: \"${initDataType}\" for selected key-system ${keySystem}`,\n          );\n          return;\n        }\n\n        // Match sinf keyId to playlist skd://keyId=\n        let keyId: Uint8Array<ArrayBuffer> | undefined;\n        try {\n          const json = bin2str(new Uint8Array(initData));\n          const sinf = base64Decode(JSON.parse(json).sinf);\n          const tenc = parseSinf(sinf);\n          if (!tenc) {\n            throw new Error(\n              `'schm' box missing or not cbcs/cenc with schi > tenc`,\n            );\n          }\n          keyId = new Uint8Array(tenc.subarray(8, 24));\n        } catch (error) {\n          this.warn(`${logMessage} Failed to parse sinf: ${error}`);\n          return;\n        }\n\n        const keyIdHex = arrayToHex(keyId);\n        const { keyIdToKeySessionPromise, mediaKeySessions } = this;\n        let keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex];\n\n        for (let i = 0; i < mediaKeySessions.length; i++) {\n          // Match playlist key\n          const keyContext = mediaKeySessions[i];\n          const decryptdata = keyContext.decryptdata;\n          if (!decryptdata.keyId) {\n            continue;\n          }\n          const oldKeyIdHex = arrayToHex(decryptdata.keyId);\n          if (\n            arrayValuesMatch(keyId, decryptdata.keyId) ||\n            decryptdata.uri.replace(/-/g, '').indexOf(keyIdHex) !== -1\n          ) {\n            keySessionContextPromise = keyIdToKeySessionPromise[oldKeyIdHex];\n            if (!keySessionContextPromise) {\n              continue;\n            }\n            if (decryptdata.pssh) {\n              break;\n            }\n            delete keyIdToKeySessionPromise[oldKeyIdHex];\n            decryptdata.pssh = new Uint8Array(initData);\n            decryptdata.keyId = keyId;\n            keySessionContextPromise = keyIdToKeySessionPromise[keyIdHex] =\n              keySessionContextPromise.then(() => {\n                return this.generateRequestWithPreferredKeySession(\n                  keyContext,\n                  initDataType,\n                  initData,\n                  'encrypted-event-key-match',\n                );\n              });\n            keySessionContextPromise.catch((error) => this.handleError(error));\n            break;\n          }\n        }\n\n        if (!keySessionContextPromise) {\n          this.handleError(\n            new Error(\n              `Key ID ${keyIdHex} not encountered in playlist. Key-system sessions ${mediaKeySessions.length}.`,\n            ),\n          );\n        }\n      })\n      .catch((error) => this.handleError(error));\n  };\n\n  private onWaitingForKey = (event: Event) => {\n    this.log(`\"${event.type}\" event`);\n  };\n\n  private attemptSetMediaKeys(\n    keySystem: KeySystems,\n    mediaKeys: MediaKeys,\n  ): Promise<void> {\n    if (this.mediaKeys === mediaKeys) {\n      return Promise.resolve();\n    }\n    const queue = this.setMediaKeysQueue.slice();\n\n    this.log(`Setting media-keys for \"${keySystem}\"`);\n    // Only one setMediaKeys() can run at one time, and multiple setMediaKeys() operations\n    // can be queued for execution for multiple key sessions.\n    const setMediaKeysPromise = Promise.all(queue).then(() => {\n      if (!this.media) {\n        this.mediaKeys = null;\n        throw new Error(\n          'Attempted to set mediaKeys without media element attached',\n        );\n      }\n      return this.media.setMediaKeys(mediaKeys);\n    });\n    this.mediaKeys = mediaKeys;\n    this.setMediaKeysQueue.push(setMediaKeysPromise);\n    return setMediaKeysPromise.then(() => {\n      this.log(`Media-keys set for \"${keySystem}\"`);\n      queue.push(setMediaKeysPromise!);\n      this.setMediaKeysQueue = this.setMediaKeysQueue.filter(\n        (p) => queue.indexOf(p) === -1,\n      );\n    });\n  }\n\n  private generateRequestWithPreferredKeySession(\n    context: MediaKeySessionContext,\n    initDataType: string,\n    initData: ArrayBuffer | null,\n    reason:\n      | 'playlist-key'\n      | 'encrypted-event-key-match'\n      | 'encrypted-event-no-match'\n      | 'expired',\n  ): Promise<MediaKeySessionContext> | never {\n    const generateRequestFilter =\n      this.config.drmSystems?.[context.keySystem]?.generateRequest;\n    if (generateRequestFilter) {\n      try {\n        const mappedInitData: ReturnType<typeof generateRequestFilter> =\n          generateRequestFilter.call(this.hls, initDataType, initData, context);\n        if (!mappedInitData) {\n          throw new Error(\n            'Invalid response from configured generateRequest filter',\n          );\n        }\n        initDataType = mappedInitData.initDataType;\n        initData = mappedInitData.initData ? mappedInitData.initData : null;\n        context.decryptdata.pssh = initData ? new Uint8Array(initData) : null;\n      } catch (error) {\n        this.warn(error.message);\n        if ((this.hls as any) && this.hls.config.debug) {\n          throw error;\n        }\n      }\n    }\n\n    if (initData === null) {\n      this.log(`Skipping key-session request for \"${reason}\" (no initData)`);\n      return Promise.resolve(context);\n    }\n\n    const keyId = getKeyIdString(context.decryptdata);\n    const keyUri = context.decryptdata.uri;\n    this.log(\n      `Generating key-session request for \"${reason}\" keyId: ${keyId} URI: ${keyUri} (init data type: ${initDataType} length: ${\n        initData.byteLength\n      })`,\n    );\n\n    const licenseStatus = new EventEmitter();\n\n    const onmessage = (context._onmessage = (event: MediaKeyMessageEvent) => {\n      const keySession = context.mediaKeysSession;\n      if (!keySession as any) {\n        licenseStatus.emit('error', new Error('invalid state'));\n        return;\n      }\n      const { messageType, message } = event;\n      this.log(\n        `\"${messageType}\" message event for session \"${keySession.sessionId}\" message size: ${message.byteLength}`,\n      );\n      if (\n        messageType === 'license-request' ||\n        messageType === 'license-renewal'\n      ) {\n        this.renewLicense(context, message).catch((error) => {\n          if (licenseStatus.eventNames().length) {\n            licenseStatus.emit('error', error);\n          } else {\n            this.handleError(error);\n          }\n        });\n      } else if (messageType === 'license-release') {\n        if (context.keySystem === KeySystems.FAIRPLAY) {\n          this.updateKeySession(context, strToUtf8array('acknowledged'))\n            .then(() => this.removeSession(context))\n            .catch((error) => this.handleError(error));\n        }\n      } else {\n        this.warn(`unhandled media key message type \"${messageType}\"`);\n      }\n    });\n\n    const handleKeyStatus = (\n      keyStatus: MediaKeyStatus,\n      context: MediaKeySessionContext,\n    ) => {\n      context.keyStatus = keyStatus;\n      let keyError: EMEKeyError | Error | undefined;\n      if (keyStatus.startsWith('usable')) {\n        licenseStatus.emit('resolved');\n      } else if (\n        keyStatus === 'internal-error' ||\n        keyStatus === 'output-restricted' ||\n        keyStatus === 'output-downscaled'\n      ) {\n        keyError = getKeyStatusError(keyStatus, context.decryptdata);\n      } else if (keyStatus === 'expired') {\n        keyError = new Error(`key expired (keyId: ${keyId})`);\n      } else if (keyStatus === 'released') {\n        keyError = new Error(`key released`);\n      } else if (keyStatus === 'status-pending') {\n        /* no-op */\n      } else {\n        this.warn(\n          `unhandled key status change \"${keyStatus}\" (keyId: ${keyId})`,\n        );\n      }\n      if (keyError) {\n        if (licenseStatus.eventNames().length) {\n          licenseStatus.emit('error', keyError);\n        } else {\n          this.handleError(keyError);\n        }\n      }\n    };\n    const onkeystatuseschange = (context._onkeystatuseschange = (\n      event: Event,\n    ) => {\n      const keySession = context.mediaKeysSession;\n      if (!keySession as any) {\n        licenseStatus.emit('error', new Error('invalid state'));\n        return;\n      }\n\n      const keyStatuses = this.getKeyStatuses(context);\n      const keyIds = Object.keys(keyStatuses);\n\n      // exit if all keys are status-pending\n      if (!keyIds.some((id) => keyStatuses[id] !== 'status-pending')) {\n        return;\n      }\n\n      // renew when a key status for a levelKey comes back expired\n      if (keyStatuses[keyId] === 'expired') {\n        // renew when a key status comes back expired\n        this.log(\n          `Expired key ${stringify(keyStatuses)} in key-session \"${context.mediaKeysSession.sessionId}\"`,\n        );\n        this.renewKeySession(context);\n        return;\n      }\n\n      let keyStatus = keyStatuses[keyId] as MediaKeyStatus | undefined;\n      if (keyStatus) {\n        // handle status of current key\n        handleKeyStatus(keyStatus, context);\n      } else {\n        // Timeout key-status\n        const timeout = 1000;\n        context.keyStatusTimeouts ||= {};\n        context.keyStatusTimeouts[keyId] ||= self.setTimeout(() => {\n          if ((!context.mediaKeysSession as any) || !this.mediaKeys) {\n            return;\n          }\n\n          // Find key status in another session if missing (PlayReady #7519 no key-status \"single-key\" setup with shared key)\n          const sessionKeyStatus = this.getKeyStatus(context.decryptdata);\n          if (sessionKeyStatus && sessionKeyStatus !== 'status-pending') {\n            this.log(\n              `No status for keyId ${keyId} in key-session \"${context.mediaKeysSession.sessionId}\". Using session key-status ${sessionKeyStatus} from other session.`,\n            );\n            return handleKeyStatus(sessionKeyStatus, context);\n          }\n\n          // Timeout key with internal-error\n          this.log(\n            `key status for ${keyId} in key-session \"${context.mediaKeysSession.sessionId}\" timed out after ${timeout}ms`,\n          );\n          keyStatus = 'internal-error';\n          handleKeyStatus(keyStatus, context);\n        }, timeout);\n\n        this.log(`No status for keyId ${keyId} (${stringify(keyStatuses)}).`);\n      }\n    });\n\n    addEventListener(context.mediaKeysSession, 'message', onmessage);\n    addEventListener(\n      context.mediaKeysSession,\n      'keystatuseschange',\n      onkeystatuseschange,\n    );\n\n    const keyUsablePromise = new Promise(\n      (resolve: (value?: void) => void, reject) => {\n        licenseStatus.on('error', reject);\n        licenseStatus.on('resolved', resolve);\n      },\n    );\n\n    return context.mediaKeysSession\n      .generateRequest(initDataType, initData)\n      .then(() => {\n        this.log(\n          `Request generated for key-session \"${context.mediaKeysSession.sessionId}\" keyId: ${keyId} URI: ${keyUri}`,\n        );\n      })\n      .catch((error) => {\n        throw new EMEKeyError(\n          {\n            type: ErrorTypes.KEY_SYSTEM_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_NO_SESSION,\n            error,\n            decryptdata: context.decryptdata,\n            fatal: false,\n          },\n          `Error generating key-session request: ${error}`,\n        );\n      })\n      .then(() => keyUsablePromise)\n      .catch((error) => {\n        licenseStatus.removeAllListeners();\n        return this.removeSession(context).then(() => {\n          throw error;\n        });\n      })\n      .then(() => {\n        licenseStatus.removeAllListeners();\n        return context;\n      });\n  }\n\n  private getKeyStatuses(mediaKeySessionContext: MediaKeySessionContext): {\n    [keyId: string]: MediaKeyStatus;\n  } {\n    const keyStatuses: { [keyId: string]: MediaKeyStatus } = {};\n    mediaKeySessionContext.mediaKeysSession.keyStatuses.forEach(\n      (status: MediaKeyStatus, keyId: BufferSource) => {\n        // keyStatuses.forEach is not standard API so the callback value looks weird on xboxone\n        // xboxone callback(keyId, status) so we need to exchange them\n        if (typeof keyId === 'string' && typeof status === 'object') {\n          const temp = keyId;\n          keyId = status;\n          status = temp;\n        }\n        const keyIdArray =\n          'buffer' in keyId\n            ? new Uint8Array(keyId.buffer, keyId.byteOffset, keyId.byteLength)\n            : new Uint8Array(keyId);\n        if (\n          mediaKeySessionContext.keySystem === KeySystems.PLAYREADY &&\n          keyIdArray.length === 16\n        ) {\n          changeEndianness(keyIdArray);\n        }\n        const keyIdWithStatusChange = arrayToHex(keyIdArray);\n        // Add to banned keys to prevent playlist usage and license requests\n        if (status === 'internal-error') {\n          this.bannedKeyIds[keyIdWithStatusChange] = status;\n        }\n        this.log(\n          `key status change \"${status}\" for keyStatuses keyId: ${keyIdWithStatusChange} key-session \"${mediaKeySessionContext.mediaKeysSession.sessionId}\"`,\n        );\n        keyStatuses[keyIdWithStatusChange] = status;\n      },\n    );\n    return keyStatuses;\n  }\n\n  private fetchServerCertificate(\n    keySystem: KeySystems,\n  ): Promise<BufferSource | void> {\n    const config = this.config;\n    const Loader = config.loader;\n    const certLoader = new Loader(config as HlsConfig) as Loader<LoaderContext>;\n    const url = this.getServerCertificateUrl(keySystem);\n    if (!url) {\n      return Promise.resolve();\n    }\n    this.log(`Fetching server certificate for \"${keySystem}\"`);\n    return new Promise((resolve, reject) => {\n      const loaderContext: LoaderContext = {\n        responseType: 'arraybuffer',\n        url,\n      };\n      const loadPolicy = config.certLoadPolicy.default;\n      const loaderConfig: LoaderConfiguration = {\n        loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: 0,\n      };\n      const loaderCallbacks: LoaderCallbacks<LoaderContext> = {\n        onSuccess: (response, stats, context, networkDetails) => {\n          resolve(response.data as ArrayBuffer);\n        },\n        onError: (response, contex, networkDetails, stats) => {\n          reject(\n            new EMEKeyError(\n              {\n                type: ErrorTypes.KEY_SYSTEM_ERROR,\n                details:\n                  ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,\n                fatal: true,\n                networkDetails,\n                response: {\n                  url: loaderContext.url,\n                  data: undefined,\n                  ...response,\n                },\n              },\n              `\"${keySystem}\" certificate request failed (${url}). Status: ${response.code} (${response.text})`,\n            ),\n          );\n        },\n        onTimeout: (stats, context, networkDetails) => {\n          reject(\n            new EMEKeyError(\n              {\n                type: ErrorTypes.KEY_SYSTEM_ERROR,\n                details:\n                  ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,\n                fatal: true,\n                networkDetails,\n                response: {\n                  url: loaderContext.url,\n                  data: undefined,\n                },\n              },\n              `\"${keySystem}\" certificate request timed out (${url})`,\n            ),\n          );\n        },\n        onAbort: (stats, context, networkDetails) => {\n          reject(new Error('aborted'));\n        },\n      };\n      certLoader.load(loaderContext, loaderConfig, loaderCallbacks);\n    });\n  }\n\n  private setMediaKeysServerCertificate(\n    mediaKeys: MediaKeys,\n    keySystem: KeySystems,\n    cert: BufferSource,\n  ): Promise<MediaKeys> {\n    return new Promise((resolve, reject) => {\n      mediaKeys\n        .setServerCertificate(cert)\n        .then((success) => {\n          this.log(\n            `setServerCertificate ${\n              success ? 'success' : 'not supported by CDM'\n            } (${cert.byteLength}) on \"${keySystem}\"`,\n          );\n          resolve(mediaKeys);\n        })\n        .catch((error) => {\n          reject(\n            new EMEKeyError(\n              {\n                type: ErrorTypes.KEY_SYSTEM_ERROR,\n                details:\n                  ErrorDetails.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,\n                error,\n                fatal: true,\n              },\n              error.message,\n            ),\n          );\n        });\n    });\n  }\n\n  private renewLicense(\n    context: MediaKeySessionContext,\n    keyMessage: ArrayBuffer,\n  ): Promise<void> {\n    return this.requestLicense(context, new Uint8Array(keyMessage)).then(\n      (data: ArrayBuffer) => {\n        return this.updateKeySession(context, new Uint8Array(data)).catch(\n          (error) => {\n            throw new EMEKeyError(\n              {\n                type: ErrorTypes.KEY_SYSTEM_ERROR,\n                details: ErrorDetails.KEY_SYSTEM_SESSION_UPDATE_FAILED,\n                decryptdata: context.decryptdata,\n                error,\n                fatal: false,\n              },\n              error.message,\n            );\n          },\n        );\n      },\n    );\n  }\n\n  private unpackPlayReadyKeyMessage(\n    xhr: XMLHttpRequest,\n    licenseChallenge: Uint8Array<ArrayBuffer>,\n  ): Uint8Array<ArrayBuffer> {\n    // On Edge, the raw license message is UTF-16-encoded XML.  We need\n    // to unpack the Challenge element (base64-encoded string containing the\n    // actual license request) and any HttpHeader elements (sent as request\n    // headers).\n    // For PlayReady CDMs, we need to dig the Challenge out of the XML.\n    const xmlString = String.fromCharCode.apply(\n      null,\n      new Uint16Array(licenseChallenge.buffer),\n    );\n    if (!xmlString.includes('PlayReadyKeyMessage')) {\n      // This does not appear to be a wrapped message as on Edge.  Some\n      // clients do not need this unwrapping, so we will assume this is one of\n      // them.  Note that \"xml\" at this point probably looks like random\n      // garbage, since we interpreted UTF-8 as UTF-16.\n      xhr.setRequestHeader('Content-Type', 'text/xml; charset=utf-8');\n      return licenseChallenge;\n    }\n    const keyMessageXml = new DOMParser().parseFromString(\n      xmlString,\n      'application/xml',\n    );\n    // Set request headers.\n    const headers = keyMessageXml.querySelectorAll('HttpHeader');\n    if (headers.length > 0) {\n      let header: Element;\n      for (let i = 0, len = headers.length; i < len; i++) {\n        header = headers[i];\n        const name = header.querySelector('name')?.textContent;\n        const value = header.querySelector('value')?.textContent;\n        if (name && value) {\n          xhr.setRequestHeader(name, value);\n        }\n      }\n    }\n    const challengeElement = keyMessageXml.querySelector('Challenge');\n    const challengeText = challengeElement?.textContent;\n    if (!challengeText) {\n      throw new Error(`Cannot find <Challenge> in key message`);\n    }\n    return strToUtf8array(atob(challengeText));\n  }\n\n  private setupLicenseXHR(\n    xhr: XMLHttpRequest,\n    url: string,\n    keysListItem: MediaKeySessionContext,\n    licenseChallenge: Uint8Array<ArrayBuffer>,\n  ): Promise<{\n    xhr: XMLHttpRequest;\n    licenseChallenge: Uint8Array<ArrayBuffer>;\n  }> {\n    const licenseXhrSetup = this.config.licenseXhrSetup;\n\n    if (!licenseXhrSetup) {\n      xhr.open('POST', url, true);\n\n      return Promise.resolve({ xhr, licenseChallenge });\n    }\n\n    return Promise.resolve()\n      .then(() => {\n        if (!keysListItem.decryptdata as any) {\n          throw new Error('Key removed');\n        }\n        return licenseXhrSetup.call(\n          this.hls,\n          xhr,\n          url,\n          keysListItem,\n          licenseChallenge,\n        );\n      })\n      .catch((error: Error) => {\n        if (!keysListItem.decryptdata as any) {\n          // Key session removed. Cancel license request.\n          throw error;\n        }\n        // let's try to open before running setup\n        xhr.open('POST', url, true);\n\n        return licenseXhrSetup.call(\n          this.hls,\n          xhr,\n          url,\n          keysListItem,\n          licenseChallenge,\n        );\n      })\n      .then((licenseXhrSetupResult) => {\n        // if licenseXhrSetup did not yet call open, let's do it now\n        if (!xhr.readyState) {\n          xhr.open('POST', url, true);\n        }\n        const finalLicenseChallenge = licenseXhrSetupResult\n          ? licenseXhrSetupResult\n          : licenseChallenge;\n        return { xhr, licenseChallenge: finalLicenseChallenge };\n      });\n  }\n\n  private requestLicense(\n    keySessionContext: MediaKeySessionContext,\n    licenseChallenge: Uint8Array<ArrayBuffer>,\n  ): Promise<ArrayBuffer> {\n    const keyLoadPolicy = this.config.keyLoadPolicy.default;\n    return new Promise((resolve, reject) => {\n      const url = this.getLicenseServerUrlOrThrow(keySessionContext.keySystem);\n      this.log(`Sending license request to URL: ${url}`);\n      const xhr = new XMLHttpRequest();\n      xhr.responseType = 'arraybuffer';\n      xhr.onreadystatechange = () => {\n        if (\n          (!this.hls as any) ||\n          (!keySessionContext.mediaKeysSession as any)\n        ) {\n          return reject(new Error('invalid state'));\n        }\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            this._requestLicenseFailureCount = 0;\n            let data = xhr.response;\n            this.log(\n              `License received ${\n                data instanceof ArrayBuffer ? data.byteLength : data\n              }`,\n            );\n            const licenseResponseCallback = this.config.licenseResponseCallback;\n            if (licenseResponseCallback) {\n              try {\n                data = licenseResponseCallback.call(\n                  this.hls,\n                  xhr,\n                  url,\n                  keySessionContext,\n                );\n              } catch (error) {\n                this.error(error);\n              }\n            }\n            resolve(data);\n          } else {\n            const retryConfig = keyLoadPolicy.errorRetry;\n            const maxNumRetry = retryConfig ? retryConfig.maxNumRetry : 0;\n            this._requestLicenseFailureCount++;\n            if (\n              this._requestLicenseFailureCount > maxNumRetry ||\n              (xhr.status >= 400 && xhr.status < 500)\n            ) {\n              reject(\n                new EMEKeyError(\n                  {\n                    type: ErrorTypes.KEY_SYSTEM_ERROR,\n                    details: ErrorDetails.KEY_SYSTEM_LICENSE_REQUEST_FAILED,\n                    decryptdata: keySessionContext.decryptdata,\n                    fatal: true,\n                    networkDetails: xhr,\n                    response: {\n                      url,\n                      data: undefined as any,\n                      code: xhr.status,\n                      text: xhr.statusText,\n                    },\n                  },\n                  `License Request XHR failed (${url}). Status: ${xhr.status} (${xhr.statusText})`,\n                ),\n              );\n            } else {\n              const attemptsLeft =\n                maxNumRetry - this._requestLicenseFailureCount + 1;\n              this.warn(\n                `Retrying license request, ${attemptsLeft} attempts left`,\n              );\n              this.requestLicense(keySessionContext, licenseChallenge).then(\n                resolve,\n                reject,\n              );\n            }\n          }\n        }\n      };\n      if (\n        keySessionContext.licenseXhr &&\n        keySessionContext.licenseXhr.readyState !== XMLHttpRequest.DONE\n      ) {\n        keySessionContext.licenseXhr.abort();\n      }\n      keySessionContext.licenseXhr = xhr;\n\n      this.setupLicenseXHR(xhr, url, keySessionContext, licenseChallenge)\n        .then(({ xhr, licenseChallenge }) => {\n          if (keySessionContext.keySystem == KeySystems.PLAYREADY) {\n            licenseChallenge = this.unpackPlayReadyKeyMessage(\n              xhr,\n              licenseChallenge,\n            );\n          }\n          xhr.send(licenseChallenge);\n        })\n        .catch(reject);\n    });\n  }\n\n  private onDestroying() {\n    this.unregisterListeners();\n    this._clear();\n  }\n\n  private onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    if (!this.config.emeEnabled) {\n      return;\n    }\n\n    const media = data.media;\n\n    // keep reference of media\n    this.media = media;\n\n    addEventListener(media, 'encrypted', this.onMediaEncrypted);\n    addEventListener(media, 'waitingforkey', this.onWaitingForKey);\n  }\n\n  private onMediaDetached() {\n    const media = this.media;\n\n    if (media) {\n      removeEventListener(media, 'encrypted', this.onMediaEncrypted);\n      removeEventListener(media, 'waitingforkey', this.onWaitingForKey);\n      this.media = null;\n      this.mediaKeys = null;\n    }\n  }\n\n  private _clear() {\n    this._requestLicenseFailureCount = 0;\n    this.keyIdToKeySessionPromise = {};\n    this.bannedKeyIds = {};\n    if (!this.mediaKeys && !this.mediaKeySessions.length) {\n      return;\n    }\n    const media = this.media;\n    const mediaKeysList = this.mediaKeySessions.slice();\n    this.mediaKeySessions = [];\n    this.mediaKeys = null;\n\n    LevelKey.clearKeyUriToKeyIdMap();\n\n    // Close all sessions and remove media keys from the video element.\n    const keySessionCount = mediaKeysList.length;\n    EMEController.CDMCleanupPromise = Promise.all(\n      mediaKeysList\n        .map((mediaKeySessionContext) =>\n          this.removeSession(mediaKeySessionContext),\n        )\n        .concat(\n          (media?.setMediaKeys(null) as Promise<void> | null)?.catch(\n            (error) => {\n              this.log(`Could not clear media keys: ${error}`);\n              if (!this.hls as any) return;\n              this.hls.trigger(Events.ERROR, {\n                type: ErrorTypes.OTHER_ERROR,\n                details: ErrorDetails.KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR,\n                fatal: false,\n                error: new Error(`Could not clear media keys: ${error}`),\n              });\n            },\n          ) || Promise.resolve(),\n        ),\n    )\n      .catch((error) => {\n        this.log(`Could not close sessions and clear media keys: ${error}`);\n        if (!this.hls as any) return;\n        this.hls.trigger(Events.ERROR, {\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR,\n          fatal: false,\n          error: new Error(\n            `Could not close sessions and clear media keys: ${error}`,\n          ),\n        });\n      })\n\n      .then(() => {\n        if (keySessionCount) {\n          this.log('finished closing key sessions and clearing media keys');\n        }\n      });\n  }\n\n  private onManifestLoading() {\n    this.keyFormatPromise = null;\n    this.bannedKeyIds = {};\n  }\n\n  private onManifestLoaded(\n    event: Events.MANIFEST_LOADED,\n    { sessionKeys }: ManifestLoadedData,\n  ) {\n    if (!sessionKeys || !this.config.emeEnabled) {\n      return;\n    }\n    if (!this.keyFormatPromise) {\n      const keyFormats: KeySystemFormats[] = sessionKeys.reduce(\n        (formats: KeySystemFormats[], sessionKey: LevelKey) => {\n          if (\n            formats.indexOf(sessionKey.keyFormat as KeySystemFormats) === -1\n          ) {\n            formats.push(sessionKey.keyFormat as KeySystemFormats);\n          }\n          return formats;\n        },\n        [],\n      );\n      this.log(\n        `Selecting key-system from session-keys ${keyFormats.join(', ')}`,\n      );\n      this.keyFormatPromise = this.getKeyFormatPromise(keyFormats);\n    }\n  }\n\n  private removeSession(\n    mediaKeySessionContext: MediaKeySessionContext,\n  ): Promise<void> {\n    const { mediaKeysSession, licenseXhr, decryptdata } =\n      mediaKeySessionContext;\n    if (mediaKeysSession as MediaKeySession | undefined) {\n      this.log(\n        `Remove licenses and keys and close session \"${mediaKeysSession.sessionId}\" keyId: ${arrayToHex((decryptdata as LevelKey | undefined)?.keyId || [])}`,\n      );\n      if (mediaKeySessionContext._onmessage) {\n        mediaKeysSession.removeEventListener(\n          'message',\n          mediaKeySessionContext._onmessage,\n        );\n        mediaKeySessionContext._onmessage = undefined;\n      }\n      if (mediaKeySessionContext._onkeystatuseschange) {\n        mediaKeysSession.removeEventListener(\n          'keystatuseschange',\n          mediaKeySessionContext._onkeystatuseschange,\n        );\n        mediaKeySessionContext._onkeystatuseschange = undefined;\n      }\n\n      if (licenseXhr && licenseXhr.readyState !== XMLHttpRequest.DONE) {\n        licenseXhr.abort();\n      }\n      mediaKeySessionContext.mediaKeysSession =\n        mediaKeySessionContext.decryptdata =\n        mediaKeySessionContext.licenseXhr =\n          undefined!;\n      const index = this.mediaKeySessions.indexOf(mediaKeySessionContext);\n      if (index > -1) {\n        this.mediaKeySessions.splice(index, 1);\n      }\n      const { keyStatusTimeouts } = mediaKeySessionContext;\n      if (keyStatusTimeouts) {\n        Object.keys(keyStatusTimeouts).forEach((keyId) =>\n          self.clearTimeout(keyStatusTimeouts[keyId]),\n        );\n      }\n      const { drmSystemOptions } = this.config;\n      const removePromise = isPersistentSessionType(drmSystemOptions)\n        ? new Promise((resolve, reject) => {\n            self.setTimeout(\n              () => reject(new Error(`MediaKeySession.remove() timeout`)),\n              8000,\n            );\n            mediaKeysSession.remove().then(resolve).catch(reject);\n          })\n        : Promise.resolve();\n      return removePromise\n        .catch((error) => {\n          this.log(`Could not remove session: ${error}`);\n          if (!this.hls as any) return;\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR,\n            fatal: false,\n            error: new Error(`Could not remove session: ${error}`),\n          });\n        })\n        .then(() => {\n          return mediaKeysSession.close();\n        })\n        .catch((error) => {\n          this.log(`Could not close session: ${error}`);\n          if (!this.hls as any) return;\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR,\n            fatal: false,\n            error: new Error(`Could not close session: ${error}`),\n          });\n        });\n    }\n    return Promise.resolve();\n  }\n}\n\nfunction getKeyIdString(decryptdata: DecryptData | undefined): string | never {\n  if (!decryptdata) {\n    throw new Error('Could not read keyId of undefined decryptdata');\n  }\n  if (decryptdata.keyId === null) {\n    throw new Error('keyId is null');\n  }\n  return arrayToHex(decryptdata.keyId);\n}\n\nfunction getKeyStatus(\n  decryptdata: LevelKey,\n  keyContext: MediaKeySessionContext,\n): MediaKeyStatus | undefined {\n  if (\n    decryptdata.keyId &&\n    keyContext.mediaKeysSession.keyStatuses.has(decryptdata.keyId)\n  ) {\n    return keyContext.mediaKeysSession.keyStatuses.get(decryptdata.keyId);\n  }\n  if (decryptdata.matches(keyContext.decryptdata)) {\n    return keyContext.keyStatus;\n  }\n  return undefined;\n}\n\nexport class EMEKeyError extends Error {\n  public readonly data: ErrorData;\n  constructor(\n    data: Omit<ErrorData, 'error'> & { error?: Error },\n    message: string,\n  ) {\n    super(message);\n    data.error ||= new Error(message);\n    this.data = data as ErrorData;\n    data.err = data.error;\n  }\n}\n\nfunction getKeyStatusError(\n  keyStatus: MediaKeyStatus,\n  decryptdata: LevelKey,\n): EMEKeyError {\n  const outputRestricted = keyStatus === 'output-restricted';\n  const details = outputRestricted\n    ? ErrorDetails.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED\n    : ErrorDetails.KEY_SYSTEM_STATUS_INTERNAL_ERROR;\n  return new EMEKeyError(\n    {\n      type: ErrorTypes.KEY_SYSTEM_ERROR,\n      details,\n      fatal: false,\n      decryptdata,\n    },\n    outputRestricted\n      ? 'HDCP level output restricted'\n      : `key status changed to \"${keyStatus}\"`,\n  );\n}\n\nexport default EMEController;\n","import { Events } from '../events';\nimport type StreamController from './stream-controller';\nimport type Hls from '../hls';\nimport type { ComponentAPI } from '../types/component-api';\nimport type { MediaAttachingData } from '../types/events';\n\nclass FPSController implements ComponentAPI {\n  private hls: Hls;\n  private isVideoPlaybackQualityAvailable: boolean = false;\n  private timer?: number;\n  private media: HTMLVideoElement | null = null;\n  private lastTime: any;\n  private lastDroppedFrames: number = 0;\n  private lastDecodedFrames: number = 0;\n  // stream controller must be provided as a dependency!\n  private streamController!: StreamController;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n\n    this.registerListeners();\n  }\n\n  public setStreamController(streamController: StreamController) {\n    this.streamController = streamController;\n  }\n\n  protected registerListeners() {\n    this.hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    this.hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  protected unregisterListeners() {\n    this.hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    this.hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n  }\n\n  destroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.unregisterListeners();\n    this.isVideoPlaybackQualityAvailable = false;\n    this.media = null;\n  }\n\n  protected onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) {\n    const config = this.hls.config;\n    if (config.capLevelOnFPSDrop) {\n      const media =\n        data.media instanceof self.HTMLVideoElement ? data.media : null;\n      this.media = media;\n      if (media && typeof media.getVideoPlaybackQuality === 'function') {\n        this.isVideoPlaybackQualityAvailable = true;\n      }\n\n      self.clearInterval(this.timer);\n      this.timer = self.setInterval(\n        this.checkFPSInterval.bind(this),\n        config.fpsDroppedMonitoringPeriod,\n      );\n    }\n  }\n\n  private onMediaDetaching() {\n    this.media = null;\n  }\n\n  checkFPS(\n    video: HTMLVideoElement,\n    decodedFrames: number,\n    droppedFrames: number,\n  ) {\n    const currentTime = performance.now();\n    if (decodedFrames) {\n      if (this.lastTime) {\n        const currentPeriod = currentTime - this.lastTime;\n        const currentDropped = droppedFrames - this.lastDroppedFrames;\n        const currentDecoded = decodedFrames - this.lastDecodedFrames;\n        const droppedFPS = (1000 * currentDropped) / currentPeriod;\n        const hls = this.hls;\n        hls.trigger(Events.FPS_DROP, {\n          currentDropped: currentDropped,\n          currentDecoded: currentDecoded,\n          totalDroppedFrames: droppedFrames,\n        });\n        if (droppedFPS > 0) {\n          // hls.logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n          if (\n            currentDropped >\n            hls.config.fpsDroppedMonitoringThreshold * currentDecoded\n          ) {\n            let currentLevel = hls.currentLevel;\n            hls.logger.warn(\n              'drop FPS ratio greater than max allowed value for currentLevel: ' +\n                currentLevel,\n            );\n            if (\n              currentLevel > 0 &&\n              (hls.autoLevelCapping === -1 ||\n                hls.autoLevelCapping >= currentLevel)\n            ) {\n              currentLevel = currentLevel - 1;\n              hls.trigger(Events.FPS_DROP_LEVEL_CAPPING, {\n                level: currentLevel,\n                droppedLevel: hls.currentLevel,\n              });\n              hls.autoLevelCapping = currentLevel;\n              this.streamController.nextLevelSwitch();\n            }\n          }\n        }\n      }\n      this.lastTime = currentTime;\n      this.lastDroppedFrames = droppedFrames;\n      this.lastDecodedFrames = decodedFrames;\n    }\n  }\n\n  checkFPSInterval() {\n    const video = this.media;\n    if (video) {\n      if (this.isVideoPlaybackQualityAvailable) {\n        const videoPlaybackQuality = video.getVideoPlaybackQuality();\n        this.checkFPS(\n          video,\n          videoPlaybackQuality.totalVideoFrames,\n          videoPlaybackQuality.droppedVideoFrames,\n        );\n      } else {\n        // HTMLVideoElement doesn't include the webkit types\n        this.checkFPS(\n          video,\n          (video as any).webkitDecodedFrameCount as number,\n          (video as any).webkitDroppedFrameCount as number,\n        );\n      }\n    }\n  }\n}\n\nexport default FPSController;\n","// From https://github.com/darkskyapp/string-hash\nexport function hash(text: string) {\n  let hash = 5381;\n  let i = text.length;\n  while (i) {\n    hash = (hash * 33) ^ text.charCodeAt(--i);\n  }\n\n  return (hash >>> 0).toString();\n}\n","import { hash } from '../utils/hash';\nimport type { DateRange, DateRangeCue } from './date-range';\nimport type { MediaFragmentRef } from './fragment';\nimport type { Loader, LoaderContext } from '../types/loader';\n\nexport const ALIGNED_END_THRESHOLD_SECONDS = 0.025;\n\nexport type PlaybackRestrictions = {\n  skip: boolean;\n  jump: boolean;\n};\n\nexport type SnapOptions = {\n  out: boolean;\n  in: boolean;\n};\n\nexport enum TimelineOccupancy {\n  Point,\n  Range,\n}\n\nexport type AssetListJSON = {\n  ASSETS: Array<{ URI: string; DURATION: string }>;\n};\nexport interface InterstitialEventWithAssetList extends InterstitialEvent {\n  assetListUrl: string;\n}\n\nexport type BaseData = {\n  url: string;\n};\n\nexport type InterstitialId = string;\nexport type InterstitialAssetId = string;\n\nexport type InterstitialAssetItem = {\n  parentIdentifier: InterstitialId;\n  identifier: InterstitialAssetId;\n  duration: number | null;\n  startOffset: number; // asset start offset from start of interstitial event\n  timelineStart: number; // asset start on media element timeline\n  uri: string;\n  error?: Error;\n};\n\nexport function generateAssetIdentifier(\n  interstitial: InterstitialEvent,\n  uri: string,\n  assetListIndex: number,\n): string {\n  return `${interstitial.identifier}-${assetListIndex + 1}-${hash(uri)}`;\n}\n\nexport class InterstitialEvent {\n  private base: BaseData;\n  private _duration: number | null = null;\n  private _timelineStart: number | null = null;\n  private appendInPlaceDisabled?: boolean;\n  public appendInPlaceStarted?: boolean;\n  public dateRange: DateRange;\n  public hasPlayed: boolean = false;\n  public cumulativeDuration: number = 0;\n  public resumeOffset: number = NaN;\n  public playoutLimit: number = NaN;\n  public restrictions: PlaybackRestrictions = {\n    skip: false,\n    jump: false,\n  };\n  public snapOptions: SnapOptions = {\n    out: false,\n    in: false,\n  };\n  public assetList: InterstitialAssetItem[] = [];\n  public assetListLoader?: Loader<LoaderContext>;\n  public assetListResponse: AssetListJSON | null = null;\n  public resumeAnchor?: MediaFragmentRef;\n  public error?: Error;\n  public resetOnResume?: boolean;\n\n  constructor(dateRange: DateRange, base: BaseData) {\n    this.base = base;\n    this.dateRange = dateRange;\n    this.setDateRange(dateRange);\n  }\n\n  public setDateRange(dateRange: DateRange) {\n    this.dateRange = dateRange;\n    this.resumeOffset = dateRange.attr.optionalFloat(\n      'X-RESUME-OFFSET',\n      this.resumeOffset,\n    );\n    this.playoutLimit = dateRange.attr.optionalFloat(\n      'X-PLAYOUT-LIMIT',\n      this.playoutLimit,\n    );\n    this.restrictions = dateRange.attr.enumeratedStringList(\n      'X-RESTRICT',\n      this.restrictions,\n    );\n    this.snapOptions = dateRange.attr.enumeratedStringList(\n      'X-SNAP',\n      this.snapOptions,\n    );\n  }\n\n  public reset() {\n    this.appendInPlaceStarted = false;\n    this.assetListLoader?.destroy();\n    this.assetListLoader = undefined;\n    if (!this.supplementsPrimary) {\n      this.assetListResponse = null;\n      this.assetList = [];\n      this._duration = null;\n    }\n    // `error?` is reset when seeking back over interstitial `startOffset`\n    //  using `schedule.resetErrorsInRange(start, end)`.\n  }\n\n  public isAssetPastPlayoutLimit(assetIndex: number): boolean {\n    if (assetIndex > 0 && assetIndex >= this.assetList.length) {\n      return true;\n    }\n    const playoutLimit = this.playoutLimit;\n    if (assetIndex <= 0 || isNaN(playoutLimit)) {\n      return false;\n    }\n    if (playoutLimit === 0) {\n      return true;\n    }\n    const assetOffset = this.assetList[assetIndex]?.startOffset || 0;\n    return assetOffset > playoutLimit;\n  }\n\n  public findAssetIndex(asset: InterstitialAssetItem): number {\n    const index = this.assetList.indexOf(asset);\n    return index;\n  }\n\n  get identifier(): InterstitialId {\n    return this.dateRange.id;\n  }\n\n  get startDate(): Date {\n    return this.dateRange.startDate;\n  }\n\n  get startTime(): number {\n    // Primary media timeline start time\n    const startTime = this.dateRange.startTime;\n    if (this.snapOptions.out) {\n      const frag = this.dateRange.tagAnchor;\n      if (frag) {\n        return getSnapToFragmentTime(startTime, frag);\n      }\n    }\n    return startTime;\n  }\n\n  get startOffset(): number {\n    return this.cue.pre ? 0 : this.startTime;\n  }\n\n  get startIsAligned(): boolean {\n    if (this.startTime === 0 || this.snapOptions.out) {\n      return true;\n    }\n    const frag = this.dateRange.tagAnchor;\n    if (frag) {\n      const startTime = this.dateRange.startTime;\n      const snappedStart = getSnapToFragmentTime(startTime, frag);\n      return startTime - snappedStart < 0.1;\n    }\n    return false;\n  }\n\n  get resumptionOffset(): number {\n    const resumeOffset = this.resumeOffset;\n    const offset = Number.isFinite(resumeOffset) ? resumeOffset : this.duration;\n    return this.cumulativeDuration + offset;\n  }\n\n  get resumeTime(): number {\n    // Primary media timeline resumption time\n    const resumeTime = this.startOffset + this.resumptionOffset;\n    if (this.snapOptions.in) {\n      const frag = this.resumeAnchor;\n      if (frag) {\n        return getSnapToFragmentTime(resumeTime, frag);\n      }\n    }\n    return resumeTime;\n  }\n\n  get appendInPlace(): boolean {\n    if (this.appendInPlaceStarted) {\n      return true;\n    }\n    if (this.appendInPlaceDisabled) {\n      return false;\n    }\n    if (\n      !this.cue.once &&\n      !this.cue.pre && // preroll starts at startPosition before startPosition is known (live)\n      this.startIsAligned &&\n      ((isNaN(this.playoutLimit) && isNaN(this.resumeOffset)) ||\n        (this.resumeOffset &&\n          this.duration &&\n          Math.abs(this.resumeOffset - this.duration) <\n            ALIGNED_END_THRESHOLD_SECONDS))\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  set appendInPlace(value: boolean) {\n    if (this.appendInPlaceStarted) {\n      this.resetOnResume = !value;\n      return;\n    }\n    this.appendInPlaceDisabled = !value;\n  }\n\n  // Extended timeline start time\n  get timelineStart(): number {\n    if (this._timelineStart !== null) {\n      return this._timelineStart;\n    }\n    return this.startTime;\n  }\n\n  set timelineStart(value: number) {\n    this._timelineStart = value;\n  }\n\n  get duration(): number {\n    const playoutLimit = this.playoutLimit;\n    let duration: number;\n    if (this._duration !== null) {\n      duration = this._duration;\n    } else if (this.dateRange.duration) {\n      duration = this.dateRange.duration;\n    } else {\n      duration = this.dateRange.plannedDuration || 0;\n    }\n    if (!isNaN(playoutLimit) && playoutLimit < duration) {\n      duration = playoutLimit;\n    }\n    return duration;\n  }\n\n  set duration(value: number) {\n    this._duration = value;\n  }\n\n  get cue(): DateRangeCue {\n    return this.dateRange.cue;\n  }\n\n  get timelineOccupancy() {\n    if (this.dateRange.attr['X-TIMELINE-OCCUPIES'] === 'RANGE') {\n      return TimelineOccupancy.Range;\n    }\n    return TimelineOccupancy.Point;\n  }\n\n  get supplementsPrimary(): boolean {\n    return this.dateRange.attr['X-TIMELINE-STYLE'] === 'PRIMARY';\n  }\n\n  get contentMayVary(): boolean {\n    return this.dateRange.attr['X-CONTENT-MAY-VARY'] !== 'NO';\n  }\n\n  get assetUrl(): string | undefined {\n    return this.dateRange.attr['X-ASSET-URI'];\n  }\n\n  get assetListUrl(): string | undefined {\n    return this.dateRange.attr['X-ASSET-LIST'];\n  }\n\n  get baseUrl(): string {\n    return this.base.url;\n  }\n\n  get assetListLoaded(): boolean {\n    return this.assetList.length > 0 || this.assetListResponse !== null;\n  }\n\n  toString(): string {\n    return eventToString(this);\n  }\n}\n\nfunction getSnapToFragmentTime(time: number, frag: MediaFragmentRef) {\n  return time - frag.start < frag.duration / 2 &&\n    !(\n      Math.abs(time - (frag.start + frag.duration)) <\n      ALIGNED_END_THRESHOLD_SECONDS\n    )\n    ? frag.start\n    : frag.start + frag.duration;\n}\n\nexport function getInterstitialUrl(\n  uri: string,\n  sessionId: string,\n  baseUrl?: string,\n): URL | never {\n  const url = new self.URL(uri, baseUrl);\n  if (url.protocol !== 'data:') {\n    url.searchParams.set('_HLS_primary_id', sessionId);\n  }\n  return url;\n}\n\nexport function getNextAssetIndex(\n  interstitial: InterstitialEvent,\n  assetListIndex: number,\n): number {\n  while (interstitial.assetList[++assetListIndex]?.error) {\n    /* no-op */\n  }\n  return assetListIndex;\n}\n\nfunction eventToString(interstitial: InterstitialEvent): string {\n  return `[\"${interstitial.identifier}\" ${interstitial.cue.pre ? '<pre>' : interstitial.cue.post ? '<post>' : ''}${interstitial.timelineStart.toFixed(2)}-${interstitial.resumeTime.toFixed(2)}]`;\n}\n\nexport function eventAssetToString(asset: InterstitialAssetItem): string {\n  const start = asset.timelineStart;\n  const duration = asset.duration || 0;\n  return `[\"${asset.identifier}\" ${start.toFixed(2)}-${(start + duration).toFixed(2)}]`;\n}\n","import { Events, type HlsListeners } from '../events';\nimport {\n  eventAssetToString,\n  getInterstitialUrl,\n  type InterstitialAssetId,\n  type InterstitialAssetItem,\n  type InterstitialEvent,\n  type InterstitialId,\n} from '../loader/interstitial-event';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport type { HlsConfig } from '../config';\nimport type { InterstitialScheduleEventItem } from '../controller/interstitials-schedule';\nimport type Hls from '../hls';\nimport type { BufferCodecsData, MediaAttachingData } from '../types/events';\n\nexport interface InterstitialPlayer {\n  bufferedEnd: number;\n  currentTime: number;\n  duration: number;\n  assetPlayers: (HlsAssetPlayer | null)[];\n  playingIndex: number;\n  scheduleItem: InterstitialScheduleEventItem | null;\n}\n\nexport type HlsAssetPlayerConfig = Partial<HlsConfig> &\n  Required<Pick<HlsConfig, 'assetPlayerId' | 'primarySessionId'>>;\n\nexport class HlsAssetPlayer {\n  public hls: Hls | null;\n  public interstitial: InterstitialEvent;\n  public readonly assetItem: InterstitialAssetItem;\n  public tracks: Partial<BufferCodecsData> | null = null;\n  private hasDetails: boolean = false;\n  private mediaAttached: HTMLMediaElement | null = null;\n  private _currentTime?: number;\n  private _bufferedEosTime?: number;\n\n  constructor(\n    HlsPlayerClass: typeof Hls,\n    userConfig: HlsAssetPlayerConfig,\n    interstitial: InterstitialEvent,\n    assetItem: InterstitialAssetItem,\n  ) {\n    const hls = (this.hls = new HlsPlayerClass(userConfig));\n    this.interstitial = interstitial;\n    this.assetItem = assetItem;\n    const detailsLoaded = () => {\n      this.hasDetails = true;\n    };\n    hls.once(Events.LEVEL_LOADED, detailsLoaded);\n    hls.once(Events.AUDIO_TRACK_LOADED, detailsLoaded);\n    hls.once(Events.SUBTITLE_TRACK_LOADED, detailsLoaded);\n    hls.on(Events.MEDIA_ATTACHING, (name, { media }) => {\n      this.removeMediaListeners();\n      this.mediaAttached = media;\n      const event = this.interstitial;\n      if (event.playoutLimit) {\n        media.addEventListener('timeupdate', this.checkPlayout);\n        if (this.appendInPlace) {\n          hls.on(Events.BUFFER_APPENDED, () => {\n            const bufferedEnd = this.bufferedEnd;\n            if (this.reachedPlayout(bufferedEnd)) {\n              this._bufferedEosTime = bufferedEnd;\n              hls.trigger(Events.BUFFERED_TO_END, undefined);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  get appendInPlace(): boolean {\n    return this.interstitial.appendInPlace;\n  }\n\n  loadSource() {\n    const hls = this.hls;\n    if (!hls) {\n      return;\n    }\n    if (!hls.url) {\n      let uri: string = this.assetItem.uri;\n      try {\n        uri = getInterstitialUrl(uri, hls.config.primarySessionId || '').href;\n      } catch (error) {\n        // Ignore error parsing ASSET_URI or adding _HLS_primary_id to it. The\n        // issue should surface as an INTERSTITIAL_ASSET_ERROR loading the asset.\n      }\n      hls.loadSource(uri);\n    } else if (hls.levels.length && !(hls as any).started) {\n      hls.startLoad(-1, true);\n    }\n  }\n\n  bufferedInPlaceToEnd(media?: HTMLMediaElement | null) {\n    if (!this.appendInPlace) {\n      return false;\n    }\n    if (this.hls?.bufferedToEnd) {\n      return true;\n    }\n    if (!media) {\n      return false;\n    }\n    const duration = Math.min(this._bufferedEosTime || Infinity, this.duration);\n    const start = this.timelineOffset;\n    const bufferInfo = BufferHelper.bufferInfo(media, start, 0);\n    const bufferedEnd = this.getAssetTime(bufferInfo.end);\n    return bufferedEnd >= duration - 0.02;\n  }\n\n  private checkPlayout = () => {\n    if (this.reachedPlayout(this.currentTime) && this.hls) {\n      this.hls.trigger(Events.PLAYOUT_LIMIT_REACHED, {});\n    }\n  };\n\n  private reachedPlayout(time: number): boolean {\n    const interstitial = this.interstitial;\n    const playoutLimit = interstitial.playoutLimit;\n    return this.startOffset + time >= playoutLimit;\n  }\n\n  get destroyed(): boolean {\n    return !this.hls?.userConfig;\n  }\n\n  get assetId(): InterstitialAssetId {\n    return this.assetItem.identifier;\n  }\n\n  get interstitialId(): InterstitialId {\n    return this.assetItem.parentIdentifier;\n  }\n\n  get media(): HTMLMediaElement | null {\n    return this.hls?.media || null;\n  }\n\n  get bufferedEnd(): number {\n    const media = this.media || this.mediaAttached;\n    if (!media) {\n      if (this._bufferedEosTime) {\n        return this._bufferedEosTime;\n      }\n      return this.currentTime;\n    }\n    const bufferInfo = BufferHelper.bufferInfo(media, media.currentTime, 0.001);\n    return this.getAssetTime(bufferInfo.end);\n  }\n\n  get currentTime(): number {\n    const media = this.media || this.mediaAttached;\n    if (!media) {\n      return this._currentTime || 0;\n    }\n    return this.getAssetTime(media.currentTime);\n  }\n\n  get duration(): number {\n    const duration = this.assetItem.duration;\n    if (!duration) {\n      return 0;\n    }\n    const playoutLimit = this.interstitial.playoutLimit;\n    if (playoutLimit) {\n      const assetPlayout = playoutLimit - this.startOffset;\n      if (assetPlayout > 0 && assetPlayout < duration) {\n        return assetPlayout;\n      }\n    }\n    return duration;\n  }\n\n  get remaining(): number {\n    const duration = this.duration;\n    if (!duration) {\n      return 0;\n    }\n    return Math.max(0, duration - this.currentTime);\n  }\n\n  get startOffset(): number {\n    return this.assetItem.startOffset;\n  }\n\n  get timelineOffset(): number {\n    return this.hls?.config.timelineOffset || 0;\n  }\n\n  set timelineOffset(value: number) {\n    const timelineOffset = this.timelineOffset;\n    if (value !== timelineOffset) {\n      const diff = value - timelineOffset;\n      if (Math.abs(diff) > 1 / 90000 && this.hls) {\n        if (this.hasDetails) {\n          throw new Error(\n            `Cannot set timelineOffset after playlists are loaded`,\n          );\n        }\n        this.hls.config.timelineOffset = value;\n      }\n    }\n  }\n\n  private getAssetTime(time: number): number {\n    const timelineOffset = this.timelineOffset;\n    const duration = this.duration;\n    return Math.min(Math.max(0, time - timelineOffset), duration);\n  }\n\n  private removeMediaListeners() {\n    const media = this.mediaAttached;\n    if (media) {\n      this._currentTime = media.currentTime;\n      this.bufferSnapShot();\n      media.removeEventListener('timeupdate', this.checkPlayout);\n    }\n  }\n\n  private bufferSnapShot() {\n    if (this.mediaAttached) {\n      if (this.hls?.bufferedToEnd) {\n        this._bufferedEosTime = this.bufferedEnd;\n      }\n    }\n  }\n\n  destroy() {\n    this.removeMediaListeners();\n    if (this.hls) {\n      this.hls.destroy();\n    }\n    this.hls = null;\n    // @ts-ignore\n    this.tracks = this.mediaAttached = this.checkPlayout = null;\n  }\n\n  attachMedia(data: HTMLMediaElement | MediaAttachingData) {\n    this.loadSource();\n    this.hls?.attachMedia(data);\n  }\n\n  detachMedia() {\n    this.removeMediaListeners();\n    this.mediaAttached = null;\n    this.hls?.detachMedia();\n  }\n\n  resumeBuffering() {\n    this.hls?.resumeBuffering();\n  }\n\n  pauseBuffering() {\n    this.hls?.pauseBuffering();\n  }\n\n  transferMedia() {\n    this.bufferSnapShot();\n    return this.hls?.transferMedia() || null;\n  }\n\n  resetDetails() {\n    const hls = this.hls;\n    if (hls && this.hasDetails) {\n      hls.stopLoad();\n      const deleteDetails = (obj) => delete obj.details;\n      hls.levels.forEach(deleteDetails);\n      hls.allAudioTracks.forEach(deleteDetails);\n      hls.allSubtitleTracks.forEach(deleteDetails);\n      this.hasDetails = false;\n    }\n  }\n\n  on<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ) {\n    this.hls?.on(event, listener);\n  }\n\n  once<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ) {\n    this.hls?.once(event, listener);\n  }\n\n  off<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context?: Context,\n  ) {\n    this.hls?.off(event, listener);\n  }\n\n  toString(): string {\n    return `HlsAssetPlayer: ${eventAssetToString(this.assetItem)} ${this.hls?.sessionId} ${this.appendInPlace ? 'append-in-place' : ''}`;\n  }\n}\n","import { findFragmentByPTS } from './fragment-finders';\nimport {\n  ALIGNED_END_THRESHOLD_SECONDS,\n  type BaseData,\n  InterstitialEvent,\n  type InterstitialId,\n  TimelineOccupancy,\n} from '../loader/interstitial-event';\nimport { Logger } from '../utils/logger';\nimport type { DateRange } from '../loader/date-range';\nimport type { MediaSelection } from '../types/media-playlist';\nimport type { ILogger } from '../utils/logger';\n\nconst ABUTTING_THRESHOLD_SECONDS = 0.033;\n\nexport type InterstitialScheduleEventItem = {\n  event: InterstitialEvent;\n  start: number;\n  end: number;\n  playout: {\n    start: number;\n    end: number;\n  };\n  integrated: {\n    start: number;\n    end: number;\n  };\n};\n\nexport type InterstitialSchedulePrimaryItem = {\n  nextEvent: InterstitialEvent | null;\n  previousEvent: InterstitialEvent | null;\n  event?: undefined;\n  start: number;\n  end: number;\n  playout: {\n    start: number;\n    end: number;\n  };\n  integrated: {\n    start: number;\n    end: number;\n  };\n};\n\nexport type InterstitialScheduleItem =\n  | InterstitialScheduleEventItem\n  | InterstitialSchedulePrimaryItem;\n\nexport type InterstitialScheduleDurations = {\n  primary: number;\n  playout: number;\n  integrated: number;\n};\n\nexport type TimelineType = 'primary' | 'playout' | 'integrated';\n\ntype ScheduleUpdateCallback = (\n  removed: InterstitialEvent[],\n  previousItems: InterstitialScheduleItem[] | null,\n) => void;\n\nexport class InterstitialsSchedule extends Logger {\n  private onScheduleUpdate: ScheduleUpdateCallback;\n  private eventMap: Record<string, InterstitialEvent | undefined> = {};\n  public events: InterstitialEvent[] | null = null;\n  public items: InterstitialScheduleItem[] | null = null;\n  public durations: InterstitialScheduleDurations = {\n    primary: 0,\n    playout: 0,\n    integrated: 0,\n  };\n\n  constructor(onScheduleUpdate: ScheduleUpdateCallback, logger: ILogger) {\n    super('interstitials-sched', logger);\n    this.onScheduleUpdate = onScheduleUpdate;\n  }\n\n  public destroy() {\n    this.reset();\n    // @ts-ignore\n    this.onScheduleUpdate = null;\n  }\n\n  public reset() {\n    this.eventMap = {};\n    this.setDurations(0, 0, 0);\n    if (this.events) {\n      this.events.forEach((interstitial) => interstitial.reset());\n    }\n    this.events = this.items = null;\n  }\n\n  public resetErrorsInRange(start: number, end: number): number {\n    if (this.events) {\n      return this.events.reduce((count, interstitial) => {\n        if (\n          start <= interstitial.startOffset &&\n          end > interstitial.startOffset\n        ) {\n          delete interstitial.error;\n          return count + 1;\n        }\n        return count;\n      }, 0);\n    }\n    return 0;\n  }\n\n  get duration(): number {\n    const items = this.items;\n    return items ? items[items.length - 1].end : 0;\n  }\n\n  get length(): number {\n    return this.items ? this.items.length : 0;\n  }\n\n  public getEvent(\n    identifier: InterstitialId | undefined,\n  ): InterstitialEvent | null {\n    return identifier ? this.eventMap[identifier] || null : null;\n  }\n\n  public hasEvent(identifier: InterstitialId): boolean {\n    return identifier in this.eventMap;\n  }\n\n  public findItemIndex(item: InterstitialScheduleItem, time?: number): number {\n    if (item.event) {\n      // Find Event Item\n      return this.findEventIndex(item.event.identifier);\n    }\n    // Find Primary Item\n    let index = -1;\n    if (item.nextEvent) {\n      index = this.findEventIndex(item.nextEvent.identifier) - 1;\n    } else if (item.previousEvent) {\n      index = this.findEventIndex(item.previousEvent.identifier) + 1;\n    }\n    const items = this.items;\n    if (items) {\n      if (!items[index]) {\n        if (time === undefined) {\n          time = item.start;\n        }\n        index = this.findItemIndexAtTime(time);\n      }\n      // Only return index of a Primary Item\n      while (index >= 0 && items[index]?.event) {\n        // If index found is an interstitial it is not a valid result as it should have been matched up top\n        // decrement until result is negative (not found) or a primary segment\n        index--;\n      }\n    }\n    return index;\n  }\n\n  public findItemIndexAtTime(\n    timelinePos: number,\n    timelineType?: TimelineType,\n  ): number {\n    const items = this.items;\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        let timeRange: { start: number; end: number } = items[i];\n        if (timelineType && timelineType !== 'primary') {\n          timeRange = timeRange[timelineType];\n        }\n        if (\n          timelinePos === timeRange.start ||\n          (timelinePos > timeRange.start && timelinePos < timeRange.end)\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public findJumpRestrictedIndex(startIndex: number, endIndex: number): number {\n    const items = this.items;\n    if (items) {\n      for (let i = startIndex; i <= endIndex; i++) {\n        if (!items[i]) {\n          break;\n        }\n        const event = items[i].event;\n        if (event?.restrictions.jump && !event.appendInPlace) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public findEventIndex(identifier: InterstitialId): number {\n    const items = this.items;\n    if (items) {\n      for (let i = items.length; i--; ) {\n        if (items[i].event?.identifier === identifier) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  public findAssetIndex(event: InterstitialEvent, timelinePos: number): number {\n    const assetList = event.assetList;\n    const length = assetList.length;\n    if (length > 1) {\n      for (let i = 0; i < length; i++) {\n        const asset = assetList[i];\n        if (!asset.error) {\n          const timelineStart = asset.timelineStart;\n          if (\n            timelinePos === timelineStart ||\n            (timelinePos > timelineStart &&\n              (timelinePos < timelineStart + (asset.duration || 0) ||\n                i === length - 1))\n          ) {\n            return i;\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public get assetIdAtEnd(): string | null {\n    const interstitialAtEnd = this.items?.[this.length - 1]?.event;\n    if (interstitialAtEnd) {\n      const assetList = interstitialAtEnd.assetList;\n      const assetAtEnd = assetList[assetList.length - 1];\n      if (assetAtEnd) {\n        return assetAtEnd.identifier;\n      }\n    }\n    return null;\n  }\n\n  public parseInterstitialDateRanges(\n    mediaSelection: MediaSelection,\n    enableAppendInPlace: boolean,\n  ) {\n    const details = mediaSelection.main.details!;\n    const { dateRanges } = details;\n    const previousInterstitialEvents = this.events;\n    const interstitialEvents = this.parseDateRanges(\n      dateRanges,\n      {\n        url: details.url,\n      },\n      enableAppendInPlace,\n    );\n    const ids = Object.keys(dateRanges);\n    const removedInterstitials = previousInterstitialEvents\n      ? previousInterstitialEvents.filter(\n          (event) => !ids.includes(event.identifier),\n        )\n      : [];\n    if (interstitialEvents.length) {\n      // pre-rolls, post-rolls, and events with the same start time are played in playlist tag order\n      // all other events are ordered by start time\n      interstitialEvents.sort((a, b) => {\n        const aPre = a.cue.pre;\n        const aPost = a.cue.post;\n        const bPre = b.cue.pre;\n        const bPost = b.cue.post;\n        if (aPre && !bPre) {\n          return -1;\n        }\n        if (bPre && !aPre) {\n          return 1;\n        }\n        if (aPost && !bPost) {\n          return 1;\n        }\n        if (bPost && !aPost) {\n          return -1;\n        }\n        if (!aPre && !bPre && !aPost && !bPost) {\n          const startA = a.startTime;\n          const startB = b.startTime;\n          if (startA !== startB) {\n            return startA - startB;\n          }\n        }\n        return a.dateRange.tagOrder - b.dateRange.tagOrder;\n      });\n    }\n    this.events = interstitialEvents;\n\n    // Clear removed DateRanges from buffered list (kills playback of active Interstitials)\n    removedInterstitials.forEach((interstitial) => {\n      this.removeEvent(interstitial);\n    });\n\n    this.updateSchedule(mediaSelection, removedInterstitials);\n  }\n\n  public updateSchedule(\n    mediaSelection: MediaSelection,\n    removedInterstitials: InterstitialEvent[] = [],\n    forceUpdate: boolean = false,\n  ) {\n    const events = this.events || [];\n    if (events.length || removedInterstitials.length || this.length < 2) {\n      const currentItems = this.items;\n      const updatedItems = this.parseSchedule(events, mediaSelection);\n      const updated =\n        forceUpdate ||\n        removedInterstitials.length ||\n        currentItems?.length !== updatedItems.length ||\n        updatedItems.some((item, i) => {\n          return (\n            Math.abs(item.playout.start - currentItems[i].playout.start) >\n              0.005 ||\n            Math.abs(item.playout.end - currentItems[i].playout.end) > 0.005\n          );\n        });\n      if (updated) {\n        this.items = updatedItems;\n        // call interstitials-controller onScheduleUpdated()\n        this.onScheduleUpdate(removedInterstitials, currentItems);\n      }\n    }\n  }\n\n  private parseDateRanges(\n    dateRanges: Record<string, DateRange | undefined>,\n    baseData: BaseData,\n    enableAppendInPlace: boolean,\n  ): InterstitialEvent[] {\n    const interstitialEvents: InterstitialEvent[] = [];\n    const ids = Object.keys(dateRanges);\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const dateRange = dateRanges[id]!;\n      if (dateRange.isInterstitial) {\n        let interstitial = this.eventMap[id];\n        if (interstitial) {\n          // Update InterstitialEvent already parsed and mapped\n          // This retains already loaded duration and loaded asset list info\n          interstitial.setDateRange(dateRange);\n        } else {\n          interstitial = new InterstitialEvent(dateRange, baseData);\n          this.eventMap[id] = interstitial;\n          if (enableAppendInPlace === false) {\n            interstitial.appendInPlace = enableAppendInPlace;\n          }\n        }\n        interstitialEvents.push(interstitial);\n      }\n    }\n    return interstitialEvents;\n  }\n\n  private parseSchedule(\n    interstitialEvents: InterstitialEvent[],\n    mediaSelection: MediaSelection,\n  ): InterstitialScheduleItem[] {\n    const schedule: InterstitialScheduleItem[] = [];\n    const details = mediaSelection.main.details!;\n    const primaryDuration = details.live ? Infinity : details.edge;\n    let playoutDuration = 0;\n\n    // Filter events that have errored from the schedule (Primary fallback)\n    interstitialEvents = interstitialEvents.filter(\n      (event) => !event.error && !(event.cue.once && event.hasPlayed),\n    );\n    if (interstitialEvents.length) {\n      // Update Schedule\n      this.resolveOffsets(interstitialEvents, mediaSelection);\n\n      // Populate Schedule with Interstitial Event and Primary Segment Items\n      let primaryPosition = 0;\n      let integratedTime = 0;\n      interstitialEvents.forEach((interstitial, i) => {\n        const preroll = interstitial.cue.pre;\n        const postroll = interstitial.cue.post;\n        const previousEvent =\n          (interstitialEvents[i - 1] as InterstitialEvent | undefined) || null;\n        const appendInPlace = interstitial.appendInPlace;\n        const eventStart = postroll\n          ? primaryDuration\n          : interstitial.startOffset;\n        const interstitialDuration = interstitial.duration;\n        const timelineDuration =\n          interstitial.timelineOccupancy === TimelineOccupancy.Range\n            ? interstitialDuration\n            : 0;\n        const resumptionOffset = interstitial.resumptionOffset;\n        const inSameStartTimeSequence = previousEvent?.startTime === eventStart;\n        const start = eventStart + interstitial.cumulativeDuration;\n        let end = appendInPlace\n          ? start + interstitialDuration\n          : eventStart + resumptionOffset;\n        if (preroll || (!postroll && eventStart <= 0)) {\n          // preroll or in-progress midroll\n          const integratedStart = integratedTime;\n          integratedTime += timelineDuration;\n          interstitial.timelineStart = start;\n          const playoutStart = playoutDuration;\n          playoutDuration += interstitialDuration;\n          schedule.push({\n            event: interstitial,\n            start,\n            end,\n            playout: {\n              start: playoutStart,\n              end: playoutDuration,\n            },\n            integrated: {\n              start: integratedStart,\n              end: integratedTime,\n            },\n          });\n        } else if (eventStart <= primaryDuration) {\n          if (!inSameStartTimeSequence) {\n            const segmentDuration = eventStart - primaryPosition;\n            // Do not schedule a primary segment if interstitials are abutting by less than ABUTTING_THRESHOLD_SECONDS\n            if (segmentDuration > ABUTTING_THRESHOLD_SECONDS) {\n              // primary segment\n              const timelineStart = primaryPosition;\n              const integratedStart = integratedTime;\n              integratedTime += segmentDuration;\n              const playoutStart = playoutDuration;\n              playoutDuration += segmentDuration;\n              const primarySegment = {\n                previousEvent: interstitialEvents[i - 1] || null,\n                nextEvent: interstitial,\n                start: timelineStart,\n                end: timelineStart + segmentDuration,\n                playout: {\n                  start: playoutStart,\n                  end: playoutDuration,\n                },\n                integrated: {\n                  start: integratedStart,\n                  end: integratedTime,\n                },\n              };\n              schedule.push(primarySegment);\n            } else if (segmentDuration > 0 && previousEvent) {\n              // Add previous event `resumeTime` (based on duration or resumeOffset) so that it ends aligned with this one\n              previousEvent.cumulativeDuration += segmentDuration;\n              schedule[schedule.length - 1].end = eventStart;\n            }\n          }\n          // midroll / postroll\n          if (postroll) {\n            end = start;\n          }\n          interstitial.timelineStart = start;\n          const integratedStart = integratedTime;\n          integratedTime += timelineDuration;\n          const playoutStart = playoutDuration;\n          playoutDuration += interstitialDuration;\n          schedule.push({\n            event: interstitial,\n            start,\n            end,\n            playout: {\n              start: playoutStart,\n              end: playoutDuration,\n            },\n            integrated: {\n              start: integratedStart,\n              end: integratedTime,\n            },\n          });\n        } else {\n          // Interstitial starts after end of primary VOD - not included in schedule\n          return;\n        }\n        const resumeTime = interstitial.resumeTime;\n        if (postroll || resumeTime > primaryDuration) {\n          primaryPosition = primaryDuration;\n        } else {\n          primaryPosition = resumeTime;\n        }\n      });\n      if (primaryPosition < primaryDuration) {\n        // last primary segment\n        const timelineStart = primaryPosition;\n        const integratedStart = integratedTime;\n        const segmentDuration = primaryDuration - primaryPosition;\n        integratedTime += segmentDuration;\n        const playoutStart = playoutDuration;\n        playoutDuration += segmentDuration;\n        schedule.push({\n          previousEvent: schedule[schedule.length - 1]?.event || null,\n          nextEvent: null,\n          start: primaryPosition,\n          end: timelineStart + segmentDuration,\n          playout: {\n            start: playoutStart,\n            end: playoutDuration,\n          },\n          integrated: {\n            start: integratedStart,\n            end: integratedTime,\n          },\n        });\n      }\n      this.setDurations(primaryDuration, playoutDuration, integratedTime);\n    } else {\n      // no interstials - schedule is one primary segment\n      const start = 0;\n      schedule.push({\n        previousEvent: null,\n        nextEvent: null,\n        start,\n        end: primaryDuration,\n        playout: {\n          start,\n          end: primaryDuration,\n        },\n        integrated: {\n          start,\n          end: primaryDuration,\n        },\n      });\n      this.setDurations(primaryDuration, primaryDuration, primaryDuration);\n    }\n    return schedule;\n  }\n\n  private setDurations(primary: number, playout: number, integrated: number) {\n    this.durations = {\n      primary,\n      playout,\n      integrated,\n    };\n  }\n\n  private resolveOffsets(\n    interstitialEvents: InterstitialEvent[],\n    mediaSelection: MediaSelection,\n  ) {\n    const details = mediaSelection.main.details!;\n    const primaryDuration = details.live ? Infinity : details.edge;\n\n    // First resolve cumulative resumption offsets for Interstitials that start at the same DateTime\n    let cumulativeDuration = 0;\n    let lastScheduledStart = -1;\n    interstitialEvents.forEach((interstitial, i) => {\n      const preroll = interstitial.cue.pre;\n      const postroll = interstitial.cue.post;\n      const eventStart = preroll\n        ? 0\n        : postroll\n          ? primaryDuration\n          : interstitial.startTime;\n      this.updateAssetDurations(interstitial);\n\n      // X-RESUME-OFFSET values of interstitials scheduled at the same time are cumulative\n      const inSameStartTimeSequence = lastScheduledStart === eventStart;\n      if (inSameStartTimeSequence) {\n        interstitial.cumulativeDuration = cumulativeDuration;\n      } else {\n        cumulativeDuration = 0;\n        lastScheduledStart = eventStart;\n      }\n      if (!postroll && interstitial.snapOptions.in) {\n        // FIXME: Include audio playlist in snapping\n        interstitial.resumeAnchor =\n          findFragmentByPTS(\n            null,\n            details.fragments,\n            interstitial.startOffset + interstitial.resumptionOffset,\n            0,\n            0,\n          ) || undefined;\n      }\n      // Check if primary fragments align with resumption offset and disable appendInPlace if they do not\n      if (interstitial.appendInPlace && !interstitial.appendInPlaceStarted) {\n        const alignedSegmentStart = this.primaryCanResumeInPlaceAt(\n          interstitial,\n          mediaSelection,\n        );\n        if (!alignedSegmentStart) {\n          interstitial.appendInPlace = false;\n        }\n      }\n      if (!interstitial.appendInPlace && i + 1 < interstitialEvents.length) {\n        // abutting Interstitials must use the same MediaSource strategy, this applies to all whether or not they are back to back:\n        const timeBetween =\n          interstitialEvents[i + 1].startTime -\n          interstitialEvents[i].resumeTime;\n        if (timeBetween < ABUTTING_THRESHOLD_SECONDS) {\n          interstitialEvents[i + 1].appendInPlace = false;\n          if (interstitialEvents[i + 1].appendInPlace) {\n            this.warn(\n              `Could not change append strategy for abutting event ${interstitial}`,\n            );\n          }\n        }\n      }\n      // Update cumulativeDuration for next abutting interstitial with the same start date\n      const resumeOffset = Number.isFinite(interstitial.resumeOffset)\n        ? interstitial.resumeOffset\n        : interstitial.duration;\n      cumulativeDuration += resumeOffset;\n    });\n  }\n\n  private primaryCanResumeInPlaceAt(\n    interstitial: InterstitialEvent,\n    mediaSelection: MediaSelection,\n  ): boolean {\n    const resumeTime = interstitial.resumeTime;\n    const resumesInPlaceAt =\n      interstitial.startTime + interstitial.resumptionOffset;\n    if (\n      Math.abs(resumeTime - resumesInPlaceAt) > ALIGNED_END_THRESHOLD_SECONDS\n    ) {\n      this.log(\n        `\"${interstitial.identifier}\" resumption ${resumeTime} not aligned with estimated timeline end ${resumesInPlaceAt}`,\n      );\n      return false;\n    }\n    const playlists = Object.keys(mediaSelection);\n    return !playlists.some((playlistType) => {\n      const details = mediaSelection[playlistType].details;\n      const playlistEnd = details.edge;\n      if (resumeTime >= playlistEnd) {\n        // Live playback - resumption segments are not yet available\n        this.log(\n          `\"${interstitial.identifier}\" resumption ${resumeTime} past ${playlistType} playlist end ${playlistEnd}`,\n        );\n        // Assume alignment is possible (or reset can take place)\n        return false;\n      }\n      const startFragment = findFragmentByPTS(\n        null,\n        details.fragments,\n        resumeTime,\n      );\n      if (!startFragment) {\n        this.log(\n          `\"${interstitial.identifier}\" resumption ${resumeTime} does not align with any fragments in ${playlistType} playlist (${details.fragStart}-${details.fragmentEnd})`,\n        );\n        return true;\n      }\n      const allowance = playlistType === 'audio' ? 0.175 : 0;\n      const alignedWithSegment =\n        Math.abs(startFragment.start - resumeTime) <\n          ALIGNED_END_THRESHOLD_SECONDS + allowance ||\n        Math.abs(startFragment.end - resumeTime) <\n          ALIGNED_END_THRESHOLD_SECONDS + allowance;\n      if (!alignedWithSegment) {\n        this.log(\n          `\"${interstitial.identifier}\" resumption ${resumeTime} not aligned with ${playlistType} fragment bounds (${startFragment.start}-${startFragment.end} sn: ${startFragment.sn} cc: ${startFragment.cc})`,\n        );\n        return true;\n      }\n      return false;\n    });\n  }\n\n  private updateAssetDurations(interstitial: InterstitialEvent) {\n    if (!interstitial.assetListLoaded) {\n      return;\n    }\n    const eventStart = interstitial.timelineStart;\n    let sumDuration = 0;\n    let hasUnknownDuration = false;\n    let hasErrors = false;\n    for (let i = 0; i < interstitial.assetList.length; i++) {\n      const asset = interstitial.assetList[i];\n      const timelineStart = eventStart + sumDuration;\n      asset.startOffset = sumDuration;\n      asset.timelineStart = timelineStart;\n      hasUnknownDuration ||= asset.duration === null;\n      hasErrors ||= !!asset.error;\n      const duration = asset.error ? 0 : (asset.duration as number) || 0;\n      sumDuration += duration;\n    }\n    // Use the sum of known durations when it is greater than the stated duration\n    if (hasUnknownDuration && !hasErrors) {\n      interstitial.duration = Math.max(sumDuration, interstitial.duration);\n    } else {\n      interstitial.duration = sumDuration;\n    }\n  }\n\n  private removeEvent(interstitial: InterstitialEvent) {\n    interstitial.reset();\n    delete this.eventMap[interstitial.identifier];\n  }\n}\n\nexport function segmentToString(segment: InterstitialScheduleItem): string {\n  return `[${segment.event ? '\"' + segment.event.identifier + '\"' : 'primary'}: ${segment.start.toFixed(2)}-${segment.end.toFixed(2)}]`;\n}\n","import {\n  type AssetListJSON,\n  getInterstitialUrl,\n  type InterstitialEventWithAssetList,\n} from './interstitial-event';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport type { InterstitialEvent } from './interstitial-event';\nimport type Hls from '../hls';\nimport type { ErrorData } from '../types/events';\nimport type {\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderResponse,\n  LoaderStats,\n} from '../types/loader';\n\nexport class AssetListLoader {\n  private hls: Hls;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n  }\n\n  destroy() {\n    // @ts-ignore\n    this.hls = null;\n  }\n\n  loadAssetList(\n    interstitial: InterstitialEventWithAssetList,\n    hlsStartOffset: number | undefined,\n  ): Loader<LoaderContext> | undefined {\n    const assetListUrl = interstitial.assetListUrl;\n    let url: URL;\n    try {\n      url = getInterstitialUrl(\n        assetListUrl,\n        this.hls.sessionId,\n        interstitial.baseUrl,\n      );\n    } catch (error) {\n      const errorData = this.assignAssetListError(\n        interstitial,\n        ErrorDetails.ASSET_LIST_LOAD_ERROR,\n        error,\n        assetListUrl,\n      );\n      this.hls.trigger(Events.ERROR, errorData);\n      return;\n    }\n    if (hlsStartOffset && url.protocol !== 'data:') {\n      url.searchParams.set('_HLS_start_offset', '' + hlsStartOffset);\n    }\n    const config = this.hls.config;\n    const Loader = config.loader;\n    const loader = new Loader(config) as Loader<LoaderContext>;\n    const context: LoaderContext = {\n      responseType: 'json',\n      url: url.href,\n    };\n    const loadPolicy = config.interstitialAssetListLoadPolicy.default;\n    const loaderConfig: LoaderConfiguration = {\n      loadPolicy,\n      timeout: loadPolicy.maxLoadTimeMs,\n      maxRetry: 0,\n      retryDelay: 0,\n      maxRetryDelay: 0,\n    };\n    const callbacks: LoaderCallbacks<LoaderContext> = {\n      onSuccess: (\n        response: LoaderResponse,\n        stats: LoaderStats,\n        context: LoaderContext,\n        networkDetails: any,\n      ) => {\n        const assetListResponse = response.data as AssetListJSON;\n        const assets = assetListResponse?.ASSETS;\n        if (!Array.isArray(assets)) {\n          const errorData = this.assignAssetListError(\n            interstitial,\n            ErrorDetails.ASSET_LIST_PARSING_ERROR,\n            new Error(`Invalid interstitial asset list`),\n            context.url,\n            stats,\n            networkDetails,\n          );\n          this.hls.trigger(Events.ERROR, errorData);\n          return;\n        }\n        interstitial.assetListResponse = assetListResponse;\n        this.hls.trigger(Events.ASSET_LIST_LOADED, {\n          event: interstitial,\n          assetListResponse,\n          networkDetails,\n        });\n      },\n      onError: (\n        error: { code: number; text: string },\n        context: LoaderContext,\n        networkDetails: any,\n        stats: LoaderStats,\n      ) => {\n        const errorData = this.assignAssetListError(\n          interstitial,\n          ErrorDetails.ASSET_LIST_LOAD_ERROR,\n          new Error(\n            `Error loading X-ASSET-LIST: HTTP status ${error.code} ${error.text} (${context.url})`,\n          ),\n          context.url,\n          stats,\n          networkDetails,\n        );\n        this.hls.trigger(Events.ERROR, errorData);\n      },\n      onTimeout: (\n        stats: LoaderStats,\n        context: LoaderContext,\n        networkDetails: any,\n      ) => {\n        const errorData = this.assignAssetListError(\n          interstitial,\n          ErrorDetails.ASSET_LIST_LOAD_TIMEOUT,\n          new Error(`Timeout loading X-ASSET-LIST (${context.url})`),\n          context.url,\n          stats,\n          networkDetails,\n        );\n        this.hls.trigger(Events.ERROR, errorData);\n      },\n    };\n    loader.load(context, loaderConfig, callbacks);\n    this.hls.trigger(Events.ASSET_LIST_LOADING, {\n      event: interstitial,\n    });\n    return loader;\n  }\n\n  assignAssetListError(\n    interstitial: InterstitialEvent,\n    details: ErrorDetails,\n    error: Error,\n    url: string,\n    stats?: LoaderStats,\n    networkDetails?: any,\n  ): ErrorData {\n    interstitial.error = error;\n    return {\n      type: ErrorTypes.NETWORK_ERROR,\n      details,\n      fatal: false,\n      interstitial,\n      url,\n      error,\n      networkDetails,\n      stats,\n    };\n  }\n}\n","import { createDoNothingErrorAction } from './error-controller';\nimport { HlsAssetPlayer } from './interstitial-player';\nimport {\n  type InterstitialScheduleEventItem,\n  type InterstitialScheduleItem,\n  type InterstitialSchedulePrimaryItem,\n  InterstitialsSchedule,\n  segmentToString,\n  type TimelineType,\n} from './interstitials-schedule';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { AssetListLoader } from '../loader/interstitial-asset-list';\nimport {\n  ALIGNED_END_THRESHOLD_SECONDS,\n  eventAssetToString,\n  generateAssetIdentifier,\n  getNextAssetIndex,\n  type InterstitialAssetId,\n  type InterstitialAssetItem,\n  type InterstitialEvent,\n  type InterstitialEventWithAssetList,\n  TimelineOccupancy,\n} from '../loader/interstitial-event';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport {\n  addEventListener,\n  removeEventListener,\n} from '../utils/event-listener-helper';\nimport { hash } from '../utils/hash';\nimport { Logger } from '../utils/logger';\nimport { isCompatibleTrackChange } from '../utils/mediasource-helper';\nimport { getBasicSelectionOption } from '../utils/rendition-helper';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type {\n  HlsAssetPlayerConfig,\n  InterstitialPlayer,\n} from './interstitial-player';\nimport type Hls from '../hls';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { SourceBufferName } from '../types/buffer';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  AssetListLoadedData,\n  AudioTrackSwitchingData,\n  AudioTrackUpdatedData,\n  BufferAppendedData,\n  BufferCodecsData,\n  BufferFlushedData,\n  ErrorData,\n  LevelUpdatedData,\n  MediaAttachedData,\n  MediaAttachingData,\n  MediaDetachingData,\n  SubtitleTrackSwitchData,\n  SubtitleTrackUpdatedData,\n} from '../types/events';\nimport type { MediaPlaylist, MediaSelection } from '../types/media-playlist';\n\nexport interface InterstitialsManager {\n  events: InterstitialEvent[];\n  schedule: InterstitialScheduleItem[];\n  interstitialPlayer: InterstitialPlayer | null;\n  playerQueue: HlsAssetPlayer[];\n  bufferingAsset: InterstitialAssetItem | null;\n  bufferingItem: InterstitialScheduleItem | null;\n  bufferingIndex: number;\n  playingAsset: InterstitialAssetItem | null;\n  playingItem: InterstitialScheduleItem | null;\n  playingIndex: number;\n  primary: PlayheadTimes;\n  integrated: PlayheadTimes;\n  skip: () => void;\n}\n\nexport type PlayheadTimes = {\n  bufferedEnd: number;\n  currentTime: number;\n  duration: number;\n  seekableStart: number;\n};\n\nfunction playWithCatch(media: HTMLMediaElement | null) {\n  media?.play().catch(() => {\n    /* no-op */\n  });\n}\n\nfunction timelineMessage(label: string, time: number) {\n  return `[${label}] Advancing timeline position to ${time}`;\n}\n\nexport default class InterstitialsController\n  extends Logger\n  implements NetworkComponentAPI\n{\n  private readonly HlsPlayerClass: typeof Hls;\n  private readonly hls: Hls;\n  private readonly assetListLoader: AssetListLoader;\n\n  // Last updated LevelDetails\n  private mediaSelection: MediaSelection | null = null;\n  private altSelection: {\n    audio?: MediaPlaylist;\n    subtitles?: MediaPlaylist;\n  } | null = null;\n\n  // Media and MediaSource/SourceBuffers\n  private media: HTMLMediaElement | null = null;\n  private detachedData: MediaAttachingData | null = null;\n  private requiredTracks: Partial<BufferCodecsData> | null = null;\n\n  // Public Interface for Interstitial playback state and control\n  private manager: InterstitialsManager | null = null;\n\n  // Interstitial Asset Players\n  private playerQueue: HlsAssetPlayer[] = [];\n\n  // Timeline position tracking\n  private bufferedPos: number = -1;\n  private timelinePos: number = -1;\n\n  // Schedule\n  private schedule: InterstitialsSchedule | null;\n\n  // Schedule playback and buffering state\n  private playingItem: InterstitialScheduleItem | null = null;\n  private bufferingItem: InterstitialScheduleItem | null = null;\n  private waitingItem: InterstitialScheduleEventItem | null = null;\n  private endedItem: InterstitialScheduleItem | null = null;\n  private playingAsset: InterstitialAssetItem | null = null;\n  private endedAsset: InterstitialAssetItem | null = null;\n  private bufferingAsset: InterstitialAssetItem | null = null;\n  private shouldPlay: boolean = false;\n\n  constructor(hls: Hls, HlsPlayerClass: typeof Hls) {\n    super('interstitials', hls.logger);\n    this.hls = hls;\n    this.HlsPlayerClass = HlsPlayerClass;\n    this.assetListLoader = new AssetListLoader(hls);\n    this.schedule = new InterstitialsSchedule(\n      this.onScheduleUpdate,\n      hls.logger,\n    );\n    this.registerListeners();\n  }\n\n  private registerListeners() {\n    const hls = this.hls;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (hls) {\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.on(Events.AUDIO_TRACK_UPDATED, this.onAudioTrackUpdated, this);\n      hls.on(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.on(Events.SUBTITLE_TRACK_UPDATED, this.onSubtitleTrackUpdated, this);\n      hls.on(Events.EVENT_CUE_ENTER, this.onInterstitialCueEnter, this);\n      hls.on(Events.ASSET_LIST_LOADED, this.onAssetListLoaded, this);\n      hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.on(Events.BUFFERED_TO_END, this.onBufferedToEnd, this);\n      hls.on(Events.MEDIA_ENDED, this.onMediaEnded, this);\n      hls.on(Events.ERROR, this.onError, this);\n      hls.on(Events.DESTROYING, this.onDestroying, this);\n    }\n  }\n\n  private unregisterListeners() {\n    const hls = this.hls;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (hls) {\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n      hls.off(Events.AUDIO_TRACK_UPDATED, this.onAudioTrackUpdated, this);\n      hls.off(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n      hls.off(Events.SUBTITLE_TRACK_UPDATED, this.onSubtitleTrackUpdated, this);\n      hls.off(Events.EVENT_CUE_ENTER, this.onInterstitialCueEnter, this);\n      hls.off(Events.ASSET_LIST_LOADED, this.onAssetListLoaded, this);\n      hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n      hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n      hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n      hls.off(Events.BUFFERED_TO_END, this.onBufferedToEnd, this);\n      hls.off(Events.MEDIA_ENDED, this.onMediaEnded, this);\n      hls.off(Events.ERROR, this.onError, this);\n      hls.off(Events.DESTROYING, this.onDestroying, this);\n    }\n  }\n\n  startLoad() {\n    // TODO: startLoad - check for waitingItem and retry by resetting schedule\n    this.resumeBuffering();\n  }\n\n  stopLoad() {\n    // TODO: stopLoad - stop all scheule.events[].assetListLoader?.abort() then delete the loaders\n    this.pauseBuffering();\n  }\n\n  resumeBuffering() {\n    this.getBufferingPlayer()?.resumeBuffering();\n  }\n\n  pauseBuffering() {\n    this.getBufferingPlayer()?.pauseBuffering();\n  }\n\n  destroy() {\n    this.unregisterListeners();\n    this.stopLoad();\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (this.assetListLoader) {\n      this.assetListLoader.destroy();\n    }\n    this.emptyPlayerQueue();\n    this.clearScheduleState();\n    if (this.schedule) {\n      this.schedule.destroy();\n    }\n    this.media =\n      this.detachedData =\n      this.mediaSelection =\n      this.requiredTracks =\n      this.altSelection =\n      this.schedule =\n      this.manager =\n        null;\n    // @ts-ignore\n    this.hls = this.HlsPlayerClass = this.log = null;\n    // @ts-ignore\n    this.assetListLoader = null;\n    // @ts-ignore\n    this.onPlay = this.onPause = this.onSeeking = this.onTimeupdate = null;\n    // @ts-ignore\n    this.onScheduleUpdate = null;\n  }\n\n  private onDestroying() {\n    const media = this.primaryMedia || this.media;\n    if (media) {\n      this.removeMediaListeners(media);\n    }\n  }\n\n  private removeMediaListeners(media: HTMLMediaElement) {\n    removeEventListener(media, 'play', this.onPlay);\n    removeEventListener(media, 'pause', this.onPause);\n    removeEventListener(media, 'seeking', this.onSeeking);\n    removeEventListener(media, 'timeupdate', this.onTimeupdate);\n  }\n\n  private onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) {\n    const media = (this.media = data.media);\n    addEventListener(media, 'seeking', this.onSeeking);\n    addEventListener(media, 'timeupdate', this.onTimeupdate);\n    addEventListener(media, 'play', this.onPlay);\n    addEventListener(media, 'pause', this.onPause);\n  }\n\n  private onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    const playingItem = this.effectivePlayingItem;\n    const detachedMedia = this.detachedData;\n    this.detachedData = null;\n    if (playingItem === null) {\n      this.checkStart();\n    } else if (!detachedMedia) {\n      // Resume schedule after detached externally\n      this.clearScheduleState();\n      const playingIndex = this.findItemIndex(playingItem);\n      this.setSchedulePosition(playingIndex);\n    }\n  }\n\n  private clearScheduleState() {\n    this.log(`clear schedule state`);\n    this.playingItem =\n      this.bufferingItem =\n      this.waitingItem =\n      this.endedItem =\n      this.playingAsset =\n      this.endedAsset =\n      this.bufferingAsset =\n        null;\n  }\n\n  private onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const transferringMedia = !!data.transferMedia;\n    const media = this.media;\n    this.media = null;\n    if (transferringMedia) {\n      return;\n    }\n    if (media) {\n      this.removeMediaListeners(media);\n    }\n    // If detachMedia is called while in an Interstitial, detach the asset player as well and reset the schedule position\n    if (this.detachedData) {\n      const player = this.getBufferingPlayer();\n      if (player) {\n        this.log(`Removing schedule state for detachedData and ${player}`);\n        this.playingAsset =\n          this.endedAsset =\n          this.bufferingAsset =\n          this.bufferingItem =\n          this.waitingItem =\n          this.detachedData =\n            null;\n        player.detachMedia();\n      }\n      this.shouldPlay = false;\n    }\n  }\n\n  public get interstitialsManager(): InterstitialsManager | null {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!this.hls) {\n      return null;\n    }\n    if (this.manager) {\n      return this.manager;\n    }\n    const c = this;\n    const effectiveBufferingItem = () => c.bufferingItem || c.waitingItem;\n    const getAssetPlayer = (asset: InterstitialAssetItem | null) =>\n      asset ? c.getAssetPlayer(asset.identifier) : asset;\n    const getMappedTime = (\n      item: InterstitialScheduleItem | null,\n      timelineType: TimelineType,\n      asset: InterstitialAssetItem | null,\n      controllerField: 'bufferedPos' | 'timelinePos',\n      assetPlayerField: 'bufferedEnd' | 'currentTime',\n    ): number => {\n      if (item) {\n        let time = (\n          item[timelineType] as {\n            start: number;\n            end: number;\n          }\n        ).start;\n        const interstitial = item.event;\n        if (interstitial) {\n          if (\n            timelineType === 'playout' ||\n            interstitial.timelineOccupancy !== TimelineOccupancy.Point\n          ) {\n            const assetPlayer = getAssetPlayer(asset);\n            if (assetPlayer?.interstitial === interstitial) {\n              time +=\n                assetPlayer.assetItem.startOffset +\n                assetPlayer[assetPlayerField];\n            }\n          }\n        } else {\n          const value =\n            controllerField === 'bufferedPos'\n              ? getBufferedEnd()\n              : c[controllerField];\n          time += value - item.start;\n        }\n        return time;\n      }\n      return 0;\n    };\n    const findMappedTime = (\n      primaryTime: number,\n      timelineType: TimelineType,\n    ): number => {\n      if (\n        primaryTime !== 0 &&\n        timelineType !== 'primary' &&\n        c.schedule?.length\n      ) {\n        const index = c.schedule.findItemIndexAtTime(primaryTime);\n        const item = c.schedule.items?.[index];\n        if (item) {\n          const diff = item[timelineType].start - item.start;\n          return primaryTime + diff;\n        }\n      }\n      return primaryTime;\n    };\n    const getBufferedEnd = (): number => {\n      const value = c.bufferedPos;\n      if (value === Number.MAX_VALUE) {\n        return getMappedDuration('primary');\n      }\n      return Math.max(value, 0);\n    };\n    const getMappedDuration = (timelineType: TimelineType): number => {\n      if (c.primaryDetails?.live) {\n        // return end of last event item or playlist\n        return c.primaryDetails.edge;\n      }\n      return c.schedule?.durations[timelineType] || 0;\n    };\n    const seekTo = (time: number, timelineType: TimelineType) => {\n      const item = c.effectivePlayingItem;\n      if (item?.event?.restrictions.skip || !c.schedule) {\n        return;\n      }\n      c.log(`seek to ${time} \"${timelineType}\"`);\n      const playingItem = c.effectivePlayingItem;\n      const targetIndex = c.schedule.findItemIndexAtTime(time, timelineType);\n      const targetItem = c.schedule.items?.[targetIndex];\n      const bufferingPlayer = c.getBufferingPlayer();\n      const bufferingInterstitial = bufferingPlayer?.interstitial;\n      const appendInPlace = bufferingInterstitial?.appendInPlace;\n      const seekInItem = playingItem && c.itemsMatch(playingItem, targetItem);\n      if (playingItem && (appendInPlace || seekInItem)) {\n        // seek in asset player or primary media (appendInPlace)\n        const assetPlayer = getAssetPlayer(c.playingAsset);\n        const media = assetPlayer?.media || c.primaryMedia;\n        if (media) {\n          const currentTime =\n            timelineType === 'primary'\n              ? media.currentTime\n              : getMappedTime(\n                  playingItem,\n                  timelineType,\n                  c.playingAsset,\n                  'timelinePos',\n                  'currentTime',\n                );\n\n          const diff = time - currentTime;\n          const seekToTime =\n            (appendInPlace ? currentTime : media.currentTime) + diff;\n          if (\n            seekToTime >= 0 &&\n            (!assetPlayer ||\n              appendInPlace ||\n              seekToTime <= assetPlayer.duration)\n          ) {\n            media.currentTime = seekToTime;\n            return;\n          }\n        }\n      }\n      // seek out of item or asset\n      if (targetItem) {\n        let seekToTime = time;\n        if (timelineType !== 'primary') {\n          const primarySegmentStart = targetItem[timelineType].start;\n          const diff = time - primarySegmentStart;\n          seekToTime = targetItem.start + diff;\n        }\n        const targetIsPrimary = !c.isInterstitial(targetItem);\n        if (\n          (!c.isInterstitial(playingItem) || playingItem.event.appendInPlace) &&\n          (targetIsPrimary || targetItem.event.appendInPlace)\n        ) {\n          const media =\n            c.media || (appendInPlace ? bufferingPlayer?.media : null);\n          if (media) {\n            media.currentTime = seekToTime;\n          }\n        } else if (playingItem) {\n          // check if an Interstitial between the current item and target item has an X-RESTRICT JUMP restriction\n          const playingIndex = c.findItemIndex(playingItem);\n          if (targetIndex > playingIndex) {\n            const jumpIndex = c.schedule.findJumpRestrictedIndex(\n              playingIndex + 1,\n              targetIndex,\n            );\n            if (jumpIndex > playingIndex) {\n              c.setSchedulePosition(jumpIndex);\n              return;\n            }\n          }\n\n          let assetIndex = 0;\n          if (targetIsPrimary) {\n            c.timelinePos = seekToTime;\n            c.checkBuffer();\n          } else {\n            const assetList = targetItem.event.assetList;\n            const eventTime =\n              time - (targetItem[timelineType] || targetItem).start;\n            for (let i = assetList.length; i--; ) {\n              const asset = assetList[i];\n              if (\n                asset.duration &&\n                eventTime >= asset.startOffset &&\n                eventTime < asset.startOffset + asset.duration\n              ) {\n                assetIndex = i;\n                break;\n              }\n            }\n          }\n          c.setSchedulePosition(targetIndex, assetIndex);\n        }\n      }\n    };\n    const getActiveInterstitial = () => {\n      const playingItem = c.effectivePlayingItem;\n      if (c.isInterstitial(playingItem)) {\n        return playingItem;\n      }\n      const bufferingItem = effectiveBufferingItem();\n      if (c.isInterstitial(bufferingItem)) {\n        return bufferingItem;\n      }\n      return null;\n    };\n    const interstitialPlayer: InterstitialPlayer = {\n      get bufferedEnd() {\n        const interstitialItem = effectiveBufferingItem();\n        const bufferingItem = c.bufferingItem;\n        if (bufferingItem && bufferingItem === interstitialItem) {\n          return (\n            getMappedTime(\n              bufferingItem,\n              'playout',\n              c.bufferingAsset,\n              'bufferedPos',\n              'bufferedEnd',\n            ) - bufferingItem.playout.start ||\n            c.bufferingAsset?.startOffset ||\n            0\n          );\n        }\n        return 0;\n      },\n      get currentTime() {\n        const interstitialItem = getActiveInterstitial();\n        const playingItem = c.effectivePlayingItem;\n        if (playingItem && playingItem === interstitialItem) {\n          return (\n            getMappedTime(\n              playingItem,\n              'playout',\n              c.effectivePlayingAsset,\n              'timelinePos',\n              'currentTime',\n            ) - playingItem.playout.start\n          );\n        }\n        return 0;\n      },\n      set currentTime(time: number) {\n        const interstitialItem = getActiveInterstitial();\n        const playingItem = c.effectivePlayingItem;\n        if (playingItem && playingItem === interstitialItem) {\n          seekTo(time + playingItem.playout.start, 'playout');\n        }\n      },\n      get duration() {\n        const interstitialItem = getActiveInterstitial();\n        if (interstitialItem) {\n          return interstitialItem.playout.end - interstitialItem.playout.start;\n        }\n        return 0;\n      },\n      get assetPlayers() {\n        const assetList = getActiveInterstitial()?.event.assetList;\n        if (assetList) {\n          return assetList.map((asset) => c.getAssetPlayer(asset.identifier));\n        }\n        return [];\n      },\n      get playingIndex() {\n        const interstitial = getActiveInterstitial()?.event;\n        if (interstitial && c.effectivePlayingAsset) {\n          return interstitial.findAssetIndex(c.effectivePlayingAsset);\n        }\n        return -1;\n      },\n      get scheduleItem() {\n        return getActiveInterstitial();\n      },\n    };\n    return (this.manager = {\n      get events() {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return c.schedule?.events?.slice(0) || [];\n      },\n      get schedule() {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        return c.schedule?.items?.slice(0) || [];\n      },\n      get interstitialPlayer() {\n        if (getActiveInterstitial()) {\n          return interstitialPlayer;\n        }\n        return null;\n      },\n      get playerQueue() {\n        return c.playerQueue.slice(0);\n      },\n      get bufferingAsset() {\n        return c.bufferingAsset;\n      },\n      get bufferingItem() {\n        return effectiveBufferingItem();\n      },\n      get bufferingIndex() {\n        const item = effectiveBufferingItem();\n        return c.findItemIndex(item);\n      },\n      get playingAsset() {\n        return c.effectivePlayingAsset;\n      },\n      get playingItem() {\n        return c.effectivePlayingItem;\n      },\n      get playingIndex() {\n        const item = c.effectivePlayingItem;\n        return c.findItemIndex(item);\n      },\n      primary: {\n        get bufferedEnd() {\n          return getBufferedEnd();\n        },\n        get currentTime() {\n          const timelinePos = c.timelinePos;\n          return timelinePos > 0 ? timelinePos : 0;\n        },\n        set currentTime(time: number) {\n          seekTo(time, 'primary');\n        },\n        get duration() {\n          return getMappedDuration('primary');\n        },\n        get seekableStart() {\n          return c.primaryDetails?.fragmentStart || 0;\n        },\n      },\n      integrated: {\n        get bufferedEnd() {\n          return getMappedTime(\n            effectiveBufferingItem(),\n            'integrated',\n            c.bufferingAsset,\n            'bufferedPos',\n            'bufferedEnd',\n          );\n        },\n        get currentTime() {\n          return getMappedTime(\n            c.effectivePlayingItem,\n            'integrated',\n            c.effectivePlayingAsset,\n            'timelinePos',\n            'currentTime',\n          );\n        },\n        set currentTime(time: number) {\n          seekTo(time, 'integrated');\n        },\n        get duration() {\n          return getMappedDuration('integrated');\n        },\n        get seekableStart() {\n          return findMappedTime(\n            c.primaryDetails?.fragmentStart || 0,\n            'integrated',\n          );\n        },\n      },\n      skip: () => {\n        const item = c.effectivePlayingItem;\n        const event = item?.event;\n        if (event && !event.restrictions.skip) {\n          const index = c.findItemIndex(item);\n          if (event.appendInPlace) {\n            const time = item.playout.start + item.event.duration;\n            seekTo(time + 0.001, 'playout');\n          } else {\n            c.advanceAfterAssetEnded(event, index, Infinity);\n          }\n        }\n      },\n    });\n  }\n\n  // Schedule getters\n  private get effectivePlayingItem(): InterstitialScheduleItem | null {\n    return this.waitingItem || this.playingItem || this.endedItem;\n  }\n\n  private get effectivePlayingAsset(): InterstitialAssetItem | null {\n    return this.playingAsset || this.endedAsset;\n  }\n\n  private get playingLastItem(): boolean {\n    const playingItem = this.playingItem;\n    const items = this.schedule?.items;\n    if (!this.playbackStarted || !playingItem || !items) {\n      return false;\n    }\n\n    return this.findItemIndex(playingItem) === items.length - 1;\n  }\n\n  private get playbackStarted(): boolean {\n    return this.effectivePlayingItem !== null;\n  }\n\n  // Media getters and event callbacks\n  private get currentTime(): number | undefined {\n    if (this.mediaSelection === null) {\n      // Do not advance before schedule is known\n      return undefined;\n    }\n    // Ignore currentTime when detached for Interstitial playback with source reset\n    const queuedForPlayback = this.waitingItem || this.playingItem;\n    if (\n      this.isInterstitial(queuedForPlayback) &&\n      !queuedForPlayback.event.appendInPlace\n    ) {\n      return undefined;\n    }\n    let media = this.media;\n    if (!media && this.bufferingItem?.event?.appendInPlace) {\n      // Observe detached media currentTime when appending in place\n      media = this.primaryMedia;\n    }\n    const currentTime = media?.currentTime;\n    if (currentTime === undefined || !Number.isFinite(currentTime)) {\n      return undefined;\n    }\n    return currentTime;\n  }\n\n  private get primaryMedia(): HTMLMediaElement | null {\n    return this.media || this.detachedData?.media || null;\n  }\n\n  private isInterstitial(\n    item: InterstitialScheduleItem | null | undefined,\n  ): item is InterstitialScheduleEventItem {\n    return !!item?.event;\n  }\n\n  private retreiveMediaSource(\n    assetId: InterstitialAssetId,\n    toSegment: InterstitialScheduleItem | null,\n  ) {\n    const player = this.getAssetPlayer(assetId);\n    if (player) {\n      this.transferMediaFromPlayer(player, toSegment);\n    }\n  }\n\n  private transferMediaFromPlayer(\n    player: HlsAssetPlayer,\n    toSegment: InterstitialScheduleItem | null | undefined,\n  ) {\n    const appendInPlace = player.interstitial.appendInPlace;\n    const playerMedia = player.media;\n    if (appendInPlace && playerMedia === this.primaryMedia) {\n      this.bufferingAsset = null;\n      if (\n        !toSegment ||\n        (this.isInterstitial(toSegment) && !toSegment.event.appendInPlace)\n      ) {\n        // MediaSource cannot be transfered back to an Interstitial that requires a source reset\n        // no-op when toSegment is undefined\n        if (toSegment && playerMedia) {\n          this.detachedData = { media: playerMedia };\n          return;\n        }\n      }\n      const attachMediaSourceData = player.transferMedia();\n      this.log(\n        `transfer MediaSource from ${player} ${stringify(attachMediaSourceData)}`,\n      );\n      this.detachedData = attachMediaSourceData;\n    } else if (toSegment && playerMedia) {\n      this.shouldPlay ||= !playerMedia.paused;\n    }\n  }\n\n  private transferMediaTo(\n    player: Hls | HlsAssetPlayer,\n    media: HTMLMediaElement,\n  ) {\n    if (player.media === media) {\n      return;\n    }\n    let attachMediaSourceData: MediaAttachingData | null = null;\n    const primaryPlayer = this.hls;\n    const isAssetPlayer = player !== primaryPlayer;\n    const appendInPlace =\n      isAssetPlayer && (player as HlsAssetPlayer).interstitial.appendInPlace;\n    const detachedMediaSource = this.detachedData?.mediaSource;\n\n    let logFromSource: string;\n    if (primaryPlayer.media) {\n      if (appendInPlace) {\n        attachMediaSourceData = primaryPlayer.transferMedia();\n        this.detachedData = attachMediaSourceData;\n      }\n      logFromSource = `Primary`;\n    } else if (detachedMediaSource) {\n      const bufferingPlayer = this.getBufferingPlayer();\n      if (bufferingPlayer) {\n        attachMediaSourceData = bufferingPlayer.transferMedia();\n        logFromSource = `${bufferingPlayer}`;\n      } else {\n        logFromSource = `detached MediaSource`;\n      }\n    } else {\n      logFromSource = `detached media`;\n    }\n    if (!attachMediaSourceData) {\n      if (detachedMediaSource) {\n        attachMediaSourceData = this.detachedData;\n        this.log(\n          `using detachedData: MediaSource ${stringify(attachMediaSourceData)}`,\n        );\n      } else if (!this.detachedData || primaryPlayer.media === media) {\n        // Keep interstitial media transition consistent\n        const playerQueue = this.playerQueue;\n        if (playerQueue.length > 1) {\n          playerQueue.forEach((queuedPlayer) => {\n            if (\n              isAssetPlayer &&\n              queuedPlayer.interstitial.appendInPlace !== appendInPlace\n            ) {\n              const interstitial = queuedPlayer.interstitial;\n              this.clearInterstitial(queuedPlayer.interstitial, null);\n              interstitial.appendInPlace = false; // setter may be a no-op;\n              // `appendInPlace` getter may still return `true` after insterstitial streaming has begun in that mode.\n              if (interstitial.appendInPlace as boolean) {\n                this.warn(\n                  `Could not change append strategy for queued assets ${interstitial}`,\n                );\n              }\n            }\n          });\n        }\n        this.hls.detachMedia();\n        this.detachedData = { media };\n      }\n    }\n    const transferring =\n      attachMediaSourceData &&\n      'mediaSource' in attachMediaSourceData &&\n      attachMediaSourceData.mediaSource?.readyState !== 'closed';\n    const dataToAttach =\n      transferring && attachMediaSourceData ? attachMediaSourceData : media;\n    this.log(\n      `${transferring ? 'transfering MediaSource' : 'attaching media'} to ${\n        isAssetPlayer ? player : 'Primary'\n      } from ${logFromSource} (media.currentTime: ${media.currentTime})`,\n    );\n    const schedule = this.schedule;\n    if (dataToAttach === attachMediaSourceData && schedule) {\n      const isAssetAtEndOfSchedule =\n        isAssetPlayer &&\n        (player as HlsAssetPlayer).assetId === schedule.assetIdAtEnd;\n      // Prevent asset players from marking EoS on transferred MediaSource\n      dataToAttach.overrides = {\n        duration: schedule.duration,\n        endOfStream: !isAssetPlayer || isAssetAtEndOfSchedule,\n        cueRemoval: !isAssetPlayer,\n      };\n    }\n    player.attachMedia(dataToAttach);\n  }\n\n  private onPlay = () => {\n    this.shouldPlay = true;\n  };\n\n  private onPause = () => {\n    this.shouldPlay = false;\n  };\n\n  private onSeeking = () => {\n    const currentTime = this.currentTime;\n    if (currentTime === undefined || this.playbackDisabled || !this.schedule) {\n      return;\n    }\n    const diff = currentTime - this.timelinePos;\n    const roundingError = Math.abs(diff) < 1 / 705600000; // one flick\n    if (roundingError) {\n      return;\n    }\n    const backwardSeek = diff <= -0.01;\n    this.timelinePos = currentTime;\n    this.bufferedPos = currentTime;\n\n    // Check if seeking out of an item\n    const playingItem = this.playingItem;\n    if (!playingItem) {\n      this.checkBuffer();\n      return;\n    }\n    if (backwardSeek) {\n      const resetCount = this.schedule.resetErrorsInRange(\n        currentTime,\n        currentTime - diff,\n      );\n      if (resetCount) {\n        this.updateSchedule(true);\n      }\n    }\n    this.checkBuffer();\n    if (\n      (backwardSeek && currentTime < playingItem.start) ||\n      currentTime >= playingItem.end\n    ) {\n      const playingIndex = this.findItemIndex(playingItem);\n      let scheduleIndex = this.schedule.findItemIndexAtTime(currentTime);\n      if (scheduleIndex === -1) {\n        scheduleIndex = playingIndex + (backwardSeek ? -1 : 1);\n        this.log(\n          `seeked ${backwardSeek ? 'back ' : ''}to position not covered by schedule ${currentTime} (resolving from ${playingIndex} to ${scheduleIndex})`,\n        );\n      }\n      if (!this.isInterstitial(playingItem) && this.media?.paused) {\n        this.shouldPlay = false;\n      }\n      if (!backwardSeek) {\n        // check if an Interstitial between the current item and target item has an X-RESTRICT JUMP restriction\n        if (scheduleIndex > playingIndex) {\n          const jumpIndex = this.schedule.findJumpRestrictedIndex(\n            playingIndex + 1,\n            scheduleIndex,\n          );\n          if (jumpIndex > playingIndex) {\n            this.setSchedulePosition(jumpIndex);\n            return;\n          }\n        }\n      }\n      this.setSchedulePosition(scheduleIndex);\n      return;\n    }\n    // Check if seeking out of an asset (assumes same item following above check)\n    const playingAsset = this.playingAsset;\n    if (!playingAsset) {\n      // restart Interstitial at end\n      if (this.playingLastItem && this.isInterstitial(playingItem)) {\n        const restartAsset = playingItem.event.assetList[0];\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (restartAsset) {\n          this.endedItem = this.playingItem;\n          this.playingItem = null;\n          this.setScheduleToAssetAtTime(currentTime, restartAsset);\n        }\n      }\n      return;\n    }\n    const start = playingAsset.timelineStart;\n    const duration = playingAsset.duration || 0;\n    if (\n      (backwardSeek && currentTime < start) ||\n      currentTime >= start + duration\n    ) {\n      if (playingItem.event?.appendInPlace) {\n        this.clearInterstitial(playingItem.event, playingItem);\n        this.flushFrontBuffer(currentTime);\n      }\n      this.setScheduleToAssetAtTime(currentTime, playingAsset);\n    }\n  };\n\n  private onInterstitialCueEnter() {\n    this.onTimeupdate();\n  }\n\n  private onTimeupdate = () => {\n    const currentTime = this.currentTime;\n    if (currentTime === undefined || this.playbackDisabled) {\n      return;\n    }\n\n    // Only allow timeupdate to advance primary position, seeking is used for jumping back\n    // this prevents primaryPos from being reset to 0 after re-attach\n    if (currentTime > this.timelinePos) {\n      this.timelinePos = currentTime;\n      if (currentTime > this.bufferedPos) {\n        this.checkBuffer();\n      }\n    } else {\n      return;\n    }\n\n    // Check if playback has entered the next item\n    const playingItem = this.playingItem;\n    if (!playingItem || this.playingLastItem) {\n      return;\n    }\n    if (currentTime >= playingItem.end) {\n      this.timelinePos = playingItem.end;\n      const playingIndex = this.findItemIndex(playingItem);\n      this.setSchedulePosition(playingIndex + 1);\n    }\n    // Check if playback has entered the next asset\n    const playingAsset = this.playingAsset;\n    if (!playingAsset) {\n      return;\n    }\n    const end = playingAsset.timelineStart + (playingAsset.duration || 0);\n    if (currentTime >= end) {\n      this.setScheduleToAssetAtTime(currentTime, playingAsset);\n    }\n  };\n\n  // Scheduling methods\n  private checkStart() {\n    const schedule = this.schedule;\n    const interstitialEvents = schedule?.events;\n    if (!interstitialEvents || this.playbackDisabled || !this.media) {\n      return;\n    }\n    // Check buffered to pre-roll\n    if (this.bufferedPos === -1) {\n      this.bufferedPos = 0;\n    }\n    // Start stepping through schedule when playback begins for the first time and we have a pre-roll\n    const timelinePos = this.timelinePos;\n    const effectivePlayingItem = this.effectivePlayingItem;\n    if (timelinePos === -1) {\n      const startPosition = this.hls.startPosition;\n      this.log(timelineMessage('checkStart', startPosition));\n      this.timelinePos = startPosition;\n      if (interstitialEvents.length && interstitialEvents[0].cue.pre) {\n        const index = schedule.findEventIndex(interstitialEvents[0].identifier);\n        this.setSchedulePosition(index);\n      } else if (startPosition >= 0 || !this.primaryLive) {\n        const start = (this.timelinePos =\n          startPosition > 0 ? startPosition : 0);\n        const index = schedule.findItemIndexAtTime(start);\n        this.setSchedulePosition(index);\n      }\n    } else if (effectivePlayingItem && !this.playingItem) {\n      const index = schedule.findItemIndex(effectivePlayingItem);\n      this.setSchedulePosition(index);\n    }\n  }\n\n  private advanceAssetBuffering(\n    item: InterstitialScheduleEventItem,\n    assetItem: InterstitialAssetItem,\n  ) {\n    const interstitial = item.event;\n    const assetListIndex = interstitial.findAssetIndex(assetItem);\n    const nextAssetIndex = getNextAssetIndex(interstitial, assetListIndex);\n    if (!interstitial.isAssetPastPlayoutLimit(nextAssetIndex)) {\n      this.bufferedToEvent(item, nextAssetIndex);\n    } else if (this.schedule) {\n      const nextItem = this.schedule.items?.[this.findItemIndex(item) + 1];\n      if (nextItem) {\n        this.bufferedToItem(nextItem);\n      }\n    }\n  }\n\n  private advanceAfterAssetEnded(\n    interstitial: InterstitialEvent,\n    index: number,\n    assetListIndex: number,\n  ) {\n    const nextAssetIndex = getNextAssetIndex(interstitial, assetListIndex);\n    if (!interstitial.isAssetPastPlayoutLimit(nextAssetIndex)) {\n      // Advance to next asset list item\n      if (interstitial.appendInPlace) {\n        const assetItem = interstitial.assetList[nextAssetIndex] as\n          | InterstitialAssetItem\n          | undefined;\n        if (assetItem) {\n          this.advanceInPlace(assetItem.timelineStart);\n        }\n      }\n      this.setSchedulePosition(index, nextAssetIndex);\n    } else if (this.schedule) {\n      // Advance to next schedule segment\n      // check if we've reached the end of the program\n      const scheduleItems = this.schedule.items;\n      if (scheduleItems) {\n        const nextIndex = index + 1;\n        const scheduleLength = scheduleItems.length;\n        if (nextIndex >= scheduleLength) {\n          this.setSchedulePosition(-1);\n          return;\n        }\n        const resumptionTime = interstitial.resumeTime;\n        if (this.timelinePos < resumptionTime) {\n          this.log(timelineMessage('advanceAfterAssetEnded', resumptionTime));\n          this.timelinePos = resumptionTime;\n          if (interstitial.appendInPlace) {\n            this.advanceInPlace(resumptionTime);\n          }\n          this.checkBuffer(this.bufferedPos < resumptionTime);\n        }\n        this.setSchedulePosition(nextIndex);\n      }\n    }\n  }\n\n  private setScheduleToAssetAtTime(\n    time: number,\n    playingAsset: InterstitialAssetItem,\n  ) {\n    const schedule = this.schedule;\n    if (!schedule) {\n      return;\n    }\n    const parentIdentifier = playingAsset.parentIdentifier;\n    const interstitial = schedule.getEvent(parentIdentifier);\n    if (interstitial) {\n      const itemIndex = schedule.findEventIndex(parentIdentifier);\n      const assetListIndex = schedule.findAssetIndex(interstitial, time);\n      this.advanceAfterAssetEnded(interstitial, itemIndex, assetListIndex - 1);\n    }\n  }\n\n  private setSchedulePosition(index: number, assetListIndex?: number) {\n    const scheduleItems = this.schedule?.items;\n    if (!scheduleItems || this.playbackDisabled) {\n      return;\n    }\n    const scheduledItem = index >= 0 ? scheduleItems[index] : null;\n    this.log(\n      `setSchedulePosition ${index}, ${assetListIndex} (${scheduledItem ? segmentToString(scheduledItem) : scheduledItem}) pos: ${this.timelinePos}`,\n    );\n    // Cleanup current item / asset\n    const currentItem = this.waitingItem || this.playingItem;\n    const playingLastItem = this.playingLastItem;\n    if (this.isInterstitial(currentItem)) {\n      const interstitial = currentItem.event;\n      const playingAsset = this.playingAsset;\n      const assetId = playingAsset?.identifier;\n      const player = assetId ? this.getAssetPlayer(assetId) : null;\n      if (\n        player &&\n        assetId &&\n        (!this.eventItemsMatch(currentItem, scheduledItem) ||\n          (assetListIndex !== undefined &&\n            assetId !== interstitial.assetList[assetListIndex].identifier))\n      ) {\n        const playingAssetListIndex = interstitial.findAssetIndex(playingAsset);\n        this.log(\n          `INTERSTITIAL_ASSET_ENDED ${playingAssetListIndex + 1}/${interstitial.assetList.length} ${eventAssetToString(playingAsset)}`,\n        );\n        this.endedAsset = playingAsset;\n        this.playingAsset = null;\n        this.hls.trigger(Events.INTERSTITIAL_ASSET_ENDED, {\n          asset: playingAsset,\n          assetListIndex: playingAssetListIndex,\n          event: interstitial,\n          schedule: scheduleItems.slice(0),\n          scheduleIndex: index,\n          player,\n        });\n        if (currentItem !== this.playingItem) {\n          // Schedule change occured on INTERSTITIAL_ASSET_ENDED\n          if (\n            this.itemsMatch(currentItem, this.playingItem) &&\n            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n            !this.playingAsset // INTERSTITIAL_ASSET_ENDED side-effect\n          ) {\n            this.advanceAfterAssetEnded(\n              interstitial,\n              this.findItemIndex(this.playingItem),\n              playingAssetListIndex,\n            );\n          }\n          // Navigation occured on INTERSTITIAL_ASSET_ENDED\n          return;\n        }\n        this.retreiveMediaSource(assetId, scheduledItem);\n        if (player.media && !this.detachedData?.mediaSource) {\n          player.detachMedia();\n        }\n      }\n      if (!this.eventItemsMatch(currentItem, scheduledItem)) {\n        this.endedItem = currentItem;\n        this.playingItem = null;\n        this.log(\n          `INTERSTITIAL_ENDED ${interstitial} ${segmentToString(currentItem)}`,\n        );\n        interstitial.hasPlayed = true;\n        this.hls.trigger(Events.INTERSTITIAL_ENDED, {\n          event: interstitial,\n          schedule: scheduleItems.slice(0),\n          scheduleIndex: index,\n        });\n        // Exiting an Interstitial\n        if (interstitial.cue.once) {\n          // Remove interstitial with CUE attribute value of ONCE after it has played\n          this.updateSchedule();\n          const updatedScheduleItems = this.schedule?.items;\n          if (scheduledItem && updatedScheduleItems) {\n            const updatedIndex = this.findItemIndex(scheduledItem);\n            this.advanceSchedule(\n              updatedIndex,\n              updatedScheduleItems,\n              assetListIndex,\n              currentItem,\n              playingLastItem,\n            );\n          }\n          return;\n        }\n      }\n    }\n    this.advanceSchedule(\n      index,\n      scheduleItems,\n      assetListIndex,\n      currentItem,\n      playingLastItem,\n    );\n  }\n  private advanceSchedule(\n    index: number,\n    scheduleItems: InterstitialScheduleItem[],\n    assetListIndex: number | undefined,\n    currentItem: InterstitialScheduleItem | null,\n    playedLastItem: boolean,\n  ) {\n    const schedule = this.schedule;\n    if (!schedule) {\n      return;\n    }\n    const scheduledItem = scheduleItems[index] || null;\n    const media = this.primaryMedia;\n    // Cleanup out of range Interstitials\n    const playerQueue = this.playerQueue;\n    if (playerQueue.length) {\n      playerQueue.forEach((player) => {\n        const interstitial = player.interstitial;\n        const queuedIndex = schedule.findEventIndex(interstitial.identifier);\n        if (queuedIndex < index || queuedIndex > index + 1) {\n          this.clearInterstitial(interstitial, scheduledItem);\n        }\n      });\n    }\n    // Setup scheduled item\n    if (this.isInterstitial(scheduledItem)) {\n      this.timelinePos = Math.min(\n        Math.max(this.timelinePos, scheduledItem.start),\n        scheduledItem.end,\n      );\n      // Handle Interstitial\n      const interstitial = scheduledItem.event;\n      // find asset index\n      if (assetListIndex === undefined) {\n        assetListIndex = schedule.findAssetIndex(\n          interstitial,\n          this.timelinePos,\n        );\n        const assetIndexCandidate = getNextAssetIndex(\n          interstitial,\n          assetListIndex - 1,\n        );\n        if (\n          interstitial.isAssetPastPlayoutLimit(assetIndexCandidate) ||\n          (interstitial.appendInPlace && this.timelinePos === scheduledItem.end)\n        ) {\n          this.advanceAfterAssetEnded(interstitial, index, assetListIndex);\n          return;\n        }\n        assetListIndex = assetIndexCandidate;\n      }\n      // Ensure Interstitial is enqueued\n      const waitingItem = this.waitingItem;\n      if (!this.assetsBuffered(scheduledItem, media)) {\n        this.setBufferingItem(scheduledItem);\n      }\n      let player = this.preloadAssets(interstitial, assetListIndex);\n      if (!this.eventItemsMatch(scheduledItem, waitingItem || currentItem)) {\n        this.waitingItem = scheduledItem;\n        this.log(\n          `INTERSTITIAL_STARTED ${segmentToString(scheduledItem)} ${interstitial.appendInPlace ? 'append in place' : ''}`,\n        );\n        this.hls.trigger(Events.INTERSTITIAL_STARTED, {\n          event: interstitial,\n          schedule: scheduleItems.slice(0),\n          scheduleIndex: index,\n        });\n      }\n      if (!interstitial.assetListLoaded) {\n        // Waiting at end of primary content segment\n        // Expect setSchedulePosition to be called again once ASSET-LIST is loaded\n        this.log(`Waiting for ASSET-LIST to complete loading ${interstitial}`);\n        return;\n      }\n      if (interstitial.assetListLoader) {\n        interstitial.assetListLoader.destroy();\n        interstitial.assetListLoader = undefined;\n      }\n      if (!media) {\n        this.log(\n          `Waiting for attachMedia to start Interstitial ${interstitial}`,\n        );\n        return;\n      }\n      // Update schedule and asset list position now that it can start\n      this.waitingItem = this.endedItem = null;\n      this.playingItem = scheduledItem;\n\n      // If asset-list is empty or missing asset index, advance to next item\n      const assetItem = interstitial.assetList[assetListIndex] as\n        | InterstitialAssetItem\n        | undefined;\n      if (!assetItem) {\n        this.advanceAfterAssetEnded(interstitial, index, assetListIndex || 0);\n        return;\n      }\n\n      // Start Interstitial Playback\n      if (!player) {\n        player = this.getAssetPlayer(assetItem.identifier);\n      }\n      if (player === null || player.destroyed) {\n        const assetListLength = interstitial.assetList.length;\n        this.warn(\n          `asset ${\n            assetListIndex + 1\n          }/${assetListLength} player destroyed ${interstitial}`,\n        );\n        player = this.createAssetPlayer(\n          interstitial,\n          assetItem,\n          assetListIndex,\n        );\n        player.loadSource();\n      }\n      if (!this.eventItemsMatch(scheduledItem, this.bufferingItem)) {\n        if (interstitial.appendInPlace && this.isAssetBuffered(assetItem)) {\n          return;\n        }\n      }\n      this.startAssetPlayer(\n        player,\n        assetListIndex,\n        scheduleItems,\n        index,\n        media,\n      );\n      if (this.shouldPlay) {\n        playWithCatch(player.media);\n      }\n    } else if (scheduledItem) {\n      this.resumePrimary(scheduledItem, index, currentItem);\n      if (this.shouldPlay) {\n        playWithCatch(this.hls.media);\n      }\n    } else if (playedLastItem && this.isInterstitial(currentItem)) {\n      // Maintain playingItem state at end of schedule (setSchedulePosition(-1) called to end program)\n      // this allows onSeeking handler to update schedule position\n      this.endedItem = null;\n      this.playingItem = currentItem;\n      if (!currentItem.event.appendInPlace) {\n        // Media must be re-attached to resume primary schedule if not sharing source\n        this.attachPrimary(schedule.durations.primary, null);\n      }\n    }\n  }\n\n  private get playbackDisabled(): boolean {\n    return this.hls.config.enableInterstitialPlayback === false;\n  }\n\n  private get primaryDetails(): LevelDetails | undefined {\n    return this.mediaSelection?.main.details;\n  }\n\n  private get primaryLive(): boolean {\n    return !!this.primaryDetails?.live;\n  }\n\n  private resumePrimary(\n    scheduledItem: InterstitialSchedulePrimaryItem,\n    index: number,\n    fromItem: InterstitialScheduleItem | null,\n  ) {\n    this.playingItem = scheduledItem;\n    this.playingAsset = this.endedAsset = null;\n    this.waitingItem = this.endedItem = null;\n\n    this.bufferedToItem(scheduledItem);\n\n    this.log(`resuming ${segmentToString(scheduledItem)}`);\n\n    if (!this.detachedData?.mediaSource) {\n      let timelinePos = this.timelinePos;\n      if (\n        timelinePos < scheduledItem.start ||\n        timelinePos >= scheduledItem.end\n      ) {\n        timelinePos = this.getPrimaryResumption(scheduledItem, index);\n        this.log(timelineMessage('resumePrimary', timelinePos));\n        this.timelinePos = timelinePos;\n      }\n      this.attachPrimary(timelinePos, scheduledItem);\n    }\n\n    if (!fromItem) {\n      return;\n    }\n\n    const scheduleItems = this.schedule?.items;\n    if (!scheduleItems) {\n      return;\n    }\n    this.log(`INTERSTITIALS_PRIMARY_RESUMED ${segmentToString(scheduledItem)}`);\n    this.hls.trigger(Events.INTERSTITIALS_PRIMARY_RESUMED, {\n      schedule: scheduleItems.slice(0),\n      scheduleIndex: index,\n    });\n    this.checkBuffer();\n  }\n\n  private getPrimaryResumption(\n    scheduledItem: InterstitialSchedulePrimaryItem,\n    index: number,\n  ): number {\n    const itemStart = scheduledItem.start;\n    if (this.primaryLive) {\n      const details = this.primaryDetails;\n      if (index === 0) {\n        return this.hls.startPosition;\n      } else if (\n        details &&\n        (itemStart < details.fragmentStart || itemStart > details.edge)\n      ) {\n        return this.hls.liveSyncPosition || -1;\n      }\n    }\n    return itemStart;\n  }\n\n  private isAssetBuffered(asset: InterstitialAssetItem): boolean {\n    const player = this.getAssetPlayer(asset.identifier);\n    if (player?.hls) {\n      return player.hls.bufferedToEnd;\n    }\n    const bufferInfo = BufferHelper.bufferInfo(\n      this.primaryMedia,\n      this.timelinePos,\n      0,\n    );\n    return bufferInfo.end + 1 >= asset.timelineStart + (asset.duration || 0);\n  }\n\n  private attachPrimary(\n    timelinePos: number,\n    item: InterstitialSchedulePrimaryItem | null,\n    skipSeekToStartPosition?: boolean,\n  ) {\n    if (item) {\n      this.setBufferingItem(item);\n    } else {\n      this.bufferingItem = this.playingItem;\n    }\n    this.bufferingAsset = null;\n\n    const media = this.primaryMedia;\n    if (!media) {\n      return;\n    }\n    const hls = this.hls;\n    if (hls.media) {\n      this.checkBuffer();\n    } else {\n      this.transferMediaTo(hls, media);\n      if (skipSeekToStartPosition) {\n        this.startLoadingPrimaryAt(timelinePos, skipSeekToStartPosition);\n      }\n    }\n    if (!skipSeekToStartPosition) {\n      // Set primary position to resume time\n      this.log(timelineMessage('attachPrimary', timelinePos));\n      this.timelinePos = timelinePos;\n      this.startLoadingPrimaryAt(timelinePos, skipSeekToStartPosition);\n    }\n  }\n\n  private startLoadingPrimaryAt(\n    timelinePos: number,\n    skipSeekToStartPosition?: boolean,\n  ) {\n    const hls = this.hls;\n    if (\n      !hls.loadingEnabled ||\n      !hls.media ||\n      Math.abs(\n        (hls.mainForwardBufferInfo?.start || hls.media.currentTime) -\n          timelinePos,\n      ) > 0.5\n    ) {\n      hls.startLoad(timelinePos, skipSeekToStartPosition);\n    } else if (!hls.bufferingEnabled) {\n      hls.resumeBuffering();\n    }\n  }\n\n  // HLS.js event callbacks\n  private onManifestLoading() {\n    this.stopLoad();\n    this.schedule?.reset();\n    this.emptyPlayerQueue();\n    this.clearScheduleState();\n    this.shouldPlay = false;\n    this.bufferedPos = this.timelinePos = -1;\n    this.mediaSelection =\n      this.altSelection =\n      this.manager =\n      this.requiredTracks =\n        null;\n    // BUFFER_CODECS listener added here for buffer-controller to handle it first where it adds tracks\n    this.hls.off(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n    this.hls.on(Events.BUFFER_CODECS, this.onBufferCodecs, this);\n  }\n\n  private onLevelUpdated(event: Events.LEVEL_UPDATED, data: LevelUpdatedData) {\n    if (data.level === -1 || !this.schedule) {\n      // level was removed\n      return;\n    }\n    const main = this.hls.levels[data.level];\n    if (!main.details) {\n      return;\n    }\n    const currentSelection = {\n      ...(this.mediaSelection || this.altSelection),\n      main,\n    };\n    this.mediaSelection = currentSelection;\n    this.schedule.parseInterstitialDateRanges(\n      currentSelection,\n      this.hls.config.interstitialAppendInPlace,\n    );\n\n    if (!this.effectivePlayingItem && this.schedule.items) {\n      this.checkStart();\n    }\n  }\n\n  private onAudioTrackUpdated(\n    event: Events.AUDIO_TRACK_UPDATED,\n    data: AudioTrackUpdatedData,\n  ) {\n    const audio = this.hls.audioTracks[data.id];\n    const previousSelection = this.mediaSelection;\n    if (!previousSelection) {\n      this.altSelection = { ...this.altSelection, audio };\n      return;\n    }\n    const currentSelection = { ...previousSelection, audio };\n    this.mediaSelection = currentSelection;\n  }\n\n  private onSubtitleTrackUpdated(\n    event: Events.SUBTITLE_TRACK_UPDATED,\n    data: SubtitleTrackUpdatedData,\n  ) {\n    const subtitles = this.hls.subtitleTracks[data.id];\n    const previousSelection = this.mediaSelection;\n    if (!previousSelection) {\n      this.altSelection = { ...this.altSelection, subtitles };\n      return;\n    }\n    const currentSelection = { ...previousSelection, subtitles };\n    this.mediaSelection = currentSelection;\n  }\n\n  private onAudioTrackSwitching(\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData,\n  ) {\n    const audioOption = getBasicSelectionOption(data);\n    this.playerQueue.forEach(\n      ({ hls }) =>\n        hls && (hls.setAudioOption(data) || hls.setAudioOption(audioOption)),\n    );\n  }\n\n  private onSubtitleTrackSwitch(\n    event: Events.SUBTITLE_TRACK_SWITCH,\n    data: SubtitleTrackSwitchData,\n  ) {\n    const subtitleOption = getBasicSelectionOption(data);\n    this.playerQueue.forEach(\n      ({ hls }) =>\n        hls &&\n        (hls.setSubtitleOption(data) ||\n          (data.id !== -1 && hls.setSubtitleOption(subtitleOption))),\n    );\n  }\n\n  private onBufferCodecs(event: Events.BUFFER_CODECS, data: BufferCodecsData) {\n    const requiredTracks = data.tracks;\n    if (requiredTracks) {\n      this.requiredTracks = requiredTracks;\n    }\n  }\n\n  private onBufferAppended(\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData,\n  ) {\n    this.checkBuffer();\n  }\n\n  private onBufferFlushed(\n    event: Events.BUFFER_FLUSHED,\n    data: BufferFlushedData,\n  ) {\n    const playingItem = this.playingItem;\n    if (\n      playingItem &&\n      !this.itemsMatch(playingItem, this.bufferingItem) &&\n      !this.isInterstitial(playingItem)\n    ) {\n      const timelinePos = this.timelinePos;\n      this.bufferedPos = timelinePos;\n      this.checkBuffer();\n    }\n  }\n\n  private onBufferedToEnd(event: Events.BUFFERED_TO_END) {\n    if (!this.schedule) {\n      return;\n    }\n    // Buffered to post-roll\n    const interstitialEvents = this.schedule.events;\n    if (this.bufferedPos < Number.MAX_VALUE && interstitialEvents) {\n      for (let i = 0; i < interstitialEvents.length; i++) {\n        const interstitial = interstitialEvents[i];\n        if (interstitial.cue.post) {\n          const scheduleIndex = this.schedule.findEventIndex(\n            interstitial.identifier,\n          );\n          const item = this.schedule.items?.[scheduleIndex];\n          if (\n            this.isInterstitial(item) &&\n            this.eventItemsMatch(item, this.bufferingItem)\n          ) {\n            this.bufferedToItem(item, 0);\n          }\n          break;\n        }\n      }\n      this.bufferedPos = Number.MAX_VALUE;\n    }\n  }\n\n  private onMediaEnded(event: Events.MEDIA_ENDED) {\n    const playingItem = this.playingItem;\n    if (!this.playingLastItem && playingItem) {\n      const playingIndex = this.findItemIndex(playingItem);\n      this.setSchedulePosition(playingIndex + 1);\n    } else {\n      this.shouldPlay = false;\n    }\n  }\n\n  // Schedule update callback\n  private onScheduleUpdate = (\n    removedInterstitials: InterstitialEvent[],\n    previousItems: InterstitialScheduleItem[] | null,\n  ) => {\n    const schedule = this.schedule;\n    if (!schedule) {\n      return;\n    }\n    const playingItem = this.playingItem;\n    const interstitialEvents = schedule.events || [];\n    const scheduleItems = schedule.items || [];\n    const durations = schedule.durations;\n    const removedIds = removedInterstitials.map(\n      (interstitial) => interstitial.identifier,\n    );\n    const interstitialsUpdated = !!(\n      interstitialEvents.length || removedIds.length\n    );\n    if (interstitialsUpdated || previousItems) {\n      this.log(\n        `INTERSTITIALS_UPDATED (${\n          interstitialEvents.length\n        }): ${interstitialEvents}\nSchedule: ${scheduleItems.map((seg) => segmentToString(seg))} pos: ${this.timelinePos}`,\n      );\n    }\n    if (removedIds.length) {\n      this.log(`Removed events ${removedIds}`);\n    }\n\n    // Update schedule item references\n    // Do not replace Interstitial playingItem without a match - used for INTERSTITIAL_ASSET_ENDED and INTERSTITIAL_ENDED\n    let updatedPlayingItem: InterstitialScheduleItem | null = null;\n    let updatedBufferingItem: InterstitialScheduleItem | null = null;\n    if (playingItem) {\n      updatedPlayingItem = this.updateItem(playingItem, this.timelinePos);\n      if (this.itemsMatch(playingItem, updatedPlayingItem)) {\n        this.playingItem = updatedPlayingItem;\n      } else {\n        this.waitingItem = this.endedItem = null;\n      }\n    }\n    // Clear waitingItem if it has been removed from the schedule\n    this.waitingItem = this.updateItem(this.waitingItem);\n    this.endedItem = this.updateItem(this.endedItem);\n    // Do not replace Interstitial bufferingItem without a match - used for transfering media element or source\n    const bufferingItem = this.bufferingItem;\n    if (bufferingItem) {\n      updatedBufferingItem = this.updateItem(bufferingItem, this.bufferedPos);\n      if (this.itemsMatch(bufferingItem, updatedBufferingItem)) {\n        this.bufferingItem = updatedBufferingItem;\n      } else if (bufferingItem.event) {\n        // Interstitial removed from schedule (Live -> VOD or other scenario where Start Date is outside the range of VOD Playlist)\n        this.bufferingItem = this.playingItem;\n        this.clearInterstitial(bufferingItem.event, null);\n      }\n    }\n\n    removedInterstitials.forEach((interstitial) => {\n      interstitial.assetList.forEach((asset) => {\n        this.clearAssetPlayer(asset.identifier, null);\n      });\n    });\n\n    this.playerQueue.forEach((player) => {\n      if (player.interstitial.appendInPlace) {\n        const timelineStart = player.assetItem.timelineStart;\n        const diff = player.timelineOffset - timelineStart;\n        if (diff) {\n          try {\n            player.timelineOffset = timelineStart;\n          } catch (e) {\n            if (Math.abs(diff) > ALIGNED_END_THRESHOLD_SECONDS) {\n              this.warn(\n                `${e} (\"${player.assetId}\" ${player.timelineOffset}->${timelineStart})`,\n              );\n            }\n          }\n        }\n      }\n    });\n\n    if (interstitialsUpdated || previousItems) {\n      this.hls.trigger(Events.INTERSTITIALS_UPDATED, {\n        events: interstitialEvents.slice(0),\n        schedule: scheduleItems.slice(0),\n        durations,\n        removedIds,\n      });\n\n      if (\n        this.isInterstitial(playingItem) &&\n        removedIds.includes(playingItem.event.identifier)\n      ) {\n        this.warn(\n          `Interstitial \"${playingItem.event.identifier}\" removed while playing`,\n        );\n        this.primaryFallback(playingItem.event);\n        return;\n      }\n\n      if (playingItem) {\n        this.trimInPlace(updatedPlayingItem, playingItem);\n      }\n      if (bufferingItem && updatedBufferingItem !== updatedPlayingItem) {\n        this.trimInPlace(updatedBufferingItem, bufferingItem);\n      }\n\n      // Check if buffered to new Interstitial event boundary\n      // (Live update publishes Interstitial with new segment)\n      this.checkBuffer();\n    }\n  };\n\n  private updateItem<T extends InterstitialScheduleItem>(\n    previousItem: T | null,\n    time?: number,\n  ): T | null {\n    // find item in this.schedule.items;\n    const items = this.schedule?.items;\n    if (previousItem && items) {\n      const index = this.findItemIndex(previousItem, time);\n      return (items[index] as T | undefined) || null;\n    }\n    return null;\n  }\n\n  private trimInPlace(\n    updatedItem: InterstitialScheduleItem | null,\n    itemBeforeUpdate: InterstitialScheduleItem,\n  ) {\n    if (\n      this.isInterstitial(updatedItem) &&\n      updatedItem.event.appendInPlace &&\n      itemBeforeUpdate.end - updatedItem.end > 0.25\n    ) {\n      updatedItem.event.assetList.forEach((asset, index) => {\n        if (updatedItem.event.isAssetPastPlayoutLimit(index)) {\n          this.clearAssetPlayer(asset.identifier, null);\n        }\n      });\n      const flushStart = updatedItem.end + 0.25;\n      const bufferInfo = BufferHelper.bufferInfo(\n        this.primaryMedia,\n        flushStart,\n        0,\n      );\n      if (\n        bufferInfo.end > flushStart ||\n        (bufferInfo.nextStart || 0) > flushStart\n      ) {\n        this.log(\n          `trim buffered interstitial ${segmentToString(updatedItem)} (was ${segmentToString(itemBeforeUpdate)})`,\n        );\n        const skipSeekToStartPosition = true;\n        this.attachPrimary(flushStart, null, skipSeekToStartPosition);\n        this.flushFrontBuffer(flushStart);\n      }\n    }\n  }\n\n  private itemsMatch(\n    a: InterstitialScheduleItem,\n    b: InterstitialScheduleItem | null | undefined,\n  ): boolean {\n    return (\n      !!b &&\n      (a === b ||\n        (a.event && b.event && this.eventItemsMatch(a, b)) ||\n        (!a.event &&\n          !b.event &&\n          this.findItemIndex(a) === this.findItemIndex(b)))\n    );\n  }\n\n  private eventItemsMatch(\n    a: InterstitialScheduleEventItem,\n    b: InterstitialScheduleItem | null | undefined,\n  ): boolean {\n    return !!b && (a === b || a.event.identifier === b.event?.identifier);\n  }\n\n  private findItemIndex(\n    item: InterstitialScheduleItem | null,\n    time?: number,\n  ): number {\n    return item && this.schedule ? this.schedule.findItemIndex(item, time) : -1;\n  }\n\n  private updateSchedule(forceUpdate: boolean = false) {\n    const mediaSelection = this.mediaSelection;\n    if (!mediaSelection) {\n      return;\n    }\n    this.schedule?.updateSchedule(mediaSelection, [], forceUpdate);\n  }\n\n  // Schedule buffer control\n  private checkBuffer(starved?: boolean) {\n    const items = this.schedule?.items;\n    if (!items) {\n      return;\n    }\n    // Find when combined forward buffer change reaches next schedule segment\n    const bufferInfo = BufferHelper.bufferInfo(\n      this.primaryMedia,\n      this.timelinePos,\n      0,\n    );\n    if (starved) {\n      this.bufferedPos = this.timelinePos;\n    }\n    starved ||= bufferInfo.len < 1;\n    this.updateBufferedPos(bufferInfo.end, items, starved);\n  }\n\n  private updateBufferedPos(\n    bufferEnd: number,\n    items: InterstitialScheduleItem[],\n    bufferIsEmpty?: boolean,\n  ) {\n    const schedule = this.schedule;\n    const bufferingItem = this.bufferingItem;\n    if (this.bufferedPos > bufferEnd || !schedule) {\n      return;\n    }\n    if (items.length === 1 && this.itemsMatch(items[0], bufferingItem)) {\n      this.bufferedPos = bufferEnd;\n      return;\n    }\n    const playingItem = this.playingItem;\n    const playingIndex = this.findItemIndex(playingItem);\n    let bufferEndIndex = schedule.findItemIndexAtTime(bufferEnd);\n\n    if (this.bufferedPos < bufferEnd) {\n      const bufferingIndex = this.findItemIndex(bufferingItem);\n      const nextToBufferIndex = Math.min(bufferingIndex + 1, items.length - 1);\n      const nextItemToBuffer = items[nextToBufferIndex];\n      if (\n        (bufferEndIndex === -1 &&\n          bufferingItem &&\n          bufferEnd >= bufferingItem.end) ||\n        (nextItemToBuffer.event?.appendInPlace &&\n          bufferEnd + 0.01 >= nextItemToBuffer.start)\n      ) {\n        bufferEndIndex = nextToBufferIndex;\n      }\n      if (this.isInterstitial(bufferingItem)) {\n        const interstitial = bufferingItem.event;\n        if (\n          nextToBufferIndex - playingIndex > 1 &&\n          interstitial.appendInPlace === false\n        ) {\n          // do not advance buffering item past Interstitial that requires source reset\n          return;\n        }\n        if (\n          interstitial.assetList.length === 0 &&\n          interstitial.assetListLoader\n        ) {\n          // do not advance buffering item past Interstitial loading asset-list\n          return;\n        }\n      }\n      this.bufferedPos = bufferEnd;\n      if (bufferEndIndex > bufferingIndex && bufferEndIndex > playingIndex) {\n        this.bufferedToItem(nextItemToBuffer);\n      } else {\n        // allow more time than distance from edge for assets to load\n        const details = this.primaryDetails;\n        if (\n          this.primaryLive &&\n          details &&\n          bufferEnd > details.edge - details.targetduration &&\n          nextItemToBuffer.start <\n            details.edge + this.hls.config.interstitialLiveLookAhead &&\n          this.isInterstitial(nextItemToBuffer)\n        ) {\n          this.preloadAssets(nextItemToBuffer.event, 0);\n        }\n      }\n    } else if (\n      bufferIsEmpty &&\n      playingItem &&\n      !this.itemsMatch(playingItem, bufferingItem)\n    ) {\n      if (bufferEndIndex === playingIndex) {\n        this.bufferedToItem(playingItem);\n      } else if (bufferEndIndex === playingIndex + 1) {\n        this.bufferedToItem(items[bufferEndIndex]);\n      }\n    }\n  }\n\n  private assetsBuffered(\n    item: InterstitialScheduleEventItem,\n    media: HTMLMediaElement | null,\n  ): boolean {\n    const assetList = item.event.assetList;\n    if (assetList.length === 0) {\n      return false;\n    }\n    return !item.event.assetList.some((asset) => {\n      const player = this.getAssetPlayer(asset.identifier);\n      return !player?.bufferedInPlaceToEnd(media);\n    });\n  }\n\n  private setBufferingItem(\n    item: InterstitialScheduleItem,\n  ): InterstitialScheduleItem | null {\n    const bufferingLast = this.bufferingItem;\n    const schedule = this.schedule;\n\n    if (!this.itemsMatch(item, bufferingLast) && schedule) {\n      const { items, events } = schedule;\n      if (!items || !events) {\n        return bufferingLast;\n      }\n      const isInterstitial = this.isInterstitial(item);\n      const bufferingPlayer = this.getBufferingPlayer();\n      this.bufferingItem = item;\n      this.bufferedPos = Math.max(\n        item.start,\n        Math.min(item.end, this.timelinePos),\n      );\n      const timeRemaining = bufferingPlayer\n        ? bufferingPlayer.remaining\n        : bufferingLast\n          ? bufferingLast.end - this.timelinePos\n          : 0;\n      this.log(\n        `INTERSTITIALS_BUFFERED_TO_BOUNDARY ${segmentToString(item)}` +\n          (bufferingLast ? ` (${timeRemaining.toFixed(2)} remaining)` : ''),\n      );\n      if (!this.playbackDisabled) {\n        if (isInterstitial) {\n          const bufferIndex = schedule.findAssetIndex(\n            item.event,\n            this.bufferedPos,\n          );\n          // primary fragment loading will exit early in base-stream-controller while `bufferingItem` is set to an Interstitial block\n          item.event.assetList.forEach((asset, i) => {\n            const player = this.getAssetPlayer(asset.identifier);\n            if (player) {\n              if (i === bufferIndex) {\n                player.loadSource();\n              }\n              player.resumeBuffering();\n            }\n          });\n        } else {\n          this.hls.resumeBuffering();\n          this.playerQueue.forEach((player) => player.pauseBuffering());\n        }\n      }\n      this.hls.trigger(Events.INTERSTITIALS_BUFFERED_TO_BOUNDARY, {\n        events: events.slice(0),\n        schedule: items.slice(0),\n        bufferingIndex: this.findItemIndex(item),\n        playingIndex: this.findItemIndex(this.playingItem),\n      });\n    } else if (this.bufferingItem !== item) {\n      this.bufferingItem = item;\n    }\n    return bufferingLast;\n  }\n\n  private bufferedToItem(\n    item: InterstitialScheduleItem,\n    assetListIndex: number = 0,\n  ) {\n    const bufferingLast = this.setBufferingItem(item);\n    if (this.playbackDisabled) {\n      return;\n    }\n    if (this.isInterstitial(item)) {\n      // Ensure asset list is loaded\n      this.bufferedToEvent(item, assetListIndex);\n    } else if (bufferingLast !== null) {\n      // If primary player is detached, it is also stopped, restart loading at primary position\n      this.bufferingAsset = null;\n      const detachedData = this.detachedData;\n      if (detachedData) {\n        if (detachedData.mediaSource) {\n          const skipSeekToStartPosition = true;\n          this.attachPrimary(item.start, item, skipSeekToStartPosition);\n        } else {\n          this.preloadPrimary(item);\n        }\n      } else {\n        // If not detached seek to resumption point\n        this.preloadPrimary(item);\n      }\n    }\n  }\n\n  private preloadPrimary(item: InterstitialSchedulePrimaryItem) {\n    const index = this.findItemIndex(item);\n    const timelinePos = this.getPrimaryResumption(item, index);\n    this.startLoadingPrimaryAt(timelinePos);\n  }\n\n  private bufferedToEvent(\n    item: InterstitialScheduleEventItem,\n    assetListIndex: number,\n  ) {\n    const interstitial = item.event;\n    const neverLoaded =\n      interstitial.assetList.length === 0 && !interstitial.assetListLoader;\n    const playOnce = interstitial.cue.once;\n    if (neverLoaded || !playOnce) {\n      // Buffered to Interstitial boundary\n      const player = this.preloadAssets(interstitial, assetListIndex);\n      if (player?.interstitial.appendInPlace) {\n        const media = this.primaryMedia;\n        if (media) {\n          this.bufferAssetPlayer(player, media);\n        }\n      }\n    }\n  }\n\n  private preloadAssets(\n    interstitial: InterstitialEvent,\n    assetListIndex: number,\n  ): HlsAssetPlayer | null {\n    const uri = interstitial.assetUrl;\n    const assetListLength = interstitial.assetList.length;\n    const neverLoaded = assetListLength === 0 && !interstitial.assetListLoader;\n    const playOnce = interstitial.cue.once;\n    if (neverLoaded) {\n      const timelineStart = interstitial.timelineStart;\n      if (interstitial.appendInPlace) {\n        const playingItem = this.playingItem;\n        if (\n          !this.isInterstitial(playingItem) &&\n          playingItem?.nextEvent?.identifier === interstitial.identifier\n        ) {\n          this.flushFrontBuffer(timelineStart + 0.25);\n        }\n      }\n      let hlsStartOffset;\n      let liveStartPosition = 0;\n      if (!this.playingItem && this.primaryLive) {\n        liveStartPosition = this.hls.startPosition;\n        if (liveStartPosition === -1) {\n          liveStartPosition = this.hls.liveSyncPosition || 0;\n        }\n      }\n      if (\n        liveStartPosition &&\n        !(interstitial.cue.pre || interstitial.cue.post)\n      ) {\n        const startOffset = liveStartPosition - timelineStart;\n        if (startOffset > 0) {\n          hlsStartOffset = Math.round(startOffset * 1000) / 1000;\n        }\n      }\n      this.log(\n        `Load interstitial asset ${assetListIndex + 1}/${uri ? 1 : assetListLength} ${interstitial}${\n          hlsStartOffset\n            ? ` live-start: ${liveStartPosition} start-offset: ${hlsStartOffset}`\n            : ''\n        }`,\n      );\n      if (uri) {\n        return this.createAsset(\n          interstitial,\n          0,\n          0,\n          timelineStart,\n          interstitial.duration,\n          uri,\n        );\n      }\n      const assetListLoader = this.assetListLoader.loadAssetList(\n        interstitial as InterstitialEventWithAssetList,\n        hlsStartOffset,\n      );\n      if (assetListLoader) {\n        interstitial.assetListLoader = assetListLoader;\n      }\n    } else if (!playOnce && assetListLength) {\n      // Re-buffered to Interstitial boundary, re-create asset player(s)\n      for (let i = assetListIndex; i < assetListLength; i++) {\n        const asset = interstitial.assetList[i];\n        const playerIndex = this.getAssetPlayerQueueIndex(asset.identifier);\n        if (\n          (playerIndex === -1 || this.playerQueue[playerIndex].destroyed) &&\n          !asset.error\n        ) {\n          this.createAssetPlayer(interstitial, asset, i);\n        }\n      }\n      const asset = interstitial.assetList[assetListIndex];\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (asset) {\n        const player = this.getAssetPlayer(asset.identifier);\n        if (player) {\n          player.loadSource();\n        }\n        return player;\n      }\n    }\n    return null;\n  }\n\n  private flushFrontBuffer(startOffset: number) {\n    // Force queued flushing of all buffers\n    const requiredTracks = this.requiredTracks;\n    if (!requiredTracks) {\n      return;\n    }\n    this.log(`Removing front buffer starting at ${startOffset}`);\n    const sourceBufferNames = Object.keys(requiredTracks);\n    sourceBufferNames.forEach((type: SourceBufferName) => {\n      this.hls.trigger(Events.BUFFER_FLUSHING, {\n        startOffset,\n        endOffset: Infinity,\n        type,\n      });\n    });\n  }\n\n  // Interstitial Asset Player control\n  private getAssetPlayerQueueIndex(assetId: InterstitialAssetId): number {\n    const playerQueue = this.playerQueue;\n    for (let i = 0; i < playerQueue.length; i++) {\n      if (assetId === playerQueue[i].assetId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  private getAssetPlayer(assetId: InterstitialAssetId): HlsAssetPlayer | null {\n    const index = this.getAssetPlayerQueueIndex(assetId);\n    return this.playerQueue[index] || null;\n  }\n\n  private getBufferingPlayer(): HlsAssetPlayer | null {\n    const { playerQueue, primaryMedia } = this;\n    if (primaryMedia) {\n      for (let i = 0; i < playerQueue.length; i++) {\n        if (playerQueue[i].media === primaryMedia) {\n          return playerQueue[i];\n        }\n      }\n    }\n    return null;\n  }\n\n  private createAsset(\n    interstitial: InterstitialEvent,\n    assetListIndex: number,\n    startOffset: number,\n    timelineStart: number,\n    duration: number,\n    uri: string,\n  ): HlsAssetPlayer {\n    const assetItem: InterstitialAssetItem = {\n      parentIdentifier: interstitial.identifier,\n      identifier: generateAssetIdentifier(interstitial, uri, assetListIndex),\n      duration,\n      startOffset,\n      timelineStart,\n      uri,\n    };\n    return this.createAssetPlayer(interstitial, assetItem, assetListIndex);\n  }\n\n  private createAssetPlayer(\n    interstitial: InterstitialEvent,\n    assetItem: InterstitialAssetItem,\n    assetListIndex: number,\n  ): HlsAssetPlayer {\n    const primary = this.hls;\n    const userConfig = primary.userConfig;\n    let videoPreference = userConfig.videoPreference;\n    const currentLevel =\n      primary.loadLevelObj || primary.levels[primary.currentLevel];\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (videoPreference || currentLevel) {\n      videoPreference = Object.assign({}, videoPreference);\n      if (currentLevel.videoCodec) {\n        videoPreference.videoCodec = currentLevel.videoCodec;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (currentLevel.videoRange) {\n        videoPreference.allowedVideoRanges = [currentLevel.videoRange];\n      }\n    }\n    const selectedAudio = primary.audioTracks[primary.audioTrack];\n    const selectedSubtitle = primary.subtitleTracks[primary.subtitleTrack];\n    let startPosition = 0;\n    if (this.primaryLive || interstitial.appendInPlace) {\n      const timePastStart = this.timelinePos - assetItem.timelineStart;\n      if (timePastStart > 1) {\n        const duration = assetItem.duration;\n        if (duration && timePastStart < duration) {\n          startPosition = timePastStart;\n        }\n      }\n    }\n    const assetId = assetItem.identifier;\n    const playerConfig: HlsAssetPlayerConfig = {\n      ...userConfig,\n      maxMaxBufferLength: Math.min(180, primary.config.maxMaxBufferLength),\n      autoStartLoad: true,\n      startFragPrefetch: true,\n      primarySessionId: primary.sessionId,\n      assetPlayerId: assetId,\n      abrEwmaDefaultEstimate: primary.bandwidthEstimate,\n      interstitialsController: undefined,\n      startPosition,\n      liveDurationInfinity: false,\n      testBandwidth: false,\n      videoPreference,\n      audioPreference:\n        (selectedAudio as MediaPlaylist | undefined) ||\n        userConfig.audioPreference,\n      subtitlePreference:\n        (selectedSubtitle as MediaPlaylist | undefined) ||\n        userConfig.subtitlePreference,\n    };\n    // TODO: limit maxMaxBufferLength in asset players to prevent QEE\n    if (interstitial.appendInPlace) {\n      interstitial.appendInPlaceStarted = true;\n      if (assetItem.timelineStart) {\n        playerConfig.timelineOffset = assetItem.timelineStart;\n      }\n    }\n    const cmcd = playerConfig.cmcd;\n    if (cmcd?.sessionId && cmcd.contentId) {\n      playerConfig.cmcd = Object.assign({}, cmcd, {\n        contentId: hash(assetItem.uri),\n      });\n    }\n    if (this.getAssetPlayer(assetId)) {\n      this.warn(\n        `Duplicate date range identifier ${interstitial} and asset ${assetId}`,\n      );\n    }\n    const player = new HlsAssetPlayer(\n      this.HlsPlayerClass,\n      playerConfig,\n      interstitial,\n      assetItem,\n    );\n    this.playerQueue.push(player);\n    interstitial.assetList[assetListIndex] = assetItem;\n    // Listen for LevelDetails and PTS change to update duration\n    let initialDuration = true;\n    const updateAssetPlayerDetails = (details: LevelDetails) => {\n      if (details.live) {\n        const error = new Error(\n          `Interstitials MUST be VOD assets ${interstitial}`,\n        );\n        const errorData: ErrorData = {\n          fatal: true,\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n          error,\n        };\n        const scheduleIndex =\n          this.schedule?.findEventIndex(interstitial.identifier) || -1;\n        this.handleAssetItemError(\n          errorData,\n          interstitial,\n          scheduleIndex,\n          assetListIndex,\n          error.message,\n        );\n        return;\n      }\n      // Get time at end of last fragment\n      const duration = details.edge - details.fragmentStart;\n      const currentAssetDuration = assetItem.duration;\n      if (\n        initialDuration ||\n        currentAssetDuration === null ||\n        duration > currentAssetDuration\n      ) {\n        initialDuration = false;\n        this.log(\n          `Interstitial asset \"${assetId}\" duration change ${currentAssetDuration} > ${duration}`,\n        );\n        assetItem.duration = duration;\n        // Update schedule with new event and asset duration\n        this.updateSchedule();\n      }\n    };\n    player.on(Events.LEVEL_UPDATED, (event, { details }) =>\n      updateAssetPlayerDetails(details),\n    );\n    player.on(Events.LEVEL_PTS_UPDATED, (event, { details }) =>\n      updateAssetPlayerDetails(details),\n    );\n    player.on(Events.EVENT_CUE_ENTER, () => this.onInterstitialCueEnter());\n    const onBufferCodecs = (\n      event: Events.BUFFER_CODECS,\n      data: BufferCodecsData,\n    ) => {\n      const inQueuPlayer = this.getAssetPlayer(assetId);\n      if (inQueuPlayer && data.tracks) {\n        inQueuPlayer.off(Events.BUFFER_CODECS, onBufferCodecs);\n        inQueuPlayer.tracks = data.tracks;\n        const media = this.primaryMedia;\n        if (\n          this.bufferingAsset === inQueuPlayer.assetItem &&\n          media &&\n          !inQueuPlayer.media\n        ) {\n          this.bufferAssetPlayer(inQueuPlayer, media);\n        }\n      }\n    };\n    player.on(Events.BUFFER_CODECS, onBufferCodecs);\n    const bufferedToEnd = () => {\n      const inQueuPlayer = this.getAssetPlayer(assetId);\n      this.log(`buffered to end of asset ${inQueuPlayer}`);\n      if (!inQueuPlayer || !this.schedule) {\n        return;\n      }\n      // Preload at end of asset\n      const scheduleIndex = this.schedule.findEventIndex(\n        interstitial.identifier,\n      );\n      const item = this.schedule.items?.[scheduleIndex];\n      if (this.isInterstitial(item)) {\n        this.advanceAssetBuffering(item, assetItem);\n      }\n    };\n    player.on(Events.BUFFERED_TO_END, bufferedToEnd);\n    const endedWithAssetIndex = (assetIndex) => {\n      return () => {\n        const inQueuPlayer = this.getAssetPlayer(assetId);\n        if (!inQueuPlayer || !this.schedule) {\n          return;\n        }\n        this.shouldPlay = true;\n        const scheduleIndex = this.schedule.findEventIndex(\n          interstitial.identifier,\n        );\n        this.advanceAfterAssetEnded(interstitial, scheduleIndex, assetIndex);\n      };\n    };\n    player.once(Events.MEDIA_ENDED, endedWithAssetIndex(assetListIndex));\n    player.once(Events.PLAYOUT_LIMIT_REACHED, endedWithAssetIndex(Infinity));\n    player.on(Events.ERROR, (event: Events.ERROR, data: ErrorData) => {\n      if (!this.schedule) {\n        return;\n      }\n      const inQueuPlayer = this.getAssetPlayer(assetId);\n      if (data.details === ErrorDetails.BUFFER_STALLED_ERROR) {\n        if (inQueuPlayer?.appendInPlace) {\n          this.handleInPlaceStall(interstitial);\n          return;\n        }\n        this.onTimeupdate();\n        this.checkBuffer(true);\n        return;\n      }\n      this.handleAssetItemError(\n        data,\n        interstitial,\n        this.schedule.findEventIndex(interstitial.identifier),\n        assetListIndex,\n        `Asset player error ${data.error} ${interstitial}`,\n      );\n    });\n    player.on(Events.DESTROYING, () => {\n      const inQueuPlayer = this.getAssetPlayer(assetId);\n      if (!inQueuPlayer || !this.schedule) {\n        return;\n      }\n      const error = new Error(`Asset player destroyed unexpectedly ${assetId}`);\n      const errorData: ErrorData = {\n        fatal: true,\n        type: ErrorTypes.OTHER_ERROR,\n        details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n        error,\n      };\n      this.handleAssetItemError(\n        errorData,\n        interstitial,\n        this.schedule.findEventIndex(interstitial.identifier),\n        assetListIndex,\n        error.message,\n      );\n    });\n    this.log(\n      `INTERSTITIAL_ASSET_PLAYER_CREATED ${eventAssetToString(assetItem)}`,\n    );\n    this.hls.trigger(Events.INTERSTITIAL_ASSET_PLAYER_CREATED, {\n      asset: assetItem,\n      assetListIndex,\n      event: interstitial,\n      player,\n    });\n    return player;\n  }\n\n  private clearInterstitial(\n    interstitial: InterstitialEvent,\n    toSegment: InterstitialScheduleItem | null,\n  ) {\n    interstitial.assetList.forEach((asset) => {\n      this.clearAssetPlayer(asset.identifier, toSegment);\n    });\n    // Remove asset list and resolved duration\n    interstitial.reset();\n  }\n\n  private resetAssetPlayer(assetId: InterstitialAssetId) {\n    // Reset asset player so that it's timeline can be adjusted without reloading the MVP\n    const playerIndex = this.getAssetPlayerQueueIndex(assetId);\n    if (playerIndex !== -1) {\n      this.log(`reset asset player \"${assetId}\" after error`);\n      const player = this.playerQueue[playerIndex];\n      this.transferMediaFromPlayer(player, null);\n      player.resetDetails();\n    }\n  }\n\n  private clearAssetPlayer(\n    assetId: InterstitialAssetId,\n    toSegment: InterstitialScheduleItem | null,\n  ) {\n    const playerIndex = this.getAssetPlayerQueueIndex(assetId);\n    if (playerIndex !== -1) {\n      const player = this.playerQueue[playerIndex];\n      this.log(\n        `clear ${player} toSegment: ${toSegment ? segmentToString(toSegment) : toSegment}`,\n      );\n      this.transferMediaFromPlayer(player, toSegment);\n      this.playerQueue.splice(playerIndex, 1);\n      player.destroy();\n    }\n  }\n\n  private emptyPlayerQueue() {\n    let player: HlsAssetPlayer | undefined;\n    while ((player = this.playerQueue.pop())) {\n      player.destroy();\n    }\n    this.playerQueue = [];\n  }\n\n  private startAssetPlayer(\n    player: HlsAssetPlayer,\n    assetListIndex: number,\n    scheduleItems: InterstitialScheduleItem[],\n    scheduleIndex: number,\n    media: HTMLMediaElement,\n  ) {\n    const { interstitial, assetItem, assetId } = player;\n    const assetListLength = interstitial.assetList.length;\n\n    const playingAsset = this.playingAsset;\n    this.endedAsset = null;\n    this.playingAsset = assetItem;\n    if (!playingAsset || playingAsset.identifier !== assetId) {\n      if (playingAsset) {\n        // Exiting another Interstitial asset\n        this.clearAssetPlayer(\n          playingAsset.identifier,\n          scheduleItems[scheduleIndex],\n        );\n        delete playingAsset.error;\n      }\n      this.log(\n        `INTERSTITIAL_ASSET_STARTED ${assetListIndex + 1}/${assetListLength} ${eventAssetToString(assetItem)}`,\n      );\n      this.hls.trigger(Events.INTERSTITIAL_ASSET_STARTED, {\n        asset: assetItem,\n        assetListIndex,\n        event: interstitial,\n        schedule: scheduleItems.slice(0),\n        scheduleIndex,\n        player,\n      });\n    }\n\n    // detach media and attach to interstitial player if it does not have another element attached\n    this.bufferAssetPlayer(player, media);\n  }\n\n  private bufferAssetPlayer(player: HlsAssetPlayer, media: HTMLMediaElement) {\n    if (!this.schedule) {\n      return;\n    }\n    const { interstitial, assetItem } = player;\n    const scheduleIndex = this.schedule.findEventIndex(interstitial.identifier);\n    const item = this.schedule.items?.[scheduleIndex];\n    if (!item) {\n      return;\n    }\n    player.loadSource();\n    this.setBufferingItem(item);\n    this.bufferingAsset = assetItem;\n    const bufferingPlayer = this.getBufferingPlayer();\n    if (bufferingPlayer === player) {\n      return;\n    }\n    const appendInPlaceNext = interstitial.appendInPlace;\n    if (\n      appendInPlaceNext &&\n      bufferingPlayer?.interstitial.appendInPlace === false\n    ) {\n      // Media is detached and not available to append in place\n      return;\n    }\n    const activeTracks =\n      bufferingPlayer?.tracks ||\n      this.detachedData?.tracks ||\n      this.requiredTracks;\n    if (appendInPlaceNext && assetItem !== this.playingAsset) {\n      // Do not buffer another item if tracks are unknown or incompatible\n      if (!player.tracks) {\n        this.log(`Waiting for track info before buffering ${player}`);\n        return;\n      }\n      if (\n        activeTracks &&\n        !isCompatibleTrackChange(activeTracks, player.tracks)\n      ) {\n        const error = new Error(\n          `Asset ${eventAssetToString(assetItem)} SourceBuffer tracks ('${Object.keys(player.tracks)}') are not compatible with primary content tracks ('${Object.keys(activeTracks)}')`,\n        );\n        const errorData: ErrorData = {\n          fatal: true,\n          type: ErrorTypes.OTHER_ERROR,\n          details: ErrorDetails.INTERSTITIAL_ASSET_ITEM_ERROR,\n          error,\n        };\n        const assetListIndex = interstitial.findAssetIndex(assetItem);\n        this.handleAssetItemError(\n          errorData,\n          interstitial,\n          scheduleIndex,\n          assetListIndex,\n          error.message,\n        );\n        return;\n      }\n    }\n\n    this.transferMediaTo(player, media);\n  }\n\n  private handleInPlaceStall(interstitial: InterstitialEvent) {\n    const schedule = this.schedule;\n    const media = this.primaryMedia;\n    if (!schedule || !media) {\n      return;\n    }\n    const currentTime = media.currentTime;\n    const foundAssetIndex = schedule.findAssetIndex(interstitial, currentTime);\n    const stallingAsset = interstitial.assetList[foundAssetIndex] as\n      | InterstitialAssetItem\n      | undefined;\n    if (stallingAsset) {\n      const player = this.getAssetPlayer(stallingAsset.identifier);\n      if (player) {\n        const assetCurrentTime =\n          player.currentTime || currentTime - stallingAsset.timelineStart;\n        const distanceFromEnd = player.duration - assetCurrentTime;\n        this.warn(\n          `Stalled at ${assetCurrentTime} of ${assetCurrentTime + distanceFromEnd} in ${player} ${interstitial} (media.currentTime: ${currentTime})`,\n        );\n        if (\n          assetCurrentTime &&\n          (distanceFromEnd / media.playbackRate < 0.5 ||\n            player.bufferedInPlaceToEnd(media)) &&\n          player.hls\n        ) {\n          const scheduleIndex = schedule.findEventIndex(\n            interstitial.identifier,\n          );\n          this.advanceAfterAssetEnded(\n            interstitial,\n            scheduleIndex,\n            foundAssetIndex,\n          );\n        }\n      }\n    }\n  }\n\n  private advanceInPlace(time: number) {\n    const media = this.primaryMedia;\n    if (media && media.currentTime < time) {\n      media.currentTime = time;\n    }\n  }\n\n  private handleAssetItemError(\n    data: ErrorData,\n    interstitial: InterstitialEvent,\n    scheduleIndex: number,\n    assetListIndex: number,\n    errorMessage: string,\n  ) {\n    if (data.details === ErrorDetails.BUFFER_STALLED_ERROR) {\n      return;\n    }\n    const assetItem = (interstitial.assetList[assetListIndex] ||\n      null) as InterstitialAssetItem | null;\n    this.warn(\n      `INTERSTITIAL_ASSET_ERROR ${assetItem ? eventAssetToString(assetItem) : assetItem} ${data.error}`,\n    );\n    if (!this.schedule) {\n      return;\n    }\n    const assetId = assetItem?.identifier || '';\n    const playerIndex = this.getAssetPlayerQueueIndex(assetId);\n    const player = this.playerQueue[playerIndex] || null;\n    const items = this.schedule.items;\n    const interstitialAssetError = Object.assign({}, data, {\n      fatal: false,\n      errorAction: createDoNothingErrorAction(true),\n      asset: assetItem,\n      assetListIndex,\n      event: interstitial,\n      schedule: items,\n      scheduleIndex,\n      player,\n    });\n    this.hls.trigger(Events.INTERSTITIAL_ASSET_ERROR, interstitialAssetError);\n    if (!data.fatal) {\n      return;\n    }\n\n    const playingAsset = this.playingAsset;\n    const bufferingAsset = this.bufferingAsset;\n    const error = new Error(errorMessage);\n    if (assetItem) {\n      this.clearAssetPlayer(assetId, null);\n      assetItem.error = error;\n    }\n\n    // If all assets in interstitial fail, mark the interstitial with an error\n    if (!interstitial.assetList.some((asset) => !asset.error)) {\n      interstitial.error = error;\n    } else {\n      // Reset level details and reload/parse media playlists to align with updated schedule\n      for (let i = assetListIndex; i < interstitial.assetList.length; i++) {\n        this.resetAssetPlayer(interstitial.assetList[i].identifier);\n      }\n    }\n    this.updateSchedule(true);\n    if (interstitial.error) {\n      this.primaryFallback(interstitial);\n    } else if (playingAsset && playingAsset.identifier === assetId) {\n      this.advanceAfterAssetEnded(interstitial, scheduleIndex, assetListIndex);\n    } else if (\n      bufferingAsset &&\n      bufferingAsset.identifier === assetId &&\n      this.isInterstitial(this.bufferingItem)\n    ) {\n      this.advanceAssetBuffering(this.bufferingItem, bufferingAsset);\n    }\n  }\n\n  private primaryFallback(interstitial: InterstitialEvent) {\n    // Fallback to Primary by on current or future events by updating schedule to skip errored interstitials/assets\n    const flushStart = interstitial.timelineStart;\n    const playingItem = this.effectivePlayingItem;\n    // Update schedule now that interstitial/assets are flagged with `error` for fallback\n    if (playingItem) {\n      this.log(\n        `Fallback to primary from event \"${interstitial.identifier}\" start: ${\n          flushStart\n        } pos: ${this.timelinePos} playing: ${segmentToString(\n          playingItem,\n        )} error: ${interstitial.error}`,\n      );\n      let timelinePos = this.timelinePos;\n      if (timelinePos === -1) {\n        timelinePos = this.hls.startPosition;\n      }\n      const newPlayingItem = this.updateItem(playingItem, timelinePos);\n      if (this.itemsMatch(playingItem, newPlayingItem)) {\n        this.clearInterstitial(interstitial, null);\n      }\n      if (interstitial.appendInPlace) {\n        this.attachPrimary(flushStart, null);\n        this.flushFrontBuffer(flushStart);\n      }\n      if (!this.schedule) {\n        return;\n      }\n      const scheduleIndex = this.schedule.findItemIndexAtTime(timelinePos);\n      this.setSchedulePosition(scheduleIndex);\n    } else {\n      this.checkStart();\n    }\n  }\n\n  // Asset List loading\n  private onAssetListLoaded(\n    event: Events.ASSET_LIST_LOADED,\n    data: AssetListLoadedData,\n  ) {\n    const interstitial = data.event;\n    const interstitialId = interstitial.identifier;\n    const assets = data.assetListResponse.ASSETS;\n    if (!this.schedule?.hasEvent(interstitialId)) {\n      // Interstitial with id was removed\n      return;\n    }\n    const eventStart = interstitial.timelineStart;\n    const previousDuration = interstitial.duration;\n    let sumDuration = 0;\n    assets.forEach((asset, assetListIndex) => {\n      const duration = parseFloat(asset.DURATION);\n      this.createAsset(\n        interstitial,\n        assetListIndex,\n        sumDuration,\n        eventStart + sumDuration,\n        duration,\n        asset.URI,\n      );\n      sumDuration += duration;\n    });\n    interstitial.duration = sumDuration;\n    this.log(\n      `Loaded asset-list with duration: ${sumDuration} (was: ${previousDuration}) ${interstitial}`,\n    );\n    const waitingItem = this.waitingItem;\n    const waitingForItem = waitingItem?.event.identifier === interstitialId;\n\n    // Update schedule now that asset.DURATION(s) are parsed\n    this.updateSchedule();\n\n    const bufferingEvent = this.bufferingItem?.event;\n\n    // If buffer reached Interstitial, start buffering first asset\n    if (waitingForItem) {\n      // Advance schedule when waiting for asset list data to play\n      const scheduleIndex = this.schedule.findEventIndex(interstitialId);\n      const item = this.schedule.items?.[scheduleIndex];\n      if (item) {\n        if (!this.playingItem && this.timelinePos > item.end) {\n          // Abandon if new duration is reduced enough to land playback in primary start\n          const index = this.schedule.findItemIndexAtTime(this.timelinePos);\n          if (index !== scheduleIndex) {\n            interstitial.error = new Error(\n              `Interstitial no longer within playback range ${this.timelinePos} ${interstitial}`,\n            );\n            this.updateSchedule(true);\n            this.primaryFallback(interstitial);\n            return;\n          }\n        }\n        this.setBufferingItem(item);\n      }\n      this.setSchedulePosition(scheduleIndex);\n    } else if (bufferingEvent?.identifier === interstitialId) {\n      const assetItem = interstitial.assetList[0];\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (assetItem) {\n        const player = this.getAssetPlayer(assetItem.identifier);\n        if (bufferingEvent.appendInPlace) {\n          // If buffering (but not playback) has reached this item transfer media-source\n          const media = this.primaryMedia;\n          if (player && media) {\n            this.bufferAssetPlayer(player, media);\n          }\n        } else if (player) {\n          player.loadSource();\n        }\n      }\n    }\n  }\n\n  private onError(event: Events.ERROR, data: ErrorData) {\n    if (!this.schedule) {\n      return;\n    }\n    switch (data.details) {\n      case ErrorDetails.ASSET_LIST_PARSING_ERROR:\n      case ErrorDetails.ASSET_LIST_LOAD_ERROR:\n      case ErrorDetails.ASSET_LIST_LOAD_TIMEOUT: {\n        const interstitial = data.interstitial;\n        if (interstitial) {\n          this.updateSchedule(true);\n          this.primaryFallback(interstitial);\n        }\n        break;\n      }\n      case ErrorDetails.BUFFER_STALLED_ERROR: {\n        const stallingItem =\n          this.endedItem || this.waitingItem || this.playingItem;\n        if (\n          this.isInterstitial(stallingItem) &&\n          stallingItem.event.appendInPlace\n        ) {\n          this.handleInPlaceStall(stallingItem.event);\n          return;\n        }\n        this.log(\n          `Primary player stall @${this.timelinePos} bufferedPos: ${this.bufferedPos}`,\n        );\n        this.onTimeupdate();\n        this.checkBuffer(true);\n        break;\n      }\n    }\n  }\n}\n","import BaseStreamController, { State } from './base-stream-controller';\nimport { findFragmentByPTS } from './fragment-finders';\nimport { FragmentState } from './fragment-tracker';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport {\n  type Fragment,\n  isMediaFragment,\n  type MediaFragment,\n} from '../loader/fragment';\nimport { Level } from '../types/level';\nimport { PlaylistLevelType } from '../types/loader';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport { alignMediaPlaylistByPDT } from '../utils/discontinuities';\nimport {\n  getAesModeFromFullSegmentMethod,\n  isFullSegmentEncryption,\n} from '../utils/encryption-methods-util';\nimport { addSliding } from '../utils/level-helper';\nimport { subtitleOptionsIdentical } from '../utils/media-option-attributes';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type Hls from '../hls';\nimport type KeyLoader from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  BufferFlushingData,\n  ErrorData,\n  FragLoadedData,\n  LevelLoadedData,\n  MediaDetachingData,\n  SubtitleFragProcessed,\n  SubtitleTracksUpdatedData,\n  TrackLoadedData,\n  TrackSwitchedData,\n} from '../types/events';\nimport type { Bufferable } from '../utils/buffer-helper';\n\nconst TICK_INTERVAL = 500; // how often to tick in ms\n\ninterface TimeRange {\n  start: number;\n  end: number;\n}\n\nexport class SubtitleStreamController\n  extends BaseStreamController\n  implements NetworkComponentAPI\n{\n  private currentTrackId: number = -1;\n  private tracksBuffered: Array<TimeRange[]> = [];\n  private mainDetails: LevelDetails | null = null;\n\n  constructor(\n    hls: Hls,\n    fragmentTracker: FragmentTracker,\n    keyLoader: KeyLoader,\n  ) {\n    super(\n      hls,\n      fragmentTracker,\n      keyLoader,\n      'subtitle-stream-controller',\n      PlaylistLevelType.SUBTITLE,\n    );\n    this.registerListeners();\n  }\n\n  protected onHandlerDestroying() {\n    this.unregisterListeners();\n    super.onHandlerDestroying();\n    this.mainDetails = null;\n  }\n\n  protected registerListeners() {\n    super.registerListeners();\n    const { hls } = this;\n    hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.on(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n    hls.on(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.on(Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n    hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n  }\n\n  protected unregisterListeners() {\n    super.unregisterListeners();\n    const { hls } = this;\n    hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.off(Events.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this);\n    hls.off(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.off(Events.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this);\n    hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n  }\n\n  startLoad(startPosition: number, skipSeekToStartPosition?: boolean) {\n    this.stopLoad();\n    this.state = State.IDLE;\n\n    this.setInterval(TICK_INTERVAL);\n\n    this.nextLoadPosition = this.lastCurrentTime =\n      startPosition + this.timelineOffset;\n    this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n\n    this.tick();\n  }\n\n  protected onManifestLoading() {\n    super.onManifestLoading();\n    this.mainDetails = null;\n  }\n\n  protected onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    this.tracksBuffered = [];\n    super.onMediaDetaching(event, data);\n  }\n\n  private onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData) {\n    this.mainDetails = data.details;\n  }\n\n  private onSubtitleFragProcessed(\n    event: Events.SUBTITLE_FRAG_PROCESSED,\n    data: SubtitleFragProcessed,\n  ) {\n    const { frag, success } = data;\n    if (!this.fragContextChanged(frag)) {\n      if (isMediaFragment(frag)) {\n        this.fragPrevious = frag;\n      }\n      this.state = State.IDLE;\n    }\n    if (!success) {\n      return;\n    }\n\n    const buffered = this.tracksBuffered[this.currentTrackId];\n    if (!buffered) {\n      return;\n    }\n\n    // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo\n    // so we can re-use the logic used to detect how much has been buffered\n    let timeRange: TimeRange | undefined;\n    const fragStart = frag.start;\n    for (let i = 0; i < buffered.length; i++) {\n      if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {\n        timeRange = buffered[i];\n        break;\n      }\n    }\n\n    const fragEnd = frag.start + frag.duration;\n    if (timeRange) {\n      timeRange.end = fragEnd;\n    } else {\n      timeRange = {\n        start: fragStart,\n        end: fragEnd,\n      };\n      buffered.push(timeRange);\n    }\n    this.fragmentTracker.fragBuffered(frag as MediaFragment);\n    this.fragBufferedComplete(frag, null);\n    if (this.media) {\n      this.tick();\n    }\n  }\n\n  private onBufferFlushing(\n    event: Events.BUFFER_FLUSHING,\n    data: BufferFlushingData,\n  ) {\n    const { startOffset, endOffset } = data;\n    if (startOffset === 0 && endOffset !== Number.POSITIVE_INFINITY) {\n      const endOffsetSubtitles = endOffset - 1;\n      if (endOffsetSubtitles <= 0) {\n        return;\n      }\n      data.endOffsetSubtitles = Math.max(0, endOffsetSubtitles);\n      this.tracksBuffered.forEach((buffered) => {\n        for (let i = 0; i < buffered.length; ) {\n          if (buffered[i].end <= endOffsetSubtitles) {\n            buffered.shift();\n            continue;\n          } else if (buffered[i].start < endOffsetSubtitles) {\n            buffered[i].start = endOffsetSubtitles;\n          } else {\n            break;\n          }\n          i++;\n        }\n      });\n      this.fragmentTracker.removeFragmentsInRange(\n        startOffset,\n        endOffsetSubtitles,\n        PlaylistLevelType.SUBTITLE,\n      );\n    }\n  }\n\n  // If something goes wrong, proceed to next frag, if we were processing one.\n  protected onError(event: Events.ERROR, data: ErrorData) {\n    const frag = data.frag;\n\n    if (frag?.type === PlaylistLevelType.SUBTITLE) {\n      if (data.details === ErrorDetails.FRAG_GAP) {\n        this.fragmentTracker.fragBuffered(frag as MediaFragment, true);\n      }\n      if (this.fragCurrent) {\n        this.fragCurrent.abortRequests();\n      }\n      if (this.state !== State.STOPPED) {\n        this.state = State.IDLE;\n      }\n    }\n  }\n\n  // Got all new subtitle levels.\n  private onSubtitleTracksUpdated(\n    event: Events.SUBTITLE_TRACKS_UPDATED,\n    { subtitleTracks }: SubtitleTracksUpdatedData,\n  ) {\n    if (this.levels && subtitleOptionsIdentical(this.levels, subtitleTracks)) {\n      this.levels = subtitleTracks.map(\n        (mediaPlaylist) => new Level(mediaPlaylist),\n      );\n      return;\n    }\n    this.tracksBuffered = [];\n    this.levels = subtitleTracks.map((mediaPlaylist) => {\n      const level = new Level(mediaPlaylist);\n      this.tracksBuffered[level.id] = [];\n      return level;\n    });\n    this.fragmentTracker.removeFragmentsInRange(\n      0,\n      Number.POSITIVE_INFINITY,\n      PlaylistLevelType.SUBTITLE,\n    );\n    this.fragPrevious = null;\n    this.mediaBuffer = null;\n  }\n\n  private onSubtitleTrackSwitch(\n    event: Events.SUBTITLE_TRACK_SWITCH,\n    data: TrackSwitchedData,\n  ) {\n    this.currentTrackId = data.id;\n\n    if (!this.levels?.length || this.currentTrackId === -1) {\n      this.clearInterval();\n      return;\n    }\n\n    // Check if track has the necessary details to load fragments\n    const currentTrack = this.levels[this.currentTrackId];\n    if (currentTrack?.details) {\n      this.mediaBuffer = this.mediaBufferTimeRanges;\n    } else {\n      this.mediaBuffer = null;\n    }\n    if (currentTrack && this.state !== State.STOPPED) {\n      this.setInterval(TICK_INTERVAL);\n    }\n  }\n\n  // Got a new set of subtitle fragments.\n  private onSubtitleTrackLoaded(\n    event: Events.SUBTITLE_TRACK_LOADED,\n    data: TrackLoadedData,\n  ) {\n    const { currentTrackId, levels } = this;\n    const { details: newDetails, id: trackId } = data;\n    if (!levels) {\n      this.warn(`Subtitle tracks were reset while loading level ${trackId}`);\n      return;\n    }\n    const track: Level = levels[trackId];\n    if (trackId >= levels.length || !track) {\n      return;\n    }\n    this.log(\n      `Subtitle track ${trackId} loaded [${newDetails.startSN},${\n        newDetails.endSN\n      }]${\n        newDetails.lastPartSn\n          ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`\n          : ''\n      },duration:${newDetails.totalduration}`,\n    );\n    this.mediaBuffer = this.mediaBufferTimeRanges;\n    let sliding = 0;\n    if (newDetails.live || track.details?.live) {\n      if (newDetails.deltaUpdateFailed) {\n        return;\n      }\n      const mainDetails = this.mainDetails;\n      if (!mainDetails) {\n        this.startFragRequested = false;\n        return;\n      }\n      const mainSlidingStartFragment = mainDetails.fragments[0];\n      if (!track.details) {\n        if (newDetails.hasProgramDateTime && mainDetails.hasProgramDateTime) {\n          alignMediaPlaylistByPDT(newDetails, mainDetails);\n          sliding = newDetails.fragmentStart;\n        } else if (mainSlidingStartFragment) {\n          // line up live playlist with main so that fragments in range are loaded\n          sliding = mainSlidingStartFragment.start;\n          addSliding(newDetails, sliding);\n        }\n      } else {\n        sliding = this.alignPlaylists(\n          newDetails,\n          track.details,\n          this.levelLastLoaded?.details,\n        );\n        if (sliding === 0 && mainSlidingStartFragment) {\n          // realign with main when there is no overlap with last refresh\n          sliding = mainSlidingStartFragment.start;\n          addSliding(newDetails, sliding);\n        }\n      }\n      // compute start position if we are aligned with the main playlist\n      if (mainDetails && !this.startFragRequested) {\n        this.setStartPosition(mainDetails, sliding);\n      }\n    }\n    track.details = newDetails;\n    this.levelLastLoaded = track;\n\n    if (trackId !== currentTrackId) {\n      return;\n    }\n\n    this.hls.trigger(Events.SUBTITLE_TRACK_UPDATED, {\n      details: newDetails,\n      id: trackId,\n      groupId: data.groupId,\n    });\n\n    // trigger handler right now\n    this.tick();\n\n    // If playlist is misaligned because of bad PDT or drift, delete details to resync with main on reload\n    if (\n      newDetails.live &&\n      !this.fragCurrent &&\n      this.media &&\n      this.state === State.IDLE\n    ) {\n      const foundFrag = findFragmentByPTS(\n        null,\n        newDetails.fragments,\n        this.media.currentTime,\n        0,\n      );\n      if (!foundFrag) {\n        this.warn('Subtitle playlist not aligned with playback');\n        track.details = undefined;\n      }\n    }\n  }\n\n  _handleFragmentLoadComplete(fragLoadedData: FragLoadedData) {\n    const { frag, payload } = fragLoadedData;\n    const decryptData = frag.decryptdata;\n    const hls = this.hls;\n\n    if (this.fragContextChanged(frag)) {\n      return;\n    }\n    // check to see if the payload needs to be decrypted\n    if (\n      payload &&\n      payload.byteLength > 0 &&\n      decryptData?.key &&\n      decryptData.iv &&\n      isFullSegmentEncryption(decryptData.method)\n    ) {\n      const startTime = performance.now();\n      // decrypt the subtitles\n      this.decrypter\n        .decrypt(\n          new Uint8Array(payload),\n          decryptData.key.buffer,\n          decryptData.iv.buffer,\n          getAesModeFromFullSegmentMethod(decryptData.method),\n        )\n        .catch((err) => {\n          hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.FRAG_DECRYPT_ERROR,\n            fatal: false,\n            error: err,\n            reason: err.message,\n            frag,\n          });\n          throw err;\n        })\n        .then((decryptedData) => {\n          const endTime = performance.now();\n          hls.trigger(Events.FRAG_DECRYPTED, {\n            frag,\n            payload: decryptedData,\n            stats: {\n              tstart: startTime,\n              tdecrypt: endTime,\n            },\n          });\n        })\n        .catch((err) => {\n          this.warn(`${err.name}: ${err.message}`);\n          this.state = State.IDLE;\n        });\n    }\n  }\n\n  doTick() {\n    if (!this.media) {\n      this.state = State.IDLE;\n      return;\n    }\n\n    if (this.state === State.IDLE) {\n      const { currentTrackId, levels } = this;\n      const track = levels?.[currentTrackId];\n      if (!track || !levels.length || !track.details) {\n        return;\n      }\n      if (this.waitForLive(track)) {\n        return;\n      }\n      const { config } = this;\n      const currentTime = this.getLoadPosition();\n      const bufferedInfo = BufferHelper.bufferedInfo(\n        this.tracksBuffered[this.currentTrackId] || [],\n        currentTime,\n        config.maxBufferHole,\n      );\n      const { end: targetBufferTime, len: bufferLen } = bufferedInfo;\n      const trackDetails = track.details as LevelDetails;\n      const maxBufLen =\n        this.hls.maxBufferLength + trackDetails.levelTargetDuration;\n\n      if (bufferLen > maxBufLen) {\n        return;\n      }\n      const fragments = trackDetails.fragments;\n      const fragLen = fragments.length;\n      const end = trackDetails.edge;\n\n      let foundFrag: MediaFragment | null = null;\n      const fragPrevious = this.fragPrevious;\n      if (targetBufferTime < end) {\n        const tolerance = config.maxFragLookUpTolerance;\n        const lookupTolerance =\n          targetBufferTime > end - tolerance ? 0 : tolerance;\n        foundFrag = findFragmentByPTS(\n          fragPrevious,\n          fragments,\n          Math.max(fragments[0].start, targetBufferTime),\n          lookupTolerance,\n        );\n        if (\n          !foundFrag &&\n          fragPrevious &&\n          fragPrevious.start < fragments[0].start\n        ) {\n          foundFrag = fragments[0];\n        }\n      } else {\n        foundFrag = fragments[fragLen - 1];\n      }\n      foundFrag = this.filterReplacedPrimary(foundFrag, track.details);\n      if (!foundFrag) {\n        return;\n      }\n      // Load earlier fragment in same discontinuity to make up for misaligned playlists and cues that extend beyond end of segment\n      const curSNIdx = foundFrag.sn - trackDetails.startSN;\n      const prevFrag = fragments[curSNIdx - 1];\n      if (\n        prevFrag &&\n        prevFrag.cc === foundFrag.cc &&\n        this.fragmentTracker.getState(prevFrag) === FragmentState.NOT_LOADED\n      ) {\n        foundFrag = prevFrag;\n      }\n      if (\n        this.fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED\n      ) {\n        // only load if fragment is not loaded\n        const fragToLoad = this.mapToInitFragWhenRequired(foundFrag);\n        if (fragToLoad) {\n          this.loadFragment(fragToLoad, track, targetBufferTime);\n        }\n      }\n    }\n  }\n\n  protected loadFragment(\n    frag: Fragment,\n    level: Level,\n    targetBufferTime: number,\n  ) {\n    if (!isMediaFragment(frag)) {\n      this._loadInitSegment(frag, level);\n    } else {\n      super.loadFragment(frag, level, targetBufferTime);\n    }\n  }\n\n  get mediaBufferTimeRanges(): Bufferable {\n    return new BufferableInstance(\n      this.tracksBuffered[this.currentTrackId] || [],\n    );\n  }\n}\n\nclass BufferableInstance implements Bufferable {\n  public readonly buffered: TimeRanges;\n\n  constructor(timeranges: TimeRange[]) {\n    const getRange = (\n      name: 'start' | 'end',\n      index: number,\n      length: number,\n    ): number => {\n      index = index >>> 0;\n      if (index > length - 1) {\n        throw new DOMException(\n          `Failed to execute '${name}' on 'TimeRanges': The index provided (${index}) is greater than the maximum bound (${length})`,\n        );\n      }\n      return timeranges[index][name];\n    };\n    this.buffered = {\n      get length() {\n        return timeranges.length;\n      },\n      end(index: number): number {\n        return getRange('end', index, timeranges.length);\n      },\n      start(index: number): number {\n        return getRange('start', index, timeranges.length);\n      },\n    };\n  }\n}\n","import { logger } from './logger';\n\nexport function sendAddTrackEvent(track: TextTrack, videoEl: HTMLMediaElement) {\n  let event: Event;\n  try {\n    event = new Event('addtrack');\n  } catch (err) {\n    // for IE11\n    event = document.createEvent('Event');\n    event.initEvent('addtrack', false, false);\n  }\n  (event as any).track = track;\n  videoEl.dispatchEvent(event);\n}\n\nexport function addCueToTrack(track: TextTrack, cue: VTTCue) {\n  // Sometimes there are cue overlaps on segmented vtts so the same\n  // cue can appear more than once in different vtt files.\n  // This avoid showing duplicated cues with same timecode and text.\n  const mode = track.mode;\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n  if (track.cues && !track.cues.getCueById(cue.id)) {\n    try {\n      track.addCue(cue);\n      if (!track.cues.getCueById(cue.id)) {\n        throw new Error(`addCue is failed for: ${cue}`);\n      }\n    } catch (err) {\n      logger.debug(`[texttrack-utils]: ${err}`);\n      try {\n        const textTrackCue = new (self.TextTrackCue as any)(\n          cue.startTime,\n          cue.endTime,\n          cue.text,\n        );\n        textTrackCue.id = cue.id;\n        track.addCue(textTrackCue);\n      } catch (err2) {\n        logger.debug(\n          `[texttrack-utils]: Legacy TextTrackCue fallback failed: ${err2}`,\n        );\n      }\n    }\n  }\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n}\n\nexport function clearCurrentCues(\n  track: TextTrack,\n  enterHandler?: (e?: Event) => void,\n) {\n  // When track.mode is disabled, track.cues will be null.\n  // To guarantee the removal of cues, we need to temporarily\n  // change the mode to hidden\n  const mode = track.mode;\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n  if (track.cues) {\n    for (let i = track.cues.length; i--; ) {\n      if (enterHandler) {\n        track.cues[i].removeEventListener('enter', enterHandler);\n      }\n      track.removeCue(track.cues[i]);\n    }\n  }\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n}\n\nexport function removeCuesInRange(\n  track: TextTrack,\n  start: number,\n  end: number,\n  predicate?: (cue: TextTrackCue) => boolean,\n) {\n  const mode = track.mode;\n  if (mode === 'disabled') {\n    track.mode = 'hidden';\n  }\n\n  if (track.cues && track.cues.length > 0) {\n    const cues = getCuesInRange(track.cues, start, end);\n    for (let i = 0; i < cues.length; i++) {\n      if (!predicate || predicate(cues[i])) {\n        track.removeCue(cues[i]);\n      }\n    }\n  }\n  if (mode === 'disabled') {\n    track.mode = mode;\n  }\n}\n\n// Find first cue starting at or after given time.\n// Modified version of binary search O(log(n)).\nfunction getFirstCueIndexFromTime(\n  cues: TextTrackCueList | TextTrackCue[],\n  time: number,\n): number {\n  // If first cue starts at or after time, start there\n  if (time <= cues[0].startTime) {\n    return 0;\n  }\n  // If the last cue ends before time there is no overlap\n  const len = cues.length - 1;\n  if (time > cues[len].endTime) {\n    return -1;\n  }\n\n  let left = 0;\n  let right = len;\n  let mid;\n  while (left <= right) {\n    mid = Math.floor((right + left) / 2);\n\n    if (time < cues[mid].startTime) {\n      right = mid - 1;\n    } else if (time > cues[mid].startTime && left < len) {\n      left = mid + 1;\n    } else {\n      // If it's not lower or higher, it must be equal.\n      return mid;\n    }\n  }\n  // At this point, left and right have swapped.\n  // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.\n  return cues[left].startTime - time < time - cues[right].startTime\n    ? left\n    : right;\n}\n\nexport function getCuesInRange(\n  cues: TextTrackCueList | TextTrackCue[],\n  start: number,\n  end: number,\n): TextTrackCue[] {\n  const cuesFound: TextTrackCue[] = [];\n  const firstCueInRange = getFirstCueIndexFromTime(cues, start);\n  if (firstCueInRange > -1) {\n    for (let i = firstCueInRange, len = cues.length; i < len; i++) {\n      const cue = cues[i];\n      if (cue.startTime >= start && cue.endTime <= end) {\n        cuesFound.push(cue);\n      } else if (cue.startTime > end) {\n        return cuesFound;\n      }\n    }\n  }\n  return cuesFound;\n}\n\nexport function filterSubtitleTracks(\n  textTrackList: TextTrackList,\n): TextTrack[] {\n  const tracks: TextTrack[] = [];\n  for (let i = 0; i < textTrackList.length; i++) {\n    const track = textTrackList[i];\n    // Edge adds a track without a label; we don't want to use it\n    if (\n      (track.kind === 'subtitles' || track.kind === 'captions') &&\n      track.label\n    ) {\n      tracks.push(textTrackList[i]);\n    }\n  }\n  return tracks;\n}\n","import BasePlaylistController from './base-playlist-controller';\nimport { Events } from '../events';\nimport { PlaylistContextType } from '../types/loader';\nimport {\n  mediaAttributesIdentical,\n  subtitleTrackMatchesTextTrack,\n} from '../utils/media-option-attributes';\nimport { findMatchingOption, matchesOption } from '../utils/rendition-helper';\nimport {\n  clearCurrentCues,\n  filterSubtitleTracks,\n} from '../utils/texttrack-utils';\nimport type Hls from '../hls';\nimport type {\n  ErrorData,\n  LevelLoadingData,\n  LevelSwitchingData,\n  ManifestParsedData,\n  MediaAttachedData,\n  MediaDetachingData,\n  SubtitleTracksUpdatedData,\n  TrackLoadedData,\n} from '../types/events';\nimport type { HlsUrlParameters } from '../types/level';\nimport type {\n  MediaPlaylist,\n  SubtitleSelectionOption,\n} from '../types/media-playlist';\n\nclass SubtitleTrackController extends BasePlaylistController {\n  private media: HTMLMediaElement | null = null;\n  private tracks: MediaPlaylist[] = [];\n  private groupIds: (string | undefined)[] | null = null;\n  private tracksInGroup: MediaPlaylist[] = [];\n  private trackId: number = -1;\n  private currentTrack: MediaPlaylist | null = null;\n  private selectDefaultTrack: boolean = true;\n  private queuedDefaultTrack: number = -1;\n  private useTextTrackPolling: boolean = false;\n  private subtitlePollingInterval: number = -1;\n  private _subtitleDisplay: boolean = true;\n\n  private asyncPollTrackChange = () => this.pollTrackChange(0);\n\n  constructor(hls: Hls) {\n    super(hls, 'subtitle-track-controller');\n    this.registerListeners();\n  }\n\n  public destroy() {\n    this.unregisterListeners();\n    this.tracks.length = 0;\n    this.tracksInGroup.length = 0;\n    this.currentTrack = null;\n    // @ts-ignore\n    this.onTextTracksChanged = this.asyncPollTrackChange = null;\n    super.destroy();\n  }\n\n  public get subtitleDisplay(): boolean {\n    return this._subtitleDisplay;\n  }\n\n  public set subtitleDisplay(value: boolean) {\n    this._subtitleDisplay = value;\n    if (this.trackId > -1) {\n      this.toggleTrackModes();\n    }\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.on(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(Events.LEVEL_SWITCHING, this.onLevelSwitching, this);\n    hls.off(Events.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  // Listen for subtitle track change, then extract the current track ID.\n  protected onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ): void {\n    this.media = data.media;\n    if (!this.media) {\n      return;\n    }\n\n    if (this.queuedDefaultTrack > -1) {\n      this.subtitleTrack = this.queuedDefaultTrack;\n      this.queuedDefaultTrack = -1;\n    }\n\n    this.useTextTrackPolling = !(\n      this.media.textTracks && 'onchange' in this.media.textTracks\n    );\n    if (this.useTextTrackPolling) {\n      this.pollTrackChange(500);\n    } else {\n      this.media.textTracks.addEventListener(\n        'change',\n        this.asyncPollTrackChange,\n      );\n    }\n  }\n\n  private pollTrackChange(timeout: number) {\n    self.clearInterval(this.subtitlePollingInterval);\n    this.subtitlePollingInterval = self.setInterval(\n      this.onTextTracksChanged,\n      timeout,\n    );\n  }\n\n  protected onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const media = this.media;\n    if (!media) {\n      return;\n    }\n\n    const transferringMedia = !!data.transferMedia;\n    self.clearInterval(this.subtitlePollingInterval);\n    if (!this.useTextTrackPolling) {\n      media.textTracks.removeEventListener('change', this.asyncPollTrackChange);\n    }\n\n    if (this.trackId > -1) {\n      this.queuedDefaultTrack = this.trackId;\n    }\n\n    // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.\n    this.subtitleTrack = -1;\n    this.media = null;\n    if (transferringMedia) {\n      return;\n    }\n\n    const textTracks = filterSubtitleTracks(media.textTracks);\n    // Clear loaded cues on media detachment from tracks\n    textTracks.forEach((track) => {\n      clearCurrentCues(track);\n    });\n  }\n\n  protected onManifestLoading(): void {\n    this.tracks = [];\n    this.groupIds = null;\n    this.tracksInGroup = [];\n    this.trackId = -1;\n    this.currentTrack = null;\n    this.selectDefaultTrack = true;\n  }\n\n  // Fired whenever a new manifest is loaded.\n  protected onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ): void {\n    this.tracks = data.subtitleTracks;\n  }\n\n  protected onSubtitleTrackLoaded(\n    event: Events.SUBTITLE_TRACK_LOADED,\n    data: TrackLoadedData,\n  ): void {\n    const { id, groupId, details } = data;\n    const trackInActiveGroup = this.tracksInGroup[id];\n\n    if (!trackInActiveGroup || trackInActiveGroup.groupId !== groupId) {\n      this.warn(\n        `Subtitle track with id:${id} and group:${groupId} not found in active group ${trackInActiveGroup?.groupId}`,\n      );\n      return;\n    }\n\n    const curDetails = trackInActiveGroup.details;\n    trackInActiveGroup.details = data.details;\n    this.log(\n      `Subtitle track ${id} \"${trackInActiveGroup.name}\" lang:${trackInActiveGroup.lang} group:${groupId} loaded [${details.startSN}-${details.endSN}]`,\n    );\n\n    if (id === this.trackId) {\n      this.playlistLoaded(id, data, curDetails);\n    }\n  }\n\n  protected onLevelLoading(\n    event: Events.LEVEL_LOADING,\n    data: LevelLoadingData,\n  ): void {\n    this.switchLevel(data.level);\n  }\n\n  protected onLevelSwitching(\n    event: Events.LEVEL_SWITCHING,\n    data: LevelSwitchingData,\n  ): void {\n    this.switchLevel(data.level);\n  }\n\n  private switchLevel(levelIndex: number) {\n    const levelInfo = this.hls.levels[levelIndex];\n    if (!levelInfo) {\n      return;\n    }\n    const subtitleGroups = levelInfo.subtitleGroups || null;\n    const currentGroups = this.groupIds;\n    let currentTrack = this.currentTrack;\n    if (\n      !subtitleGroups ||\n      currentGroups?.length !== subtitleGroups?.length ||\n      subtitleGroups?.some((groupId) => currentGroups?.indexOf(groupId) === -1)\n    ) {\n      this.groupIds = subtitleGroups;\n      this.trackId = -1;\n      this.currentTrack = null;\n\n      const subtitleTracks = this.tracks.filter(\n        (track): boolean =>\n          !subtitleGroups || subtitleGroups.indexOf(track.groupId) !== -1,\n      );\n      if (subtitleTracks.length) {\n        // Disable selectDefaultTrack if there are no default tracks\n        if (\n          this.selectDefaultTrack &&\n          !subtitleTracks.some((track) => track.default)\n        ) {\n          this.selectDefaultTrack = false;\n        }\n        // track.id should match hls.audioTracks index\n        subtitleTracks.forEach((track, i) => {\n          track.id = i;\n        });\n      } else if (!currentTrack && !this.tracksInGroup.length) {\n        // Do not dispatch SUBTITLE_TRACKS_UPDATED when there were and are no tracks\n        return;\n      }\n      this.tracksInGroup = subtitleTracks;\n\n      // Find preferred track\n      const subtitlePreference = this.hls.config.subtitlePreference;\n      if (!currentTrack && subtitlePreference) {\n        this.selectDefaultTrack = false;\n        const groupIndex = findMatchingOption(\n          subtitlePreference,\n          subtitleTracks,\n        );\n        if (groupIndex > -1) {\n          currentTrack = subtitleTracks[groupIndex];\n        } else {\n          const allIndex = findMatchingOption(subtitlePreference, this.tracks);\n          currentTrack = this.tracks[allIndex];\n        }\n      }\n\n      // Select initial track\n      let trackId = this.findTrackId(currentTrack);\n      if (trackId === -1 && currentTrack) {\n        trackId = this.findTrackId(null);\n      }\n\n      // Dispatch events and load track if needed\n      const subtitleTracksUpdated: SubtitleTracksUpdatedData = {\n        subtitleTracks,\n      };\n      this.log(\n        `Updating subtitle tracks, ${\n          subtitleTracks.length\n        } track(s) found in \"${subtitleGroups?.join(',')}\" group-id`,\n      );\n      this.hls.trigger(Events.SUBTITLE_TRACKS_UPDATED, subtitleTracksUpdated);\n\n      if (trackId !== -1 && this.trackId === -1) {\n        this.setSubtitleTrack(trackId);\n      }\n    }\n  }\n\n  private findTrackId(currentTrack: MediaPlaylist | null): number {\n    const tracks = this.tracksInGroup;\n    const selectDefault = this.selectDefaultTrack;\n    for (let i = 0; i < tracks.length; i++) {\n      const track = tracks[i];\n      if (\n        (selectDefault && !track.default) ||\n        (!selectDefault && !currentTrack)\n      ) {\n        continue;\n      }\n      if (!currentTrack || matchesOption(track, currentTrack)) {\n        return i;\n      }\n    }\n    if (currentTrack) {\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        if (\n          mediaAttributesIdentical(currentTrack.attrs, track.attrs, [\n            'LANGUAGE',\n            'ASSOC-LANGUAGE',\n            'CHARACTERISTICS',\n          ])\n        ) {\n          return i;\n        }\n      }\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        if (\n          mediaAttributesIdentical(currentTrack.attrs, track.attrs, [\n            'LANGUAGE',\n          ])\n        ) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  private findTrackForTextTrack(textTrack: TextTrack | null): number {\n    if (textTrack) {\n      const tracks = this.tracksInGroup;\n      for (let i = 0; i < tracks.length; i++) {\n        const track = tracks[i];\n        if (subtitleTrackMatchesTextTrack(track, textTrack)) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData): void {\n    if (data.fatal || !data.context) {\n      return;\n    }\n\n    if (\n      data.context.type === PlaylistContextType.SUBTITLE_TRACK &&\n      data.context.id === this.trackId &&\n      (!this.groupIds || this.groupIds.indexOf(data.context.groupId) !== -1)\n    ) {\n      this.checkRetry(data);\n    }\n  }\n\n  get allSubtitleTracks(): MediaPlaylist[] {\n    return this.tracks;\n  }\n\n  /** get alternate subtitle tracks list from playlist **/\n  get subtitleTracks(): MediaPlaylist[] {\n    return this.tracksInGroup;\n  }\n\n  /** get/set index of the selected subtitle track (based on index in subtitle track lists) **/\n  get subtitleTrack(): number {\n    return this.trackId;\n  }\n\n  set subtitleTrack(newId: number) {\n    this.selectDefaultTrack = false;\n    this.setSubtitleTrack(newId);\n  }\n\n  public setSubtitleOption(\n    subtitleOption: MediaPlaylist | SubtitleSelectionOption | undefined,\n  ): MediaPlaylist | null {\n    this.hls.config.subtitlePreference = subtitleOption;\n    if (subtitleOption) {\n      if (subtitleOption.id === -1) {\n        this.setSubtitleTrack(-1);\n        return null;\n      }\n      const allSubtitleTracks = this.allSubtitleTracks;\n      this.selectDefaultTrack = false;\n      if (allSubtitleTracks.length) {\n        // First see if current option matches (no switch op)\n        const currentTrack = this.currentTrack;\n        if (currentTrack && matchesOption(subtitleOption, currentTrack)) {\n          return currentTrack;\n        }\n        // Find option in current group\n        const groupIndex = findMatchingOption(\n          subtitleOption,\n          this.tracksInGroup,\n        );\n        if (groupIndex > -1) {\n          const track = this.tracksInGroup[groupIndex];\n          this.setSubtitleTrack(groupIndex);\n          return track;\n        } else if (currentTrack) {\n          // If this is not the initial selection return null\n          // option should have matched one in active group\n          return null;\n        } else {\n          // Find the option in all tracks for initial selection\n          const allIndex = findMatchingOption(\n            subtitleOption,\n            allSubtitleTracks,\n          );\n          if (allIndex > -1) {\n            return allSubtitleTracks[allIndex];\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters): void {\n    super.loadPlaylist();\n    if (this.shouldLoadPlaylist(this.currentTrack)) {\n      this.scheduleLoading(this.currentTrack, hlsUrlParameters);\n    }\n  }\n\n  protected loadingPlaylist(\n    currentTrack: MediaPlaylist,\n    hlsUrlParameters: HlsUrlParameters | undefined,\n  ) {\n    super.loadingPlaylist(currentTrack, hlsUrlParameters);\n    const id = currentTrack.id;\n    const groupId = currentTrack.groupId as string;\n    const url = this.getUrlWithDirectives(currentTrack.url, hlsUrlParameters);\n    const details = currentTrack.details;\n    const age = details?.age;\n    this.log(\n      `Loading subtitle ${id} \"${currentTrack.name}\" lang:${currentTrack.lang} group:${groupId}${\n        hlsUrlParameters?.msn !== undefined\n          ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part\n          : ''\n      }${age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || '' : '') : ''} ${url}`,\n    );\n    this.hls.trigger(Events.SUBTITLE_TRACK_LOADING, {\n      url,\n      id,\n      groupId,\n      deliveryDirectives: hlsUrlParameters || null,\n      track: currentTrack,\n    });\n  }\n\n  /**\n   * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.\n   * This operates on the DOM textTracks.\n   * A value of -1 will disable all subtitle tracks.\n   */\n  private toggleTrackModes(): void {\n    const { media } = this;\n    if (!media) {\n      return;\n    }\n\n    const textTracks = filterSubtitleTracks(media.textTracks);\n    const currentTrack = this.currentTrack;\n    let nextTrack;\n    if (currentTrack) {\n      nextTrack = textTracks.filter((textTrack) =>\n        subtitleTrackMatchesTextTrack(currentTrack, textTrack),\n      )[0];\n      if (!nextTrack) {\n        this.warn(\n          `Unable to find subtitle TextTrack with name \"${currentTrack.name}\" and language \"${currentTrack.lang}\"`,\n        );\n      }\n    }\n    [].slice.call(textTracks).forEach((track) => {\n      if (track.mode !== 'disabled' && track !== nextTrack) {\n        track.mode = 'disabled';\n      }\n    });\n    if (nextTrack) {\n      const mode = this.subtitleDisplay ? 'showing' : 'hidden';\n      if (nextTrack.mode !== mode) {\n        nextTrack.mode = mode;\n      }\n    }\n  }\n\n  /**\n   * This method is responsible for validating the subtitle index and periodically reloading if live.\n   * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.\n   */\n  private setSubtitleTrack(newId: number): void {\n    const tracks = this.tracksInGroup;\n\n    // setting this.subtitleTrack will trigger internal logic\n    // if media has not been attached yet, it will fail\n    // we keep a reference to the default track id\n    // and we'll set subtitleTrack when onMediaAttached is triggered\n    if (!this.media) {\n      this.queuedDefaultTrack = newId;\n      return;\n    }\n\n    // exit if track id as already set or invalid\n    if (newId < -1 || newId >= tracks.length || !Number.isFinite(newId)) {\n      this.warn(`Invalid subtitle track id: ${newId}`);\n      return;\n    }\n\n    this.selectDefaultTrack = false;\n    const lastTrack = this.currentTrack;\n    const track: MediaPlaylist | null = tracks[newId] || null;\n    this.trackId = newId;\n    this.currentTrack = track;\n    this.toggleTrackModes();\n    if (!track) {\n      // switch to -1\n      this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH, { id: newId });\n      return;\n    }\n    const trackLoaded = !!track.details && !track.details.live;\n    if (newId === this.trackId && track === lastTrack && trackLoaded) {\n      return;\n    }\n    this.log(\n      `Switching to subtitle-track ${newId}` +\n        (track\n          ? ` \"${track.name}\" lang:${track.lang} group:${track.groupId}`\n          : ''),\n    );\n    const { id, groupId = '', name, type, url } = track;\n    this.hls.trigger(Events.SUBTITLE_TRACK_SWITCH, {\n      id,\n      groupId,\n      name,\n      type,\n      url,\n    });\n    const hlsUrlParameters = this.switchParams(\n      track.url,\n      lastTrack?.details,\n      track.details,\n    );\n    this.loadPlaylist(hlsUrlParameters);\n  }\n\n  private onTextTracksChanged = () => {\n    if (!this.useTextTrackPolling) {\n      self.clearInterval(this.subtitlePollingInterval);\n    }\n    // Media is undefined when switching streams via loadSource()\n    if (!this.media || !this.hls.config.renderTextTracksNatively) {\n      return;\n    }\n\n    let textTrack: TextTrack | null = null;\n    const tracks = filterSubtitleTracks(this.media.textTracks);\n    for (let i = 0; i < tracks.length; i++) {\n      if (tracks[i].mode === 'hidden') {\n        // Do not break in case there is a following track with showing.\n        textTrack = tracks[i];\n      } else if (tracks[i].mode === 'showing') {\n        textTrack = tracks[i];\n        break;\n      }\n    }\n\n    // Find internal track index for TextTrack\n    const trackId = this.findTrackForTextTrack(textTrack);\n    if (this.subtitleTrack !== trackId) {\n      this.setSubtitleTrack(trackId);\n    }\n  };\n}\n\nexport default SubtitleTrackController;\n","import { stringify } from './safe-json-stringify';\nimport { logger } from '../utils/logger';\nimport type OutputFilter from './output-filter';\n\n/**\n *\n * This code was ported from the dash.js project at:\n *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js\n *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2\n *\n * The original copyright appears below:\n *\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2015-2016, DASH Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  1. Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  2. Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes\n */\n\nconst specialCea608CharsCodes = {\n  0x2a: 0xe1, // lowercase a, acute accent\n  0x5c: 0xe9, // lowercase e, acute accent\n  0x5e: 0xed, // lowercase i, acute accent\n  0x5f: 0xf3, // lowercase o, acute accent\n  0x60: 0xfa, // lowercase u, acute accent\n  0x7b: 0xe7, // lowercase c with cedilla\n  0x7c: 0xf7, // division symbol\n  0x7d: 0xd1, // uppercase N tilde\n  0x7e: 0xf1, // lowercase n tilde\n  0x7f: 0x2588, // Full block\n  // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F\n  // THIS MEANS THAT \\x50 MUST BE ADDED TO THE VALUES\n  0x80: 0xae, // Registered symbol (R)\n  0x81: 0xb0, // degree sign\n  0x82: 0xbd, // 1/2 symbol\n  0x83: 0xbf, // Inverted (open) question mark\n  0x84: 0x2122, // Trademark symbol (TM)\n  0x85: 0xa2, // Cents symbol\n  0x86: 0xa3, // Pounds sterling\n  0x87: 0x266a, // Music 8'th note\n  0x88: 0xe0, // lowercase a, grave accent\n  0x89: 0x20, // transparent space (regular)\n  0x8a: 0xe8, // lowercase e, grave accent\n  0x8b: 0xe2, // lowercase a, circumflex accent\n  0x8c: 0xea, // lowercase e, circumflex accent\n  0x8d: 0xee, // lowercase i, circumflex accent\n  0x8e: 0xf4, // lowercase o, circumflex accent\n  0x8f: 0xfb, // lowercase u, circumflex accent\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F\n  0x90: 0xc1, // capital letter A with acute\n  0x91: 0xc9, // capital letter E with acute\n  0x92: 0xd3, // capital letter O with acute\n  0x93: 0xda, // capital letter U with acute\n  0x94: 0xdc, // capital letter U with diaresis\n  0x95: 0xfc, // lowercase letter U with diaeresis\n  0x96: 0x2018, // opening single quote\n  0x97: 0xa1, // inverted exclamation mark\n  0x98: 0x2a, // asterisk\n  0x99: 0x2019, // closing single quote\n  0x9a: 0x2501, // box drawings heavy horizontal\n  0x9b: 0xa9, // copyright sign\n  0x9c: 0x2120, // Service mark\n  0x9d: 0x2022, // (round) bullet\n  0x9e: 0x201c, // Left double quotation mark\n  0x9f: 0x201d, // Right double quotation mark\n  0xa0: 0xc0, // uppercase A, grave accent\n  0xa1: 0xc2, // uppercase A, circumflex\n  0xa2: 0xc7, // uppercase C with cedilla\n  0xa3: 0xc8, // uppercase E, grave accent\n  0xa4: 0xca, // uppercase E, circumflex\n  0xa5: 0xcb, // capital letter E with diaresis\n  0xa6: 0xeb, // lowercase letter e with diaresis\n  0xa7: 0xce, // uppercase I, circumflex\n  0xa8: 0xcf, // uppercase I, with diaresis\n  0xa9: 0xef, // lowercase i, with diaresis\n  0xaa: 0xd4, // uppercase O, circumflex\n  0xab: 0xd9, // uppercase U, grave accent\n  0xac: 0xf9, // lowercase u, grave accent\n  0xad: 0xdb, // uppercase U, circumflex\n  0xae: 0xab, // left-pointing double angle quotation mark\n  0xaf: 0xbb, // right-pointing double angle quotation mark\n  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS\n  // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F\n  0xb0: 0xc3, // Uppercase A, tilde\n  0xb1: 0xe3, // Lowercase a, tilde\n  0xb2: 0xcd, // Uppercase I, acute accent\n  0xb3: 0xcc, // Uppercase I, grave accent\n  0xb4: 0xec, // Lowercase i, grave accent\n  0xb5: 0xd2, // Uppercase O, grave accent\n  0xb6: 0xf2, // Lowercase o, grave accent\n  0xb7: 0xd5, // Uppercase O, tilde\n  0xb8: 0xf5, // Lowercase o, tilde\n  0xb9: 0x7b, // Open curly brace\n  0xba: 0x7d, // Closing curly brace\n  0xbb: 0x5c, // Backslash\n  0xbc: 0x5e, // Caret\n  0xbd: 0x5f, // Underscore\n  0xbe: 0x7c, // Pipe (vertical line)\n  0xbf: 0x223c, // Tilde operator\n  0xc0: 0xc4, // Uppercase A, umlaut\n  0xc1: 0xe4, // Lowercase A, umlaut\n  0xc2: 0xd6, // Uppercase O, umlaut\n  0xc3: 0xf6, // Lowercase o, umlaut\n  0xc4: 0xdf, // Esszett (sharp S)\n  0xc5: 0xa5, // Yen symbol\n  0xc6: 0xa4, // Generic currency sign\n  0xc7: 0x2503, // Box drawings heavy vertical\n  0xc8: 0xc5, // Uppercase A, ring\n  0xc9: 0xe5, // Lowercase A, ring\n  0xca: 0xd8, // Uppercase O, stroke\n  0xcb: 0xf8, // Lowercase o, strok\n  0xcc: 0x250f, // Box drawings heavy down and right\n  0xcd: 0x2513, // Box drawings heavy down and left\n  0xce: 0x2517, // Box drawings heavy up and right\n  0xcf: 0x251b, // Box drawings heavy up and left\n};\n\n/**\n * Utils\n */\nconst getCharForByte = (byte: number) =>\n  String.fromCharCode(specialCea608CharsCodes[byte] || byte);\n\nconst NR_ROWS = 15;\nconst NR_COLS = 100;\n// Tables to look up row from PAC data\nconst rowsLowCh1 = {\n  0x11: 1,\n  0x12: 3,\n  0x15: 5,\n  0x16: 7,\n  0x17: 9,\n  0x10: 11,\n  0x13: 12,\n  0x14: 14,\n};\nconst rowsHighCh1 = {\n  0x11: 2,\n  0x12: 4,\n  0x15: 6,\n  0x16: 8,\n  0x17: 10,\n  0x13: 13,\n  0x14: 15,\n};\nconst rowsLowCh2 = {\n  0x19: 1,\n  0x1a: 3,\n  0x1d: 5,\n  0x1e: 7,\n  0x1f: 9,\n  0x18: 11,\n  0x1b: 12,\n  0x1c: 14,\n};\nconst rowsHighCh2 = {\n  0x19: 2,\n  0x1a: 4,\n  0x1d: 6,\n  0x1e: 8,\n  0x1f: 10,\n  0x1b: 13,\n  0x1c: 15,\n};\n\nconst backgroundColors = [\n  'white',\n  'green',\n  'blue',\n  'cyan',\n  'red',\n  'yellow',\n  'magenta',\n  'black',\n  'transparent',\n];\n\nconst enum VerboseLevel {\n  ERROR = 0,\n  TEXT = 1,\n  WARNING = 2,\n  INFO = 2,\n  DEBUG = 3,\n  DATA = 3,\n}\n\nclass CaptionsLogger {\n  public time: number | null = null;\n  public verboseLevel: VerboseLevel = VerboseLevel.ERROR;\n\n  log(severity: VerboseLevel, msg: string | (() => string)): void {\n    if (this.verboseLevel >= severity) {\n      const m: string = typeof msg === 'function' ? msg() : msg;\n      logger.log(`${this.time} [${severity}] ${m}`);\n    }\n  }\n}\n\nconst numArrayToHexArray = function (numArray: number[]): string[] {\n  const hexArray: string[] = [];\n  for (let j = 0; j < numArray.length; j++) {\n    hexArray.push(numArray[j].toString(16));\n  }\n\n  return hexArray;\n};\n\ntype PenStyles = {\n  foreground: string | null;\n  underline: boolean;\n  italics: boolean;\n  background: string;\n  flash: boolean;\n};\n\nclass PenState {\n  public foreground: string = 'white';\n  public underline: boolean = false;\n  public italics: boolean = false;\n  public background: string = 'black';\n  public flash: boolean = false;\n\n  reset() {\n    this.foreground = 'white';\n    this.underline = false;\n    this.italics = false;\n    this.background = 'black';\n    this.flash = false;\n  }\n\n  setStyles(styles: Partial<PenStyles>) {\n    const attribs = [\n      'foreground',\n      'underline',\n      'italics',\n      'background',\n      'flash',\n    ];\n    for (let i = 0; i < attribs.length; i++) {\n      const style = attribs[i];\n      if (styles.hasOwnProperty(style)) {\n        this[style] = styles[style];\n      }\n    }\n  }\n\n  isDefault() {\n    return (\n      this.foreground === 'white' &&\n      !this.underline &&\n      !this.italics &&\n      this.background === 'black' &&\n      !this.flash\n    );\n  }\n\n  equals(other: PenState) {\n    return (\n      this.foreground === other.foreground &&\n      this.underline === other.underline &&\n      this.italics === other.italics &&\n      this.background === other.background &&\n      this.flash === other.flash\n    );\n  }\n\n  copy(newPenState: PenState) {\n    this.foreground = newPenState.foreground;\n    this.underline = newPenState.underline;\n    this.italics = newPenState.italics;\n    this.background = newPenState.background;\n    this.flash = newPenState.flash;\n  }\n\n  toString(): string {\n    return (\n      'color=' +\n      this.foreground +\n      ', underline=' +\n      this.underline +\n      ', italics=' +\n      this.italics +\n      ', background=' +\n      this.background +\n      ', flash=' +\n      this.flash\n    );\n  }\n}\n\n/**\n * Unicode character with styling and background.\n * @constructor\n */\nclass StyledUnicodeChar {\n  uchar: string = ' ';\n  penState: PenState = new PenState();\n\n  reset() {\n    this.uchar = ' ';\n    this.penState.reset();\n  }\n\n  setChar(uchar: string, newPenState: PenState) {\n    this.uchar = uchar;\n    this.penState.copy(newPenState);\n  }\n\n  setPenState(newPenState: PenState) {\n    this.penState.copy(newPenState);\n  }\n\n  equals(other: StyledUnicodeChar) {\n    return this.uchar === other.uchar && this.penState.equals(other.penState);\n  }\n\n  copy(newChar: StyledUnicodeChar) {\n    this.uchar = newChar.uchar;\n    this.penState.copy(newChar.penState);\n  }\n\n  isEmpty(): boolean {\n    return this.uchar === ' ' && this.penState.isDefault();\n  }\n}\n\n/**\n * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.\n * @constructor\n */\nexport class Row {\n  public chars: StyledUnicodeChar[] = [];\n  public pos: number = 0;\n  public currPenState: PenState = new PenState();\n  public cueStartTime: number | null = null;\n  private logger: CaptionsLogger;\n\n  constructor(logger: CaptionsLogger) {\n    for (let i = 0; i < NR_COLS; i++) {\n      this.chars.push(new StyledUnicodeChar());\n    }\n    this.logger = logger;\n  }\n\n  equals(other: Row) {\n    for (let i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].equals(other.chars[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  copy(other: Row) {\n    for (let i = 0; i < NR_COLS; i++) {\n      this.chars[i].copy(other.chars[i]);\n    }\n  }\n\n  isEmpty(): boolean {\n    let empty = true;\n    for (let i = 0; i < NR_COLS; i++) {\n      if (!this.chars[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n    return empty;\n  }\n\n  /**\n   *  Set the cursor to a valid column.\n   */\n  setCursor(absPos: number) {\n    if (this.pos !== absPos) {\n      this.pos = absPos;\n    }\n\n    if (this.pos < 0) {\n      this.logger.log(\n        VerboseLevel.DEBUG,\n        'Negative cursor position ' + this.pos,\n      );\n      this.pos = 0;\n    } else if (this.pos > NR_COLS) {\n      this.logger.log(\n        VerboseLevel.DEBUG,\n        'Too large cursor position ' + this.pos,\n      );\n      this.pos = NR_COLS;\n    }\n  }\n\n  /**\n   * Move the cursor relative to current position.\n   */\n  moveCursor(relPos: number) {\n    const newPos = this.pos + relPos;\n    if (relPos > 1) {\n      for (let i = this.pos + 1; i < newPos + 1; i++) {\n        this.chars[i].setPenState(this.currPenState);\n      }\n    }\n    this.setCursor(newPos);\n  }\n\n  /**\n   * Backspace, move one step back and clear character.\n   */\n  backSpace() {\n    this.moveCursor(-1);\n    this.chars[this.pos].setChar(' ', this.currPenState);\n  }\n\n  insertChar(byte: number) {\n    if (byte >= 0x90) {\n      // Extended char\n      this.backSpace();\n    }\n    const char = getCharForByte(byte);\n    if (this.pos >= NR_COLS) {\n      this.logger.log(\n        VerboseLevel.ERROR,\n        () =>\n          'Cannot insert ' +\n          byte.toString(16) +\n          ' (' +\n          char +\n          ') at position ' +\n          this.pos +\n          '. Skipping it!',\n      );\n      return;\n    }\n    this.chars[this.pos].setChar(char, this.currPenState);\n    this.moveCursor(1);\n  }\n\n  clearFromPos(startPos: number) {\n    let i: number;\n    for (i = startPos; i < NR_COLS; i++) {\n      this.chars[i].reset();\n    }\n  }\n\n  clear() {\n    this.clearFromPos(0);\n    this.pos = 0;\n    this.currPenState.reset();\n  }\n\n  clearToEndOfRow() {\n    this.clearFromPos(this.pos);\n  }\n\n  getTextString() {\n    const chars: string[] = [];\n    let empty = true;\n    for (let i = 0; i < NR_COLS; i++) {\n      const char = this.chars[i].uchar;\n      if (char !== ' ') {\n        empty = false;\n      }\n\n      chars.push(char);\n    }\n    if (empty) {\n      return '';\n    } else {\n      return chars.join('');\n    }\n  }\n\n  setPenStyles(styles: Partial<PenStyles>) {\n    this.currPenState.setStyles(styles);\n    const currChar = this.chars[this.pos];\n    currChar.setPenState(this.currPenState);\n  }\n}\n\n/**\n * Keep a CEA-608 screen of 32x15 styled characters\n * @constructor\n */\nexport class CaptionScreen {\n  rows: Row[] = [];\n  currRow: number = NR_ROWS - 1;\n  nrRollUpRows: number | null = null;\n  lastOutputScreen: CaptionScreen | null = null;\n  logger: CaptionsLogger;\n\n  constructor(logger: CaptionsLogger) {\n    for (let i = 0; i < NR_ROWS; i++) {\n      this.rows.push(new Row(logger));\n    }\n    this.logger = logger;\n  }\n\n  reset() {\n    for (let i = 0; i < NR_ROWS; i++) {\n      this.rows[i].clear();\n    }\n    this.currRow = NR_ROWS - 1;\n  }\n\n  equals(other: CaptionScreen): boolean {\n    let equal = true;\n    for (let i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].equals(other.rows[i])) {\n        equal = false;\n        break;\n      }\n    }\n    return equal;\n  }\n\n  copy(other: CaptionScreen) {\n    for (let i = 0; i < NR_ROWS; i++) {\n      this.rows[i].copy(other.rows[i]);\n    }\n  }\n\n  isEmpty(): boolean {\n    let empty = true;\n    for (let i = 0; i < NR_ROWS; i++) {\n      if (!this.rows[i].isEmpty()) {\n        empty = false;\n        break;\n      }\n    }\n    return empty;\n  }\n\n  backSpace() {\n    const row = this.rows[this.currRow];\n    row.backSpace();\n  }\n\n  clearToEndOfRow() {\n    const row = this.rows[this.currRow];\n    row.clearToEndOfRow();\n  }\n\n  /**\n   * Insert a character (without styling) in the current row.\n   */\n  insertChar(char: number) {\n    const row = this.rows[this.currRow];\n    row.insertChar(char);\n  }\n\n  setPen(styles: Partial<PenStyles>) {\n    const row = this.rows[this.currRow];\n    row.setPenStyles(styles);\n  }\n\n  moveCursor(relPos: number) {\n    const row = this.rows[this.currRow];\n    row.moveCursor(relPos);\n  }\n\n  setCursor(absPos: number) {\n    this.logger.log(VerboseLevel.INFO, 'setCursor: ' + absPos);\n    const row = this.rows[this.currRow];\n    row.setCursor(absPos);\n  }\n\n  setPAC(pacData: PACData) {\n    this.logger.log(VerboseLevel.INFO, () => 'pacData = ' + stringify(pacData));\n    let newRow = pacData.row - 1;\n    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {\n      newRow = this.nrRollUpRows - 1;\n    }\n\n    // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows\n    if (this.nrRollUpRows && this.currRow !== newRow) {\n      // clear all rows first\n      for (let i = 0; i < NR_ROWS; i++) {\n        this.rows[i].clear();\n      }\n\n      // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location\n      // topRowIndex - the start of rows to copy (inclusive index)\n      const topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n      // We only copy if the last position was already shown.\n      // We use the cueStartTime value to check this.\n      const lastOutputScreen = this.lastOutputScreen;\n      if (lastOutputScreen) {\n        const prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;\n        const time = this.logger.time;\n        if (prevLineTime !== null && time !== null && prevLineTime < time) {\n          for (let i = 0; i < this.nrRollUpRows; i++) {\n            this.rows[newRow - this.nrRollUpRows + i + 1].copy(\n              lastOutputScreen.rows[topRowIndex + i],\n            );\n          }\n        }\n      }\n    }\n\n    this.currRow = newRow;\n    const row = this.rows[this.currRow];\n    if (pacData.indent !== null) {\n      const indent = pacData.indent;\n      const prevPos = Math.max(indent - 1, 0);\n      row.setCursor(pacData.indent);\n      pacData.color = row.chars[prevPos].penState.foreground;\n    }\n    const styles: PenStyles = {\n      foreground: pacData.color,\n      underline: pacData.underline,\n      italics: pacData.italics,\n      background: 'black',\n      flash: false,\n    };\n    this.setPen(styles);\n  }\n\n  /**\n   * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).\n   */\n  setBkgData(bkgData: Partial<PenStyles>) {\n    this.logger.log(VerboseLevel.INFO, () => 'bkgData = ' + stringify(bkgData));\n    this.backSpace();\n    this.setPen(bkgData);\n    this.insertChar(0x20); // Space\n  }\n\n  setRollUpRows(nrRows: number | null) {\n    this.nrRollUpRows = nrRows;\n  }\n\n  rollUp() {\n    if (this.nrRollUpRows === null) {\n      this.logger.log(\n        VerboseLevel.DEBUG,\n        'roll_up but nrRollUpRows not set yet',\n      );\n      return; // Not properly setup\n    }\n    this.logger.log(VerboseLevel.TEXT, () => this.getDisplayText());\n    const topRowIndex = this.currRow + 1 - this.nrRollUpRows;\n    const topRow = this.rows.splice(topRowIndex, 1)[0];\n    topRow.clear();\n    this.rows.splice(this.currRow, 0, topRow);\n    this.logger.log(VerboseLevel.INFO, 'Rolling up');\n    // this.logger.log(VerboseLevel.TEXT, this.get_display_text())\n  }\n\n  /**\n   * Get all non-empty rows with as unicode text.\n   */\n  getDisplayText(asOneRow?: boolean) {\n    asOneRow = asOneRow || false;\n    const displayText: string[] = [];\n    let text = '';\n    let rowNr = -1;\n    for (let i = 0; i < NR_ROWS; i++) {\n      const rowText = this.rows[i].getTextString();\n      if (rowText) {\n        rowNr = i + 1;\n        if (asOneRow) {\n          displayText.push('Row ' + rowNr + \": '\" + rowText + \"'\");\n        } else {\n          displayText.push(rowText.trim());\n        }\n      }\n    }\n    if (displayText.length > 0) {\n      if (asOneRow) {\n        text = '[' + displayText.join(' | ') + ']';\n      } else {\n        text = displayText.join('\\n');\n      }\n    }\n    return text;\n  }\n\n  getTextAndFormat() {\n    return this.rows;\n  }\n}\n\n// var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];\n\ntype CaptionModes =\n  | 'MODE_ROLL-UP'\n  | 'MODE_POP-ON'\n  | 'MODE_PAINT-ON'\n  | 'MODE_TEXT'\n  | null;\n\nclass Cea608Channel {\n  chNr: number;\n  outputFilter: OutputFilter;\n  mode: CaptionModes;\n  verbose: number;\n  displayedMemory: CaptionScreen;\n  nonDisplayedMemory: CaptionScreen;\n  lastOutputScreen: CaptionScreen;\n  currRollUpRow: Row;\n  writeScreen: CaptionScreen;\n  cueStartTime: number | null;\n  logger: CaptionsLogger;\n\n  constructor(\n    channelNumber: number,\n    outputFilter: OutputFilter,\n    logger: CaptionsLogger,\n  ) {\n    this.chNr = channelNumber;\n    this.outputFilter = outputFilter;\n    this.mode = null;\n    this.verbose = 0;\n    this.displayedMemory = new CaptionScreen(logger);\n    this.nonDisplayedMemory = new CaptionScreen(logger);\n    this.lastOutputScreen = new CaptionScreen(logger);\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null; // Keeps track of where a cue started.\n    this.logger = logger;\n  }\n\n  reset() {\n    this.mode = null;\n    this.displayedMemory.reset();\n    this.nonDisplayedMemory.reset();\n    this.lastOutputScreen.reset();\n    this.outputFilter.reset();\n    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];\n    this.writeScreen = this.displayedMemory;\n    this.mode = null;\n    this.cueStartTime = null;\n  }\n\n  getHandler(): OutputFilter {\n    return this.outputFilter;\n  }\n\n  setHandler(newHandler: OutputFilter) {\n    this.outputFilter = newHandler;\n  }\n\n  setPAC(pacData: PACData) {\n    this.writeScreen.setPAC(pacData);\n  }\n\n  setBkgData(bkgData: Partial<PenStyles>) {\n    this.writeScreen.setBkgData(bkgData);\n  }\n\n  setMode(newMode: CaptionModes) {\n    if (newMode === this.mode) {\n      return;\n    }\n\n    this.mode = newMode;\n    this.logger.log(VerboseLevel.INFO, () => 'MODE=' + newMode);\n    if (this.mode === 'MODE_POP-ON') {\n      this.writeScreen = this.nonDisplayedMemory;\n    } else {\n      this.writeScreen = this.displayedMemory;\n      this.writeScreen.reset();\n    }\n    if (this.mode !== 'MODE_ROLL-UP') {\n      this.displayedMemory.nrRollUpRows = null;\n      this.nonDisplayedMemory.nrRollUpRows = null;\n    }\n    this.mode = newMode;\n  }\n\n  insertChars(chars: number[]) {\n    for (let i = 0; i < chars.length; i++) {\n      this.writeScreen.insertChar(chars[i]);\n    }\n\n    const screen =\n      this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';\n    this.logger.log(\n      VerboseLevel.INFO,\n      () => screen + ': ' + this.writeScreen.getDisplayText(true),\n    );\n    if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {\n      this.logger.log(\n        VerboseLevel.TEXT,\n        () => 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true),\n      );\n      this.outputDataUpdate();\n    }\n  }\n\n  ccRCL() {\n    // Resume Caption Loading (switch mode to Pop On)\n    this.logger.log(VerboseLevel.INFO, 'RCL - Resume Caption Loading');\n    this.setMode('MODE_POP-ON');\n  }\n\n  ccBS() {\n    // BackSpace\n    this.logger.log(VerboseLevel.INFO, 'BS - BackSpace');\n    if (this.mode === 'MODE_TEXT') {\n      return;\n    }\n\n    this.writeScreen.backSpace();\n    if (this.writeScreen === this.displayedMemory) {\n      this.outputDataUpdate();\n    }\n  }\n\n  ccAOF() {\n    // Reserved (formerly Alarm Off)\n  }\n\n  ccAON() {\n    // Reserved (formerly Alarm On)\n  }\n\n  ccDER() {\n    // Delete to End of Row\n    this.logger.log(VerboseLevel.INFO, 'DER- Delete to End of Row');\n    this.writeScreen.clearToEndOfRow();\n    this.outputDataUpdate();\n  }\n\n  ccRU(nrRows: number | null) {\n    // Roll-Up Captions-2,3,or 4 Rows\n    this.logger.log(VerboseLevel.INFO, 'RU(' + nrRows + ') - Roll Up');\n    this.writeScreen = this.displayedMemory;\n    this.setMode('MODE_ROLL-UP');\n    this.writeScreen.setRollUpRows(nrRows);\n  }\n\n  ccFON() {\n    // Flash On\n    this.logger.log(VerboseLevel.INFO, 'FON - Flash On');\n    this.writeScreen.setPen({ flash: true });\n  }\n\n  ccRDC() {\n    // Resume Direct Captioning (switch mode to PaintOn)\n    this.logger.log(VerboseLevel.INFO, 'RDC - Resume Direct Captioning');\n    this.setMode('MODE_PAINT-ON');\n  }\n\n  ccTR() {\n    // Text Restart in text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'TR');\n    this.setMode('MODE_TEXT');\n  }\n\n  ccRTD() {\n    // Resume Text Display in Text mode (not supported, however)\n    this.logger.log(VerboseLevel.INFO, 'RTD');\n    this.setMode('MODE_TEXT');\n  }\n\n  ccEDM() {\n    // Erase Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'EDM - Erase Displayed Memory');\n    this.displayedMemory.reset();\n    this.outputDataUpdate(true);\n  }\n\n  ccCR() {\n    // Carriage Return\n    this.logger.log(VerboseLevel.INFO, 'CR - Carriage Return');\n    this.writeScreen.rollUp();\n    this.outputDataUpdate(true);\n  }\n\n  ccENM() {\n    // Erase Non-Displayed Memory\n    this.logger.log(VerboseLevel.INFO, 'ENM - Erase Non-displayed Memory');\n    this.nonDisplayedMemory.reset();\n  }\n\n  ccEOC() {\n    // End of Caption (Flip Memories)\n    this.logger.log(VerboseLevel.INFO, 'EOC - End Of Caption');\n    if (this.mode === 'MODE_POP-ON') {\n      const tmp = this.displayedMemory;\n      this.displayedMemory = this.nonDisplayedMemory;\n      this.nonDisplayedMemory = tmp;\n      this.writeScreen = this.nonDisplayedMemory;\n      this.logger.log(\n        VerboseLevel.TEXT,\n        () => 'DISP: ' + this.displayedMemory.getDisplayText(),\n      );\n    }\n    this.outputDataUpdate(true);\n  }\n\n  ccTO(nrCols: number) {\n    // Tab Offset 1,2, or 3 columns\n    this.logger.log(VerboseLevel.INFO, 'TO(' + nrCols + ') - Tab Offset');\n    this.writeScreen.moveCursor(nrCols);\n  }\n\n  ccMIDROW(secondByte: number) {\n    // Parse MIDROW command\n    const styles: Partial<PenStyles> = { flash: false };\n    styles.underline = secondByte % 2 === 1;\n    styles.italics = secondByte >= 0x2e;\n    if (!styles.italics) {\n      const colorIndex = Math.floor(secondByte / 2) - 0x10;\n      const colors = [\n        'white',\n        'green',\n        'blue',\n        'cyan',\n        'red',\n        'yellow',\n        'magenta',\n      ];\n      styles.foreground = colors[colorIndex];\n    } else {\n      styles.foreground = 'white';\n    }\n    this.logger.log(VerboseLevel.INFO, 'MIDROW: ' + stringify(styles));\n    this.writeScreen.setPen(styles);\n  }\n\n  outputDataUpdate(dispatch: boolean = false) {\n    const time = this.logger.time;\n    if (time === null) {\n      return;\n    }\n\n    if (this.outputFilter) {\n      if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {\n        // Start of a new cue\n        this.cueStartTime = time;\n      } else {\n        if (!this.displayedMemory.equals(this.lastOutputScreen)) {\n          this.outputFilter.newCue(\n            this.cueStartTime!,\n            time,\n            this.lastOutputScreen,\n          );\n          if (dispatch && this.outputFilter.dispatchCue) {\n            this.outputFilter.dispatchCue();\n          }\n\n          this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;\n        }\n      }\n      this.lastOutputScreen.copy(this.displayedMemory);\n    }\n  }\n\n  cueSplitAtTime(t: number) {\n    if (this.outputFilter) {\n      if (!this.displayedMemory.isEmpty()) {\n        if (this.outputFilter.newCue) {\n          this.outputFilter.newCue(this.cueStartTime!, t, this.displayedMemory);\n        }\n\n        this.cueStartTime = t;\n      }\n    }\n  }\n}\n\ninterface PACData {\n  row: number;\n  indent: number | null;\n  color: string | null;\n  underline: boolean;\n  italics: boolean;\n}\n\ntype SupportedField = 1 | 3;\n\ntype Channels = 0 | 1 | 2; // Will be 1 or 2 when parsing captions\n\ntype CmdHistory = {\n  a: number | null;\n  b: number | null;\n};\n\nclass Cea608Parser {\n  channels: Array<Cea608Channel | null>;\n  currentChannel: Channels = 0;\n  cmdHistory: CmdHistory = createCmdHistory();\n  logger: CaptionsLogger;\n\n  constructor(field: SupportedField, out1: OutputFilter, out2: OutputFilter) {\n    const logger = (this.logger = new CaptionsLogger());\n    this.channels = [\n      null,\n      new Cea608Channel(field, out1, logger),\n      new Cea608Channel(field + 1, out2, logger),\n    ];\n  }\n\n  getHandler(channel: number) {\n    return (this.channels[channel] as Cea608Channel).getHandler();\n  }\n\n  setHandler(channel: number, newHandler: OutputFilter) {\n    (this.channels[channel] as Cea608Channel).setHandler(newHandler);\n  }\n\n  /**\n   * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.\n   */\n  addData(time: number | null, byteList: number[]) {\n    this.logger.time = time;\n    for (let i = 0; i < byteList.length; i += 2) {\n      const a = byteList[i] & 0x7f;\n      const b = byteList[i + 1] & 0x7f;\n      let cmdFound: boolean = false;\n      let charsFound: number[] | null = null;\n\n      if (a === 0 && b === 0) {\n        continue;\n      } else {\n        this.logger.log(\n          VerboseLevel.DATA,\n          () =>\n            '[' +\n            numArrayToHexArray([byteList[i], byteList[i + 1]]) +\n            '] -> (' +\n            numArrayToHexArray([a, b]) +\n            ')',\n        );\n      }\n\n      const cmdHistory = this.cmdHistory;\n      const isControlCode = a >= 0x10 && a <= 0x1f;\n      if (isControlCode) {\n        // Skip redundant control codes\n        if (hasCmdRepeated(a, b, cmdHistory)) {\n          setLastCmd(null, null, cmdHistory);\n          this.logger.log(\n            VerboseLevel.DEBUG,\n            () =>\n              'Repeated command (' +\n              numArrayToHexArray([a, b]) +\n              ') is dropped',\n          );\n          continue;\n        }\n        setLastCmd(a, b, this.cmdHistory);\n\n        cmdFound = this.parseCmd(a, b);\n\n        if (!cmdFound) {\n          cmdFound = this.parseMidrow(a, b);\n        }\n\n        if (!cmdFound) {\n          cmdFound = this.parsePAC(a, b);\n        }\n\n        if (!cmdFound) {\n          cmdFound = this.parseBackgroundAttributes(a, b);\n        }\n      } else {\n        setLastCmd(null, null, cmdHistory);\n      }\n      if (!cmdFound) {\n        charsFound = this.parseChars(a, b);\n        if (charsFound) {\n          const currChNr = this.currentChannel;\n          if (currChNr && currChNr > 0) {\n            const channel = this.channels[currChNr] as Cea608Channel;\n            channel.insertChars(charsFound);\n          } else {\n            this.logger.log(\n              VerboseLevel.WARNING,\n              'No channel found yet. TEXT-MODE?',\n            );\n          }\n        }\n      }\n      if (!cmdFound && !charsFound) {\n        this.logger.log(\n          VerboseLevel.WARNING,\n          () =>\n            \"Couldn't parse cleaned data \" +\n            numArrayToHexArray([a, b]) +\n            ' orig: ' +\n            numArrayToHexArray([byteList[i], byteList[i + 1]]),\n        );\n      }\n    }\n  }\n\n  /**\n   * Parse Command.\n   * @returns True if a command was found\n   */\n  parseCmd(a: number, b: number): boolean {\n    const cond1 =\n      (a === 0x14 || a === 0x1c || a === 0x15 || a === 0x1d) &&\n      b >= 0x20 &&\n      b <= 0x2f;\n    const cond2 = (a === 0x17 || a === 0x1f) && b >= 0x21 && b <= 0x23;\n    if (!(cond1 || cond2)) {\n      return false;\n    }\n\n    const chNr = a === 0x14 || a === 0x15 || a === 0x17 ? 1 : 2;\n    const channel = this.channels[chNr] as Cea608Channel;\n\n    if (a === 0x14 || a === 0x15 || a === 0x1c || a === 0x1d) {\n      if (b === 0x20) {\n        channel.ccRCL();\n      } else if (b === 0x21) {\n        channel.ccBS();\n      } else if (b === 0x22) {\n        channel.ccAOF();\n      } else if (b === 0x23) {\n        channel.ccAON();\n      } else if (b === 0x24) {\n        channel.ccDER();\n      } else if (b === 0x25) {\n        channel.ccRU(2);\n      } else if (b === 0x26) {\n        channel.ccRU(3);\n      } else if (b === 0x27) {\n        channel.ccRU(4);\n      } else if (b === 0x28) {\n        channel.ccFON();\n      } else if (b === 0x29) {\n        channel.ccRDC();\n      } else if (b === 0x2a) {\n        channel.ccTR();\n      } else if (b === 0x2b) {\n        channel.ccRTD();\n      } else if (b === 0x2c) {\n        channel.ccEDM();\n      } else if (b === 0x2d) {\n        channel.ccCR();\n      } else if (b === 0x2e) {\n        channel.ccENM();\n      } else if (b === 0x2f) {\n        channel.ccEOC();\n      }\n    } else {\n      // a == 0x17 || a == 0x1F\n      channel.ccTO(b - 0x20);\n    }\n    this.currentChannel = chNr;\n    return true;\n  }\n\n  /**\n   * Parse midrow styling command\n   */\n  parseMidrow(a: number, b: number): boolean {\n    let chNr: number = 0;\n\n    if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {\n      if (a === 0x11) {\n        chNr = 1;\n      } else {\n        chNr = 2;\n      }\n\n      if (chNr !== this.currentChannel) {\n        this.logger.log(\n          VerboseLevel.ERROR,\n          'Mismatch channel in midrow parsing',\n        );\n        return false;\n      }\n      const channel = this.channels[chNr];\n      if (!channel) {\n        return false;\n      }\n      channel.ccMIDROW(b);\n      this.logger.log(\n        VerboseLevel.DEBUG,\n        () => 'MIDROW (' + numArrayToHexArray([a, b]) + ')',\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Parse Preable Access Codes (Table 53).\n   * @returns {Boolean} Tells if PAC found\n   */\n  parsePAC(a: number, b: number): boolean {\n    let row: number;\n\n    const case1 =\n      ((a >= 0x11 && a <= 0x17) || (a >= 0x19 && a <= 0x1f)) &&\n      b >= 0x40 &&\n      b <= 0x7f;\n    const case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5f;\n    if (!(case1 || case2)) {\n      return false;\n    }\n\n    const chNr: Channels = a <= 0x17 ? 1 : 2;\n\n    if (b >= 0x40 && b <= 0x5f) {\n      row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];\n    } else {\n      // 0x60 <= b <= 0x7F\n      row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];\n    }\n    const channel = this.channels[chNr];\n    if (!channel) {\n      return false;\n    }\n    channel.setPAC(this.interpretPAC(row, b));\n    this.currentChannel = chNr;\n    return true;\n  }\n\n  /**\n   * Interpret the second byte of the pac, and return the information.\n   * @returns pacData with style parameters\n   */\n  interpretPAC(row: number, byte: number): PACData {\n    let pacIndex;\n    const pacData: PACData = {\n      color: null,\n      italics: false,\n      indent: null,\n      underline: false,\n      row: row,\n    };\n\n    if (byte > 0x5f) {\n      pacIndex = byte - 0x60;\n    } else {\n      pacIndex = byte - 0x40;\n    }\n\n    pacData.underline = (pacIndex & 1) === 1;\n    if (pacIndex <= 0xd) {\n      pacData.color = [\n        'white',\n        'green',\n        'blue',\n        'cyan',\n        'red',\n        'yellow',\n        'magenta',\n        'white',\n      ][Math.floor(pacIndex / 2)];\n    } else if (pacIndex <= 0xf) {\n      pacData.italics = true;\n      pacData.color = 'white';\n    } else {\n      pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;\n    }\n    return pacData; // Note that row has zero offset. The spec uses 1.\n  }\n\n  /**\n   * Parse characters.\n   * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.\n   */\n  parseChars(a: number, b: number): number[] | null {\n    let channelNr: Channels;\n    let charCodes: number[] | null = null;\n    let charCode1: number | null = null;\n\n    if (a >= 0x19) {\n      channelNr = 2;\n      charCode1 = a - 8;\n    } else {\n      channelNr = 1;\n      charCode1 = a;\n    }\n    if (charCode1 >= 0x11 && charCode1 <= 0x13) {\n      // Special character\n      let oneCode;\n      if (charCode1 === 0x11) {\n        oneCode = b + 0x50;\n      } else if (charCode1 === 0x12) {\n        oneCode = b + 0x70;\n      } else {\n        oneCode = b + 0x90;\n      }\n\n      this.logger.log(\n        VerboseLevel.INFO,\n        () =>\n          \"Special char '\" +\n          getCharForByte(oneCode) +\n          \"' in channel \" +\n          channelNr,\n      );\n      charCodes = [oneCode];\n    } else if (a >= 0x20 && a <= 0x7f) {\n      charCodes = b === 0 ? [a] : [a, b];\n    }\n    if (charCodes) {\n      this.logger.log(\n        VerboseLevel.DEBUG,\n        () => 'Char codes =  ' + numArrayToHexArray(charCodes).join(','),\n      );\n    }\n    return charCodes;\n  }\n\n  /**\n   * Parse extended background attributes as well as new foreground color black.\n   * @returns True if background attributes are found\n   */\n  parseBackgroundAttributes(a: number, b: number): boolean {\n    const case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;\n    const case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;\n    if (!(case1 || case2)) {\n      return false;\n    }\n    let index: number;\n    const bkgData: Partial<PenStyles> = {};\n    if (a === 0x10 || a === 0x18) {\n      index = Math.floor((b - 0x20) / 2);\n      bkgData.background = backgroundColors[index];\n      if (b % 2 === 1) {\n        bkgData.background = bkgData.background + '_semi';\n      }\n    } else if (b === 0x2d) {\n      bkgData.background = 'transparent';\n    } else {\n      bkgData.foreground = 'black';\n      if (b === 0x2f) {\n        bkgData.underline = true;\n      }\n    }\n    const chNr: Channels = a <= 0x17 ? 1 : 2;\n    const channel: Cea608Channel = this.channels[chNr] as Cea608Channel;\n    channel.setBkgData(bkgData);\n    return true;\n  }\n\n  /**\n   * Reset state of parser and its channels.\n   */\n  reset() {\n    for (let i = 0; i < Object.keys(this.channels).length; i++) {\n      const channel = this.channels[i];\n      if (channel) {\n        channel.reset();\n      }\n    }\n    setLastCmd(null, null, this.cmdHistory);\n  }\n\n  /**\n   * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.\n   */\n  cueSplitAtTime(t: number) {\n    for (let i = 0; i < this.channels.length; i++) {\n      const channel = this.channels[i];\n      if (channel) {\n        channel.cueSplitAtTime(t);\n      }\n    }\n  }\n}\n\nfunction setLastCmd(\n  a: number | null,\n  b: number | null,\n  cmdHistory: CmdHistory,\n) {\n  cmdHistory.a = a;\n  cmdHistory.b = b;\n}\n\nfunction hasCmdRepeated(a: number, b: number, cmdHistory: CmdHistory) {\n  return cmdHistory.a === a && cmdHistory.b === b;\n}\n\nfunction createCmdHistory(): CmdHistory {\n  return {\n    a: null,\n    b: null,\n  };\n}\n\nexport default Cea608Parser;\n","/**\n * Copyright 2013 vtt.js Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { optionalSelf } from './global';\n\ndeclare interface VTTCuePolyfill extends VTTCue {\n  new (...args): VTTCuePolyfill;\n  hasBeenReset: boolean;\n  displayState: void;\n}\n\nexport default (function () {\n  if (optionalSelf?.VTTCue) {\n    return self.VTTCue;\n  }\n\n  const AllowedDirections = ['', 'lr', 'rl'] as const;\n  type Direction = (typeof AllowedDirections)[number];\n\n  const AllowedAlignments = [\n    'start',\n    'middle',\n    'end',\n    'left',\n    'right',\n  ] as const;\n  type Alignment = (typeof AllowedAlignments)[number];\n\n  function isAllowedValue<T, A>(allowed: T, value: string): A | false {\n    if (typeof value !== 'string') {\n      return false;\n    }\n    // necessary for assuring the generic conforms to the Array interface\n    if (!Array.isArray(allowed)) {\n      return false;\n    }\n    // reset the type so that the next narrowing works well\n    const lcValue = value.toLowerCase() as any;\n    // use the allow list to narrow the type to a specific subset of strings\n    if (~allowed.indexOf(lcValue)) {\n      return lcValue;\n    }\n\n    return false;\n  }\n\n  function findDirectionSetting(value: string) {\n    return isAllowedValue<typeof AllowedDirections, Direction>(\n      AllowedDirections,\n      value,\n    );\n  }\n\n  function findAlignSetting(value: string) {\n    return isAllowedValue<typeof AllowedAlignments, Alignment>(\n      AllowedAlignments,\n      value,\n    );\n  }\n\n  function extend(obj: Record<string, any>, ...rest: Record<string, any>[]) {\n    let i = 1;\n    for (; i < arguments.length; i++) {\n      const cobj = arguments[i];\n      for (const p in cobj) {\n        obj[p] = cobj[p];\n      }\n    }\n\n    return obj;\n  }\n\n  function VTTCue(startTime: number, endTime: number, text: string) {\n    const cue = this as VTTCuePolyfill;\n    const baseObj = { enumerable: true };\n    /**\n     * Shim implementation specific properties. These properties are not in\n     * the spec.\n     */\n\n    // Lets us know when the VTTCue's data has changed in such a way that we need\n    // to recompute its display state. This lets us compute its display state\n    // lazily.\n    cue.hasBeenReset = false;\n\n    /**\n     * VTTCue and TextTrackCue properties\n     * http://dev.w3.org/html5/webvtt/#vttcue-interface\n     */\n\n    let _id = '';\n    let _pauseOnExit = false;\n    let _startTime = startTime;\n    let _endTime = endTime;\n    let _text = text;\n    let _region = null;\n    let _vertical: Direction = '';\n    let _snapToLines = true;\n    let _line: number | 'auto' = 'auto';\n    let _lineAlign: Alignment = 'start';\n    let _position = 50;\n    let _positionAlign: Alignment = 'middle';\n    let _size = 50;\n    let _align: Alignment = 'middle';\n\n    Object.defineProperty(\n      cue,\n      'id',\n      extend({}, baseObj, {\n        get: function () {\n          return _id;\n        },\n        set: function (value: string) {\n          _id = '' + value;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'pauseOnExit',\n      extend({}, baseObj, {\n        get: function () {\n          return _pauseOnExit;\n        },\n        set: function (value: boolean) {\n          _pauseOnExit = !!value;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'startTime',\n      extend({}, baseObj, {\n        get: function () {\n          return _startTime;\n        },\n        set: function (value: number) {\n          if (typeof value !== 'number') {\n            throw new TypeError('Start time must be set to a number.');\n          }\n\n          _startTime = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'endTime',\n      extend({}, baseObj, {\n        get: function () {\n          return _endTime;\n        },\n        set: function (value: number) {\n          if (typeof value !== 'number') {\n            throw new TypeError('End time must be set to a number.');\n          }\n\n          _endTime = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'text',\n      extend({}, baseObj, {\n        get: function () {\n          return _text;\n        },\n        set: function (value: string) {\n          _text = '' + value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    // todo: implement VTTRegion polyfill?\n    Object.defineProperty(\n      cue,\n      'region',\n      extend({}, baseObj, {\n        get: function () {\n          return _region;\n        },\n        set: function (value: any) {\n          _region = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'vertical',\n      extend({}, baseObj, {\n        get: function () {\n          return _vertical;\n        },\n        set: function (value: string) {\n          const setting = findDirectionSetting(value);\n          // Have to check for false because the setting an be an empty string.\n          if (setting === false) {\n            throw new SyntaxError(\n              'An invalid or illegal string was specified.',\n            );\n          }\n\n          _vertical = setting;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'snapToLines',\n      extend({}, baseObj, {\n        get: function () {\n          return _snapToLines;\n        },\n        set: function (value: boolean) {\n          _snapToLines = !!value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'line',\n      extend({}, baseObj, {\n        get: function () {\n          return _line;\n        },\n        set: function (value: number | 'auto') {\n          if (typeof value !== 'number' && value !== 'auto') {\n            throw new SyntaxError(\n              'An invalid number or illegal string was specified.',\n            );\n          }\n\n          _line = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'lineAlign',\n      extend({}, baseObj, {\n        get: function () {\n          return _lineAlign;\n        },\n        set: function (value: string) {\n          const setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError(\n              'An invalid or illegal string was specified.',\n            );\n          }\n\n          _lineAlign = setting;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'position',\n      extend({}, baseObj, {\n        get: function () {\n          return _position;\n        },\n        set: function (value: number) {\n          if (value < 0 || value > 100) {\n            throw new Error('Position must be between 0 and 100.');\n          }\n\n          _position = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'positionAlign',\n      extend({}, baseObj, {\n        get: function () {\n          return _positionAlign;\n        },\n        set: function (value: string) {\n          const setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError(\n              'An invalid or illegal string was specified.',\n            );\n          }\n\n          _positionAlign = setting;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'size',\n      extend({}, baseObj, {\n        get: function () {\n          return _size;\n        },\n        set: function (value: number) {\n          if (value < 0 || value > 100) {\n            throw new Error('Size must be between 0 and 100.');\n          }\n\n          _size = value;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    Object.defineProperty(\n      cue,\n      'align',\n      extend({}, baseObj, {\n        get: function () {\n          return _align;\n        },\n        set: function (value: string) {\n          const setting = findAlignSetting(value);\n          if (!setting) {\n            throw new SyntaxError(\n              'An invalid or illegal string was specified.',\n            );\n          }\n\n          _align = setting;\n          this.hasBeenReset = true;\n        },\n      }),\n    );\n\n    /**\n     * Other <track> spec defined properties\n     */\n\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state\n    cue.displayState = undefined;\n  }\n\n  /**\n   * VTTCue methods\n   */\n\n  VTTCue.prototype.getCueAsHTML = function () {\n    // Assume WebVTT.convertCueToDOMTree is on the global.\n    const WebVTT = (self as any).WebVTT;\n    return WebVTT.convertCueToDOMTree(self, this.text);\n  };\n  // this is a polyfill hack\n  return VTTCue as any as VTTCuePolyfill;\n})();\n","/*\n * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js\n */\n\nimport VTTCue from './vttcue';\n\nclass StringDecoder {\n  decode(data: string | any, options?: Object): string | never {\n    if (!data) {\n      return '';\n    }\n\n    if (typeof data !== 'string') {\n      throw new Error('Error - expected string data.');\n    }\n\n    return decodeURIComponent(encodeURIComponent(data));\n  }\n}\n\n// Try to parse input as a time stamp.\nexport function parseTimeStamp(input: string) {\n  function computeSeconds(h, m, s, f) {\n    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + parseFloat(f || 0);\n  }\n\n  const m = input.match(/^(?:(\\d+):)?(\\d{2}):(\\d{2})(\\.\\d+)?/);\n  if (!m) {\n    return null;\n  }\n\n  if (parseFloat(m[2]) > 59) {\n    // Timestamp takes the form of [hours]:[minutes].[milliseconds]\n    // First position is hours as it's over 59.\n    return computeSeconds(m[2], m[3], 0, m[4]);\n  }\n  // Timestamp takes the form of [hours (optional)]:[minutes]:[seconds].[milliseconds]\n  return computeSeconds(m[1], m[2], m[3], m[4]);\n}\n\n// A settings object holds key/value pairs and will ignore anything but the first\n// assignment to a specific key.\nclass Settings {\n  private readonly values: { [key: string]: any } = Object.create(null);\n\n  // Only accept the first assignment to any key.\n  set(k: string, v: any) {\n    if (!this.get(k) && v !== '') {\n      this.values[k] = v;\n    }\n  }\n  // Return the value for a key, or a default value.\n  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with\n  // a number of possible default values as properties where 'defaultKey' is\n  // the key of the property that will be chosen; otherwise it's assumed to be\n  // a single value.\n  get(k: string, dflt?: any, defaultKey?: string): any {\n    if (defaultKey) {\n      return this.has(k) ? this.values[k] : dflt[defaultKey];\n    }\n\n    return this.has(k) ? this.values[k] : dflt;\n  }\n  // Check whether we have a value for a key.\n  has(k: string): boolean {\n    return k in this.values;\n  }\n  // Accept a setting if its one of the given alternatives.\n  alt(k: string, v: any, a: any[]) {\n    for (let n = 0; n < a.length; ++n) {\n      if (v === a[n]) {\n        this.set(k, v);\n        break;\n      }\n    }\n  }\n  // Accept a setting if its a valid (signed) integer.\n  integer(k: string, v: any) {\n    if (/^-?\\d+$/.test(v)) {\n      // integer\n      this.set(k, parseInt(v, 10));\n    }\n  }\n  // Accept a setting if its a valid percentage.\n  percent(k: string, v: any): boolean {\n    if (/^([\\d]{1,3})(\\.[\\d]*)?%$/.test(v)) {\n      const percent = parseFloat(v);\n      if (percent >= 0 && percent <= 100) {\n        this.set(k, percent);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n// Helper function to parse input into groups separated by 'groupDelim', and\n// interpret each group as a key/value pair separated by 'keyValueDelim'.\nfunction parseOptions(\n  input: string,\n  callback: (k: string, v: any) => void,\n  keyValueDelim: RegExp,\n  groupDelim?: RegExp,\n) {\n  const groups = groupDelim ? input.split(groupDelim) : [input];\n  for (const i in groups) {\n    if (typeof groups[i] !== 'string') {\n      continue;\n    }\n\n    const kv = groups[i].split(keyValueDelim);\n    if (kv.length !== 2) {\n      continue;\n    }\n\n    const k = kv[0];\n    const v = kv[1];\n    callback(k, v);\n  }\n}\n\nconst defaults = new VTTCue(0, 0, '');\n// 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244\n//  Safari doesn't yet support this change, but FF and Chrome do.\nconst center = (defaults.align as string) === 'middle' ? 'middle' : 'center';\n\nfunction parseCue(input: string, cue: VTTCue, regionList: Region[]) {\n  // Remember the original input if we need to throw an error.\n  const oInput = input;\n  // 4.1 WebVTT timestamp\n  function consumeTimeStamp(): number | never {\n    const ts = parseTimeStamp(input);\n    if (ts === null) {\n      throw new Error('Malformed timestamp: ' + oInput);\n    }\n\n    // Remove time stamp from input.\n    input = input.replace(/^[^\\sa-zA-Z-]+/, '');\n    return ts;\n  }\n\n  // 4.4.2 WebVTT cue settings\n  function consumeCueSettings(input: string, cue: VTTCue) {\n    const settings = new Settings();\n\n    parseOptions(\n      input,\n      function (k, v) {\n        let vals;\n        switch (k) {\n          case 'region':\n            // Find the last region we parsed with the same region id.\n            for (let i = regionList.length - 1; i >= 0; i--) {\n              if (regionList[i].id === v) {\n                settings.set(k, regionList[i].region);\n                break;\n              }\n            }\n            break;\n          case 'vertical':\n            settings.alt(k, v, ['rl', 'lr']);\n            break;\n          case 'line':\n            vals = v.split(',');\n            settings.integer(k, vals[0]);\n            if (settings.percent(k, vals[0])) {\n              settings.set('snapToLines', false);\n            }\n\n            settings.alt(k, vals[0], ['auto']);\n            if (vals.length === 2) {\n              settings.alt('lineAlign', vals[1], ['start', center, 'end']);\n            }\n\n            break;\n          case 'position':\n            vals = v.split(',');\n            settings.percent(k, vals[0]);\n            if (vals.length === 2) {\n              settings.alt('positionAlign', vals[1], [\n                'start',\n                center,\n                'end',\n                'line-left',\n                'line-right',\n                'auto',\n              ]);\n            }\n\n            break;\n          case 'size':\n            settings.percent(k, v);\n            break;\n          case 'align':\n            settings.alt(k, v, ['start', center, 'end', 'left', 'right']);\n            break;\n        }\n      },\n      /:/,\n      /\\s/,\n    );\n\n    // Apply default values for any missing fields.\n    cue.region = settings.get('region', null);\n    cue.vertical = settings.get('vertical', '');\n    let line = settings.get('line', 'auto');\n    if (line === 'auto' && defaults.line === -1) {\n      // set numeric line number for Safari\n      line = -1;\n    }\n    cue.line = line;\n    cue.lineAlign = settings.get('lineAlign', 'start');\n    cue.snapToLines = settings.get('snapToLines', true);\n    cue.size = settings.get('size', 100);\n    cue.align = settings.get('align', center);\n    let position = settings.get('position', 'auto');\n    if (position === 'auto' && defaults.position === 50) {\n      // set numeric position for Safari\n      position =\n        cue.align === 'start' || cue.align === 'left'\n          ? 0\n          : cue.align === 'end' || cue.align === 'right'\n            ? 100\n            : 50;\n    }\n    cue.position = position;\n  }\n\n  function skipWhitespace() {\n    input = input.replace(/^\\s+/, '');\n  }\n\n  // 4.1 WebVTT cue timings.\n  skipWhitespace();\n  cue.startTime = consumeTimeStamp(); // (1) collect cue start time\n  skipWhitespace();\n  if (input.slice(0, 3) !== '-->') {\n    // (3) next characters must match '-->'\n    throw new Error(\n      \"Malformed time stamp (time stamps must be separated by '-->'): \" +\n        oInput,\n    );\n  }\n  input = input.slice(3);\n  skipWhitespace();\n  cue.endTime = consumeTimeStamp(); // (5) collect cue end time\n\n  // 4.1 WebVTT cue settings list.\n  skipWhitespace();\n  consumeCueSettings(input, cue);\n}\n\nexport function fixLineBreaks(input: string): string {\n  return input.replace(/<br(?: \\/)?>/gi, '\\n');\n}\n\ntype Region = {\n  id: string;\n  region: any;\n};\n\nexport class VTTParser {\n  private state:\n    | 'INITIAL'\n    | 'HEADER'\n    | 'ID'\n    | 'CUE'\n    | 'CUETEXT'\n    | 'NOTE'\n    | 'BADWEBVTT'\n    | 'BADCUE' = 'INITIAL';\n  private buffer: string = '';\n  private decoder: StringDecoder = new StringDecoder();\n  private regionList: Region[] = [];\n  private cue: VTTCue | null = null;\n  public oncue?: (cue: VTTCue) => void;\n  public onparsingerror?: (error: Error) => void;\n  public onflush?: () => void;\n\n  parse(data?: string): VTTParser {\n    const _this = this;\n\n    // If there is no data then we won't decode it, but will just try to parse\n    // whatever is in buffer already. This may occur in circumstances, for\n    // example when flush() is called.\n    if (data) {\n      // Try to decode the data that we received.\n      _this.buffer += _this.decoder.decode(data, { stream: true });\n    }\n\n    function collectNextLine(): string {\n      let buffer: string = _this.buffer;\n      let pos = 0;\n\n      buffer = fixLineBreaks(buffer);\n\n      while (\n        pos < buffer.length &&\n        buffer[pos] !== '\\r' &&\n        buffer[pos] !== '\\n'\n      ) {\n        ++pos;\n      }\n\n      const line: string = buffer.slice(0, pos);\n      // Advance the buffer early in case we fail below.\n      if (buffer[pos] === '\\r') {\n        ++pos;\n      }\n\n      if (buffer[pos] === '\\n') {\n        ++pos;\n      }\n\n      _this.buffer = buffer.slice(pos);\n      return line;\n    }\n\n    // 3.2 WebVTT metadata header syntax\n    function parseHeader(input) {\n      parseOptions(\n        input,\n        function (k, v) {\n          // switch (k) {\n          // case 'region':\n          // 3.3 WebVTT region metadata header syntax\n          // console.log('parse region', v);\n          // parseRegion(v);\n          // break;\n          // }\n        },\n        /:/,\n      );\n    }\n\n    // 5.1 WebVTT file parsing.\n    try {\n      let line: string = '';\n      if (_this.state === 'INITIAL') {\n        // We can't start parsing until we have the first line.\n        if (!/\\r\\n|\\n/.test(_this.buffer)) {\n          return this;\n        }\n\n        line = collectNextLine();\n        // strip of UTF-8 BOM if any\n        // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8\n        const m = line.match(/^(ï»¿)?WEBVTT([ \\t].*)?$/);\n        if (!m?.[0]) {\n          throw new Error('Malformed WebVTT signature.');\n        }\n\n        _this.state = 'HEADER';\n      }\n\n      let alreadyCollectedLine = false;\n      while (_this.buffer) {\n        // We can't parse a line until we have the full line.\n        if (!/\\r\\n|\\n/.test(_this.buffer)) {\n          return this;\n        }\n\n        if (!alreadyCollectedLine) {\n          line = collectNextLine();\n        } else {\n          alreadyCollectedLine = false;\n        }\n\n        switch (_this.state) {\n          case 'HEADER':\n            // 13-18 - Allow a header (metadata) under the WEBVTT line.\n            if (/:/.test(line)) {\n              parseHeader(line);\n            } else if (!line) {\n              // An empty line terminates the header and starts the body (cues).\n              _this.state = 'ID';\n            }\n            continue;\n          case 'NOTE':\n            // Ignore NOTE blocks.\n            if (!line) {\n              _this.state = 'ID';\n            }\n\n            continue;\n          case 'ID':\n            // Check for the start of NOTE blocks.\n            if (/^NOTE($|[ \\t])/.test(line)) {\n              _this.state = 'NOTE';\n              break;\n            }\n            // 19-29 - Allow any number of line terminators, then initialize new cue values.\n            if (!line) {\n              continue;\n            }\n\n            _this.cue = new VTTCue(0, 0, '');\n            _this.state = 'CUE';\n            // 30-39 - Check if self line contains an optional identifier or timing data.\n            if (line.indexOf('-->') === -1) {\n              _this.cue.id = line;\n              continue;\n            }\n          // Process line as start of a cue.\n          /* falls through */\n          case 'CUE':\n            // 40 - Collect cue timings and settings.\n            if (!_this.cue) {\n              _this.state = 'BADCUE';\n              continue;\n            }\n            try {\n              parseCue(line, _this.cue, _this.regionList);\n            } catch (e) {\n              // In case of an error ignore rest of the cue.\n              _this.cue = null;\n              _this.state = 'BADCUE';\n              continue;\n            }\n            _this.state = 'CUETEXT';\n            continue;\n          case 'CUETEXT':\n            {\n              const hasSubstring = line.indexOf('-->') !== -1;\n              // 34 - If we have an empty line then report the cue.\n              // 35 - If we have the special substring '-->' then report the cue,\n              // but do not collect the line as we need to process the current\n              // one as a new cue.\n              if (!line || (hasSubstring && (alreadyCollectedLine = true))) {\n                // We are done parsing self cue.\n                if (_this.oncue && _this.cue) {\n                  _this.oncue(_this.cue);\n                }\n\n                _this.cue = null;\n                _this.state = 'ID';\n                continue;\n              }\n              if (_this.cue === null) {\n                continue;\n              }\n\n              if (_this.cue.text) {\n                _this.cue.text += '\\n';\n              }\n              _this.cue.text += line;\n            }\n            continue;\n          case 'BADCUE':\n            // 54-62 - Collect and discard the remaining cue.\n            if (!line) {\n              _this.state = 'ID';\n            }\n        }\n      }\n    } catch (e) {\n      // If we are currently parsing a cue, report what we have.\n      if (_this.state === 'CUETEXT' && _this.cue && _this.oncue) {\n        _this.oncue(_this.cue);\n      }\n\n      _this.cue = null;\n      // Enter BADWEBVTT state if header was not parsed correctly otherwise\n      // another exception occurred so enter BADCUE state.\n      _this.state = _this.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';\n    }\n    return this;\n  }\n\n  flush(): VTTParser {\n    const _this = this;\n    try {\n      // Finish decoding the stream.\n      // _this.buffer += _this.decoder.decode();\n      // Synthesize the end of the current cue or region.\n      if (_this.cue || _this.state === 'HEADER') {\n        _this.buffer += '\\n\\n';\n        _this.parse();\n      }\n      // If we've flushed, parsed, and we're still on the INITIAL state then\n      // that means we don't have enough of the stream to parse the first\n      // line.\n      if (_this.state === 'INITIAL' || _this.state === 'BADWEBVTT') {\n        throw new Error('Malformed WebVTT signature.');\n      }\n    } catch (e) {\n      if (_this.onparsingerror) {\n        _this.onparsingerror(e);\n      }\n    }\n    if (_this.onflush) {\n      _this.onflush();\n    }\n\n    return this;\n  }\n}\n","import { utf8ArrayToStr } from '@svta/common-media-library/utils/utf8ArrayToStr';\nimport { hash } from './hash';\nimport { toMpegTsClockFromTimescale } from './timescale-conversion';\nimport { VTTParser } from './vttparser';\nimport { normalizePts } from '../remux/mp4-remuxer';\nimport type { TimestampOffset } from './timescale-conversion';\nimport type { VTTCCs } from '../types/vtt';\n\nconst LINEBREAKS = /\\r\\n|\\n\\r|\\n|\\r/g;\n\n// String.prototype.startsWith is not supported in IE11\nconst startsWith = function (\n  inputString: string,\n  searchString: string,\n  position: number = 0,\n) {\n  return (\n    inputString.slice(position, position + searchString.length) === searchString\n  );\n};\n\nconst cueString2millis = function (timeString: string) {\n  let ts = parseInt(timeString.slice(-3));\n  const secs = parseInt(timeString.slice(-6, -4));\n  const mins = parseInt(timeString.slice(-9, -7));\n  const hours =\n    timeString.length > 9\n      ? parseInt(timeString.substring(0, timeString.indexOf(':')))\n      : 0;\n\n  if (\n    !Number.isFinite(ts) ||\n    !Number.isFinite(secs) ||\n    !Number.isFinite(mins) ||\n    !Number.isFinite(hours)\n  ) {\n    throw Error(`Malformed X-TIMESTAMP-MAP: Local:${timeString}`);\n  }\n\n  ts += 1000 * secs;\n  ts += 60 * 1000 * mins;\n  ts += 60 * 60 * 1000 * hours;\n\n  return ts;\n};\n\n// Create a unique hash id for a cue based on start/end times and text.\n// This helps timeline-controller to avoid showing repeated captions.\nexport function generateCueId(\n  startTime: number,\n  endTime: number,\n  text: string,\n) {\n  return hash(startTime.toString()) + hash(endTime.toString()) + hash(text);\n}\n\nconst calculateOffset = function (vttCCs: VTTCCs, cc, presentationTime) {\n  let currCC = vttCCs[cc];\n  let prevCC = vttCCs[currCC.prevCC];\n\n  // This is the first discontinuity or cues have been processed since the last discontinuity\n  // Offset = current discontinuity time\n  if (!prevCC || (!prevCC.new && currCC.new)) {\n    vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;\n    currCC.new = false;\n    return;\n  }\n\n  // There have been discontinuities since cues were last parsed.\n  // Offset = time elapsed\n  while (prevCC?.new) {\n    vttCCs.ccOffset += currCC.start - prevCC.start;\n    currCC.new = false;\n    currCC = prevCC;\n    prevCC = vttCCs[currCC.prevCC];\n  }\n\n  vttCCs.presentationOffset = presentationTime;\n};\n\nexport function parseWebVTT(\n  vttByteArray: ArrayBuffer,\n  initPTS: TimestampOffset | undefined,\n  vttCCs: VTTCCs,\n  cc: number,\n  timeOffset: number,\n  callBack: (cues: VTTCue[]) => void,\n  errorCallBack: (error: Error) => void,\n) {\n  const parser = new VTTParser();\n  // Convert byteArray into string, replacing any somewhat exotic linefeeds with \"\\n\", then split on that character.\n  // Uint8Array.prototype.reduce is not implemented in IE11\n  const vttLines = utf8ArrayToStr(new Uint8Array(vttByteArray))\n    .trim()\n    .replace(LINEBREAKS, '\\n')\n    .split('\\n');\n  const cues: VTTCue[] = [];\n  const init90kHz = initPTS\n    ? toMpegTsClockFromTimescale(initPTS.baseTime, initPTS.timescale)\n    : 0;\n  let cueTime = '00:00.000';\n  let timestampMapMPEGTS = 0;\n  let timestampMapLOCAL = 0;\n  let parsingError: Error;\n  let inHeader = true;\n\n  parser.oncue = function (cue: VTTCue) {\n    // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.\n    const currCC = vttCCs[cc];\n    let cueOffset = vttCCs.ccOffset;\n\n    // Calculate subtitle PTS offset\n    const webVttMpegTsMapOffset = (timestampMapMPEGTS - init90kHz) / 90000;\n\n    // Update offsets for new discontinuities\n    if (currCC?.new) {\n      if (timestampMapLOCAL !== undefined) {\n        // When local time is provided, offset = discontinuity start time - local time\n        cueOffset = vttCCs.ccOffset = currCC.start;\n      } else {\n        calculateOffset(vttCCs, cc, webVttMpegTsMapOffset);\n      }\n    }\n    if (webVttMpegTsMapOffset) {\n      if (!initPTS) {\n        parsingError = new Error('Missing initPTS for VTT MPEGTS');\n        return;\n      }\n      // If we have MPEGTS, offset = presentation time + discontinuity offset\n      cueOffset = webVttMpegTsMapOffset - vttCCs.presentationOffset;\n    }\n\n    const duration = cue.endTime - cue.startTime;\n    const startTime =\n      normalizePts(\n        (cue.startTime + cueOffset - timestampMapLOCAL) * 90000,\n        timeOffset * 90000,\n      ) / 90000;\n    cue.startTime = Math.max(startTime, 0);\n    cue.endTime = Math.max(startTime + duration, 0);\n\n    //trim trailing webvtt block whitespaces\n    const text = cue.text.trim();\n\n    // Fix encoding of special characters\n    cue.text = decodeURIComponent(encodeURIComponent(text));\n\n    // If the cue was not assigned an id from the VTT file (line above the content), create one.\n    if (!cue.id) {\n      cue.id = generateCueId(cue.startTime, cue.endTime, text);\n    }\n\n    if (cue.endTime > 0) {\n      cues.push(cue);\n    }\n  };\n\n  parser.onparsingerror = function (error: Error) {\n    parsingError = error;\n  };\n\n  parser.onflush = function () {\n    if (parsingError) {\n      errorCallBack(parsingError);\n      return;\n    }\n    callBack(cues);\n  };\n\n  // Go through contents line by line.\n  vttLines.forEach((line) => {\n    if (inHeader) {\n      // Look for X-TIMESTAMP-MAP in header.\n      if (startsWith(line, 'X-TIMESTAMP-MAP=')) {\n        // Once found, no more are allowed anyway, so stop searching.\n        inHeader = false;\n        // Extract LOCAL and MPEGTS.\n        line\n          .slice(16)\n          .split(',')\n          .forEach((timestamp) => {\n            if (startsWith(timestamp, 'LOCAL:')) {\n              cueTime = timestamp.slice(6);\n            } else if (startsWith(timestamp, 'MPEGTS:')) {\n              timestampMapMPEGTS = parseInt(timestamp.slice(7));\n            }\n          });\n        try {\n          // Convert cue time to seconds\n          timestampMapLOCAL = cueString2millis(cueTime) / 1000;\n        } catch (error) {\n          parsingError = error;\n        }\n        // Return without parsing X-TIMESTAMP-MAP line.\n        return;\n      } else if (line === '') {\n        inHeader = false;\n      }\n    }\n    // Parse line by default.\n    parser.parse(line + '\\n');\n  });\n\n  parser.flush();\n}\n","import { utf8ArrayToStr } from '@svta/common-media-library/utils/utf8ArrayToStr';\nimport { findBox } from './mp4-tools';\nimport { toTimescaleFromScale } from './timescale-conversion';\nimport VTTCue from './vttcue';\nimport { parseTimeStamp } from './vttparser';\nimport { generateCueId } from './webvtt-parser';\nimport type { TimestampOffset } from './timescale-conversion';\n\nexport const IMSC1_CODEC = 'stpp.ttml.im1t';\n\n// Time format: h:m:s:frames(.subframes)\nconst HMSF_REGEX = /^(\\d{2,}):(\\d{2}):(\\d{2}):(\\d{2})\\.?(\\d+)?$/;\n\n// Time format: hours, minutes, seconds, milliseconds, frames, ticks\nconst TIME_UNIT_REGEX = /^(\\d*(?:\\.\\d*)?)(h|m|s|ms|f|t)$/;\n\nconst textAlignToLineAlign: Partial<Record<string, LineAlignSetting>> = {\n  left: 'start',\n  center: 'center',\n  right: 'end',\n  start: 'start',\n  end: 'end',\n};\n\nexport function parseIMSC1(\n  payload: ArrayBuffer,\n  initPTS: TimestampOffset,\n  callBack: (cues: Array<VTTCue>) => any,\n  errorCallBack: (error: Error) => any,\n) {\n  const results = findBox(new Uint8Array(payload), ['mdat']);\n  if (results.length === 0) {\n    errorCallBack(new Error('Could not parse IMSC1 mdat'));\n    return;\n  }\n\n  const ttmlList = results.map((mdat) => utf8ArrayToStr(mdat));\n\n  const syncTime = toTimescaleFromScale(initPTS.baseTime, 1, initPTS.timescale);\n\n  try {\n    ttmlList.forEach((ttml) => callBack(parseTTML(ttml, syncTime)));\n  } catch (error) {\n    errorCallBack(error);\n  }\n}\n\nfunction parseTTML(ttml: string, syncTime: number): Array<VTTCue> {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(ttml, 'text/xml');\n  const tt = xmlDoc.getElementsByTagName('tt')[0];\n  if (!tt) {\n    throw new Error('Invalid ttml');\n  }\n  const defaultRateInfo = {\n    frameRate: 30,\n    subFrameRate: 1,\n    frameRateMultiplier: 0,\n    tickRate: 0,\n  };\n  const rateInfo: Object = Object.keys(defaultRateInfo).reduce(\n    (result, key) => {\n      result[key] = tt.getAttribute(`ttp:${key}`) || defaultRateInfo[key];\n      return result;\n    },\n    {},\n  );\n\n  const trim = tt.getAttribute('xml:space') !== 'preserve';\n\n  const styleElements = collectionToDictionary(\n    getElementCollection(tt, 'styling', 'style'),\n  );\n  const regionElements = collectionToDictionary(\n    getElementCollection(tt, 'layout', 'region'),\n  );\n  const cueElements = getElementCollection(tt, 'body', '[begin]');\n\n  return [].map\n    .call(cueElements, (cueElement) => {\n      const cueText = getTextContent(cueElement, trim);\n\n      if (!cueText || !cueElement.hasAttribute('begin')) {\n        return null;\n      }\n      const startTime = parseTtmlTime(\n        cueElement.getAttribute('begin'),\n        rateInfo,\n      );\n      const duration = parseTtmlTime(cueElement.getAttribute('dur'), rateInfo);\n      let endTime = parseTtmlTime(cueElement.getAttribute('end'), rateInfo);\n      if (startTime === null) {\n        throw timestampParsingError(cueElement);\n      }\n      if (endTime === null) {\n        if (duration === null) {\n          throw timestampParsingError(cueElement);\n        }\n        endTime = startTime + duration;\n      }\n      const cue = new VTTCue(startTime - syncTime, endTime - syncTime, cueText);\n      cue.id = generateCueId(cue.startTime, cue.endTime, cue.text);\n\n      const region = regionElements[cueElement.getAttribute('region')];\n      const style = styleElements[cueElement.getAttribute('style')];\n\n      // Apply styles to cue\n      const styles = getTtmlStyles(region, style, styleElements);\n      const { textAlign } = styles;\n      if (textAlign) {\n        // cue.positionAlign not settable in FF~2016\n        const lineAlign = textAlignToLineAlign[textAlign];\n        if (lineAlign) {\n          cue.lineAlign = lineAlign;\n        }\n        cue.align = textAlign as AlignSetting;\n      }\n      Object.assign(cue, styles);\n\n      return cue;\n    })\n    .filter((cue) => cue !== null);\n}\n\nfunction getElementCollection(\n  fromElement,\n  parentName,\n  childName,\n): Array<HTMLElement> {\n  const parent = fromElement.getElementsByTagName(parentName)[0];\n  if (parent) {\n    return [].slice.call(parent.querySelectorAll(childName));\n  }\n  return [];\n}\n\nfunction collectionToDictionary(elementsWithId: Array<HTMLElement>): {\n  [id: string]: HTMLElement;\n} {\n  return elementsWithId.reduce((dict, element: HTMLElement) => {\n    const id = element.getAttribute('xml:id');\n    if (id) {\n      dict[id] = element;\n    }\n    return dict;\n  }, {});\n}\n\nfunction getTextContent(element, trim): string {\n  return [].slice.call(element.childNodes).reduce((str, node, i) => {\n    if (node.nodeName === 'br' && i) {\n      return str + '\\n';\n    }\n    if (node.childNodes?.length) {\n      return getTextContent(node, trim);\n    } else if (trim) {\n      return str + node.textContent.trim().replace(/\\s+/g, ' ');\n    }\n    return str + node.textContent;\n  }, '');\n}\n\nfunction getTtmlStyles(\n  region,\n  style,\n  styleElements,\n): { [style: string]: string } {\n  const ttsNs = 'http://www.w3.org/ns/ttml#styling';\n  let regionStyle = null;\n  const styleAttributes = [\n    'displayAlign',\n    'textAlign',\n    'color',\n    'backgroundColor',\n    'fontSize',\n    'fontFamily',\n    // 'fontWeight',\n    // 'lineHeight',\n    // 'wrapOption',\n    // 'fontStyle',\n    // 'direction',\n    // 'writingMode'\n  ];\n\n  const regionStyleName = region?.hasAttribute('style')\n    ? region.getAttribute('style')\n    : null;\n\n  if (regionStyleName && styleElements.hasOwnProperty(regionStyleName)) {\n    regionStyle = styleElements[regionStyleName];\n  }\n\n  return styleAttributes.reduce((styles, name) => {\n    const value =\n      getAttributeNS(style, ttsNs, name) ||\n      getAttributeNS(region, ttsNs, name) ||\n      getAttributeNS(regionStyle, ttsNs, name);\n    if (value) {\n      styles[name] = value;\n    }\n    return styles;\n  }, {});\n}\n\nfunction getAttributeNS(element, ns, name): string | null {\n  if (!element) {\n    return null;\n  }\n  return element.hasAttributeNS(ns, name)\n    ? element.getAttributeNS(ns, name)\n    : null;\n}\n\nfunction timestampParsingError(node) {\n  return new Error(`Could not parse ttml timestamp ${node}`);\n}\n\nfunction parseTtmlTime(timeAttributeValue, rateInfo): number | null {\n  if (!timeAttributeValue) {\n    return null;\n  }\n  let seconds: number | null = parseTimeStamp(timeAttributeValue);\n  if (seconds === null) {\n    if (HMSF_REGEX.test(timeAttributeValue)) {\n      seconds = parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo);\n    } else if (TIME_UNIT_REGEX.test(timeAttributeValue)) {\n      seconds = parseTimeUnits(timeAttributeValue, rateInfo);\n    }\n  }\n  return seconds;\n}\n\nfunction parseHoursMinutesSecondsFrames(timeAttributeValue, rateInfo): number {\n  const m = HMSF_REGEX.exec(timeAttributeValue) as Array<any>;\n  const frames = (m[4] | 0) + (m[5] | 0) / rateInfo.subFrameRate;\n  return (\n    (m[1] | 0) * 3600 +\n    (m[2] | 0) * 60 +\n    (m[3] | 0) +\n    frames / rateInfo.frameRate\n  );\n}\n\nfunction parseTimeUnits(timeAttributeValue, rateInfo): number {\n  const m = TIME_UNIT_REGEX.exec(timeAttributeValue) as Array<any>;\n  const value = Number(m[1]);\n  const unit = m[2];\n  switch (unit) {\n    case 'h':\n      return value * 3600;\n    case 'm':\n      return value * 60;\n    case 'ms':\n      return value * 1000;\n    case 'f':\n      return value / rateInfo.frameRate;\n    case 't':\n      return value / rateInfo.tickRate;\n  }\n  return value;\n}\n","import type { CaptionScreen } from './cea-608-parser';\nimport type { TimelineController } from '../controller/timeline-controller';\n\nexport default class OutputFilter {\n  private timelineController: TimelineController;\n  private cueRanges: Array<[number, number]> = [];\n  private trackName: string;\n  private startTime: number | null = null;\n  private endTime: number | null = null;\n  private screen: CaptionScreen | null = null;\n\n  constructor(timelineController: TimelineController, trackName: string) {\n    this.timelineController = timelineController;\n    this.trackName = trackName;\n  }\n\n  dispatchCue() {\n    if (this.startTime === null) {\n      return;\n    }\n\n    this.timelineController.addCues(\n      this.trackName,\n      this.startTime,\n      this.endTime as number,\n      this.screen as CaptionScreen,\n      this.cueRanges,\n    );\n    this.startTime = null;\n  }\n\n  newCue(startTime: number, endTime: number, screen: CaptionScreen) {\n    if (this.startTime === null || this.startTime > startTime) {\n      this.startTime = startTime;\n    }\n\n    this.endTime = endTime;\n    this.screen = screen;\n    this.timelineController.createCaptionsTrack(this.trackName);\n  }\n\n  reset() {\n    this.cueRanges = [];\n    this.startTime = null;\n  }\n}\n","import { Events } from '../events';\nimport { PlaylistLevelType } from '../types/loader';\nimport Cea608Parser from '../utils/cea-608-parser';\nimport { IMSC1_CODEC, parseIMSC1 } from '../utils/imsc1-ttml-parser';\nimport {\n  subtitleOptionsIdentical,\n  subtitleTrackMatchesTextTrack,\n} from '../utils/media-option-attributes';\nimport { appendUint8Array } from '../utils/mp4-tools';\nimport OutputFilter from '../utils/output-filter';\nimport {\n  addCueToTrack,\n  clearCurrentCues,\n  filterSubtitleTracks,\n  removeCuesInRange,\n  sendAddTrackEvent,\n} from '../utils/texttrack-utils';\nimport { parseWebVTT } from '../utils/webvtt-parser';\nimport type { HlsConfig } from '../config';\nimport type Hls from '../hls';\nimport type { Fragment } from '../loader/fragment';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  BufferFlushingData,\n  FragDecryptedData,\n  FragLoadedData,\n  FragLoadingData,\n  FragParsingUserdataData,\n  InitPTSFoundData,\n  ManifestLoadedData,\n  MediaAttachingData,\n  MediaDetachingData,\n  SubtitleTracksUpdatedData,\n} from '../types/events';\nimport type { MediaPlaylist } from '../types/media-playlist';\nimport type { VTTCCs } from '../types/vtt';\nimport type { CaptionScreen } from '../utils/cea-608-parser';\nimport type { CuesInterface } from '../utils/cues';\nimport type { TimestampOffset } from '../utils/timescale-conversion';\n\ntype TrackProperties = {\n  label: string;\n  languageCode: string;\n  media?: MediaPlaylist;\n};\n\ntype NonNativeCaptionsTrack = {\n  _id?: string;\n  label: string;\n  kind: string;\n  default: boolean;\n  closedCaptions?: MediaPlaylist;\n  subtitleTrack?: MediaPlaylist;\n};\n\nexport class TimelineController implements ComponentAPI {\n  private hls: Hls;\n  private media: HTMLMediaElement | null = null;\n  private config: HlsConfig;\n  private enabled: boolean = true;\n  private Cues: CuesInterface;\n  private textTracks: Array<TextTrack> = [];\n  private tracks: Array<MediaPlaylist> = [];\n  private initPTS: TimestampOffset[] = [];\n  private unparsedVttFrags: Array<FragLoadedData | FragDecryptedData> = [];\n  private captionsTracks: Record<string, TextTrack> = {};\n  private nonNativeCaptionsTracks: Record<string, NonNativeCaptionsTrack> = {};\n  private cea608Parser1?: Cea608Parser;\n  private cea608Parser2?: Cea608Parser;\n  private lastCc: number = -1; // Last video (CEA-608) fragment CC\n  private lastSn: number = -1; // Last video (CEA-608) fragment MSN\n  private lastPartIndex: number = -1; // Last video (CEA-608) fragment Part Index\n  private prevCC: number = -1; // Last subtitle fragment CC\n  private vttCCs: VTTCCs = newVTTCCs();\n  private captionsProperties: {\n    textTrack1: TrackProperties;\n    textTrack2: TrackProperties;\n    textTrack3: TrackProperties;\n    textTrack4: TrackProperties;\n  };\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    this.config = hls.config;\n    this.Cues = hls.config.cueHandler;\n\n    this.captionsProperties = {\n      textTrack1: {\n        label: this.config.captionsTextTrack1Label,\n        languageCode: this.config.captionsTextTrack1LanguageCode,\n      },\n      textTrack2: {\n        label: this.config.captionsTextTrack2Label,\n        languageCode: this.config.captionsTextTrack2LanguageCode,\n      },\n      textTrack3: {\n        label: this.config.captionsTextTrack3Label,\n        languageCode: this.config.captionsTextTrack3LanguageCode,\n      },\n      textTrack4: {\n        label: this.config.captionsTextTrack4Label,\n        languageCode: this.config.captionsTextTrack4LanguageCode,\n      },\n    };\n\n    hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.on(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.on(Events.FRAG_LOADED, this.onFragLoaded, this);\n    hls.on(Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n    hls.on(Events.FRAG_DECRYPTED, this.onFragDecrypted, this);\n    hls.on(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.on(Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n    hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n  }\n\n  public destroy(): void {\n    const { hls } = this;\n    hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(Events.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this);\n    hls.off(Events.FRAG_LOADING, this.onFragLoading, this);\n    hls.off(Events.FRAG_LOADED, this.onFragLoaded, this);\n    hls.off(Events.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this);\n    hls.off(Events.FRAG_DECRYPTED, this.onFragDecrypted, this);\n    hls.off(Events.INIT_PTS_FOUND, this.onInitPtsFound, this);\n    hls.off(Events.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this);\n    hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n    // @ts-ignore\n    this.hls = this.config = this.media = null;\n    this.cea608Parser1 = this.cea608Parser2 = undefined;\n  }\n\n  private initCea608Parsers() {\n    const channel1 = new OutputFilter(this, 'textTrack1');\n    const channel2 = new OutputFilter(this, 'textTrack2');\n    const channel3 = new OutputFilter(this, 'textTrack3');\n    const channel4 = new OutputFilter(this, 'textTrack4');\n    this.cea608Parser1 = new Cea608Parser(1, channel1, channel2);\n    this.cea608Parser2 = new Cea608Parser(3, channel3, channel4);\n  }\n\n  public addCues(\n    trackName: string,\n    startTime: number,\n    endTime: number,\n    screen: CaptionScreen,\n    cueRanges: Array<[number, number]>,\n  ) {\n    // skip cues which overlap more than 50% with previously parsed time ranges\n    let merged = false;\n    for (let i = cueRanges.length; i--; ) {\n      const cueRange = cueRanges[i];\n      const overlap = intersection(\n        cueRange[0],\n        cueRange[1],\n        startTime,\n        endTime,\n      );\n      if (overlap >= 0) {\n        cueRange[0] = Math.min(cueRange[0], startTime);\n        cueRange[1] = Math.max(cueRange[1], endTime);\n        merged = true;\n        if (overlap / (endTime - startTime) > 0.5) {\n          return;\n        }\n      }\n    }\n    if (!merged) {\n      cueRanges.push([startTime, endTime]);\n    }\n\n    if (this.config.renderTextTracksNatively) {\n      const track = this.captionsTracks[trackName];\n      this.Cues.newCue(track, startTime, endTime, screen);\n    } else {\n      const cues = this.Cues.newCue(null, startTime, endTime, screen);\n      this.hls.trigger(Events.CUES_PARSED, {\n        type: 'captions',\n        cues,\n        track: trackName,\n      });\n    }\n  }\n\n  // Triggered when an initial PTS is found; used for synchronisation of WebVTT.\n  private onInitPtsFound(\n    event: Events.INIT_PTS_FOUND,\n    { frag, id, initPTS, timescale, trackId }: InitPTSFoundData,\n  ) {\n    const { unparsedVttFrags } = this;\n    if (id === PlaylistLevelType.MAIN) {\n      this.initPTS[frag.cc] = { baseTime: initPTS, timescale, trackId };\n    }\n\n    // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.\n    // Parse any unparsed fragments upon receiving the initial PTS.\n    if (unparsedVttFrags.length) {\n      this.unparsedVttFrags = [];\n      unparsedVttFrags.forEach((data) => {\n        if (this.initPTS[data.frag.cc]) {\n          this.onFragLoaded(Events.FRAG_LOADED, data as FragLoadedData);\n        } else {\n          this.hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n            success: false,\n            frag: data.frag,\n            error: new Error(\n              'Subtitle discontinuity domain does not match main',\n            ),\n          });\n        }\n      });\n    }\n  }\n\n  private getExistingTrack(label: string, language: string): TextTrack | null {\n    const { media } = this;\n    if (media) {\n      for (let i = 0; i < media.textTracks.length; i++) {\n        const textTrack = media.textTracks[i];\n        if (\n          canReuseVttTextTrack(textTrack, {\n            name: label,\n            lang: language,\n            characteristics:\n              'transcribes-spoken-dialog,describes-music-and-sound',\n            attrs: {} as any,\n          })\n        ) {\n          return textTrack;\n        }\n      }\n    }\n    return null;\n  }\n\n  public createCaptionsTrack(trackName: string) {\n    if (this.config.renderTextTracksNatively) {\n      this.createNativeTrack(trackName);\n    } else {\n      this.createNonNativeTrack(trackName);\n    }\n  }\n\n  private createNativeTrack(trackName: string) {\n    if (this.captionsTracks[trackName]) {\n      return;\n    }\n    const { captionsProperties, captionsTracks, media } = this;\n    const { label, languageCode } = captionsProperties[trackName];\n    // Enable reuse of existing text track.\n    const existingTrack = this.getExistingTrack(label, languageCode);\n    if (!existingTrack) {\n      const textTrack = this.createTextTrack('captions', label, languageCode);\n      if (textTrack) {\n        // Set a special property on the track so we know it's managed by Hls.js\n        textTrack[trackName] = true;\n        captionsTracks[trackName] = textTrack;\n      }\n    } else {\n      captionsTracks[trackName] = existingTrack;\n      clearCurrentCues(captionsTracks[trackName]);\n      sendAddTrackEvent(captionsTracks[trackName], media as HTMLMediaElement);\n    }\n  }\n\n  private createNonNativeTrack(trackName: string) {\n    if (this.nonNativeCaptionsTracks[trackName]) {\n      return;\n    }\n    // Create a list of a single track for the provider to consume\n    const trackProperties: TrackProperties = this.captionsProperties[trackName];\n    if (!trackProperties) {\n      return;\n    }\n    const label = trackProperties.label as string;\n    const track = {\n      _id: trackName,\n      label,\n      kind: 'captions',\n      default: trackProperties.media ? !!trackProperties.media.default : false,\n      closedCaptions: trackProperties.media,\n    };\n    this.nonNativeCaptionsTracks[trackName] = track;\n    this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [track] });\n  }\n\n  private createTextTrack(\n    kind: TextTrackKind,\n    label: string,\n    lang?: string,\n  ): TextTrack | undefined {\n    const media = this.media;\n    if (!media) {\n      return;\n    }\n    return media.addTextTrack(kind, label, lang);\n  }\n\n  private onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ) {\n    this.media = data.media;\n    if (!data.mediaSource) {\n      this._cleanTracks();\n    }\n  }\n\n  private onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const transferringMedia = !!data.transferMedia;\n    this.media = null;\n    if (transferringMedia) {\n      return;\n    }\n\n    const { captionsTracks } = this;\n    Object.keys(captionsTracks).forEach((trackName) => {\n      clearCurrentCues(captionsTracks[trackName]);\n      delete captionsTracks[trackName];\n    });\n    this.nonNativeCaptionsTracks = {};\n  }\n\n  private onManifestLoading() {\n    // Detect discontinuity in video fragment (CEA-608) parsing\n    this.lastCc = -1;\n    this.lastSn = -1;\n    this.lastPartIndex = -1;\n    // Detect discontinuity in subtitle manifests\n    this.prevCC = -1;\n    this.vttCCs = newVTTCCs();\n    // Reset tracks\n    this._cleanTracks();\n    this.tracks = [];\n    this.captionsTracks = {};\n    this.nonNativeCaptionsTracks = {};\n    this.textTracks = [];\n    this.unparsedVttFrags = [];\n    this.initPTS = [];\n    if (this.cea608Parser1 && this.cea608Parser2) {\n      this.cea608Parser1.reset();\n      this.cea608Parser2.reset();\n    }\n  }\n\n  private _cleanTracks() {\n    // clear outdated subtitles\n    const { media } = this;\n    if (!media) {\n      return;\n    }\n    const textTracks = media.textTracks;\n    if (textTracks) {\n      for (let i = 0; i < textTracks.length; i++) {\n        clearCurrentCues(textTracks[i]);\n      }\n    }\n  }\n\n  private onSubtitleTracksUpdated(\n    event: Events.SUBTITLE_TRACKS_UPDATED,\n    data: SubtitleTracksUpdatedData,\n  ) {\n    const tracks: Array<MediaPlaylist> = data.subtitleTracks || [];\n    const hasIMSC1 = tracks.some((track) => track.textCodec === IMSC1_CODEC);\n    if (this.config.enableWebVTT || (hasIMSC1 && this.config.enableIMSC1)) {\n      const listIsIdentical = subtitleOptionsIdentical(this.tracks, tracks);\n      if (listIsIdentical) {\n        this.tracks = tracks;\n        return;\n      }\n      this.textTracks = [];\n      this.tracks = tracks;\n\n      if (this.config.renderTextTracksNatively) {\n        const media = this.media;\n        const inUseTracks: (TextTrack | null)[] | null = media\n          ? filterSubtitleTracks(media.textTracks)\n          : null;\n\n        this.tracks.forEach((track, index) => {\n          // Reuse tracks with the same label and lang, but do not reuse 608/708 tracks\n          let textTrack: TextTrack | undefined;\n          if (inUseTracks) {\n            let inUseTrack: TextTrack | null = null;\n            for (let i = 0; i < inUseTracks.length; i++) {\n              if (\n                inUseTracks[i] &&\n                canReuseVttTextTrack(inUseTracks[i], track)\n              ) {\n                inUseTrack = inUseTracks[i];\n                inUseTracks[i] = null;\n                break;\n              }\n            }\n            if (inUseTrack) {\n              textTrack = inUseTrack;\n            }\n          }\n          if (textTrack) {\n            clearCurrentCues(textTrack);\n          } else {\n            const textTrackKind = captionsOrSubtitlesFromCharacteristics(track);\n            textTrack = this.createTextTrack(\n              textTrackKind,\n              track.name,\n              track.lang,\n            );\n            if (textTrack) {\n              textTrack.mode = 'disabled';\n            }\n          }\n          if (textTrack) {\n            this.textTracks.push(textTrack);\n          }\n        });\n        // Warn when video element has captions or subtitle TextTracks carried over from another source\n        if (inUseTracks?.length) {\n          const unusedTextTracks = inUseTracks\n            .filter((t) => t !== null)\n            .map((t) => (t as TextTrack).label);\n          if (unusedTextTracks.length) {\n            this.hls.logger.warn(\n              `Media element contains unused subtitle tracks: ${unusedTextTracks.join(\n                ', ',\n              )}. Replace media element for each source to clear TextTracks and captions menu.`,\n            );\n          }\n        }\n      } else if (this.tracks.length) {\n        // Create a list of tracks for the provider to consume\n        const tracksList = this.tracks.map((track) => {\n          return {\n            label: track.name,\n            kind: track.type.toLowerCase(),\n            default: track.default,\n            subtitleTrack: track,\n          };\n        });\n        this.hls.trigger(Events.NON_NATIVE_TEXT_TRACKS_FOUND, {\n          tracks: tracksList,\n        });\n      }\n    }\n  }\n\n  private onManifestLoaded(\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ) {\n    if (this.config.enableCEA708Captions && data.captions) {\n      data.captions.forEach((captionsTrack) => {\n        const instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(\n          captionsTrack.instreamId as string,\n        );\n        if (!instreamIdMatch) {\n          return;\n        }\n        const trackName = `textTrack${instreamIdMatch[1]}`;\n        const trackProperties: TrackProperties =\n          this.captionsProperties[trackName];\n        if (!trackProperties) {\n          return;\n        }\n        trackProperties.label = captionsTrack.name;\n        if (captionsTrack.lang) {\n          // optional attribute\n          trackProperties.languageCode = captionsTrack.lang;\n        }\n        trackProperties.media = captionsTrack;\n      });\n    }\n  }\n\n  private closedCaptionsForLevel(frag: Fragment): string | undefined {\n    const level = this.hls.levels[frag.level];\n    return level?.attrs['CLOSED-CAPTIONS'];\n  }\n\n  private onFragLoading(event: Events.FRAG_LOADING, data: FragLoadingData) {\n    // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack\n    if (this.enabled && data.frag.type === PlaylistLevelType.MAIN) {\n      const { cea608Parser1, cea608Parser2, lastSn } = this;\n      const { cc, sn } = data.frag;\n      const partIndex = data.part?.index ?? -1;\n      if (cea608Parser1 && cea608Parser2) {\n        if (\n          sn !== lastSn + 1 ||\n          (sn === lastSn && partIndex !== this.lastPartIndex + 1) ||\n          cc !== this.lastCc\n        ) {\n          cea608Parser1.reset();\n          cea608Parser2.reset();\n        }\n      }\n      this.lastCc = cc as number;\n      this.lastSn = sn as number;\n      this.lastPartIndex = partIndex;\n    }\n  }\n\n  private onFragLoaded(\n    event: Events.FRAG_LOADED,\n    data: FragDecryptedData | FragLoadedData,\n  ) {\n    const { frag, payload } = data;\n    if (frag.type === PlaylistLevelType.SUBTITLE) {\n      // If fragment is subtitle type, parse as WebVTT.\n      if (payload.byteLength) {\n        const decryptData = frag.decryptdata;\n        // fragment after decryption has a stats object\n        const decrypted = 'stats' in data;\n        // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.\n        if (decryptData == null || !decryptData.encrypted || decrypted) {\n          const trackPlaylistMedia = this.tracks[frag.level];\n          const vttCCs = this.vttCCs;\n          if (!vttCCs[frag.cc]) {\n            vttCCs[frag.cc] = {\n              start: frag.start,\n              prevCC: this.prevCC,\n              new: true,\n            };\n            this.prevCC = frag.cc;\n          }\n          if (\n            trackPlaylistMedia &&\n            trackPlaylistMedia.textCodec === IMSC1_CODEC\n          ) {\n            this._parseIMSC1(frag, payload);\n          } else {\n            this._parseVTTs(data);\n          }\n        }\n      } else {\n        // In case there is no payload, finish unsuccessfully.\n        this.hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag,\n          error: new Error('Empty subtitle payload'),\n        });\n      }\n    }\n  }\n\n  private _parseIMSC1(frag: Fragment, payload: ArrayBuffer) {\n    const hls = this.hls;\n    parseIMSC1(\n      payload,\n      this.initPTS[frag.cc],\n      (cues) => {\n        this._appendCues(cues, frag.level);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: true,\n          frag: frag,\n        });\n      },\n      (error) => {\n        hls.logger.log(`Failed to parse IMSC1: ${error}`);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag: frag,\n          error,\n        });\n      },\n    );\n  }\n\n  private _parseVTTs(data: FragDecryptedData | FragLoadedData) {\n    const { frag, payload } = data;\n    // We need an initial synchronisation PTS. Store fragments as long as none has arrived\n    const { initPTS, unparsedVttFrags } = this;\n    const maxAvCC = initPTS.length - 1;\n    if (!initPTS[frag.cc] && maxAvCC === -1) {\n      unparsedVttFrags.push(data);\n      return;\n    }\n\n    const hls = this.hls;\n    // Parse the WebVTT file contents.\n    const payloadWebVTT = frag.initSegment?.data\n      ? appendUint8Array(frag.initSegment.data, new Uint8Array(payload)).buffer\n      : payload;\n    parseWebVTT(\n      payloadWebVTT,\n      this.initPTS[frag.cc],\n      this.vttCCs,\n      frag.cc,\n      frag.start,\n      (cues) => {\n        this._appendCues(cues, frag.level);\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: true,\n          frag: frag,\n        });\n      },\n      (error) => {\n        const missingInitPTS =\n          error.message === 'Missing initPTS for VTT MPEGTS';\n        if (missingInitPTS) {\n          unparsedVttFrags.push(data);\n        } else {\n          this._fallbackToIMSC1(frag, payload);\n        }\n        // Something went wrong while parsing. Trigger event with success false.\n        hls.logger.log(`Failed to parse VTT cue: ${error}`);\n        if (missingInitPTS && maxAvCC > frag.cc) {\n          return;\n        }\n        hls.trigger(Events.SUBTITLE_FRAG_PROCESSED, {\n          success: false,\n          frag: frag,\n          error,\n        });\n      },\n    );\n  }\n\n  private _fallbackToIMSC1(frag: Fragment, payload: ArrayBuffer) {\n    // If textCodec is unknown, try parsing as IMSC1. Set textCodec based on the result\n    const trackPlaylistMedia = this.tracks[frag.level];\n    if (!trackPlaylistMedia.textCodec) {\n      parseIMSC1(\n        payload,\n        this.initPTS[frag.cc],\n        () => {\n          trackPlaylistMedia.textCodec = IMSC1_CODEC;\n          this._parseIMSC1(frag, payload);\n        },\n        () => {\n          trackPlaylistMedia.textCodec = 'wvtt';\n        },\n      );\n    }\n  }\n\n  private _appendCues(cues: VTTCue[], fragLevel: number) {\n    const hls = this.hls;\n    if (this.config.renderTextTracksNatively) {\n      const textTrack = this.textTracks[fragLevel];\n      // WebVTTParser.parse is an async method and if the currently selected text track mode is set to \"disabled\"\n      // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null\n      // and trying to access getCueById method of cues will throw an exception\n      // Because we check if the mode is disabled, we can force check `cues` below. They can't be null.\n      if (!textTrack || textTrack.mode === 'disabled') {\n        return;\n      }\n      cues.forEach((cue) => addCueToTrack(textTrack, cue));\n    } else {\n      const currentTrack = this.tracks[fragLevel];\n      if (!currentTrack) {\n        return;\n      }\n      const track = currentTrack.default ? 'default' : 'subtitles' + fragLevel;\n      hls.trigger(Events.CUES_PARSED, { type: 'subtitles', cues, track });\n    }\n  }\n\n  private onFragDecrypted(\n    event: Events.FRAG_DECRYPTED,\n    data: FragDecryptedData,\n  ) {\n    const { frag } = data;\n    if (frag.type === PlaylistLevelType.SUBTITLE) {\n      this.onFragLoaded(Events.FRAG_LOADED, data as unknown as FragLoadedData);\n    }\n  }\n\n  private onSubtitleTracksCleared() {\n    this.tracks = [];\n    this.captionsTracks = {};\n  }\n\n  private onFragParsingUserdata(\n    event: Events.FRAG_PARSING_USERDATA,\n    data: FragParsingUserdataData,\n  ) {\n    if (!this.enabled || !this.config.enableCEA708Captions) {\n      return;\n    }\n    const { frag, samples } = data;\n    if (\n      frag.type === PlaylistLevelType.MAIN &&\n      this.closedCaptionsForLevel(frag) === 'NONE'\n    ) {\n      return;\n    }\n    // If the event contains captions (found in the bytes property), push all bytes into the parser immediately\n    // It will create the proper timestamps based on the PTS value\n    for (let i = 0; i < samples.length; i++) {\n      const ccBytes = samples[i].bytes;\n      if (ccBytes) {\n        if (!this.cea608Parser1) {\n          this.initCea608Parsers();\n        }\n        const ccdatas = this.extractCea608Data(ccBytes);\n        this.cea608Parser1!.addData(samples[i].pts, ccdatas[0]);\n        this.cea608Parser2!.addData(samples[i].pts, ccdatas[1]);\n      }\n    }\n  }\n\n  onBufferFlushing(\n    event: Events.BUFFER_FLUSHING,\n    { startOffset, endOffset, endOffsetSubtitles, type }: BufferFlushingData,\n  ) {\n    const { media } = this;\n    if (!media || media.currentTime < endOffset) {\n      return;\n    }\n    // Clear 608 caption cues from the captions TextTracks when the video back buffer is flushed\n    // Forward cues are never removed because we can loose streamed 608 content from recent fragments\n    if (!type || type === 'video') {\n      const { captionsTracks } = this;\n      Object.keys(captionsTracks).forEach((trackName) =>\n        removeCuesInRange(captionsTracks[trackName], startOffset, endOffset),\n      );\n    }\n    if (this.config.renderTextTracksNatively) {\n      // Clear VTT/IMSC1 subtitle cues from the subtitle TextTracks when the back buffer is flushed\n      if (startOffset === 0 && endOffsetSubtitles !== undefined) {\n        const { textTracks } = this;\n        Object.keys(textTracks).forEach((trackName) =>\n          removeCuesInRange(\n            textTracks[trackName],\n            startOffset,\n            endOffsetSubtitles,\n          ),\n        );\n      }\n    }\n  }\n\n  private extractCea608Data(byteArray: Uint8Array): number[][] {\n    const actualCCBytes: number[][] = [[], []];\n    const count = byteArray[0] & 0x1f;\n    let position = 2;\n\n    for (let j = 0; j < count; j++) {\n      const tmpByte = byteArray[position++];\n      const ccbyte1 = 0x7f & byteArray[position++];\n      const ccbyte2 = 0x7f & byteArray[position++];\n      if (ccbyte1 === 0 && ccbyte2 === 0) {\n        continue;\n      }\n      const ccValid = (0x04 & tmpByte) !== 0; // Support all four channels\n      if (ccValid) {\n        const ccType = 0x03 & tmpByte;\n        if (\n          0x00 /* CEA608 field1*/ === ccType ||\n          0x01 /* CEA608 field2*/ === ccType\n        ) {\n          // Exclude CEA708 CC data.\n          actualCCBytes[ccType].push(ccbyte1);\n          actualCCBytes[ccType].push(ccbyte2);\n        }\n      }\n    }\n    return actualCCBytes;\n  }\n}\n\nfunction captionsOrSubtitlesFromCharacteristics(\n  track: Pick<MediaPlaylist, 'name' | 'lang' | 'attrs' | 'characteristics'>,\n): TextTrackKind {\n  if (track.characteristics) {\n    if (\n      /transcribes-spoken-dialog/gi.test(track.characteristics) &&\n      /describes-music-and-sound/gi.test(track.characteristics)\n    ) {\n      return 'captions';\n    }\n  }\n\n  return 'subtitles';\n}\n\nfunction canReuseVttTextTrack(\n  inUseTrack: TextTrack | null,\n  manifestTrack: Pick<\n    MediaPlaylist,\n    'name' | 'lang' | 'attrs' | 'characteristics'\n  >,\n): boolean {\n  return (\n    !!inUseTrack &&\n    inUseTrack.kind === captionsOrSubtitlesFromCharacteristics(manifestTrack) &&\n    subtitleTrackMatchesTextTrack(manifestTrack, inUseTrack)\n  );\n}\n\nfunction intersection(x1: number, x2: number, y1: number, y2: number): number {\n  return Math.min(x2, y2) - Math.max(x1, y1);\n}\n\nfunction newVTTCCs(): VTTCCs {\n  return {\n    ccOffset: 0,\n    presentationOffset: 0,\n    0: {\n      start: 0,\n      prevCC: -1,\n      new: true,\n    },\n  };\n}\n","import { addCueToTrack } from './texttrack-utils';\nimport { fixLineBreaks } from './vttparser';\nimport { generateCueId } from './webvtt-parser';\nimport type { CaptionScreen, Row } from './cea-608-parser';\n\nconst WHITESPACE_CHAR = /\\s/;\n\nexport interface CuesInterface {\n  newCue(\n    track: TextTrack | null,\n    startTime: number,\n    endTime: number,\n    captionScreen: CaptionScreen,\n  ): VTTCue[];\n}\n\nconst Cues: CuesInterface = {\n  newCue(\n    track: TextTrack | null,\n    startTime: number,\n    endTime: number,\n    captionScreen: CaptionScreen,\n  ): VTTCue[] {\n    const result: VTTCue[] = [];\n    let row: Row;\n    // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers\n    let cue: VTTCue;\n    let indenting: boolean;\n    let indent: number;\n    let text: string;\n    const Cue = (self.VTTCue || self.TextTrackCue) as any;\n\n    for (let r = 0; r < captionScreen.rows.length; r++) {\n      row = captionScreen.rows[r];\n      indenting = true;\n      indent = 0;\n      text = '';\n\n      if (!row.isEmpty()) {\n        for (let c = 0; c < row.chars.length; c++) {\n          if (WHITESPACE_CHAR.test(row.chars[c].uchar) && indenting) {\n            indent++;\n          } else {\n            text += row.chars[c].uchar;\n            indenting = false;\n          }\n        }\n        // To be used for cleaning-up orphaned roll-up captions\n        row.cueStartTime = startTime;\n\n        // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n        if (startTime === endTime) {\n          endTime += 0.0001;\n        }\n\n        if (indent >= 16) {\n          indent--;\n        } else {\n          indent++;\n        }\n\n        const cueText = fixLineBreaks(text.trim());\n        const id = generateCueId(startTime, endTime, cueText);\n\n        // If this cue already exists in the track do not push it\n        if (!track?.cues?.getCueById(id)) {\n          cue = new Cue(startTime, endTime, cueText);\n          cue.id = id;\n          cue.line = r + 1;\n          cue.align = 'left';\n          // Clamp the position between 10 and 80 percent (CEA-608 PAC indent code)\n          // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608\n          // Firefox throws an exception and captions break with out of bounds 0-100 values\n          cue.position = 10 + Math.min(80, Math.floor((indent * 8) / 32) * 10);\n          result.push(cue);\n        }\n      }\n    }\n    if (track && result.length) {\n      // Sort bottom cues in reverse order so that they render in line order when overlapping in Chrome\n      result.sort((cueA, cueB) => {\n        if (cueA.line === 'auto' || cueB.line === 'auto') {\n          return 0;\n        }\n        if (cueA.line > 8 && cueB.line > 8) {\n          return cueB.line - cueA.line;\n        }\n        return cueA.line - cueB.line;\n      });\n      result.forEach((cue) => addCueToTrack(track, cue));\n    }\n    return result;\n  },\n};\n\nexport default Cues;\n","import ChunkCache from '../demux/chunk-cache';\nimport { isPromise } from '../demux/transmuxer';\nimport { LoadStats } from '../loader/load-stats';\nimport type { HlsConfig } from '../config';\nimport type {\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderOnProgress,\n  LoaderResponse,\n  LoaderStats,\n} from '../types/loader';\n\nexport function fetchSupported() {\n  if (\n    // @ts-ignore\n    self.fetch &&\n    self.AbortController &&\n    self.ReadableStream &&\n    self.Request\n  ) {\n    try {\n      new self.ReadableStream({}); // eslint-disable-line no-new\n      return true;\n    } catch (e) {\n      /* noop */\n    }\n  }\n  return false;\n}\n\nconst BYTERANGE = /(\\d+)-(\\d+)\\/(\\d+)/;\n\nclass FetchLoader implements Loader<LoaderContext> {\n  private fetchSetup: NonNullable<HlsConfig['fetchSetup']>;\n  private requestTimeout?: number;\n  private request: Promise<Request> | Request | null = null;\n  private response: Response | null = null;\n  private controller: AbortController;\n  public context: LoaderContext | null = null;\n  private config: LoaderConfiguration | null = null;\n  private callbacks: LoaderCallbacks<LoaderContext> | null = null;\n  public stats: LoaderStats;\n  private loader: Response | null = null;\n\n  constructor(config: HlsConfig) {\n    this.fetchSetup = config.fetchSetup || getRequest;\n    this.controller = new self.AbortController();\n    this.stats = new LoadStats();\n  }\n\n  destroy(): void {\n    this.loader =\n      this.callbacks =\n      this.context =\n      this.config =\n      this.request =\n        null;\n    this.abortInternal();\n    this.response = null;\n    // @ts-ignore\n    this.fetchSetup = this.controller = this.stats = null;\n  }\n\n  abortInternal(): void {\n    if (this.controller && !this.stats.loading.end) {\n      this.stats.aborted = true;\n      this.controller.abort();\n    }\n  }\n\n  abort(): void {\n    this.abortInternal();\n    if (this.callbacks?.onAbort) {\n      this.callbacks.onAbort(\n        this.stats,\n        this.context as LoaderContext,\n        this.response,\n      );\n    }\n  }\n\n  load(\n    context: LoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<LoaderContext>,\n  ): void {\n    const stats = this.stats;\n    if (stats.loading.start) {\n      throw new Error('Loader can only be used once.');\n    }\n    stats.loading.start = self.performance.now();\n\n    const initParams = getRequestParameters(context, this.controller.signal);\n    const isArrayBuffer = context.responseType === 'arraybuffer';\n    const LENGTH = isArrayBuffer ? 'byteLength' : 'length';\n    const { maxTimeToFirstByteMs, maxLoadTimeMs } = config.loadPolicy;\n\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.request = this.fetchSetup(context, initParams);\n    self.clearTimeout(this.requestTimeout);\n    config.timeout =\n      maxTimeToFirstByteMs && Number.isFinite(maxTimeToFirstByteMs)\n        ? maxTimeToFirstByteMs\n        : maxLoadTimeMs;\n    this.requestTimeout = self.setTimeout(() => {\n      if (this.callbacks) {\n        this.abortInternal();\n        this.callbacks.onTimeout(stats, context, this.response);\n      }\n    }, config.timeout);\n\n    const fetchPromise = isPromise(this.request)\n      ? this.request.then(self.fetch)\n      : self.fetch(this.request);\n\n    fetchPromise\n      .then((response: Response): Promise<string | ArrayBuffer> => {\n        this.response = this.loader = response;\n\n        const first = Math.max(self.performance.now(), stats.loading.start);\n\n        self.clearTimeout(this.requestTimeout);\n        config.timeout = maxLoadTimeMs;\n        this.requestTimeout = self.setTimeout(\n          () => {\n            if (this.callbacks) {\n              this.abortInternal();\n              this.callbacks.onTimeout(stats, context, this.response);\n            }\n          },\n          maxLoadTimeMs - (first - stats.loading.start),\n        );\n\n        if (!response.ok) {\n          const { status, statusText } = response;\n          throw new FetchError(\n            statusText || 'fetch, bad network response',\n            status,\n            response,\n          );\n        }\n        stats.loading.first = first;\n\n        stats.total = getContentLength(response.headers) || stats.total;\n\n        const onProgress = this.callbacks?.onProgress;\n        if (onProgress && Number.isFinite(config.highWaterMark)) {\n          return this.loadProgressively(\n            response,\n            stats,\n            context,\n            config.highWaterMark,\n            onProgress,\n          );\n        }\n\n        if (isArrayBuffer) {\n          return response.arrayBuffer();\n        }\n        if (context.responseType === 'json') {\n          return response.json();\n        }\n        return response.text();\n      })\n      .then((responseData: string | ArrayBuffer) => {\n        const response = this.response;\n        if (!response) {\n          throw new Error('loader destroyed');\n        }\n        self.clearTimeout(this.requestTimeout);\n        stats.loading.end = Math.max(\n          self.performance.now(),\n          stats.loading.first,\n        );\n        const total = responseData[LENGTH];\n        if (total) {\n          stats.loaded = stats.total = total;\n        }\n\n        const loaderResponse: LoaderResponse = {\n          url: response.url,\n          data: responseData,\n          code: response.status,\n        };\n\n        const onProgress = this.callbacks?.onProgress;\n        if (onProgress && !Number.isFinite(config.highWaterMark)) {\n          onProgress(stats, context, responseData, response);\n        }\n\n        this.callbacks?.onSuccess(loaderResponse, stats, context, response);\n      })\n      .catch((error) => {\n        self.clearTimeout(this.requestTimeout);\n        if (stats.aborted) {\n          return;\n        }\n        // CORS errors result in an undefined code. Set it to 0 here to align with XHR's behavior\n        // when destroying, 'error' itself can be undefined\n        const code: number = !error ? 0 : error.code || 0;\n        const text: string = !error ? null : error.message;\n        this.callbacks?.onError(\n          { code, text },\n          context,\n          error ? error.details : null,\n          stats,\n        );\n      });\n  }\n\n  getCacheAge(): number | null {\n    let result: number | null = null;\n    if (this.response) {\n      const ageHeader = this.response.headers.get('age');\n      result = ageHeader ? parseFloat(ageHeader) : null;\n    }\n    return result;\n  }\n\n  getResponseHeader(name: string): string | null {\n    return this.response ? this.response.headers.get(name) : null;\n  }\n\n  private loadProgressively(\n    response: Response,\n    stats: LoaderStats,\n    context: LoaderContext,\n    highWaterMark: number = 0,\n    onProgress: LoaderOnProgress<LoaderContext>,\n  ): Promise<ArrayBuffer> {\n    const chunkCache = new ChunkCache();\n    const reader = (response.body as ReadableStream).getReader();\n\n    const pump = (): Promise<ArrayBuffer> => {\n      return reader\n        .read()\n        .then((data) => {\n          if (data.done) {\n            if (chunkCache.dataLength) {\n              onProgress(stats, context, chunkCache.flush().buffer, response);\n            }\n\n            return Promise.resolve(new ArrayBuffer(0));\n          }\n          const chunk: Uint8Array<ArrayBuffer> = data.value;\n          const len = chunk.length;\n          stats.loaded += len;\n          if (len < highWaterMark || chunkCache.dataLength) {\n            // The current chunk is too small to to be emitted or the cache already has data\n            // Push it to the cache\n            chunkCache.push(chunk);\n            if (chunkCache.dataLength >= highWaterMark) {\n              // flush in order to join the typed arrays\n              onProgress(stats, context, chunkCache.flush().buffer, response);\n            }\n          } else {\n            // If there's nothing cached already, and the chache is large enough\n            // just emit the progress event\n            onProgress(stats, context, chunk.buffer, response);\n          }\n          return pump();\n        })\n        .catch(() => {\n          /* aborted */\n          return Promise.reject();\n        });\n    };\n\n    return pump();\n  }\n}\n\nfunction getRequestParameters(context: LoaderContext, signal): any {\n  const initParams: any = {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'same-origin',\n    signal,\n    headers: new self.Headers(Object.assign({}, context.headers)),\n  };\n\n  if (context.rangeEnd) {\n    initParams.headers.set(\n      'Range',\n      'bytes=' + context.rangeStart + '-' + String(context.rangeEnd - 1),\n    );\n  }\n\n  return initParams;\n}\n\nfunction getByteRangeLength(byteRangeHeader: string): number | undefined {\n  const result = BYTERANGE.exec(byteRangeHeader);\n  if (result) {\n    return parseInt(result[2]) - parseInt(result[1]) + 1;\n  }\n}\n\nfunction getContentLength(headers: Headers): number | undefined {\n  const contentRange = headers.get('Content-Range');\n  if (contentRange) {\n    const byteRangeLength = getByteRangeLength(contentRange);\n    if (Number.isFinite(byteRangeLength)) {\n      return byteRangeLength;\n    }\n  }\n  const contentLength = headers.get('Content-Length');\n  if (contentLength) {\n    return parseInt(contentLength);\n  }\n}\n\nfunction getRequest(context: LoaderContext, initParams: any): Request {\n  return new self.Request(context.url, initParams);\n}\n\nclass FetchError extends Error {\n  public code: number;\n  public details: any;\n  constructor(message: string, code: number, details: any) {\n    super(message);\n    this.code = code;\n    this.details = details;\n  }\n}\n\nexport default FetchLoader;\n","import { getRetryDelay, shouldRetry } from './error-helper';\nimport { LoadStats } from '../loader/load-stats';\nimport { logger } from '../utils/logger';\nimport type { HlsConfig } from '../config';\nimport type { RetryConfig } from '../config';\nimport type {\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderResponse,\n  LoaderStats,\n} from '../types/loader';\n\nconst AGE_HEADER_LINE_REGEX = /^age:\\s*[\\d.]+\\s*$/im;\n\nclass XhrLoader implements Loader<LoaderContext> {\n  private xhrSetup:\n    | ((xhr: XMLHttpRequest, url: string) => Promise<void> | void)\n    | null;\n  private requestTimeout?: number;\n  private retryTimeout?: number;\n  private retryDelay: number;\n  private config: LoaderConfiguration | null = null;\n  private callbacks: LoaderCallbacks<LoaderContext> | null = null;\n  public context: LoaderContext | null = null;\n\n  private loader: XMLHttpRequest | null = null;\n  public stats: LoaderStats;\n\n  constructor(config: HlsConfig) {\n    this.xhrSetup = config ? config.xhrSetup || null : null;\n    this.stats = new LoadStats();\n    this.retryDelay = 0;\n  }\n\n  destroy() {\n    this.callbacks = null;\n    this.abortInternal();\n    this.loader = null;\n    this.config = null;\n    this.context = null;\n    this.xhrSetup = null;\n  }\n\n  abortInternal() {\n    const loader = this.loader;\n    self.clearTimeout(this.requestTimeout);\n    self.clearTimeout(this.retryTimeout);\n    if (loader) {\n      loader.onreadystatechange = null;\n      loader.onprogress = null;\n      if (loader.readyState !== 4) {\n        this.stats.aborted = true;\n        loader.abort();\n      }\n    }\n  }\n\n  abort() {\n    this.abortInternal();\n    if (this.callbacks?.onAbort) {\n      this.callbacks.onAbort(\n        this.stats,\n        this.context as LoaderContext,\n        this.loader,\n      );\n    }\n  }\n\n  load(\n    context: LoaderContext,\n    config: LoaderConfiguration,\n    callbacks: LoaderCallbacks<LoaderContext>,\n  ) {\n    if (this.stats.loading.start) {\n      throw new Error('Loader can only be used once.');\n    }\n    this.stats.loading.start = self.performance.now();\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.loadInternal();\n  }\n\n  loadInternal() {\n    const { config, context } = this;\n    if (!config || !context) {\n      return;\n    }\n    const xhr = (this.loader = new self.XMLHttpRequest());\n\n    const stats = this.stats;\n    stats.loading.first = 0;\n    stats.loaded = 0;\n    stats.aborted = false;\n    const xhrSetup = this.xhrSetup;\n\n    if (xhrSetup) {\n      Promise.resolve()\n        .then(() => {\n          if (this.loader !== xhr || this.stats.aborted) return;\n          return xhrSetup(xhr, context.url);\n        })\n        .catch((error: Error) => {\n          if (this.loader !== xhr || this.stats.aborted) return;\n          xhr.open('GET', context.url, true);\n          return xhrSetup(xhr, context.url);\n        })\n        .then(() => {\n          if (this.loader !== xhr || this.stats.aborted) return;\n          this.openAndSendXhr(xhr, context, config);\n        })\n        .catch((error: Error) => {\n          // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n          this.callbacks?.onError(\n            { code: xhr.status, text: error.message },\n            context,\n            xhr,\n            stats,\n          );\n          return;\n        });\n    } else {\n      this.openAndSendXhr(xhr, context, config);\n    }\n  }\n\n  openAndSendXhr(\n    xhr: XMLHttpRequest,\n    context: LoaderContext,\n    config: LoaderConfiguration,\n  ) {\n    if (!xhr.readyState) {\n      xhr.open('GET', context.url, true);\n    }\n\n    const headers = context.headers;\n    const { maxTimeToFirstByteMs, maxLoadTimeMs } = config.loadPolicy;\n    if (headers) {\n      for (const header in headers) {\n        xhr.setRequestHeader(header, headers[header]);\n      }\n    }\n\n    if (context.rangeEnd) {\n      xhr.setRequestHeader(\n        'Range',\n        'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1),\n      );\n    }\n\n    xhr.onreadystatechange = this.readystatechange.bind(this);\n    xhr.onprogress = this.loadprogress.bind(this);\n    xhr.responseType = context.responseType as XMLHttpRequestResponseType;\n    // setup timeout before we perform request\n    self.clearTimeout(this.requestTimeout);\n    config.timeout =\n      maxTimeToFirstByteMs && Number.isFinite(maxTimeToFirstByteMs)\n        ? maxTimeToFirstByteMs\n        : maxLoadTimeMs;\n    this.requestTimeout = self.setTimeout(\n      this.loadtimeout.bind(this),\n      config.timeout,\n    );\n    xhr.send();\n  }\n\n  readystatechange() {\n    const { context, loader: xhr, stats } = this;\n    if (!context || !xhr) {\n      return;\n    }\n    const readyState = xhr.readyState;\n    const config = this.config as LoaderConfiguration;\n\n    // don't proceed if xhr has been aborted\n    if (stats.aborted) {\n      return;\n    }\n\n    // >= HEADERS_RECEIVED\n    if (readyState >= 2) {\n      if (stats.loading.first === 0) {\n        stats.loading.first = Math.max(\n          self.performance.now(),\n          stats.loading.start,\n        );\n        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n        if (config.timeout !== config.loadPolicy.maxLoadTimeMs) {\n          self.clearTimeout(this.requestTimeout);\n          config.timeout = config.loadPolicy.maxLoadTimeMs;\n          this.requestTimeout = self.setTimeout(\n            this.loadtimeout.bind(this),\n            config.loadPolicy.maxLoadTimeMs -\n              (stats.loading.first - stats.loading.start),\n          );\n        }\n      }\n\n      if (readyState === 4) {\n        self.clearTimeout(this.requestTimeout);\n        xhr.onreadystatechange = null;\n        xhr.onprogress = null;\n        const status = xhr.status;\n        // http status between 200 to 299 are all successful\n        const useResponseText =\n          xhr.responseType === 'text' ? xhr.responseText : null;\n        if (status >= 200 && status < 300) {\n          const data = useResponseText ?? xhr.response;\n          if (data != null) {\n            stats.loading.end = Math.max(\n              self.performance.now(),\n              stats.loading.first,\n            );\n            const len =\n              xhr.responseType === 'arraybuffer'\n                ? data.byteLength\n                : data.length;\n            stats.loaded = stats.total = len;\n            stats.bwEstimate =\n              (stats.total * 8000) / (stats.loading.end - stats.loading.first);\n            const onProgress = this.callbacks?.onProgress;\n            if (onProgress) {\n              onProgress(stats, context, data, xhr);\n            }\n            const response: LoaderResponse = {\n              url: xhr.responseURL,\n              data: data,\n              code: status,\n            };\n            this.callbacks?.onSuccess(response, stats, context, xhr);\n            return;\n          }\n        }\n\n        // Handle bad status or nullish response\n        const retryConfig = config.loadPolicy.errorRetry;\n        const retryCount = stats.retry;\n        // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n        const response: LoaderResponse = {\n          url: context.url,\n          data: undefined,\n          code: status,\n        };\n        if (shouldRetry(retryConfig, retryCount, false, response)) {\n          this.retry(retryConfig);\n        } else {\n          logger.error(`${status} while loading ${context.url}`);\n          this.callbacks?.onError(\n            { code: status, text: xhr.statusText },\n            context,\n            xhr,\n            stats,\n          );\n        }\n      }\n    }\n  }\n\n  loadtimeout() {\n    if (!this.config) return;\n    const retryConfig = this.config.loadPolicy.timeoutRetry;\n    const retryCount = this.stats.retry;\n    if (shouldRetry(retryConfig, retryCount, true)) {\n      this.retry(retryConfig);\n    } else {\n      logger.warn(`timeout while loading ${this.context?.url}`);\n      const callbacks = this.callbacks;\n      if (callbacks) {\n        this.abortInternal();\n        callbacks.onTimeout(\n          this.stats,\n          this.context as LoaderContext,\n          this.loader,\n        );\n      }\n    }\n  }\n\n  retry(retryConfig: RetryConfig) {\n    const { context, stats } = this;\n    this.retryDelay = getRetryDelay(retryConfig, stats.retry);\n    stats.retry++;\n    logger.warn(\n      `${\n        status ? 'HTTP Status ' + status : 'Timeout'\n      } while loading ${context?.url}, retrying ${stats.retry}/${\n        retryConfig.maxNumRetry\n      } in ${this.retryDelay}ms`,\n    );\n    // abort and reset internal state\n    this.abortInternal();\n    this.loader = null;\n    // schedule retry\n    self.clearTimeout(this.retryTimeout);\n    this.retryTimeout = self.setTimeout(\n      this.loadInternal.bind(this),\n      this.retryDelay,\n    );\n  }\n\n  loadprogress(event: ProgressEvent) {\n    const stats = this.stats;\n\n    stats.loaded = event.loaded;\n    if (event.lengthComputable) {\n      stats.total = event.total;\n    }\n  }\n\n  getCacheAge(): number | null {\n    let result: number | null = null;\n    if (\n      this.loader &&\n      AGE_HEADER_LINE_REGEX.test(this.loader.getAllResponseHeaders())\n    ) {\n      const ageHeader = this.loader.getResponseHeader('age');\n      result = ageHeader ? parseFloat(ageHeader) : null;\n    }\n    return result;\n  }\n\n  getResponseHeader(name: string): string | null {\n    if (\n      this.loader &&\n      new RegExp(`^${name}:\\\\s*[\\\\d.]+\\\\s*$`, 'im').test(\n        this.loader.getAllResponseHeaders(),\n      )\n    ) {\n      return this.loader.getResponseHeader(name);\n    }\n    return null;\n  }\n}\n\nexport default XhrLoader;\n","import AbrController from './controller/abr-controller';\nimport AudioStreamController from './controller/audio-stream-controller';\nimport AudioTrackController from './controller/audio-track-controller';\nimport BufferController from './controller/buffer-controller';\nimport CapLevelController from './controller/cap-level-controller';\nimport CMCDController from './controller/cmcd-controller';\nimport ContentSteeringController from './controller/content-steering-controller';\nimport EMEController from './controller/eme-controller';\nimport ErrorController from './controller/error-controller';\nimport FPSController from './controller/fps-controller';\nimport InterstitialsController from './controller/interstitials-controller';\nimport { SubtitleStreamController } from './controller/subtitle-stream-controller';\nimport SubtitleTrackController from './controller/subtitle-track-controller';\nimport { TimelineController } from './controller/timeline-controller';\nimport Cues from './utils/cues';\nimport FetchLoader, { fetchSupported } from './utils/fetch-loader';\nimport { requestMediaKeySystemAccess } from './utils/mediakeys-helper';\nimport { stringify } from './utils/safe-json-stringify';\nimport XhrLoader from './utils/xhr-loader';\nimport type { MediaKeySessionContext } from './controller/eme-controller';\nimport type Hls from './hls';\nimport type {\n  FragmentLoaderContext,\n  Loader,\n  LoaderContext,\n  LoaderResponse,\n  PlaylistLoaderContext,\n} from './types/loader';\nimport type {\n  AudioSelectionOption,\n  SubtitleSelectionOption,\n  VideoSelectionOption,\n} from './types/media-playlist';\nimport type { CuesInterface } from './utils/cues';\nimport type { ILogger } from './utils/logger';\nimport type { KeySystems, MediaKeyFunc } from './utils/mediakeys-helper';\n\nexport type ABRControllerConfig = {\n  abrEwmaFastLive: number;\n  abrEwmaSlowLive: number;\n  abrEwmaFastVoD: number;\n  abrEwmaSlowVoD: number;\n  /**\n   * Default bandwidth estimate in bits/s prior to collecting fragment bandwidth samples\n   */\n  abrEwmaDefaultEstimate: number;\n  abrEwmaDefaultEstimateMax: number;\n  abrBandWidthFactor: number;\n  abrBandWidthUpFactor: number;\n  abrMaxWithRealBitrate: boolean;\n  maxStarvationDelay: number;\n  maxLoadingDelay: number;\n};\n\nexport type BufferControllerConfig = {\n  appendErrorMaxRetry: number;\n  backBufferLength: number;\n  frontBufferFlushThreshold: number;\n  liveDurationInfinity: boolean;\n  /**\n   * @deprecated use backBufferLength\n   */\n  liveBackBufferLength: number | null;\n};\n\nexport type CapLevelControllerConfig = {\n  capLevelToPlayerSize: boolean;\n};\n\nexport type CMCDControllerConfig = {\n  sessionId?: string;\n  contentId?: string;\n  useHeaders?: boolean;\n  includeKeys?: string[];\n};\n\nexport type DRMSystemOptions = {\n  audioRobustness?: string;\n  videoRobustness?: string;\n  audioEncryptionScheme?: string | null;\n  videoEncryptionScheme?: string | null;\n  persistentState?: MediaKeysRequirement;\n  distinctiveIdentifier?: MediaKeysRequirement;\n  sessionTypes?: string[];\n  sessionType?: string;\n};\n\nexport type DRMSystemConfiguration = {\n  licenseUrl: string;\n  serverCertificateUrl?: string;\n  generateRequest?: (\n    this: Hls,\n    initDataType: string,\n    initData: ArrayBuffer | null,\n    keyContext: MediaKeySessionContext,\n  ) =>\n    | { initDataType: string; initData: ArrayBuffer | null }\n    | undefined\n    | never;\n};\n\nexport type DRMSystemsConfiguration = Partial<\n  Record<KeySystems, DRMSystemConfiguration>\n>;\n\nexport type EMEControllerConfig = {\n  licenseXhrSetup?: (\n    this: Hls,\n    xhr: XMLHttpRequest,\n    url: string,\n    keyContext: MediaKeySessionContext,\n    licenseChallenge: Uint8Array,\n  ) => void | Uint8Array | Promise<Uint8Array | void>;\n  licenseResponseCallback?: (\n    this: Hls,\n    xhr: XMLHttpRequest,\n    url: string,\n    keyContext: MediaKeySessionContext,\n  ) => ArrayBuffer;\n  emeEnabled: boolean;\n  widevineLicenseUrl?: string;\n  drmSystems: DRMSystemsConfiguration | undefined;\n  drmSystemOptions: DRMSystemOptions | undefined;\n  requestMediaKeySystemAccessFunc: MediaKeyFunc | null;\n  requireKeySystemAccessOnStart: boolean;\n};\n\nexport interface FragmentLoaderConstructor {\n  new (confg: HlsConfig): Loader<FragmentLoaderContext>;\n}\n\n/**\n * @deprecated use fragLoadPolicy.default\n */\nexport type FragmentLoaderConfig = {\n  fragLoadingTimeOut: number;\n  fragLoadingMaxRetry: number;\n  fragLoadingRetryDelay: number;\n  fragLoadingMaxRetryTimeout: number;\n};\n\nexport type FPSControllerConfig = {\n  capLevelOnFPSDrop: boolean;\n  fpsDroppedMonitoringPeriod: number;\n  fpsDroppedMonitoringThreshold: number;\n};\n\nexport type LevelControllerConfig = {\n  startLevel?: number;\n};\n\nexport type MP4RemuxerConfig = {\n  stretchShortVideoTrack: boolean;\n  maxAudioFramesDrift: number;\n};\n\nexport interface PlaylistLoaderConstructor {\n  new (confg: HlsConfig): Loader<PlaylistLoaderContext>;\n}\n\n/**\n * @deprecated use manifestLoadPolicy.default and playlistLoadPolicy.default\n */\nexport type PlaylistLoaderConfig = {\n  manifestLoadingTimeOut: number;\n  manifestLoadingMaxRetry: number;\n  manifestLoadingRetryDelay: number;\n  manifestLoadingMaxRetryTimeout: number;\n\n  levelLoadingTimeOut: number;\n  levelLoadingMaxRetry: number;\n  levelLoadingRetryDelay: number;\n  levelLoadingMaxRetryTimeout: number;\n};\n\nexport type HlsLoadPolicies = {\n  fragLoadPolicy: LoadPolicy;\n  keyLoadPolicy: LoadPolicy;\n  certLoadPolicy: LoadPolicy;\n  playlistLoadPolicy: LoadPolicy;\n  manifestLoadPolicy: LoadPolicy;\n  steeringManifestLoadPolicy: LoadPolicy;\n  interstitialAssetListLoadPolicy: LoadPolicy;\n};\n\nexport type LoadPolicy = {\n  default: LoaderConfig;\n};\n\nexport type LoaderConfig = {\n  maxTimeToFirstByteMs: number; // Max time to first byte\n  maxLoadTimeMs: number; // Max time for load completion\n  timeoutRetry: RetryConfig | null;\n  errorRetry: RetryConfig | null;\n};\n\nexport type RetryConfig = {\n  maxNumRetry: number; // Maximum number of retries\n  retryDelayMs: number; // Retry delay = 2^retryCount * retryDelayMs (exponential) or retryCount * retryDelayMs (linear)\n  maxRetryDelayMs: number; // Maximum delay between retries\n  backoff?: 'exponential' | 'linear'; // used to determine retry backoff duration (see retryDelayMs)\n  shouldRetry?: (\n    retryConfig: RetryConfig | null | undefined,\n    retryCount: number,\n    isTimeout: boolean,\n    loaderResponse: LoaderResponse | undefined,\n    retry: boolean,\n  ) => boolean;\n};\n\nexport type StreamControllerConfig = {\n  autoStartLoad: boolean;\n  startPosition: number;\n  defaultAudioCodec?: string;\n  initialLiveManifestSize: number;\n  maxBufferLength: number;\n  maxBufferSize: number;\n  maxBufferHole: number;\n  maxFragLookUpTolerance: number;\n  maxMaxBufferLength: number;\n  startFragPrefetch: boolean;\n  testBandwidth: boolean;\n  liveSyncMode?: 'edge' | 'buffered';\n  startOnSegmentBoundary: boolean;\n};\n\nexport type GapControllerConfig = {\n  detectStallWithCurrentTimeMs: number;\n  highBufferWatchdogPeriod: number;\n  nudgeOffset: number;\n  nudgeMaxRetry: number;\n  nudgeOnVideoHole: boolean;\n};\n\nexport type SelectionPreferences = {\n  videoPreference?: VideoSelectionOption;\n  audioPreference?: AudioSelectionOption;\n  subtitlePreference?: SubtitleSelectionOption;\n};\n\nexport type LatencyControllerConfig = {\n  liveSyncDurationCount: number;\n  liveMaxLatencyDurationCount: number;\n  liveSyncDuration?: number;\n  liveMaxLatencyDuration?: number;\n  maxLiveSyncPlaybackRate: number;\n  liveSyncOnStallIncrease: number;\n};\n\nexport type MetadataControllerConfig = {\n  enableDateRangeMetadataCues: boolean;\n  enableEmsgMetadataCues: boolean;\n  enableEmsgKLVMetadata: boolean;\n  enableID3MetadataCues: boolean;\n};\n\nexport type TimelineControllerConfig = {\n  cueHandler: CuesInterface;\n  enableWebVTT: boolean;\n  enableIMSC1: boolean;\n  enableCEA708Captions: boolean;\n  captionsTextTrack1Label: string;\n  captionsTextTrack1LanguageCode: string;\n  captionsTextTrack2Label: string;\n  captionsTextTrack2LanguageCode: string;\n  captionsTextTrack3Label: string;\n  captionsTextTrack3LanguageCode: string;\n  captionsTextTrack4Label: string;\n  captionsTextTrack4LanguageCode: string;\n  renderTextTracksNatively: boolean;\n};\n\nexport type TSDemuxerConfig = {\n  forceKeyFrameOnDiscontinuity: boolean;\n};\n\nexport type HlsConfig = {\n  debug: boolean | ILogger;\n  enableWorker: boolean;\n  workerPath: null | string;\n  enableSoftwareAES: boolean;\n  minAutoBitrate: number;\n  ignoreDevicePixelRatio: boolean;\n  maxDevicePixelRatio: number;\n  preferManagedMediaSource: boolean;\n  preserveManualLevelOnError: boolean;\n  timelineOffset?: number;\n  ignorePlaylistParsingErrors: boolean;\n  loader: { new (confg: HlsConfig): Loader<LoaderContext> };\n  fLoader?: FragmentLoaderConstructor;\n  pLoader?: PlaylistLoaderConstructor;\n  fetchSetup?: (\n    context: LoaderContext,\n    initParams: any,\n  ) => Promise<Request> | Request;\n  xhrSetup?: (xhr: XMLHttpRequest, url: string) => Promise<void> | void;\n\n  // Alt Audio\n  audioStreamController?: typeof AudioStreamController;\n  audioTrackController?: typeof AudioTrackController;\n  // Subtitle\n  subtitleStreamController?: typeof SubtitleStreamController;\n  subtitleTrackController?: typeof SubtitleTrackController;\n  timelineController?: typeof TimelineController;\n  // EME\n  emeController?: typeof EMEController;\n  // CMCD\n  cmcd?: CMCDControllerConfig;\n  cmcdController?: typeof CMCDController;\n  // Content Steering\n  contentSteeringController?: typeof ContentSteeringController;\n  // Interstitial Controller (setting to null disables Interstitials parsing and playback)\n  interstitialsController?: typeof InterstitialsController;\n  // Option to disable internal playback handling of Interstitials (set to false to disable Interstitials playback without disabling parsing and schedule events)\n  enableInterstitialPlayback: boolean;\n  // Option to disable appending Interstitials inline on same timeline and MediaSource as Primary media\n  interstitialAppendInPlace: boolean;\n  // How many seconds past the end of a live playlist to preload Interstitial assets\n  interstitialLiveLookAhead: number;\n  // An optional `Hls` instance ID prefixed to debug logs\n  assetPlayerId?: string;\n  // MediaCapabilies API for level, track, and switch filtering\n  useMediaCapabilities: boolean;\n\n  abrController: typeof AbrController;\n  bufferController: typeof BufferController;\n  capLevelController: typeof CapLevelController;\n  errorController: typeof ErrorController;\n  fpsController: typeof FPSController;\n  progressive: boolean;\n  lowLatencyMode: boolean;\n  primarySessionId?: string;\n} & ABRControllerConfig &\n  BufferControllerConfig &\n  CapLevelControllerConfig &\n  EMEControllerConfig &\n  FPSControllerConfig &\n  GapControllerConfig &\n  LevelControllerConfig &\n  MP4RemuxerConfig &\n  StreamControllerConfig &\n  SelectionPreferences &\n  LatencyControllerConfig &\n  MetadataControllerConfig &\n  TimelineControllerConfig &\n  TSDemuxerConfig &\n  HlsLoadPolicies &\n  FragmentLoaderConfig &\n  PlaylistLoaderConfig;\n\nconst defaultLoadPolicy: LoaderConfig = {\n  maxTimeToFirstByteMs: 8000,\n  maxLoadTimeMs: 20000,\n  timeoutRetry: null,\n  errorRetry: null,\n};\n\n/**\n * @ignore\n * If possible, keep hlsDefaultConfig shallow\n * It is cloned whenever a new Hls instance is created, by keeping the config\n * shallow the properties are cloned, and we don't end up manipulating the default\n */\nexport const hlsDefaultConfig: HlsConfig = {\n  autoStartLoad: true, // used by stream-controller\n  startPosition: -1, // used by stream-controller\n  defaultAudioCodec: undefined, // used by stream-controller\n  debug: false, // used by logger\n  capLevelOnFPSDrop: false, // used by fps-controller\n  capLevelToPlayerSize: false, // used by cap-level-controller\n  ignoreDevicePixelRatio: false, // used by cap-level-controller\n  maxDevicePixelRatio: Number.POSITIVE_INFINITY, // used by cap-level-controller\n  preferManagedMediaSource: true,\n  initialLiveManifestSize: 1, // used by stream-controller\n  maxBufferLength: 30, // used by stream-controller\n  backBufferLength: Infinity, // used by buffer-controller\n  frontBufferFlushThreshold: Infinity,\n  startOnSegmentBoundary: false, // used by stream-controller\n  maxBufferSize: 60 * 1000 * 1000, // used by stream-controller\n  maxFragLookUpTolerance: 0.25, // used by stream-controller\n  maxBufferHole: 0.1, // used by stream-controller and gap-controller\n  detectStallWithCurrentTimeMs: 1250, // used by gap-controller\n  highBufferWatchdogPeriod: 2, // used by gap-controller\n  nudgeOffset: 0.1, // used by gap-controller\n  nudgeMaxRetry: 3, // used by gap-controller\n  nudgeOnVideoHole: true, // used by gap-controller\n  liveSyncMode: 'edge', // used by stream-controller\n  liveSyncDurationCount: 3, // used by latency-controller\n  liveSyncOnStallIncrease: 1, // used by latency-controller\n  liveMaxLatencyDurationCount: Infinity, // used by latency-controller\n  liveSyncDuration: undefined, // used by latency-controller\n  liveMaxLatencyDuration: undefined, // used by latency-controller\n  maxLiveSyncPlaybackRate: 1, // used by latency-controller\n  liveDurationInfinity: false, // used by buffer-controller\n  /**\n   * @deprecated use backBufferLength\n   */\n  liveBackBufferLength: null, // used by buffer-controller\n  maxMaxBufferLength: 600, // used by stream-controller\n  enableWorker: true, // used by transmuxer\n  workerPath: null, // used by transmuxer\n  enableSoftwareAES: true, // used by decrypter\n  startLevel: undefined, // used by level-controller\n  startFragPrefetch: false, // used by stream-controller\n  fpsDroppedMonitoringPeriod: 5000, // used by fps-controller\n  fpsDroppedMonitoringThreshold: 0.2, // used by fps-controller\n  appendErrorMaxRetry: 3, // used by buffer-controller\n  ignorePlaylistParsingErrors: false,\n  loader: XhrLoader,\n  // loader: FetchLoader,\n  fLoader: undefined, // used by fragment-loader\n  pLoader: undefined, // used by playlist-loader\n  xhrSetup: undefined, // used by xhr-loader\n  licenseXhrSetup: undefined, // used by eme-controller\n  licenseResponseCallback: undefined, // used by eme-controller\n  abrController: AbrController,\n  bufferController: BufferController,\n  capLevelController: CapLevelController,\n  errorController: ErrorController,\n  fpsController: FPSController,\n  stretchShortVideoTrack: false, // used by mp4-remuxer\n  maxAudioFramesDrift: 1, // used by mp4-remuxer\n  forceKeyFrameOnDiscontinuity: true, // used by ts-demuxer\n  abrEwmaFastLive: 3, // used by abr-controller\n  abrEwmaSlowLive: 9, // used by abr-controller\n  abrEwmaFastVoD: 3, // used by abr-controller\n  abrEwmaSlowVoD: 9, // used by abr-controller\n  abrEwmaDefaultEstimate: 5e5, // 500 kbps  // used by abr-controller\n  abrEwmaDefaultEstimateMax: 5e6, // 5 mbps\n  abrBandWidthFactor: 0.95, // used by abr-controller\n  abrBandWidthUpFactor: 0.7, // used by abr-controller\n  abrMaxWithRealBitrate: false, // used by abr-controller\n  maxStarvationDelay: 4, // used by abr-controller\n  maxLoadingDelay: 4, // used by abr-controller\n  minAutoBitrate: 0, // used by hls\n  emeEnabled: false, // used by eme-controller\n  widevineLicenseUrl: undefined, // used by eme-controller\n  drmSystems: {}, // used by eme-controller\n  drmSystemOptions: {}, // used by eme-controller\n  requestMediaKeySystemAccessFunc: __USE_EME_DRM__\n    ? requestMediaKeySystemAccess\n    : null, // used by eme-controller\n  requireKeySystemAccessOnStart: false, // used by eme-controller\n  testBandwidth: true,\n  progressive: false,\n  lowLatencyMode: true,\n  cmcd: undefined,\n  enableDateRangeMetadataCues: true,\n  enableEmsgMetadataCues: true,\n  enableEmsgKLVMetadata: false,\n  enableID3MetadataCues: true,\n  enableInterstitialPlayback: __USE_INTERSTITIALS__,\n  interstitialAppendInPlace: true,\n  interstitialLiveLookAhead: 10,\n  useMediaCapabilities: __USE_MEDIA_CAPABILITIES__,\n  preserveManualLevelOnError: false,\n\n  certLoadPolicy: {\n    default: defaultLoadPolicy,\n  },\n  keyLoadPolicy: {\n    default: {\n      maxTimeToFirstByteMs: 8000,\n      maxLoadTimeMs: 20000,\n      timeoutRetry: {\n        maxNumRetry: 1,\n        retryDelayMs: 1000,\n        maxRetryDelayMs: 20000,\n        backoff: 'linear',\n      },\n      errorRetry: {\n        maxNumRetry: 8,\n        retryDelayMs: 1000,\n        maxRetryDelayMs: 20000,\n        backoff: 'linear',\n      },\n    },\n  },\n  manifestLoadPolicy: {\n    default: {\n      maxTimeToFirstByteMs: Infinity,\n      maxLoadTimeMs: 20000,\n      timeoutRetry: {\n        maxNumRetry: 2,\n        retryDelayMs: 0,\n        maxRetryDelayMs: 0,\n      },\n      errorRetry: {\n        maxNumRetry: 1,\n        retryDelayMs: 1000,\n        maxRetryDelayMs: 8000,\n      },\n    },\n  },\n  playlistLoadPolicy: {\n    default: {\n      maxTimeToFirstByteMs: 10000,\n      maxLoadTimeMs: 20000,\n      timeoutRetry: {\n        maxNumRetry: 2,\n        retryDelayMs: 0,\n        maxRetryDelayMs: 0,\n      },\n      errorRetry: {\n        maxNumRetry: 2,\n        retryDelayMs: 1000,\n        maxRetryDelayMs: 8000,\n      },\n    },\n  },\n  fragLoadPolicy: {\n    default: {\n      maxTimeToFirstByteMs: 10000,\n      maxLoadTimeMs: 120000,\n      timeoutRetry: {\n        maxNumRetry: 4,\n        retryDelayMs: 0,\n        maxRetryDelayMs: 0,\n      },\n      errorRetry: {\n        maxNumRetry: 6,\n        retryDelayMs: 1000,\n        maxRetryDelayMs: 8000,\n      },\n    },\n  },\n  steeringManifestLoadPolicy: {\n    default: __USE_CONTENT_STEERING__\n      ? {\n          maxTimeToFirstByteMs: 10000,\n          maxLoadTimeMs: 20000,\n          timeoutRetry: {\n            maxNumRetry: 2,\n            retryDelayMs: 0,\n            maxRetryDelayMs: 0,\n          },\n          errorRetry: {\n            maxNumRetry: 1,\n            retryDelayMs: 1000,\n            maxRetryDelayMs: 8000,\n          },\n        }\n      : defaultLoadPolicy,\n  },\n  interstitialAssetListLoadPolicy: {\n    default: __USE_INTERSTITIALS__\n      ? {\n          maxTimeToFirstByteMs: 10000,\n          maxLoadTimeMs: 30000,\n          timeoutRetry: {\n            maxNumRetry: 0,\n            retryDelayMs: 0,\n            maxRetryDelayMs: 0,\n          },\n          errorRetry: {\n            maxNumRetry: 0,\n            retryDelayMs: 1000,\n            maxRetryDelayMs: 8000,\n          },\n        }\n      : defaultLoadPolicy,\n  },\n\n  // These default settings are deprecated in favor of the above policies\n  // and are maintained for backwards compatibility\n  manifestLoadingTimeOut: 10000,\n  manifestLoadingMaxRetry: 1,\n  manifestLoadingRetryDelay: 1000,\n  manifestLoadingMaxRetryTimeout: 64000,\n  levelLoadingTimeOut: 10000,\n  levelLoadingMaxRetry: 4,\n  levelLoadingRetryDelay: 1000,\n  levelLoadingMaxRetryTimeout: 64000,\n  fragLoadingTimeOut: 20000,\n  fragLoadingMaxRetry: 6,\n  fragLoadingRetryDelay: 1000,\n  fragLoadingMaxRetryTimeout: 64000,\n\n  // Dynamic Modules\n  ...timelineConfig(),\n  subtitleStreamController: __USE_SUBTITLES__\n    ? SubtitleStreamController\n    : undefined,\n  subtitleTrackController: __USE_SUBTITLES__\n    ? SubtitleTrackController\n    : undefined,\n  timelineController: __USE_SUBTITLES__ ? TimelineController : undefined,\n  audioStreamController: __USE_ALT_AUDIO__ ? AudioStreamController : undefined,\n  audioTrackController: __USE_ALT_AUDIO__ ? AudioTrackController : undefined,\n  emeController: __USE_EME_DRM__ ? EMEController : undefined,\n  cmcdController: __USE_CMCD__ ? CMCDController : undefined,\n  contentSteeringController: __USE_CONTENT_STEERING__\n    ? ContentSteeringController\n    : undefined,\n  interstitialsController: __USE_INTERSTITIALS__\n    ? InterstitialsController\n    : undefined,\n};\n\nfunction timelineConfig(): TimelineControllerConfig {\n  return {\n    cueHandler: Cues, // used by timeline-controller\n    enableWebVTT: __USE_SUBTITLES__, // used by timeline-controller\n    enableIMSC1: __USE_SUBTITLES__, // used by timeline-controller\n    enableCEA708Captions: __USE_SUBTITLES__, // used by timeline-controller\n    captionsTextTrack1Label: 'English', // used by timeline-controller\n    captionsTextTrack1LanguageCode: 'en', // used by timeline-controller\n    captionsTextTrack2Label: 'Spanish', // used by timeline-controller\n    captionsTextTrack2LanguageCode: 'es', // used by timeline-controller\n    captionsTextTrack3Label: 'Unknown CC', // used by timeline-controller\n    captionsTextTrack3LanguageCode: '', // used by timeline-controller\n    captionsTextTrack4Label: 'Unknown CC', // used by timeline-controller\n    captionsTextTrack4LanguageCode: '', // used by timeline-controller\n    renderTextTracksNatively: true,\n  };\n}\n\n/**\n * @ignore\n */\nexport function mergeConfig(\n  defaultConfig: HlsConfig,\n  userConfig: Partial<HlsConfig>,\n  logger: ILogger,\n): HlsConfig {\n  if (\n    (userConfig.liveSyncDurationCount ||\n      userConfig.liveMaxLatencyDurationCount) &&\n    (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)\n  ) {\n    throw new Error(\n      \"Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration\",\n    );\n  }\n\n  if (\n    userConfig.liveMaxLatencyDurationCount !== undefined &&\n    (userConfig.liveSyncDurationCount === undefined ||\n      userConfig.liveMaxLatencyDurationCount <=\n        userConfig.liveSyncDurationCount)\n  ) {\n    throw new Error(\n      'Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be greater than \"liveSyncDurationCount\"',\n    );\n  }\n\n  if (\n    userConfig.liveMaxLatencyDuration !== undefined &&\n    (userConfig.liveSyncDuration === undefined ||\n      userConfig.liveMaxLatencyDuration <= userConfig.liveSyncDuration)\n  ) {\n    throw new Error(\n      'Illegal hls.js config: \"liveMaxLatencyDuration\" must be greater than \"liveSyncDuration\"',\n    );\n  }\n\n  const defaultsCopy = deepCpy(defaultConfig);\n\n  // Backwards compatibility with deprecated config values\n  const deprecatedSettingTypes = ['manifest', 'level', 'frag'];\n  const deprecatedSettings = [\n    'TimeOut',\n    'MaxRetry',\n    'RetryDelay',\n    'MaxRetryTimeout',\n  ];\n  deprecatedSettingTypes.forEach((type) => {\n    const policyName = `${type === 'level' ? 'playlist' : type}LoadPolicy`;\n    const policyNotSet = userConfig[policyName] === undefined;\n    const report: string[] = [];\n    deprecatedSettings.forEach((setting) => {\n      const deprecatedSetting = `${type}Loading${setting}`;\n      const value = userConfig[deprecatedSetting];\n      if (value !== undefined && policyNotSet) {\n        report.push(deprecatedSetting);\n        const settings: LoaderConfig = defaultsCopy[policyName].default;\n        userConfig[policyName] = { default: settings };\n        switch (setting) {\n          case 'TimeOut':\n            settings.maxLoadTimeMs = value;\n            settings.maxTimeToFirstByteMs = value;\n            break;\n          case 'MaxRetry':\n            settings.errorRetry!.maxNumRetry = value;\n            settings.timeoutRetry!.maxNumRetry = value;\n            break;\n          case 'RetryDelay':\n            settings.errorRetry!.retryDelayMs = value;\n            settings.timeoutRetry!.retryDelayMs = value;\n            break;\n          case 'MaxRetryTimeout':\n            settings.errorRetry!.maxRetryDelayMs = value;\n            settings.timeoutRetry!.maxRetryDelayMs = value;\n            break;\n        }\n      }\n    });\n    if (report.length) {\n      logger.warn(\n        `hls.js config: \"${report.join(\n          '\", \"',\n        )}\" setting(s) are deprecated, use \"${policyName}\": ${stringify(\n          userConfig[policyName],\n        )}`,\n      );\n    }\n  });\n\n  return {\n    ...defaultsCopy,\n    ...userConfig,\n  };\n}\n\nfunction deepCpy(obj: any): any {\n  if (obj && typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      return obj.map(deepCpy);\n    }\n    return Object.keys(obj).reduce((result, key) => {\n      result[key] = deepCpy(obj[key]);\n      return result;\n    }, {});\n  }\n  return obj;\n}\n\n/**\n * @ignore\n */\nexport function enableStreamingMode(config: HlsConfig, logger: ILogger) {\n  const currentLoader = config.loader;\n  if (currentLoader !== FetchLoader && currentLoader !== XhrLoader) {\n    // If a developer has configured their own loader, respect that choice\n    logger.log(\n      '[config]: Custom loader detected, cannot enable progressive streaming',\n    );\n    config.progressive = false;\n  } else {\n    const canStreamProgressively = fetchSupported();\n    if (canStreamProgressively) {\n      config.loader = FetchLoader;\n      config.progressive = true;\n      config.enableSoftwareAES = true;\n      logger.log('[config]: Progressive streaming enabled, using FetchLoader');\n    }\n  }\n}\n","import { State } from './base-stream-controller';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport TaskLoop from '../task-loop';\nimport { PlaylistLevelType } from '../types/loader';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport {\n  addEventListener,\n  removeEventListener,\n} from '../utils/event-listener-helper';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type { InFlightData } from './base-stream-controller';\nimport type { InFlightFragments } from '../hls';\nimport type Hls from '../hls';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type { Fragment, MediaFragment, Part } from '../loader/fragment';\nimport type { SourceBufferName } from '../types/buffer';\nimport type {\n  BufferAppendedData,\n  MediaAttachedData,\n  MediaDetachingData,\n} from '../types/events';\nimport type { ErrorData } from '../types/events';\nimport type { BufferInfo } from '../utils/buffer-helper';\n\nexport const MAX_START_GAP_JUMP = 2.0;\nexport const SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;\nexport const SKIP_BUFFER_RANGE_START = 0.05;\nconst TICK_INTERVAL = 100;\n\nexport default class GapController extends TaskLoop {\n  private hls: Hls | null;\n  private fragmentTracker: FragmentTracker | null;\n  private media: HTMLMediaElement | null = null;\n  private mediaSource?: MediaSource;\n\n  private nudgeRetry: number = 0;\n  private stallReported: boolean = false;\n  private stalled: number | null = null;\n  private moved: boolean = false;\n  private seeking: boolean = false;\n  private buffered: Partial<Record<SourceBufferName, TimeRanges>> = {};\n\n  private lastCurrentTime: number = 0;\n  public ended: number = 0;\n  public waiting: number = 0;\n\n  constructor(hls: Hls, fragmentTracker: FragmentTracker) {\n    super('gap-controller', hls.logger);\n    this.hls = hls;\n    this.fragmentTracker = fragmentTracker;\n    this.registerListeners();\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n    }\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.BUFFER_APPENDED, this.onBufferAppended, this);\n    }\n  }\n\n  public destroy() {\n    super.destroy();\n    this.unregisterListeners();\n    this.media = this.hls = this.fragmentTracker = null;\n    this.mediaSource = undefined;\n  }\n\n  private onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    this.setInterval(TICK_INTERVAL);\n    this.mediaSource = data.mediaSource;\n    const media = (this.media = data.media);\n    addEventListener(media, 'playing', this.onMediaPlaying);\n    addEventListener(media, 'waiting', this.onMediaWaiting);\n    addEventListener(media, 'ended', this.onMediaEnded);\n  }\n\n  private onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    this.clearInterval();\n    const { media } = this;\n    if (media) {\n      removeEventListener(media, 'playing', this.onMediaPlaying);\n      removeEventListener(media, 'waiting', this.onMediaWaiting);\n      removeEventListener(media, 'ended', this.onMediaEnded);\n      this.media = null;\n    }\n    this.mediaSource = undefined;\n  }\n\n  private onBufferAppended(\n    event: Events.BUFFER_APPENDED,\n    data: BufferAppendedData,\n  ) {\n    this.buffered = data.timeRanges;\n  }\n\n  private onMediaPlaying = () => {\n    this.ended = 0;\n    this.waiting = 0;\n  };\n\n  private onMediaWaiting = () => {\n    if (this.media?.seeking) {\n      return;\n    }\n    this.waiting = self.performance.now();\n    this.tick();\n  };\n\n  private onMediaEnded = () => {\n    if (this.hls) {\n      // ended is set when triggering MEDIA_ENDED so that we do not trigger it again on stall or on tick with media.ended\n      this.ended = this.media?.currentTime || 1;\n      this.hls.trigger(Events.MEDIA_ENDED, {\n        stalled: false,\n      });\n    }\n  };\n\n  public get hasBuffered(): boolean {\n    return Object.keys(this.buffered).length > 0;\n  }\n\n  public tick() {\n    if (!this.media?.readyState || !this.hasBuffered) {\n      return;\n    }\n\n    const currentTime = this.media.currentTime;\n    this.poll(currentTime, this.lastCurrentTime);\n    this.lastCurrentTime = currentTime;\n  }\n\n  /**\n   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.\n   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).\n   *\n   * @param lastCurrentTime - Previously read playhead position\n   */\n  public poll(currentTime: number, lastCurrentTime: number) {\n    const config = this.hls?.config;\n    if (!config) {\n      return;\n    }\n    const media = this.media;\n    if (!media) {\n      return;\n    }\n    const { seeking } = media;\n    const seeked = this.seeking && !seeking;\n    const beginSeek = !this.seeking && seeking;\n    const pausedEndedOrHalted =\n      (media.paused && !seeking) || media.ended || media.playbackRate === 0;\n\n    this.seeking = seeking;\n\n    // The playhead is moving, no-op\n    if (currentTime !== lastCurrentTime) {\n      if (lastCurrentTime) {\n        this.ended = 0;\n      }\n      this.moved = true;\n      if (!seeking) {\n        this.nudgeRetry = 0;\n        // When crossing between buffered video time ranges, but not audio, flush pipeline with seek (Chrome)\n        if (\n          config.nudgeOnVideoHole &&\n          !pausedEndedOrHalted &&\n          currentTime > lastCurrentTime\n        ) {\n          this.nudgeOnVideoHole(currentTime, lastCurrentTime);\n        }\n      }\n      if (this.waiting === 0) {\n        this.stallResolved(currentTime);\n      }\n      return;\n    }\n\n    // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek\n    if (beginSeek || seeked) {\n      if (seeked) {\n        this.stallResolved(currentTime);\n      }\n      return;\n    }\n\n    // The playhead should not be moving\n    if (pausedEndedOrHalted) {\n      this.nudgeRetry = 0;\n      this.stallResolved(currentTime);\n      // Fire MEDIA_ENDED to workaround event not being dispatched by browser\n      if (!this.ended && media.ended && this.hls) {\n        this.ended = currentTime || 1;\n        this.hls.trigger(Events.MEDIA_ENDED, {\n          stalled: false,\n        });\n      }\n      return;\n    }\n\n    if (!BufferHelper.getBuffered(media).length) {\n      this.nudgeRetry = 0;\n      return;\n    }\n\n    // Resolve stalls at buffer holes using the main buffer, whose ranges are the intersections of the A/V sourcebuffers\n    const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n    const nextStart = bufferInfo.nextStart || 0;\n    const fragmentTracker = this.fragmentTracker;\n\n    if (seeking && fragmentTracker && this.hls) {\n      // Is there a fragment loading/parsing/appending before currentTime?\n      const inFlightDependency = getInFlightDependency(\n        this.hls.inFlightFragments,\n        currentTime,\n      );\n\n      // Waiting for seeking in a buffered range to complete\n      const hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP;\n      // Next buffered range is too far ahead to jump to while still seeking\n      const noBufferHole =\n        !nextStart ||\n        inFlightDependency ||\n        (nextStart - currentTime > MAX_START_GAP_JUMP &&\n          !fragmentTracker.getPartialFragment(currentTime));\n      if (hasEnoughBuffer || noBufferHole) {\n        return;\n      }\n      // Reset moved state when seeking to a point in or before a gap/hole\n      this.moved = false;\n    }\n\n    // Skip start gaps if we haven't played, but the last poll detected the start of a stall\n    // The addition poll gives the browser a chance to jump the gap for us\n    const levelDetails = this.hls?.latestLevelDetails;\n    if (!this.moved && this.stalled !== null && fragmentTracker) {\n      // There is no playable buffer (seeked, waiting for buffer)\n      const isBuffered = bufferInfo.len > 0;\n      if (!isBuffered && !nextStart) {\n        return;\n      }\n      // Jump start gaps within jump threshold\n      const startJump =\n        Math.max(nextStart, bufferInfo.start || 0) - currentTime;\n\n      // When joining a live stream with audio tracks, account for live playlist window sliding by allowing\n      // a larger jump over start gaps caused by the audio-stream-controller buffering a start fragment\n      // that begins over 1 target duration after the video start position.\n      const isLive = !!levelDetails?.live;\n      const maxStartGapJump = isLive\n        ? levelDetails!.targetduration * 2\n        : MAX_START_GAP_JUMP;\n      const appended = appendedFragAtPosition(currentTime, fragmentTracker);\n      if (startJump > 0 && (startJump <= maxStartGapJump || appended)) {\n        if (!media.paused) {\n          this._trySkipBufferHole(appended);\n        }\n        return;\n      }\n    }\n\n    // Start tracking stall time\n    const detectStallWithCurrentTimeMs = config.detectStallWithCurrentTimeMs;\n    const tnow = self.performance.now();\n    const tWaiting = this.waiting;\n    let stalled = this.stalled;\n    if (stalled === null) {\n      // Use time of recent \"waiting\" event\n      if (tWaiting > 0 && tnow - tWaiting < detectStallWithCurrentTimeMs) {\n        stalled = this.stalled = tWaiting;\n      } else {\n        this.stalled = tnow;\n        return;\n      }\n    }\n\n    const stalledDuration = tnow - stalled;\n    if (\n      !seeking &&\n      (stalledDuration >= detectStallWithCurrentTimeMs || tWaiting) &&\n      this.hls\n    ) {\n      // Dispatch MEDIA_ENDED when media.ended/ended event is not signalled at end of stream\n      if (\n        this.mediaSource?.readyState === 'ended' &&\n        !levelDetails?.live &&\n        Math.abs(currentTime - (levelDetails?.edge || 0)) < 1\n      ) {\n        if (this.ended) {\n          return;\n        }\n        this.ended = currentTime || 1;\n        this.hls.trigger(Events.MEDIA_ENDED, {\n          stalled: true,\n        });\n        return;\n      }\n      // Report stalling after trying to fix\n      this._reportStall(bufferInfo);\n      if (!this.media || (!this.hls as any)) {\n        return;\n      }\n    }\n\n    const bufferedWithHoles = BufferHelper.bufferInfo(\n      media,\n      currentTime,\n      config.maxBufferHole,\n    );\n    this._tryFixBufferStall(bufferedWithHoles, stalledDuration, currentTime);\n  }\n\n  private stallResolved(currentTime: number) {\n    const stalled = this.stalled;\n    if (stalled && this.hls) {\n      this.stalled = null;\n      // The playhead is now moving, but was previously stalled\n      if (this.stallReported) {\n        const stalledDuration = self.performance.now() - stalled;\n        this.log(\n          `playback not stuck anymore @${currentTime}, after ${Math.round(\n            stalledDuration,\n          )}ms`,\n        );\n        this.stallReported = false;\n        this.waiting = 0;\n        this.hls.trigger(Events.STALL_RESOLVED, {});\n      }\n    }\n  }\n\n  private nudgeOnVideoHole(currentTime: number, lastCurrentTime: number) {\n    // Chrome will play one second past a hole in video buffered time ranges without rendering any video from the subsequent range and then stall as long as audio is buffered:\n    // https://github.com/video-dev/hls.js/issues/5631\n    // https://issues.chromium.org/issues/40280613#comment10\n    // Detect the potential for this situation and proactively seek to flush the video pipeline once the playhead passes the start of the video hole.\n    // When there are audio and video buffers and currentTime is past the end of the first video buffered range...\n    const videoSourceBuffered = this.buffered.video;\n    if (\n      this.hls &&\n      this.media &&\n      this.fragmentTracker &&\n      this.buffered.audio?.length &&\n      videoSourceBuffered &&\n      videoSourceBuffered.length > 1 &&\n      currentTime > videoSourceBuffered.end(0)\n    ) {\n      // and audio is buffered at the playhead\n      const audioBufferInfo = BufferHelper.bufferedInfo(\n        BufferHelper.timeRangesToArray(this.buffered.audio),\n        currentTime,\n        0,\n      );\n      if (audioBufferInfo.len > 1 && lastCurrentTime >= audioBufferInfo.start) {\n        const videoTimes = BufferHelper.timeRangesToArray(videoSourceBuffered);\n        const lastBufferedIndex = BufferHelper.bufferedInfo(\n          videoTimes,\n          lastCurrentTime,\n          0,\n        ).bufferedIndex;\n        // nudge when crossing into another video buffered range (hole).\n        if (\n          lastBufferedIndex > -1 &&\n          lastBufferedIndex < videoTimes.length - 1\n        ) {\n          const bufferedIndex = BufferHelper.bufferedInfo(\n            videoTimes,\n            currentTime,\n            0,\n          ).bufferedIndex;\n          const holeStart = videoTimes[lastBufferedIndex].end;\n          const holeEnd = videoTimes[lastBufferedIndex + 1].start;\n          if (\n            (bufferedIndex === -1 || bufferedIndex > lastBufferedIndex) &&\n            holeEnd - holeStart < 1 && // `maxBufferHole` may be too small and setting it to 0 should not disable this feature\n            currentTime - holeStart < 2\n          ) {\n            const error = new Error(\n              `nudging playhead to flush pipeline after video hole. currentTime: ${currentTime} hole: ${holeStart} -> ${holeEnd} buffered index: ${bufferedIndex}`,\n            );\n            this.warn(error.message);\n            // Magic number to flush the pipeline without interuption to audio playback:\n            this.media.currentTime += 0.000001;\n            let frag: MediaFragment | Part | null | undefined =\n              appendedFragAtPosition(currentTime, this.fragmentTracker);\n            if (frag && 'fragment' in frag) {\n              frag = frag.fragment;\n            } else if (!frag) {\n              frag = undefined;\n            }\n            const bufferInfo = BufferHelper.bufferInfo(\n              this.media,\n              currentTime,\n              0,\n            );\n            this.hls.trigger(Events.ERROR, {\n              type: ErrorTypes.MEDIA_ERROR,\n              details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,\n              fatal: false,\n              error,\n              reason: error.message,\n              frag,\n              buffer: bufferInfo.len,\n              bufferInfo,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Detects and attempts to fix known buffer stalling issues.\n   * @param bufferInfo - The properties of the current buffer.\n   * @param stalledDurationMs - The amount of time Hls.js has been stalling for.\n   * @private\n   */\n  private _tryFixBufferStall(\n    bufferInfo: BufferInfo,\n    stalledDurationMs: number,\n    currentTime: number,\n  ) {\n    const { fragmentTracker, media } = this;\n    const config = this.hls?.config;\n    if (!media || !fragmentTracker || !config) {\n      return;\n    }\n\n    const levelDetails = this.hls?.latestLevelDetails;\n    const appended = appendedFragAtPosition(currentTime, fragmentTracker);\n    if (\n      appended ||\n      (levelDetails?.live && currentTime < levelDetails.fragmentStart)\n    ) {\n      // Try to skip over the buffer hole caused by a partial fragment\n      // This method isn't limited by the size of the gap between buffered ranges\n      const targetTime = this._trySkipBufferHole(appended);\n      // we return here in this case, meaning\n      // the branch below only executes when we haven't seeked to a new position\n      if (targetTime || !this.media) {\n        return;\n      }\n    }\n\n    // if we haven't had to skip over a buffer hole of a partial fragment\n    // we may just have to \"nudge\" the playlist as the browser decoding/rendering engine\n    // needs to cross some sort of threshold covering all source-buffers content\n    // to start playing properly.\n    const bufferedRanges = bufferInfo.buffered;\n    const adjacentTraversal = this.adjacentTraversal(bufferInfo, currentTime);\n    if (\n      ((bufferedRanges &&\n        bufferedRanges.length > 1 &&\n        bufferInfo.len > config.maxBufferHole) ||\n        (bufferInfo.nextStart &&\n          (bufferInfo.nextStart - currentTime < config.maxBufferHole ||\n            adjacentTraversal))) &&\n      (stalledDurationMs > config.highBufferWatchdogPeriod * 1000 ||\n        this.waiting)\n    ) {\n      this.warn('Trying to nudge playhead over buffer-hole');\n      // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds\n      // We only try to jump the hole if it's under the configured size\n      this._tryNudgeBuffer(bufferInfo);\n    }\n  }\n\n  private adjacentTraversal(bufferInfo: BufferInfo, currentTime: number) {\n    const fragmentTracker = this.fragmentTracker;\n    const nextStart = bufferInfo.nextStart;\n    if (fragmentTracker && nextStart) {\n      const current = fragmentTracker.getFragAtPos(\n        currentTime,\n        PlaylistLevelType.MAIN,\n      );\n      const next = fragmentTracker.getFragAtPos(\n        nextStart,\n        PlaylistLevelType.MAIN,\n      );\n      if (current && next) {\n        return next.sn - current.sn < 2;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.\n   * @param bufferLen - The playhead distance from the end of the current buffer segment.\n   * @private\n   */\n  private _reportStall(bufferInfo: BufferInfo) {\n    const { hls, media, stallReported, stalled } = this;\n    if (!stallReported && stalled !== null && media && hls) {\n      // Report stalled error once\n      this.stallReported = true;\n      const error = new Error(\n        `Playback stalling at @${\n          media.currentTime\n        } due to low buffer (${stringify(bufferInfo)})`,\n      );\n      this.warn(error.message);\n      hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        fatal: false,\n        error,\n        buffer: bufferInfo.len,\n        bufferInfo,\n        stalled: { start: stalled },\n      });\n    }\n  }\n\n  /**\n   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments\n   * @param appended - The fragment or part found at the current time (where playback is stalling).\n   * @private\n   */\n  private _trySkipBufferHole(appended: MediaFragment | Part | null): number {\n    const { fragmentTracker, media } = this;\n    const config = this.hls?.config;\n    if (!media || !fragmentTracker || !config) {\n      return 0;\n    }\n\n    // Check if currentTime is between unbuffered regions of partial fragments\n    const currentTime = media.currentTime;\n    const bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);\n    const startTime =\n      currentTime < bufferInfo.start ? bufferInfo.start : bufferInfo.nextStart;\n    if (startTime && this.hls) {\n      const bufferStarved = bufferInfo.len <= config.maxBufferHole;\n      const waiting =\n        bufferInfo.len > 0 && bufferInfo.len < 1 && media.readyState < 3;\n      const gapLength = startTime - currentTime;\n      if (gapLength > 0 && (bufferStarved || waiting)) {\n        // Only allow large gaps to be skipped if it is a start gap, or all fragments in skip range are partial\n        if (gapLength > config.maxBufferHole) {\n          let startGap = false;\n          if (currentTime === 0) {\n            const startFrag = fragmentTracker.getAppendedFrag(\n              0,\n              PlaylistLevelType.MAIN,\n            );\n            if (startFrag && startTime < startFrag.end) {\n              startGap = true;\n            }\n          }\n          if (!startGap && appended) {\n            // Do not seek when selected variant playlist is unloaded\n            if (!this.hls.loadLevelObj?.details) {\n              return 0;\n            }\n            // Do not seek when required fragments are inflight or appending\n            const inFlightDependency = getInFlightDependency(\n              this.hls.inFlightFragments,\n              startTime,\n            );\n            if (inFlightDependency) {\n              return 0;\n            }\n            // Do not seek if we can't walk tracked fragments to end of gap\n            let moreToLoad = false;\n            let pos = appended.end;\n            while (pos < startTime) {\n              const provisioned = appendedFragAtPosition(pos, fragmentTracker);\n              if (provisioned) {\n                pos += provisioned.duration;\n              } else {\n                moreToLoad = true;\n                break;\n              }\n            }\n            if (moreToLoad) {\n              return 0;\n            }\n          }\n        }\n        const targetTime = Math.max(\n          startTime + SKIP_BUFFER_RANGE_START,\n          currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS,\n        );\n        this.warn(\n          `skipping hole, adjusting currentTime from ${currentTime} to ${targetTime}`,\n        );\n        this.moved = true;\n        media.currentTime = targetTime;\n        if (!appended?.gap) {\n          const error = new Error(\n            `fragment loaded with buffer holes, seeking from ${currentTime} to ${targetTime}`,\n          );\n          const errorData: ErrorData = {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.BUFFER_SEEK_OVER_HOLE,\n            fatal: false,\n            error,\n            reason: error.message,\n            buffer: bufferInfo.len,\n            bufferInfo,\n          };\n          if (appended) {\n            if ('fragment' in appended) {\n              errorData.part = appended;\n            } else {\n              errorData.frag = appended;\n            }\n          }\n          this.hls.trigger(Events.ERROR, errorData);\n        }\n        return targetTime;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.\n   * @private\n   */\n  private _tryNudgeBuffer(bufferInfo: BufferInfo) {\n    const { hls, media, nudgeRetry } = this;\n    const config = hls?.config;\n    if (!media || !config) {\n      return 0;\n    }\n    const currentTime = media.currentTime;\n    this.nudgeRetry++;\n\n    if (nudgeRetry < config.nudgeMaxRetry) {\n      const targetTime = currentTime + (nudgeRetry + 1) * config.nudgeOffset;\n      // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n      const error = new Error(\n        `Nudging 'currentTime' from ${currentTime} to ${targetTime}`,\n      );\n      this.warn(error.message);\n      media.currentTime = targetTime;\n      hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_NUDGE_ON_STALL,\n        error,\n        fatal: false,\n        buffer: bufferInfo.len,\n        bufferInfo,\n      });\n    } else {\n      const error = new Error(\n        `Playhead still not moving while enough data buffered @${currentTime} after ${config.nudgeMaxRetry} nudges`,\n      );\n      this.error(error.message);\n      hls.trigger(Events.ERROR, {\n        type: ErrorTypes.MEDIA_ERROR,\n        details: ErrorDetails.BUFFER_STALLED_ERROR,\n        error,\n        fatal: true,\n        buffer: bufferInfo.len,\n        bufferInfo,\n      });\n    }\n  }\n}\n\nfunction getInFlightDependency(\n  inFlightFragments: InFlightFragments,\n  currentTime: number,\n): Fragment | null {\n  const main = inFlight(inFlightFragments.main);\n  if (main && main.start <= currentTime) {\n    return main;\n  }\n  const audio = inFlight(inFlightFragments.audio);\n  if (audio && audio.start <= currentTime) {\n    return audio;\n  }\n  return null;\n}\n\nfunction inFlight(inFlightData: InFlightData | undefined): Fragment | null {\n  if (!inFlightData) {\n    return null;\n  }\n  switch (inFlightData.state) {\n    case State.IDLE:\n    case State.STOPPED:\n    case State.ENDED:\n    case State.ERROR:\n      return null;\n  }\n  return inFlightData.frag;\n}\n\nfunction appendedFragAtPosition(pos: number, fragmentTracker: FragmentTracker) {\n  return (\n    fragmentTracker.getAppendedFrag(pos, PlaylistLevelType.MAIN) ||\n    fragmentTracker.getPartialFragment(pos)\n  );\n}\n","import { getId3Frames } from '@svta/common-media-library/id3/getId3Frames';\nimport { isId3TimestampFrame } from '@svta/common-media-library/id3/isId3TimestampFrame';\nimport { Events } from '../events';\nimport {\n  isDateRangeCueAttribute,\n  isSCTE35Attribute,\n} from '../loader/date-range';\nimport { MetadataSchema } from '../types/demuxer';\nimport { hexToArrayBuffer } from '../utils/hex';\nimport { stringify } from '../utils/safe-json-stringify';\nimport {\n  clearCurrentCues,\n  removeCuesInRange,\n  sendAddTrackEvent,\n} from '../utils/texttrack-utils';\nimport type { MediaFragment } from '../hls';\nimport type Hls from '../hls';\nimport type { DateRange } from '../loader/date-range';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  BufferFlushingData,\n  FragParsingMetadataData,\n  LevelPTSUpdatedData,\n  LevelUpdatedData,\n  MediaAttachingData,\n  MediaDetachingData,\n} from '../types/events';\n\ndeclare global {\n  interface Window {\n    WebKitDataCue: VTTCue | void;\n  }\n}\n\nconst MIN_CUE_DURATION = 0.25;\n\nfunction getCueClass(): typeof VTTCue | typeof TextTrackCue | undefined {\n  if (typeof self === 'undefined') return undefined;\n  return (self.VTTCue as typeof VTTCue | undefined) || self.TextTrackCue;\n}\n\nfunction createCueWithDataFields(\n  Cue: typeof VTTCue | typeof TextTrackCue,\n  startTime: number,\n  endTime: number,\n  data: Object,\n  type?: string,\n): VTTCue | TextTrackCue | undefined {\n  let cue = new Cue(startTime, endTime, '');\n  try {\n    (cue as any).value = data;\n    if (type) {\n      (cue as any).type = type;\n    }\n  } catch (e) {\n    cue = new Cue(\n      startTime,\n      endTime,\n      stringify(type ? { type, ...data } : data),\n    );\n  }\n  return cue;\n}\n\n// VTTCue latest draft allows an infinite duration, fallback\n// to MAX_VALUE if necessary\nconst MAX_CUE_ENDTIME = (() => {\n  const Cue = getCueClass();\n  try {\n    Cue && new Cue(0, Number.POSITIVE_INFINITY, '');\n  } catch (e) {\n    return Number.MAX_VALUE;\n  }\n  return Number.POSITIVE_INFINITY;\n})();\n\nclass ID3TrackController implements ComponentAPI {\n  private hls: Hls | null;\n  private id3Track: TextTrack | null = null;\n  private media: HTMLMediaElement | null = null;\n  private dateRangeCuesAppended: Record<\n    string,\n    | {\n        cues: Record<string, VTTCue | TextTrackCue | undefined>;\n        dateRange: DateRange;\n        durationKnown: boolean;\n      }\n    | undefined\n  > = {};\n  private removeCues: boolean = true;\n  private assetCue?: VTTCue | TextTrackCue;\n\n  constructor(hls) {\n    this.hls = hls;\n    this._registerListeners();\n  }\n\n  public destroy() {\n    this._unregisterListeners();\n    this.id3Track = null;\n    this.media = null;\n    this.dateRangeCuesAppended = {};\n    // @ts-ignore\n    this.hls = this.onEventCueEnter = null;\n  }\n\n  private _registerListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.on(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.on(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n      hls.on(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.on(Events.LEVEL_PTS_UPDATED, this.onLevelPtsUpdated, this);\n    }\n  }\n\n  private _unregisterListeners() {\n    const { hls } = this;\n    if (hls) {\n      hls.off(Events.MEDIA_ATTACHING, this.onMediaAttaching, this);\n      hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n      hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n      hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n      hls.off(Events.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this);\n      hls.off(Events.BUFFER_FLUSHING, this.onBufferFlushing, this);\n      hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n      hls.off(Events.LEVEL_PTS_UPDATED, this.onLevelPtsUpdated, this);\n    }\n  }\n\n  private onEventCueEnter = () => {\n    if (!this.hls) {\n      return;\n    }\n    this.hls.trigger(Events.EVENT_CUE_ENTER, {});\n  };\n\n  // Add ID3 metatadata text track.\n  private onMediaAttaching(\n    event: Events.MEDIA_ATTACHING,\n    data: MediaAttachingData,\n  ): void {\n    this.media = data.media;\n    if (data.overrides?.cueRemoval === false) {\n      this.removeCues = false;\n    }\n  }\n\n  private onMediaAttached() {\n    const details = this.hls?.latestLevelDetails;\n    if (details) {\n      this.updateDateRangeCues(details);\n    }\n  }\n\n  private onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    this.media = null;\n    const transferringMedia = !!data.transferMedia;\n    if (transferringMedia) {\n      return;\n    }\n    if (this.id3Track) {\n      if (this.removeCues) {\n        clearCurrentCues(this.id3Track, this.onEventCueEnter);\n      }\n      this.id3Track = null;\n    }\n    this.dateRangeCuesAppended = {};\n  }\n\n  private onManifestLoading() {\n    this.dateRangeCuesAppended = {};\n  }\n\n  private createTrack(media: HTMLMediaElement): TextTrack {\n    const track = this.getID3Track(media.textTracks) as TextTrack;\n    track.mode = 'hidden';\n    return track;\n  }\n\n  private getID3Track(textTracks: TextTrackList): TextTrack | void {\n    if (!this.media) {\n      return;\n    }\n    for (let i = 0; i < textTracks.length; i++) {\n      const textTrack: TextTrack = textTracks[i];\n      if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {\n        // send 'addtrack' when reusing the textTrack for metadata,\n        // same as what we do for captions\n        sendAddTrackEvent(textTrack, this.media);\n\n        return textTrack;\n      }\n    }\n    return this.media.addTextTrack('metadata', 'id3');\n  }\n\n  private onFragParsingMetadata(\n    event: Events.FRAG_PARSING_METADATA,\n    data: FragParsingMetadataData,\n  ) {\n    if (!this.media || !this.hls) {\n      return;\n    }\n\n    const { enableEmsgMetadataCues, enableID3MetadataCues } = this.hls.config;\n    if (!enableEmsgMetadataCues && !enableID3MetadataCues) {\n      return;\n    }\n\n    const { samples } = data;\n\n    // create track dynamically\n    if (!this.id3Track) {\n      this.id3Track = this.createTrack(this.media);\n    }\n\n    const Cue = getCueClass();\n    if (!Cue) {\n      return;\n    }\n\n    for (let i = 0; i < samples.length; i++) {\n      const type = samples[i].type;\n      if (\n        (type === MetadataSchema.emsg && !enableEmsgMetadataCues) ||\n        !enableID3MetadataCues\n      ) {\n        continue;\n      }\n\n      const frames = getId3Frames(samples[i].data);\n      const startTime = samples[i].pts;\n      let endTime: number = startTime + samples[i].duration;\n\n      if (endTime > MAX_CUE_ENDTIME) {\n        endTime = MAX_CUE_ENDTIME;\n      }\n\n      const timeDiff = endTime - startTime;\n      if (timeDiff <= 0) {\n        endTime = startTime + MIN_CUE_DURATION;\n      }\n\n      for (let j = 0; j < frames.length; j++) {\n        const frame = frames[j];\n        // Safari doesn't put the timestamp frame in the TextTrack\n        if (!isId3TimestampFrame(frame)) {\n          // add a bounds to any unbounded cues\n          this.updateId3CueEnds(startTime, type);\n          const cue = createCueWithDataFields(\n            Cue,\n            startTime,\n            endTime,\n            frame,\n            type,\n          );\n          if (cue) {\n            this.id3Track.addCue(cue);\n          }\n        }\n      }\n    }\n  }\n\n  private updateId3CueEnds(startTime: number, type: MetadataSchema) {\n    const cues = this.id3Track?.cues;\n    if (cues) {\n      for (let i = cues.length; i--; ) {\n        const cue = cues[i] as any;\n        if (\n          cue.type === type &&\n          cue.startTime < startTime &&\n          cue.endTime === MAX_CUE_ENDTIME\n        ) {\n          cue.endTime = startTime;\n        }\n      }\n    }\n  }\n\n  private onBufferFlushing(\n    event: Events.BUFFER_FLUSHING,\n    { startOffset, endOffset, type }: BufferFlushingData,\n  ) {\n    const { id3Track, hls } = this;\n    if (!hls) {\n      return;\n    }\n\n    const {\n      config: { enableEmsgMetadataCues, enableID3MetadataCues },\n    } = hls;\n    if (id3Track && (enableEmsgMetadataCues || enableID3MetadataCues)) {\n      let predicate;\n\n      if (type === 'audio') {\n        predicate = (cue) =>\n          (cue as any).type === MetadataSchema.audioId3 &&\n          enableID3MetadataCues;\n      } else if (type === 'video') {\n        predicate = (cue) =>\n          (cue as any).type === MetadataSchema.emsg && enableEmsgMetadataCues;\n      } else {\n        predicate = (cue) =>\n          ((cue as any).type === MetadataSchema.audioId3 &&\n            enableID3MetadataCues) ||\n          ((cue as any).type === MetadataSchema.emsg && enableEmsgMetadataCues);\n      }\n      removeCuesInRange(id3Track, startOffset, endOffset, predicate);\n    }\n  }\n\n  private onLevelUpdated(\n    event: Events.LEVEL_UPDATED,\n    { details }: LevelUpdatedData,\n  ) {\n    this.updateDateRangeCues(details, true);\n  }\n\n  private onLevelPtsUpdated(\n    event: Events.LEVEL_PTS_UPDATED,\n    data: LevelPTSUpdatedData,\n  ) {\n    if (Math.abs(data.drift) > 0.01) {\n      this.updateDateRangeCues(data.details);\n    }\n  }\n\n  private updateDateRangeCues(details: LevelDetails, removeOldCues?: true) {\n    if (!this.hls || !this.media) {\n      return;\n    }\n    const {\n      assetPlayerId,\n      timelineOffset,\n      enableDateRangeMetadataCues,\n      interstitialsController,\n    } = this.hls.config;\n    if (!enableDateRangeMetadataCues) {\n      return;\n    }\n\n    const Cue = getCueClass();\n    if (\n      __USE_INTERSTITIALS__ &&\n      assetPlayerId &&\n      timelineOffset &&\n      !interstitialsController\n    ) {\n      const { fragmentStart, fragmentEnd } = details;\n      let cue = this.assetCue;\n      if (cue) {\n        cue.startTime = fragmentStart;\n        cue.endTime = fragmentEnd;\n      } else if (Cue) {\n        cue = this.assetCue = createCueWithDataFields(\n          Cue,\n          fragmentStart,\n          fragmentEnd,\n          { assetPlayerId: this.hls.config.assetPlayerId },\n          'hlsjs.interstitial.asset',\n        );\n        if (cue) {\n          cue.id = assetPlayerId;\n          this.id3Track ||= this.createTrack(this.media);\n          this.id3Track.addCue(cue);\n          cue.addEventListener('enter', this.onEventCueEnter);\n        }\n      }\n    }\n\n    if (!details.hasProgramDateTime) {\n      return;\n    }\n    const { id3Track } = this;\n    const { dateRanges } = details;\n    const ids = Object.keys(dateRanges);\n    let dateRangeCuesAppended = this.dateRangeCuesAppended;\n    // Remove cues from track not found in details.dateRanges\n    if (id3Track && removeOldCues) {\n      if (id3Track.cues?.length) {\n        const idsToRemove = Object.keys(dateRangeCuesAppended).filter(\n          (id) => !ids.includes(id),\n        );\n        for (let i = idsToRemove.length; i--; ) {\n          const id = idsToRemove[i];\n          const cues = dateRangeCuesAppended[id]?.cues;\n          delete dateRangeCuesAppended[id];\n          if (cues) {\n            Object.keys(cues).forEach((key) => {\n              const cue = cues[key];\n              if (cue) {\n                cue.removeEventListener('enter', this.onEventCueEnter);\n                try {\n                  id3Track.removeCue(cue);\n                } catch (e) {\n                  /* no-op */\n                }\n              }\n            });\n          }\n        }\n      } else {\n        dateRangeCuesAppended = this.dateRangeCuesAppended = {};\n      }\n    }\n    // Exit if the playlist does not have Date Ranges or does not have Program Date Time\n    const lastFragment = details.fragments[details.fragments.length - 1] as\n      | MediaFragment\n      | undefined;\n    if (ids.length === 0 || !Number.isFinite(lastFragment?.programDateTime)) {\n      return;\n    }\n\n    this.id3Track ||= this.createTrack(this.media);\n\n    for (let i = 0; i < ids.length; i++) {\n      const id = ids[i];\n      const dateRange = dateRanges[id]!;\n      const startTime = dateRange.startTime;\n\n      // Process DateRanges to determine end-time (known DURATION, END-DATE, or END-ON-NEXT)\n      const appendedDateRangeCues = dateRangeCuesAppended[id];\n      const cues = appendedDateRangeCues?.cues || {};\n      let durationKnown = appendedDateRangeCues?.durationKnown || false;\n      let endTime = MAX_CUE_ENDTIME;\n      const { duration, endDate } = dateRange;\n      if (endDate && duration !== null) {\n        endTime = startTime + duration;\n        durationKnown = true;\n      } else if (dateRange.endOnNext && !durationKnown) {\n        const nextDateRangeWithSameClass = ids.reduce(\n          (candidateDateRange: DateRange | null, id) => {\n            if (id !== dateRange.id) {\n              const otherDateRange = dateRanges[id]!;\n              if (\n                otherDateRange.class === dateRange.class &&\n                otherDateRange.startDate > dateRange.startDate &&\n                (!candidateDateRange ||\n                  dateRange.startDate < candidateDateRange.startDate)\n              ) {\n                return otherDateRange;\n              }\n            }\n            return candidateDateRange;\n          },\n          null,\n        );\n        if (nextDateRangeWithSameClass) {\n          endTime = nextDateRangeWithSameClass.startTime;\n          durationKnown = true;\n        }\n      }\n\n      // Create TextTrack Cues for each MetadataGroup Item (select DateRange attribute)\n      // This is to emulate Safari HLS playback handling of DateRange tags\n      const attributes = Object.keys(dateRange.attr);\n      for (let j = 0; j < attributes.length; j++) {\n        const key = attributes[j];\n        if (!isDateRangeCueAttribute(key)) {\n          continue;\n        }\n        const cue = cues[key];\n        if (cue) {\n          if (durationKnown && !appendedDateRangeCues?.durationKnown) {\n            cue.endTime = endTime;\n          } else if (Math.abs(cue.startTime - startTime) > 0.01) {\n            cue.startTime = startTime;\n            cue.endTime = endTime;\n          }\n        } else if (Cue) {\n          let data = dateRange.attr[key];\n          if (isSCTE35Attribute(key)) {\n            data = hexToArrayBuffer(data);\n          }\n          const payload: any = { key, data };\n          const cue = createCueWithDataFields(\n            Cue,\n            startTime,\n            endTime,\n            payload,\n            MetadataSchema.dateRange,\n          );\n          if (cue) {\n            cue.id = id;\n            this.id3Track.addCue(cue);\n            cues[key] = cue;\n            if (__USE_INTERSTITIALS__ && interstitialsController) {\n              if (key === 'X-ASSET-LIST' || key === 'X-ASSET-URL') {\n                cue.addEventListener('enter', this.onEventCueEnter);\n              }\n            }\n          }\n        }\n      }\n\n      // Keep track of processed DateRanges by ID for updating cues with new DateRange tag attributes\n      dateRangeCuesAppended[id] = {\n        cues,\n        dateRange,\n        durationKnown,\n      };\n    }\n  }\n}\n\nexport default ID3TrackController;\n","import { ErrorDetails } from '../errors';\nimport { Events } from '../events';\nimport type { HlsConfig } from '../config';\nimport type Hls from '../hls';\nimport type { LevelDetails } from '../loader/level-details';\nimport type { ComponentAPI } from '../types/component-api';\nimport type {\n  ErrorData,\n  LevelUpdatedData,\n  MediaAttachingData,\n} from '../types/events';\n\nexport default class LatencyController implements ComponentAPI {\n  private hls: Hls | null;\n  private readonly config: HlsConfig;\n  private media: HTMLMediaElement | null = null;\n  private currentTime: number = 0;\n  private stallCount: number = 0;\n  private _latency: number | null = null;\n  private _targetLatencyUpdated = false;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    this.config = hls.config;\n    this.registerListeners();\n  }\n\n  private get levelDetails(): LevelDetails | null {\n    return this.hls?.latestLevelDetails || null;\n  }\n\n  get latency(): number {\n    return this._latency || 0;\n  }\n\n  get maxLatency(): number {\n    const { config } = this;\n    if (config.liveMaxLatencyDuration !== undefined) {\n      return config.liveMaxLatencyDuration;\n    }\n    const levelDetails = this.levelDetails;\n    return levelDetails\n      ? config.liveMaxLatencyDurationCount * levelDetails.targetduration\n      : 0;\n  }\n\n  get targetLatency(): number | null {\n    const levelDetails = this.levelDetails;\n    if (levelDetails === null || this.hls === null) {\n      return null;\n    }\n    const { holdBack, partHoldBack, targetduration } = levelDetails;\n    const { liveSyncDuration, liveSyncDurationCount, lowLatencyMode } =\n      this.config;\n    const userConfig = this.hls.userConfig;\n    let targetLatency = lowLatencyMode ? partHoldBack || holdBack : holdBack;\n    if (\n      this._targetLatencyUpdated ||\n      userConfig.liveSyncDuration ||\n      userConfig.liveSyncDurationCount ||\n      targetLatency === 0\n    ) {\n      targetLatency =\n        liveSyncDuration !== undefined\n          ? liveSyncDuration\n          : liveSyncDurationCount * targetduration;\n    }\n    const maxLiveSyncOnStallIncrease = targetduration;\n    return (\n      targetLatency +\n      Math.min(\n        this.stallCount * this.config.liveSyncOnStallIncrease,\n        maxLiveSyncOnStallIncrease,\n      )\n    );\n  }\n\n  set targetLatency(latency: number) {\n    this.stallCount = 0;\n    this.config.liveSyncDuration = latency;\n    this._targetLatencyUpdated = true;\n  }\n\n  get liveSyncPosition(): number | null {\n    const liveEdge = this.estimateLiveEdge();\n    const targetLatency = this.targetLatency;\n    if (liveEdge === null || targetLatency === null) {\n      return null;\n    }\n    const levelDetails = this.levelDetails;\n    if (levelDetails === null) {\n      return null;\n    }\n    const edge = levelDetails.edge;\n    const syncPosition = liveEdge - targetLatency - this.edgeStalled;\n    const min = edge - levelDetails.totalduration;\n    const max =\n      edge -\n      ((this.config.lowLatencyMode && levelDetails.partTarget) ||\n        levelDetails.targetduration);\n    return Math.min(Math.max(min, syncPosition), max);\n  }\n\n  get drift(): number {\n    const levelDetails = this.levelDetails;\n    if (levelDetails === null) {\n      return 1;\n    }\n    return levelDetails.drift;\n  }\n\n  get edgeStalled(): number {\n    const levelDetails = this.levelDetails;\n    if (levelDetails === null) {\n      return 0;\n    }\n    const maxLevelUpdateAge =\n      ((this.config.lowLatencyMode && levelDetails.partTarget) ||\n        levelDetails.targetduration) * 3;\n    return Math.max(levelDetails.age - maxLevelUpdateAge, 0);\n  }\n\n  private get forwardBufferLength(): number {\n    const { media } = this;\n    const levelDetails = this.levelDetails;\n    if (!media || !levelDetails) {\n      return 0;\n    }\n    const bufferedRanges = media.buffered.length;\n    return (\n      (bufferedRanges\n        ? media.buffered.end(bufferedRanges - 1)\n        : levelDetails.edge) - this.currentTime\n    );\n  }\n\n  public destroy(): void {\n    this.unregisterListeners();\n    this.onMediaDetaching();\n    this.hls = null;\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    if (!hls) {\n      return;\n    }\n    hls.on(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.on(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    if (!hls) {\n      return;\n    }\n    hls.off(Events.MEDIA_ATTACHED, this.onMediaAttached, this);\n    hls.off(Events.MEDIA_DETACHING, this.onMediaDetaching, this);\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.LEVEL_UPDATED, this.onLevelUpdated, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  private onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachingData,\n  ) {\n    this.media = data.media;\n    this.media.addEventListener('timeupdate', this.onTimeupdate);\n  }\n\n  private onMediaDetaching() {\n    if (this.media) {\n      this.media.removeEventListener('timeupdate', this.onTimeupdate);\n      this.media = null;\n    }\n  }\n\n  private onManifestLoading() {\n    this._latency = null;\n    this.stallCount = 0;\n  }\n\n  private onLevelUpdated(\n    event: Events.LEVEL_UPDATED,\n    { details }: LevelUpdatedData,\n  ) {\n    if (details.advanced) {\n      this.onTimeupdate();\n    }\n    if (!details.live && this.media) {\n      this.media.removeEventListener('timeupdate', this.onTimeupdate);\n    }\n  }\n\n  private onError(event: Events.ERROR, data: ErrorData) {\n    if (data.details !== ErrorDetails.BUFFER_STALLED_ERROR) {\n      return;\n    }\n    this.stallCount++;\n    if (this.hls && this.levelDetails?.live) {\n      this.hls.logger.warn(\n        '[latency-controller]: Stall detected, adjusting target latency',\n      );\n    }\n  }\n\n  private onTimeupdate = () => {\n    const { media } = this;\n    const levelDetails = this.levelDetails;\n    if (!media || !levelDetails) {\n      return;\n    }\n    this.currentTime = media.currentTime;\n\n    const latency = this.computeLatency();\n    if (latency === null) {\n      return;\n    }\n    this._latency = latency;\n\n    // Adapt playbackRate to meet target latency in low-latency mode\n    const { lowLatencyMode, maxLiveSyncPlaybackRate } = this.config;\n    if (\n      !lowLatencyMode ||\n      maxLiveSyncPlaybackRate === 1 ||\n      !levelDetails.live\n    ) {\n      return;\n    }\n    const targetLatency = this.targetLatency;\n    if (targetLatency === null) {\n      return;\n    }\n    const distanceFromTarget = latency - targetLatency;\n    // Only adjust playbackRate when within one target duration of targetLatency\n    // and more than one second from under-buffering.\n    // Playback further than one target duration from target can be considered DVR playback.\n    const liveMinLatencyDuration = Math.min(\n      this.maxLatency,\n      targetLatency + levelDetails.targetduration,\n    );\n    const inLiveRange = distanceFromTarget < liveMinLatencyDuration;\n\n    if (\n      inLiveRange &&\n      distanceFromTarget > 0.05 &&\n      this.forwardBufferLength > 1\n    ) {\n      const max = Math.min(2, Math.max(1.0, maxLiveSyncPlaybackRate));\n      const rate =\n        Math.round(\n          (2 / (1 + Math.exp(-0.75 * distanceFromTarget - this.edgeStalled))) *\n            20,\n        ) / 20;\n      const playbackRate = Math.min(max, Math.max(1, rate));\n      this.changeMediaPlaybackRate(media, playbackRate);\n    } else if (media.playbackRate !== 1 && media.playbackRate !== 0) {\n      this.changeMediaPlaybackRate(media, 1);\n    }\n  };\n\n  private changeMediaPlaybackRate(\n    media: HTMLMediaElement,\n    playbackRate: number,\n  ) {\n    if (media.playbackRate === playbackRate) {\n      return;\n    }\n    this.hls?.logger.debug(\n      `[latency-controller]: latency=${this.latency.toFixed(3)}, targetLatency=${this.targetLatency?.toFixed(3)}, forwardBufferLength=${this.forwardBufferLength.toFixed(3)}: adjusting playback rate from ${media.playbackRate} to ${playbackRate}`,\n    );\n    media.playbackRate = playbackRate;\n  }\n\n  private estimateLiveEdge(): number | null {\n    const levelDetails = this.levelDetails;\n    if (levelDetails === null) {\n      return null;\n    }\n    return levelDetails.edge + levelDetails.age;\n  }\n\n  private computeLatency(): number | null {\n    const liveEdge = this.estimateLiveEdge();\n    if (liveEdge === null) {\n      return null;\n    }\n    return liveEdge - this.currentTime;\n  }\n}\n","import BasePlaylistController from './base-playlist-controller';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { isVideoRange, Level, VideoRangeValues } from '../types/level';\nimport { PlaylistContextType, PlaylistLevelType } from '../types/loader';\nimport {\n  areCodecsMediaSourceSupported,\n  codecsSetSelectionPreferenceValue,\n  convertAVC1ToAVCOTI,\n  getCodecCompatibleName,\n  videoCodecPreferenceValue,\n} from '../utils/codecs';\nimport { reassignFragmentLevelIndexes } from '../utils/level-helper';\nimport { getUnsupportedResult } from '../utils/mediacapabilities-helper';\nimport { stringify } from '../utils/safe-json-stringify';\nimport type ContentSteeringController from './content-steering-controller';\nimport type Hls from '../hls';\nimport type {\n  ErrorData,\n  FragBufferedData,\n  LevelLoadedData,\n  LevelsUpdatedData,\n  LevelSwitchingData,\n  ManifestLoadedData,\n  ManifestLoadingData,\n  ManifestParsedData,\n} from '../types/events';\nimport type { HlsUrlParameters, LevelParsed } from '../types/level';\nimport type { MediaPlaylist } from '../types/media-playlist';\n\nexport default class LevelController extends BasePlaylistController {\n  private _levels: Level[] = [];\n  private _firstLevel: number = -1;\n  private _maxAutoLevel: number = -1;\n  private _startLevel?: number;\n  private currentLevel: Level | null = null;\n  private currentLevelIndex: number = -1;\n  private manualLevelIndex: number = -1;\n  private steering: ContentSteeringController | null;\n\n  public onParsedComplete!: Function;\n\n  constructor(\n    hls: Hls,\n    contentSteeringController: ContentSteeringController | null,\n  ) {\n    super(hls, 'level-controller');\n    this.steering = contentSteeringController;\n    this._registerListeners();\n  }\n\n  private _registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.on(Events.ERROR, this.onError, this);\n  }\n\n  private _unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.MANIFEST_LOADED, this.onManifestLoaded, this);\n    hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n    hls.off(Events.ERROR, this.onError, this);\n  }\n\n  public destroy() {\n    this._unregisterListeners();\n    this.steering = null;\n    this.resetLevels();\n    super.destroy();\n  }\n\n  public stopLoad(): void {\n    const levels = this._levels;\n\n    // clean up live level details to force reload them, and reset load errors\n    levels.forEach((level) => {\n      level.loadError = 0;\n      level.fragmentError = 0;\n    });\n\n    super.stopLoad();\n  }\n\n  private resetLevels() {\n    this._startLevel = undefined;\n    this.manualLevelIndex = -1;\n    this.currentLevelIndex = -1;\n    this.currentLevel = null;\n    this._levels = [];\n    this._maxAutoLevel = -1;\n  }\n\n  private onManifestLoading(\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData,\n  ) {\n    this.resetLevels();\n  }\n\n  protected onManifestLoaded(\n    event: Events.MANIFEST_LOADED,\n    data: ManifestLoadedData,\n  ) {\n    const preferManagedMediaSource = this.hls.config.preferManagedMediaSource;\n    const levels: Level[] = [];\n    const redundantSet: { [key: string]: Level } = {};\n    const generatePathwaySet: { [key: string]: number } = {};\n    let resolutionFound = false;\n    let videoCodecFound = false;\n    let audioCodecFound = false;\n\n    data.levels.forEach((levelParsed: LevelParsed) => {\n      const attributes = levelParsed.attrs;\n      let { audioCodec, videoCodec } = levelParsed;\n      if (audioCodec) {\n        // Returns empty and set to undefined for 'mp4a.40.34' with fallback to 'audio/mpeg' SourceBuffer\n        levelParsed.audioCodec = audioCodec =\n          getCodecCompatibleName(audioCodec, preferManagedMediaSource) ||\n          undefined;\n      }\n\n      if (videoCodec) {\n        videoCodec = levelParsed.videoCodec = convertAVC1ToAVCOTI(videoCodec);\n      }\n\n      // only keep levels with supported audio/video codecs\n      const { width, height, unknownCodecs } = levelParsed;\n      const unknownUnsupportedCodecCount = unknownCodecs?.length || 0;\n\n      resolutionFound ||= !!(width && height);\n      videoCodecFound ||= !!videoCodec;\n      audioCodecFound ||= !!audioCodec;\n      if (\n        unknownUnsupportedCodecCount ||\n        (audioCodec && !this.isAudioSupported(audioCodec)) ||\n        (videoCodec && !this.isVideoSupported(videoCodec))\n      ) {\n        this.log(`Some or all CODECS not supported \"${attributes.CODECS}\"`);\n        return;\n      }\n\n      const {\n        CODECS,\n        'FRAME-RATE': FRAMERATE,\n        'HDCP-LEVEL': HDCP,\n        'PATHWAY-ID': PATHWAY,\n        RESOLUTION,\n        'VIDEO-RANGE': VIDEO_RANGE,\n      } = attributes;\n      const contentSteeringPrefix = `${PATHWAY || '.'}-`;\n      const levelKey = `${contentSteeringPrefix}${levelParsed.bitrate}-${RESOLUTION}-${FRAMERATE}-${CODECS}-${VIDEO_RANGE}-${HDCP}`;\n\n      if (!redundantSet[levelKey]) {\n        const level = this.createLevel(levelParsed);\n        redundantSet[levelKey] = level;\n        generatePathwaySet[levelKey] = 1;\n        levels.push(level);\n      } else if (\n        redundantSet[levelKey].uri !== levelParsed.url &&\n        !levelParsed.attrs['PATHWAY-ID']\n      ) {\n        // Assign Pathway IDs to Redundant Streams (default Pathways is \".\". Redundant Streams \"..\", \"...\", and so on.)\n        // Content Steering controller to handles Pathway fallback on error\n        const pathwayCount = (generatePathwaySet[levelKey] += 1);\n        levelParsed.attrs['PATHWAY-ID'] = new Array(pathwayCount + 1).join('.');\n        const level = this.createLevel(levelParsed);\n        redundantSet[levelKey] = level;\n        levels.push(level);\n      } else {\n        redundantSet[levelKey].addGroupId('audio', attributes.AUDIO);\n        redundantSet[levelKey].addGroupId('text', attributes.SUBTITLES);\n      }\n    });\n\n    this.filterAndSortMediaOptions(\n      levels,\n      data,\n      resolutionFound,\n      videoCodecFound,\n      audioCodecFound,\n    );\n  }\n\n  private createLevel(levelParsed: LevelParsed): Level {\n    const level = new Level(levelParsed);\n    const supplemental = levelParsed.supplemental;\n    if (\n      supplemental?.videoCodec &&\n      !this.isVideoSupported(supplemental.videoCodec)\n    ) {\n      const error = new Error(\n        `SUPPLEMENTAL-CODECS not supported \"${supplemental.videoCodec}\"`,\n      );\n      this.log(error.message);\n      level.supportedResult = getUnsupportedResult(error, []);\n    }\n    return level;\n  }\n\n  private isAudioSupported(codec: string): boolean {\n    return areCodecsMediaSourceSupported(\n      codec,\n      'audio',\n      this.hls.config.preferManagedMediaSource,\n    );\n  }\n\n  private isVideoSupported(codec: string): boolean {\n    return areCodecsMediaSourceSupported(\n      codec,\n      'video',\n      this.hls.config.preferManagedMediaSource,\n    );\n  }\n\n  private filterAndSortMediaOptions(\n    filteredLevels: Level[],\n    data: ManifestLoadedData,\n    resolutionFound: boolean,\n    videoCodecFound: boolean,\n    audioCodecFound: boolean,\n  ) {\n    let audioTracks: MediaPlaylist[] = [];\n    let subtitleTracks: MediaPlaylist[] = [];\n    let levels = filteredLevels;\n    const statsParsing = data.stats?.parsing || {};\n\n    // remove audio-only and invalid video-range levels if we also have levels with video codecs or RESOLUTION signalled\n    if ((resolutionFound || videoCodecFound) && audioCodecFound) {\n      levels = levels.filter(\n        ({ videoCodec, videoRange, width, height }) =>\n          (!!videoCodec || !!(width && height)) && isVideoRange(videoRange),\n      );\n    }\n\n    if (levels.length === 0) {\n      // Dispatch error after MANIFEST_LOADED is done propagating\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.resolve().then(() => {\n        if (this.hls) {\n          let message = 'no level with compatible codecs found in manifest';\n          let reason = message;\n          if (data.levels.length) {\n            reason = `one or more CODECS in variant not supported: ${stringify(\n              data.levels\n                .map((level) => level.attrs.CODECS)\n                .filter(\n                  (value, index, array) => array.indexOf(value) === index,\n                ),\n            )}`;\n            this.warn(reason);\n            message += ` (${reason})`;\n          }\n          const error = new Error(message);\n          this.hls.trigger(Events.ERROR, {\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR,\n            fatal: true,\n            url: data.url,\n            error,\n            reason,\n          });\n        }\n      });\n      statsParsing.end = performance.now();\n      return;\n    }\n\n    if (data.audioTracks) {\n      audioTracks = data.audioTracks.filter(\n        (track) => !track.audioCodec || this.isAudioSupported(track.audioCodec),\n      );\n      // Assign ids after filtering as array indices by group-id\n      assignTrackIdsByGroup(audioTracks);\n    }\n\n    if (data.subtitles) {\n      subtitleTracks = data.subtitles;\n      assignTrackIdsByGroup(subtitleTracks);\n    }\n    // start bitrate is the first bitrate of the manifest\n    const unsortedLevels = levels.slice(0);\n    // sort levels from lowest to highest\n    levels.sort((a, b) => {\n      if (a.attrs['HDCP-LEVEL'] !== b.attrs['HDCP-LEVEL']) {\n        return (a.attrs['HDCP-LEVEL'] || '') > (b.attrs['HDCP-LEVEL'] || '')\n          ? 1\n          : -1;\n      }\n      // sort on height before bitrate for cap-level-controller\n      if (resolutionFound && a.height !== b.height) {\n        return a.height - b.height;\n      }\n      if (a.frameRate !== b.frameRate) {\n        return a.frameRate - b.frameRate;\n      }\n      if (a.videoRange !== b.videoRange) {\n        return (\n          VideoRangeValues.indexOf(a.videoRange) -\n          VideoRangeValues.indexOf(b.videoRange)\n        );\n      }\n      if (a.videoCodec !== b.videoCodec) {\n        const valueA = videoCodecPreferenceValue(a.videoCodec);\n        const valueB = videoCodecPreferenceValue(b.videoCodec);\n        if (valueA !== valueB) {\n          return valueB - valueA;\n        }\n      }\n      if (a.uri === b.uri && a.codecSet !== b.codecSet) {\n        const valueA = codecsSetSelectionPreferenceValue(a.codecSet);\n        const valueB = codecsSetSelectionPreferenceValue(b.codecSet);\n        if (valueA !== valueB) {\n          return valueB - valueA;\n        }\n      }\n      if (a.averageBitrate !== b.averageBitrate) {\n        return a.averageBitrate - b.averageBitrate;\n      }\n      return 0;\n    });\n\n    let firstLevelInPlaylist = unsortedLevels[0];\n    if (this.steering) {\n      levels = this.steering.filterParsedLevels(levels);\n      if (levels.length !== unsortedLevels.length) {\n        for (let i = 0; i < unsortedLevels.length; i++) {\n          if (unsortedLevels[i].pathwayId === levels[0].pathwayId) {\n            firstLevelInPlaylist = unsortedLevels[i];\n            break;\n          }\n        }\n      }\n    }\n\n    this._levels = levels;\n\n    // find index of first level in sorted levels\n    for (let i = 0; i < levels.length; i++) {\n      if (levels[i] === firstLevelInPlaylist) {\n        this._firstLevel = i;\n        const firstLevelBitrate = firstLevelInPlaylist.bitrate;\n        const bandwidthEstimate = this.hls.bandwidthEstimate;\n        this.log(\n          `manifest loaded, ${levels.length} level(s) found, first bitrate: ${firstLevelBitrate}`,\n        );\n        // Update default bwe to first variant bitrate as long it has not been configured or set\n        if (this.hls.userConfig?.abrEwmaDefaultEstimate === undefined) {\n          const startingBwEstimate = Math.min(\n            firstLevelBitrate,\n            this.hls.config.abrEwmaDefaultEstimateMax,\n          );\n          if (\n            startingBwEstimate > bandwidthEstimate &&\n            bandwidthEstimate === this.hls.abrEwmaDefaultEstimate\n          ) {\n            this.hls.bandwidthEstimate = startingBwEstimate;\n          }\n        }\n        break;\n      }\n    }\n\n    // Audio is only alternate if manifest include a URI along with the audio group tag,\n    // and this is not an audio-only stream where levels contain audio-only\n    const audioOnly = audioCodecFound && !videoCodecFound;\n    const config = this.hls.config;\n    const altAudioEnabled = !!(\n      config.audioStreamController && config.audioTrackController\n    );\n    const edata: ManifestParsedData = {\n      levels,\n      audioTracks,\n      subtitleTracks,\n      sessionData: data.sessionData,\n      sessionKeys: data.sessionKeys,\n      firstLevel: this._firstLevel,\n      stats: data.stats,\n      audio: audioCodecFound,\n      video: videoCodecFound,\n      altAudio:\n        altAudioEnabled && !audioOnly && audioTracks.some((t) => !!t.url),\n    };\n    statsParsing.end = performance.now();\n    this.hls.trigger(Events.MANIFEST_PARSED, edata);\n  }\n\n  get levels(): Level[] | null {\n    if (this._levels.length === 0) {\n      return null;\n    }\n    return this._levels;\n  }\n\n  get loadLevelObj(): Level | null {\n    return this.currentLevel;\n  }\n\n  get level(): number {\n    return this.currentLevelIndex;\n  }\n\n  set level(newLevel: number) {\n    const levels = this._levels;\n    if (levels.length === 0) {\n      return;\n    }\n    // check if level idx is valid\n    if (newLevel < 0 || newLevel >= levels.length) {\n      // invalid level id given, trigger error\n      const error = new Error('invalid level idx');\n      const fatal = newLevel < 0;\n      this.hls.trigger(Events.ERROR, {\n        type: ErrorTypes.OTHER_ERROR,\n        details: ErrorDetails.LEVEL_SWITCH_ERROR,\n        level: newLevel,\n        fatal,\n        error,\n        reason: error.message,\n      });\n      if (fatal) {\n        return;\n      }\n      newLevel = Math.min(newLevel, levels.length - 1);\n    }\n\n    const lastLevelIndex = this.currentLevelIndex;\n    const lastLevel = this.currentLevel;\n    const lastPathwayId = lastLevel ? lastLevel.attrs['PATHWAY-ID'] : undefined;\n    const level = levels[newLevel];\n    const pathwayId = level.attrs['PATHWAY-ID'];\n    this.currentLevelIndex = newLevel;\n    this.currentLevel = level;\n\n    if (\n      lastLevelIndex === newLevel &&\n      lastLevel &&\n      lastPathwayId === pathwayId\n    ) {\n      return;\n    }\n\n    this.log(\n      `Switching to level ${newLevel} (${\n        level.height ? level.height + 'p ' : ''\n      }${level.videoRange ? level.videoRange + ' ' : ''}${\n        level.codecSet ? level.codecSet + ' ' : ''\n      }@${level.bitrate})${\n        pathwayId ? ' with Pathway ' + pathwayId : ''\n      } from level ${lastLevelIndex}${\n        lastPathwayId ? ' with Pathway ' + lastPathwayId : ''\n      }`,\n    );\n\n    const levelSwitchingData: LevelSwitchingData = {\n      level: newLevel,\n      attrs: level.attrs,\n      details: level.details,\n      bitrate: level.bitrate,\n      averageBitrate: level.averageBitrate,\n      maxBitrate: level.maxBitrate,\n      realBitrate: level.realBitrate,\n      width: level.width,\n      height: level.height,\n      codecSet: level.codecSet,\n      audioCodec: level.audioCodec,\n      videoCodec: level.videoCodec,\n      audioGroups: level.audioGroups,\n      subtitleGroups: level.subtitleGroups,\n      loaded: level.loaded,\n      loadError: level.loadError,\n      fragmentError: level.fragmentError,\n      name: level.name,\n      id: level.id,\n      uri: level.uri,\n      url: level.url,\n      urlId: 0,\n      audioGroupIds: level.audioGroupIds,\n      textGroupIds: level.textGroupIds,\n    };\n\n    this.hls.trigger(Events.LEVEL_SWITCHING, levelSwitchingData);\n    // check if we need to load playlist for this level\n    const levelDetails = level.details;\n    if (!levelDetails || levelDetails.live) {\n      // level not retrieved yet, or live playlist we need to (re)load it\n      const hlsUrlParameters = this.switchParams(\n        level.uri,\n        lastLevel?.details,\n        levelDetails,\n      );\n      this.loadPlaylist(hlsUrlParameters);\n    }\n  }\n\n  get manualLevel(): number {\n    return this.manualLevelIndex;\n  }\n\n  set manualLevel(newLevel) {\n    this.manualLevelIndex = newLevel;\n    if (this._startLevel === undefined) {\n      this._startLevel = newLevel;\n    }\n\n    if (newLevel !== -1) {\n      this.level = newLevel;\n    }\n  }\n\n  get firstLevel(): number {\n    return this._firstLevel;\n  }\n\n  set firstLevel(newLevel) {\n    this._firstLevel = newLevel;\n  }\n\n  get startLevel(): number {\n    // Setting hls.startLevel (this._startLevel) overrides config.startLevel\n    if (this._startLevel === undefined) {\n      const configStartLevel = this.hls.config.startLevel;\n      if (configStartLevel !== undefined) {\n        return configStartLevel;\n      }\n      return this.hls.firstAutoLevel;\n    }\n    return this._startLevel;\n  }\n\n  set startLevel(newLevel: number) {\n    this._startLevel = newLevel;\n  }\n\n  get pathways(): string[] {\n    if (this.steering) {\n      return this.steering.pathways();\n    }\n\n    return [];\n  }\n\n  get pathwayPriority(): string[] | null {\n    if (this.steering) {\n      return this.steering.pathwayPriority;\n    }\n\n    return null;\n  }\n\n  set pathwayPriority(pathwayPriority: string[]) {\n    if (this.steering) {\n      const pathwaysList = this.steering.pathways();\n      const filteredPathwayPriority = pathwayPriority.filter((pathwayId) => {\n        return pathwaysList.indexOf(pathwayId) !== -1;\n      });\n      if (pathwayPriority.length < 1) {\n        this.warn(\n          `pathwayPriority ${pathwayPriority} should contain at least one pathway from list: ${pathwaysList}`,\n        );\n        return;\n      }\n      this.steering.pathwayPriority = filteredPathwayPriority;\n    }\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData) {\n    if (data.fatal || !data.context) {\n      return;\n    }\n\n    if (\n      data.context.type === PlaylistContextType.LEVEL &&\n      data.context.level === this.level\n    ) {\n      this.checkRetry(data);\n    }\n  }\n\n  // reset errors on the successful load of a fragment\n  protected onFragBuffered(\n    event: Events.FRAG_BUFFERED,\n    { frag }: FragBufferedData,\n  ) {\n    if (frag !== undefined && frag.type === PlaylistLevelType.MAIN) {\n      const el = frag.elementaryStreams;\n      if (!Object.keys(el).some((type) => !!el[type])) {\n        return;\n      }\n      const level = this._levels[frag.level];\n      if (level?.loadError) {\n        this.log(\n          `Resetting level error count of ${level.loadError} on frag buffered`,\n        );\n        level.loadError = 0;\n      }\n    }\n  }\n\n  protected onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData) {\n    const { level, details } = data;\n    const curLevel = data.levelInfo;\n\n    if (!curLevel) {\n      this.warn(`Invalid level index ${level}`);\n      if (data.deliveryDirectives?.skip) {\n        details.deltaUpdateFailed = true;\n      }\n      return;\n    }\n\n    // only process level loaded events matching with expected level or prior to switch when media playlist is loaded directly\n    if (curLevel === this.currentLevel || data.withoutMultiVariant) {\n      // reset level load error counter on successful level loaded only if there is no issues with fragments\n      if (curLevel.fragmentError === 0) {\n        curLevel.loadError = 0;\n      }\n      // Ignore matching details populated by loading a Media Playlist directly\n      let previousDetails = curLevel.details;\n      if (previousDetails === data.details && previousDetails.advanced) {\n        previousDetails = undefined;\n      }\n\n      this.playlistLoaded(level, data, previousDetails);\n    } else if (data.deliveryDirectives?.skip) {\n      // received a delta playlist update that cannot be merged\n      details.deltaUpdateFailed = true;\n    }\n  }\n\n  protected loadPlaylist(hlsUrlParameters?: HlsUrlParameters) {\n    super.loadPlaylist();\n    if (this.shouldLoadPlaylist(this.currentLevel)) {\n      this.scheduleLoading(this.currentLevel, hlsUrlParameters);\n    }\n  }\n\n  protected loadingPlaylist(\n    currentLevel: Level,\n    hlsUrlParameters: HlsUrlParameters | undefined,\n  ) {\n    super.loadingPlaylist(currentLevel, hlsUrlParameters);\n    const url = this.getUrlWithDirectives(currentLevel.uri, hlsUrlParameters);\n    const currentLevelIndex = this.currentLevelIndex;\n    const pathwayId = currentLevel.attrs['PATHWAY-ID'];\n    const details = currentLevel.details;\n    const age = details?.age;\n    this.log(\n      `Loading level index ${currentLevelIndex}${\n        hlsUrlParameters?.msn !== undefined\n          ? ' at sn ' + hlsUrlParameters.msn + ' part ' + hlsUrlParameters.part\n          : ''\n      }${pathwayId ? ' Pathway ' + pathwayId : ''}${age && details.live ? ' age ' + age.toFixed(1) + (details.type ? ' ' + details.type || '' : '') : ''} ${url}`,\n    );\n\n    this.hls.trigger(Events.LEVEL_LOADING, {\n      url,\n      level: currentLevelIndex,\n      levelInfo: currentLevel,\n      pathwayId: currentLevel.attrs['PATHWAY-ID'],\n      id: 0, // Deprecated Level urlId\n      deliveryDirectives: hlsUrlParameters || null,\n    });\n  }\n\n  get nextLoadLevel() {\n    if (this.manualLevelIndex !== -1) {\n      return this.manualLevelIndex;\n    } else {\n      return this.hls.nextAutoLevel;\n    }\n  }\n\n  set nextLoadLevel(nextLevel) {\n    this.level = nextLevel;\n    if (this.manualLevelIndex === -1) {\n      this.hls.nextAutoLevel = nextLevel;\n    }\n  }\n\n  removeLevel(levelIndex: number) {\n    if (this._levels.length === 1) {\n      return;\n    }\n    const levels = this._levels.filter((level, index) => {\n      if (index !== levelIndex) {\n        return true;\n      }\n      if (this.steering) {\n        this.steering.removeLevel(level);\n      }\n      if (level === this.currentLevel) {\n        this.currentLevel = null;\n        this.currentLevelIndex = -1;\n        if (level.details) {\n          level.details.fragments.forEach((f) => (f.level = -1));\n        }\n      }\n      return false;\n    });\n    reassignFragmentLevelIndexes(levels);\n    this._levels = levels;\n    if (this.currentLevelIndex > -1 && this.currentLevel?.details) {\n      this.currentLevelIndex = this.currentLevel.details.fragments[0].level;\n    }\n    if (this.manualLevelIndex > -1) {\n      this.manualLevelIndex = this.currentLevelIndex;\n    }\n    const maxLevel = levels.length - 1;\n    this._firstLevel = Math.min(this._firstLevel, maxLevel);\n    if (this._startLevel) {\n      this._startLevel = Math.min(this._startLevel, maxLevel);\n    }\n    this.hls.trigger(Events.LEVELS_UPDATED, { levels });\n  }\n\n  private onLevelsUpdated(\n    event: Events.LEVELS_UPDATED,\n    { levels }: LevelsUpdatedData,\n  ) {\n    this._levels = levels;\n  }\n\n  public checkMaxAutoUpdated() {\n    const { autoLevelCapping, maxAutoLevel, maxHdcpLevel } = this.hls;\n    if (this._maxAutoLevel !== maxAutoLevel) {\n      this._maxAutoLevel = maxAutoLevel;\n      this.hls.trigger(Events.MAX_AUTO_LEVEL_UPDATED, {\n        autoLevelCapping,\n        levels: this.levels,\n        maxAutoLevel,\n        minAutoLevel: this.hls.minAutoLevel,\n        maxHdcpLevel,\n      });\n    }\n  }\n}\n\nfunction assignTrackIdsByGroup(tracks: MediaPlaylist[]): void {\n  const groups = {};\n  tracks.forEach((track) => {\n    const groupId = track.groupId || '';\n    track.id = groups[groupId] = groups[groupId] || 0;\n    groups[groupId]++;\n  });\n}\n","import { mimeTypeForCodec } from './utils/codecs';\nimport { getMediaSource } from './utils/mediasource-helper';\nimport type { ExtendedSourceBuffer } from './types/buffer';\n\nfunction getSourceBuffer(): typeof self.SourceBuffer {\n  return self.SourceBuffer || (self as any).WebKitSourceBuffer;\n}\n\nexport function isMSESupported(): boolean {\n  const mediaSource = getMediaSource();\n  if (!mediaSource) {\n    return false;\n  }\n\n  // if SourceBuffer is exposed ensure its API is valid\n  // Older browsers do not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n  const sourceBuffer = getSourceBuffer();\n  return (\n    !sourceBuffer ||\n    (sourceBuffer.prototype &&\n      typeof sourceBuffer.prototype.appendBuffer === 'function' &&\n      typeof sourceBuffer.prototype.remove === 'function')\n  );\n}\n\nexport function isSupported(): boolean {\n  if (!isMSESupported()) {\n    return false;\n  }\n\n  const mediaSource = getMediaSource();\n  return (\n    typeof mediaSource?.isTypeSupported === 'function' &&\n    (['avc1.42E01E,mp4a.40.2', 'av01.0.01M.08', 'vp09.00.50.08'].some(\n      (codecsForVideoContainer) =>\n        mediaSource.isTypeSupported(\n          mimeTypeForCodec(codecsForVideoContainer, 'video'),\n        ),\n    ) ||\n      ['mp4a.40.2', 'fLaC'].some((codecForAudioContainer) =>\n        mediaSource.isTypeSupported(\n          mimeTypeForCodec(codecForAudioContainer, 'audio'),\n        ),\n      ))\n  );\n}\n\nexport function changeTypeSupported(): boolean {\n  const sourceBuffer = getSourceBuffer();\n  return (\n    typeof (sourceBuffer?.prototype as ExtendedSourceBuffer)?.changeType ===\n    'function'\n  );\n}\n","import BaseStreamController, { State } from './base-stream-controller';\nimport { findFragmentByPTS } from './fragment-finders';\nimport { FragmentState } from './fragment-tracker';\nimport { MAX_START_GAP_JUMP } from './gap-controller';\nimport TransmuxerInterface from '../demux/transmuxer-interface';\nimport { ErrorDetails } from '../errors';\nimport { Events } from '../events';\nimport { changeTypeSupported } from '../is-supported';\nimport { ElementaryStreamTypes, isMediaFragment } from '../loader/fragment';\nimport { PlaylistContextType, PlaylistLevelType } from '../types/loader';\nimport { ChunkMetadata } from '../types/transmuxer';\nimport { BufferHelper } from '../utils/buffer-helper';\nimport { pickMostCompleteCodecName } from '../utils/codecs';\nimport {\n  addEventListener,\n  removeEventListener,\n} from '../utils/event-listener-helper';\nimport { useAlternateAudio } from '../utils/rendition-helper';\nimport type { FragmentTracker } from './fragment-tracker';\nimport type Hls from '../hls';\nimport type { Fragment, MediaFragment } from '../loader/fragment';\nimport type KeyLoader from '../loader/key-loader';\nimport type { LevelDetails } from '../loader/level-details';\nimport type {\n  BufferCreatedTrack,\n  ExtendedSourceBuffer,\n  SourceBufferName,\n} from '../types/buffer';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  AudioTrackSwitchedData,\n  AudioTrackSwitchingData,\n  BufferCodecsData,\n  BufferCreatedData,\n  BufferEOSData,\n  BufferFlushedData,\n  ErrorData,\n  FragBufferedData,\n  FragLoadedData,\n  FragParsingMetadataData,\n  FragParsingUserdataData,\n  LevelLoadedData,\n  LevelLoadingData,\n  LevelsUpdatedData,\n  ManifestParsedData,\n  MediaAttachedData,\n  MediaDetachingData,\n} from '../types/events';\nimport type { Level } from '../types/level';\nimport type { Track, TrackSet } from '../types/track';\nimport type { TransmuxerResult } from '../types/transmuxer';\nimport type { BufferInfo } from '../utils/buffer-helper';\n\nconst TICK_INTERVAL = 100; // how often to tick in ms\n\nconst enum AlternateAudio {\n  DISABLED = 0,\n  SWITCHING,\n  SWITCHED,\n}\n\nexport default class StreamController\n  extends BaseStreamController\n  implements NetworkComponentAPI\n{\n  private audioCodecSwap: boolean = false;\n  private level: number = -1;\n  private _forceStartLoad: boolean = false;\n  private _hasEnoughToStart: boolean = false;\n  private altAudio: AlternateAudio = AlternateAudio.DISABLED;\n  private audioOnly: boolean = false;\n  private fragPlaying: Fragment | null = null;\n  private fragLastKbps: number = 0;\n  private couldBacktrack: boolean = false;\n  private backtrackFragment: Fragment | null = null;\n  private audioCodecSwitch: boolean = false;\n  private videoBuffer: ExtendedSourceBuffer | null = null;\n\n  constructor(\n    hls: Hls,\n    fragmentTracker: FragmentTracker,\n    keyLoader: KeyLoader,\n  ) {\n    super(\n      hls,\n      fragmentTracker,\n      keyLoader,\n      'stream-controller',\n      PlaylistLevelType.MAIN,\n    );\n    this.registerListeners();\n  }\n\n  protected registerListeners() {\n    super.registerListeners();\n    const { hls } = this;\n    hls.on(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.on(\n      Events.FRAG_LOAD_EMERGENCY_ABORTED,\n      this.onFragLoadEmergencyAborted,\n      this,\n    );\n    hls.on(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.on(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.on(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    hls.on(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.on(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n  }\n\n  protected unregisterListeners() {\n    super.unregisterListeners();\n    const { hls } = this;\n    hls.off(Events.MANIFEST_PARSED, this.onManifestParsed, this);\n    hls.off(Events.LEVEL_LOADED, this.onLevelLoaded, this);\n    hls.off(\n      Events.FRAG_LOAD_EMERGENCY_ABORTED,\n      this.onFragLoadEmergencyAborted,\n      this,\n    );\n    hls.off(Events.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this);\n    hls.off(Events.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this);\n    hls.off(Events.BUFFER_CREATED, this.onBufferCreated, this);\n    hls.off(Events.BUFFER_FLUSHED, this.onBufferFlushed, this);\n    hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n    hls.off(Events.FRAG_BUFFERED, this.onFragBuffered, this);\n  }\n\n  protected onHandlerDestroying() {\n    // @ts-ignore\n    this.onMediaPlaying = this.onMediaSeeked = null;\n    this.unregisterListeners();\n    super.onHandlerDestroying();\n  }\n\n  public startLoad(\n    startPosition: number,\n    skipSeekToStartPosition?: boolean,\n  ): void {\n    if (this.levels) {\n      const { lastCurrentTime, hls } = this;\n      this.stopLoad();\n      this.setInterval(TICK_INTERVAL);\n      this.level = -1;\n      if (!this.startFragRequested) {\n        // determine load level\n        let startLevel = hls.startLevel;\n        if (startLevel === -1) {\n          if (hls.config.testBandwidth && this.levels.length > 1) {\n            // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n            startLevel = 0;\n            this.bitrateTest = true;\n          } else {\n            startLevel = hls.firstAutoLevel;\n          }\n        }\n        // set new level to playlist loader : this will trigger start level load\n        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n        hls.nextLoadLevel = startLevel;\n        this.level = hls.loadLevel;\n        this._hasEnoughToStart = !!skipSeekToStartPosition;\n      }\n      // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n      if (\n        lastCurrentTime > 0 &&\n        startPosition === -1 &&\n        !skipSeekToStartPosition\n      ) {\n        this.log(\n          `Override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(\n            3,\n          )}`,\n        );\n        startPosition = lastCurrentTime;\n      }\n      this.state = State.IDLE;\n      this.nextLoadPosition = this.lastCurrentTime =\n        startPosition + this.timelineOffset;\n      this.startPosition = skipSeekToStartPosition ? -1 : startPosition;\n      this.tick();\n    } else {\n      this._forceStartLoad = true;\n      this.state = State.STOPPED;\n    }\n  }\n\n  public stopLoad() {\n    this._forceStartLoad = false;\n    super.stopLoad();\n  }\n\n  protected doTick() {\n    switch (this.state) {\n      case State.WAITING_LEVEL: {\n        const { levels, level } = this;\n        const currentLevel = levels?.[level];\n        const details = currentLevel?.details;\n        if (\n          details &&\n          (!details.live ||\n            (this.levelLastLoaded === currentLevel &&\n              !this.waitForLive(currentLevel)))\n        ) {\n          if (this.waitForCdnTuneIn(details)) {\n            break;\n          }\n          this.state = State.IDLE;\n          break;\n        } else if (this.hls.nextLoadLevel !== this.level) {\n          this.state = State.IDLE;\n          break;\n        }\n        break;\n      }\n      case State.FRAG_LOADING_WAITING_RETRY:\n        this.checkRetryDate();\n        break;\n      default:\n        break;\n    }\n    if (this.state === State.IDLE) {\n      this.doTickIdle();\n    }\n    this.onTickEnd();\n  }\n\n  protected onTickEnd() {\n    super.onTickEnd();\n    if (this.media?.readyState && this.media.seeking === false) {\n      this.lastCurrentTime = this.media.currentTime;\n    }\n    this.checkFragmentChanged();\n  }\n\n  private doTickIdle() {\n    const { hls, levelLastLoaded, levels, media } = this;\n\n    // if start level not parsed yet OR\n    // if video not attached AND start fragment already requested OR start frag prefetch not enabled\n    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment\n    if (\n      levelLastLoaded === null ||\n      (!media &&\n        !this.primaryPrefetch &&\n        (this.startFragRequested || !hls.config.startFragPrefetch))\n    ) {\n      return;\n    }\n\n    // If the \"main\" level is audio-only but we are loading an alternate track in the same group, do not load anything\n    if (this.altAudio && this.audioOnly) {\n      return;\n    }\n\n    const level = this.buffering ? hls.nextLoadLevel : hls.loadLevel;\n    if (!levels?.[level]) {\n      return;\n    }\n\n    const levelInfo = levels[level];\n\n    // if buffer length is less than maxBufLen try to load a new fragment\n\n    const bufferInfo = this.getMainFwdBufferInfo();\n    if (bufferInfo === null) {\n      return;\n    }\n\n    const lastDetails = this.getLevelDetails();\n    if (lastDetails && this._streamEnded(bufferInfo, lastDetails)) {\n      const data: BufferEOSData = {};\n      if (this.altAudio === AlternateAudio.SWITCHED) {\n        data.type = 'video';\n      }\n\n      this.hls.trigger(Events.BUFFER_EOS, data);\n      this.state = State.ENDED;\n      return;\n    }\n    if (!this.buffering) {\n      return;\n    }\n\n    // set next load level : this will trigger a playlist load if needed\n    if (hls.loadLevel !== level && hls.manualLevel === -1) {\n      this.log(`Adapting to level ${level} from level ${this.level}`);\n    }\n    this.level = hls.nextLoadLevel = level;\n\n    const levelDetails = levelInfo.details;\n    // if level info not retrieved yet, switch state and wait for level retrieval\n    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n    if (\n      !levelDetails ||\n      this.state === State.WAITING_LEVEL ||\n      this.waitForLive(levelInfo)\n    ) {\n      this.level = level;\n      this.state = State.WAITING_LEVEL;\n      this.startFragRequested = false;\n      return;\n    }\n\n    const bufferLen = bufferInfo.len;\n\n    // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s\n    const maxBufLen = this.getMaxBufferLength(levelInfo.maxBitrate);\n\n    // Stay idle if we are still with buffer margins\n    if (bufferLen >= maxBufLen) {\n      return;\n    }\n\n    if (\n      this.backtrackFragment &&\n      this.backtrackFragment.start > bufferInfo.end\n    ) {\n      this.backtrackFragment = null;\n    }\n    const targetBufferTime = this.backtrackFragment\n      ? this.backtrackFragment.start\n      : bufferInfo.end;\n    let frag = this.getNextFragment(targetBufferTime, levelDetails);\n    // Avoid backtracking by loading an earlier segment in streams with segments that do not start with a key frame (flagged by `couldBacktrack`)\n    if (\n      this.couldBacktrack &&\n      !this.fragPrevious &&\n      frag &&\n      isMediaFragment(frag) &&\n      this.fragmentTracker.getState(frag) !== FragmentState.OK\n    ) {\n      const backtrackSn = (this.backtrackFragment ?? frag).sn as number;\n      const fragIdx = backtrackSn - levelDetails.startSN;\n      const backtrackFrag = levelDetails.fragments[fragIdx - 1];\n      if ((backtrackFrag as any) && frag.cc === backtrackFrag.cc) {\n        frag = backtrackFrag;\n        this.fragmentTracker.removeFragment(backtrackFrag);\n      }\n    } else if (this.backtrackFragment && bufferInfo.len) {\n      this.backtrackFragment = null;\n    }\n    // Avoid loop loading by using nextLoadPosition set for backtracking and skipping consecutive GAP tags\n    if (frag && this.isLoopLoading(frag, targetBufferTime)) {\n      const gapStart = frag.gap;\n      if (!gapStart) {\n        // Cleanup the fragment tracker before trying to find the next unbuffered fragment\n        const type =\n          this.audioOnly && !this.altAudio\n            ? ElementaryStreamTypes.AUDIO\n            : ElementaryStreamTypes.VIDEO;\n        const mediaBuffer =\n          (type === ElementaryStreamTypes.VIDEO\n            ? this.videoBuffer\n            : this.mediaBuffer) || this.media;\n        if (mediaBuffer) {\n          this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);\n        }\n      }\n      frag = this.getNextFragmentLoopLoading(\n        frag,\n        levelDetails,\n        bufferInfo,\n        PlaylistLevelType.MAIN,\n        maxBufLen,\n      );\n    }\n    if (!frag) {\n      return;\n    }\n    if (frag.initSegment && !frag.initSegment.data && !this.bitrateTest) {\n      frag = frag.initSegment;\n    }\n\n    this.loadFragment(frag, levelInfo, targetBufferTime);\n  }\n\n  protected loadFragment(\n    frag: Fragment,\n    level: Level,\n    targetBufferTime: number,\n  ) {\n    // Check if fragment is not loaded\n    const fragState = this.fragmentTracker.getState(frag);\n    if (\n      fragState === FragmentState.NOT_LOADED ||\n      fragState === FragmentState.PARTIAL\n    ) {\n      if (!isMediaFragment(frag)) {\n        this._loadInitSegment(frag, level);\n      } else if (this.bitrateTest) {\n        this.log(\n          `Fragment ${frag.sn} of level ${frag.level} is being downloaded to test bitrate and will not be buffered`,\n        );\n        this._loadBitrateTestFrag(frag, level);\n      } else {\n        super.loadFragment(frag, level, targetBufferTime);\n      }\n    } else {\n      this.clearTrackerIfNeeded(frag);\n    }\n  }\n\n  private getBufferedFrag(position: number) {\n    return this.fragmentTracker.getBufferedFrag(\n      position,\n      PlaylistLevelType.MAIN,\n    );\n  }\n\n  private followingBufferedFrag(frag: Fragment | null) {\n    if (frag) {\n      // try to get range of next fragment (500ms after this range)\n      return this.getBufferedFrag(frag.end + 0.5);\n    }\n    return null;\n  }\n\n  /*\n    on immediate level switch :\n     - pause playback if playing\n     - cancel any pending load request\n     - and trigger a buffer flush\n  */\n  public immediateLevelSwitch() {\n    this.abortCurrentFrag();\n    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n  }\n\n  /**\n   * try to switch ASAP without breaking video playback:\n   * in order to ensure smooth but quick level switching,\n   * we need to find the next flushable buffer range\n   * we should take into account new segment fetch time\n   */\n  public nextLevelSwitch() {\n    const { levels, media } = this;\n    // ensure that media is defined and that metadata are available (to retrieve currentTime)\n    if (media?.readyState) {\n      let fetchdelay;\n      const fragPlayingCurrent = this.getAppendedFrag(media.currentTime);\n      if (fragPlayingCurrent && fragPlayingCurrent.start > 1) {\n        // flush buffer preceding current fragment (flush until current fragment start offset)\n        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n        this.flushMainBuffer(0, fragPlayingCurrent.start - 1);\n      }\n      const levelDetails = this.getLevelDetails();\n      if (levelDetails?.live) {\n        const bufferInfo = this.getMainFwdBufferInfo();\n        // Do not flush in live stream with low buffer\n        if (!bufferInfo || bufferInfo.len < levelDetails.targetduration * 2) {\n          return;\n        }\n      }\n      if (!media.paused && levels) {\n        // add a safety delay of 1s\n        const nextLevelId = this.hls.nextLoadLevel;\n        const nextLevel = levels[nextLevelId];\n        const fragLastKbps = this.fragLastKbps;\n        if (fragLastKbps && this.fragCurrent) {\n          fetchdelay =\n            (this.fragCurrent.duration * nextLevel.maxBitrate) /\n              (1000 * fragLastKbps) +\n            1;\n        } else {\n          fetchdelay = 0;\n        }\n      } else {\n        fetchdelay = 0;\n      }\n      // this.log('fetchdelay:'+fetchdelay);\n      // find buffer range that will be reached once new fragment will be fetched\n      const bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n      if (bufferedFrag) {\n        // we can flush buffer range following this one without stalling playback\n        const nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);\n        if (nextBufferedFrag) {\n          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n          this.abortCurrentFrag();\n          // start flush position is in next buffered frag. Leave some padding for non-independent segments and smoother playback.\n          const maxStart = nextBufferedFrag.maxStartPTS\n            ? nextBufferedFrag.maxStartPTS\n            : nextBufferedFrag.start;\n          const fragDuration = nextBufferedFrag.duration;\n          const startPts = Math.max(\n            bufferedFrag.end,\n            maxStart +\n              Math.min(\n                Math.max(\n                  fragDuration - this.config.maxFragLookUpTolerance,\n                  fragDuration * (this.couldBacktrack ? 0.5 : 0.125),\n                ),\n                fragDuration * (this.couldBacktrack ? 0.75 : 0.25),\n              ),\n          );\n          this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);\n        }\n      }\n    }\n  }\n\n  private abortCurrentFrag() {\n    const fragCurrent = this.fragCurrent;\n    this.fragCurrent = null;\n    this.backtrackFragment = null;\n    if (fragCurrent) {\n      fragCurrent.abortRequests();\n      this.fragmentTracker.removeFragment(fragCurrent);\n    }\n    switch (this.state) {\n      case State.KEY_LOADING:\n      case State.FRAG_LOADING:\n      case State.FRAG_LOADING_WAITING_RETRY:\n      case State.PARSING:\n      case State.PARSED:\n        this.state = State.IDLE;\n        break;\n    }\n    this.nextLoadPosition = this.getLoadPosition();\n  }\n\n  protected flushMainBuffer(startOffset: number, endOffset: number) {\n    super.flushMainBuffer(\n      startOffset,\n      endOffset,\n      this.altAudio === AlternateAudio.SWITCHED ? 'video' : null,\n    );\n  }\n\n  protected onMediaAttached(\n    event: Events.MEDIA_ATTACHED,\n    data: MediaAttachedData,\n  ) {\n    super.onMediaAttached(event, data);\n    const media = data.media;\n    addEventListener(media, 'playing', this.onMediaPlaying);\n    addEventListener(media, 'seeked', this.onMediaSeeked);\n  }\n\n  protected onMediaDetaching(\n    event: Events.MEDIA_DETACHING,\n    data: MediaDetachingData,\n  ) {\n    const { media } = this;\n    if (media) {\n      removeEventListener(media, 'playing', this.onMediaPlaying);\n      removeEventListener(media, 'seeked', this.onMediaSeeked);\n    }\n    this.videoBuffer = null;\n    this.fragPlaying = null;\n    super.onMediaDetaching(event, data);\n    const transferringMedia = !!data.transferMedia;\n    if (transferringMedia) {\n      return;\n    }\n    this._hasEnoughToStart = false;\n  }\n\n  private onMediaPlaying = () => {\n    // tick to speed up FRAG_CHANGED triggering\n    this.tick();\n  };\n\n  private onMediaSeeked = () => {\n    const media = this.media;\n    const currentTime = media ? media.currentTime : null;\n    if (currentTime === null || !Number.isFinite(currentTime)) {\n      return;\n    }\n\n    this.log(`Media seeked to ${currentTime.toFixed(3)}`);\n\n    // If seeked was issued before buffer was appended do not tick immediately\n    if (!this.getBufferedFrag(currentTime)) {\n      return;\n    }\n    const bufferInfo = this.getFwdBufferInfoAtPos(\n      media,\n      currentTime,\n      PlaylistLevelType.MAIN,\n      0,\n    );\n    if (bufferInfo === null || bufferInfo.len === 0) {\n      this.warn(\n        `Main forward buffer length at ${currentTime} on \"seeked\" event ${\n          bufferInfo ? bufferInfo.len : 'empty'\n        })`,\n      );\n      return;\n    }\n\n    // tick to speed up FRAG_CHANGED triggering\n    this.tick();\n  };\n\n  protected onManifestLoading() {\n    super.onManifestLoading();\n    // reset buffer on manifest loading\n    this.log('Trigger BUFFER_RESET');\n    this.hls.trigger(Events.BUFFER_RESET, undefined);\n    this.couldBacktrack = false;\n    this.fragLastKbps = 0;\n    this.fragPlaying = this.backtrackFragment = null;\n    this.altAudio = AlternateAudio.DISABLED;\n    this.audioOnly = false;\n  }\n\n  private onManifestParsed(\n    event: Events.MANIFEST_PARSED,\n    data: ManifestParsedData,\n  ) {\n    // detect if we have different kind of audio codecs used amongst playlists\n    let aac = false;\n    let heaac = false;\n    for (let i = 0; i < data.levels.length; i++) {\n      const codec = data.levels[i].audioCodec;\n      if (codec) {\n        aac = aac || codec.indexOf('mp4a.40.2') !== -1;\n        heaac = heaac || codec.indexOf('mp4a.40.5') !== -1;\n      }\n    }\n    this.audioCodecSwitch = aac && heaac && !changeTypeSupported();\n    if (this.audioCodecSwitch) {\n      this.log(\n        'Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC',\n      );\n    }\n\n    this.levels = data.levels;\n    this.startFragRequested = false;\n  }\n\n  private onLevelLoading(event: Events.LEVEL_LOADING, data: LevelLoadingData) {\n    const { levels } = this;\n    if (!levels || this.state !== State.IDLE) {\n      return;\n    }\n    const level = data.levelInfo;\n    if (\n      !level.details ||\n      (level.details.live &&\n        (this.levelLastLoaded !== level || level.details.expired)) ||\n      this.waitForCdnTuneIn(level.details)\n    ) {\n      this.state = State.WAITING_LEVEL;\n    }\n  }\n\n  private onLevelLoaded(event: Events.LEVEL_LOADED, data: LevelLoadedData) {\n    const { levels, startFragRequested } = this;\n    const newLevelId = data.level;\n    const newDetails = data.details;\n    const duration = newDetails.totalduration;\n\n    if (!levels) {\n      this.warn(`Levels were reset while loading level ${newLevelId}`);\n      return;\n    }\n    this.log(\n      `Level ${newLevelId} loaded [${newDetails.startSN},${newDetails.endSN}]${\n        newDetails.lastPartSn\n          ? `[part-${newDetails.lastPartSn}-${newDetails.lastPartIndex}]`\n          : ''\n      }, cc [${newDetails.startCC}, ${newDetails.endCC}] duration:${duration}`,\n    );\n\n    const curLevel = data.levelInfo;\n    const fragCurrent = this.fragCurrent;\n    if (\n      fragCurrent &&\n      (this.state === State.FRAG_LOADING ||\n        this.state === State.FRAG_LOADING_WAITING_RETRY)\n    ) {\n      if (fragCurrent.level !== data.level && fragCurrent.loader) {\n        this.abortCurrentFrag();\n      }\n    }\n\n    let sliding = 0;\n    if (newDetails.live || curLevel.details?.live) {\n      this.checkLiveUpdate(newDetails);\n      if (newDetails.deltaUpdateFailed) {\n        return;\n      }\n      sliding = this.alignPlaylists(\n        newDetails,\n        curLevel.details,\n        this.levelLastLoaded?.details,\n      );\n    }\n    // override level info\n    curLevel.details = newDetails;\n    this.levelLastLoaded = curLevel;\n\n    if (!startFragRequested) {\n      this.setStartPosition(newDetails, sliding);\n    }\n\n    this.hls.trigger(Events.LEVEL_UPDATED, {\n      details: newDetails,\n      level: newLevelId,\n    });\n\n    // only switch back to IDLE state if we were waiting for level to start downloading a new fragment\n    if (this.state === State.WAITING_LEVEL) {\n      if (this.waitForCdnTuneIn(newDetails)) {\n        // Wait for Low-Latency CDN Tune-in\n        return;\n      }\n      this.state = State.IDLE;\n    }\n\n    if (startFragRequested && newDetails.live) {\n      this.synchronizeToLiveEdge(newDetails);\n    }\n\n    // trigger handler right now\n    this.tick();\n  }\n\n  private synchronizeToLiveEdge(levelDetails: LevelDetails) {\n    const { config, media } = this;\n    if (!media) {\n      return;\n    }\n    const liveSyncPosition = this.hls.liveSyncPosition;\n    const currentTime = this.getLoadPosition();\n    const start = levelDetails.fragmentStart;\n    const end = levelDetails.edge;\n    const withinSlidingWindow =\n      currentTime >= start - config.maxFragLookUpTolerance &&\n      currentTime <= end;\n    // Continue if we can seek forward to sync position or if current time is outside of sliding window\n    if (\n      liveSyncPosition !== null &&\n      media.duration > liveSyncPosition &&\n      (currentTime < liveSyncPosition || !withinSlidingWindow)\n    ) {\n      // Continue if buffer is starving or if current time is behind max latency\n      const maxLatency =\n        config.liveMaxLatencyDuration !== undefined\n          ? config.liveMaxLatencyDuration\n          : config.liveMaxLatencyDurationCount * levelDetails.targetduration;\n      if (\n        (!withinSlidingWindow && media.readyState < 4) ||\n        currentTime < end - maxLatency\n      ) {\n        if (!this._hasEnoughToStart) {\n          this.nextLoadPosition = liveSyncPosition;\n        }\n        // Only seek if ready and there is not a significant forward buffer available for playback\n        if (media.readyState) {\n          this.warn(\n            `Playback: ${currentTime.toFixed(\n              3,\n            )} is located too far from the end of live sliding playlist: ${end}, reset currentTime to : ${liveSyncPosition.toFixed(\n              3,\n            )}`,\n          );\n\n          if (this.config.liveSyncMode === 'buffered') {\n            const bufferInfo = BufferHelper.bufferInfo(\n              media,\n              liveSyncPosition,\n              0,\n            );\n\n            if (!bufferInfo.buffered?.length) {\n              media.currentTime = liveSyncPosition;\n              return;\n            }\n\n            const isLiveSyncInBuffer = bufferInfo.start <= currentTime;\n\n            if (isLiveSyncInBuffer) {\n              media.currentTime = liveSyncPosition;\n              return;\n            }\n\n            const { nextStart } = BufferHelper.bufferedInfo(\n              bufferInfo.buffered,\n              currentTime,\n              0,\n            );\n            if (nextStart) {\n              media.currentTime = nextStart;\n            }\n          } else {\n            media.currentTime = liveSyncPosition;\n          }\n        }\n      }\n    }\n  }\n\n  protected _handleFragmentLoadProgress(data: FragLoadedData) {\n    const frag = data.frag as MediaFragment;\n    const { part, payload } = data;\n    const { levels } = this;\n    if (!levels) {\n      this.warn(\n        `Levels were reset while fragment load was in progress. Fragment ${frag.sn} of level ${frag.level} will not be buffered`,\n      );\n      return;\n    }\n    const currentLevel = levels[frag.level];\n    if (!currentLevel as any) {\n      this.warn(`Level ${frag.level} not found on progress`);\n      return;\n    }\n    const details = currentLevel.details;\n    if (!details) {\n      this.warn(\n        `Dropping fragment ${frag.sn} of level ${frag.level} after level details were reset`,\n      );\n      this.fragmentTracker.removeFragment(frag);\n      return;\n    }\n    const videoCodec = currentLevel.videoCodec;\n\n    // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)\n    const accurateTimeOffset = details.PTSKnown || !details.live;\n    const initSegmentData = frag.initSegment?.data;\n    const audioCodec = this._getAudioCodec(currentLevel);\n\n    // transmux the MPEG-TS data to ISO-BMFF segments\n    // this.log(`Transmuxing ${frag.sn} of [${details.startSN} ,${details.endSN}],level ${frag.level}, cc ${frag.cc}`);\n    const transmuxer = (this.transmuxer =\n      this.transmuxer ||\n      new TransmuxerInterface(\n        this.hls,\n        PlaylistLevelType.MAIN,\n        this._handleTransmuxComplete.bind(this),\n        this._handleTransmuxerFlush.bind(this),\n      ));\n    const partIndex = part ? part.index : -1;\n    const partial = partIndex !== -1;\n    const chunkMeta = new ChunkMetadata(\n      frag.level,\n      frag.sn,\n      frag.stats.chunkCount,\n      payload.byteLength,\n      partIndex,\n      partial,\n    );\n    const initPTS = this.initPTS[frag.cc];\n\n    transmuxer.push(\n      payload,\n      initSegmentData,\n      audioCodec,\n      videoCodec,\n      frag,\n      part,\n      details.totalduration,\n      accurateTimeOffset,\n      chunkMeta,\n      initPTS,\n    );\n  }\n\n  private onAudioTrackSwitching(\n    event: Events.AUDIO_TRACK_SWITCHING,\n    data: AudioTrackSwitchingData,\n  ) {\n    const hls = this.hls;\n    // if any URL found on new audio track, it is an alternate audio track\n    const fromAltAudio = this.altAudio === AlternateAudio.SWITCHED;\n    const altAudio = useAlternateAudio(data.url, hls);\n    // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n    // don't do anything if we switch to alt audio: audio stream controller is handling it.\n    // we will just have to change buffer scheduling on audioTrackSwitched\n    if (!altAudio) {\n      if (this.mediaBuffer !== this.media) {\n        this.log(\n          'Switching on main audio, use media.buffered to schedule main fragment loading',\n        );\n        this.mediaBuffer = this.media;\n        const fragCurrent = this.fragCurrent;\n        // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n        if (fragCurrent) {\n          this.log('Switching to main audio track, cancel main fragment load');\n          fragCurrent.abortRequests();\n          this.fragmentTracker.removeFragment(fragCurrent);\n        }\n        // destroy transmuxer to force init segment generation (following audio switch)\n        this.resetTransmuxer();\n        // switch to IDLE state to load new fragment\n        this.resetLoadingState();\n      } else if (this.audioOnly) {\n        // Reset audio transmuxer so when switching back to main audio we're not still appending where we left off\n        this.resetTransmuxer();\n      }\n      // If switching from alt to main audio, flush all audio and trigger track switched\n      if (fromAltAudio) {\n        this.fragmentTracker.removeAllFragments();\n        hls.once(Events.BUFFER_FLUSHED, () => {\n          if (!this.hls as any) {\n            return;\n          }\n          this.hls.trigger(Events.AUDIO_TRACK_SWITCHED, data);\n        });\n        hls.trigger(Events.BUFFER_FLUSHING, {\n          startOffset: 0,\n          endOffset: Number.POSITIVE_INFINITY,\n          type: null,\n        });\n        return;\n      }\n      hls.trigger(Events.AUDIO_TRACK_SWITCHED, data);\n    } else {\n      this.altAudio = AlternateAudio.SWITCHING;\n    }\n  }\n\n  private onAudioTrackSwitched(\n    event: Events.AUDIO_TRACK_SWITCHED,\n    data: AudioTrackSwitchedData,\n  ) {\n    const altAudio = useAlternateAudio(data.url, this.hls);\n    if (altAudio) {\n      const videoBuffer = this.videoBuffer;\n      // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n      if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n        this.log(\n          'Switching on alternate audio, use video.buffered to schedule main fragment loading',\n        );\n        this.mediaBuffer = videoBuffer;\n      }\n    }\n    this.altAudio = altAudio\n      ? AlternateAudio.SWITCHED\n      : AlternateAudio.DISABLED;\n    this.tick();\n  }\n\n  private onBufferCreated(\n    event: Events.BUFFER_CREATED,\n    data: BufferCreatedData,\n  ) {\n    const tracks = data.tracks;\n    let mediaTrack: BufferCreatedTrack | undefined;\n    let name: string | undefined;\n    let alternate = false;\n    for (const type in tracks) {\n      const track: BufferCreatedTrack = tracks[type];\n      if (track.id === 'main') {\n        name = type;\n        mediaTrack = track;\n        // keep video source buffer reference\n        if (type === 'video') {\n          const videoTrack = tracks[type];\n          if (videoTrack) {\n            this.videoBuffer = videoTrack.buffer;\n          }\n        }\n      } else {\n        alternate = true;\n      }\n    }\n    if (alternate && mediaTrack) {\n      this.log(\n        `Alternate track found, use ${name}.buffered to schedule main fragment loading`,\n      );\n      this.mediaBuffer = mediaTrack.buffer;\n    } else {\n      this.mediaBuffer = this.media;\n    }\n  }\n\n  private onFragBuffered(event: Events.FRAG_BUFFERED, data: FragBufferedData) {\n    const { frag, part } = data;\n    const bufferedMainFragment = frag.type === PlaylistLevelType.MAIN;\n    if (bufferedMainFragment) {\n      if (this.fragContextChanged(frag)) {\n        // If a level switch was requested while a fragment was buffering, it will emit the FRAG_BUFFERED event upon completion\n        // Avoid setting state back to IDLE, since that will interfere with a level switch\n        this.warn(\n          `Fragment ${frag.sn}${part ? ' p: ' + part.index : ''} of level ${\n            frag.level\n          } finished buffering, but was aborted. state: ${this.state}`,\n        );\n        if (this.state === State.PARSED) {\n          this.state = State.IDLE;\n        }\n        return;\n      }\n      const stats = part ? part.stats : frag.stats;\n      this.fragLastKbps = Math.round(\n        (8 * stats.total) / (stats.buffering.end - stats.loading.first),\n      );\n      if (isMediaFragment(frag)) {\n        this.fragPrevious = frag;\n      }\n      this.fragBufferedComplete(frag, part);\n    }\n\n    const media = this.media;\n    if (!media) {\n      return;\n    }\n    if (!this._hasEnoughToStart && BufferHelper.getBuffered(media).length) {\n      this._hasEnoughToStart = true;\n      this.seekToStartPos();\n    }\n    if (bufferedMainFragment) {\n      this.tick();\n    }\n  }\n\n  public get hasEnoughToStart(): boolean {\n    return this._hasEnoughToStart;\n  }\n\n  protected onError(event: Events.ERROR, data: ErrorData) {\n    if (data.fatal) {\n      this.state = State.ERROR;\n      return;\n    }\n    switch (data.details) {\n      case ErrorDetails.FRAG_GAP:\n      case ErrorDetails.FRAG_PARSING_ERROR:\n      case ErrorDetails.FRAG_DECRYPT_ERROR:\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.KEY_LOAD_ERROR:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n        this.onFragmentOrKeyLoadError(PlaylistLevelType.MAIN, data);\n        break;\n      case ErrorDetails.LEVEL_LOAD_ERROR:\n      case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n      case ErrorDetails.LEVEL_PARSING_ERROR:\n        // in case of non fatal error while loading level, if level controller is not retrying to load level, switch back to IDLE\n        if (\n          !data.levelRetry &&\n          this.state === State.WAITING_LEVEL &&\n          data.context?.type === PlaylistContextType.LEVEL\n        ) {\n          this.state = State.IDLE;\n        }\n        break;\n      case ErrorDetails.BUFFER_ADD_CODEC_ERROR:\n      case ErrorDetails.BUFFER_APPEND_ERROR:\n        if (data.parent !== 'main') {\n          return;\n        }\n        if (this.reduceLengthAndFlushBuffer(data)) {\n          this.resetLoadingState();\n        }\n        break;\n      case ErrorDetails.BUFFER_FULL_ERROR:\n        if (data.parent !== 'main') {\n          return;\n        }\n        if (this.reduceLengthAndFlushBuffer(data)) {\n          const isAssetPlayer =\n            !this.config.interstitialsController && this.config.assetPlayerId;\n          if (isAssetPlayer) {\n            // Use currentTime in buffer estimate to prevent loading more until playback advances\n            this._hasEnoughToStart = true;\n          } else {\n            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);\n          }\n        }\n        break;\n      case ErrorDetails.INTERNAL_EXCEPTION:\n        this.recoverWorkerError(data);\n        break;\n      default:\n        break;\n    }\n  }\n\n  private onFragLoadEmergencyAborted() {\n    this.state = State.IDLE;\n    // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n    // in that case, reset startFragRequested flag\n    if (!this._hasEnoughToStart) {\n      this.startFragRequested = false;\n      this.nextLoadPosition = this.lastCurrentTime;\n    }\n    this.tickImmediate();\n  }\n\n  private onBufferFlushed(\n    event: Events.BUFFER_FLUSHED,\n    { type }: BufferFlushedData,\n  ) {\n    if (type !== ElementaryStreamTypes.AUDIO || !this.altAudio) {\n      const mediaBuffer =\n        (type === ElementaryStreamTypes.VIDEO\n          ? this.videoBuffer\n          : this.mediaBuffer) || this.media;\n      if (mediaBuffer) {\n        this.afterBufferFlushed(mediaBuffer, type, PlaylistLevelType.MAIN);\n        this.tick();\n      }\n    }\n  }\n\n  private onLevelsUpdated(\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData,\n  ) {\n    if (this.level > -1 && this.fragCurrent) {\n      this.level = this.fragCurrent.level;\n      if (this.level === -1) {\n        this.resetWhenMissingContext(this.fragCurrent);\n      }\n    }\n    this.levels = data.levels;\n  }\n\n  public swapAudioCodec() {\n    this.audioCodecSwap = !this.audioCodecSwap;\n  }\n\n  /**\n   * Seeks to the set startPosition if not equal to the mediaElement's current time.\n   */\n  protected seekToStartPos() {\n    const { media } = this;\n    if (!media) {\n      return;\n    }\n    const currentTime = media.currentTime;\n    let startPosition = this.startPosition;\n    // only adjust currentTime if different from startPosition or if startPosition not buffered\n    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n    if (startPosition >= 0 && currentTime < startPosition) {\n      if (media.seeking) {\n        this.log(\n          `could not seek to ${startPosition}, already seeking at ${currentTime}`,\n        );\n        return;\n      }\n\n      // Offset start position by timeline offset\n      const timelineOffset = this.timelineOffset;\n      if (timelineOffset && startPosition) {\n        startPosition += timelineOffset;\n      }\n      const details = this.getLevelDetails();\n      const buffered = BufferHelper.getBuffered(media);\n      const bufferStart = buffered.length ? buffered.start(0) : 0;\n      const delta = bufferStart - startPosition;\n      const skipTolerance = Math.max(\n        this.config.maxBufferHole,\n        this.config.maxFragLookUpTolerance,\n      );\n      if (\n        this.config.startOnSegmentBoundary ||\n        (delta > 0 &&\n          (delta < skipTolerance ||\n            (this.loadingParts && delta < 2 * (details?.partTarget || 0))))\n      ) {\n        this.log(`adjusting start position by ${delta} to match buffer start`);\n        startPosition += delta;\n        this.startPosition = startPosition;\n      }\n      if (currentTime < startPosition) {\n        this.log(\n          `seek to target start position ${startPosition} from current time ${currentTime} buffer start ${bufferStart}`,\n        );\n        media.currentTime = startPosition;\n      }\n    }\n  }\n\n  private _getAudioCodec(currentLevel) {\n    let audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n    if (this.audioCodecSwap && audioCodec) {\n      this.log('Swapping audio codec');\n      if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n        audioCodec = 'mp4a.40.2';\n      } else {\n        audioCodec = 'mp4a.40.5';\n      }\n    }\n\n    return audioCodec;\n  }\n\n  private _loadBitrateTestFrag(fragment: Fragment, level: Level) {\n    fragment.bitrateTest = true;\n    this._doFragLoad(fragment, level)\n      .then((data) => {\n        const { hls } = this;\n        const frag = data?.frag;\n        if (!frag || this.fragContextChanged(frag)) {\n          return;\n        }\n        level.fragmentError = 0;\n        this.state = State.IDLE;\n        this.startFragRequested = false;\n        this.bitrateTest = false;\n        const stats = frag.stats;\n        // Bitrate tests fragments are neither parsed nor buffered\n        stats.parsing.start =\n          stats.parsing.end =\n          stats.buffering.start =\n          stats.buffering.end =\n            self.performance.now();\n        hls.trigger(Events.FRAG_LOADED, data as FragLoadedData);\n        frag.bitrateTest = false;\n      })\n      .catch((reason) => {\n        if (this.state === State.STOPPED || this.state === State.ERROR) {\n          return;\n        }\n        this.warn(reason);\n        this.resetFragmentLoading(fragment);\n      });\n  }\n\n  private _handleTransmuxComplete(transmuxResult: TransmuxerResult) {\n    const id = this.playlistType;\n    const { hls } = this;\n    const { remuxResult, chunkMeta } = transmuxResult;\n\n    const context = this.getCurrentContext(chunkMeta);\n    if (!context) {\n      this.resetWhenMissingContext(chunkMeta);\n      return;\n    }\n    const { frag, part, level } = context;\n    const { video, text, id3, initSegment } = remuxResult;\n    const { details } = level;\n    // The audio-stream-controller handles audio buffering if Hls.js is playing an alternate audio track\n    const audio = this.altAudio ? undefined : remuxResult.audio;\n\n    // Check if the current fragment has been aborted. We check this by first seeing if we're still playing the current level.\n    // If we are, subsequently check if the currently loading fragment (fragCurrent) has changed.\n    if (this.fragContextChanged(frag)) {\n      this.fragmentTracker.removeFragment(frag);\n      return;\n    }\n\n    this.state = State.PARSING;\n\n    if (initSegment) {\n      const tracks = initSegment.tracks;\n      if (tracks) {\n        const mapFragment = frag.initSegment || frag;\n        if (this.unhandledEncryptionError(initSegment, frag)) {\n          return;\n        }\n        this._bufferInitSegment(level, tracks, mapFragment, chunkMeta);\n        hls.trigger(Events.FRAG_PARSING_INIT_SEGMENT, {\n          frag: mapFragment,\n          id,\n          tracks,\n        });\n      }\n\n      const baseTime = initSegment.initPTS as number;\n      const timescale = initSegment.timescale as number;\n      const initPTS = this.initPTS[frag.cc];\n      if (\n        Number.isFinite(baseTime) &&\n        ((!initPTS as any) ||\n          initPTS.baseTime !== baseTime ||\n          initPTS.timescale !== timescale)\n      ) {\n        const trackId = initSegment.trackId as number;\n        this.initPTS[frag.cc] = {\n          baseTime,\n          timescale,\n          trackId,\n        };\n        hls.trigger(Events.INIT_PTS_FOUND, {\n          frag,\n          id,\n          initPTS: baseTime,\n          timescale,\n          trackId,\n        });\n      }\n    }\n\n    // Avoid buffering if backtracking this fragment\n    if (video && details) {\n      if (audio && video.type === 'audiovideo') {\n        this.logMuxedErr(frag);\n      }\n      const prevFrag = details.fragments[frag.sn - 1 - details.startSN];\n      const isFirstFragment = frag.sn === details.startSN;\n      const isFirstInDiscontinuity =\n        (!prevFrag as any) || frag.cc > prevFrag.cc;\n      if (remuxResult.independent !== false) {\n        const { startPTS, endPTS, startDTS, endDTS } = video;\n        if (part) {\n          part.elementaryStreams[video.type] = {\n            startPTS,\n            endPTS,\n            startDTS,\n            endDTS,\n          };\n        } else {\n          if (\n            video.firstKeyFrame &&\n            video.independent &&\n            chunkMeta.id === 1 &&\n            !isFirstInDiscontinuity\n          ) {\n            this.couldBacktrack = true;\n          }\n          if (video.dropped && video.independent) {\n            // Backtrack if dropped frames create a gap after currentTime\n\n            const bufferInfo = this.getMainFwdBufferInfo();\n            const targetBufferTime =\n              (bufferInfo ? bufferInfo.end : this.getLoadPosition()) +\n              this.config.maxBufferHole;\n            const startTime = video.firstKeyFramePTS\n              ? video.firstKeyFramePTS\n              : startPTS;\n            if (\n              !isFirstFragment &&\n              targetBufferTime < startTime - this.config.maxBufferHole &&\n              !isFirstInDiscontinuity\n            ) {\n              this.backtrack(frag);\n              return;\n            } else if (isFirstInDiscontinuity) {\n              // Mark segment with a gap to avoid loop loading\n              frag.gap = true;\n            }\n            // Set video stream start to fragment start so that truncated samples do not distort the timeline, and mark it partial\n            frag.setElementaryStreamInfo(\n              video.type as ElementaryStreamTypes,\n              frag.start,\n              endPTS,\n              frag.start,\n              endDTS,\n              true,\n            );\n          } else if (\n            isFirstFragment &&\n            startPTS - (details.appliedTimelineOffset || 0) > MAX_START_GAP_JUMP\n          ) {\n            // Mark segment with a gap to skip large start gap\n            frag.gap = true;\n          }\n        }\n        frag.setElementaryStreamInfo(\n          video.type as ElementaryStreamTypes,\n          startPTS,\n          endPTS,\n          startDTS,\n          endDTS,\n        );\n        if (this.backtrackFragment) {\n          this.backtrackFragment = frag;\n        }\n        this.bufferFragmentData(\n          video,\n          frag,\n          part,\n          chunkMeta,\n          isFirstFragment || isFirstInDiscontinuity,\n        );\n      } else if (isFirstFragment || isFirstInDiscontinuity) {\n        // Mark segment with a gap to avoid loop loading\n        frag.gap = true;\n      } else {\n        this.backtrack(frag);\n        return;\n      }\n    }\n\n    if (audio) {\n      const { startPTS, endPTS, startDTS, endDTS } = audio;\n      if (part) {\n        part.elementaryStreams[ElementaryStreamTypes.AUDIO] = {\n          startPTS,\n          endPTS,\n          startDTS,\n          endDTS,\n        };\n      }\n      frag.setElementaryStreamInfo(\n        ElementaryStreamTypes.AUDIO,\n        startPTS,\n        endPTS,\n        startDTS,\n        endDTS,\n      );\n      this.bufferFragmentData(audio, frag, part, chunkMeta);\n    }\n\n    if (details && id3?.samples.length) {\n      const emittedID3: FragParsingMetadataData = {\n        id,\n        frag,\n        details,\n        samples: id3.samples,\n      };\n      hls.trigger(Events.FRAG_PARSING_METADATA, emittedID3);\n    }\n    if (details && text) {\n      const emittedText: FragParsingUserdataData = {\n        id,\n        frag,\n        details,\n        samples: text.samples,\n      };\n      hls.trigger(Events.FRAG_PARSING_USERDATA, emittedText);\n    }\n  }\n\n  private logMuxedErr(frag: Fragment) {\n    this.warn(\n      `${isMediaFragment(frag) ? 'Media' : 'Init'} segment with muxed audiovideo where only video expected: ${frag.url}`,\n    );\n  }\n\n  private _bufferInitSegment(\n    currentLevel: Level,\n    tracks: TrackSet,\n    frag: Fragment,\n    chunkMeta: ChunkMetadata,\n  ) {\n    if (this.state !== State.PARSING) {\n      return;\n    }\n\n    this.audioOnly = !!tracks.audio && !tracks.video;\n\n    // if audio track is expected to come from audio stream controller, discard any coming from main\n    if (this.altAudio && !this.audioOnly) {\n      delete tracks.audio;\n      if (tracks.audiovideo) {\n        this.logMuxedErr(frag);\n      }\n    }\n    // include levelCodec in audio and video tracks\n    const { audio, video, audiovideo } = tracks;\n    if (audio) {\n      const levelCodec = currentLevel.audioCodec;\n      let audioCodec = pickMostCompleteCodecName(audio.codec, levelCodec);\n      // Add level and profile to make up for remuxer not being able to parse full codec\n      // (logger warning \"Unhandled audio codec...\")\n      if (audioCodec === 'mp4a') {\n        audioCodec = 'mp4a.40.5';\n      }\n      // Handle `audioCodecSwitch`\n      const ua = navigator.userAgent.toLowerCase();\n      if (this.audioCodecSwitch) {\n        if (audioCodec) {\n          if (audioCodec.indexOf('mp4a.40.5') !== -1) {\n            audioCodec = 'mp4a.40.2';\n          } else {\n            audioCodec = 'mp4a.40.5';\n          }\n        }\n        // In the case that AAC and HE-AAC audio codecs are signalled in manifest,\n        // force HE-AAC, as it seems that most browsers prefers it.\n        // don't force HE-AAC if mono stream, or in Firefox\n        const audioMetadata = audio.metadata;\n        if (\n          audioMetadata &&\n          'channelCount' in audioMetadata &&\n          (audioMetadata.channelCount || 1) !== 1 &&\n          ua.indexOf('firefox') === -1\n        ) {\n          audioCodec = 'mp4a.40.5';\n        }\n      }\n      // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n      if (\n        audioCodec &&\n        audioCodec.indexOf('mp4a.40.5') !== -1 &&\n        ua.indexOf('android') !== -1 &&\n        audio.container !== 'audio/mpeg'\n      ) {\n        // Exclude mpeg audio\n        audioCodec = 'mp4a.40.2';\n        this.log(`Android: force audio codec to ${audioCodec}`);\n      }\n      if (levelCodec && levelCodec !== audioCodec) {\n        this.log(\n          `Swapping manifest audio codec \"${levelCodec}\" for \"${audioCodec}\"`,\n        );\n      }\n      audio.levelCodec = audioCodec;\n      audio.id = PlaylistLevelType.MAIN;\n      this.log(\n        `Init audio buffer, container:${\n          audio.container\n        }, codecs[selected/level/parsed]=[${audioCodec || ''}/${\n          levelCodec || ''\n        }/${audio.codec}]`,\n      );\n      delete tracks.audiovideo;\n    }\n    if (video) {\n      video.levelCodec = currentLevel.videoCodec;\n      video.id = PlaylistLevelType.MAIN;\n      const parsedVideoCodec = video.codec;\n      if (parsedVideoCodec?.length === 4) {\n        // Make up for passthrough-remuxer not being able to parse full codec\n        // (logger warning \"Unhandled video codec...\")\n        switch (parsedVideoCodec) {\n          case 'hvc1':\n          case 'hev1':\n            video.codec = 'hvc1.1.6.L120.90';\n            break;\n          case 'av01':\n            video.codec = 'av01.0.04M.08';\n            break;\n          case 'avc1':\n            video.codec = 'avc1.42e01e';\n            break;\n        }\n      }\n      this.log(\n        `Init video buffer, container:${\n          video.container\n        }, codecs[level/parsed]=[${currentLevel.videoCodec || ''}/${\n          parsedVideoCodec\n        }]${video.codec !== parsedVideoCodec ? ' parsed-corrected=' + video.codec : ''}${video.supplemental ? ' supplemental=' + video.supplemental : ''}`,\n      );\n      delete tracks.audiovideo;\n    }\n    if (audiovideo) {\n      this.log(\n        `Init audiovideo buffer, container:${audiovideo.container}, codecs[level/parsed]=[${currentLevel.codecs}/${audiovideo.codec}]`,\n      );\n      delete tracks.video;\n      delete tracks.audio;\n    }\n    const trackTypes = Object.keys(tracks);\n    if (trackTypes.length) {\n      this.hls.trigger(Events.BUFFER_CODECS, tracks as BufferCodecsData);\n      if (!this.hls as any) {\n        // Exit after fatal tracks error\n        return;\n      }\n      // loop through tracks that are going to be provided to bufferController\n      trackTypes.forEach((trackName) => {\n        const track = tracks[trackName] as Track;\n        const initSegment = track.initSegment;\n        if (initSegment?.byteLength) {\n          this.hls.trigger(Events.BUFFER_APPENDING, {\n            type: trackName as SourceBufferName,\n            data: initSegment,\n            frag,\n            part: null,\n            chunkMeta,\n            parent: frag.type,\n          });\n        }\n      });\n    }\n    // trigger handler right now\n    this.tickImmediate();\n  }\n\n  public getMainFwdBufferInfo(): BufferInfo | null {\n    // Observe video SourceBuffer (this.mediaBuffer) only when alt-audio is used, otherwise observe combined media buffer\n    const bufferOutput =\n      this.mediaBuffer && this.altAudio === AlternateAudio.SWITCHED\n        ? this.mediaBuffer\n        : this.media;\n    return this.getFwdBufferInfo(bufferOutput, PlaylistLevelType.MAIN);\n  }\n\n  public get maxBufferLength(): number {\n    const { levels, level } = this;\n    const levelInfo = levels?.[level];\n    if (!levelInfo) {\n      return this.config.maxBufferLength;\n    }\n    return this.getMaxBufferLength(levelInfo.maxBitrate);\n  }\n\n  private backtrack(frag: Fragment) {\n    this.couldBacktrack = true;\n    // Causes findFragments to backtrack through fragments to find the keyframe\n    this.backtrackFragment = frag;\n    this.resetTransmuxer();\n    this.flushBufferGap(frag);\n    this.fragmentTracker.removeFragment(frag);\n    this.fragPrevious = null;\n    this.nextLoadPosition = frag.start;\n    this.state = State.IDLE;\n  }\n\n  private checkFragmentChanged() {\n    const video = this.media;\n    let fragPlayingCurrent: Fragment | null = null;\n    if (video && video.readyState > 1 && video.seeking === false) {\n      const currentTime = video.currentTime;\n      /* if video element is in seeked state, currentTime can only increase.\n        (assuming that playback rate is positive ...)\n        As sometimes currentTime jumps back to zero after a\n        media decode error, check this, to avoid seeking back to\n        wrong position after a media decode error\n      */\n\n      if (BufferHelper.isBuffered(video, currentTime)) {\n        fragPlayingCurrent = this.getAppendedFrag(currentTime);\n      } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {\n        /* ensure that FRAG_CHANGED event is triggered at startup,\n          when first video frame is displayed and playback is paused.\n          add a tolerance of 100ms, in case current position is not buffered,\n          check if current pos+100ms is buffered and use that buffer range\n          for FRAG_CHANGED event reporting */\n        fragPlayingCurrent = this.getAppendedFrag(currentTime + 0.1);\n      }\n      if (fragPlayingCurrent) {\n        this.backtrackFragment = null;\n        const fragPlaying = this.fragPlaying;\n        const fragCurrentLevel = fragPlayingCurrent.level;\n        if (\n          !fragPlaying ||\n          fragPlayingCurrent.sn !== fragPlaying.sn ||\n          fragPlaying.level !== fragCurrentLevel\n        ) {\n          this.fragPlaying = fragPlayingCurrent;\n          this.hls.trigger(Events.FRAG_CHANGED, { frag: fragPlayingCurrent });\n          if (!fragPlaying || fragPlaying.level !== fragCurrentLevel) {\n            this.hls.trigger(Events.LEVEL_SWITCHED, {\n              level: fragCurrentLevel,\n            });\n          }\n        }\n      }\n    }\n  }\n\n  get nextLevel(): number {\n    const frag = this.nextBufferedFrag;\n    if (frag) {\n      return frag.level;\n    }\n    return -1;\n  }\n\n  get currentFrag(): Fragment | null {\n    if (this.fragPlaying) {\n      return this.fragPlaying;\n    }\n    const currentTime = this.media?.currentTime || this.lastCurrentTime;\n    if (Number.isFinite(currentTime)) {\n      return this.getAppendedFrag(currentTime);\n    }\n    return null;\n  }\n\n  get currentProgramDateTime(): Date | null {\n    const currentTime = this.media?.currentTime || this.lastCurrentTime;\n    if (Number.isFinite(currentTime)) {\n      const details = this.getLevelDetails();\n      const frag =\n        this.currentFrag ||\n        (details\n          ? findFragmentByPTS(null, details.fragments, currentTime)\n          : null);\n      if (frag) {\n        const programDateTime = frag.programDateTime;\n        if (programDateTime !== null) {\n          const epocMs = programDateTime + (currentTime - frag.start) * 1000;\n          return new Date(epocMs);\n        }\n      }\n    }\n    return null;\n  }\n\n  get currentLevel(): number {\n    const frag = this.currentFrag;\n    if (frag) {\n      return frag.level;\n    }\n    return -1;\n  }\n\n  get nextBufferedFrag() {\n    const frag = this.currentFrag;\n    if (frag) {\n      return this.followingBufferedFrag(frag);\n    }\n    return null;\n  }\n\n  get forceStartLoad() {\n    return this._forceStartLoad;\n  }\n}\n","import { LoadError } from './fragment-loader';\nimport { LevelKey } from './level-key';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { type Fragment, isMediaFragment } from '../loader/fragment';\nimport { arrayToHex } from '../utils/hex';\nimport { Logger } from '../utils/logger';\nimport {\n  getKeySystemsForConfig,\n  keySystemFormatToKeySystemDomain,\n} from '../utils/mediakeys-helper';\nimport { KeySystemFormats } from '../utils/mediakeys-helper';\nimport { parseKeyIdsFromTenc } from '../utils/mp4-tools';\nimport type { HlsConfig } from '../config';\nimport type EMEController from '../controller/eme-controller';\nimport type {\n  EMEKeyError,\n  MediaKeySessionContext,\n} from '../controller/eme-controller';\nimport type { ComponentAPI } from '../types/component-api';\nimport type { KeyLoadedData } from '../types/events';\nimport type {\n  KeyLoaderContext,\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderResponse,\n  LoaderStats,\n  PlaylistLevelType,\n} from '../types/loader';\nimport type { ILogger } from '../utils/logger';\n\nexport interface KeyLoaderInfo {\n  decryptdata: LevelKey;\n  keyLoadPromise: Promise<KeyLoadedData> | null;\n  loader: Loader<KeyLoaderContext> | null;\n  mediaKeySessionContext: MediaKeySessionContext | null;\n}\nexport default class KeyLoader extends Logger implements ComponentAPI {\n  private readonly config: HlsConfig;\n  private keyIdToKeyInfo: { [keyId: string]: KeyLoaderInfo | undefined } = {};\n  public emeController: EMEController | null = null;\n\n  constructor(config: HlsConfig, logger: ILogger) {\n    super('key-loader', logger);\n    this.config = config;\n  }\n\n  abort(type?: PlaylistLevelType) {\n    for (const id in this.keyIdToKeyInfo) {\n      const loader = this.keyIdToKeyInfo[id]!.loader;\n      if (loader) {\n        if (type && type !== loader.context?.frag.type) {\n          return;\n        }\n        loader.abort();\n      }\n    }\n  }\n\n  detach() {\n    for (const id in this.keyIdToKeyInfo) {\n      const keyInfo = this.keyIdToKeyInfo[id]!;\n      // Remove cached EME keys on detach\n      if (\n        keyInfo.mediaKeySessionContext ||\n        keyInfo.decryptdata.isCommonEncryption\n      ) {\n        delete this.keyIdToKeyInfo[id];\n      }\n    }\n  }\n\n  destroy() {\n    this.detach();\n    for (const id in this.keyIdToKeyInfo) {\n      const loader = this.keyIdToKeyInfo[id]!.loader;\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.keyIdToKeyInfo = {};\n  }\n\n  createKeyLoadError(\n    frag: Fragment,\n    details: ErrorDetails = ErrorDetails.KEY_LOAD_ERROR,\n    error: Error,\n    networkDetails?: any,\n    response?: { url: string; data: undefined; code: number; text: string },\n  ): LoadError {\n    return new LoadError({\n      type: ErrorTypes.NETWORK_ERROR,\n      details,\n      fatal: false,\n      frag,\n      response,\n      error,\n      networkDetails,\n    });\n  }\n\n  loadClear(\n    loadingFrag: Fragment,\n    encryptedFragments: Fragment[],\n    startFragRequested: boolean,\n  ): null | Promise<void> {\n    if (\n      __USE_EME_DRM__ &&\n      this.emeController &&\n      this.config.emeEnabled &&\n      !this.emeController.getSelectedKeySystemFormats().length\n    ) {\n      // Access key-system with nearest key on start (loading frag is unencrypted)\n      if (encryptedFragments.length) {\n        for (let i = 0, l = encryptedFragments.length; i < l; i++) {\n          const frag = encryptedFragments[i];\n          // Loading at or before segment with EXT-X-KEY, or first frag loading and last EXT-X-KEY\n          if (\n            (loadingFrag.cc <= frag.cc &&\n              (!isMediaFragment(loadingFrag) ||\n                !isMediaFragment(frag) ||\n                loadingFrag.sn < frag.sn)) ||\n            (!startFragRequested && i == l - 1)\n          ) {\n            return this.emeController\n              .selectKeySystemFormat(frag)\n              .then((keySystemFormat) => {\n                if (!this.emeController) {\n                  return;\n                }\n                frag.setKeyFormat(keySystemFormat);\n                const keySystem =\n                  keySystemFormatToKeySystemDomain(keySystemFormat);\n                if (keySystem) {\n                  return this.emeController.getKeySystemAccess([keySystem]);\n                }\n              });\n          }\n        }\n      }\n      if (this.config.requireKeySystemAccessOnStart) {\n        const keySystemsInConfig = getKeySystemsForConfig(this.config);\n        if (keySystemsInConfig.length) {\n          return this.emeController.getKeySystemAccess(keySystemsInConfig);\n        }\n      }\n    }\n    return null;\n  }\n\n  load(frag: Fragment): Promise<KeyLoadedData> {\n    if (\n      !frag.decryptdata &&\n      frag.encrypted &&\n      this.emeController &&\n      this.config.emeEnabled\n    ) {\n      // Multiple keys, but none selected, resolve in eme-controller\n      return this.emeController\n        .selectKeySystemFormat(frag)\n        .then((keySystemFormat) => {\n          return this.loadInternal(frag, keySystemFormat);\n        });\n    }\n\n    return this.loadInternal(frag);\n  }\n\n  loadInternal(\n    frag: Fragment,\n    keySystemFormat?: KeySystemFormats,\n  ): Promise<KeyLoadedData> {\n    if (__USE_EME_DRM__ && keySystemFormat) {\n      frag.setKeyFormat(keySystemFormat);\n    }\n    const decryptdata = frag.decryptdata;\n    if (!decryptdata) {\n      const error = new Error(\n        keySystemFormat\n          ? `Expected frag.decryptdata to be defined after setting format ${keySystemFormat}`\n          : `Missing decryption data on fragment in onKeyLoading (emeEnabled with controller: ${this.emeController && this.config.emeEnabled})`,\n      );\n      return Promise.reject(\n        this.createKeyLoadError(frag, ErrorDetails.KEY_LOAD_ERROR, error),\n      );\n    }\n    const uri = decryptdata.uri;\n    if (!uri) {\n      return Promise.reject(\n        this.createKeyLoadError(\n          frag,\n          ErrorDetails.KEY_LOAD_ERROR,\n          new Error(`Invalid key URI: \"${uri}\"`),\n        ),\n      );\n    }\n    const id = getKeyId(decryptdata);\n    let keyInfo = this.keyIdToKeyInfo[id];\n\n    if (keyInfo?.decryptdata.key) {\n      decryptdata.key = keyInfo.decryptdata.key;\n      return Promise.resolve({ frag, keyInfo });\n    }\n    // Return key load promise once it has a mediakey session with an usable key status\n    if (this.emeController && keyInfo?.keyLoadPromise) {\n      const keyStatus = this.emeController.getKeyStatus(keyInfo.decryptdata);\n      switch (keyStatus) {\n        case 'usable':\n        case 'usable-in-future':\n          return keyInfo.keyLoadPromise.then((keyLoadedData) => {\n            // Return the correct fragment with updated decryptdata key and loaded keyInfo\n            const { keyInfo } = keyLoadedData;\n            decryptdata.key = keyInfo.decryptdata.key;\n            return { frag, keyInfo };\n          });\n      }\n      // If we have a key session and status and it is not pending or usable, continue\n      // This will go back to the eme-controller for expired keys to get a new keyLoadPromise\n    }\n\n    // Load the key or return the loading promise\n    this.log(\n      `${this.keyIdToKeyInfo[id] ? 'Rel' : 'L'}oading${decryptdata.keyId ? ' keyId: ' + arrayToHex(decryptdata.keyId) : ''} URI: ${decryptdata.uri} from ${frag.type} ${frag.level}`,\n    );\n\n    keyInfo = this.keyIdToKeyInfo[id] = {\n      decryptdata,\n      keyLoadPromise: null,\n      loader: null,\n      mediaKeySessionContext: null,\n    };\n\n    switch (decryptdata.method) {\n      case 'SAMPLE-AES':\n      case 'SAMPLE-AES-CENC':\n      case 'SAMPLE-AES-CTR':\n        if (decryptdata.keyFormat === 'identity') {\n          // loadKeyHTTP handles http(s) and data URLs\n          return this.loadKeyHTTP(keyInfo, frag);\n        }\n        return this.loadKeyEME(keyInfo, frag);\n      case 'AES-128':\n      case 'AES-256':\n      case 'AES-256-CTR':\n        return this.loadKeyHTTP(keyInfo, frag);\n      default:\n        return Promise.reject(\n          this.createKeyLoadError(\n            frag,\n            ErrorDetails.KEY_LOAD_ERROR,\n            new Error(\n              `Key supplied with unsupported METHOD: \"${decryptdata.method}\"`,\n            ),\n          ),\n        );\n    }\n  }\n\n  loadKeyEME(keyInfo: KeyLoaderInfo, frag: Fragment): Promise<KeyLoadedData> {\n    const keyLoadedData: KeyLoadedData = { frag, keyInfo };\n    if (this.emeController && this.config.emeEnabled) {\n      if (!keyInfo.decryptdata.keyId && frag.initSegment?.data) {\n        const keyIds = parseKeyIdsFromTenc(\n          frag.initSegment.data as Uint8Array<ArrayBuffer>,\n        );\n        if (keyIds.length) {\n          const keyId = keyIds[0];\n          if (keyId.some((b) => b !== 0)) {\n            this.log(`Using keyId found in init segment ${arrayToHex(keyId)}`);\n            keyInfo.decryptdata.keyId = keyId;\n            LevelKey.setKeyIdForUri(keyInfo.decryptdata.uri, keyId);\n          }\n        }\n      }\n      const keySessionContextPromise =\n        this.emeController.loadKey(keyLoadedData);\n      return (keyInfo.keyLoadPromise = keySessionContextPromise.then(\n        (keySessionContext) => {\n          keyInfo.mediaKeySessionContext = keySessionContext;\n          return keyLoadedData;\n        },\n      )).catch((error: EMEKeyError | Error) => {\n        // Remove promise for license renewal or retry\n        keyInfo.keyLoadPromise = null;\n        if ('data' in error) {\n          error.data.frag = frag;\n        }\n        throw error;\n      });\n    }\n    return Promise.resolve(keyLoadedData);\n  }\n\n  loadKeyHTTP(keyInfo: KeyLoaderInfo, frag: Fragment): Promise<KeyLoadedData> {\n    const config = this.config;\n    const Loader = config.loader;\n    const keyLoader = new Loader(config) as Loader<KeyLoaderContext>;\n    frag.keyLoader = keyInfo.loader = keyLoader;\n\n    return (keyInfo.keyLoadPromise = new Promise((resolve, reject) => {\n      const loaderContext: KeyLoaderContext = {\n        keyInfo,\n        frag,\n        responseType: 'arraybuffer',\n        url: keyInfo.decryptdata.uri,\n      };\n\n      // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,\n      // key-loader will trigger an error and rely on stream-controller to handle retry logic.\n      // this will also align retry logic with fragment-loader\n      const loadPolicy = config.keyLoadPolicy.default;\n      const loaderConfig: LoaderConfiguration = {\n        loadPolicy,\n        timeout: loadPolicy.maxLoadTimeMs,\n        maxRetry: 0,\n        retryDelay: 0,\n        maxRetryDelay: 0,\n      };\n\n      const loaderCallbacks: LoaderCallbacks<KeyLoaderContext> = {\n        onSuccess: (\n          response: LoaderResponse,\n          stats: LoaderStats,\n          context: KeyLoaderContext,\n          networkDetails: any,\n        ) => {\n          const { frag, keyInfo } = context;\n          const id = getKeyId(keyInfo.decryptdata);\n          if (!frag.decryptdata || keyInfo !== this.keyIdToKeyInfo[id]) {\n            return reject(\n              this.createKeyLoadError(\n                frag,\n                ErrorDetails.KEY_LOAD_ERROR,\n                new Error('after key load, decryptdata unset or changed'),\n                networkDetails,\n              ),\n            );\n          }\n\n          keyInfo.decryptdata.key = frag.decryptdata.key = new Uint8Array(\n            response.data as ArrayBuffer,\n          );\n\n          // detach fragment key loader on load success\n          frag.keyLoader = null;\n          keyInfo.loader = null;\n          resolve({ frag, keyInfo });\n        },\n\n        onError: (\n          response: { code: number; text: string },\n          context: KeyLoaderContext,\n          networkDetails: any,\n          stats: LoaderStats,\n        ) => {\n          this.resetLoader(context);\n          reject(\n            this.createKeyLoadError(\n              frag,\n              ErrorDetails.KEY_LOAD_ERROR,\n              new Error(\n                `HTTP Error ${response.code} loading key ${response.text}`,\n              ),\n              networkDetails,\n              { url: loaderContext.url, data: undefined, ...response },\n            ),\n          );\n        },\n\n        onTimeout: (\n          stats: LoaderStats,\n          context: KeyLoaderContext,\n          networkDetails: any,\n        ) => {\n          this.resetLoader(context);\n          reject(\n            this.createKeyLoadError(\n              frag,\n              ErrorDetails.KEY_LOAD_TIMEOUT,\n              new Error('key loading timed out'),\n              networkDetails,\n            ),\n          );\n        },\n\n        onAbort: (\n          stats: LoaderStats,\n          context: KeyLoaderContext,\n          networkDetails: any,\n        ) => {\n          this.resetLoader(context);\n          reject(\n            this.createKeyLoadError(\n              frag,\n              ErrorDetails.INTERNAL_ABORTED,\n              new Error('key loading aborted'),\n              networkDetails,\n            ),\n          );\n        },\n      };\n\n      keyLoader.load(loaderContext, loaderConfig, loaderCallbacks);\n    }));\n  }\n\n  private resetLoader(context: KeyLoaderContext) {\n    const { frag, keyInfo, url: uri } = context;\n    const loader = keyInfo.loader;\n    if (frag.keyLoader === loader) {\n      frag.keyLoader = null;\n      keyInfo.loader = null;\n    }\n    const id = getKeyId(keyInfo.decryptdata) || uri;\n    delete this.keyIdToKeyInfo[id];\n    if (loader) {\n      loader.destroy();\n    }\n  }\n}\n\nfunction getKeyId(decryptdata: LevelKey) {\n  if (__USE_EME_DRM__ && decryptdata.keyFormat !== KeySystemFormats.FAIRPLAY) {\n    const keyId = decryptdata.keyId;\n    if (keyId) {\n      return arrayToHex(keyId);\n    }\n  }\n  return decryptdata.uri;\n}\n","/**\n * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.\n *\n * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.\n *\n * Uses loader(s) set in config to do actual internal loading of resource tasks.\n */\n\nimport M3U8Parser from './m3u8-parser';\nimport { ErrorDetails, ErrorTypes } from '../errors';\nimport { Events } from '../events';\nimport { PlaylistContextType, PlaylistLevelType } from '../types/loader';\nimport { AttrList } from '../utils/attr-list';\nimport {\n  areCodecsMediaSourceSupported,\n  sampleEntryCodesISO,\n} from '../utils/codecs';\nimport { computeReloadInterval } from '../utils/level-helper';\nimport type { LevelDetails } from './level-details';\nimport type { LoaderConfig, RetryConfig } from '../config';\nimport type Hls from '../hls';\nimport type { NetworkComponentAPI } from '../types/component-api';\nimport type {\n  ErrorData,\n  LevelLoadingData,\n  LevelsUpdatedData,\n  ManifestLoadingData,\n  TrackLoadingData,\n} from '../types/events';\nimport type { Level, LevelParsed, VariableMap } from '../types/level';\nimport type {\n  Loader,\n  LoaderCallbacks,\n  LoaderConfiguration,\n  LoaderContext,\n  LoaderResponse,\n  LoaderStats,\n  PlaylistLoaderContext,\n} from '../types/loader';\nimport type { MediaAttributes, MediaPlaylist } from '../types/media-playlist';\n\nfunction mapContextToLevelType(\n  context: PlaylistLoaderContext,\n): PlaylistLevelType {\n  const { type } = context;\n\n  switch (type) {\n    case PlaylistContextType.AUDIO_TRACK:\n      return PlaylistLevelType.AUDIO;\n    case PlaylistContextType.SUBTITLE_TRACK:\n      return PlaylistLevelType.SUBTITLE;\n    default:\n      return PlaylistLevelType.MAIN;\n  }\n}\n\nfunction getResponseUrl(\n  response: LoaderResponse,\n  context: PlaylistLoaderContext,\n): string {\n  let url = response.url;\n  // responseURL not supported on some browsers (it is used to detect URL redirection)\n  // data-uri mode also not supported (but no need to detect redirection)\n  if (url === undefined || url.indexOf('data:') === 0) {\n    // fallback to initial URL\n    url = context.url;\n  }\n  return url;\n}\n\nclass PlaylistLoader implements NetworkComponentAPI {\n  private readonly hls: Hls;\n  private readonly loaders: {\n    [key: string]: Loader<LoaderContext>;\n  } = Object.create(null);\n  private variableList: VariableMap | null = null;\n  public onManifestLoaded = this.checkAutostartLoad;\n\n  constructor(hls: Hls) {\n    this.hls = hls;\n    this.registerListeners();\n  }\n\n  public startLoad(startPosition: number): void {}\n\n  public stopLoad(): void {\n    this.destroyInternalLoaders();\n  }\n\n  private registerListeners() {\n    const { hls } = this;\n    hls.on(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.on(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.on(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n    hls.on(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n    hls.on(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n  }\n\n  private unregisterListeners() {\n    const { hls } = this;\n    hls.off(Events.MANIFEST_LOADING, this.onManifestLoading, this);\n    hls.off(Events.LEVEL_LOADING, this.onLevelLoading, this);\n    hls.off(Events.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this);\n    hls.off(Events.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);\n    hls.off(Events.LEVELS_UPDATED, this.onLevelsUpdated, this);\n  }\n\n  /**\n   * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n   */\n  private createInternalLoader(\n    context: PlaylistLoaderContext,\n  ): Loader<LoaderContext> {\n    const config = this.hls.config;\n    const PLoader = config.pLoader;\n    const Loader = config.loader;\n    const InternalLoader = PLoader || Loader;\n    const loader = new InternalLoader(config) as Loader<PlaylistLoaderContext>;\n\n    this.loaders[context.type] = loader;\n    return loader;\n  }\n\n  private getInternalLoader(\n    context: PlaylistLoaderContext,\n  ): Loader<LoaderContext> | undefined {\n    return this.loaders[context.type];\n  }\n\n  private resetInternalLoader(contextType: PlaylistContextType): void {\n    if (this.loaders[contextType]) {\n      delete this.loaders[contextType];\n    }\n  }\n\n  /**\n   * Call `destroy` on all internal loader instances mapped (one per context type)\n   */\n  private destroyInternalLoaders(): void {\n    for (const contextType in this.loaders) {\n      const loader = this.loaders[contextType];\n      if (loader) {\n        loader.destroy();\n      }\n\n      this.resetInternalLoader(contextType as PlaylistContextType);\n    }\n  }\n\n  public destroy(): void {\n    this.variableList = null;\n    this.unregisterListeners();\n    this.destroyInternalLoaders();\n  }\n\n  private onManifestLoading(\n    event: Events.MANIFEST_LOADING,\n    data: ManifestLoadingData,\n  ) {\n    const { url } = data;\n    this.variableList = null;\n    this.load({\n      id: null,\n      level: 0,\n      responseType: 'text',\n      type: PlaylistContextType.MANIFEST,\n      url,\n      deliveryDirectives: null,\n      levelOrTrack: null,\n    });\n  }\n\n  private onLevelLoading(event: Events.LEVEL_LOADING, data: LevelLoadingData) {\n    const { id, level, pathwayId, url, deliveryDirectives, levelInfo } = data;\n    this.load({\n      id,\n      level,\n      pathwayId,\n      responseType: 'text',\n      type: PlaylistContextType.LEVEL,\n      url,\n      deliveryDirectives,\n      levelOrTrack: levelInfo,\n    });\n  }\n\n  private onAudioTrackLoading(\n    event: Events.AUDIO_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) {\n    const { id, groupId, url, deliveryDirectives, track } = data;\n    this.load({\n      id,\n      groupId,\n      level: null,\n      responseType: 'text',\n      type: PlaylistContextType.AUDIO_TRACK,\n      url,\n      deliveryDirectives,\n      levelOrTrack: track,\n    });\n  }\n\n  private onSubtitleTrackLoading(\n    event: Events.SUBTITLE_TRACK_LOADING,\n    data: TrackLoadingData,\n  ) {\n    const { id, groupId, url, deliveryDirectives, track } = data;\n    this.load({\n      id,\n      groupId,\n      level: null,\n      responseType: 'text',\n      type: PlaylistContextType.SUBTITLE_TRACK,\n      url,\n      deliveryDirectives,\n      levelOrTrack: track,\n    });\n  }\n\n  private onLevelsUpdated(\n    event: Events.LEVELS_UPDATED,\n    data: LevelsUpdatedData,\n  ) {\n    // abort and delete loader of removed levels\n    const loader = this.loaders[PlaylistContextType.LEVEL];\n    if (loader) {\n      const context = loader.context;\n      if (\n        context &&\n        !data.levels.some(\n          (lvl) => lvl === (context as PlaylistLoaderContext).levelOrTrack,\n        )\n      ) {\n        loader.abort();\n        delete this.loaders[PlaylistContextType.LEVEL];\n      }\n    }\n  }\n\n  private load(context: PlaylistLoaderContext): void {\n    const config = this.hls.config;\n\n    // logger.debug(`[playlist-loader]: Loading playlist of type ${context.type}, level: ${context.level}, id: ${context.id}`);\n\n    // Check if a loader for this context already exists\n    let loader = this.getInternalLoader(context);\n    if (loader) {\n      const logger = this.hls.logger;\n      const loaderContext = loader.context as PlaylistLoaderContext;\n      if (\n        loaderContext &&\n        loaderContext.levelOrTrack === context.levelOrTrack &&\n        (loaderContext.url === context.url ||\n          (loaderContext.deliveryDirectives && !context.deliveryDirectives))\n      ) {\n        // same URL can't overlap, or wait for blocking request\n        if (loaderContext.url === context.url) {\n          logger.log(\n            `[playlist-loader]: ignore ${context.url} ongoing request`,\n          );\n        } else {\n          logger.log(\n            `[playlist-loader]: ignore ${context.url} in favor of ${loaderContext.url}`,\n          );\n        }\n        return;\n      }\n      logger.log(\n        `[playlist-loader]: aborting previous loader for type: ${context.type}`,\n      );\n      loader.abort();\n    }\n\n    // apply different configs for retries depending on\n    // context (manifest, level, audio/subs playlist)\n    let loadPolicy: LoaderConfig;\n    if (context.type === PlaylistContextType.MANIFEST) {\n      loadPolicy = config.manifestLoadPolicy.default;\n    } else {\n      loadPolicy = Object.assign({}, config.playlistLoadPolicy.default, {\n        timeoutRetry: null,\n        errorRetry: null,\n      });\n    }\n    loader = this.createInternalLoader(context);\n\n    // Override level/track timeout for LL-HLS requests\n    // (the default of 10000ms is counter productive to blocking playlist reload requests)\n    if (Number.isFinite(context.deliveryDirectives?.part)) {\n      let levelDetails: LevelDetails | undefined;\n      if (\n        context.type === PlaylistContextType.LEVEL &&\n        context.level !== null\n      ) {\n        levelDetails = this.hls.levels[context.level].details;\n      } else if (\n        context.type === PlaylistContextType.AUDIO_TRACK &&\n        context.id !== null\n      ) {\n        levelDetails = this.hls.audioTracks[context.id].details;\n      } else if (\n        context.type === PlaylistContextType.SUBTITLE_TRACK &&\n        context.id !== null\n      ) {\n        levelDetails = this.hls.subtitleTracks[context.id].details;\n      }\n      if (levelDetails) {\n        const partTarget = levelDetails.partTarget;\n        const targetDuration = levelDetails.targetduration;\n        if (partTarget && targetDuration) {\n          const maxLowLatencyPlaylistRefresh =\n            Math.max(partTarget * 3, targetDuration * 0.8) * 1000;\n          loadPolicy = Object.assign({}, loadPolicy, {\n            maxTimeToFirstByteMs: Math.min(\n              maxLowLatencyPlaylistRefresh,\n              loadPolicy.maxTimeToFirstByteMs,\n            ),\n            maxLoadTimeMs: Math.min(\n              maxLowLatencyPlaylistRefresh,\n              loadPolicy.maxTimeToFirstByteMs,\n            ),\n          });\n        }\n      }\n    }\n\n    const legacyRetryCompatibility: RetryConfig | Record<string, void> =\n      loadPolicy.errorRetry || loadPolicy.timeoutRetry || {};\n    const loaderConfig: LoaderConfiguration = {\n      loadPolicy,\n      timeout: loadPolicy.maxLoadTimeMs,\n      maxRetry: legacyRetryCompatibility.maxNumRetry || 0,\n      retryDelay: legacyRetryCompatibility.retryDelayMs || 0,\n      maxRetryDelay: legacyRetryCompatibility.maxRetryDelayMs || 0,\n    };\n\n    const loaderCallbacks: LoaderCallbacks<PlaylistLoaderContext> = {\n      onSuccess: (response, stats, context, networkDetails) => {\n        const loader = this.getInternalLoader(context) as\n          | Loader<PlaylistLoaderContext>\n          | undefined;\n        this.resetInternalLoader(context.type);\n\n        const string = response.data as string;\n\n        stats.parsing.start = performance.now();\n        if (\n          M3U8Parser.isMediaPlaylist(string) ||\n          context.type !== PlaylistContextType.MANIFEST\n        ) {\n          this.handleTrackOrLevelPlaylist(\n            response,\n            stats,\n            context,\n            networkDetails || null,\n            loader,\n          );\n        } else {\n          this.handleMasterPlaylist(response, stats, context, networkDetails);\n        }\n      },\n      onError: (response, context, networkDetails, stats) => {\n        this.handleNetworkError(\n          context,\n          networkDetails,\n          false,\n          response,\n          stats,\n        );\n      },\n      onTimeout: (stats, context, networkDetails) => {\n        this.handleNetworkError(\n          context,\n          networkDetails,\n          true,\n          undefined,\n          stats,\n        );\n      },\n    };\n\n    // logger.debug(`[playlist-loader]: Calling internal loader delegate for URL: ${context.url}`);\n\n    loader.load(context, loaderConfig, loaderCallbacks);\n  }\n\n  private checkAutostartLoad() {\n    if (!this.hls) {\n      return;\n    }\n    const {\n      config: { autoStartLoad, startPosition },\n      forceStartLoad,\n    } = this.hls;\n    if (autoStartLoad || forceStartLoad) {\n      this.hls.logger.log(\n        `${autoStartLoad ? 'auto' : 'force'} startLoad with configured startPosition ${startPosition}`,\n      );\n      this.hls.startLoad(startPosition);\n    }\n  }\n\n  private handleMasterPlaylist(\n    response: LoaderResponse,\n    stats: LoaderStats,\n    context: PlaylistLoaderContext,\n    networkDetails: any,\n  ): void {\n    const hls = this.hls;\n    const string = response.data as string;\n\n    const url = getResponseUrl(response, context);\n\n    const parsedResult = M3U8Parser.parseMasterPlaylist(string, url);\n\n    if (parsedResult.playlistParsingError) {\n      stats.parsing.end = performance.now();\n      this.handleManifestParsingError(\n        response,\n        context,\n        parsedResult.playlistParsingError,\n        networkDetails,\n        stats,\n      );\n      return;\n    }\n\n    const {\n      contentSteering,\n      levels,\n      sessionData,\n      sessionKeys,\n      startTimeOffset,\n      variableList,\n    } = parsedResult;\n\n    this.variableList = variableList;\n\n    // Treat unknown codec as audio or video codec based on passing `isTypeSupported` check\n    // (allows for playback of any supported codec even if not indexed in utils/codecs)\n    levels.forEach((levelParsed: LevelParsed) => {\n      const { unknownCodecs } = levelParsed;\n      if (unknownCodecs) {\n        const { preferManagedMediaSource } = this.hls.config;\n        let { audioCodec, videoCodec } = levelParsed;\n        for (let i = unknownCodecs.length; i--; ) {\n          const unknownCodec = unknownCodecs[i];\n          if (\n            areCodecsMediaSourceSupported(\n              unknownCodec,\n              'audio',\n              preferManagedMediaSource,\n            )\n          ) {\n            levelParsed.audioCodec = audioCodec = audioCodec\n              ? `${audioCodec},${unknownCodec}`\n              : unknownCodec;\n            sampleEntryCodesISO.audio[audioCodec.substring(0, 4)] = 2;\n            unknownCodecs.splice(i, 1);\n          } else if (\n            areCodecsMediaSourceSupported(\n              unknownCodec,\n              'video',\n              preferManagedMediaSource,\n            )\n          ) {\n            levelParsed.videoCodec = videoCodec = videoCodec\n              ? `${videoCodec},${unknownCodec}`\n              : unknownCodec;\n            sampleEntryCodesISO.video[videoCodec.substring(0, 4)] = 2;\n            unknownCodecs.splice(i, 1);\n          }\n        }\n      }\n    });\n\n    const {\n      AUDIO: audioTracks = [],\n      SUBTITLES: subtitles,\n      'CLOSED-CAPTIONS': captions,\n    } = M3U8Parser.parseMasterPlaylistMedia(string, url, parsedResult);\n\n    if (audioTracks.length) {\n      // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n      const embeddedAudioFound: boolean = audioTracks.some(\n        (audioTrack) => !audioTrack.url,\n      );\n\n      // if no embedded audio track defined, but audio codec signaled in quality level,\n      // we need to signal this main audio track this could happen with playlists with\n      // alt audio rendition in which quality levels (main)\n      // contains both audio+video. but with mixed audio track not signaled\n      if (\n        !embeddedAudioFound &&\n        levels[0].audioCodec &&\n        !levels[0].attrs.AUDIO\n      ) {\n        this.hls.logger.log(\n          '[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one',\n        );\n        audioTracks.unshift({\n          type: 'main',\n          name: 'main',\n          groupId: 'main',\n          default: false,\n          autoselect: false,\n          forced: false,\n          id: -1,\n          attrs: new AttrList({}) as MediaAttributes,\n          bitrate: 0,\n          url: '',\n        });\n      }\n    }\n\n    hls.trigger(Events.MANIFEST_LOADED, {\n      levels,\n      audioTracks,\n      subtitles,\n      captions,\n      contentSteering,\n      url,\n      stats,\n      networkDetails,\n      sessionData,\n      sessionKeys,\n      startTimeOffset,\n      variableList,\n    });\n  }\n\n  private handleTrackOrLevelPlaylist(\n    response: LoaderResponse,\n    stats: LoaderStats,\n    context: PlaylistLoaderContext,\n    networkDetails: any,\n    loader: Loader<PlaylistLoaderContext> | undefined,\n  ): void {\n    const hls = this.hls;\n    const { id, level, type } = context;\n\n    const url = getResponseUrl(response, context);\n    const levelId = Number.isFinite(level as number)\n      ? (level as number)\n      : Number.isFinite(id as number)\n        ? (id as number)\n        : 0;\n    const levelType = mapContextToLevelType(context);\n    const levelDetails = M3U8Parser.parseLevelPlaylist(\n      response.data as string,\n      url,\n      levelId,\n      levelType,\n      0,\n      this.variableList,\n    );\n\n    // We have done our first request (Manifest-type) and receive\n    // not a master playlist but a chunk-list (track/level)\n    // We fire the manifest-loaded event anyway with the parsed level-details\n    // by creating a single-level structure for it.\n    if (type === PlaylistContextType.MANIFEST) {\n      const singleLevel: LevelParsed = {\n        attrs: new AttrList({}),\n        bitrate: 0,\n        details: levelDetails,\n        name: '',\n        url,\n      };\n      levelDetails.requestScheduled =\n        stats.loading.start + computeReloadInterval(levelDetails, 0);\n\n      hls.trigger(Events.MANIFEST_LOADED, {\n        levels: [singleLevel],\n        audioTracks: [],\n        url,\n        stats,\n        networkDetails,\n        sessionData: null,\n        sessionKeys: null,\n        contentSteering: null,\n        startTimeOffset: null,\n        variableList: null,\n      });\n    }\n\n    // save parsing time\n    stats.parsing.end = performance.now();\n\n    // extend the context with the new levelDetails property\n    context.levelDetails = levelDetails;\n\n    this.handlePlaylistLoaded(\n      levelDetails,\n      response,\n      stats,\n      context,\n      networkDetails,\n      loader,\n    );\n  }\n\n  private handleManifestParsingError(\n    response: LoaderResponse,\n    context: PlaylistLoaderContext,\n    error: Error,\n    networkDetails: any,\n    stats: LoaderStats,\n  ): void {\n    this.hls.trigger(Events.ERROR, {\n      type: ErrorTypes.NETWORK_ERROR,\n      details: ErrorDetails.MANIFEST_PARSING_ERROR,\n      fatal: context.type === PlaylistContextType.MANIFEST,\n      url: response.url,\n      err: error,\n      error,\n      reason: error.message,\n      response,\n      context,\n      networkDetails,\n      stats,\n    });\n  }\n\n  private handleNetworkError(\n    context: PlaylistLoaderContext,\n    networkDetails: any,\n    timeout = false,\n    response: { code: number; text: string } | undefined,\n    stats: LoaderStats,\n  ): void {\n    let message = `A network ${\n      timeout\n        ? 'timeout'\n        : 'error' + (response ? ' (status ' + response.code + ')' : '')\n    } occurred while loading ${context.type}`;\n    if (context.type === PlaylistContextType.LEVEL) {\n      message += `: ${context.level} id: ${context.id}`;\n    } else if (\n      context.type === PlaylistContextType.AUDIO_TRACK ||\n      context.type === PlaylistContextType.SUBTITLE_TRACK\n    ) {\n      message += ` id: ${context.id} group-id: \"${context.groupId}\"`;\n    }\n    const error = new Error(message);\n    this.hls.logger.warn(`[playlist-loader]: ${message}`);\n    let details = ErrorDetails.UNKNOWN;\n    let fatal = false;\n\n    const loader = this.getInternalLoader(context);\n\n    switch (context.type) {\n      case PlaylistContextType.MANIFEST:\n        details = timeout\n          ? ErrorDetails.MANIFEST_LOAD_TIMEOUT\n          : ErrorDetails.MANIFEST_LOAD_ERROR;\n        fatal = true;\n        break;\n      case PlaylistContextType.LEVEL:\n        details = timeout\n          ? ErrorDetails.LEVEL_LOAD_TIMEOUT\n          : ErrorDetails.LEVEL_LOAD_ERROR;\n        fatal = false;\n        break;\n      case PlaylistContextType.AUDIO_TRACK:\n        details = timeout\n          ? ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT\n          : ErrorDetails.AUDIO_TRACK_LOAD_ERROR;\n        fatal = false;\n        break;\n      case PlaylistContextType.SUBTITLE_TRACK:\n        details = timeout\n          ? ErrorDetails.SUBTITLE_TRACK_LOAD_TIMEOUT\n          : ErrorDetails.SUBTITLE_LOAD_ERROR;\n        fatal = false;\n        break;\n    }\n\n    if (loader) {\n      this.resetInternalLoader(context.type);\n    }\n\n    const errorData: ErrorData = {\n      type: ErrorTypes.NETWORK_ERROR,\n      details,\n      fatal,\n      url: context.url,\n      loader,\n      context,\n      error,\n      networkDetails,\n      stats,\n    };\n\n    if (response) {\n      const url = networkDetails?.url || context.url;\n      errorData.response = { url, data: undefined as any, ...response };\n    }\n\n    this.hls.trigger(Events.ERROR, errorData);\n  }\n\n  private handlePlaylistLoaded(\n    levelDetails: LevelDetails,\n    response: LoaderResponse,\n    stats: LoaderStats,\n    context: PlaylistLoaderContext,\n    networkDetails: any,\n    loader: Loader<PlaylistLoaderContext> | undefined,\n  ): void {\n    const hls = this.hls;\n    const { type, level, levelOrTrack, id, groupId, deliveryDirectives } =\n      context;\n    const url = getResponseUrl(response, context);\n    const parent = mapContextToLevelType(context);\n    let levelIndex =\n      typeof context.level === 'number' && parent === PlaylistLevelType.MAIN\n        ? (level as number)\n        : undefined;\n    const error = levelDetails.playlistParsingError;\n    if (error) {\n      this.hls.logger.warn(`${error} ${levelDetails.url}`);\n      if (!hls.config.ignorePlaylistParsingErrors) {\n        hls.trigger(Events.ERROR, {\n          type: ErrorTypes.NETWORK_ERROR,\n          details: ErrorDetails.LEVEL_PARSING_ERROR,\n          fatal: false,\n          url,\n          error,\n          reason: error.message,\n          response,\n          context,\n          level: levelIndex,\n          parent,\n          networkDetails,\n          stats,\n        });\n        return;\n      }\n      levelDetails.playlistParsingError = null;\n    }\n    if (!levelDetails.fragments.length) {\n      const error = (levelDetails.playlistParsingError = new Error(\n        'No Segments found in Playlist',\n      ));\n      hls.trigger(Events.ERROR, {\n        type: ErrorTypes.NETWORK_ERROR,\n        details: ErrorDetails.LEVEL_EMPTY_ERROR,\n        fatal: false,\n        url,\n        error,\n        reason: error.message,\n        response,\n        context,\n        level: levelIndex,\n        parent,\n        networkDetails,\n        stats,\n      });\n      return;\n    }\n\n    if (levelDetails.live && loader) {\n      if (loader.getCacheAge) {\n        levelDetails.ageHeader = loader.getCacheAge() || 0;\n      }\n      if (!loader.getCacheAge || isNaN(levelDetails.ageHeader)) {\n        levelDetails.ageHeader = 0;\n      }\n    }\n\n    switch (type) {\n      case PlaylistContextType.MANIFEST:\n      case PlaylistContextType.LEVEL:\n        if (levelIndex) {\n          if (!levelOrTrack) {\n            // fall-through to hls.levels[0]\n            levelIndex = 0;\n          } else {\n            if (levelOrTrack !== hls.levels[levelIndex]) {\n              // correct levelIndex when lower levels were removed from hls.levels\n              const updatedIndex = hls.levels.indexOf(levelOrTrack as Level);\n              if (updatedIndex > -1) {\n                levelIndex = updatedIndex;\n              }\n            }\n          }\n        }\n        hls.trigger(Events.LEVEL_LOADED, {\n          details: levelDetails,\n          levelInfo: (levelOrTrack as Level | null) || hls.levels[0],\n          level: levelIndex || 0,\n          id: id || 0,\n          stats,\n          networkDetails,\n          deliveryDirectives,\n          withoutMultiVariant: type === PlaylistContextType.MANIFEST,\n        });\n        break;\n      case PlaylistContextType.AUDIO_TRACK:\n        hls.trigger(Events.AUDIO_TRACK_LOADED, {\n          details: levelDetails,\n          track: levelOrTrack as MediaPlaylist,\n          id: id || 0,\n          groupId: groupId || '',\n          stats,\n          networkDetails,\n          deliveryDirectives,\n        });\n        break;\n      case PlaylistContextType.SUBTITLE_TRACK:\n        hls.trigger(Events.SUBTITLE_TRACK_LOADED, {\n          details: levelDetails,\n          track: levelOrTrack as MediaPlaylist,\n          id: id || 0,\n          groupId: groupId || '',\n          stats,\n          networkDetails,\n          deliveryDirectives,\n        });\n        break;\n    }\n  }\n}\n\nexport default PlaylistLoader;\n","import { uuid } from '@svta/common-media-library/utils/uuid';\nimport { EventEmitter } from 'eventemitter3';\nimport { buildAbsoluteURL } from 'url-toolkit';\nimport { enableStreamingMode, hlsDefaultConfig, mergeConfig } from './config';\nimport { FragmentTracker } from './controller/fragment-tracker';\nimport GapController from './controller/gap-controller';\nimport ID3TrackController from './controller/id3-track-controller';\nimport LatencyController from './controller/latency-controller';\nimport LevelController from './controller/level-controller';\nimport StreamController from './controller/stream-controller';\nimport { ErrorDetails, ErrorTypes } from './errors';\nimport { Events } from './events';\nimport { isMSESupported, isSupported } from './is-supported';\nimport KeyLoader from './loader/key-loader';\nimport PlaylistLoader from './loader/playlist-loader';\nimport { MetadataSchema } from './types/demuxer';\nimport { type HdcpLevel, isHdcpLevel, type Level } from './types/level';\nimport { PlaylistLevelType } from './types/loader';\nimport { enableLogs, type ILogger } from './utils/logger';\nimport { getMediaDecodingInfoPromise } from './utils/mediacapabilities-helper';\nimport { getMediaSource } from './utils/mediasource-helper';\nimport { getAudioTracksByGroup } from './utils/rendition-helper';\nimport { version } from './version';\nimport type { HlsConfig } from './config';\nimport type AbrController from './controller/abr-controller';\nimport type AudioStreamController from './controller/audio-stream-controller';\nimport type AudioTrackController from './controller/audio-track-controller';\nimport type BasePlaylistController from './controller/base-playlist-controller';\nimport type { InFlightData, State } from './controller/base-stream-controller';\nimport type BaseStreamController from './controller/base-stream-controller';\nimport type BufferController from './controller/buffer-controller';\nimport type CapLevelController from './controller/cap-level-controller';\nimport type CMCDController from './controller/cmcd-controller';\nimport type ContentSteeringController from './controller/content-steering-controller';\nimport type EMEController from './controller/eme-controller';\nimport type ErrorController from './controller/error-controller';\nimport type FPSController from './controller/fps-controller';\nimport type InterstitialsController from './controller/interstitials-controller';\nimport type { InterstitialsManager } from './controller/interstitials-controller';\nimport type { SubtitleStreamController } from './controller/subtitle-stream-controller';\nimport type SubtitleTrackController from './controller/subtitle-track-controller';\nimport type Decrypter from './crypt/decrypter';\nimport type TransmuxerInterface from './demux/transmuxer-interface';\nimport type { HlsEventEmitter, HlsListeners } from './events';\nimport type FragmentLoader from './loader/fragment-loader';\nimport type { LevelDetails } from './loader/level-details';\nimport type M3U8Parser from './loader/m3u8-parser';\nimport type TaskLoop from './task-loop';\nimport type { AttachMediaSourceData } from './types/buffer';\nimport type {\n  AbrComponentAPI,\n  ComponentAPI,\n  NetworkComponentAPI,\n} from './types/component-api';\nimport type { MediaAttachingData } from './types/events';\nimport type {\n  AudioSelectionOption,\n  MediaPlaylist,\n  SubtitleSelectionOption,\n  VideoSelectionOption,\n} from './types/media-playlist';\nimport type { BufferInfo, BufferTimeRange } from './utils/buffer-helper';\nimport type Cues from './utils/cues';\nimport type EwmaBandWidthEstimator from './utils/ewma-bandwidth-estimator';\nimport type FetchLoader from './utils/fetch-loader';\nimport type { MediaDecodingInfo } from './utils/mediacapabilities-helper';\nimport type XhrLoader from './utils/xhr-loader';\n\n/**\n * The `Hls` class is the core of the HLS.js library used to instantiate player instances.\n * @public\n */\nexport default class Hls implements HlsEventEmitter {\n  private static defaultConfig: HlsConfig | undefined;\n\n  /**\n   * The runtime configuration used by the player. At instantiation this is combination of `hls.userConfig` merged over `Hls.DefaultConfig`.\n   */\n  public readonly config: HlsConfig;\n\n  /**\n   * The configuration object provided on player instantiation.\n   */\n  public readonly userConfig: Partial<HlsConfig>;\n\n  /**\n   * The logger functions used by this player instance, configured on player instantiation.\n   */\n  public readonly logger: ILogger;\n\n  private coreComponents: ComponentAPI[];\n  private networkControllers: NetworkComponentAPI[];\n  private _emitter: HlsEventEmitter = new EventEmitter();\n  private _autoLevelCapping: number = -1;\n  private _maxHdcpLevel: HdcpLevel = null;\n  private abrController: AbrComponentAPI;\n  private bufferController: BufferController;\n  private capLevelController: CapLevelController;\n  private latencyController: LatencyController;\n  private levelController: LevelController;\n  private streamController: StreamController;\n  private audioStreamController?: AudioStreamController;\n  private subtititleStreamController?: SubtitleStreamController;\n  private audioTrackController?: AudioTrackController;\n  private subtitleTrackController?: SubtitleTrackController;\n  private interstitialsController?: InterstitialsController;\n  private gapController: GapController;\n  private emeController?: EMEController;\n  private cmcdController?: CMCDController;\n  private _media: HTMLMediaElement | null = null;\n  private _url: string | null = null;\n  private _sessionId?: string;\n  private triggeringException?: boolean;\n  private started: boolean = false;\n\n  /**\n   * Get the video-dev/hls.js package version.\n   */\n  static get version(): string {\n    return version;\n  }\n\n  /**\n   * Check if the required MediaSource Extensions are available.\n   */\n  static isMSESupported(): boolean {\n    return isMSESupported();\n  }\n\n  /**\n   * Check if MediaSource Extensions are available and isTypeSupported checks pass for any baseline codecs.\n   */\n  static isSupported(): boolean {\n    return isSupported();\n  }\n\n  /**\n   * Get the MediaSource global used for MSE playback (ManagedMediaSource, MediaSource, or WebKitMediaSource).\n   */\n  static getMediaSource(): typeof MediaSource | undefined {\n    return getMediaSource();\n  }\n\n  static get Events(): typeof Events {\n    return Events;\n  }\n\n  static get MetadataSchema(): typeof MetadataSchema {\n    return MetadataSchema;\n  }\n\n  static get ErrorTypes(): typeof ErrorTypes {\n    return ErrorTypes;\n  }\n\n  static get ErrorDetails(): typeof ErrorDetails {\n    return ErrorDetails;\n  }\n\n  /**\n   * Get the default configuration applied to new instances.\n   */\n  static get DefaultConfig(): HlsConfig {\n    if (!Hls.defaultConfig) {\n      return hlsDefaultConfig;\n    }\n\n    return Hls.defaultConfig;\n  }\n\n  /**\n   * Replace the default configuration applied to new instances.\n   */\n  static set DefaultConfig(defaultConfig: HlsConfig) {\n    Hls.defaultConfig = defaultConfig;\n  }\n\n  /**\n   * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.\n   * @param userConfig - Configuration options applied over `Hls.DefaultConfig`\n   */\n  constructor(userConfig: Partial<HlsConfig> = {}) {\n    const logger = (this.logger = enableLogs(\n      userConfig.debug || false,\n      'Hls instance',\n      userConfig.assetPlayerId,\n    ));\n    const config = (this.config = mergeConfig(\n      Hls.DefaultConfig,\n      userConfig,\n      logger,\n    ));\n    this.userConfig = userConfig;\n\n    if (config.progressive) {\n      enableStreamingMode(config, logger);\n    }\n\n    // core controllers and network loaders\n    const {\n      abrController: _AbrController,\n      bufferController: _BufferController,\n      capLevelController: _CapLevelController,\n      errorController: _ErrorController,\n      fpsController: _FpsController,\n    } = config;\n    const errorController = new _ErrorController(this);\n    const abrController = (this.abrController = new _AbrController(this));\n    // FragmentTracker must be defined before StreamController because the order of event handling is important\n    const fragmentTracker = new FragmentTracker(this);\n    const _InterstitialsController = config.interstitialsController;\n    const interstitialsController = _InterstitialsController\n      ? (this.interstitialsController = new _InterstitialsController(this, Hls))\n      : null;\n    const bufferController = (this.bufferController = new _BufferController(\n      this,\n      fragmentTracker,\n    ));\n    const capLevelController = (this.capLevelController =\n      new _CapLevelController(this));\n\n    const fpsController = new _FpsController(this);\n    const playListLoader = new PlaylistLoader(this);\n\n    const _ContentSteeringController = config.contentSteeringController;\n    // Instantiate ConentSteeringController before LevelController to receive Multivariant Playlist events first\n    const contentSteering = _ContentSteeringController\n      ? new _ContentSteeringController(this)\n      : null;\n    const levelController = (this.levelController = new LevelController(\n      this,\n      contentSteering,\n    ));\n\n    const id3TrackController = new ID3TrackController(this);\n    const keyLoader = new KeyLoader(this.config, this.logger);\n    const streamController = (this.streamController = new StreamController(\n      this,\n      fragmentTracker,\n      keyLoader,\n    ));\n\n    const gapController = (this.gapController = new GapController(\n      this,\n      fragmentTracker,\n    ));\n\n    // Cap level controller uses streamController to flush the buffer\n    capLevelController.setStreamController(streamController);\n    // fpsController uses streamController to switch when frames are being dropped\n    fpsController.setStreamController(streamController);\n\n    const networkControllers: NetworkComponentAPI[] = [\n      playListLoader,\n      levelController,\n      streamController,\n    ];\n    if (interstitialsController) {\n      networkControllers.splice(1, 0, interstitialsController);\n    }\n    if (contentSteering) {\n      networkControllers.splice(1, 0, contentSteering);\n    }\n\n    this.networkControllers = networkControllers;\n    const coreComponents: ComponentAPI[] = [\n      abrController,\n      bufferController,\n      gapController,\n      capLevelController,\n      fpsController,\n      id3TrackController,\n      fragmentTracker,\n    ];\n\n    this.audioTrackController = this.createController(\n      config.audioTrackController,\n      networkControllers,\n    );\n    const AudioStreamControllerClass = config.audioStreamController;\n    if (AudioStreamControllerClass) {\n      networkControllers.push(\n        (this.audioStreamController = new AudioStreamControllerClass(\n          this,\n          fragmentTracker,\n          keyLoader,\n        )),\n      );\n    }\n    // Instantiate subtitleTrackController before SubtitleStreamController to receive level events first\n    this.subtitleTrackController = this.createController(\n      config.subtitleTrackController,\n      networkControllers,\n    );\n    const SubtitleStreamControllerClass = config.subtitleStreamController;\n    if (SubtitleStreamControllerClass) {\n      networkControllers.push(\n        (this.subtititleStreamController = new SubtitleStreamControllerClass(\n          this,\n          fragmentTracker,\n          keyLoader,\n        )),\n      );\n    }\n    this.createController(config.timelineController, coreComponents);\n    keyLoader.emeController = this.emeController = this.createController(\n      config.emeController,\n      coreComponents,\n    );\n    this.cmcdController = this.createController(\n      config.cmcdController,\n      coreComponents,\n    );\n    this.latencyController = this.createController(\n      LatencyController,\n      coreComponents,\n    );\n\n    this.coreComponents = coreComponents;\n\n    // Error controller handles errors before and after all other controllers\n    // This listener will be invoked after all other controllers error listeners\n    networkControllers.push(errorController);\n    const onErrorOut = errorController.onErrorOut;\n    if (typeof onErrorOut === 'function') {\n      this.on(Events.ERROR, onErrorOut, errorController);\n    }\n    // Autostart load handler\n    this.on(\n      Events.MANIFEST_LOADED,\n      playListLoader.onManifestLoaded,\n      playListLoader,\n    );\n  }\n\n  createController(ControllerClass, components) {\n    if (ControllerClass) {\n      const controllerInstance = new ControllerClass(this);\n      if (components) {\n        components.push(controllerInstance);\n      }\n      return controllerInstance;\n    }\n    return null;\n  }\n\n  // Delegate the EventEmitter through the public API of Hls.js\n  on<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context: Context = this as any,\n  ) {\n    this._emitter.on(event, listener, context);\n  }\n\n  once<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener: HlsListeners[E],\n    context: Context = this as any,\n  ) {\n    this._emitter.once(event, listener, context);\n  }\n\n  removeAllListeners<E extends keyof HlsListeners>(event?: E | undefined) {\n    this._emitter.removeAllListeners(event);\n  }\n\n  off<E extends keyof HlsListeners, Context = undefined>(\n    event: E,\n    listener?: HlsListeners[E] | undefined,\n    context: Context = this as any,\n    once?: boolean | undefined,\n  ) {\n    this._emitter.off(event, listener, context, once);\n  }\n\n  listeners<E extends keyof HlsListeners>(event: E): HlsListeners[E][] {\n    return this._emitter.listeners(event);\n  }\n\n  emit<E extends keyof HlsListeners>(\n    event: E,\n    name: E,\n    eventObject: Parameters<HlsListeners[E]>[1],\n  ): boolean {\n    return this._emitter.emit(event, name, eventObject);\n  }\n\n  trigger<E extends keyof HlsListeners>(\n    event: E,\n    eventObject: Parameters<HlsListeners[E]>[1],\n  ): boolean {\n    if (this.config.debug) {\n      return this.emit(event, event, eventObject);\n    } else {\n      try {\n        return this.emit(event, event, eventObject);\n      } catch (error) {\n        this.logger.error(\n          'An internal error happened while handling event ' +\n            event +\n            '. Error message: \"' +\n            error.message +\n            '\". Here is a stacktrace:',\n          error,\n        );\n        // Prevent recursion in error event handlers that throw #5497\n        if (!this.triggeringException) {\n          this.triggeringException = true;\n          const fatal = event === Events.ERROR;\n          this.trigger(Events.ERROR, {\n            type: ErrorTypes.OTHER_ERROR,\n            details: ErrorDetails.INTERNAL_EXCEPTION,\n            fatal,\n            event,\n            error,\n          });\n          this.triggeringException = false;\n        }\n      }\n    }\n    return false;\n  }\n\n  listenerCount<E extends keyof HlsListeners>(event: E): number {\n    return this._emitter.listenerCount(event);\n  }\n\n  /**\n   * Dispose of the instance\n   */\n  destroy() {\n    this.logger.log('destroy');\n    this.trigger(Events.DESTROYING, undefined);\n    this.detachMedia();\n    this.removeAllListeners();\n    this._autoLevelCapping = -1;\n    this._url = null;\n\n    this.networkControllers.forEach((component) => component.destroy());\n    this.networkControllers.length = 0;\n\n    this.coreComponents.forEach((component) => component.destroy());\n    this.coreComponents.length = 0;\n    // Remove any references that could be held in config options or callbacks\n    const config = this.config;\n    config.xhrSetup = config.fetchSetup = undefined;\n    // @ts-ignore\n    this.userConfig = null;\n  }\n\n  /**\n   * Attaches Hls.js to a media element\n   */\n  attachMedia(data: HTMLMediaElement | MediaAttachingData) {\n    if (!data || ('media' in data && !data.media)) {\n      const error = new Error(`attachMedia failed: invalid argument (${data})`);\n      this.trigger(Events.ERROR, {\n        type: ErrorTypes.OTHER_ERROR,\n        details: ErrorDetails.ATTACH_MEDIA_ERROR,\n        fatal: true,\n        error,\n      });\n      return;\n    }\n    this.logger.log(`attachMedia`);\n    if (this._media) {\n      this.logger.warn(`media must be detached before attaching`);\n      this.detachMedia();\n    }\n    const attachMediaSource = 'media' in data;\n    const media = attachMediaSource ? data.media : data;\n    const attachingData = attachMediaSource ? data : { media };\n    this._media = media;\n    this.trigger(Events.MEDIA_ATTACHING, attachingData);\n  }\n\n  /**\n   * Detach Hls.js from the media\n   */\n  detachMedia() {\n    this.logger.log('detachMedia');\n    this.trigger(Events.MEDIA_DETACHING, {});\n    this._media = null;\n  }\n\n  /**\n   * Detach HTMLMediaElement, MediaSource, and SourceBuffers without reset, for attaching to another instance\n   */\n  transferMedia(): AttachMediaSourceData | null {\n    this._media = null;\n    const transferMedia = this.bufferController.transferMedia();\n    this.trigger(Events.MEDIA_DETACHING, { transferMedia });\n    return transferMedia;\n  }\n\n  /**\n   * Set the source URL. Can be relative or absolute.\n   */\n  loadSource(url: string) {\n    this.stopLoad();\n    const media = this.media;\n    const loadedSource = this._url;\n    const loadingSource = (this._url = buildAbsoluteURL(\n      self.location.href,\n      url,\n      {\n        alwaysNormalize: true,\n      },\n    ));\n    this._autoLevelCapping = -1;\n    this._maxHdcpLevel = null;\n    this.logger.log(`loadSource:${loadingSource}`);\n    if (\n      media &&\n      loadedSource &&\n      (loadedSource !== loadingSource || this.bufferController.hasSourceTypes())\n    ) {\n      // Remove and re-create MediaSource\n      this.detachMedia();\n      this.attachMedia(media);\n    }\n    // when attaching to a source URL, trigger a playlist load\n    this.trigger(Events.MANIFEST_LOADING, { url: url });\n  }\n\n  /**\n   * Gets the currently loaded URL\n   */\n  public get url(): string | null {\n    return this._url;\n  }\n\n  /**\n   * Whether or not enough has been buffered to seek to start position or use `media.currentTime` to determine next load position\n   */\n  get hasEnoughToStart(): boolean {\n    return this.streamController.hasEnoughToStart;\n  }\n\n  /**\n   * Get the startPosition set on startLoad(position) or on autostart with config.startPosition\n   */\n  get startPosition(): number {\n    return this.streamController.startPositionValue;\n  }\n\n  /**\n   * Start loading data from the stream source.\n   * Depending on default config, client starts loading automatically when a source is set.\n   *\n   * @param startPosition - Set the start position to stream from.\n   * Defaults to -1 (None: starts from earliest point)\n   */\n  startLoad(startPosition: number = -1, skipSeekToStartPosition?: boolean) {\n    this.logger.log(\n      `startLoad(${\n        startPosition +\n        (skipSeekToStartPosition ? ', <skip seek to start>' : '')\n      })`,\n    );\n    this.started = true;\n    this.resumeBuffering();\n    for (let i = 0; i < this.networkControllers.length; i++) {\n      this.networkControllers[i].startLoad(\n        startPosition,\n        skipSeekToStartPosition,\n      );\n      if (!this.started || !this.networkControllers) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Stop loading of any stream data.\n   */\n  stopLoad() {\n    this.logger.log('stopLoad');\n    this.started = false;\n    for (let i = 0; i < this.networkControllers.length; i++) {\n      this.networkControllers[i].stopLoad();\n      if (this.started || !this.networkControllers) {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Returns whether loading, toggled with `startLoad()` and `stopLoad()`, is active or not`.\n   */\n  get loadingEnabled(): boolean {\n    return this.started;\n  }\n\n  /**\n   * Returns state of fragment loading toggled by calling `pauseBuffering()` and `resumeBuffering()`.\n   */\n  get bufferingEnabled(): boolean {\n    return this.streamController.bufferingEnabled;\n  }\n\n  /**\n   * Resumes stream controller segment loading after `pauseBuffering` has been called.\n   */\n  resumeBuffering() {\n    if (!this.bufferingEnabled) {\n      this.logger.log(`resume buffering`);\n      this.networkControllers.forEach((controller) => {\n        if (controller.resumeBuffering) {\n          controller.resumeBuffering();\n        }\n      });\n    }\n  }\n\n  /**\n   * Prevents stream controller from loading new segments until `resumeBuffering` is called.\n   * This allows for media buffering to be paused without interupting playlist loading.\n   */\n  pauseBuffering() {\n    if (this.bufferingEnabled) {\n      this.logger.log(`pause buffering`);\n      this.networkControllers.forEach((controller) => {\n        if (controller.pauseBuffering) {\n          controller.pauseBuffering();\n        }\n      });\n    }\n  }\n\n  get inFlightFragments(): InFlightFragments {\n    const inFlightData = {\n      [PlaylistLevelType.MAIN]: this.streamController.inFlightFrag,\n    };\n    if (this.audioStreamController) {\n      inFlightData[PlaylistLevelType.AUDIO] =\n        this.audioStreamController.inFlightFrag;\n    }\n    if (this.subtititleStreamController) {\n      inFlightData[PlaylistLevelType.SUBTITLE] =\n        this.subtititleStreamController.inFlightFrag;\n    }\n    return inFlightData;\n  }\n\n  /**\n   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)\n   */\n  swapAudioCodec() {\n    this.logger.log('swapAudioCodec');\n    this.streamController.swapAudioCodec();\n  }\n\n  /**\n   * When the media-element fails, this allows to detach and then re-attach it\n   * as one call (convenience method).\n   *\n   * Automatic recovery of media-errors by this process is configurable.\n   */\n  recoverMediaError() {\n    this.logger.log('recoverMediaError');\n    const media = this._media;\n    const time = media?.currentTime;\n    this.detachMedia();\n    if (media) {\n      this.attachMedia(media);\n      if (time) {\n        this.startLoad(time);\n      }\n    }\n  }\n\n  removeLevel(levelIndex: number) {\n    this.levelController.removeLevel(levelIndex);\n  }\n\n  /**\n   * @returns a UUID for this player instance\n   */\n  get sessionId(): string {\n    let _sessionId = this._sessionId;\n    if (!_sessionId) {\n      _sessionId = this._sessionId = uuid();\n    }\n    return _sessionId;\n  }\n\n  /**\n   * @returns an array of levels (variants) sorted by HDCP-LEVEL, RESOLUTION (height), FRAME-RATE, CODECS, VIDEO-RANGE, and BANDWIDTH\n   */\n  get levels(): Level[] {\n    const levels = this.levelController.levels;\n    return levels ? levels : [];\n  }\n\n  /**\n   * @returns LevelDetails of last loaded level (variant) or `null` prior to loading a media playlist.\n   */\n  get latestLevelDetails(): LevelDetails | null {\n    return this.streamController.getLevelDetails() || null;\n  }\n\n  /**\n   * @returns Level object of selected level (variant) or `null` prior to selecting a level or once the level is removed.\n   */\n  get loadLevelObj(): Level | null {\n    return this.levelController.loadLevelObj;\n  }\n\n  /**\n   * Index of quality level (variant) currently played\n   */\n  get currentLevel(): number {\n    return this.streamController.currentLevel;\n  }\n\n  /**\n   * Set quality level index immediately. This will flush the current buffer to replace the quality asap. That means playback will interrupt at least shortly to re-buffer and re-sync eventually. Set to -1 for automatic level selection.\n   */\n  set currentLevel(newLevel: number) {\n    this.logger.log(`set currentLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n    this.streamController.immediateLevelSwitch();\n  }\n\n  /**\n   * Index of next quality level loaded as scheduled by stream controller.\n   */\n  get nextLevel(): number {\n    return this.streamController.nextLevel;\n  }\n\n  /**\n   * Set quality level index for next loaded data.\n   * This will switch the video quality asap, without interrupting playback.\n   * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).\n   * @param newLevel - Pass -1 for automatic level selection\n   */\n  set nextLevel(newLevel: number) {\n    this.logger.log(`set nextLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n    this.streamController.nextLevelSwitch();\n  }\n\n  /**\n   * Return the quality level of the currently or last (of none is loaded currently) segment\n   */\n  get loadLevel(): number {\n    return this.levelController.level;\n  }\n\n  /**\n   * Set quality level index for next loaded data in a conservative way.\n   * This will switch the quality without flushing, but interrupt current loading.\n   * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.\n   * @param newLevel - Pass -1 for automatic level selection\n   */\n  set loadLevel(newLevel: number) {\n    this.logger.log(`set loadLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n  }\n\n  /**\n   * get next quality level loaded\n   */\n  get nextLoadLevel(): number {\n    return this.levelController.nextLoadLevel;\n  }\n\n  /**\n   * Set quality level of next loaded segment in a fully \"non-destructive\" way.\n   * Same as `loadLevel` but will wait for next switch (until current loading is done).\n   */\n  set nextLoadLevel(level: number) {\n    this.levelController.nextLoadLevel = level;\n  }\n\n  /**\n   * Return \"first level\": like a default level, if not set,\n   * falls back to index of first level referenced in manifest\n   */\n  get firstLevel(): number {\n    return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n  }\n\n  /**\n   * Sets \"first-level\", see getter.\n   */\n  set firstLevel(newLevel: number) {\n    this.logger.log(`set firstLevel:${newLevel}`);\n    this.levelController.firstLevel = newLevel;\n  }\n\n  /**\n   * Return the desired start level for the first fragment that will be loaded.\n   * The default value of -1 indicates automatic start level selection.\n   * Setting hls.nextAutoLevel without setting a startLevel will result in\n   * the nextAutoLevel value being used for one fragment load.\n   */\n  get startLevel(): number {\n    const startLevel = this.levelController.startLevel;\n    if (startLevel === -1 && this.abrController.forcedAutoLevel > -1) {\n      return this.abrController.forcedAutoLevel;\n    }\n    return startLevel;\n  }\n\n  /**\n   * set  start level (level of first fragment that will be played back)\n   * if not overrided by user, first level appearing in manifest will be used as start level\n   * if -1 : automatic start level selection, playback will start from level matching download bandwidth\n   * (determined from download of first segment)\n   */\n  set startLevel(newLevel: number) {\n    this.logger.log(`set startLevel:${newLevel}`);\n    // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n    if (newLevel !== -1) {\n      newLevel = Math.max(newLevel, this.minAutoLevel);\n    }\n\n    this.levelController.startLevel = newLevel;\n  }\n\n  /**\n   * Whether level capping is enabled.\n   * Default value is set via `config.capLevelToPlayerSize`.\n   */\n  get capLevelToPlayerSize(): boolean {\n    return this.config.capLevelToPlayerSize;\n  }\n\n  /**\n   * Enables or disables level capping. If disabled after previously enabled, `nextLevelSwitch` will be immediately called.\n   */\n  set capLevelToPlayerSize(shouldStartCapping: boolean) {\n    const newCapLevelToPlayerSize = !!shouldStartCapping;\n\n    if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {\n      if (newCapLevelToPlayerSize) {\n        this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.\n      } else {\n        this.capLevelController.stopCapping();\n        this.autoLevelCapping = -1;\n        this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.\n      }\n\n      this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;\n    }\n  }\n\n  /**\n   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n   */\n  get autoLevelCapping(): number {\n    return this._autoLevelCapping;\n  }\n\n  /**\n   * Returns the current bandwidth estimate in bits per second, when available. Otherwise, `NaN` is returned.\n   */\n  get bandwidthEstimate(): number {\n    const { bwEstimator } = this.abrController;\n    if (!bwEstimator) {\n      return NaN;\n    }\n    return bwEstimator.getEstimate();\n  }\n\n  set bandwidthEstimate(abrEwmaDefaultEstimate: number) {\n    this.abrController.resetEstimator(abrEwmaDefaultEstimate);\n  }\n\n  get abrEwmaDefaultEstimate(): number {\n    const { bwEstimator } = this.abrController;\n    if (!bwEstimator) {\n      return NaN;\n    }\n    return bwEstimator.defaultEstimate;\n  }\n\n  /**\n   * get time to first byte estimate\n   * @type {number}\n   */\n  get ttfbEstimate(): number {\n    const { bwEstimator } = this.abrController;\n    if (!bwEstimator) {\n      return NaN;\n    }\n    return bwEstimator.getEstimateTTFB();\n  }\n\n  /**\n   * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)\n   */\n  set autoLevelCapping(newLevel: number) {\n    if (this._autoLevelCapping !== newLevel) {\n      this.logger.log(`set autoLevelCapping:${newLevel}`);\n      this._autoLevelCapping = newLevel;\n      this.levelController.checkMaxAutoUpdated();\n    }\n  }\n\n  get maxHdcpLevel(): HdcpLevel {\n    return this._maxHdcpLevel;\n  }\n\n  set maxHdcpLevel(value: HdcpLevel) {\n    if (isHdcpLevel(value) && this._maxHdcpLevel !== value) {\n      this._maxHdcpLevel = value;\n      this.levelController.checkMaxAutoUpdated();\n    }\n  }\n\n  /**\n   * True when automatic level selection enabled\n   */\n  get autoLevelEnabled(): boolean {\n    return this.levelController.manualLevel === -1;\n  }\n\n  /**\n   * Level set manually (if any)\n   */\n  get manualLevel(): number {\n    return this.levelController.manualLevel;\n  }\n\n  /**\n   * min level selectable in auto mode according to config.minAutoBitrate\n   */\n  get minAutoLevel(): number {\n    const {\n      levels,\n      config: { minAutoBitrate },\n    } = this;\n    if (!levels) return 0;\n\n    const len = levels.length;\n    for (let i = 0; i < len; i++) {\n      if (levels[i].maxBitrate >= minAutoBitrate) {\n        return i;\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * max level selectable in auto mode according to autoLevelCapping\n   */\n  get maxAutoLevel(): number {\n    const { levels, autoLevelCapping, maxHdcpLevel } = this;\n\n    let maxAutoLevel;\n    if (autoLevelCapping === -1 && levels?.length) {\n      maxAutoLevel = levels.length - 1;\n    } else {\n      maxAutoLevel = autoLevelCapping;\n    }\n\n    if (maxHdcpLevel) {\n      for (let i = maxAutoLevel; i--; ) {\n        const hdcpLevel = levels[i].attrs['HDCP-LEVEL'];\n        if (hdcpLevel && hdcpLevel <= maxHdcpLevel) {\n          return i;\n        }\n      }\n    }\n\n    return maxAutoLevel;\n  }\n\n  get firstAutoLevel(): number {\n    return this.abrController.firstAutoLevel;\n  }\n\n  /**\n   * next automatically selected quality level\n   */\n  get nextAutoLevel(): number {\n    return this.abrController.nextAutoLevel;\n  }\n\n  /**\n   * this setter is used to force next auto level.\n   * this is useful to force a switch down in auto mode:\n   * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n   * forced value is valid for one fragment. upon successful frag loading at forced level,\n   * this value will be resetted to -1 by ABR controller.\n   */\n  set nextAutoLevel(nextLevel: number) {\n    this.abrController.nextAutoLevel = nextLevel;\n  }\n\n  /**\n   * get the datetime value relative to media.currentTime for the active level Program Date Time if present\n   */\n  public get playingDate(): Date | null {\n    return this.streamController.currentProgramDateTime;\n  }\n\n  public get mainForwardBufferInfo(): BufferInfo | null {\n    return this.streamController.getMainFwdBufferInfo();\n  }\n\n  public get maxBufferLength(): number {\n    return this.streamController.maxBufferLength;\n  }\n\n  /**\n   * Find and select the best matching audio track, making a level switch when a Group change is necessary.\n   * Updates `hls.config.audioPreference`. Returns the selected track, or null when no matching track is found.\n   */\n  public setAudioOption(\n    audioOption: MediaPlaylist | AudioSelectionOption | undefined,\n  ): MediaPlaylist | null {\n    return this.audioTrackController?.setAudioOption(audioOption) || null;\n  }\n  /**\n   * Find and select the best matching subtitle track, making a level switch when a Group change is necessary.\n   * Updates `hls.config.subtitlePreference`. Returns the selected track, or null when no matching track is found.\n   */\n  public setSubtitleOption(\n    subtitleOption: MediaPlaylist | SubtitleSelectionOption | undefined,\n  ): MediaPlaylist | null {\n    return (\n      this.subtitleTrackController?.setSubtitleOption(subtitleOption) || null\n    );\n  }\n\n  /**\n   * Get the complete list of audio tracks across all media groups\n   */\n  get allAudioTracks(): MediaPlaylist[] {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.allAudioTracks : [];\n  }\n\n  /**\n   * Get the list of selectable audio tracks\n   */\n  get audioTracks(): MediaPlaylist[] {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTracks : [];\n  }\n\n  /**\n   * index of the selected audio track (index in audio track lists)\n   */\n  get audioTrack(): number {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTrack : -1;\n  }\n\n  /**\n   * selects an audio track, based on its index in audio track lists\n   */\n  set audioTrack(audioTrackId: number) {\n    const audioTrackController = this.audioTrackController;\n    if (audioTrackController) {\n      audioTrackController.audioTrack = audioTrackId;\n    }\n  }\n\n  /**\n   * get the complete list of subtitle tracks across all media groups\n   */\n  get allSubtitleTracks(): MediaPlaylist[] {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController\n      ? subtitleTrackController.allSubtitleTracks\n      : [];\n  }\n\n  /**\n   * get alternate subtitle tracks list from playlist\n   */\n  get subtitleTracks(): MediaPlaylist[] {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController\n      ? subtitleTrackController.subtitleTracks\n      : [];\n  }\n\n  /**\n   * index of the selected subtitle track (index in subtitle track lists)\n   */\n  get subtitleTrack(): number {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n  }\n\n  get media() {\n    return this._media;\n  }\n\n  /**\n   * select an subtitle track, based on its index in subtitle track lists\n   */\n  set subtitleTrack(subtitleTrackId: number) {\n    const subtitleTrackController = this.subtitleTrackController;\n    if (subtitleTrackController) {\n      subtitleTrackController.subtitleTrack = subtitleTrackId;\n    }\n  }\n\n  /**\n   * Whether subtitle display is enabled or not\n   */\n  get subtitleDisplay(): boolean {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController\n      ? subtitleTrackController.subtitleDisplay\n      : false;\n  }\n\n  /**\n   * Enable/disable subtitle display rendering\n   */\n  set subtitleDisplay(value: boolean) {\n    const subtitleTrackController = this.subtitleTrackController;\n    if (subtitleTrackController) {\n      subtitleTrackController.subtitleDisplay = value;\n    }\n  }\n\n  /**\n   * get mode for Low-Latency HLS loading\n   */\n  get lowLatencyMode(): boolean {\n    return this.config.lowLatencyMode;\n  }\n\n  /**\n   * Enable/disable Low-Latency HLS part playlist and segment loading, and start live streams at playlist PART-HOLD-BACK rather than HOLD-BACK.\n   */\n  set lowLatencyMode(mode: boolean) {\n    this.config.lowLatencyMode = mode;\n  }\n\n  /**\n   * Position (in seconds) of live sync point (ie edge of live position minus safety delay defined by ```hls.config.liveSyncDuration```)\n   * @returns null prior to loading live Playlist\n   */\n  get liveSyncPosition(): number | null {\n    return this.latencyController.liveSyncPosition;\n  }\n\n  /**\n   * Estimated position (in seconds) of live edge (ie edge of live playlist plus time sync playlist advanced)\n   * @returns 0 before first playlist is loaded\n   */\n  get latency(): number {\n    return this.latencyController.latency;\n  }\n\n  /**\n   * maximum distance from the edge before the player seeks forward to ```hls.liveSyncPosition```\n   * configured using ```liveMaxLatencyDurationCount``` (multiple of target duration) or ```liveMaxLatencyDuration```\n   * @returns 0 before first playlist is loaded\n   */\n  get maxLatency(): number {\n    return this.latencyController.maxLatency;\n  }\n\n  /**\n   * target distance from the edge as calculated by the latency controller\n   */\n  get targetLatency(): number | null {\n    return this.latencyController.targetLatency;\n  }\n\n  set targetLatency(latency: number) {\n    this.latencyController.targetLatency = latency;\n  }\n\n  /**\n   * the rate at which the edge of the current live playlist is advancing or 1 if there is none\n   */\n  get drift(): number | null {\n    return this.latencyController.drift;\n  }\n\n  /**\n   * set to true when startLoad is called before MANIFEST_PARSED event\n   */\n  get forceStartLoad(): boolean {\n    return this.streamController.forceStartLoad;\n  }\n\n  /**\n   * ContentSteering pathways getter\n   */\n  get pathways(): string[] {\n    return this.levelController.pathways;\n  }\n\n  /**\n   * ContentSteering pathwayPriority getter/setter\n   */\n  get pathwayPriority(): string[] | null {\n    return this.levelController.pathwayPriority;\n  }\n\n  set pathwayPriority(pathwayPriority: string[]) {\n    this.levelController.pathwayPriority = pathwayPriority;\n  }\n\n  /**\n   * returns true when all SourceBuffers are buffered to the end\n   */\n  get bufferedToEnd(): boolean {\n    return !!this.bufferController?.bufferedToEnd;\n  }\n\n  /**\n   * returns Interstitials Program Manager\n   */\n  get interstitialsManager(): InterstitialsManager | null {\n    return this.interstitialsController?.interstitialsManager || null;\n  }\n\n  /**\n   * returns mediaCapabilities.decodingInfo for a variant/rendition\n   */\n  getMediaDecodingInfo(\n    level: Level,\n    audioTracks: MediaPlaylist[] = this.allAudioTracks,\n  ): Promise<MediaDecodingInfo> {\n    const audioTracksByGroup = getAudioTracksByGroup(audioTracks);\n    return getMediaDecodingInfoPromise(\n      level,\n      audioTracksByGroup,\n      navigator.mediaCapabilities,\n    );\n  }\n}\n\nexport type InFlightFragments = {\n  [PlaylistLevelType.MAIN]: InFlightData;\n  [PlaylistLevelType.AUDIO]?: InFlightData;\n  [PlaylistLevelType.SUBTITLE]?: InFlightData;\n};\nexport type {\n  AudioSelectionOption,\n  SubtitleSelectionOption,\n  VideoSelectionOption,\n  MediaPlaylist,\n  ErrorDetails,\n  ErrorTypes,\n  Events,\n  Level,\n  LevelDetails,\n  HlsListeners,\n  HlsEventEmitter,\n  HlsConfig,\n  BufferInfo,\n  BufferTimeRange,\n  HdcpLevel,\n  AbrController,\n  AudioStreamController,\n  AudioTrackController,\n  BasePlaylistController,\n  BaseStreamController,\n  BufferController,\n  CapLevelController,\n  CMCDController,\n  ContentSteeringController,\n  EMEController,\n  ErrorController,\n  FPSController,\n  InterstitialsController,\n  StreamController,\n  SubtitleStreamController,\n  SubtitleTrackController,\n  EwmaBandWidthEstimator,\n  InterstitialsManager,\n  Decrypter,\n  FragmentLoader,\n  KeyLoader,\n  TaskLoop,\n  TransmuxerInterface,\n  InFlightData,\n  State,\n  XhrLoader,\n  FetchLoader,\n  Cues,\n  M3U8Parser,\n};\nexport type {\n  ABRControllerConfig,\n  BufferControllerConfig,\n  CapLevelControllerConfig,\n  CMCDControllerConfig,\n  EMEControllerConfig,\n  DRMSystemConfiguration,\n  DRMSystemsConfiguration,\n  DRMSystemOptions,\n  FPSControllerConfig,\n  FragmentLoaderConfig,\n  FragmentLoaderConstructor,\n  GapControllerConfig,\n  HlsLoadPolicies,\n  LevelControllerConfig,\n  LoaderConfig,\n  LoadPolicy,\n  MP4RemuxerConfig,\n  PlaylistLoaderConfig,\n  PlaylistLoaderConstructor,\n  RetryConfig,\n  SelectionPreferences,\n  StreamControllerConfig,\n  LatencyControllerConfig,\n  MetadataControllerConfig,\n  TimelineControllerConfig,\n  TSDemuxerConfig,\n} from './config';\nexport type { MediaKeySessionContext } from './controller/eme-controller';\nexport type {\n  FragmentState,\n  FragmentTracker,\n} from './controller/fragment-tracker';\nexport type {\n  PathwayClone,\n  SteeringManifest,\n  UriReplacement,\n} from './controller/content-steering-controller';\nexport type {\n  NetworkErrorAction,\n  ErrorActionFlags,\n  IErrorAction,\n} from './controller/error-controller';\nexport type {\n  HlsAssetPlayer,\n  HlsAssetPlayerConfig,\n  InterstitialPlayer,\n} from './controller/interstitial-player';\nexport type { PlayheadTimes } from './controller/interstitials-controller';\nexport type {\n  InterstitialScheduleDurations,\n  InterstitialScheduleEventItem,\n  InterstitialScheduleItem,\n  InterstitialSchedulePrimaryItem,\n} from './controller/interstitials-schedule';\nexport type { TimelineController } from './controller/timeline-controller';\nexport type { DecrypterAesMode } from './crypt/decrypter-aes-mode';\nexport type { DateRange, DateRangeCue } from './loader/date-range';\nexport type { LoadStats } from './loader/load-stats';\nexport type { LevelKey } from './loader/level-key';\nexport type {\n  BaseSegment,\n  Fragment,\n  MediaFragment,\n  Part,\n  ElementaryStreams,\n  ElementaryStreamTypes,\n  ElementaryStreamInfo,\n} from './loader/fragment';\nexport type {\n  FragLoadFailResult,\n  FragmentLoadProgressCallback,\n  LoadError,\n} from './loader/fragment-loader';\nexport type { KeyLoaderInfo } from './loader/key-loader';\nexport type { DecryptData } from './loader/level-key';\nexport type {\n  AssetListJSON,\n  BaseData,\n  InterstitialAssetId,\n  InterstitialAssetItem,\n  InterstitialEvent,\n  InterstitialEventWithAssetList,\n  InterstitialId,\n  PlaybackRestrictions,\n  SnapOptions,\n  TimelineOccupancy,\n} from './loader/interstitial-event';\nexport type { ParsedMultivariantPlaylist } from './loader/m3u8-parser';\nexport type {\n  AttachMediaSourceData,\n  BaseTrack,\n  BaseTrackSet,\n  BufferCreatedTrack,\n  BufferCreatedTrackSet,\n  ExtendedSourceBuffer,\n  MediaOverrides,\n  ParsedTrack,\n  SourceBufferName,\n  SourceBufferListener,\n  SourceBufferTrack,\n  SourceBufferTrackSet,\n} from './types/buffer';\nexport type {\n  ComponentAPI,\n  AbrComponentAPI,\n  NetworkComponentAPI,\n} from './types/component-api';\nexport type {\n  TrackLoadingData,\n  TrackLoadedData,\n  AssetListLoadedData,\n  AssetListLoadingData,\n  AudioTrackLoadedData,\n  AudioTrackUpdatedData,\n  AudioTracksUpdatedData,\n  AudioTrackSwitchedData,\n  AudioTrackSwitchingData,\n  BackBufferData,\n  BufferAppendedData,\n  BufferAppendingData,\n  BufferCodecsData,\n  BufferCreatedData,\n  BufferEOSData,\n  BufferFlushedData,\n  BufferFlushingData,\n  CuesParsedData,\n  ErrorData,\n  FPSDropData,\n  FPSDropLevelCappingData,\n  FragBufferedData,\n  FragChangedData,\n  FragDecryptedData,\n  FragLoadedData,\n  FragLoadEmergencyAbortedData,\n  FragLoadingData,\n  FragParsedData,\n  FragParsingInitSegmentData,\n  FragParsingMetadataData,\n  FragParsingUserdataData,\n  InitPTSFoundData,\n  KeyLoadedData,\n  KeyLoadingData,\n  LevelLoadedData,\n  LevelLoadingData,\n  LevelPTSUpdatedData,\n  LevelsUpdatedData,\n  LevelSwitchedData,\n  LevelSwitchingData,\n  LevelUpdatedData,\n  LiveBackBufferData,\n  ContentSteeringOptions,\n  ManifestLoadedData,\n  ManifestLoadingData,\n  ManifestParsedData,\n  MaxAutoLevelUpdatedData,\n  MediaAttachedData,\n  MediaAttachingData,\n  MediaDetachedData,\n  MediaDetachingData,\n  MediaEndedData,\n  NonNativeTextTrack,\n  NonNativeTextTracksData,\n  PartsLoadedData,\n  SteeringManifestLoadedData,\n  SubtitleFragProcessedData,\n  SubtitleTrackLoadedData,\n  SubtitleTrackUpdatedData,\n  SubtitleTracksUpdatedData,\n  SubtitleTrackSwitchData,\n  InterstitialsUpdatedData,\n  InterstitialsBufferedToBoundaryData,\n  InterstitialAssetPlayerCreatedData,\n  InterstitialStartedData,\n  InterstitialEndedData,\n  InterstitialAssetStartedData,\n  InterstitialAssetEndedData,\n  InterstitialAssetErrorData,\n  InterstitialsPrimaryResumed,\n} from './types/events';\nexport type {\n  MetadataSample,\n  MetadataSchema,\n  UserdataSample,\n} from './types/demuxer';\nexport type {\n  InitSegmentData,\n  RemuxedMetadata,\n  RemuxedTrack,\n  RemuxedUserdata,\n  RemuxerResult,\n} from './types/remuxer';\nexport type { AttrList } from './utils/attr-list';\nexport type { Bufferable } from './utils/buffer-helper';\nexport type { CaptionScreen } from './utils/cea-608-parser';\nexport type { CuesInterface } from './utils/cues';\nexport type {\n  CodecsParsed,\n  HdcpLevels,\n  HlsSkip,\n  HlsUrlParameters,\n  LevelAttributes,\n  LevelParsed,\n  VariableMap,\n  VideoRange,\n  VideoRangeValues,\n} from './types/level';\nexport type {\n  PlaylistLevelType,\n  HlsChunkPerformanceTiming,\n  HlsPerformanceTiming,\n  HlsProgressivePerformanceTiming,\n  PlaylistContextType,\n  PlaylistLoaderContext,\n  FragmentLoaderContext,\n  KeyLoaderContext,\n  Loader,\n  LoaderStats,\n  LoaderContext,\n  LoaderResponse,\n  LoaderConfiguration,\n  LoaderCallbacks,\n  LoaderOnProgress,\n  LoaderOnAbort,\n  LoaderOnError,\n  LoaderOnSuccess,\n  LoaderOnTimeout,\n} from './types/loader';\nexport type { ILogFunction, ILogger, Logger } from './utils/logger';\nexport type {\n  MediaAttributes,\n  MediaPlaylistType,\n  MainPlaylistType,\n  AudioPlaylistType,\n  SubtitlePlaylistType,\n} from './types/media-playlist';\nexport type { Track, TrackSet } from './types/track';\nexport type { ChunkMetadata, TransmuxerResult } from './types/transmuxer';\nexport type { MediaDecodingInfo } from './utils/mediacapabilities-helper';\nexport type {\n  MediaKeyFunc,\n  KeySystems,\n  KeySystemFormats,\n} from './utils/mediakeys-helper';\nexport type {\n  RationalTimestamp,\n  TimestampOffset,\n} from './utils/timescale-conversion';\n"],"names":["uuid","crypto","randomUUID","error","url","URL","createObjectURL","Blob","toString","revokeObjectURL","slice","lastIndexOf","dt","Date","getTime","replace","c","r","Math","random","floor","isFiniteNumber","Number","isFinite","value","isSafeInteger","abs","MAX_SAFE_INTEGER","ErrorTypes","ErrorDetails","Events","PlaylistContextType","MANIFEST","LEVEL","AUDIO_TRACK","SUBTITLE_TRACK","PlaylistLevelType","MAIN","AUDIO","SUBTITLE","EWMA","halfLife","estimate","weight","alpha_","estimate_","totalWeight_","exp","log","_proto","prototype","sample","adjAlpha","pow","getTotalWeight","getEstimate","zeroFactor","EwmaBandWidthEstimator","slow","fast","defaultEstimate","defaultTTFB","defaultEstimate_","minWeight_","minDelayMs_","slow_","fast_","defaultTTFB_","ttfb_","update","durationMs","numBytes","max","numBits","durationS","bandwidthInBps","sampleTTFB","ttfb","seconds","sqrt","canEstimate","min","getEstimateTTFB","destroy","_createClass","key","get","Logger","label","logger","trace","debug","warn","info","lb","noop","bind","fakeLogger","createLogger","_extends","consolePrintFn","type","id","func","self","console","getLoggerFn","debugConfig","exportedLogger","enableLogs","context","newLogger","keys","forEach","e","getMediaSource","preferManagedMediaSource","undefined","mms","MediaSource","ManagedMediaSource","WebKitMediaSource","isManagedMediaSource","source","isCompatibleTrackChange","currentTracks","requiredTracks","trackNames","Object","requiredTrackNames","trackCount","length","requiredTrackCount","some","name","indexOf","utf8ArrayToStr","array","exitOnNull","TextDecoder","decoder","decoded","decode","idx","substring","len","char2","char3","out","i","String","fromCharCode","arrayToHex","str","h","hexToArrayBuffer","Uint8Array","from","split","buffer","LoadStats","aborted","loaded","retry","total","chunkCount","bwEstimate","loading","start","first","end","parsing","buffering","ElementaryStreamTypes","VIDEO","AUDIOVIDEO","BaseSegment","base","_byteRange","_url","_stats","_streams","relurl","makeEnumerable","setByteRange","previous","params","byteRangeEndOffset","parseInt","clearElementaryStreamInfo","elementaryStreams","byteRange","_this$_streams","set","baseurl","buildAbsoluteURL","alwaysNormalize","isMediaFragment","frag","sn","Fragment","_BaseSegment2","_this","call","_decryptdata","_programDateTime","_ref","_bitrate","rawProgramDateTime","tagList","duration","levelkeys","loader","keyLoader","level","cc","startPTS","endPTS","startDTS","endDTS","playlistOffset","deltaPTS","maxStartPTS","minEndPTS","data","bitrateTest","title","initSegment","endList","gap","urlId","_inheritsLoose","_proto2","addStart","setStart","setDuration","setKeyFormat","keyFormat","_this$_decryptdata","keyId","getDecryptData","abortRequests","_this$loader","_this$keyLoader","abort","setElementaryStreamInfo","partial","hasStats","stats","_isFiniteNumber","_isFiniteNumber2","byteLength","_this$_decryptdata2","NONE","identity","keyFormats","levelKey","programDateTime","_isFiniteNumber3","_this$_decryptdata3","encrypted","_this$levelkeys$keyFo","parse","_isFiniteNumber4","Part","_BaseSegment3","partAttrs","index","_this2","fragOffset","independent","fragment","decimalFloatingPoint","bool","enumeratedString","audio","video","audiovideo","getOwnPropertyDescriptorFromPrototypeChain","object","property","getPrototypeOf","propertyDescriptor","getOwnPropertyDescriptor","d","enumerable","defineProperty","UINT32_MAX","push","RemuxerTrackIdConfig","id3","text","bin2str","apply","readUint16","offset","val","readUint32","readSint32","readUint64","result","hasMoofData","size","findBox","path","results","subarray","endbox","subresults","parseSegmentIndex","sidx","references","version","timescale","earliestPresentationTime","firstOffset","startByte","referencesCount","referenceIndex","referenceInfo","referenceSize","referenceType","subsegmentDuration","parseInitSegment","traks","trak","tkhd","trackId","mdhd","hdlr","hdlrType","soun","vide","stsdBox","stsd","parseStsd","_objectSpread","trex","track","default","flags","sampleEntries","sampleEntriesEnd","fourCC","codec","supplemental","encBox","encBoxChildren","sinfs","sinf","schm","scheme","frma","codecFourCC","avcCBox","toHex","parseSupplementalDoViCodec","codecBox","esdsBox","skipBERInteger","objectType","firstByte","audioObjectType","hvcCBox","profileByte","profileSpace","generalProfileIdc","profileCompat","tierFlag","levelIDC","constraintIndicator","reverse32BitInt","toUpperCase","constraintString","byte","encodedByte","vpcCBox","profile","bitDepth","addLeadingZero","av1CBox","highBitDepth","twelveBit","monochrome","chromaSubsamplingX","chromaSubsamplingY","chromaSamplePosition","colorPrimaries","transferCharacteristics","matrixCoefficients","videoFullRangeFlag","dvvCResult","dvXCBox","doViProfile","doViLevel","bytes","limit","x","num","patchEncyptionData","decryptdata","isCommonEncryption","applyToTencBoxes","tenc","isAudio","tencKeyId","b","parseKeyIdsFromTenc","keyIds","predicate","encBoxes","enc","sinfBoxes","parseSinf","getSampleData","initData","tracks","trafs","traf","tfhd","NaN","sampleCount","trackTimes","tfdt","baseTime","trackDefault","tfhdFlags","defaultSampleDuration","truns","sampleDTS","rawDuration","sampleDuration","j","trun","sampleIndex","dataOffsetPresent","firstSampleFlagsPresent","sampleDurationPresent","sampleSizePresent","sampleFlagsPresent","sampleCompositionTimeOffsetPresent","remaining","isNonSyncSample","keyFrameIndex","keyFrameStart","sidxMinStart","Infinity","sidxMaxEnd","sidxs","subSegmentDuration","reduce","dur","ref","segmentValidRange","segmentedRange","valid","remainder","moofs","last","byteOffset","appendUint8Array","data1","data2","temp","parseSamples","timeOffset","seiSamples","videoData","samples","isHEVCFlavor","map","moof","moofOffset","baseDataOffsetPresent","sampleDescriptionIndexPresent","defaultSampleDurationPresent","defaultSampleSizePresent","defaultSampleSize","defaultSampleFlagsPresent","tfhdOffset","isHEVC","dataOffset","sampleSize","sampleCompositionOffsetsPresent","compositionOffset","trunOffset","sampleOffset","ix","naluTotalSize","naluSize","isSEIMessage","parseSEIMessageFromNALu","baseCodec","naluHeader","naluType","unescapedData","headerSize","pts","discardEPB","seiPtr","payloadType","payloadSize","leftOver","payPtr","countryCode","providerCode","userStructure","userDataType","totalCCs","enabled","totalBytes","byteArray","uuidStrArray","userDataBytes","join","userData","EPBPositions","newLength","newData","sourceIndex","shift","parseEmsg","schemeIdUri","timeScale","presentationTimeDelta","presentationTime","eventDuration","leftPresentationTime","rightPresentationTime","_isSafeInteger","payload","mp4Box","_len","arguments","Array","_key","mp4pssh","systemId","keyids","RangeError","kids","kidCount","DataView","setUint32","dataSize","parseMultiPssh","ArrayBuffer","view","pssh","parsePssh","getUint32","dataSizeOffset","kidCounts","dataSizeOrKidCount","userAgentHevcSupportIsInaccurate","test","navigator","userAgent","sampleEntryCodesISO","a3ds","alac","alaw","dra1","dtsc","dtse","dtsh","enca","fLaC","flac","FLAC","g719","g726","m4ae","mha1","mha2","mhm1","mhm2","mlpa","mp4a","Opus","opus","samr","sawb","sawp","sevc","sqcp","ssmv","twos","ulaw","avc1","avc2","avc3","avc4","avcp","av01","dav1","drac","dva1","dvav","dvh1","dvhe","encv","hev1","hvc1","mjp2","mp4v","mvc1","mvc2","mvc3","mvc4","resv","rv60","s263","svc1","svc2","vp08","vp09","stpp","wvtt","isCodecType","typeCodes","areCodecsMediaSourceSupported","codecs","isCodecMediaSourceSupported","_MediaSource$isTypeSu","isTypeSupported","mimeTypeForCodec","videoCodecPreferenceValue","videoCodec","codecsSetSelectionPreferenceValue","codecSet","limitedHevcSupport","lowerPriority","preferenceValue","CODEC_COMPATIBLE_NAMES","getCodecCompatibleNameLower","lowerCaseCodec","codecsToCheck","_getMediaSource","AUDIO_CODEC_REGEXP","getCodecCompatibleName","m","toLowerCase","replaceVideoCodec","originalCodecs","newVideoCodec","allCodecs","pickMostCompleteCodecName","parsedCodec","levelCodec","isCodecSupportedAsType","levelCodecs","convertAVC1ToAVCOTI","videoCodecs","avcdata","fillInMissingAV01Params","startsWith","av1params","placeholders","getM2TSSupportedAudioTypes","mpeg","mp3","ac3","getCodecsForMimeType","mimeType","supportedResult","supported","powerEfficient","smooth","unsupportedResult","SUPPORTED_INFO_DEFAULT","configurations","decodingInfoResults","getUnsupportedResult","requiresMediaCapabilitiesDecodingInfo","audioTracksByGroup","currentVideoRange","currentFrameRate","currentBw","audioPreference","audioGroups","audioCodec","audioCodecPreference","channelsPreference","channels","maxChannels","audioChannels","groups","acc","groupId","audioTrackGroup","Error","width","height","frameRate","videoRange","bitrate","getMediaDecodingInfoPromise","mediaCapabilities","cache","Promise","resolve","videoDecodeList","makeVideoConfigurations","videoCount","audioDecodeList","makeAudioConfigurations","audioCount","configuration","audioBitrate","ua","all","decodingInfoKey","getMediaDecodingInfoKey","decodingInfo","then","catch","_level$videoCodec","getVariantDecodingBitrate","framerate","videoConfiguration","contentType","transferFunction","hasVideo","_level$audioCodec","audioCodecs","combinedBitrate","audioGroupId","_audioTracksByGroup$g","configs","audioTrack","channelsNumber","parseFloat","audioConfiguration","estimatedAudioBitrate","levelBitrate","ceil","averageBitrate","config","HdcpLevels","isHdcpLevel","VideoRangeValues","isVideoRange","HlsSkip","No","Yes","v2","getSkipValue","details","canSkipUntil","canSkipDateRanges","age","playlistRecentEnough","HlsUrlParameters","msn","part","skip","addDirectives","uri","searchParams","href","Level","_attrs","fragmentError","loadError","realBitrate","supportedPromise","_avgBitrate","_audioGroups","_subtitleGroups","_urlId","attrs","optionalFloat","decimalInteger","filter","s","_data$supplemental","supplementalVideo","addGroupId","SUBTITLES","hasAudioGroup","hasGroup","hasSubtitleGroup","subtitleGroups","addFallback","CODECS","textGroupId","_this$audioGroups","_this$subtitleGroups","isHdrSupported","matchMedia","mediaQueryList","badQuery","media","matches","getVideoSelectionOptions","videoPreference","preferHDR","allowedVideoRanges","allowAutoPreferHDR","omitCircularRefsReplacer","replacer","known","WeakSet","_","has","add","stringify","JSON","getStartCodecTier","codecTiers","codecSets","videoCodecPreference","preferStereo","hasStereo","hasCurrentVideoRange","minHeight","minFramerate","minBitrate","minIndex","selectedScore","videoRanges","_getVideoSelectionOpt","_loop","tier","matchingVideoRanges","range","maxHeight","maxFramerate","hasMultipleSets","selected","candidate","candidateTier","logStartCodecCandidateIgnored","hasDefaultAudio","maxScore","codeSet","reason","getAudioTracksByGroup","allAudioTracks","trackGroup","hasDefault","hasAutoSelect","channelsKey","autoselect","hasAutoSelectAudio","getCodecTiers","levels","minAutoLevel","maxAutoLevel","tiers","SDR","lesserWidthOrHeight","score","audioGroup","getBasicSelectionOption","option","lang","assocLang","characteristics","findMatchingOption","matchPredicate","matchesOption","isDefault","forced","languagesMatch","characteristicsMatch","languageA","languageB","characteristicsA","characteristicsB","arrA","arrB","el","audioMatchPredicate","findClosestLevelWithAudioGroup","searchIndex","currentLevel","variants","variantMap","renditions","currentVideoCodec","matchingVideo","searchDownAndUpList","arr","useAlternateAudio","audioTrackUrl","hls","_hls$loadLevelObj","loadLevelObj","AbrController","_Logger","lastLevelLoadSec","lastLoadedFragLevel","firstSelection","_nextAutoLevel","nextAutoLevelKey","timer","fragCurrent","partCurrent","bitrateTestDelay","rebufferNotice","supportedCache","bwEstimator","_abandonRulesCheck","levelLoaded","autoLevelEnabled","now","performance","timeLoading","loadingFragForLevel","currentAutoLevel","clearTimer","fragBlockingSwitch","levelChange","paused","playbackRate","readyState","bufferInfo","mainForwardBufferInfo","ttfbEstimate","bufferStarvationDelay","loadedFirstByte","getBwEstimate","expectedLen","round","timeStreaming","loadRate","ttfbSeconds","fragLoadedDelay","bwe","live","latestLevelDetails","abrBandWidthUpFactor","fragLevelNextLoadedDelay","POSITIVE_INFINITY","nextLoadLevel","levelNextBitrate","maxBitrate","requiresLevelLoad","getTimeToLoadFrag","nextLoadLevelBitrate","resetEstimator","bestSwitchLevel","findBestLevel","toFixed","nextAutoLevel","abortAndSwitch","loadLevel","getStarvationDelay","lowestSwitchLevel","setInterval","trigger","FRAG_LOAD_EMERGENCY_ABORTED","initEstimator","registerListeners","abrEwmaDefaultEstimate","abrEwmaSlowVoD","abrEwmaFastVoD","on","MANIFEST_LOADING","onManifestLoading","FRAG_LOADING","onFragLoading","FRAG_LOADED","onFragLoaded","FRAG_BUFFERED","onFragBuffered","LEVEL_SWITCHING","onLevelSwitching","LEVEL_LOADED","onLevelLoaded","LEVELS_UPDATED","onLevelsUpdated","MAX_AUTO_LEVEL_UPDATED","onMaxAutoLevelUpdated","ERROR","onError","unregisterListeners","off","event","ignoreFragment","_data$part","fatal","BUFFER_ADD_CODEC_ERROR","BUFFER_APPEND_ERROR","FRAG_LOAD_TIMEOUT","timeToFirstByteSec","bandwidth","fragSizeBits","isSwitch","fragLoadSec","playlistLoadSec","timeLoadingMs","abrEwmaSlowLive","abrEwmaFastLive","levelInfo","_ref2","abrMaxWithRealBitrate","loadedBytes","loadedDuration","fragBufferedData","processingMs","clearInterval","getAutoLevelKey","getNextABRAutoLevel","currentFragDuration","avgbw","bwFactor","abrBandWidthFactor","bwUpFactor","bestLevel","maxStarvationDelay","maxLoadingDelay","minLevel","autoLevel","_this$hls$latestLevel","_this3","maxFetchDuration","selectionBaseLevel","firstLevel","_this$hls","currentCodecSet","minStartIndex","startTier","ttfbEstimateSec","levelsSkipped","_levelInfo$supportedR","upSwitch","useMediaCapabilities","removeLevel","levelDetails","avgDuration","partTarget","averagetargetduration","adjustedbw","fetchDuration","canSwitchWithinTolerance","forcedAutoLevel","v","_ret","deriveNextAutoLevel","nextLevel","_this$hls2","_this$hls3","maxStartDelay","abrAutoLevel","clamped","useEstimate","loadedFirstFrag","nextABRAutoLevel","firstAutoLevel","BinarySearch","search","list","comparisonFn","maxIndex","currentIndex","currentElement","comparisonResult","findFragmentByPDT","fragments","PDTValue","maxFragLookUpTolerance","isArray","startPDT","endPDT","endProgramDateTime","seg","pdtWithinToleranceTest","findFragmentByPTS","fragPrevious","bufferEnd","nextFragLookupTolerance","fragNext","bufferEdgeError","fragmentWithinToleranceTest","fragmentWithinFastStartSwitch","foundFragment","firstDuration","tag","candidateLookupTolerance","pdtBufferEnd","findNearestWithCC","pos","startCC","endCC","fragmentHint","concat","closest","isTimeoutError","KEY_LOAD_TIMEOUT","LEVEL_LOAD_TIMEOUT","MANIFEST_LOAD_TIMEOUT","isKeyError","isUnusableKeyError","getRetryConfig","loadPolicy","isTimeout","getRetryDelay","retryConfig","retryCount","backoffFactor","backoff","retryDelayMs","maxRetryDelayMs","getLoaderConfigWithoutReties","loderConfig","errorRetry","timeoutRetry","shouldRetry","loaderResponse","httpStatus","code","maxNumRetry","retryForHttpStatus","offlineHttpStatus","onLine","NetworkErrorAction","DoNothing","SendAlternateToPenaltyBox","RemoveAlternatePermanently","RetryRequest","ErrorActionFlags","None","MoveAllAlternatesMatchingHost","MoveAllAlternatesMatchingHDCP","MoveAllAlternatesMatchingKey","ErrorController","playlistError","LEVEL_UPDATED","onLevelUpdated","onErrorOut","startLoad","startPosition","stopLoad","getVariantLevelIndex","getVariantIndex","variantHasKey","keyInError","_level$details","hasKey","audioGroupsIds","audioTracks","_track$details","_data$frag","FRAG_LOAD_ERROR","KEY_LOAD_ERROR","errorAction","getFragRetryOrSwitchAction","FRAG_PARSING_ERROR","createDoNothingErrorAction","FRAG_GAP","FRAG_DECRYPT_ERROR","action","LEVEL_EMPTY_ERROR","LEVEL_PARSING_ERROR","_data$context","levelIndex","parent","getPlaylistRetryOrSwitchAction","levelRetry","getLevelSwitchAction","LEVEL_LOAD_ERROR","AUDIO_TRACK_LOAD_ERROR","AUDIO_TRACK_LOAD_TIMEOUT","SUBTITLE_LOAD_ERROR","SUBTITLE_TRACK_LOAD_TIMEOUT","KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED","KEY_SYSTEM_SESSION_UPDATE_FAILED","KEY_SYSTEM_STATUS_INTERNAL_ERROR","KEY_SYSTEM_NO_SESSION","REMUX_ALLOC_ERROR","_data$level","INTERNAL_EXCEPTION","BUFFER_APPENDING_ERROR","BUFFER_FULL_ERROR","LEVEL_SWITCH_ERROR","BUFFER_STALLED_ERROR","BUFFER_SEEK_OVER_HOLE","BUFFER_NUDGE_ON_STALL","KEY_SYSTEM_ERROR","playlistLoadPolicy","response","variantLevelIndex","_hls$config","fragLoadPolicy","keyLoadPolicy","fragmentErrors","_data$frag2","_data$context2","errorDetails","preserveManualLevelOnError","fragErrorType","isAudioCodecError","sourceBufferName","findAudioCodecAlternate","isVideoCodecError","findVideoCodecAlternate","_ref3","playlistErrorType","playlistErrorGroupId","_level$audioGroups","_level$subtitleGroups","levelCandidate","fragCandidate","_data$errorAction","sendAlternateToPenaltyBox","resolved","message","recoverMediaError","switchLevel","restrictedHdcpLevel","hdcpLevel","maxHdcpLevel","levelCountWithError","_levels$i$audioGroups","_data$frag3","fragLevelKey","FragmentState","NOT_LOADED","APPENDING","PARTIAL","OK","FragmentTracker","activePartLists","create","endListFragments","timeRanges","bufferPadding","hasGaps","_registerListeners","BUFFER_APPENDED","onBufferAppended","_unregisterListeners","getAppendedFrag","position","levelType","activeParts","activePart","getBufferedFrag","getFragAtPos","buffered","fragmentEntity","body","detectEvictedFragments","elementaryStream","timeRange","playlistType","appendedPart","removeAppending","appendedPartSn","removeFragment","esData","time","isNotBuffered","isTimeBuffered","detectPartialFragments","fragKey","getFragmentKey","isFragHint","streamInfo","getBufferedTimes","isPartial","removeParts","snToKeep","filterParts","fragBuffered","force","appendedPTS","startTime","endTime","getPartialFragment","bestFragment","timePadding","bestOverlap","isEndListAppended","lastFragmentEntity","getState","removeAllFragments","hasFragment","hasFragments","hasParts","_this$activePartLists","removeFragmentsInRange","withGapOnly","unbufferedOnly","snToRemove","partlist","partList","_fragmentEntity$range","_fragmentEntity$range2","_fragmentEntity$range3","keep","DecrypterAesMode","cbc","ctr","AESCrypto","subtle","iv","aesMode","aesIV","decrypt","counter","removePadding","outputBytes","paddingBytes","getUint8","AESDecryptor","rcon","subMix","Uint32Array","invSubMix","sBox","invSBox","ksRows","keySize","keySchedule","invKeySchedule","initTable","uint8ArrayToUint32Array_","arrayBuffer","newArray","subMix0","subMix1","subMix2","subMix3","invSubMix0","invSubMix1","invSubMix2","invSubMix3","xi","sx","x2","x4","x8","t","expandKey","keyBuffer","sameKey","ksRow","invKsRow","sbox","prev","networkToHostOrderSwap","word","inputArrayBuffer","nRounds","invSBOX","initVector","initVector0","initVector1","initVector2","initVector3","inputInt32","Int32Array","outputInt32","t0","t1","t2","t3","s0","s1","s2","s3","inputWords0","inputWords1","inputWords2","inputWords3","swapWord","FastAESKey","subtleAlgoName","getSubtleAlgoName","importKey","CHUNK_SIZE","Decrypter","_temp","_ref$removePKCS7Paddi","removePKCS7Padding","logEnabled","softwareDecrypter","fastAesKey","remainderData","currentIV","currentResult","useSoftware","enableSoftwareAES","browserCrypto","webkitSubtle","isSync","flush","reset","reject","dataView","isView","softwareDecrypt","decryptResult","webCryptoDecrypt","logOnce","currentChunk","getValidChunk","onWebCryptoError","aesKey","err","splitPoint","msg","MIN_CHUNK_SIZE","FragmentLoader","partLoadTimeout","load","onProgress","LoadError","NETWORK_ERROR","networkDetails","FragmentILoader","fLoader","DefaultILoader","tags","createGapLoadError","loaderContext","createLoaderContext","loaderConfig","timeout","maxLoadTimeMs","maxRetry","retryDelay","maxRetryDelay","highWaterMark","callbacks","onSuccess","resetLoader","resetIV","onAbort","INTERNAL_ABORTED","onTimeout","loadPart","updateStatsFromPart","partLoadedData","fragStats","partStats","partTotal","estTotalParts","estLoadedParts","estRemainingParts","estRemainingBytes","fragLoading","partLoading","clearTimeout","segment","responseType","headers","rangeStart","rangeEnd","byteRangeStartOffset","_frag$decryptdata","byteRangeStart","byteRangeEnd","isMethodFullSegmentAesCbc","method","fragmentLen","errorData","MEDIA_ERROR","_Error","_wrapNativeSuper","TaskLoop","_boundTick","_tickTimer","_tickInterval","_tickCallCount","tick","onHandlerDestroying","onHandlerDestroyed","clearNextTick","hasInterval","hasNextTick","millis","doTick","tickImmediate","setTimeout","ChunkMetadata","transmuxing","getNewPerformanceTiming","executeStart","executeEnd","noopBuffered","BufferHelper","isBuffered","getBuffered","bufferedRanges","timeRangesToArray","maxHoleDuration","bufferedInfo","bufferedIndex","sort","a","buffered2","buf2len","buf2end","bufferLen","nextStart","bufferStart","VARIABLE_REPLACEMENT_REGEX","hasVariableReferences","substituteVariables","parsed","variableList","hasVariableRefs","variableReference","variableName","variableValue","playlistParsingError","addVariableDefinition","attr","parentUrl","NAME","VALUE","QUERYPARAM","importVariableDefinition","sourceVariableList","IMPORT","DECIMAL_RESOLUTION_REGEX","ATTR_LIST_REGEX","AttrList","parseAttrList","attrName","intValue","hexadecimalInteger","stringValue","hexadecimalIntegerAsNumber","defaultValue","enumeratedStringList","dict","attrValue","identifier","decimalResolution","res","exec","input","match","quote","lastIndex","trim","quotedString","hexadecimalSequence","CLASS_INTERSTITIAL","isDateRangeCueAttribute","isSCTE35Attribute","DateRange","dateRangeAttr","dateRangeWithSameId","tagCount","_dateRangeWithSameId$","tagAnchor","tagOrder","_startDate","_endDate","_dateAtEnd","_cue","_badValueForSameId","previousAttr","hasOwnProperty","ID","endDate","CLASS","CUE","pre","post","once","startDate","dateAtEnd","class","endOnNext","cue","isInterstitial","DEFAULT_TARGET_DURATION","LevelDetails","baseUrl","PTSKnown","alignedSliding","endSN","dateRanges","dateRangeTagCount","requestScheduled","ageHeader","advancedDateTime","updated","advanced","misses","startSN","startTimeOffset","targetduration","totalduration","m3u8","canBlockReload","skippedSegments","recentlyRemovedDateranges","partHoldBack","holdBack","preloadHint","renditionReports","tuneInGoal","deltaUpdateFailed","driftStartTime","driftEndTime","driftStart","driftEnd","encryptedFragments","appliedTimelineOffset","reloaded","partSnDiff","lastPartSn","partIndexDiff","lastPartIndex","runTime","runDuration","partEnd","fragmentEnd","_this$partList","_this$partList2","_this$partList3","playlistWindowDuration","fragmentStart","levelTargetDuration","arrayValuesMatch","optionalArrayValuesMatch","isFullSegmentEncryption","getAesModeFromFullSegmentMethod","base64Decode","base64encodedStr","atob","charCodeAt","strToUtf8array","unescape","encodeURIComponent","getKeyIdBytes","keyIdbytes","paddedkeyIdbytes","changeEndianness","swap","to","cur","convertDataUriToArrayBytes","colonsplit","keydata","semicolonsplit","commasplit","isbase64","splice","optionalSelf","KeySystems","CLEARKEY","FAIRPLAY","PLAYREADY","WIDEVINE","KeySystemFormats","keySystemFormatToKeySystemDomain","format","keySystemDomainToKeySystemFormat","keySystem","getKeySystemsForConfig","drmSystems","widevineLicenseUrl","keySystemsToAttempt","requestMediaKeySystemAccess","_optionalSelf$navigat","getSupportedMediaKeySystemConfigurations","drmSystemOptions","initDataTypes","createMediaKeySystemConfigurations","baseConfig","persistentState","distinctiveIdentifier","sessionTypes","sessionType","audioCapabilities","robustness","audioRobustness","encryptionScheme","audioEncryptionScheme","videoCapabilities","videoRobustness","videoEncryptionScheme","isPersistentSessionType","_drmSystemOptions$ses","parsePlayReadyWRM","keyBytes","keyBytesUtf16","Uint16Array","keyByteStr","xmlKeyBytes","parser","DOMParser","xmlDoc","parseFromString","keyData","getElementsByTagName","childNodes","nodeValue","getAttribute","keyIdArray","keyUriToKeyIdMap","LevelKey","formatversions","keyFormatVersions","clearKeyUriToKeyIdMap","setKeyIdForUri","isSupported","levelKeys","createInitializationVector","assignedKeyId","_psshData$kids","psshData","getKeyIdFromPlayReadyKey","PlayReadyKeySystemUUID","padded","getKeyIdFromWidevineKey","widevineKey","playReadyKey","playReadyKeyBytes","segmentNumber","uint8View","MASTER_PLAYLIST_REGEX","MASTER_PLAYLIST_MEDIA_REGEX","IS_MEDIA_PLAYLIST","LEVEL_PLAYLIST_REGEX_FAST","RegExp","LEVEL_PLAYLIST_REGEX_SLOW","M3U8Parser","findGroup","mediaGroupId","group","isMediaPlaylist","parseMasterPlaylist","string","contentSteering","sessionData","sessionKeys","levelsWithKnownCodecs","_level$unknownCodecs","resolution","setCodecs","supplementalCodecs","unknownCodecs","attributes","sessionAttrs","dataId","sessionKey","parseKey","variableAttributes","contentSteeringAttributes","pathwayId","parseStartTimeOffset","stripUnknownCodecLevels","parseMasterPlaylistMedia","groupsByType","textCodec","TYPE","medias","LANGUAGE","CHANNELS","CHARACTERISTICS","instreamId","URI","groupCodec","assignCodec","parseLevelPlaylist","levelUrlId","multivariantVariableList","_LEVEL_PLAYLIST_REGEX","programDateTimes","currentInitSegment","currentSN","currentPart","discontinuityCounter","currentBitrate","prevFrag","firstPdtIndex","createNextFrag","nextByteRange","serverControlAttrs","setFragLevelKeys","assignProgramDateTime","value1","value2","assignMultipleMediaPlaylistTagOccuranceError","assignMustAppearBeforeSegmentsError","skipAttrs","dateRange","isValid","currentKey","mapAttrs","init","setInitSegment","partInfAttrs","previousFragmentPart","preloadHintAttrs","renditionReportAttrs","pop","fragmentLength","firstFragment","lastFragment","lastSn","backfillProgramDateTimes","unshift","mapDateRanges","programDateTimeCount","hasProgramDateTime","lastProgramDateTime","playlistEnd","dateRangeIds","startDateTime","_programDateTimes$j","fragIndex","findFragmentWithStartDate","pdtFragment","pdtStart","_programDateTimes","durationBetweenPdt","startIndex","endSegment","endIndex","fragStartDateTime","keyTagAttributes","_keyAttrs$METHOD","_keyAttrs$KEYFORMAT","keyAttrs","decryptmethod","METHOD","decrypturi","decryptiv","decryptkeyformatversions","KEYFORMATVERSIONS","decryptkeyformat","KEYFORMAT","IV","resolvedUri","KEYID","startAttributes","startAttrs","codecsAttributeValue","filtered","groupItem","codecProperty","codecValue","fragPrev","BYTERANGE","updateFromToPTS","fragFrom","fragTo","fragToPTS","contiguous","updateFragPTSDTS","parsedMediaDuration","fragStartPts","fragEndPts","drift","fragIdx","mergeDetails","oldDetails","newDetails","oldFragments","oldInit","PTSFrag","mapFragmentIntersection","oldFrag","newFrag","newFragIndex","newFragments","ccOffset","_isFiniteNumber5","hasStreams","fragmentsToCheck","_currentInitSegment","mergeDateRanges","_fragPriorToNewStart$","fragPriorToNewStart","getFragmentWithSN","mapPartIntersection","oldPart","newPart","adjustSliding","edge","oldDateRanges","deltaDateRanges","mergeIds","mergeCount","mergedDateRange","oldParts","newParts","intersectionFn","delta","newFrags","oldFrags","uriBefore","uriAfter","notEqualAfterStrippingQueries","getSequenceError","matchingStableVariantOrRendition","advancedOrStable","sliding","addSliding","computeReloadInterval","distanceToLiveEdgeMs","reloadInterval","liveEdgeMaxTargetDurations","lastSegmentDuration","getPartWith","partIndex","findPart","reassignFragmentLevelIndexes","stripQuery","findFirstFragWithCC","_fragments$i","shouldAlignOnDiscontinuities","refDetails","adjustFragmentStart","adjustSlidingStart","alignStream","switchDetails","alignDiscontinuities","alignMediaPlaylistByPDT","targetCC","refFrag","refFragments","refPDT","targetPDT","addEventListener","listener","removeEventListener","TimeRanges","State","STOPPED","IDLE","KEY_LOADING","FRAG_LOADING_WAITING_RETRY","WAITING_TRACK","PARSING","PARSED","ENDED","WAITING_INIT_PTS","WAITING_LEVEL","BaseStreamController","_TaskLoop","fragmentTracker","logPrefix","transmuxer","_state","mediaBuffer","lastCurrentTime","nextLoadPosition","retryDate","fragmentLoader","levelLastLoaded","startFragRequested","decrypter","initPTS","loadingParts","loopSn","onMediaSeeking","state","currentTime","maxBufferHole","noFowardBuffer","resetLoadingState","tolerance","fragStartOffset","fragEndOffset","pastFragment","shouldLoadParts","getLevelDetails","hasEnoughToStart","onMediaEnded","MEDIA_ATTACHED","onMediaAttached","MEDIA_DETACHING","onMediaDetaching","MANIFEST_LOADED","onManifestLoaded","onTickEnd","resetTransmuxer","pauseBuffering","resumeBuffering","_streamEnded","timelineStart","timelineOffset","hasSecondBufferedRange","lastPart","lastPartBuffered","autoStartLoad","transferringMedia","transferMedia","ended","detach","loadFragment","targetBufferTime","_loadFragForPlayback","progressCallback","fragContextChanged","fragInfo","_handleFragmentLoadProgress","_doFragLoad","playlistLabel","_handleFragmentLoadComplete","resetFragmentLoading","clearTrackerIfNeeded","_this$mediaBuffer","fragState","getFwdBufferInfo","minForwardBufferLength","maxBufferLength","backtrackFragment","backtracked","reduceMaxBufferLength","checkLiveUpdate","waitForLive","expired","flushMainBuffer","startOffset","endOffset","flushScope","BUFFER_FLUSHING","_loadInitSegment","_this4","decryptData","decryptedData","FRAG_DECRYPTED","tstart","tdecrypt","completeInitSegmentLoad","unhandledEncryptionError","_tracks$audio","_tracks$video","emeEnabled","emeController","mediaKeys","KEY_SYSTEM_NO_KEYS","fragBufferedComplete","_this$levels","fragLoadedEndData","partsLoaded","complete","fragLoaded","chunkMeta","_this5","keyLoadingPromise","keyLoadedData","KEY_LOADED","loadClear","getNextPart","doFragPartsLoad","handleFragLoadError","loadedEndOfParts","_details$partList","p","dataOnProgress","progressive","fragLoadedData","fromPart","_this6","initialPartList","loadedPart","nextPart","handleFragLoadAborted","resetStartWhenNotLoaded","OTHER_ERROR","_handleTransmuxerFlush","getCurrentContext","loadingPartsAtEdge","updateLevelTiming","lowLatencyMode","_details$fragmentHint","firstPart","safePartStart","_this$media","playhead","getLoadPosition","bufferFragmentData","noBacktracking","offsetTimestamp","BUFFER_APPENDING","dropped","flushBufferGap","fragDuration","segmentFraction","bufferable","_this$media2","backwardSeek","getFwdBufferInfoAtPos","bufferedFragAtPos","gapDuration","getMaxBufferLength","maxBufLen","maxBufferSize","maxMaxBufferLength","threshold","minLength","reducedLength","fragOrPart","getNextFragment","fragLen","canLoadParts","initialLiveManifestSize","_frag","getInitialLiveFragment","mainStart","liveSyncPosition","getFragmentAtPosition","programFrag","filterReplacedPrimary","curSNIdx","mapToInitFragWhenRequired","isLoopLoading","trackerState","getNextFragmentLoopLoading","nextFragment","nextbufferInfo","interstitialsEnabled","interstitials","interstitialsManager","bufferingItem","bufferingInterstitial","appendInPlace","nextEvent","playerQueue","interstitial","resumeTime","independentAttrOmitted","targetSN","liveStart","_this$media3","lookupTolerance","sameLevel","nextFrag","alignPlaylists","previousDetails","slidingStart","firstLevelLoad","aligned","alignedSlidingStart","waitForCdnTuneIn","advancePartLimit","setStartPosition","offsetInMultivariantPlaylist","onFragmentOrKeyLoadError","filterType","_this$fragCurrent","gapTagEncountered","_errorAction$retryCou","couldRetry","noAlternate","resetFragmentErrors","treatAsGap","_data$response","offlineStatus","delay","checkRetryDate","waitingForConnection","reduceLengthAndFlushBuffer","flushBuffer","afterBufferFlushed","bufferType","bufferedTimeRanges","resetWhenMissingContext","removeUnbufferedFrags","_this7","parsedDuration","LEVEL_PTS_UPDATED","_this$transmuxer","FRAG_PARSED","_this$transmuxer2","recoverWorkerError","configuredTimelineOffset","_this$getLevelDetails","_this$hls$interstitia","playingInterstitial","playingItem","nextState","previousState","interstitialsController","enableInterstitialPlayback","ChunkCache","chunks","dataLength","chunk","concatUint8Arrays","isId3Footer","isId3Header","readId3Size","getId3Data","front","getAudioConfig","observer","manifestCodec","adtsSamplingRates","byte2","adtsSamplingIndex","emit","adtsObjectType","channelCount","samplerate","aacSampleIndex","isHeaderPattern","getHeaderLength","getFullFrameLength","canGetFrameLength","isHeader","canParse","probe","headerLength","frameLength","newOffset","initTrackConfig","getFrameDuration","parseFrameHeader","appendFrame","frameIndex","frameDuration","stamp","header","unit","missing","canParseId3","toArrayBuffer","toUint8","Type","unsafeGetArrayBuffer","bytesPerElement","BYTES_PER_ELEMENT","isArrayBufferView","dataEnd","rawStart","obj","decodeId3ImageFrame","frame","metadataFrame","description","pictureType","utf8Encoding","mimeTypeEndIndex","descriptionEndIndex","decodeId3PrivFrame","owner","privateData","decodeId3TextFrame","decodeId3UrlFrame","decodeId3Frame","getId3FrameData","HEADER_FOOTER_SIZE","FRAME_SIZE","getId3Frames","id3Data","frames","frameData","isId3TimestampFrame","readId3Timestamp","timeStampFrame","pts33Bit","timestamp","getId3Timestamp","MetadataSchema","dummyTrack","inputTimeScale","pid","sequenceNumber","BaseAudioDemuxer","_audioTrack","_id3Track","cachedData","basePTS","lastPTS","resetInitSegment","trackDuration","resetTimeStamp","deaultTimestamp","resetContiguity","demux","lastDataIndex","id3Track","initPTSFn","dts","audioId3","partialData","videoTrack","textTrack","demuxSampleAes","init90kHz","chromeVersion","BitratesMap","SamplingRateMap","SamplesCoefficients","BytesInSlot","parseHeader","samplesPerFrame","sampleRate","mpegVersion","mpegLayer","bitRateIndex","sampleRateIndex","paddingBit","channelMode","columnInBitrates","bitRate","columnInSampleRates","sampleCoefficient","bytesInSlot","needChromeFix","AACDemuxer","_BaseAudioDemuxer","container","segmentCodec","MpegAudio","ADTS","getAudioBSID","bsid","mask","bits","AC3Demuxer","samplingRateCode","samplingRateMap","frameSizeCode","frameSizeMap","skipCount","lfeon","channelsMap","bsmod","MP3Demuxer","emsgSchemePattern","MP4Demuxer","txtTrack","captionTrack","_initData$video","_initData$audio","videoSamples","segmentedData","extractID3Track","emsgs","emsgInfo","getEmsgStartTime","emsg","enableEmsgKLVMetadata","misbklv","SampleAesDecrypter","decryptBuffer","encryptedData","decryptAacSample","callback","curUnit","encryptedBuffer","decryptedBuffer","decryptAacSamples","getAvcEncryptedData","decodedData","encryptedDataLen","Int8Array","outputPos","inputPos","getAvcDecryptedUnit","uint8DecryptedData","decryptAvcSample","unitIndex","decryptAvcSamples","curUnits","units","BaseVideoParser","VideoSample","createVideoSample","getLastNalUnit","_VideoSample","lastUnit","pushAccessUnit","nbSamples","lastSample","parseNALu","endOfSegment","naluState","lastState","overflow","unitType","lastUnitStart","lastUnitType","getNALuType","ExpGolomb","bytesAvailable","bitsAvailable","loadWord","workingBytes","availableBytes","skipBits","count","skipBytes","readBits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","AvcVideoParser","_BaseVideoParser","parsePES","pes","spsfound","audFound","_VideoSample2","_VideoSample3","iskey","sliceType","readSliceType","_track$pixelRatio","_track$pixelRatio2","sps","readSPS","pixelRatio","codecarray","codecstring","pps","eg","skipScalingList","reader","lastScale","nextScale","deltaScale","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","numRefFramesInPicOrderCntCycle","scalingListCount","profileIdc","chromaFormatIdc","picOrderCntType","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","aspectRatioIdc","HevcVideoParser","args","initVPS","vps","readVPS","matchSPS","codecString","prop","pushParameterSet","readPPS","parameterSets","ebsp2rbsp","dst","dstIdx","max_sub_layers_minus1","temporal_id_nesting_flag","numTemporalLayers","temporalIdNested","general_profile_space","general_tier_flag","general_profile_idc","general_profile_compatibility_flags_1","general_profile_compatibility_flags_2","general_profile_compatibility_flags_3","general_profile_compatibility_flags_4","general_constraint_indicator_flags_1","general_constraint_indicator_flags_2","general_constraint_indicator_flags_3","general_constraint_indicator_flags_4","general_constraint_indicator_flags_5","general_constraint_indicator_flags_6","general_level_idc","sub_layer_profile_present_flags","sub_layer_level_present_flags","chroma_format_idc","pic_width_in_luma_samples","pic_height_in_luma_samples","conformance_window_flag","pic_left_offset","pic_right_offset","pic_top_offset","pic_bottom_offset","bit_depth_luma_minus8","bit_depth_chroma_minus8","log2_max_pic_order_cnt_lsb_minus4","sub_layer_ordering_info_present_flag","scaling_list_enabled_flag","sps_scaling_list_data_present_flag","sizeId","matrixId","scaling_list_pred_mode_flag","coefNum","pcm_enabled_flag","num_short_term_ref_pic_sets","num_delta_pocs","inter_ref_pic_set_prediction_flag","next_num_delta_pocs","used_by_curr_pic_flag","use_delta_flag","num_negative_pics","num_positive_pics","long_term_ref_pics_present_flag","num_long_term_ref_pics_sps","min_spatial_segmentation_idc","sar_width","sar_height","fps_fixed","fps_den","fps_num","default_display_window_flag","vui_parameters_present_flag","aspect_ratio_info_present_flag","aspect_ratio_idc","sar_width_table","sar_height_table","overscan_info_present_flag","video_signal_type_present_flag","colour_description_present_flag","chroma_loc_info_present_flag","vui_timing_info_present_flag","vui_poc_proportional_to_timing_flag","vui_hrd_parameters_present_flag","nal_hrd_parameters_present_flag","vcl_hrd_parameters_present_flag","sub_pic_hrd_params_present_flag","fixed_pic_rate_within_cvs_flag","low_delay_hrd_flag","cpb_cnt","bitstream_restriction_flag","chroma_scale_w","chroma_scale_h","profile_space_string","profile_compatibility_buf","profile_compatibility_rev","profile_compatibility_flags_string","tier_flag_string","general_profile_compatibility_flags","general_constraint_indicator_flags","bit_depth","frame_rate","fixed","fps","cu_qp_delta_enabled_flag","tiles_enabled_flag","entropy_coding_sync_enabled_flag","parallelismType","sps1","sps2","substr","PACKET_LENGTH","TSDemuxer","typeSupported","sampleAes","pmtParsed","_pmtId","_videoTrack","_txtTrack","aacOverFlow","videoParser","syncOffset","scanwindow","foundPat","packetStart","tsPackets","parsePID","createTrack","pesData","isSampleAes","videoPid","audioPid","id3Pid","audioData","unknownPID","pmtId","tsPacketErrors","stt","atf","readyVideoParser","parseAACPES","parseMPEGPES","parseAC3PES","parseID3PES","parsePAT","parsedPIDs","parsePMT","segmentVideoCodec","segmentAudioCodec","emitParsingError","demuxResult","extractRemainingSamples","removeAllListeners","frameMissingBytes","sampleLength","frameOverflowBytes","recoverable","AC3","id3Sample","sectionLength","tableEnd","programInfoLength","esInfoLength","logEncryptedSamplesFoundInUnencryptedStream","parsePos","descriptorId","descriptorLen","stream","pesLen","pesHdrLen","pesPts","pesDts","pesPrefix","pesFlags","payloadStartOffset","dataLen","AAC","getSilentFrame","MP4","types","avcC","hvcC","btrt","dinf","dref","esds","ftyp","mdat","mdia","mfhd","minf","moov","dac3","mvex","mvhd","pasp","sdtp","stbl","stco","stsc","stsz","stts","vmhd","smhd","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","upperWordDuration","lowerWordDuration","baseMediaDecodeTime","boxes","dependsOn","isDependedOn","hasRedundancy","avcc","hSpacing","vSpacing","audioStsd","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","arraylen","cts","isLeading","paddingValue","isNonSync","degradPrio","movie","ps","NALuLengthSize","temporal_id_nested","num_temporal_layers","iMax","hvcc","MPEG_TS_CLOCK_FREQ_HZ","toTimescaleFromBase","destScale","srcBase","toTimescaleFromScale","srcScale","toMsFromMpegTsClock","toMpegTsClockFromTimescale","timestampToString","MAX_SILENT_FRAME_DURATION","AAC_SAMPLES_PER_FRAME","MPEG_AUDIO_SAMPLE_PER_FRAME","AC3_SAMPLES_PER_FRAME","safariWebkitVersion","createMp4Sample","isKeyframe","MP4Remuxer","ISGenerated","_initPTS","_initDTS","nextVideoTs","nextAudioTs","videoSampleDuration","isAudioContiguous","isVideoContiguous","videoTrackConfig","defaultTimeStamp","resetNextTimestamp","getVideoStartPts","rolloverDetected","firstPts","minPTS","normalizePts","remux","accurateTimeOffset","audioTimeOffset","videoTimeOffset","hasAudio","enoughAudioSamples","enoughVideoSamples","canRemuxAvc","_videoTrack$pixelRati","_config$pixelRatio","_videoTrack$pixelRati2","_config$pixelRatio2","generateIS","firstKeyFrameIndex","firstKeyFramePTS","findKeyframeIndex","forceKeyFrameOnDiscontinuity","tsDelta","audiovideoTimestampDelta","remuxAudio","audioTrackLength","remuxVideo","firstKeyFrame","flushTextTrackMetadataCueSamples","flushTextTrackUserdataCueSamples","computeInitPts","basetime","audioSamples","computePTSDTS","initDTS","metadata","baseDTS","videoInitDTS","videoInitPTS","inputSamples","outputSamples","initTime","mp4SampleDuration","firstDTS","lastDTS","maxPTS","NEGATIVE_INFINITY","sortSamples","nextVideoPts","deltadts","deltapts","inputDuration","averageSampleDuration","foundHole","foundOverlap","firstPTS","isPTSOrderRetained","prevPTS","nextSamplePTS","currentSamplePTS","currentOrder","prevOrder","nbNalu","naluLen","dtsStep","nbUnits","sampleLen","mdatSize","MUX_ERROR","stretchedLastFrame","minDtsDelta","minPtsDelta","maxDtsDelta","maxPtsDelta","VideoSampleUnits","mp4SampleLength","unitData","unitDataLen","ptsDelta","lastFrameDuration","stretchShortVideoTrack","gapTolerance","deltaToFrameEnd","compositionTimeOffset","nextDts","nextPts","nb","getSamplesPerFrame","mp4timeScale","scaleFactor","inputSampleDuration","rawMPEG","alignedWithVideo","timeOffsetMpegTS","maxAudioFramesDrift","fillFrame","audioSample","prevSample","unitLen","reference","PassThroughRemuxer","emitInitSegment","initTracks","lastEndTime","defaultInitPTS","generateInitSegment","_this$initData","eitherTrack","getParsedTrackCodec","_initData","_initData2","trackSampleData","audioSampleTimestamps","videoSampleTimestamps","videoStartTime","toStartEndOrDefault","audioStartTime","videoEndTime","audioEndTime","decodeTime","syncOnAudio","baseOffsetSamples","isInvalidInitPts","videoSampleCount","minDuration","muxConfig","Transmuxer","vendor","asyncResult","demuxer","remuxer","decryptionPromise","transmuxConfig","currentTransmuxState","configure","uintData","discontinuity","trackSwitch","initSegmentChange","defaultInitPts","initSegmentData","getEncryptionType","getDecrypter","emptyResult","resetMuxers","needsProbing","configureTransmuxer","resetInitialTimestamp","transmux","isPromise","currentState","transmuxResults","emptyResults","demuxResultOrPromise","flushRemux","_this$currentTransmux","remuxResult","transmuxSampleAes","transmuxUnencrypted","_demux","mux","_muxConfig$i$demux","Remuxer","Demuxer","encryptionType","Function","TransmuxConfig","TransmuxState","transmuxers","__IN_WORKER__","startWorker","ev","instanceNo","cmd","resetNo","EventEmitter","forwardMessage","forwardWorkerLogs","transmuxResult","emitTransmuxComplete","handleFlushResult","isEmptyResult","transferable","_transmuxResult$remux","addToTransferable","postMessage","logFn","logType","workerStore","hasUMDWorker","__HLS_WORKER_BUNDLE__","injectWorker","workerContext","clientCount","blob","objectURL","worker","Worker","loadWorker","scriptURL","location","removeWorkerFromStore","terminate","transmuxerInstanceCount","TransmuxerInterface","onTransmuxComplete","onFlush","useWorker","onWorkerMessage","_this$workerContext","handleTransmuxComplete","onWorkerError","filename","lineno","enableWorker","m2tsTypeSupported","canCreateWorker","workerPath","terminateWorker","removeWorkerClient","_frag$initSegment","_lastFrag$initSegment","lastFrag","snDiff","partDiff","transmuxerError","TICK_INTERVAL","AudioStreamController","_BaseStreamController","mainAnchor","mainFragLoading","audioOnly","bufferedTrack","switchingTrack","waitingData","mainDetails","flushing","bufferFlushed","cachedTrackLoadedData","resetItem","AUDIO_TRACKS_UPDATED","onAudioTracksUpdated","AUDIO_TRACK_SWITCHING","onAudioTrackSwitching","AUDIO_TRACK_LOADED","onAudioTrackLoaded","BUFFER_RESET","onBufferReset","BUFFER_CREATED","onBufferCreated","onBufferFlushing","BUFFER_FLUSHED","onBufferFlushed","INIT_PTS_FOUND","onInitPtsFound","inFlightFrag","syncWithAnchor","waitingToAppend","_this$mainFragLoading","targetDiscontinuity","trackDetails","syncFrag","doTickIdle","skipSeekToStartPosition","currenTrack","_this$mainFragLoading2","primaryPrefetch","startFragPrefetch","BUFFER_EOS","loadPosition","mainFragAtPos","atBufferSyncLimit","mediaPlaylist","altAudio","flushAudioIfNeeded","_trackLevel$details","trackLevel","_this$levelLastLoaded","AUDIO_TRACK_UPDATED","defaultAudioCodec","_handleTransmuxComplete","_this$waitingData","AUDIO_TRACK_SWITCHED","_ref4","_id3$samples","completeAudioSwitch","mapFragment","_bufferInitSegment","FRAG_PARSING_INIT_SEGMENT","emittedID3","FRAG_PARSING_METADATA","emittedText","FRAG_PARSING_USERDATA","variantAudioCodecs","BUFFER_CODECS","_this$bufferedTrack","BasePlaylistController","canLoad","loadPlaylist","switchParams","playlistUri","current","foundIndex","currentGoal","hlsUrlParameters","loadingPlaylist","playlist","shouldLoadPlaylist","getUrlWithDirectives","playlistLoaded","elapsed","levelOrTrack","ignorePlaylistParsingErrors","_details$fragments$","deliveryDirectives","endSn","atLastPartOfSegment","maxPartIndex","lastAdvanced","cdnAge","segments","parts","getDeliveryDirectives","scheduleLoading","updatedDetails","estimatedTimeUntilUpdate","previousDeliveryDirectives","checkRetry","errorEvent","_ref$retryCount","_errorEvent$context","subtitleOptionsIdentical","trackList1","trackList2","mediaAttributesIdentical","attrs1","attrs2","customAttributes","stableRenditionId","subtitleAttribute","subtitleTrackMatchesTextTrack","subtitleTrack","language","AudioTrackController","_BasePlaylistControll","groupIds","tracksInGroup","currentTrack","selectDefaultTrack","MANIFEST_PARSED","onManifestParsed","LEVEL_LOADING","onLevelLoading","trackInActiveGroup","curDetails","currentGroups","groupIndex","allIndex","findTrackId","audioTracksUpdated","selectedTrackId","setAudioTrack","_this$groupIds","setAudioOption","audioOption","switchIndex","withoutCodecAndChannelsMatch","newId","lastTrack","trackLoaded","AUDIO_TRACK_LOADING","BufferOperationQueue","sourceBufferReference","queues","append","operation","pending","queue","executeNext","appendBlocker","execute","onStart","onComplete","prependBlocker","removeBlockers","_queue$","unblockAudio","op","shiftAndExecuteNext","_this$tracks$type","sb","updating","_this$queues","_this$queues2","_this$tracks","listSbInfo","listOps","_this$tracks2","ending","_this$queues3","VIDEO_CODEC_PROFILE_REPLACE","TRACK_REMOVED_ERROR_NAME","HlsJsTrackRemovedError","BufferController","_objectUrl","operationQueue","bufferCodecEventsTotal","mediaSource","lastMpegAudioChunk","blockedAudioAppend","lastVideoAppendEnd","appendSource","transferData","overrides","appendErrors","sourceBuffers","_onEndStreaming","_this2$mediaSource","_onStartStreaming","_onMediaSourceOpen","_onMediaEmptied","updateDuration","checkPendingTracks","_onMediaSourceClose","_onMediaSourceEnded","mediaSrc","hasSourceTypes","MEDIA_ATTACHING","onMediaAttaching","onBufferAppending","onBufferCodecs","onBufferEos","onFragParsed","FRAG_CHANGED","onFragChanged","isUpdating","queued","isQueued","sourceBufferCount","tuple","removeBuffer","resetQueue","resetAppendErrors","_this$transferData","codecEvents","bufferCreated","ms","assignMediaSource","src","attachTransferred","objectUrl","removeAttribute","MMS","disableRemotePlayback","removeSourceChildren","addSource","_this$transferData2","_ms$constructor","constructor","transferredTracks","mediaSourceOpenCallback","mediaSourceOpenOrEnded","tracksReady","trackName","sbIndex","sourceBufferNameToIndex","sbTuple","trackSourceBuffer","open","removeSourceBuffer","endOfStream","MEDIA_DETACHED","_this8","resetBuffer","_this$mediaSource","removeBufferListeners","_this9","_data$audio","unmuxedToMuxed","muxedToUnmuxed","sbName","_this9$transferData","_trackCodec","parsedTrack","transferredTrack","sbTrack","sbCodec","pendingCodec","trackLevelCodec","listeners","currentCodecFull","currentCodec","trackCodec","nextCodec","appendChangeType","sourceBufferTracks","_this0","changeType","isPending","blockAudio","partOrFrag","_this$fragmentTracker","_this1","pStart","pTime","atGap","_this1$fragmentTracke","eventData","_this10","chunkStats","bufferAppendingStart","fragBuffering","partBuffering","checkTimestampOffset","videoSb","vbuffered","vappending","currentOp","videoAppendEnd","audioStart","fragStart","_this10$tracks$type","updateTimestampOffset","appendExecutor","_this10$media","mediaError","DOMException","QUOTA_EXCEEDED_ERR","INVALID_STATE_ERR","appendErrorCount","appendErrorMaxRetry","getFlushOp","_this11","removeExecutor","_this12","_this13","buffersAppendedTo","onUnblocked","blockBuffers","stepOperationQueue","sourceBufferTypes","trimBuffers","_this14","_this$overrides","_ref5","allowEndOfStream","allTracksEnding","_ref6","_this14$tracks$type","blockUntilOpen","tracksEnded","BUFFERED_TO_END","_this15","_ref7","_ref8","_this16","durationAndRange","getDurationAndRange","updateMediaSource","targetDuration","backBufferLength","liveBackBufferLength","maxBackBufferLength","targetBackBufferPosition","flushBackBuffer","frontBufferFlushThreshold","frontBufferLength","maxFrontBufferLength","targetFrontBufferPosition","flushFrontBuffer","_this17","_ref9","_this17$details","BACK_BUFFER_REACHED","LIVE_BACK_BUFFER_REACHED","_this18","_ref0","numBufferedRanges","_this$overrides2","liveDurationInfinity","setLiveSeekableRange","overrideDuration","mediaDuration","msDuration","_isFiniteNumber6","_isFiniteNumber7","_ref1","_isFiniteNumber8","pendingTrackCount","_this$transferData3","createSourceBuffers","_this19","_ref10","_ref11","BUFFER_INCOMPATIBLE_CODECS_ERROR","getTrackCodec","addSourceBuffer","_this$operationQueue","supplementalCodec","_this20","addBufferListener","onSBUpdateStart","onSBUpdateEnd","onSBUpdateError","removedRanges","_this$mediaSource2","_this$mediaSource3","timestampOffset","_isFiniteNumber9","_isFiniteNumber0","removeStart","removeEnd","remove","appendBuffer","_this21","_ref12","_this22","_ref13","bufferNames","_this23","blockingOperations","audioBlocked","_this24","_this24$tracks$type","fn","l","_this$mediaSource4","_this25","baseTracks","_this26","_ref14","_this$media$querySele","querySelector","_this27","_ref15","_ref16","node","sourceChildren","querySelectorAll","removeChild","document","createElement","appendChild","CapLevelController","autoLevelCapping","restrictedLevels","clientRect","streamController","setStreamController","unregisterListener","stopCapping","FPS_DROP_LEVEL_CAPPING","onFpsDropLevelCapping","droppedLevel","isLevelAllowed","HTMLVideoElement","detectPlayerSize","capLevelToPlayerSize","startCapping","mediaHeight","mediaWidth","maxLevel","getMaxLevel","nextLevelSwitch","capLevelIndex","validLevels","getMaxLevelByMediaSize","getDimensions","boundsRect","getBoundingClientRect","right","left","bottom","top","restrictedLevel","atGreatestBandwidth","curLevel","maxLevelIndex","squareSize","contentScaleFactor","ignoreDevicePixelRatio","devicePixelRatio","maxDevicePixelRatio","CmObjectType","MUXED","INIT","CAPTION","TIMED_TEXT","KEY","OTHER","CmcdObjectType","CmStreamingFormat","HLS","CmcdStreamingFormat","SfItem","DICT","Map","Set","throwError","cause","serializeError","SfToken","BARE_ITEM","BOOLEAN","serializeBoolean","encodeBase64","binary","btoa","BYTES","serializeByteSequence","INTEGER","isInvalidInt","serializeInteger","serializeDate","roundToEven","precision","decimalShift","isEquidistant","EPSILON","flooredValue","DECIMAL","serializeDecimal","roundedValue","includes","STRING","STRING_REGEX","serializeString","symbolToStr","symbol","TOKEN","serializeToken","token","serializeBareItem","isInteger","serializeKey","serializeParams","entries","serializeItem","serializeInnerList","serializeDict","options","whitespace","optionalWhiteSpace","item","output","encodeSfDict","CMCD_OBJECT","CMCD_REQUEST","CMCD_SESSION","CMCD_STATUS","CMCD_HEADER_MAP","br","ab","ot","tb","tpb","tab","lab","pb","bl","tbl","dl","ltc","mtp","nor","nrr","rc","sta","su","ttfbb","ttlb","cmsdd","cmsds","smrt","df","cs","ts","cid","pr","sf","sid","st","msd","bs","bsd","cdn","rtp","bg","pt","ec","CmcdHeaderField","REQUEST","createHeaderMap","headerMap","field","_a","groupCmcdHeaders","cmcd","customHeaderMap","custom","isTokenField","CMCD_EVENT_MODE","urlToRelativePath","origin","toPath","pathname","fromPath","relativePath","hash","toRounded","toUrlSafe","toHundred","norValue","CMCD_FORMATTER_MAP","CMCD_REQUEST_MODE","CMCD_RESPONSE_MODE","CMCD_COMMON_KEYS","CMCD_EVENT_KEYS","CUSTOM_KEY_REGEX","isCmcdCustomKey","isCmcdEventKey","CMCD_REQUEST_KEYS","isCmcdRequestKey","CMCD_RESPONSE_KEYS","isCmcdResponseKey","CMCD_V1_KEYS","isCmcdV1Key","filterMap","_filterMap","prepareCmcdData","reportingMode","keyFilter","needsTimestamp","formatters","formatterOptions","formatter","toCmcdHeaders","shards","shard","appendCmcdHeaders","CMCD_PARAM","encodeCmcd","toCmcdUrl","toCmcdQuery","REGEX","appendCmcdQuery","query","separator","CMCDController","useHeaders","includeKeys","initialized","starved","audioBuffer","videoBuffer","onWaiting","onPlaying","applyPlaylistData","applyFragmentData","getObjectType","getTopBandwidth","getBufferLength","next","getNextFrag","pLoader","createPlaylistLoader","createFragmentLoader","sessionId","contentId","onMediaDetached","_data$tracks$audio","_data$tracks$video","createData","bandwidthEstimate","isVideo","_this$hls$levels$frag","_this$hls$levels$frag2","Ctor","CmcdPlaylistLoader","CmcdFragmentLoader","_proto3","PATHWAY_PENALTY_DURATION_MS","ContentSteeringController","_pathwayPriority","timeToLoad","reloadTimer","started","subtitleTracks","penalizedPathways","pathways","ttl","scheduleRefresh","loadSteeringManifest","levelToRemove","pathwayPriority","errorPathway","getPathwayForGroupId","updatePathwayPriority","filterParsedLevels","pathwayLevels","getLevelsForPathway","selectedIndex","selectedLevel","levelAfterChange","defaultPathway","clonePathways","pathwayClones","audioGroupCloneMap","subtitleGroupCloneMap","pathwayClone","cloneId","baseId","uriReplacement","clonedVariants","baseLevel","clonedAudioGroupId","clonedSubtitleGroupId","performUriReplacement","clonedLevel","cloneRenditionGroups","Loader","protocol","throughput","steeringManifestLoadPolicy","legacyRetryCompatibility","steeringData","VERSION","TTL","reloadUri","loadedSteeringData","steeringManifest","STEERING_MANIFEST_LOADED","getResponseHeader","retryAfter","ttlMs","_this4$hls","groupCloneMap","clonedTracks","clonedTrack","stableId","perOptionKey","host","HOST","PARAMS","perOptionUris","perVariantUri","EMEController","keyFormatPromise","keySystemAccessPromises","_requestLicenseFailureCount","mediaKeySessions","keyIdToKeySessionPromise","setMediaKeysQueue","CDMCleanupPromise","bannedKeyIds","onMediaEncrypted","initDataType","logMessage","keySystems","k","getKeyFormatPromise","keySystemFormat","json","keyIdHex","keySessionContextPromise","keyContext","oldKeyIdHex","generateRequestWithPreferredKeySession","handleError","onWaitingForKey","onDestroying","requestMediaKeySystemAccessFunc","licenseXhrSetup","licenseResponseCallback","DESTROYING","getLicenseServerUrl","_this$config","keySystemConfiguration","licenseUrl","getLicenseServerUrlOrThrow","getServerCertificateUrl","serverCertificateUrl","attemptKeySystemAccess","uniqueCodec","attempt","getMediaKeysPromise","EMEKeyError","KEY_SYSTEM_NO_ACCESS","supportedConfigurations","errMessage","_keySystemAccessPromi","mediaKeySystemConfigs","keySystemAccess","keySystemAccessPromisesNew","mediaKeySystemAccess","certificateRequest","fetchServerCertificate","createMediaKeys","hasMediaKeys","certificate","setMediaKeysServerCertificate","createMediaKeySessionContext","mediaKeysSession","createSession","mediaKeySessionContext","keyStatus","renewKeySession","keySessionContext","getKeyIdString","removeSession","updateKeySession","keySession","getSelectedKeySystemFormats","getKeySystemAccess","getKeySystemSelectionPromise","attemptSetMediaKeys","selectKeySystem","selectKeySystemFormat","keySystemsInConfig","getKeyStatus","status","loadKey","keyInfo","badStatus","getKeyStatusError","keyDetails","keyContextPromise","getKeySystemForKeyPromise","throwIfDestroyed","clonedError","KEY_SYSTEM_NO_CONFIGURED_LICENSE","setMediaKeysPromise","setMediaKeys","_this$config$drmSyste","generateRequestFilter","generateRequest","mappedInitData","keyUri","licenseStatus","onmessage","_onmessage","messageType","renewLicense","eventNames","handleKeyStatus","keyError","onkeystatuseschange","_onkeystatuseschange","keyStatuses","getKeyStatuses","_context$keyStatusTim","keyStatusTimeouts","sessionKeyStatus","keyUsablePromise","keyIdWithStatusChange","certLoader","certLoadPolicy","loaderCallbacks","contex","KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED","cert","setServerCertificate","success","KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED","keyMessage","requestLicense","unpackPlayReadyKeyMessage","xhr","licenseChallenge","xmlString","setRequestHeader","keyMessageXml","_header$querySelector","_header$querySelector2","textContent","challengeElement","challengeText","setupLicenseXHR","keysListItem","licenseXhrSetupResult","finalLicenseChallenge","XMLHttpRequest","onreadystatechange","KEY_SYSTEM_LICENSE_REQUEST_FAILED","statusText","attemptsLeft","licenseXhr","DONE","send","_clear","_media$setMediaKeys","mediaKeysList","keySessionCount","KEY_SYSTEM_DESTROY_MEDIA_KEYS_ERROR","KEY_SYSTEM_DESTROY_CLOSE_SESSION_ERROR","formats","removePromise","KEY_SYSTEM_DESTROY_REMOVE_SESSION_ERROR","close","outputRestricted","FPSController","isVideoPlaybackQualityAvailable","lastTime","lastDroppedFrames","lastDecodedFrames","capLevelOnFPSDrop","getVideoPlaybackQuality","checkFPSInterval","fpsDroppedMonitoringPeriod","checkFPS","decodedFrames","droppedFrames","currentPeriod","currentDropped","currentDecoded","droppedFPS","FPS_DROP","totalDroppedFrames","fpsDroppedMonitoringThreshold","videoPlaybackQuality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","ALIGNED_END_THRESHOLD_SECONDS","TimelineOccupancy","generateAssetIdentifier","assetListIndex","InterstitialEvent","_duration","_timelineStart","appendInPlaceDisabled","appendInPlaceStarted","hasPlayed","cumulativeDuration","resumeOffset","playoutLimit","restrictions","jump","snapOptions","in","assetList","assetListLoader","assetListResponse","resumeAnchor","resetOnResume","setDateRange","_this$assetListLoader","supplementsPrimary","isAssetPastPlayoutLimit","assetIndex","_this$assetList$asset","isNaN","assetOffset","findAssetIndex","asset","eventToString","getSnapToFragmentTime","snappedStart","resumptionOffset","startIsAligned","plannedDuration","Range","Point","getInterstitialUrl","getNextAssetIndex","_interstitial$assetLi","eventAssetToString","HlsAssetPlayer","HlsPlayerClass","userConfig","assetItem","hasDetails","mediaAttached","_currentTime","_bufferedEosTime","checkPlayout","reachedPlayout","PLAYOUT_LIMIT_REACHED","detailsLoaded","SUBTITLE_TRACK_LOADED","removeMediaListeners","bufferedEnd","loadSource","primarySessionId","bufferedInPlaceToEnd","bufferedToEnd","getAssetTime","bufferSnapShot","attachMedia","detachMedia","_this$hls4","_this$hls5","_this$hls6","_this$hls7","resetDetails","deleteDetails","allSubtitleTracks","_this$hls8","_this$hls9","_this$hls0","_this$hls1","_this$hls10","parentIdentifier","_this$hls11","assetPlayout","_this$hls12","diff","ABUTTING_THRESHOLD_SECONDS","InterstitialsSchedule","onScheduleUpdate","eventMap","events","items","durations","primary","playout","integrated","setDurations","resetErrorsInRange","getEvent","hasEvent","findItemIndex","findEventIndex","previousEvent","findItemIndexAtTime","_items$index","timelinePos","timelineType","findJumpRestrictedIndex","_items$i$event","parseInterstitialDateRanges","mediaSelection","enableAppendInPlace","main","previousInterstitialEvents","interstitialEvents","parseDateRanges","ids","removedInterstitials","aPre","aPost","bPre","bPost","startA","startB","removeEvent","updateSchedule","forceUpdate","currentItems","updatedItems","parseSchedule","baseData","schedule","primaryDuration","playoutDuration","resolveOffsets","primaryPosition","integratedTime","preroll","postroll","eventStart","interstitialDuration","timelineDuration","timelineOccupancy","inSameStartTimeSequence","integratedStart","playoutStart","segmentDuration","primarySegment","_schedule","lastScheduledStart","updateAssetDurations","alignedSegmentStart","primaryCanResumeInPlaceAt","timeBetween","resumesInPlaceAt","playlists","startFragment","allowance","alignedWithSegment","assetListLoaded","sumDuration","hasUnknownDuration","hasErrors","_this$items","interstitialAtEnd","assetAtEnd","segmentToString","AssetListLoader","loadAssetList","hlsStartOffset","assetListUrl","assignAssetListError","ASSET_LIST_LOAD_ERROR","interstitialAssetListLoadPolicy","assets","ASSETS","ASSET_LIST_PARSING_ERROR","ASSET_LIST_LOADED","ASSET_LIST_LOAD_TIMEOUT","ASSET_LIST_LOADING","playWithCatch","play","timelineMessage","InterstitialsController","altSelection","detachedData","manager","bufferedPos","waitingItem","endedItem","playingAsset","endedAsset","bufferingAsset","shouldPlay","onPlay","onPause","onSeeking","playbackDisabled","roundingError","checkBuffer","resetCount","playingIndex","scheduleIndex","jumpIndex","setSchedulePosition","playingLastItem","restartAsset","setScheduleToAssetAtTime","_playingItem$event","clearInterstitial","onTimeupdate","previousItems","scheduleItems","removedIds","interstitialsUpdated","updatedPlayingItem","updatedBufferingItem","updateItem","itemsMatch","clearAssetPlayer","player","assetId","INTERSTITIALS_UPDATED","primaryFallback","trimInPlace","onAudioTrackUpdated","SUBTITLE_TRACK_SWITCH","onSubtitleTrackSwitch","SUBTITLE_TRACK_UPDATED","onSubtitleTrackUpdated","EVENT_CUE_ENTER","onInterstitialCueEnter","onAssetListLoaded","onBufferedToEnd","MEDIA_ENDED","_this$getBufferingPla","getBufferingPlayer","_this$getBufferingPla2","emptyPlayerQueue","clearScheduleState","primaryMedia","effectivePlayingItem","detachedMedia","checkStart","retreiveMediaSource","toSegment","getAssetPlayer","transferMediaFromPlayer","playerMedia","attachMediaSourceData","transferMediaTo","_this$detachedData","_attachMediaSourceDat","primaryPlayer","isAssetPlayer","detachedMediaSource","logFromSource","bufferingPlayer","queuedPlayer","transferring","dataToAttach","isAssetAtEndOfSchedule","assetIdAtEnd","cueRemoval","primaryLive","advanceAssetBuffering","nextAssetIndex","bufferedToEvent","_this$schedule$items","nextItem","bufferedToItem","advanceAfterAssetEnded","advanceInPlace","nextIndex","scheduleLength","resumptionTime","itemIndex","_this$schedule","scheduledItem","currentItem","eventItemsMatch","_this$detachedData2","playingAssetListIndex","INTERSTITIAL_ASSET_ENDED","INTERSTITIAL_ENDED","_this$schedule2","updatedScheduleItems","updatedIndex","advanceSchedule","playedLastItem","queuedIndex","assetIndexCandidate","assetsBuffered","setBufferingItem","preloadAssets","INTERSTITIAL_STARTED","destroyed","assetListLength","createAssetPlayer","isAssetBuffered","startAssetPlayer","resumePrimary","attachPrimary","fromItem","_this$detachedData3","_this$schedule3","getPrimaryResumption","INTERSTITIALS_PRIMARY_RESUMED","itemStart","primaryDetails","startLoadingPrimaryAt","_hls$mainForwardBuffe","loadingEnabled","bufferingEnabled","_this$schedule4","currentSelection","interstitialAppendInPlace","previousSelection","subtitles","subtitleOption","setSubtitleOption","MAX_VALUE","_this$schedule$items2","previousItem","_this$schedule5","updatedItem","itemBeforeUpdate","flushStart","_b$event","_this$schedule6","_this$schedule7","updateBufferedPos","bufferIsEmpty","bufferEndIndex","_nextItemToBuffer$eve","bufferingIndex","nextToBufferIndex","nextItemToBuffer","interstitialLiveLookAhead","bufferingLast","timeRemaining","bufferIndex","INTERSTITIALS_BUFFERED_TO_BOUNDARY","preloadPrimary","neverLoaded","playOnce","bufferAssetPlayer","assetUrl","_playingItem$nextEven","liveStartPosition","createAsset","playerIndex","getAssetPlayerQueueIndex","sourceBufferNames","selectedAudio","selectedSubtitle","timePastStart","playerConfig","assetPlayerId","testBandwidth","subtitlePreference","initialDuration","updateAssetPlayerDetails","_this8$schedule","INTERSTITIAL_ASSET_ITEM_ERROR","handleAssetItemError","currentAssetDuration","inQueuPlayer","_this8$schedule$items","endedWithAssetIndex","handleInPlaceStall","INTERSTITIAL_ASSET_PLAYER_CREATED","resetAssetPlayer","INTERSTITIAL_ASSET_STARTED","_this$schedule$items3","_this$detachedData4","appendInPlaceNext","activeTracks","foundAssetIndex","stallingAsset","assetCurrentTime","distanceFromEnd","errorMessage","interstitialAssetError","INTERSTITIAL_ASSET_ERROR","newPlayingItem","_this$schedule8","_this$bufferingItem","interstitialId","previousDuration","DURATION","waitingForItem","bufferingEvent","_this$schedule$items4","stallingItem","effectiveBufferingItem","getMappedTime","controllerField","assetPlayerField","assetPlayer","getBufferedEnd","findMappedTime","primaryTime","_c$schedule","_c$schedule$items","getMappedDuration","_c$primaryDetails","_c$schedule2","seekTo","_item$event","_c$schedule$items2","targetIndex","targetItem","seekInItem","seekToTime","primarySegmentStart","targetIsPrimary","eventTime","getActiveInterstitial","interstitialPlayer","interstitialItem","_c$bufferingAsset","effectivePlayingAsset","assetPlayers","_getActiveInterstitia","_getActiveInterstitia2","scheduleItem","_c$schedule3","_c$schedule4","seekableStart","_c$primaryDetails2","_c$primaryDetails3","_this$schedule9","playbackStarted","_this$bufferingItem2","_media2","queuedForPlayback","_this$detachedData5","_this$mediaSelection","_this$primaryDetails","SubtitleStreamController","currentTrackId","tracksBuffered","SUBTITLE_TRACKS_UPDATED","onSubtitleTracksUpdated","onSubtitleTrackLoaded","SUBTITLE_FRAG_PROCESSED","onSubtitleFragProcessed","fragEnd","endOffsetSubtitles","mediaBufferTimeRanges","mainSlidingStartFragment","foundFrag","fragToLoad","BufferableInstance","timeranges","getRange","sendAddTrackEvent","videoEl","Event","createEvent","initEvent","dispatchEvent","addCueToTrack","mode","cues","getCueById","addCue","textTrackCue","TextTrackCue","err2","clearCurrentCues","enterHandler","removeCue","removeCuesInRange","getCuesInRange","getFirstCueIndexFromTime","mid","cuesFound","firstCueInRange","filterSubtitleTracks","textTrackList","kind","SubtitleTrackController","queuedDefaultTrack","useTextTrackPolling","subtitlePollingInterval","_subtitleDisplay","asyncPollTrackChange","pollTrackChange","onTextTracksChanged","renderTextTracksNatively","textTracks","findTrackForTextTrack","setSubtitleTrack","subtitleTracksUpdated","selectDefault","SUBTITLE_TRACK_LOADING","toggleTrackModes","nextTrack","subtitleDisplay","_track$groupId","specialCea608CharsCodes","getCharForByte","NR_ROWS","NR_COLS","rowsLowCh1","rowsHighCh1","rowsLowCh2","rowsHighCh2","backgroundColors","CaptionsLogger","verboseLevel","severity","numArrayToHexArray","numArray","hexArray","PenState","foreground","underline","italics","background","flash","setStyles","styles","attribs","style","equals","other","copy","newPenState","StyledUnicodeChar","uchar","penState","setChar","setPenState","newChar","isEmpty","Row","chars","currPenState","cueStartTime","_proto4","empty","setCursor","absPos","moveCursor","relPos","newPos","backSpace","insertChar","char","clearFromPos","startPos","clear","clearToEndOfRow","getTextString","setPenStyles","currChar","CaptionScreen","rows","currRow","nrRollUpRows","lastOutputScreen","_proto5","equal","row","setPen","setPAC","pacData","newRow","topRowIndex","prevLineTime","indent","prevPos","color","setBkgData","bkgData","setRollUpRows","nrRows","rollUp","getDisplayText","topRow","asOneRow","displayText","rowNr","rowText","getTextAndFormat","Cea608Channel","channelNumber","outputFilter","chNr","verbose","displayedMemory","nonDisplayedMemory","currRollUpRow","writeScreen","_proto6","getHandler","setHandler","newHandler","setMode","newMode","insertChars","screen","outputDataUpdate","ccRCL","ccBS","ccAOF","ccAON","ccDER","ccRU","ccFON","ccRDC","ccTR","ccRTD","ccEDM","ccCR","ccENM","ccEOC","tmp","ccTO","nrCols","ccMIDROW","secondByte","colorIndex","colors","dispatch","newCue","dispatchCue","cueSplitAtTime","Cea608Parser","out1","out2","currentChannel","cmdHistory","createCmdHistory","_proto7","channel","addData","byteList","cmdFound","charsFound","isControlCode","hasCmdRepeated","setLastCmd","parseCmd","parseMidrow","parsePAC","parseBackgroundAttributes","parseChars","currChNr","cond1","cond2","case1","case2","interpretPAC","pacIndex","channelNr","charCodes","charCode1","oneCode","VTTCue","AllowedDirections","AllowedAlignments","isAllowedValue","allowed","lcValue","findDirectionSetting","findAlignSetting","extend","rest","cobj","baseObj","hasBeenReset","_id","_pauseOnExit","_startTime","_endTime","_text","_region","_vertical","_snapToLines","_line","_lineAlign","_position","_positionAlign","_size","_align","TypeError","setting","SyntaxError","displayState","getCueAsHTML","WebVTT","convertCueToDOMTree","StringDecoder","decodeURIComponent","parseTimeStamp","computeSeconds","f","Settings","values","dflt","defaultKey","alt","n","integer","percent","parseOptions","keyValueDelim","groupDelim","kv","defaults","center","align","parseCue","regionList","oInput","consumeTimeStamp","consumeCueSettings","settings","vals","region","vertical","line","lineAlign","snapToLines","skipWhitespace","fixLineBreaks","VTTParser","oncue","onparsingerror","onflush","collectNextLine","alreadyCollectedLine","hasSubstring","LINEBREAKS","inputString","searchString","cueString2millis","timeString","secs","mins","hours","generateCueId","calculateOffset","vttCCs","currCC","prevCC","new","presentationOffset","_prevCC","parseWebVTT","vttByteArray","callBack","errorCallBack","vttLines","cueTime","timestampMapMPEGTS","timestampMapLOCAL","parsingError","inHeader","cueOffset","webVttMpegTsMapOffset","IMSC1_CODEC","HMSF_REGEX","TIME_UNIT_REGEX","textAlignToLineAlign","parseIMSC1","ttmlList","syncTime","ttml","parseTTML","tt","defaultRateInfo","subFrameRate","frameRateMultiplier","tickRate","rateInfo","styleElements","collectionToDictionary","getElementCollection","regionElements","cueElements","cueElement","cueText","getTextContent","hasAttribute","parseTtmlTime","timestampParsingError","getTtmlStyles","textAlign","fromElement","parentName","childName","elementsWithId","element","_node$childNodes","nodeName","ttsNs","regionStyle","styleAttributes","regionStyleName","getAttributeNS","ns","hasAttributeNS","timeAttributeValue","parseHoursMinutesSecondsFrames","parseTimeUnits","OutputFilter","timelineController","cueRanges","addCues","createCaptionsTrack","TimelineController","Cues","unparsedVttFrags","captionsTracks","nonNativeCaptionsTracks","cea608Parser1","cea608Parser2","lastCc","newVTTCCs","captionsProperties","cueHandler","textTrack1","captionsTextTrack1Label","languageCode","captionsTextTrack1LanguageCode","textTrack2","captionsTextTrack2Label","captionsTextTrack2LanguageCode","textTrack3","captionsTextTrack3Label","captionsTextTrack3LanguageCode","textTrack4","captionsTextTrack4Label","captionsTextTrack4LanguageCode","onFragParsingUserdata","onFragDecrypted","SUBTITLE_TRACKS_CLEARED","onSubtitleTracksCleared","initCea608Parsers","channel1","channel2","channel3","channel4","merged","cueRange","overlap","intersection","CUES_PARSED","getExistingTrack","canReuseVttTextTrack","createNativeTrack","createNonNativeTrack","_captionsProperties$t","existingTrack","createTextTrack","trackProperties","closedCaptions","NON_NATIVE_TEXT_TRACKS_FOUND","addTextTrack","_cleanTracks","hasIMSC1","enableWebVTT","enableIMSC1","listIsIdentical","inUseTracks","inUseTrack","textTrackKind","captionsOrSubtitlesFromCharacteristics","unusedTextTracks","tracksList","enableCEA708Captions","captions","captionsTrack","instreamIdMatch","closedCaptionsForLevel","_data$part$index","decrypted","trackPlaylistMedia","_parseIMSC1","_parseVTTs","_appendCues","maxAvCC","payloadWebVTT","missingInitPTS","_fallbackToIMSC1","fragLevel","ccBytes","ccdatas","extractCea608Data","actualCCBytes","tmpByte","ccbyte1","ccbyte2","ccValid","ccType","manifestTrack","x1","y1","y2","WHITESPACE_CHAR","captionScreen","indenting","Cue","_track$cues","cueA","cueB","fetchSupported","fetch","AbortController","ReadableStream","Request","FetchLoader","fetchSetup","requestTimeout","request","controller","getRequest","abortInternal","_this$callbacks","initParams","getRequestParameters","signal","isArrayBuffer","LENGTH","_config$loadPolicy","maxTimeToFirstByteMs","fetchPromise","_this$callbacks2","ok","FetchError","getContentLength","loadProgressively","responseData","_this$callbacks3","_this$callbacks4","_this$callbacks5","getCacheAge","chunkCache","getReader","pump","read","done","credentials","Headers","getByteRangeLength","byteRangeHeader","contentRange","byteRangeLength","contentLength","AGE_HEADER_LINE_REGEX","XhrLoader","xhrSetup","retryTimeout","onprogress","loadInternal","openAndSendXhr","readystatechange","loadprogress","loadtimeout","useResponseText","responseText","responseURL","_this$context","lengthComputable","getAllResponseHeaders","defaultLoadPolicy","hlsDefaultConfig","startOnSegmentBoundary","detectStallWithCurrentTimeMs","highBufferWatchdogPeriod","nudgeOffset","nudgeMaxRetry","nudgeOnVideoHole","liveSyncMode","liveSyncDurationCount","liveSyncOnStallIncrease","liveMaxLatencyDurationCount","liveSyncDuration","liveMaxLatencyDuration","maxLiveSyncPlaybackRate","startLevel","abrController","bufferController","capLevelController","errorController","fpsController","abrEwmaDefaultEstimateMax","minAutoBitrate","requireKeySystemAccessOnStart","enableDateRangeMetadataCues","enableEmsgMetadataCues","enableID3MetadataCues","manifestLoadPolicy","manifestLoadingTimeOut","manifestLoadingMaxRetry","manifestLoadingRetryDelay","manifestLoadingMaxRetryTimeout","levelLoadingTimeOut","levelLoadingMaxRetry","levelLoadingRetryDelay","levelLoadingMaxRetryTimeout","fragLoadingTimeOut","fragLoadingMaxRetry","fragLoadingRetryDelay","fragLoadingMaxRetryTimeout","timelineConfig","subtitleStreamController","subtitleTrackController","audioStreamController","audioTrackController","cmcdController","contentSteeringController","mergeConfig","defaultConfig","defaultsCopy","deepCpy","deprecatedSettingTypes","deprecatedSettings","policyName","policyNotSet","report","deprecatedSetting","enableStreamingMode","currentLoader","canStreamProgressively","MAX_START_GAP_JUMP","SKIP_BUFFER_HOLE_STEP_SECONDS","SKIP_BUFFER_RANGE_START","GapController","nudgeRetry","stallReported","stalled","moved","seeking","waiting","onMediaPlaying","onMediaWaiting","hasBuffered","poll","seeked","beginSeek","pausedEndedOrHalted","stallResolved","inFlightDependency","getInFlightDependency","inFlightFragments","hasEnoughBuffer","noBufferHole","startJump","isLive","maxStartGapJump","appended","appendedFragAtPosition","_trySkipBufferHole","tnow","tWaiting","stalledDuration","_reportStall","bufferedWithHoles","_tryFixBufferStall","STALL_RESOLVED","_this$buffered$audio","videoSourceBuffered","audioBufferInfo","videoTimes","lastBufferedIndex","holeStart","holeEnd","stalledDurationMs","targetTime","adjacentTraversal","_tryNudgeBuffer","bufferStarved","gapLength","startGap","startFrag","_this$hls$loadLevelOb","moreToLoad","provisioned","inFlight","inFlightData","MIN_CUE_DURATION","getCueClass","createCueWithDataFields","MAX_CUE_ENDTIME","ID3TrackController","dateRangeCuesAppended","removeCues","assetCue","onEventCueEnter","onFragParsingMetadata","onLevelPtsUpdated","_data$overrides","updateDateRangeCues","getID3Track","_this$hls$config","timeDiff","updateId3CueEnds","_this$id3Track","removeOldCues","_this$hls$config2","_id3Track$cues","idsToRemove","_dateRangeCuesAppende","_loop2","appendedDateRangeCues","durationKnown","nextDateRangeWithSameClass","candidateDateRange","otherDateRange","LatencyController","stallCount","_latency","_targetLatencyUpdated","latency","computeLatency","targetLatency","distanceFromTarget","liveMinLatencyDuration","maxLatency","inLiveRange","forwardBufferLength","rate","edgeStalled","changeMediaPlaybackRate","_this$levelDetails","_this$targetLatency","estimateLiveEdge","liveEdge","_this$config2","maxLiveSyncOnStallIncrease","syncPosition","maxLevelUpdateAge","LevelController","_levels","_firstLevel","_maxAutoLevel","_startLevel","currentLevelIndex","manualLevelIndex","steering","onParsedComplete","resetLevels","redundantSet","generatePathwaySet","resolutionFound","videoCodecFound","audioCodecFound","levelParsed","unknownUnsupportedCodecCount","isAudioSupported","isVideoSupported","FRAMERATE","HDCP","PATHWAY","RESOLUTION","VIDEO_RANGE","contentSteeringPrefix","createLevel","pathwayCount","filterAndSortMediaOptions","filteredLevels","_data$stats","statsParsing","MANIFEST_INCOMPATIBLE_CODECS_ERROR","assignTrackIdsByGroup","unsortedLevels","valueA","valueB","firstLevelInPlaylist","_this$hls$userConfig","firstLevelBitrate","startingBwEstimate","altAudioEnabled","edata","_data$deliveryDirecti2","_data$deliveryDirecti","withoutMultiVariant","_this$currentLevel","checkMaxAutoUpdated","newLevel","lastLevelIndex","lastLevel","lastPathwayId","levelSwitchingData","audioGroupIds","textGroupIds","configStartLevel","pathwaysList","filteredPathwayPriority","getSourceBuffer","SourceBuffer","WebKitSourceBuffer","isMSESupported","sourceBuffer","codecsForVideoContainer","codecForAudioContainer","changeTypeSupported","_sourceBuffer$prototy","StreamController","audioCodecSwap","_forceStartLoad","_hasEnoughToStart","fragPlaying","fragLastKbps","couldBacktrack","audioCodecSwitch","onMediaSeeked","onFragLoadEmergencyAborted","onAudioTrackSwitched","checkFragmentChanged","getMainFwdBufferInfo","lastDetails","manualLevel","_this$backtrackFragme","backtrackSn","backtrackFrag","gapStart","_loadBitrateTestFrag","followingBufferedFrag","immediateLevelSwitch","abortCurrentFrag","fetchdelay","fragPlayingCurrent","nextLevelId","bufferedFrag","nextBufferedFrag","maxStart","startPts","aac","heaac","_curLevel$details","newLevelId","synchronizeToLiveEdge","withinSlidingWindow","_bufferInfo$buffered","isLiveSyncInBuffer","_BufferHelper$buffere","_getAudioCodec","fromAltAudio","mediaTrack","alternate","bufferedMainFragment","seekToStartPos","swapAudioCodec","skipTolerance","logMuxedErr","isFirstFragment","isFirstInDiscontinuity","backtrack","audioMetadata","parsedVideoCodec","trackTypes","bufferOutput","fragCurrentLevel","LEVEL_SWITCHED","currentFrag","epocMs","KeyLoader","keyIdToKeyInfo","_loader$context","createKeyLoadError","loadingFrag","_keyInfo","_keyInfo2","getKeyId","keyLoadPromise","loadKeyHTTP","loadKeyEME","mapContextToLevelType","getResponseUrl","PlaylistLoader","loaders","checkAutostartLoad","destroyInternalLoaders","onAudioTrackLoading","onSubtitleTrackLoading","createInternalLoader","PLoader","InternalLoader","getInternalLoader","resetInternalLoader","contextType","lvl","_context$deliveryDire","maxLowLatencyPlaylistRefresh","handleTrackOrLevelPlaylist","handleMasterPlaylist","handleNetworkError","forceStartLoad","parsedResult","handleManifestParsingError","unknownCodec","_M3U8Parser$parseMast","_M3U8Parser$parseMast2","embeddedAudioFound","levelId","singleLevel","handlePlaylistLoaded","MANIFEST_PARSING_ERROR","UNKNOWN","MANIFEST_LOAD_ERROR","Hls","coreComponents","networkControllers","_emitter","_autoLevelCapping","_maxHdcpLevel","latencyController","levelController","subtititleStreamController","gapController","_media","_sessionId","triggeringException","DefaultConfig","_AbrController","_BufferController","_CapLevelController","_ErrorController","_FpsController","_InterstitialsController","playListLoader","_ContentSteeringController","id3TrackController","createController","AudioStreamControllerClass","SubtitleStreamControllerClass","ControllerClass","components","controllerInstance","eventObject","listenerCount","component","ATTACH_MEDIA_ERROR","attachMediaSource","attachingData","loadedSource","loadingSource","_this$audioTrackContr","_this$subtitleTrackCo","getMediaDecodingInfo","startPositionValue","_inFlightData","shouldStartCapping","newCapLevelToPlayerSize","currentProgramDateTime","audioTrackId","subtitleTrackId","_this$bufferControlle","_this$interstitialsCo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;;;;;;;EASM,SAAUA,IAAIA,GAAA;IACnB,IAAI;MACH,OAAOC,MAAM,CAACC,UAAU,EAAE;IAC3B,CAAC,CACD,OAAOC,KAAK,EAAE;MACb,IAAI;QACH,IAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,EAAE,CAAC;EAC3C,MAAA,IAAMP,KAAI,GAAGI,GAAG,CAACI,QAAQ,EAAE;EAC3BH,MAAAA,GAAG,CAACI,eAAe,CAACL,GAAG,CAAC;EACxB,MAAA,OAAOJ,KAAI,CAACU,KAAK,CAACV,KAAI,CAACW,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC7C,CAAC,CACD,OAAOR,KAAK,EAAE;EACb,MAAA,IAAIS,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;QAC7B,IAAMd,MAAI,GAAG,sCAAsC,CAACe,OAAO,CAAC,OAAO,EAAE,UAACC,CAAC,EAAI;EAC1E,QAAA,IAAMC,CAAC,GAAG,CAACL,EAAE,GAAGM,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;UAC5CP,EAAE,GAAGM,IAAI,CAACE,KAAK,CAACR,EAAE,GAAG,EAAE,CAAC;EACxB,QAAA,OAAO,CAACI,CAAC,IAAI,GAAG,GAAGC,CAAC,GAAIA,CAAC,GAAG,GAAG,GAAG,GAAI,EAAET,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAA,CAAC,CAAC;EACF,MAAA,OAAOR,MAAI;EACZ,IAAA;EACD,EAAA;EACD;;;;;;;;;;;;;;;EC5BA,EAAA,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC;QACvB,MAAM,GAAG,GAAG;;EAEhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,SAAS,MAAM,GAAG,CAAA;;EAElB;EACA;EACA;EACA;EACA;EACA;EACA;IACA,IAAI,MAAM,CAAC,MAAM,EAAE;MACjB,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;EACA;MACE,IAAI,CAAC,IAAI,MAAM,EAAE,CAAC,SAAS,EAAE,MAAM,GAAG,KAAK;EAC7C,EAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,SAAS,EAAE,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;EAC/B,IAAE,IAAI,CAAC,EAAE,GAAG,EAAE;EACd,IAAE,IAAI,CAAC,OAAO,GAAG,OAAO;EACxB,IAAE,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,KAAK;EAC3B,EAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA,SAAS,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;EACxD,IAAE,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;EAChC,MAAI,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC;EAC1D,IAAA;;EAEA,IAAE,IAAI,QAAQ,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE,OAAO,IAAI,OAAO,EAAE,IAAI;UAC9C,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK;;MAEzC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,QAAQ,EAAE,OAAO,CAAC,YAAY,EAAE;WAC7E,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;EACxE,SAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC;;EAE9D,IAAE,OAAO,OAAO;EAChB,EAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,SAAS,UAAU,CAAC,OAAO,EAAE,GAAG,EAAE;EAClC,IAAE,IAAI,EAAE,OAAO,CAAC,YAAY,KAAK,CAAC,EAAE,OAAO,CAAC,OAAO,GAAG,IAAI,MAAM,EAAE;EAClE,SAAO,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;EAClC,EAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,SAAS,YAAY,GAAG;EACxB,IAAE,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,EAAE;EAC7B,IAAE,IAAI,CAAC,YAAY,GAAG,CAAC;EACvB,EAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,YAAY,CAAC,SAAS,CAAC,UAAU,GAAG,SAAS,UAAU,GAAG;MACxD,IAAI,KAAK,GAAG;UACR;EACN,QAAM,IAAI;;MAER,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,EAAE,OAAO,KAAK;;MAEzC,KAAK,IAAI,KAAK,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG;QACpC,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;EACzE,IAAA;;EAEA,IAAE,IAAI,MAAM,CAAC,qBAAqB,EAAE;QAChC,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;EAC7D,IAAA;;EAEA,IAAE,OAAO,KAAK;IACd,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;IACA,YAAY,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,SAAS,CAAC,KAAK,EAAE;MAC3D,IAAI,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG;EACtC,QAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;;EAElC,IAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE;MACxB,IAAI,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;;MAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAClE,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;EAC1B,IAAA;;EAEA,IAAE,OAAO,EAAE;IACX,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;IACA,YAAY,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa,CAAC,KAAK,EAAE;MACnE,IAAI,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG;EACtC,QAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;;EAEnC,IAAE,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC;EAC1B,IAAE,IAAI,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC;MAC1B,OAAO,SAAS,CAAC,MAAM;IACzB,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;MACrE,IAAI,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK;;MAEzC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,KAAK;;EAEtC,IAAE,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG;UAC5B,GAAG,GAAG,SAAS,CAAC;UAChB;EACN,QAAM,CAAC;;EAEP,IAAE,IAAI,SAAS,CAAC,EAAE,EAAE;EACpB,MAAI,IAAI,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC;;EAEjF,MAAI,QAAQ,GAAG;EACf,QAAM,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,IAAI;EAC/D,QAAM,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,IAAI;EACnE,QAAM,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI;UACjE,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI;UACrE,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI;UACzE,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI;EACnF;;QAEI,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;UAClD,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;EAChC,MAAA;;QAEI,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC;EAC/C,IAAA,CAAG,MAAM;EACT,MAAI,IAAI,MAAM,GAAG,SAAS,CAAC;EAC3B,UAAQ,CAAC;;QAEL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;UAC3B,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC;;EAEzF,QAAM,QAAQ,GAAG;YACT,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACpD,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACxD,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAC5D,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAChE;cACE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC7D,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;EACtC,YAAA;;EAEA,YAAU,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC;EAC3D;EACA,MAAA;EACA,IAAA;;EAEA,IAAE,OAAO,IAAI;IACb,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,YAAY,CAAC,SAAS,CAAC,EAAE,GAAG,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;EAC5D,IAAE,OAAO,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC;IACrD,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,YAAY,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE;EAChE,IAAE,OAAO,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;IACpD,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAA,YAAY,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,cAAc,CAAC,KAAK,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;MACxF,IAAI,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK;;MAEzC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI;MACnC,IAAI,CAAC,EAAE,EAAE;EACX,MAAI,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;EACzB,MAAI,OAAO,IAAI;EACf,IAAA;;MAEE,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;;EAEnC,IAAE,IAAI,SAAS,CAAC,EAAE,EAAE;QAChB;EACJ,QAAM,SAAS,CAAC,EAAE,KAAK,EAAE;EACzB,SAAO,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC;EAC/B,SAAO,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,KAAK,OAAO;UAC1C;EACN,QAAM,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;EAC3B,MAAA;EACA,IAAA,CAAG,MAAM;QACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;UACvE;EACN,UAAQ,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE;aACrB,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aAC3B,OAAO,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,OAAO;YAC5C;YACA,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC,QAAA;EACA,MAAA;;EAEA;EACA;EACA;QACI,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM;EACnF,WAAS,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9B,IAAA;;EAEA,IAAE,OAAO,IAAI;IACb,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;IACA,YAAY,CAAC,SAAS,CAAC,kBAAkB,GAAG,SAAS,kBAAkB,CAAC,KAAK,EAAE;EAC/E,IAAE,IAAI,GAAG;;MAEP,IAAI,KAAK,EAAE;QACT,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,KAAK;EACzC,MAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;EAChD,IAAA,CAAG,MAAM;EACT,MAAI,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,EAAE;EAC/B,MAAI,IAAI,CAAC,YAAY,GAAG,CAAC;EACzB,IAAA;;EAEA,IAAE,OAAO,IAAI;IACb,CAAC;;EAED;EACA;EACA;IACA,YAAY,CAAC,SAAS,CAAC,GAAG,GAAG,YAAY,CAAC,SAAS,CAAC,cAAc;IAClE,YAAY,CAAC,SAAS,CAAC,WAAW,GAAG,YAAY,CAAC,SAAS,CAAC,EAAE;;EAE9D;EACA;EACA;IACA,YAAY,CAAC,QAAQ,GAAG,MAAM;;EAE9B;EACA;EACA;IACA,YAAY,CAAC,YAAY,GAAG,YAAY;;EAExC;EACA;EACA;IACmC;EACnC,IAAE,iBAAiB,YAAY;EAC/B,EAAA,CAAA;;;;;;;;;;;;;;;;EC/UA;;IAEA,CAAC,UAAU,IAAI,EAAE;EACjB,IAAE,IAAI,SAAS;EACf,MAAI,gIAAgI;MAClI,IAAI,mBAAmB,GAAG,0BAA0B;MACpD,IAAI,eAAe,GAAG,mBAAmB;MACzC,IAAI,mBAAmB,GAAG,uCAAuC;;MAEjE,IAAI,UAAU,GAAG;EACnB;EACA;EACA;EACA;EACA;EACA;QACI,gBAAgB,EAAE,UAAU,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE;EAC5D,QAAM,IAAI,GAAG,IAAI,IAAI,EAAE;EACvB;EACA,QAAM,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE;EAC9B,QAAM,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE;UAChC,IAAI,CAAC,WAAW,EAAE;EACxB;EACA;EACA;EACA,UAAQ,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;EACnC,YAAU,OAAO,OAAO;EACxB,UAAA;YACQ,IAAI,qBAAqB,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;YACxD,IAAI,CAAC,qBAAqB,EAAE;EACpC,YAAU,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;EAC5D,UAAA;EACA,UAAQ,qBAAqB,CAAC,IAAI,GAAG,UAAU,CAAC,aAAa;EAC7D,YAAU,qBAAqB,CAAC;aACvB;EACT,UAAQ,OAAO,UAAU,CAAC,iBAAiB,CAAC,qBAAqB,CAAC;EAClE,QAAA;UACM,IAAI,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC;UACpD,IAAI,CAAC,aAAa,EAAE;EAC1B,UAAQ,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC;EAC9D,QAAA;EACA,QAAM,IAAI,aAAa,CAAC,MAAM,EAAE;EAChC;EACA;EACA,UAAQ,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;EACnC,YAAU,OAAO,WAAW;EAC5B,UAAA;YACQ,aAAa,CAAC,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC;EACzE,UAAQ,OAAO,UAAU,CAAC,iBAAiB,CAAC,aAAa,CAAC;EAC1D,QAAA;UACM,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC;UAC5C,IAAI,CAAC,SAAS,EAAE;EACtB,UAAQ,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;EAC1D,QAAA;EACA,QAAM,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;EAC5E;EACA;YACQ,IAAI,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;EAChE,UAAQ,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC;EACvC,UAAQ,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;EACrC,QAAA;UACM,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;EAC/C,UAAQ,SAAS,CAAC,IAAI,GAAG,GAAG;EAC5B,QAAA;UACM,IAAI,UAAU,GAAG;EACvB;EACA;EACA,UAAQ,MAAM,EAAE,SAAS,CAAC,MAAM;EAChC,UAAQ,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,IAAI,EAAE,IAAI;EAClB,UAAQ,MAAM,EAAE,aAAa,CAAC,MAAM;EACpC,UAAQ,KAAK,EAAE,aAAa,CAAC,KAAK;EAClC,UAAQ,QAAQ,EAAE,aAAa,CAAC,QAAQ;WACjC;EACP,QAAM,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;EACjC;EACA;EACA;EACA,UAAQ,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM;EAC5C;EACA;YACQ,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;EAC3C,YAAU,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE;EACnC;EACA;EACA,cAAY,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI;EAC5C;EACA;EACA;EACA,cAAY,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;EACvC,gBAAc,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM;EAClD;EACA;EACA;EACA,gBAAc,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;EACxC,kBAAgB,UAAU,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK;EAClD,gBAAA;EACA,cAAA;EACA,YAAA,CAAW,MAAM;EACjB;EACA;EACA;EACA;EACA,cAAY,IAAI,WAAW,GAAG,SAAS,CAAC,IAAI;EAC5C,cAAY,IAAI,OAAO;EACvB,gBAAc,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;kBAC1D,aAAa,CAAC,IAAI;gBACpB,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC;EAC/D,YAAA;EACA,UAAA;EACA,QAAA;EACA,QAAM,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,EAAE;EACpC,UAAQ,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;EAC/B,cAAY,UAAU,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI;gBAC3C,aAAa,CAAC,IAAI;EAC9B,QAAA;EACA,QAAM,OAAO,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC;QACrD,CAAK;EACL,MAAI,QAAQ,EAAE,UAAU,GAAG,EAAE;UACvB,IAAI,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;UAC/B,IAAI,CAAC,KAAK,EAAE;EAClB,UAAQ,OAAO,IAAI;EACnB,QAAA;EACA,QAAM,OAAO;EACb,UAAQ,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAC9B,UAAQ,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAC9B,UAAQ,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAC5B,UAAQ,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAC9B,UAAQ,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;EAC7B,UAAQ,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;WACzB;QACP,CAAK;EACL,MAAI,aAAa,EAAE,UAAU,IAAI,EAAE;EACnC;EACA;EACA;EACA;EACA;EACA;UACM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;EAC3E;EACA;EACA;EACA;EACA;EACA;EACA;EACA;UACM;EACN,UAAQ,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAE;YAC/D,CAAA;EACR,QAAM,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9C,CAAK;EACL,MAAI,iBAAiB,EAAE,UAAU,KAAK,EAAE;UAClC;YACE,KAAK,CAAC,MAAM;YACZ,KAAK,CAAC,MAAM;YACZ,KAAK,CAAC,IAAI;YACV,KAAK,CAAC,MAAM;YACZ,KAAK,CAAC,KAAK;EACnB,UAAQ,KAAK,CAAC;EACd;QACA,CAAK;OACF;;EAEH,IACI,iBAAiB,UAAU;IAO/B,CAAC,EAAM,CAAC,CAAA;;;;;;;EC7KR;EACO,IAAMqB,cAAc,GACzBC,MAAM,CAACC,QAAQ,IACf,UAAUC,KAAK,EAAE;IACf,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAID,QAAQ,CAACC,KAAK,CAAC;EACrD,CAAC;;EAEH;EACO,IAAMC,aAAa,GACxBH,MAAM,CAACG,aAAa,IACpB,UAAUD,KAAK,EAAE;EACf,EAAA,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIN,IAAI,CAACQ,GAAG,CAACF,KAAK,CAAC,IAAIG,gBAAgB;EACzE,CAAC;EAEI,IAAMA,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB,IAAI,gBAAgB;;ECd3E,IAAYC,UAAU,0BAAVA,UAAU,EAAA;EACpB;IADUA,UAAU,CAAA,eAAA,CAAA,GAAA,cAAA;EAGpB;IAHUA,UAAU,CAAA,aAAA,CAAA,GAAA,YAAA;EAKpB;IALUA,UAAU,CAAA,kBAAA,CAAA,GAAA,gBAAA;EAOpB;IAPUA,UAAU,CAAA,WAAA,CAAA,GAAA,UAAA;EASpB;IATUA,UAAU,CAAA,aAAA,CAAA,GAAA,YAAA;EAAA,EAAA,OAAVA,UAAU;EAAA,CAAA,CAAA,EAAA,CAAA;EAatB,IAAYC,YAAY,0BAAZA,YAAY,EAAA;IAAZA,YAAY,CAAA,oBAAA,CAAA,GAAA,iBAAA;IAAZA,YAAY,CAAA,sBAAA,CAAA,GAAA,mBAAA;IAAZA,YAAY,CAAA,uBAAA,CAAA,GAAA,oBAAA;IAAZA,YAAY,CAAA,kCAAA,CAAA,GAAA,8BAAA;IAAZA,YAAY,CAAA,mCAAA,CAAA,GAAA,+BAAA;IAAZA,YAAY,CAAA,8CAAA,CAAA,GAAA,yCAAA;IAAZA,YAAY,CAAA,6CAAA,CAAA,GAAA,wCAAA;IAAZA,YAAY,CAAA,kCAAA,CAAA,GAAA,8BAAA;IAAZA,YAAY,CAAA,qCAAA,CAAA,GAAA,iCAAA;IAAZA,YAAY,CAAA,kCAAA,CAAA,GAAA,8BAAA;IAAZA,YAAY,CAAA,qCAAA,CAAA,GAAA,gCAAA;IAAZA,YAAY,CAAA,wCAAA,CAAA,GAAA,mCAAA;IAAZA,YAAY,CAAA,yCAAA,CAAA,GAAA,oCAAA;EActB;IAdUA,YAAY,CAAA,qBAAA,CAAA,GAAA,mBAAA;EAgBtB;IAhBUA,YAAY,CAAA,uBAAA,CAAA,GAAA,qBAAA;EAkBtB;IAlBUA,YAAY,CAAA,wBAAA,CAAA,GAAA,sBAAA;EAoBtB;IApBUA,YAAY,CAAA,oCAAA,CAAA,GAAA,iCAAA;EAsBtB;IAtBUA,YAAY,CAAA,mBAAA,CAAA,GAAA,iBAAA;EAwBtB;IAxBUA,YAAY,CAAA,kBAAA,CAAA,GAAA,gBAAA;EA0BtB;IA1BUA,YAAY,CAAA,oBAAA,CAAA,GAAA,kBAAA;EA4BtB;IA5BUA,YAAY,CAAA,qBAAA,CAAA,GAAA,mBAAA;EA8BtB;IA9BUA,YAAY,CAAA,oBAAA,CAAA,GAAA,kBAAA;EAgCtB;IAhCUA,YAAY,CAAA,wBAAA,CAAA,GAAA,qBAAA;EAkCtB;IAlCUA,YAAY,CAAA,0BAAA,CAAA,GAAA,uBAAA;EAoCtB;IApCUA,YAAY,CAAA,qBAAA,CAAA,GAAA,wBAAA;EAsCtB;IAtCUA,YAAY,CAAA,6BAAA,CAAA,GAAA,0BAAA;EAwCtB;IAxCUA,YAAY,CAAA,iBAAA,CAAA,GAAA,eAAA;EA0CtB;IA1CUA,YAAY,CAAA,mBAAA,CAAA,GAAA,iBAAA;EA4CtB;IA5CUA,YAAY,CAAA,oBAAA,CAAA,GAAA,kBAAA;EA8CtB;EACA;IA/CUA,YAAY,CAAA,oBAAA,CAAA,GAAA,kBAAA;EAiDtB;IAjDUA,YAAY,CAAA,UAAA,CAAA,GAAA,SAAA;EAmDtB;IAnDUA,YAAY,CAAA,mBAAA,CAAA,GAAA,iBAAA;EAqDtB;IArDUA,YAAY,CAAA,gBAAA,CAAA,GAAA,cAAA;EAuDtB;IAvDUA,YAAY,CAAA,kBAAA,CAAA,GAAA,gBAAA;EAyDtB;IAzDUA,YAAY,CAAA,wBAAA,CAAA,GAAA,qBAAA;EA2DtB;IA3DUA,YAAY,CAAA,kCAAA,CAAA,GAAA,+BAAA;EA6DtB;IA7DUA,YAAY,CAAA,qBAAA,CAAA,GAAA,mBAAA;EA+DtB;IA/DUA,YAAY,CAAA,wBAAA,CAAA,GAAA,sBAAA;EAiEtB;IAjEUA,YAAY,CAAA,sBAAA,CAAA,GAAA,oBAAA;EAmEtB;IAnEUA,YAAY,CAAA,mBAAA,CAAA,GAAA,iBAAA;EAqEtB;IArEUA,YAAY,CAAA,uBAAA,CAAA,GAAA,oBAAA;EAuEtB;IAvEUA,YAAY,CAAA,uBAAA,CAAA,GAAA,oBAAA;EAyEtB;IAzEUA,YAAY,CAAA,uBAAA,CAAA,GAAA,oBAAA;EA2EtB;IA3EUA,YAAY,CAAA,yBAAA,CAAA,GAAA,sBAAA;EA6EtB;IA7EUA,YAAY,CAAA,0BAAA,CAAA,GAAA,uBAAA;EA+EtB;IA/EUA,YAAY,CAAA,+BAAA,CAAA,GAAA,4BAAA;EAiFtB;IAjFUA,YAAY,CAAA,oBAAA,CAAA,GAAA,mBAAA;EAmFtB;IAnFUA,YAAY,CAAA,kBAAA,CAAA,GAAA,SAAA;EAqFtB;IArFUA,YAAY,CAAA,oBAAA,CAAA,GAAA,kBAAA;EAuFtB;IAvFUA,YAAY,CAAA,SAAA,CAAA,GAAA,SAAA;EAAA,EAAA,OAAZA,YAAY;EAAA,CAAA,CAAA,EAAA,CAAA;;ECwDxB,IAAYC,MAAM,0BAANA,MAAM,EAAA;EAChB;IADUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAGhB;IAHUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAKhB;IALUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAOhB;IAPUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAShB;IATUA,MAAM,CAAA,aAAA,CAAA,GAAA,eAAA;EAWhB;IAXUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAahB;IAbUA,MAAM,CAAA,cAAA,CAAA,GAAA,gBAAA;EAehB;IAfUA,MAAM,CAAA,eAAA,CAAA,GAAA,iBAAA;EAiBhB;IAjBUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAmBhB;IAnBUA,MAAM,CAAA,kBAAA,CAAA,GAAA,oBAAA;EAqBhB;IArBUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAuBhB;IAvBUA,MAAM,CAAA,YAAA,CAAA,GAAA,cAAA;EAyBhB;IAzBUA,MAAM,CAAA,iBAAA,CAAA,GAAA,kBAAA;EA2BhB;IA3BUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EA6BhB;IA7BUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EA+BhB;IA/BUA,MAAM,CAAA,kBAAA,CAAA,GAAA,oBAAA;EAiChB;IAjCUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAmChB;IAnCUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAqChB;IArCUA,MAAM,CAAA,iBAAA,CAAA,GAAA,mBAAA;EAuChB;IAvCUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAyChB;IAzCUA,MAAM,CAAA,eAAA,CAAA,GAAA,iBAAA;EA2ChB;IA3CUA,MAAM,CAAA,cAAA,CAAA,GAAA,gBAAA;EA6ChB;IA7CUA,MAAM,CAAA,eAAA,CAAA,GAAA,iBAAA;EA+ChB;IA/CUA,MAAM,CAAA,mBAAA,CAAA,GAAA,oBAAA;EAiDhB;IAjDUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EAmDhB;IAnDUA,MAAM,CAAA,sBAAA,CAAA,GAAA,uBAAA;EAqDhB;IArDUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAuDhB;IAvDUA,MAAM,CAAA,sBAAA,CAAA,GAAA,uBAAA;EAyDhB;IAzDUA,MAAM,CAAA,qBAAA,CAAA,GAAA,sBAAA;EA2DhB;IA3DUA,MAAM,CAAA,oBAAA,CAAA,GAAA,qBAAA;EA6DhB;IA7DUA,MAAM,CAAA,qBAAA,CAAA,GAAA,sBAAA;EA+DhB;IA/DUA,MAAM,CAAA,yBAAA,CAAA,GAAA,0BAAA;EAiEhB;IAjEUA,MAAM,CAAA,yBAAA,CAAA,GAAA,0BAAA;EAmEhB;IAnEUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAqEhB;IArEUA,MAAM,CAAA,wBAAA,CAAA,GAAA,yBAAA;EAuEhB;IAvEUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAyEhB;IAzEUA,MAAM,CAAA,wBAAA,CAAA,GAAA,yBAAA;EA2EhB;IA3EUA,MAAM,CAAA,yBAAA,CAAA,GAAA,0BAAA;EA6EhB;IA7EUA,MAAM,CAAA,aAAA,CAAA,GAAA,eAAA;EA+EhB;IA/EUA,MAAM,CAAA,8BAAA,CAAA,GAAA,6BAAA;EAiFhB;IAjFUA,MAAM,CAAA,gBAAA,CAAA,GAAA,iBAAA;EAmFhB;IAnFUA,MAAM,CAAA,cAAA,CAAA,GAAA,gBAAA;EAqFhB;EACA;EACA;IAvFUA,MAAM,CAAA,6BAAA,CAAA,GAAA,6BAAA;EAyFhB;IAzFUA,MAAM,CAAA,aAAA,CAAA,GAAA,eAAA;EA2FhB;IA3FUA,MAAM,CAAA,gBAAA,CAAA,GAAA,kBAAA;EA6FhB;IA7FUA,MAAM,CAAA,2BAAA,CAAA,GAAA,2BAAA;EA+FhB;IA/FUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAiGhB;IAjGUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAmGhB;EACA;EACA;IArGUA,MAAM,CAAA,aAAA,CAAA,GAAA,eAAA;EAuGhB;IAvGUA,MAAM,CAAA,eAAA,CAAA,GAAA,iBAAA;EAyGhB;IAzGUA,MAAM,CAAA,cAAA,CAAA,GAAA,gBAAA;EA2GhB;IA3GUA,MAAM,CAAA,UAAA,CAAA,GAAA,YAAA;EA6GhB;IA7GUA,MAAM,CAAA,wBAAA,CAAA,GAAA,wBAAA;EA+GhB;IA/GUA,MAAM,CAAA,wBAAA,CAAA,GAAA,wBAAA;EAiHhB;IAjHUA,MAAM,CAAA,OAAA,CAAA,GAAA,UAAA;EAmHhB;IAnHUA,MAAM,CAAA,YAAA,CAAA,GAAA,eAAA;EAqHhB;IArHUA,MAAM,CAAA,aAAA,CAAA,GAAA,eAAA;EAuHhB;IAvHUA,MAAM,CAAA,YAAA,CAAA,GAAA,cAAA;EAyHhB;IAzHUA,MAAM,CAAA,0BAAA,CAAA,GAAA,0BAAA;EA2HhB;IA3HUA,MAAM,CAAA,qBAAA,CAAA,GAAA,sBAAA;EA6HhB;IA7HUA,MAAM,CAAA,0BAAA,CAAA,GAAA,2BAAA;EA+HhB;IA/HUA,MAAM,CAAA,oBAAA,CAAA,GAAA,qBAAA;EAiIhB;IAjIUA,MAAM,CAAA,mBAAA,CAAA,GAAA,oBAAA;EAmIhB;IAnIUA,MAAM,CAAA,uBAAA,CAAA,GAAA,yBAAA;EAqIhB;IArIUA,MAAM,CAAA,oCAAA,CAAA,GAAA,oCAAA;EAuIhB;IAvIUA,MAAM,CAAA,mCAAA,CAAA,GAAA,mCAAA;EAyIhB;IAzIUA,MAAM,CAAA,sBAAA,CAAA,GAAA,wBAAA;EA2IhB;IA3IUA,MAAM,CAAA,4BAAA,CAAA,GAAA,6BAAA;EA6IhB;IA7IUA,MAAM,CAAA,0BAAA,CAAA,GAAA,2BAAA;EA+IhB;IA/IUA,MAAM,CAAA,0BAAA,CAAA,GAAA,2BAAA;EAiJhB;IAjJUA,MAAM,CAAA,oBAAA,CAAA,GAAA,sBAAA;EAmJhB;IAnJUA,MAAM,CAAA,+BAAA,CAAA,GAAA,gCAAA;EAqJhB;IArJUA,MAAM,CAAA,uBAAA,CAAA,GAAA,wBAAA;EAuJhB;IAvJUA,MAAM,CAAA,iBAAA,CAAA,GAAA,kBAAA;EAAA,EAAA,OAANA,MAAM;EAAA,CAAA,CAAA,EAAA,CAAA;;EA2JlB;EACA;EACA;;EC3DA,IAAkBC,mBAAmB,GAAA;IAAAC,QAAA,EAAA,UAAA;IAAAC,KAAA,EAAA,OAAA;IAAAC,WAAA,EAAA,YAAA;IAAAC,cAAA,EAAA;EAAA,CAAA;EAOrC,IAAkBC,iBAAiB,GAAA;IAAAC,IAAA,EAAA,MAAA;IAAAC,KAAA,EAAA,OAAA;IAAAC,QAAA,EAAA;EAAA,CAAA;;EC9KnC;EACA;EACA;EACA;EACA;EAJA,IAMMC,IAAI,gBAAA,YAAA;EAMR;EACA,EAAA,SAAAA,KAAYC,QAAgB,EAAEC,QAAgB,EAAMC,MAAc,EAAM;EAAA,IAAA,IAA1CD,QAAgB,KAAA,MAAA,EAAA;EAAhBA,MAAAA,QAAgB,GAAG,CAAC;EAAA,IAAA;EAAA,IAAA,IAAEC,MAAc,KAAA,MAAA,EAAA;EAAdA,MAAAA,MAAc,GAAG,CAAC;EAAA,IAAA;EAAA,IAAA,IAAA,CANtDF,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CAChBG,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNC,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACTC,YAAY,GAAA,MAAA;MAIlB,IAAI,CAACL,QAAQ,GAAGA,QAAQ;EACxB;EACA,IAAA,IAAI,CAACG,MAAM,GAAGH,QAAQ,GAAGvB,IAAI,CAAC6B,GAAG,CAAC7B,IAAI,CAAC8B,GAAG,CAAC,GAAG,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;MAC/D,IAAI,CAACI,SAAS,GAAGH,QAAQ;MACzB,IAAI,CAACI,YAAY,GAAGH,MAAM;EAC5B,EAAA;EAAC,EAAA,IAAAM,MAAA,GAAAT,IAAA,CAAAU,SAAA;IAAAD,MAAA,CAEDE,MAAM,GAAN,SAAAA,MAAMA,CAACR,MAAc,EAAEnB,KAAa,EAAE;MACpC,IAAM4B,QAAQ,GAAGlC,IAAI,CAACmC,GAAG,CAAC,IAAI,CAACT,MAAM,EAAED,MAAM,CAAC;EAC9C,IAAA,IAAI,CAACE,SAAS,GAAGrB,KAAK,IAAI,CAAC,GAAG4B,QAAQ,CAAC,GAAGA,QAAQ,GAAG,IAAI,CAACP,SAAS;MACnE,IAAI,CAACC,YAAY,IAAIH,MAAM;IAC7B,CAAC;EAAAM,EAAAA,MAAA,CAEDK,cAAc,GAAd,SAAAA,cAAcA,GAAW;MACvB,OAAO,IAAI,CAACR,YAAY;IAC1B,CAAC;EAAAG,EAAAA,MAAA,CAEDM,WAAW,GAAX,SAAAA,WAAWA,GAAW;MACpB,IAAI,IAAI,CAACX,MAAM,EAAE;EACf,MAAA,IAAMY,UAAU,GAAG,CAAC,GAAGtC,IAAI,CAACmC,GAAG,CAAC,IAAI,CAACT,MAAM,EAAE,IAAI,CAACE,YAAY,CAAC;EAC/D,MAAA,IAAIU,UAAU,EAAE;EACd,QAAA,OAAO,IAAI,CAACX,SAAS,GAAGW,UAAU;EACpC,MAAA;EACF,IAAA;MACA,OAAO,IAAI,CAACX,SAAS;IACvB,CAAC;EAAA,EAAA,OAAAL,IAAA;EAAA,CAAA,EAAA;;EC/B8B,IAE3BiB,sBAAsB,gBAAA,YAAA;IAS1B,SAAAA,sBAAAA,CACEC,IAAY,EACZC,IAAY,EACZC,eAAuB,EACvBC,WAAmB,EACnB;EAAA,IAAA,IADAA,WAAmB,KAAA,MAAA,EAAA;EAAnBA,MAAAA,WAAmB,GAAG,GAAG;EAAA,IAAA;EAAA,IAAA,IAAA,CAZnBC,gBAAgB,GAAA,MAAA;EAAA,IAAA,IAAA,CAChBC,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVC,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACLC,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACLC,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACZC,KAAK,GAAA,MAAA;MAQX,IAAI,CAACN,gBAAgB,GAAGF,eAAe;MACvC,IAAI,CAACG,UAAU,GAAG,KAAK;MACvB,IAAI,CAACC,WAAW,GAAG,EAAE;EACrB,IAAA,IAAI,CAACC,KAAK,GAAG,IAAIzB,IAAI,CAACkB,IAAI,CAAC;EAC3B,IAAA,IAAI,CAACQ,KAAK,GAAG,IAAI1B,IAAI,CAACmB,IAAI,CAAC;MAC3B,IAAI,CAACQ,YAAY,GAAGN,WAAW;EAC/B,IAAA,IAAI,CAACO,KAAK,GAAG,IAAI5B,IAAI,CAACkB,IAAI,CAAC;EAC7B,EAAA;EAAC,EAAA,IAAAT,MAAA,GAAAQ,sBAAA,CAAAP,SAAA;IAAAD,MAAA,CAEDoB,MAAM,GAAN,SAAAA,MAAMA,CAACX,IAAY,EAAEC,IAAY,EAAE;EACjC,IAAA,IAAQM,KAAK,GAAmB,IAAI,CAA5BA,KAAK;QAAEC,KAAK,GAAY,IAAI,CAArBA,KAAK;QAAEE,KAAK,GAAK,IAAI,CAAdA,KAAK;EAC3B,IAAA,IAAIH,KAAK,CAACxB,QAAQ,KAAKiB,IAAI,EAAE;EAC3B,MAAA,IAAI,CAACO,KAAK,GAAG,IAAIzB,IAAI,CAACkB,IAAI,EAAEO,KAAK,CAACV,WAAW,EAAE,EAAEU,KAAK,CAACX,cAAc,EAAE,CAAC;EAC1E,IAAA;EACA,IAAA,IAAIY,KAAK,CAACzB,QAAQ,KAAKkB,IAAI,EAAE;EAC3B,MAAA,IAAI,CAACO,KAAK,GAAG,IAAI1B,IAAI,CAACmB,IAAI,EAAEO,KAAK,CAACX,WAAW,EAAE,EAAEW,KAAK,CAACZ,cAAc,EAAE,CAAC;EAC1E,IAAA;EACA,IAAA,IAAIc,KAAK,CAAC3B,QAAQ,KAAKiB,IAAI,EAAE;EAC3B,MAAA,IAAI,CAACU,KAAK,GAAG,IAAI5B,IAAI,CAACkB,IAAI,EAAEU,KAAK,CAACb,WAAW,EAAE,EAAEa,KAAK,CAACd,cAAc,EAAE,CAAC;EAC1E,IAAA;IACF,CAAC;IAAAL,MAAA,CAEDE,MAAM,GAAN,SAAAA,MAAMA,CAACmB,UAAkB,EAAEC,QAAgB,EAAE;MAC3CD,UAAU,GAAGpD,IAAI,CAACsD,GAAG,CAACF,UAAU,EAAE,IAAI,CAACN,WAAW,CAAC;EACnD,IAAA,IAAMS,OAAO,GAAG,CAAC,GAAGF,QAAQ;EAC5B;EACA,IAAA,IAAMG,SAAS,GAAGJ,UAAU,GAAG,IAAI;EACnC;EACA,IAAA,IAAMK,cAAc,GAAGF,OAAO,GAAGC,SAAS;MAC1C,IAAI,CAACR,KAAK,CAACf,MAAM,CAACuB,SAAS,EAAEC,cAAc,CAAC;MAC5C,IAAI,CAACV,KAAK,CAACd,MAAM,CAACuB,SAAS,EAAEC,cAAc,CAAC;IAC9C,CAAC;EAAA1B,EAAAA,MAAA,CAED2B,UAAU,GAAV,SAAAA,UAAUA,CAACC,IAAY,EAAE;EACvB;EACA;EACA,IAAA,IAAMC,OAAO,GAAGD,IAAI,GAAG,IAAI;MAC3B,IAAMlC,MAAM,GAAGzB,IAAI,CAAC6D,IAAI,CAAC,CAAC,CAAC,GAAG7D,IAAI,CAAC6B,GAAG,CAAC,CAAC7B,IAAI,CAACmC,GAAG,CAACyB,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;EACjE,IAAA,IAAI,CAACV,KAAK,CAACjB,MAAM,CAACR,MAAM,EAAEzB,IAAI,CAACsD,GAAG,CAACK,IAAI,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;EAAA5B,EAAAA,MAAA,CAED+B,WAAW,GAAX,SAAAA,WAAWA,GAAY;MACrB,OAAO,IAAI,CAACd,KAAK,CAACZ,cAAc,EAAE,IAAI,IAAI,CAACS,UAAU;IACvD,CAAC;EAAAd,EAAAA,MAAA,CAEDM,WAAW,GAAX,SAAAA,WAAWA,GAAW;EACpB,IAAA,IAAI,IAAI,CAACyB,WAAW,EAAE,EAAE;EACtB;EACA;EACA;EACA;EACA,MAAA,OAAO9D,IAAI,CAAC+D,GAAG,CAAC,IAAI,CAACf,KAAK,CAACX,WAAW,EAAE,EAAE,IAAI,CAACU,KAAK,CAACV,WAAW,EAAE,CAAC;EACrE,IAAA,CAAC,MAAM;QACL,OAAO,IAAI,CAACO,gBAAgB;EAC9B,IAAA;IACF,CAAC;EAAAb,EAAAA,MAAA,CAEDiC,eAAe,GAAf,SAAAA,eAAeA,GAAW;MACxB,IAAI,IAAI,CAACd,KAAK,CAACd,cAAc,EAAE,IAAI,IAAI,CAACS,UAAU,EAAE;EAClD,MAAA,OAAO,IAAI,CAACK,KAAK,CAACb,WAAW,EAAE;EACjC,IAAA,CAAC,MAAM;QACL,OAAO,IAAI,CAACY,YAAY;EAC1B,IAAA;IACF,CAAC;IAAAlB,MAAA,CAMDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG,CAAC,CAAC;IAAA,OAAAC,YAAA,CAAA3B,sBAAA,EAAA,CAAA;MAAA4B,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAJZ,SAAAA,GAAAA,GAA8B;QAC5B,OAAO,IAAI,CAACxB,gBAAgB;EAC9B,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;EC/EH,IAAayB,MAAM,GAQjB,SAAAA,OAAYC,KAAa,EAAEC,MAAe,EAAE;EAAA,EAAA,IAAA,CAP5CC,KAAK,GAAA,MAAA;EAAA,EAAA,IAAA,CACLC,KAAK,GAAA,MAAA;EAAA,EAAA,IAAA,CACL3C,GAAG,GAAA,MAAA;EAAA,EAAA,IAAA,CACH4C,IAAI,GAAA,MAAA;EAAA,EAAA,IAAA,CACJC,IAAI,GAAA,MAAA;EAAA,EAAA,IAAA,CACJ1F,KAAK,GAAA,MAAA;IAGH,IAAM2F,EAAE,GAAA,GAAA,GAAON,KAAK,GAAA,IAAI;IACxB,IAAI,CAACE,KAAK,GAAGK,IAAI;EACjB,EAAA,IAAI,CAACJ,KAAK,GAAGF,MAAM,CAACE,KAAK,CAACK,IAAI,CAAC,IAAI,EAAEF,EAAE,CAAC;EACxC,EAAA,IAAI,CAAC9C,GAAG,GAAGyC,MAAM,CAACzC,GAAG,CAACgD,IAAI,CAAC,IAAI,EAAEF,EAAE,CAAC;EACpC,EAAA,IAAI,CAACF,IAAI,GAAGH,MAAM,CAACG,IAAI,CAACI,IAAI,CAAC,IAAI,EAAEF,EAAE,CAAC;EACtC,EAAA,IAAI,CAACD,IAAI,GAAGJ,MAAM,CAACI,IAAI,CAACG,IAAI,CAAC,IAAI,EAAEF,EAAE,CAAC;EACtC,EAAA,IAAI,CAAC3F,KAAK,GAAGsF,MAAM,CAACtF,KAAK,CAAC6F,IAAI,CAAC,IAAI,EAAEF,EAAE,CAAC;EAC1C,CAAA;EAGF,IAAMC,IAAkB,GAAG,SAArBA,IAAkBA,GAAe,CAAC,CAAC;EAEzC,IAAME,UAAmB,GAAG;EAC1BP,EAAAA,KAAK,EAAEK,IAAI;EACXJ,EAAAA,KAAK,EAAEI,IAAI;EACX/C,EAAAA,GAAG,EAAE+C,IAAI;EACTH,EAAAA,IAAI,EAAEG,IAAI;EACVF,EAAAA,IAAI,EAAEE,IAAI;EACV5F,EAAAA,KAAK,EAAE4F;EACT,CAAC;EAED,SAASG,YAAYA,GAAG;EACtB,EAAA,OAAOC,QAAA,CAAc,EAAE,EAAEF,UAAU,CAAC;EACtC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,SAASG,cAAcA,CAACC,IAAY,EAAEC,EAAsB,EAAgB;EAC1E,EAAA,IAAMC,IAAkB,GAAGC,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC;IAC7C,OAAOE,IAAG,GACNA,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACC,OAAO,EAAA,CAAKH,EAAE,GAAG,GAAG,GAAGA,EAAE,GAAG,IAAI,GAAG,EAAE,UAAID,IAAI,GAAA,KAAK,CAAA,GACjEN,IAAI;EACV;EAEA,SAASW,WAAWA,CAClBrB,GAAW,EACXsB,WAAuC,EACvCL,EAAW,EACG;IACd,OAAOK,WAAW,CAACtB,GAAG,CAAA,GAClBsB,WAAW,CAACtB,GAAG,CAAC,CAACW,IAAI,CAACW,WAAW,CAAA,GACjCP,cAAc,CAACf,GAAG,EAAEiB,EAAE,CAAC;EAC7B;EAEA,IAAMM,cAAuB,GAAGV,YAAY,EAAE;EAEvC,SAASW,UAAUA,CACxBF,WAA8B,EAC9BG,OAAe,EACfR,EAAuB,EACd;EACT;EACA,EAAA,IAAMS,SAAS,GAAGb,YAAY,EAAE;EAChC,EAAA,IACG,OAAOO,OAAO,KAAK,QAAQ,IAAIE,WAAW,KAAK,IAAI,IACpD,OAAOA,WAAW,KAAK,QAAO,EAC9B;EACA,IAAA,IAAMK,IAAuB,GAAG;EAC9B;EACA;MACA,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,OAAO,CACR;EACDA,IAAAA,IAAI,CAACC,OAAO,CAAC,UAAC5B,GAAG,EAAK;QACpB0B,SAAS,CAAC1B,GAAG,CAAC,GAAGqB,WAAW,CAACrB,GAAG,EAAEsB,WAAW,EAAEL,EAAE,CAAC;EACpD,IAAA,CAAC,CAAC;EACF;EACA;MACA,IAAI;EACFS,MAAAA,SAAS,CAAC/D,GAAG,CAAA,2BAAA,GACgB8D,OAAO,GAAA,uBAAA,GAAuB,QAC3D,CAAC;MACH,CAAC,CAAC,OAAOI,CAAC,EAAE;EACV;QACA,OAAOhB,YAAY,EAAE;EACvB,IAAA;EACA;EACAc,IAAAA,IAAI,CAACC,OAAO,CAAC,UAAC5B,GAAG,EAAK;QACpBuB,cAAc,CAACvB,GAAG,CAAC,GAAGqB,WAAW,CAACrB,GAAG,EAAEsB,WAAW,CAAC;EACrD,IAAA,CAAC,CAAC;EACJ,EAAA,CAAC,MAAM;EACL;EACAR,IAAAA,QAAA,CAAcS,cAAc,EAAEG,SAAS,CAAC;EAC1C,EAAA;EACA,EAAA,OAAOA,SAAS;EAClB;EAEO,IAAMtB,MAAe,GAAGmB,cAAc;;ECrHtC,SAASO,cAAcA,CAC5BC,wBAAwB,EACQ;EAAA,EAAA,IADhCA,wBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,wBAAwB,GAAG,IAAI;EAAA,EAAA;EAE/B,EAAA,IAAI,OAAOZ,IAAI,KAAK,WAAW,EAAE,OAAOa,SAAS;EACjD,EAAA,IAAMC,GAAG,GACP,CAACF,wBAAwB,IAAI,CAACZ,IAAI,CAACe,WAAW,KAC5Cf,IAAI,CAASgB,kBAAqD;IACtE,OACEF,GAAG,IACHd,IAAI,CAACe,WAAW,IACdf,IAAI,CAASiB,iBAAwC;EAE3D;EAEO,SAASC,oBAAoBA,CAACC,MAAsC,EAAE;IAC3E,OACE,OAAOnB,IAAI,KAAK,WAAW,IAAImB,MAAM,KAAMnB,IAAI,CAASgB,kBAAkB;EAE9E;EAEO,SAASI,uBAAuBA,CACrCC,aAA2B,EAC3BC,cAA4B,EACnB;EACT,EAAA,IAAMC,UAAU,GAAGC,MAAM,CAAChB,IAAI,CAACa,aAAa,CAAC;EAC7C,EAAA,IAAMI,kBAAkB,GAAGD,MAAM,CAAChB,IAAI,CAACc,cAAc,CAAC;EACtD,EAAA,IAAMI,UAAU,GAAGH,UAAU,CAACI,MAAM;EACpC,EAAA,IAAMC,kBAAkB,GAAGH,kBAAkB,CAACE,MAAM;EACpD,EAAA,OACE,CAACD,UAAU,IACX,CAACE,kBAAkB,IAClBF,UAAU,KAAKE,kBAAkB,IAChC,CAACL,UAAU,CAACM,IAAI,CAAC,UAACC,IAAI,EAAA;MAAA,OAAKL,kBAAkB,CAACM,OAAO,CAACD,IAAI,CAAC,KAAK,EAAE;IAAA,CAAA,CAAE;EAE1E;;ECpCA;EACA;EACA;;;;;;;EAQA;;;;;;;;;;;EAWM,SAAUE,cAAcA,CAC7BC,KAAiB,EACjBC,UAAA,EAA2B;EAAA,EAAA,IAA3BA,UAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,UAAA,GAAsB,KAAK;EAAA,EAAA;EAE3B,EAAA,IAAI,OAAOC,WAAW,KAAK,WAAW,EAAE;EACvC,IAAA,IAAMC,OAAO,GAAG,IAAID,WAAW,CAAC,OAAO,CAAC;EACxC,IAAA,IAAME,OAAO,GAAGD,OAAO,CAACE,MAAM,CAACL,KAAK,CAAC;EAErC,IAAA,IAAIC,UAAU,EAAE;EACf;EACA,MAAA,IAAMK,GAAG,GAAGF,OAAO,CAACN,OAAO,CAAC,IAAI,CAAC;EACjC,MAAA,OAAOQ,GAAG,KAAK,EAAE,GAAGF,OAAO,CAACG,SAAS,CAAC,CAAC,EAAED,GAAG,CAAC,GAAGF,OAAO;EACxD,IAAA;EAEA;EACA,IAAA,OAAOA,OAAO,CAAC9H,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAClC,EAAA;EAEA,EAAA,IAAMkI,GAAG,GAAGR,KAAK,CAACN,MAAM;EACxB,EAAA,IAAInH,CAAC;EACL,EAAA,IAAIkI,KAAK;EACT,EAAA,IAAIC,KAAK;IACT,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAIC,CAAC,GAAG,CAAC;IACT,OAAOA,CAAC,GAAGJ,GAAG,EAAE;EACfjI,IAAAA,CAAC,GAAGyH,KAAK,CAACY,CAAC,EAAE,CAAC;EACd,IAAA,IAAIrI,CAAC,KAAK,IAAI,IAAI0H,UAAU,EAAE;EAC7B,MAAA,OAAOU,GAAG;MACX,CAAC,MACI,IAAIpI,CAAC,KAAK,IAAI,IAAIA,CAAC,KAAK,IAAI,EAAE;EAClC;EACA,MAAA;EACD,IAAA;MACA,QAAQA,CAAC,IAAI,CAAC;EACb,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACN,MAAA,KAAK,CAAC;EACL;EACAoI,QAAAA,GAAG,IAAIE,MAAM,CAACC,YAAY,CAACvI,CAAC,CAAC;EAC7B,QAAA;EACD,MAAA,KAAK,EAAE;EACP,MAAA,KAAK,EAAE;EACN;EACAkI,QAAAA,KAAK,GAAGT,KAAK,CAACY,CAAC,EAAE,CAAC;EAClBD,QAAAA,GAAG,IAAIE,MAAM,CAACC,YAAY,CAAE,CAACvI,CAAC,GAAG,IAAI,KAAK,CAAC,GAAKkI,KAAK,GAAG,IAAK,CAAC;EAC9D,QAAA;EACD,MAAA,KAAK,EAAE;EACN;EACAA,QAAAA,KAAK,GAAGT,KAAK,CAACY,CAAC,EAAE,CAAC;EAClBF,QAAAA,KAAK,GAAGV,KAAK,CAACY,CAAC,EAAE,CAAC;UAClBD,GAAG,IAAIE,MAAM,CAACC,YAAY,CACxB,CAACvI,CAAC,GAAG,IAAI,KAAK,EAAE,GAAK,CAACkI,KAAK,GAAG,IAAI,KAAK,CAAE,GAAI,CAACC,KAAK,GAAG,IAAI,KAAK,CAAE,CAClE;EACD,QAAA;EAEF;EACD,EAAA;EACA,EAAA,OAAOC,GAAG;EACX;;ECpFA;EACA;EACA;;EAEO,SAASI,UAAUA,CAACf,KAAyC,EAAE;IACpE,IAAIgB,GAAG,GAAG,EAAE;EACZ,EAAA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACN,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACrC,IAAIK,CAAC,GAAGjB,KAAK,CAACY,CAAC,CAAC,CAAC7I,QAAQ,CAAC,EAAE,CAAC;EAC7B,IAAA,IAAIkJ,CAAC,CAACvB,MAAM,GAAG,CAAC,EAAE;QAChBuB,CAAC,GAAG,GAAG,GAAGA,CAAC;EACb,IAAA;EAEAD,IAAAA,GAAG,IAAIC,CAAC;EACV,EAAA;EACA,EAAA,OAAOD,GAAG;EACZ;EAEO,SAASE,gBAAgBA,CAACF,GAAW,EAAe;EACzD,EAAA,OAAOG,UAAU,CAACC,IAAI,CACpBJ,GAAG,CACA1I,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,oBAAoB,EAAE,OAAO,CAAC,CACtCA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClB+I,KAAK,CAAC,GAAG,CACd,CAAC,CAACC,MAAM;EACV;;ECnBA,IAAaC,SAAS,YAAAA,SAAAA,GAAA;IAAA,IAAA,CACpBC,OAAO,GAAY,KAAK;IAAA,IAAA,CACxBC,MAAM,GAAW,CAAC;IAAA,IAAA,CAClBC,KAAK,GAAW,CAAC;IAAA,IAAA,CACjBC,KAAK,GAAW,CAAC;IAAA,IAAA,CACjBC,UAAU,GAAW,CAAC;IAAA,IAAA,CACtBC,UAAU,GAAW,CAAC;EAAA,EAAA,IAAA,CACtBC,OAAO,GAAoC;EAAEC,IAAAA,KAAK,EAAE,CAAC;EAAEC,IAAAA,KAAK,EAAE,CAAC;EAAEC,IAAAA,GAAG,EAAE;KAAG;EAAA,EAAA,IAAA,CACzEC,OAAO,GAAyB;EAAEH,IAAAA,KAAK,EAAE,CAAC;EAAEE,IAAAA,GAAG,EAAE;KAAG;EAAA,EAAA,IAAA,CACpDE,SAAS,GAAoC;EAAEJ,IAAAA,KAAK,EAAE,CAAC;EAAEC,IAAAA,KAAK,EAAE,CAAC;EAAEC,IAAAA,GAAG,EAAE;KAAG;EAAA,CAAA;;ECH7E,IAAkBG,qBAAqB,GAAA;IAAAvI,KAAA,EAAA,OAAA;IAAAwI,KAAA,EAAA,OAAA;IAAAC,UAAA,EAAA;EAAA,CAAA;EAuBvC,IAAaC,WAAW,gBAAA,YAAA;IAYtB,SAAAA,WAAAA,CAAYC,IAAmB,EAAE;MAAA,IAAA,CAXzBC,UAAU,GAA4B,IAAI;MAAA,IAAA,CAC1CC,IAAI,GAAkB,IAAI;MAAA,IAAA,CAC1BC,MAAM,GAAqB,IAAI;MAAA,IAAA,CAC/BC,QAAQ,GAA6B,IAAI;EAEjD;EAAA,IAAA,IAAA,CACgBJ,IAAI,GAAA,MAAA;EAEpB;EAAA,IAAA,IAAA,CACOK,MAAM,GAAA,MAAA;EAGX,IAAA,IAAI,OAAOL,IAAI,KAAK,QAAQ,EAAE;EAC5BA,MAAAA,IAAI,GAAG;EAAE7K,QAAAA,GAAG,EAAE6K;SAAM;EACtB,IAAA;MACA,IAAI,CAACA,IAAI,GAAGA,IAAI;EAChBM,IAAAA,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC;EAC/B,EAAA;;EAEA;EAAA,EAAA,IAAAtI,MAAA,GAAA+H,WAAA,CAAA9H,SAAA;IAAAD,MAAA,CACAuI,YAAY,GAAZ,SAAAA,YAAYA,CAAChK,KAAa,EAAEiK,QAAsB,EAAE;MAClD,IAAMC,MAAM,GAAGlK,KAAK,CAACsI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;EAClC,IAAA,IAAIU,KAAa;EACjB,IAAA,IAAIkB,MAAM,CAACvD,MAAM,KAAK,CAAC,EAAE;QACvBqC,KAAK,GAAG,CAAAiB,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEE,kBAAkB,KAAI,CAAC;EAC3C,IAAA,CAAC,MAAM;EACLnB,MAAAA,KAAK,GAAGoB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC;EAC7B,IAAA;EACA,IAAA,IAAI,CAACR,UAAU,GAAG,CAACV,KAAK,EAAEoB,QAAQ,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGlB,KAAK,CAAC;IACxD,CAAC;EAAAvH,EAAAA,MAAA,CAqED4I,yBAAyB,GAAzB,SAAAA,yBAAyBA,GAAG;EAC1B,IAAA,IAAQC,iBAAiB,GAAK,IAAI,CAA1BA,iBAAiB;EACzBA,IAAAA,iBAAiB,CAACjB,qBAAqB,CAACvI,KAAK,CAAC,GAAG,IAAI;EACrDwJ,IAAAA,iBAAiB,CAACjB,qBAAqB,CAACC,KAAK,CAAC,GAAG,IAAI;EACrDgB,IAAAA,iBAAiB,CAACjB,qBAAqB,CAACE,UAAU,CAAC,GAAG,IAAI;IAC5D,CAAC;IAAA,OAAA3F,YAAA,CAAA4F,WAAA,EAAA,CAAA;MAAA3F,GAAA,EAAA,SAAA;MAAAC,GAAA,EAxED,SAAAA,GAAAA,GAAsB;EACpB,MAAA,OAAO,IAAI,CAAC2F,IAAI,CAAC7K,GAAG;EACtB,IAAA;EAAC,GAAA,EAAA;MAAAiF,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuC;EACrC,MAAA,IAAI,IAAI,CAAC4F,UAAU,KAAK,IAAI,EAAE;EAC5B,QAAA,OAAO,EAAE;EACX,MAAA;QAEA,OAAO,IAAI,CAACA,UAAU;EACxB,IAAA;EAAC,GAAA,EAAA;MAAA7F,GAAA,EAAA,sBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA+C;EAC7C,MAAA,OAAO,IAAI,CAACyG,SAAS,CAAC,CAAC,CAAC;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAA1G,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6C;EAC3C,MAAA,OAAO,IAAI,CAACyG,SAAS,CAAC,CAAC,CAAC;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAA1G,GAAA,EAAA,mBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA2C;EACzC,MAAA,IAAI,IAAI,CAAC+F,QAAQ,KAAK,IAAI,EAAE;EAAA,QAAA,IAAAW,cAAA;EAC1B,QAAA,IAAI,CAACX,QAAQ,IAAAW,cAAA,GAAA,EAAA,EAAAA,cAAA,CACVnB,qBAAqB,CAACvI,KAAK,CAAA,GAAG,IAAI,EAAA0J,cAAA,CAClCnB,qBAAqB,CAACC,KAAK,CAAA,GAAG,IAAI,EAAAkB,cAAA,CAClCnB,qBAAqB,CAACE,UAAU,CAAA,GAAG,IAAI,EAAAiB,cAAA,CACzC;EACH,MAAA;QACA,OAAO,IAAI,CAACX,QAAQ;MACtB,CAAC;EAAAY,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAsBzK,KAAwB,EAAE;QAC9C,IAAI,CAAC6J,QAAQ,GAAG7J,KAAK;EACvB,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,UAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,OAAO,IAAI,CAAC8F,MAAM,KAAK,IAAI;EAC7B,IAAA;EAAC,GAAA,EAAA;MAAA/F,GAAA,EAAA,YAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;EACxB,MAAA,OAAO,IAAI,CAAC+F,QAAQ,KAAK,IAAI;EAC/B,IAAA;EAAC,GAAA,EAAA;MAAAhG,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuB;EACrB,MAAA,IAAI,IAAI,CAAC8F,MAAM,KAAK,IAAI,EAAE;EACxB,QAAA,IAAI,CAACA,MAAM,GAAG,IAAIpB,SAAS,EAAE;EAC/B,MAAA;QACA,OAAO,IAAI,CAACoB,MAAM;MACpB,CAAC;EAAAa,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAUzK,KAAgB,EAAE;QAC1B,IAAI,CAAC4J,MAAM,GAAG5J,KAAK;EACrB,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkB;EAChB,MAAA,IAAI,CAAC,IAAI,CAAC6F,IAAI,IAAI,IAAI,CAACe,OAAO,IAAI,IAAI,CAACZ,MAAM,EAAE;EAC7C,QAAA,IAAI,CAACH,IAAI,GAAGgB,kCAAgB,CAAC,IAAI,CAACD,OAAO,EAAE,IAAI,CAACZ,MAAM,EAAE;EACtDc,UAAAA,eAAe,EAAE;EACnB,SAAC,CAAC;EACJ,MAAA;EACA,MAAA,OAAO,IAAI,CAACjB,IAAI,IAAI,EAAE;MACxB,CAAC;EAAAc,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAQzK,KAAa,EAAE;QACrB,IAAI,CAAC2J,IAAI,GAAG3J,KAAK;EACnB,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;EAuBI,SAAS6K,eAAeA,CAACC,IAAc,EAAyB;EACrE,EAAA,OAAOA,IAAI,CAACC,EAAE,KAAK,aAAa;EAClC;;EAEA;EACA;EACA;EACA,IAAaC,QAAQ,0BAAAC,aAAA,EAAA;EA6DnB,EAAA,SAAAD,QAAAA,CAAYnG,IAAuB,EAAE4E,IAAmB,EAAE;EAAA,IAAA,IAAAyB,KAAA;EACxDA,IAAAA,KAAA,GAAAD,aAAA,CAAAE,IAAA,CAAA,IAAA,EAAM1B,IAAI,CAAC,IAAA,IAAA;MAACyB,KAAA,CA7DNE,YAAY,GAAoB,IAAI;MAAAF,KAAA,CACpCG,gBAAgB,GAAkB,IAAI;MAAAH,KAAA,CACtCI,IAAI,GAA4B,IAAI;EAC5C;EAAAJ,IAAAA,KAAA,CACQK,QAAQ,GAAA,MAAA;MAAAL,KAAA,CAETM,kBAAkB,GAAkB,IAAI;MAAAN,KAAA,CACxCO,OAAO,GAAoB,EAAE;EAEpC;MAAAP,KAAA,CACOQ,QAAQ,GAAW,CAAC;EAC3B;MAAAR,KAAA,CACOH,EAAE,GAA2B,CAAC;EACrC;EACA;EACA;EAAAG,IAAAA,KAAA,CACOS,SAAS,GAAA,MAAA;EAChB;EAAAT,IAAAA,KAAA,CACgBrG,IAAI,GAAA,MAAA;EACpB;MAAAqG,KAAA,CACOU,MAAM,GAAyC,IAAI;EAC1D;MAAAV,KAAA,CACOW,SAAS,GAAoC,IAAI;EACxD;EAAAX,IAAAA,KAAA,CACOY,KAAK,GAAW,EAAE;EACzB;MAAAZ,KAAA,CACOa,EAAE,GAAW,CAAC;EACrB;EAAAb,IAAAA,KAAA,CACOc,QAAQ,GAAA,MAAA;EACf;EAAAd,IAAAA,KAAA,CACOe,MAAM,GAAA,MAAA;EACb;EAAAf,IAAAA,KAAA,CACOgB,QAAQ,GAAA,MAAA;EACf;EAAAhB,IAAAA,KAAA,CACOiB,MAAM,GAAA,MAAA;EACb;MAAAjB,KAAA,CACOlC,KAAK,GAAW,CAAC;EACxB;MAAAkC,KAAA,CACOkB,cAAc,GAAW,CAAC;EACjC;EAAAlB,IAAAA,KAAA,CACOmB,QAAQ,GAAA,MAAA;EACf;EAAAnB,IAAAA,KAAA,CACOoB,WAAW,GAAA,MAAA;EAClB;EAAApB,IAAAA,KAAA,CACOqB,SAAS,GAAA,MAAA;EAChB;EAAArB,IAAAA,KAAA,CACOsB,IAAI,GAAA,MAAA;EACX;MAAAtB,KAAA,CACOuB,WAAW,GAAY,KAAK;EACnC;MAAAvB,KAAA,CACOwB,KAAK,GAAkB,IAAI;EAClC;MAAAxB,KAAA,CACOyB,WAAW,GAAoB,IAAI;EAC1C;EAAAzB,IAAAA,KAAA,CACO0B,OAAO,GAAA,MAAA;EACd;EAAA1B,IAAAA,KAAA,CACO2B,GAAG,GAAA,MAAA;EACV;MAAA3B,KAAA,CACO4B,KAAK,GAAW,CAAC;MAItB5B,KAAA,CAAKrG,IAAI,GAAGA,IAAI;EAAC,IAAA,OAAAqG,KAAA;EACnB,EAAA;IAAC6B,cAAA,CAAA/B,QAAA,EAAAC,aAAA,CAAA;EAAA,EAAA,IAAA+B,OAAA,GAAAhC,QAAA,CAAAtJ,SAAA;EAAAsL,EAAAA,OAAA,CAwHDC,QAAQ,GAAR,SAAAA,QAAQA,CAACjN,KAAa,EAAE;MACtB,IAAI,CAACkN,QAAQ,CAAC,IAAI,CAAClE,KAAK,GAAGhJ,KAAK,CAAC;IACnC,CAAC;EAAAgN,EAAAA,OAAA,CAEDE,QAAQ,GAAR,SAAAA,QAAQA,CAAClN,KAAa,EAAE;MACtB,IAAI,CAACgJ,KAAK,GAAGhJ,KAAK;MAClB,IAAI,IAAI,CAACsL,IAAI,EAAE;EACb,MAAA,IAAI,CAACA,IAAI,CAACtC,KAAK,GAAGhJ,KAAK;EACzB,IAAA;IACF,CAAC;EAAAgN,EAAAA,OAAA,CAEDG,WAAW,GAAX,SAAAA,WAAWA,CAACnN,KAAa,EAAE;MACzB,IAAI,CAAC0L,QAAQ,GAAG1L,KAAK;MACrB,IAAI,IAAI,CAACsL,IAAI,EAAE;EACb,MAAA,IAAI,CAACA,IAAI,CAACI,QAAQ,GAAG1L,KAAK;EAC5B,IAAA;IACF,CAAC;EAAAgN,EAAAA,OAAA,CAEDI,YAAY,GAAZ,SAAAA,YAAYA,CAACC,SAA2B,EAAE;EACxC,IAAA,IAAM1B,SAAS,GAAG,IAAI,CAACA,SAAS;EAChC,IAAA,IAAIA,SAAS,EAAE;EAAA,MAAA,IAAA2B,kBAAA;EACb,MAAA,IAAMzJ,GAAG,GAAG8H,SAAS,CAAC0B,SAAS,CAAC;EAChC,MAAA,IAAIxJ,GAAG,IAAI,EAAA,CAAAyJ,kBAAA,GAAC,IAAI,CAAClC,YAAY,KAAA,IAAA,IAAjBkC,kBAAA,CAAmBC,KAAK,CAAA,EAAE;EACpC,QAAA,IAAI,CAACnC,YAAY,GAAGvH,GAAG,CAAC2J,cAAc,CAAC,IAAI,CAACzC,EAAE,EAAEY,SAAS,CAAC;EAC5D,MAAA;EACF,IAAA;IACF,CAAC;EAAAqB,EAAAA,OAAA,CAEDS,aAAa,GAAb,SAAAA,aAAaA,GAAS;MAAA,IAAAC,YAAA,EAAAC,eAAA;MACpB,CAAAD,YAAA,OAAI,CAAC9B,MAAM,aAAX8B,YAAA,CAAaE,KAAK,EAAE;MACpB,CAAAD,eAAA,OAAI,CAAC9B,SAAS,aAAd8B,eAAA,CAAgBC,KAAK,EAAE;IACzB,CAAC;EAAAZ,EAAAA,OAAA,CAEDa,uBAAuB,GAAvB,SAAAA,uBAAuBA,CACrBhJ,IAA2B,EAC3BmH,QAAgB,EAChBC,MAAc,EACdC,QAAgB,EAChBC,MAAc,EACd2B,OAAgB,EAChB;EAAA,IAAA,IADAA,OAAgB,KAAA,MAAA,EAAA;EAAhBA,MAAAA,OAAgB,GAAG,KAAK;EAAA,IAAA;EAExB,IAAA,IAAQxD,iBAAiB,GAAK,IAAI,CAA1BA,iBAAiB;EACzB,IAAA,IAAMjG,IAAI,GAAGiG,iBAAiB,CAACzF,IAAI,CAAC;MACpC,IAAI,CAACR,IAAI,EAAE;QACTiG,iBAAiB,CAACzF,IAAI,CAAC,GAAG;EACxBmH,QAAAA,QAAQ,EAARA,QAAQ;EACRC,QAAAA,MAAM,EAANA,MAAM;EACNC,QAAAA,QAAQ,EAARA,QAAQ;EACRC,QAAAA,MAAM,EAANA,MAAM;EACN2B,QAAAA,OAAO,EAAPA;SACD;EACD,MAAA;EACF,IAAA;EAEAzJ,IAAAA,IAAI,CAAC2H,QAAQ,GAAGtM,IAAI,CAAC+D,GAAG,CAACY,IAAI,CAAC2H,QAAQ,EAAEA,QAAQ,CAAC;EACjD3H,IAAAA,IAAI,CAAC4H,MAAM,GAAGvM,IAAI,CAACsD,GAAG,CAACqB,IAAI,CAAC4H,MAAM,EAAEA,MAAM,CAAC;EAC3C5H,IAAAA,IAAI,CAAC6H,QAAQ,GAAGxM,IAAI,CAAC+D,GAAG,CAACY,IAAI,CAAC6H,QAAQ,EAAEA,QAAQ,CAAC;EACjD7H,IAAAA,IAAI,CAAC8H,MAAM,GAAGzM,IAAI,CAACsD,GAAG,CAACqB,IAAI,CAAC8H,MAAM,EAAEA,MAAM,CAAC;IAC7C,CAAC;IAAA,OAAAvI,YAAA,CAAAoH,QAAA,EAAA,CAAA;MAAAnH,GAAA,EAAA,YAAA;MAAAC,GAAA,EAhLD,SAAAA,GAAAA,GAAgC;QAC9B,IAAI,IAAI,CAACiK,QAAQ,EAAE;EACjB,QAAA,IAAMnF,KAAK,GAAG,IAAI,CAACoF,KAAK,CAACpF,KAAK;EAC9B,QAAA,IAAIA,KAAK,EAAE;EACT,UAAA,OAAOA,KAAK;EACd,QAAA;EACF,MAAA;EACA,MAAA,IAAI,IAAI,CAAC2B,SAAS,CAAC5D,MAAM,EAAE;EACzB,QAAA,IAAMqC,KAAK,GAAG,IAAI,CAACuB,SAAS,CAAC,CAAC,CAAC;EAC/B,QAAA,IAAMrB,GAAG,GAAG,IAAI,CAACqB,SAAS,CAAC,CAAC,CAAC;UAC7B,IAAI0D,cAAA,CAAgBjF,KAAK,CAAC,IAAIkF,cAAA,CAAgBhF,GAAG,CAAC,EAAE;YAClD,OAAQA,GAAG,GAAeF,KAAgB;EAC5C,QAAA;EACF,MAAA;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EAAC,GAAA,EAAA;MAAAnF,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;QAC3B,IAAI,IAAI,CAACqK,UAAU,EAAE;UACnB,OAAQ,IAAI,CAACA,UAAU,GAAG,CAAC,GAAI,IAAI,CAACzC,QAAQ;EAC9C,MAAA;QACA,IAAI,IAAI,CAACH,QAAQ,EAAE;UACjB,OAAO,IAAI,CAACA,QAAQ;EACtB,MAAA;EACA,MAAA,OAAO,IAAI;MACb,CAAC;EAAAd,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAYzK,KAAa,EAAE;QACzB,IAAI,CAACuL,QAAQ,GAAGvL,KAAK;EACvB,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;EAAA,MAAA,IAAAsK,mBAAA;EACjC,MAAA,IAAQzC,SAAS,GAAK,IAAI,CAAlBA,SAAS;EAEjB,MAAA,IAAI,CAACA,SAAS,IAAIA,SAAS,CAAC0C,IAAI,EAAE;EAChC,QAAA,OAAO,IAAI;EACb,MAAA;QAEA,IAAI1C,SAAS,CAAC2C,QAAQ,EAAE;EACtB,QAAA,IAAI,CAAC,IAAI,CAAClD,YAAY,EAAE;EACtB,UAAA,IAAI,CAACA,YAAY,GAAGO,SAAS,CAAC2C,QAAQ,CAACd,cAAc,CAAC,IAAI,CAACzC,EAAE,CAAC;EAChE,QAAA;EACF,MAAA,CAAC,MAAM,IAAI,EAAA,CAAAqD,mBAAA,GAAC,IAAI,CAAChD,YAAY,KAAA,IAAA,IAAjBgD,mBAAA,CAAmBb,KAAK,CAAA,EAAE;EACpC,QAAA,IAAMgB,UAAU,GAAG/H,MAAM,CAAChB,IAAI,CAACmG,SAAS,CAAC;EACzC,QAAA,IAAI4C,UAAU,CAAC5H,MAAM,KAAK,CAAC,EAAE;EAC3B,UAAA,IAAM6H,QAAQ,GAAI,IAAI,CAACpD,YAAY,GAAGO,SAAS,CAAC4C,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAK;EACvE,UAAA,IAAIC,QAAQ,EAAE;EACZ,YAAA,IAAI,CAACpD,YAAY,GAAGoD,QAAQ,CAAChB,cAAc,CAAC,IAAI,CAACzC,EAAE,EAAEY,SAAS,CAAC;EACjE,UAAA;EACF,QAAA;EAGF,MAAA;QAEA,OAAO,IAAI,CAACP,YAAY;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAAvH,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkB;EAChB,MAAA,OAAO,IAAI,CAACkF,KAAK,GAAG,IAAI,CAAC0C,QAAQ;EACnC,IAAA;EAAC,GAAA,EAAA;MAAA7H,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyB;EACvB,MAAA,IAAI,IAAI,CAAC2K,eAAe,KAAK,IAAI,EAAE;EACjC,QAAA,OAAO,IAAI;EACb,MAAA;EAEA,MAAA,IAAM/C,QAAQ,GAAG,CAACgD,cAAA,CAAgB,IAAI,CAAChD,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAACA,QAAQ;EAEpE,MAAA,OAAO,IAAI,CAAC+C,eAAe,GAAG/C,QAAQ,GAAG,IAAI;EAC/C,IAAA;EAAC,GAAA,EAAA;MAAA7H,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAgB;EAAA,MAAA,IAAA6K,mBAAA;EACd;EACA;EACA;QACA,IAAA,CAAAA,mBAAA,GAAI,IAAI,CAACvD,YAAY,KAAA,IAAA,IAAjBuD,mBAAA,CAAmBC,SAAS,EAAE;EAChC,QAAA,OAAO,IAAI;EACb,MAAA,CAAC,MAAM,IAAI,IAAI,CAACjD,SAAS,EAAE;EAAA,QAAA,IAAAkD,qBAAA;UACzB,IAAMN,UAAU,GAAG/H,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACmG,SAAS,CAAC;EAC9C,QAAA,IAAMlE,GAAG,GAAG8G,UAAU,CAAC5H,MAAM;UAC7B,IAAIc,GAAG,GAAG,CAAC,IAAKA,GAAG,KAAK,CAAC,IAAA,CAAAoH,qBAAA,GAAI,IAAI,CAAClD,SAAS,CAAC4C,UAAU,CAAC,CAAC,CAAC,CAAC,KAAA,IAAA,IAA7BM,qBAAA,CAA+BD,SAAU,EAAE;EACtE,UAAA,OAAO,IAAI;EACb,QAAA;EACF,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAAC,GAAA,EAAA;MAAA/K,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqC;QACnC,IAAI,IAAI,CAACuH,gBAAgB,KAAK,IAAI,IAAI,IAAI,CAACG,kBAAkB,EAAE;UAC7D,IAAI,CAACiD,eAAe,GAAGpP,IAAI,CAACyP,KAAK,CAAC,IAAI,CAACtD,kBAAkB,CAAC;EAC5D,MAAA;QACA,OAAO,IAAI,CAACH,gBAAgB;MAC9B,CAAC;EAAAZ,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAoBzK,KAAoB,EAAE;EACxC,MAAA,IAAI,CAAC+O,cAAA,CAAgB/O,KAAK,CAAC,EAAE;EAC3B,QAAA,IAAI,CAACqL,gBAAgB,GAAG,IAAI,CAACG,kBAAkB,GAAG,IAAI;EACtD,QAAA;EACF,MAAA;QACA,IAAI,CAACH,gBAAgB,GAAGrL,KAAK;EAC/B,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;EACjC,MAAA,IAAI,CAAC+G,eAAe,CAAC,IAAI,CAAC,EAAE;EAC1B,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,IAAI,CAAC,IAAI,CAACS,IAAI,EAAE;UACd,IAAI,CAACA,IAAI,GAAG;YACV7B,IAAI,EAAE,IAAI,CAACA,IAAI;YACfT,KAAK,EAAE,IAAI,CAACA,KAAK;YACjB0C,QAAQ,EAAE,IAAI,CAACA,QAAQ;YACvBX,EAAE,EAAE,IAAI,CAACA,EAAE;YACX0D,eAAe,EAAE,IAAI,CAACA;WACvB;EACH,MAAA;QACA,OAAO,IAAI,CAACnD,IAAI;EAClB,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CAtL2B9B,WAAW,CAAA;;EAqPzC;EACA;EACA;EACA,IAAawF,IAAI,0BAAAC,aAAA,EAAA;IASf,SAAAD,IAAAA,CACEE,SAAmB,EACnBpE,IAAmB,EACnBrB,IAAmB,EACnB0F,KAAa,EACblF,QAAe,EACf;EAAA,IAAA,IAAAmF,MAAA;EACAA,IAAAA,MAAA,GAAAH,aAAA,CAAA9D,IAAA,CAAA,IAAA,EAAM1B,IAAI,CAAC,IAAA,IAAA;MAAC2F,MAAA,CAfEC,UAAU,GAAW,CAAC;MAAAD,MAAA,CACtB1D,QAAQ,GAAW,CAAC;MAAA0D,MAAA,CACpBvC,GAAG,GAAY,KAAK;MAAAuC,MAAA,CACpBE,WAAW,GAAY,KAAK;EAAAF,IAAAA,MAAA,CAC5BtF,MAAM,GAAA,MAAA;EAAAsF,IAAAA,MAAA,CACNG,QAAQ,GAAA,MAAA;EAAAH,IAAAA,MAAA,CACRD,KAAK,GAAA,MAAA;MAUnBC,MAAA,CAAK1D,QAAQ,GAAGwD,SAAS,CAACM,oBAAoB,CAAC,UAAU,CAAC;MAC1DJ,MAAA,CAAKvC,GAAG,GAAGqC,SAAS,CAACO,IAAI,CAAC,KAAK,CAAC;MAChCL,MAAA,CAAKE,WAAW,GAAGJ,SAAS,CAACO,IAAI,CAAC,aAAa,CAAC;MAChDL,MAAA,CAAKtF,MAAM,GAAGoF,SAAS,CAACQ,gBAAgB,CAAC,KAAK,CAAW;MACzDN,MAAA,CAAKG,QAAQ,GAAGzE,IAAI;MACpBsE,MAAA,CAAKD,KAAK,GAAGA,KAAK;EAClB,IAAA,IAAM5E,SAAS,GAAG2E,SAAS,CAACQ,gBAAgB,CAAC,WAAW,CAAC;EACzD,IAAA,IAAInF,SAAS,EAAE;EACb6E,MAAAA,MAAA,CAAKpF,YAAY,CAACO,SAAS,EAAEN,QAAQ,CAAC;EACxC,IAAA;EACA,IAAA,IAAIA,QAAQ,EAAE;QACZmF,MAAA,CAAKC,UAAU,GAAGpF,QAAQ,CAACoF,UAAU,GAAGpF,QAAQ,CAACyB,QAAQ;EAC3D,IAAA;EAAC,IAAA,OAAA0D,MAAA;EACH,EAAA;IAACrC,cAAA,CAAAiC,IAAA,EAAAC,aAAA,CAAA;IAAA,OAAArL,YAAA,CAAAoL,IAAA,EAAA,CAAA;MAAAnL,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoB;QAClB,OAAO,IAAI,CAACyL,QAAQ,CAACvG,KAAK,GAAG,IAAI,CAACqG,UAAU;EAC9C,IAAA;EAAC,GAAA,EAAA;MAAAxL,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkB;EAChB,MAAA,OAAO,IAAI,CAACkF,KAAK,GAAG,IAAI,CAAC0C,QAAQ;EACnC,IAAA;EAAC,GAAA,EAAA;MAAA7H,GAAA,EAAA,QAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsB;EACpB,MAAA,IAAQwG,iBAAiB,GAAK,IAAI,CAA1BA,iBAAiB;EACzB,MAAA,OAAO,CAAC,EACNA,iBAAiB,CAACqF,KAAK,IACvBrF,iBAAiB,CAACsF,KAAK,IACvBtF,iBAAiB,CAACuF,UAAU,CAC7B;EACH,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CA/CuBrG,WAAW,CAAA;EAkDrC,SAASsG,0CAA0CA,CACjDC,MAA0B,EAC1BC,QAAgB,EAChB;EACA,EAAA,IAAMtO,SAAS,GAAG8E,MAAM,CAACyJ,cAAc,CAACF,MAAM,CAAC;EAC/C,EAAA,IAAIrO,SAAS,EAAE;MACb,IAAMwO,kBAAkB,GAAG1J,MAAM,CAAC2J,wBAAwB,CACxDzO,SAAS,EACTsO,QACF,CAAC;EACD,IAAA,IAAIE,kBAAkB,EAAE;EACtB,MAAA,OAAOA,kBAAkB;EAC3B,IAAA;EACA,IAAA,OAAOJ,0CAA0C,CAACpO,SAAS,EAAEsO,QAAQ,CAAC;EACxE,EAAA;EACF;EAEA,SAASjG,cAAcA,CAACgG,MAAc,EAAEC,QAAgB,EAAE;EACxD,EAAA,IAAMI,CAAC,GAAGN,0CAA0C,CAACC,MAAM,EAAEC,QAAQ,CAAC;EACtE,EAAA,IAAII,CAAC,EAAE;MACLA,CAAC,CAACC,UAAU,GAAG,IAAI;MACnB7J,MAAM,CAAC8J,cAAc,CAACP,MAAM,EAAEC,QAAQ,EAAEI,CAAC,CAAC;EAC5C,EAAA;EACF;;ECxdA,IAAMG,YAAU,GAAG7Q,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;EACtC,IAAM2O,IAAI,GAAG,EAAE,CAACA,IAAI;;EAEpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,IAAMC,oBAAoB,GAAG;EAClCb,EAAAA,KAAK,EAAE,CAAC;EACRD,EAAAA,KAAK,EAAE,CAAC;EACRe,EAAAA,GAAG,EAAE,CAAC;EACNC,EAAAA,IAAI,EAAE;EACR,CAAC;EAEM,SAASC,OAAOA,CAACpE,IAAgB,EAAU;IAChD,OAAO1E,MAAM,CAACC,YAAY,CAAC8I,KAAK,CAAC,IAAI,EAAErE,IAAI,CAAC;EAC9C;EAEO,SAASsE,UAAUA,CAACvI,MAAkB,EAAEwI,MAAc,EAAU;EACrE,EAAA,IAAMC,GAAG,GAAIzI,MAAM,CAACwI,MAAM,CAAC,IAAI,CAAC,GAAIxI,MAAM,CAACwI,MAAM,GAAG,CAAC,CAAC;IACtD,OAAOC,GAAG,GAAG,CAAC,GAAG,KAAK,GAAGA,GAAG,GAAGA,GAAG;EACpC;EAEO,SAASC,UAAUA,CAAC1I,MAAkB,EAAEwI,MAAc,EAAU;EACrE,EAAA,IAAMC,GAAG,GAAGE,UAAU,CAAC3I,MAAM,EAAEwI,MAAM,CAAC;IACtC,OAAOC,GAAG,GAAG,CAAC,GAAG,UAAU,GAAGA,GAAG,GAAGA,GAAG;EACzC;EAEO,SAASG,UAAUA,CAAC5I,MAAkB,EAAEwI,MAAc,EAAE;EAC7D,EAAA,IAAIK,MAAM,GAAGH,UAAU,CAAC1I,MAAM,EAAEwI,MAAM,CAAC;IACvCK,MAAM,IAAI1R,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;IACzBuP,MAAM,IAAIH,UAAU,CAAC1I,MAAM,EAAEwI,MAAM,GAAG,CAAC,CAAC;EACxC,EAAA,OAAOK,MAAM;EACf;EAEO,SAASF,UAAUA,CAAC3I,MAAkB,EAAEwI,MAAc,EAAU;EACrE,EAAA,OACGxI,MAAM,CAACwI,MAAM,CAAC,IAAI,EAAE,GACpBxI,MAAM,CAACwI,MAAM,GAAG,CAAC,CAAC,IAAI,EAAG,GACzBxI,MAAM,CAACwI,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE,GACzBxI,MAAM,CAACwI,MAAM,GAAG,CAAC,CAAC;EAEtB;;EASA;EACO,SAASM,WAAWA,CAAC7E,IAAgB,EAAW;EACrD,EAAA,IAAMtD,GAAG,GAAGsD,IAAI,CAAC2B,UAAU;IAC3B,KAAK,IAAItG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,GAAG,GAAI;EACzB,IAAA,IAAMoI,IAAI,GAAGL,UAAU,CAACzE,IAAI,EAAE3E,CAAC,CAAC;EAChC,IAAA,IACEyJ,IAAI,GAAG,CAAC,IACR9E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IACpB2E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IACpB2E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IACpB2E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EACpB;EACA,MAAA,OAAO,IAAI;EACb,IAAA;MACAA,CAAC,GAAGyJ,IAAI,GAAG,CAAC,GAAGzJ,CAAC,GAAGyJ,IAAI,GAAGpI,GAAG;EAC/B,EAAA;EACA,EAAA,OAAO,KAAK;EACd;;EAEA;EACO,SAASqI,OAAOA,CAAC/E,IAAgB,EAAEgF,IAAc,EAAgB;IACtE,IAAMC,OAAO,GAAG,EAAkB;EAClC,EAAA,IAAI,CAACD,IAAI,CAAC7K,MAAM,EAAE;EAChB;EACA,IAAA,OAAO8K,OAAO;EAChB,EAAA;EACA,EAAA,IAAMvI,GAAG,GAAGsD,IAAI,CAAC2B,UAAU;IAE3B,KAAK,IAAItG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqB,GAAG,GAAI;EACzB,IAAA,IAAMoI,IAAI,GAAGL,UAAU,CAACzE,IAAI,EAAE3E,CAAC,CAAC;EAChC,IAAA,IAAMhD,IAAI,GAAG+L,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAAC7J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;MACjD,IAAM8J,MAAM,GAAGL,IAAI,GAAG,CAAC,GAAGzJ,CAAC,GAAGyJ,IAAI,GAAGpI,GAAG;EACxC,IAAA,IAAIrE,IAAI,KAAK2M,IAAI,CAAC,CAAC,CAAC,EAAE;EACpB,MAAA,IAAIA,IAAI,CAAC7K,MAAM,KAAK,CAAC,EAAE;EACrB;EACA;EACA8K,QAAAA,OAAO,CAACjB,IAAI,CAAChE,IAAI,CAACkF,QAAQ,CAAC7J,CAAC,GAAG,CAAC,EAAE8J,MAAM,CAAC,CAAC;EAC5C,MAAA,CAAC,MAAM;EACL;UACA,IAAMC,UAAU,GAAGL,OAAO,CAAC/E,IAAI,CAACkF,QAAQ,CAAC7J,CAAC,GAAG,CAAC,EAAE8J,MAAM,CAAC,EAAEH,IAAI,CAACtS,KAAK,CAAC,CAAC,CAAC,CAAC;UACvE,IAAI0S,UAAU,CAACjL,MAAM,EAAE;EACrB6J,UAAAA,IAAI,CAACK,KAAK,CAACY,OAAO,EAAEG,UAAU,CAAC;EACjC,QAAA;EACF,MAAA;EACF,IAAA;EACA/J,IAAAA,CAAC,GAAG8J,MAAM;EACZ,EAAA;;EAEA;EACA,EAAA,OAAOF,OAAO;EAChB;EAUA,SAASI,iBAAiBA,CAACC,IAAgB,EAAmB;IAC5D,IAAMC,UAAiB,GAAG,EAAE;EAE5B,EAAA,IAAMC,OAAO,GAAGF,IAAI,CAAC,CAAC,CAAC;;EAEvB;IACA,IAAI3C,KAAK,GAAG,CAAC;EAEb,EAAA,IAAM8C,SAAS,GAAGhB,UAAU,CAACa,IAAI,EAAE3C,KAAK,CAAC;EACzCA,EAAAA,KAAK,IAAI,CAAC;IAEV,IAAI+C,wBAAwB,GAAG,CAAC;IAChC,IAAIC,WAAW,GAAG,CAAC;IAEnB,IAAIH,OAAO,KAAK,CAAC,EAAE;EACjBE,IAAAA,wBAAwB,GAAGjB,UAAU,CAACa,IAAI,EAAE3C,KAAK,CAAC;MAClDgD,WAAW,GAAGlB,UAAU,CAACa,IAAI,EAAE3C,KAAK,GAAG,CAAC,CAAC;EACzCA,IAAAA,KAAK,IAAI,CAAC;EACZ,EAAA,CAAC,MAAM;EACL+C,IAAAA,wBAAwB,GAAGf,UAAU,CAACW,IAAI,EAAE3C,KAAK,CAAC;MAClDgD,WAAW,GAAGhB,UAAU,CAACW,IAAI,EAAE3C,KAAK,GAAG,CAAC,CAAC;EACzCA,IAAAA,KAAK,IAAI,EAAE;EACb,EAAA;;EAEA;EACAA,EAAAA,KAAK,IAAI,CAAC;EAEV,EAAA,IAAIiD,SAAS,GAAGN,IAAI,CAACnL,MAAM,GAAGwL,WAAW;EAEzC,EAAA,IAAME,eAAe,GAAGvB,UAAU,CAACgB,IAAI,EAAE3C,KAAK,CAAC;EAC/CA,EAAAA,KAAK,IAAI,CAAC;IAEV,KAAK,IAAItH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwK,eAAe,EAAExK,CAAC,EAAE,EAAE;MACxC,IAAIyK,cAAc,GAAGnD,KAAK;EAE1B,IAAA,IAAMoD,aAAa,GAAGtB,UAAU,CAACa,IAAI,EAAEQ,cAAc,CAAC;EACtDA,IAAAA,cAAc,IAAI,CAAC;EAEnB,IAAA,IAAME,aAAa,GAAGD,aAAa,GAAG,UAAU;EAChD,IAAA,IAAME,aAAa,GAAG,CAACF,aAAa,GAAG,UAAU,MAAM,EAAE;MAEzD,IAAIE,aAAa,KAAK,CAAC,EAAE;EACvBxO,MAAAA,MAAM,CAACG,IAAI,CAAC,kDAAkD,CAAC;EAC/D,MAAA,OAAO,IAAI;EACb,IAAA;EAEA,IAAA,IAAMsO,kBAAkB,GAAGzB,UAAU,CAACa,IAAI,EAAEQ,cAAc,CAAC;EAC3DA,IAAAA,cAAc,IAAI,CAAC;MAEnBP,UAAU,CAACvB,IAAI,CAAC;EACdgC,MAAAA,aAAa,EAAbA,aAAa;EACbE,MAAAA,kBAAkB,EAAlBA,kBAAkB;EAAE;EACpBrO,MAAAA,IAAI,EAAE;UACJqH,QAAQ,EAAEgH,kBAAkB,GAAGT,SAAS;EACxCjJ,QAAAA,KAAK,EAAEoJ,SAAS;EAChBlJ,QAAAA,GAAG,EAAEkJ,SAAS,GAAGI,aAAa,GAAG;EACnC;EACF,KAAC,CAAC;EAEFJ,IAAAA,SAAS,IAAII,aAAa;;EAE1B;EACA;EACAF,IAAAA,cAAc,IAAI,CAAC;;EAEnB;EACAnD,IAAAA,KAAK,GAAGmD,cAAc;EACxB,EAAA;IAEA,OAAO;EACLJ,IAAAA,wBAAwB,EAAxBA,wBAAwB;EACxBD,IAAAA,SAAS,EAATA,SAAS;EACTD,IAAAA,OAAO,EAAPA,OAAO;EACPK,IAAAA,eAAe,EAAfA,eAAe;EACfN,IAAAA,UAAU,EAAVA;KACD;EACH;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAuCO,SAASY,gBAAgBA,CAAChG,WAAuB,EAAY;IAClE,IAAMyE,MAAgB,GAAG,EAAE;IAC3B,IAAMwB,KAAK,GAAGrB,OAAO,CAAC5E,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EACpD,EAAA,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+K,KAAK,CAACjM,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrC,IAAA,IAAMgL,IAAI,GAAGD,KAAK,CAAC/K,CAAC,CAAC;EACrB,IAAA,IAAMiL,IAAI,GAAGvB,OAAO,CAACsB,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,IAAA,IAAIC,IAAI,EAAS;EACf,MAAA,IAAId,OAAO,GAAGc,IAAI,CAAC,CAAC,CAAC;EACrB,MAAA,IAAMC,OAAO,GAAG9B,UAAU,CAAC6B,IAAI,EAAEd,OAAO,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACzD,MAAA,IAAMgB,IAAI,GAAGzB,OAAO,CAACsB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAA,IAAIG,IAAI,EAAS;EACfhB,QAAAA,OAAO,GAAGgB,IAAI,CAAC,CAAC,CAAC;EACjB,QAAA,IAAMf,SAAS,GAAGhB,UAAU,CAAC+B,IAAI,EAAEhB,OAAO,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3D,QAAA,IAAMiB,IAAI,GAAG1B,OAAO,CAACsB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,QAAA,IAAII,IAAI,EAAS;EACf,UAAA,IAAMC,QAAQ,GAAGtC,OAAO,CAACqC,IAAI,CAACvB,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAC9C,UAAA,IAAM7M,IAA0B,GAAG;cACjCsO,IAAI,EAAE9J,qBAAqB,CAACvI,KAAc;cAC1CsS,IAAI,EAAE/J,qBAAqB,CAACC;aAC7B,CAAC4J,QAAQ,CAAC;EACX;EACA,UAAA,IAAMG,OAAO,GAAG9B,OAAO,CAACsB,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAClE,UAAA,IAAMS,IAAI,GAAGC,SAAS,CAACF,OAAO,CAAC;EAC/B,UAAA,IAAIxO,IAAI,EAAE;EACR;cACAuM,MAAM,CAAC2B,OAAO,CAAC,GAAG;EAAEd,cAAAA,SAAS,EAATA,SAAS;EAAEpN,cAAAA,IAAI,EAAJA,IAAI;EAAEyO,cAAAA,IAAI,EAAJA;eAAM;EAC3ClC,YAAAA,MAAM,CAACvM,IAAI,CAAC,GAAA2O,cAAA,CAAA;EAAKvB,cAAAA,SAAS,EAATA,SAAS;EAAEnN,cAAAA,EAAE,EAAEiO;EAAO,aAAA,EAAKO,IAAI,CAAE;EACpD,UAAA,CAAC,MAAM;EACL;cACAlC,MAAM,CAAC2B,OAAO,CAAC,GAAG;EAChBd,cAAAA,SAAS,EAATA,SAAS;EACTpN,cAAAA,IAAI,EAAEqO,QAAoB;EAC1BI,cAAAA,IAAI,EAAJA;eACD;EACH,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACF,EAAA;EAEA,EAAA,IAAMG,IAAI,GAAGlC,OAAO,CAAC5E,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;EAC3D8G,EAAAA,IAAI,CAAChO,OAAO,CAAC,UAACgO,IAAI,EAAK;EACrB,IAAA,IAAMV,OAAO,GAAG9B,UAAU,CAACwC,IAAI,EAAE,CAAC,CAAC;EACnC,IAAA,IAAMC,KAAK,GAAGtC,MAAM,CAAC2B,OAAO,CAAC;EAC7B,IAAA,IAAIW,KAAK,EAAE;QACTA,KAAK,CAACC,OAAO,GAAG;EACdjI,QAAAA,QAAQ,EAAEuF,UAAU,CAACwC,IAAI,EAAE,EAAE,CAAC;EAC9BG,QAAAA,KAAK,EAAE3C,UAAU,CAACwC,IAAI,EAAE,EAAE;SAC3B;EACH,IAAA;EACF,EAAA,CAAC,CAAC;EAEF,EAAA,OAAOrC,MAAM;EACf;EAEA,SAASmC,SAASA,CAACD,IAAgB,EAAY;EAC7C,EAAA,IAAMO,aAAa,GAAGP,IAAI,CAAC5B,QAAQ,CAAC,CAAC,CAAC;IACtC,IAAMoC,gBAAgB,GAAGD,aAAa,CAACnC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;EACvD,EAAA,IAAMqC,MAAM,GAAGnD,OAAO,CAACiD,aAAa,CAACnC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,IAAIsC,KAAK,GAAGD,MAAM;EAClB,EAAA,IAAIE,YAAY;IAChB,IAAMrF,SAAS,GAAGmF,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,MAAM;EACxD,EAAA,IAAInF,SAAS,EAAE;EACb,IAAA,IAAMsF,MAAM,GAAG3C,OAAO,CAACsC,aAAa,EAAE,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAClD,IAAA,IAAMI,cAAc,GAAGD,MAAM,CAACxC,QAAQ,CAACqC,MAAM,KAAK,MAAM,GAAG,EAAE,GAAG,EAAE,CAAC;MACnE,IAAMK,KAAK,GAAG7C,OAAO,CAAC4C,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;EAC/CC,IAAAA,KAAK,CAAC3O,OAAO,CAAC,UAAC4O,IAAI,EAAK;EACtB,MAAA,IAAMC,IAAI,GAAG/C,OAAO,CAAC8C,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,MAAA,IAAIC,IAAI,EAAS;EACf,QAAA,IAAMC,MAAM,GAAG3D,OAAO,CAAC0D,IAAI,CAAC5C,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C,QAAA,IAAI6C,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,MAAM,EAAE;EAC1C,UAAA,IAAMC,IAAI,GAAGjD,OAAO,CAAC8C,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC,UAAA,IAAIG,IAAI,EAAS;EACf;EACAR,YAAAA,KAAK,GAAGpD,OAAO,CAAC4D,IAAI,CAAC;EACvB,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA;IACA,IAAMC,WAAW,GAAGT,KAAK;EACzB,EAAA,QAAQA,KAAK;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EAAE,MAAA;EACX;EACA,QAAA,IAAMU,OAAO,GAAGnD,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,QAAA,IAAKY,OAAO,IAAYA,OAAO,CAAC/N,MAAM,GAAG,CAAC,EAAE;YAC1CqN,KAAK,IACH,GAAG,GAAGW,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC,CAAC;EACjET,UAAAA,YAAY,GAAGW,0BAA0B,CACvCH,WAAW,KAAK,MAAM,GAAG,MAAM,GAAG,MAAM,EACxCX,gBACF,CAAC;EACH,QAAA;EACA,QAAA;EACF,MAAA;EACA,IAAA,KAAK,MAAM;EAAE,MAAA;EACX,QAAA,IAAMe,QAAQ,GAAGtD,OAAO,CAACsC,aAAa,EAAE,CAACE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,QAAA,IAAMe,OAAO,GAAGvD,OAAO,CAACsD,QAAQ,CAACnD,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3D,QAAA,IAAKoD,OAAO,IAAYA,OAAO,CAACnO,MAAM,GAAG,CAAC,EAAE;YAC1C,IAAIkB,CAAC,GAAG,CAAC;EACT;EACA,UAAA,IAAIiN,OAAO,CAACjN,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;EACzB,YAAA;EACF,UAAA;EACAA,UAAAA,CAAC,GAAGkN,cAAc,CAACD,OAAO,EAAEjN,CAAC,CAAC;YAC9BA,CAAC,IAAI,CAAC,CAAC;EACP,UAAA,IAAM+L,KAAK,GAAGkB,OAAO,CAACjN,CAAC,EAAE,CAAC;YAC1B,IAAI+L,KAAK,GAAG,IAAI,EAAE;cAChB/L,CAAC,IAAI,CAAC,CAAC;EACT,UAAA;YACA,IAAI+L,KAAK,GAAG,IAAI,EAAE;EAChB/L,YAAAA,CAAC,IAAIiN,OAAO,CAACjN,CAAC,EAAE,CAAC,CAAC;EACpB,UAAA;EACA;EACA,UAAA,IAAIiN,OAAO,CAACjN,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;EACzB,YAAA;EACF,UAAA;EACAA,UAAAA,CAAC,GAAGkN,cAAc,CAACD,OAAO,EAAEjN,CAAC,CAAC;EAC9B,UAAA,IAAMmN,UAAU,GAAGF,OAAO,CAACjN,CAAC,EAAE,CAAC;YAC/B,IAAImN,UAAU,KAAK,IAAI,EAAE;EACvBhB,YAAAA,KAAK,IAAI,GAAG,GAAGW,KAAK,CAACK,UAAU,CAAC;EAClC,UAAA,CAAC,MAAM;EACL,YAAA;EACF,UAAA;EACAnN,UAAAA,CAAC,IAAI,EAAE;EACP;EACA,UAAA,IAAIiN,OAAO,CAACjN,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;EACzB,YAAA;EACF,UAAA;EACAA,UAAAA,CAAC,GAAGkN,cAAc,CAACD,OAAO,EAAEjN,CAAC,CAAC;EAC9B,UAAA,IAAMoN,SAAS,GAAGH,OAAO,CAACjN,CAAC,EAAE,CAAC;EAC9B,UAAA,IAAIqN,eAAe,GAAG,CAACD,SAAS,GAAG,IAAI,KAAK,CAAC;YAC7C,IAAIC,eAAe,KAAK,EAAE,EAAE;cAC1BA,eAAe,IACb,CAAC,IAAI,CAACD,SAAS,GAAG,GAAG,KAAK,CAAC,CAAC,IAAI,CAACH,OAAO,CAACjN,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC;EAC7D,UAAA;YACAmM,KAAK,IAAI,GAAG,GAAGkB,eAAe;EAChC,QAAA;EACA,QAAA;EACF,MAAA;EACA,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EAAE,MAAA;EACX,QAAA,IAAMC,OAAO,GAAG5D,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,QAAA,IAAKqB,OAAO,IAAYA,OAAO,CAACxO,MAAM,GAAG,EAAE,EAAE;EAC3C,UAAA,IAAMyO,WAAW,GAAGD,OAAO,CAAC,CAAC,CAAC;EAC9B,UAAA,IAAME,YAAY,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACD,WAAW,IAAI,CAAC,CAAC;EAC1D,UAAA,IAAME,iBAAiB,GAAGF,WAAW,GAAG,IAAI;EAC5C,UAAA,IAAMG,aAAa,GAAGtE,UAAU,CAACkE,OAAO,EAAE,CAAC,CAAC;YAC5C,IAAMK,QAAQ,GAAG,CAACJ,WAAW,GAAG,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG;EACtD,UAAA,IAAMK,QAAQ,GAAGN,OAAO,CAAC,EAAE,CAAC;YAC5B,IAAMO,mBAAmB,GAAGP,OAAO,CAACzD,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACnDsC,UAAAA,KAAK,IAAI,GAAG,GAAGqB,YAAY,GAAGC,iBAAiB;EAC/CtB,UAAAA,KAAK,IACH,GAAG,GAAG2B,eAAe,CAACJ,aAAa,CAAC,CAACvW,QAAQ,CAAC,EAAE,CAAC,CAAC4W,WAAW,EAAE;EACjE5B,UAAAA,KAAK,IAAI,GAAG,GAAGwB,QAAQ,GAAGC,QAAQ;YAClC,IAAII,gBAAgB,GAAG,EAAE;YACzB,KAAK,IAAIhO,EAAC,GAAG6N,mBAAmB,CAAC/O,MAAM,EAAEkB,EAAC,EAAE,GAAI;EAC9C,YAAA,IAAMiO,KAAI,GAAGJ,mBAAmB,CAAC7N,EAAC,CAAC;cACnC,IAAIiO,KAAI,IAAID,gBAAgB,EAAE;gBAC5B,IAAME,WAAW,GAAGD,KAAI,CAAC9W,QAAQ,CAAC,EAAE,CAAC,CAAC4W,WAAW,EAAE;EACnDC,cAAAA,gBAAgB,GAAG,GAAG,GAAGE,WAAW,GAAGF,gBAAgB;EACzD,YAAA;EACF,UAAA;EACA7B,UAAAA,KAAK,IAAI6B,gBAAgB;EAC3B,QAAA;EACA5B,QAAAA,YAAY,GAAGW,0BAA0B,CACvCH,WAAW,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,EACvCX,gBACF,CAAC;EACD,QAAA;EACF,MAAA;EACA,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EACX,IAAA,KAAK,MAAM;EAAE,MAAA;UACXE,KAAK,GAAGY,0BAA0B,CAACZ,KAAK,EAAEF,gBAAgB,CAAC,IAAIE,KAAK;EACpE,QAAA;EACF,MAAA;EACA,IAAA,KAAK,MAAM;EAAE,MAAA;EACX,QAAA,IAAMgC,OAAO,GAAGzE,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,QAAA,IAAKkC,OAAO,IAAYA,OAAO,CAACrP,MAAM,GAAG,CAAC,EAAE;EAC1C,UAAA,IAAMsP,OAAO,GAAGD,OAAO,CAAC,CAAC,CAAC;EAC1B,UAAA,IAAMlK,KAAK,GAAGkK,OAAO,CAAC,CAAC,CAAC;YACxB,IAAME,QAAQ,GAAIF,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI;YACzChC,KAAK,IACH,GAAG,GACHmC,cAAc,CAACF,OAAO,CAAC,GACvB,GAAG,GACHE,cAAc,CAACrK,KAAK,CAAC,GACrB,GAAG,GACHqK,cAAc,CAACD,QAAQ,CAAC;EAC5B,QAAA;EACA,QAAA;EACF,MAAA;EACA,IAAA,KAAK,MAAM;EAAE,MAAA;EACX,QAAA,IAAME,OAAO,GAAG7E,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,QAAA,IAAKsC,OAAO,IAAYA,OAAO,CAACzP,MAAM,GAAG,CAAC,EAAE;EAC1C,UAAA,IAAMsP,QAAO,GAAGG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;EAChC,UAAA,IAAMtK,MAAK,GAAGsK,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;YAC/B,IAAMZ,SAAQ,GAAGY,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG;YAC7C,IAAMC,YAAY,GAAG,CAACD,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;YAC7C,IAAME,SAAS,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;EAC1C,UAAA,IAAMF,SAAQ,GACZD,QAAO,KAAK,CAAC,IAAII,YAAY,GACzBC,SAAS,GACP,EAAE,GACF,EAAE,GACJD,YAAY,GACV,EAAE,GACF,CAAC;YACT,IAAME,UAAU,GAAG,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;YAC3C,IAAMI,kBAAkB,GAAG,CAACJ,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;YACnD,IAAMK,kBAAkB,GAAG,CAACL,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;EACnD,UAAA,IAAMM,oBAAoB,GAAGN,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;EAC9C;EACA;EACA;YACA,IAAMO,cAAc,GAAG,CAAC;YACxB,IAAMC,uBAAuB,GAAG,CAAC;YACjC,IAAMC,kBAAkB,GAAG,CAAC;YAC5B,IAAMC,kBAAkB,GAAG,CAAC;YAC5B9C,KAAK,IACH,GAAG,GACHiC,QAAO,GACP,GAAG,GACHE,cAAc,CAACrK,MAAK,CAAC,GACrB0J,SAAQ,GACR,GAAG,GACHW,cAAc,CAACD,SAAQ,CAAC,GACxB,GAAG,GACHK,UAAU,GACV,GAAG,GACHC,kBAAkB,GAClBC,kBAAkB,GAClBC,oBAAoB,GACpB,GAAG,GACHP,cAAc,CAACQ,cAAc,CAAC,GAC9B,GAAG,GACHR,cAAc,CAACS,uBAAuB,CAAC,GACvC,GAAG,GACHT,cAAc,CAACU,kBAAkB,CAAC,GAClC,GAAG,GACHC,kBAAkB;EACpB7C,UAAAA,YAAY,GAAGW,0BAA0B,CAAC,MAAM,EAAEd,gBAAgB,CAAC;EACrE,QAAA;EACA,QAAA;EACF,MAAA;EAQF;IACA,OAAO;EAAEE,IAAAA,KAAK,EAALA,KAAK;EAAEpF,IAAAA,SAAS,EAATA,SAAS;EAAEqF,IAAAA,YAAY,EAAZA;KAAc;EAC3C;EAEA,SAASW,0BAA0BA,CACjCb,MAAc,EACdD,gBAA4B,EACR;IACpB,IAAMiD,UAAU,GAAGxF,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IACvD,IAAMkD,OAAO,GAAGD,UAAU,CAACpQ,MAAM,GAC7BoQ,UAAU,CAAC,CAAC,CAAC,GACbxF,OAAO,CAACuC,gBAAgB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,EAAA,IAAIkD,OAAO,EAAS;MAClB,IAAMC,WAAW,GAAID,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI;EAC5C,IAAA,IAAME,SAAS,GAAKF,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI,GAAMA,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAK;EACzE,IAAA,OACEjD,MAAM,GACN,GAAG,GACHoC,cAAc,CAACc,WAAW,CAAC,GAC3B,GAAG,GACHd,cAAc,CAACe,SAAS,CAAC;EAE7B,EAAA;EACF;EAEA,SAASvB,eAAeA,CAAC3E,GAAW,EAAE;IACpC,IAAII,MAAM,GAAG,CAAC;IACd,KAAK,IAAIvJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;EAC3BuJ,IAAAA,MAAM,IAAI,CAAEJ,GAAG,IAAInJ,CAAC,GAAI,CAAC,KAAM,EAAE,GAAG,CAAC,GAAGA,CAAE;EAC5C,EAAA;IACA,OAAOuJ,MAAM,KAAK,CAAC;EACrB;EAEA,SAAS2D,cAAcA,CAACoC,KAAiB,EAAEtP,CAAS,EAAU;EAC5D,EAAA,IAAMuP,KAAK,GAAGvP,CAAC,GAAG,CAAC;IACnB,OAAOsP,KAAK,CAACtP,CAAC,EAAE,CAAC,GAAG,IAAI,IAAIA,CAAC,GAAGuP,KAAK,EAAE;EACrC;EAAA,EAAA;EAEF,EAAA,OAAOvP,CAAC;EACV;EAEA,SAAS8M,KAAKA,CAAC0C,CAAS,EAAU;EAChC,EAAA,OAAO,CAAC,GAAG,GAAGA,CAAC,CAACrY,QAAQ,CAAC,EAAE,CAAC,CAAC4W,WAAW,EAAE,EAAE1W,KAAK,CAAC,EAAE,CAAC;EACvD;EAEA,SAASiX,cAAcA,CAACmB,GAAW,EAAU;IAC3C,OAAO,CAACA,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAIA,GAAG;EACpC;EAEO,SAASC,kBAAkBA,CAChC5K,WAAgD,EAChD6K,WAA+B,EAC/B;EACA,EAAA,IAAI,CAAC7K,WAAW,IAAI,CAAC6K,WAAW,EAAE;EAChC,IAAA;EACF,EAAA;EACA,EAAA,IAAMjK,KAAK,GAAGiK,WAAW,CAACjK,KAAK;EAC/B,EAAA,IAAIA,KAAK,IAAIiK,WAAW,CAACC,kBAAkB,EAAE;EAC3CC,IAAAA,gBAAgB,CAAC/K,WAAW,EAAE,UAACgL,IAAI,EAAEC,OAAO,EAAK;EAC/C;QACA,IAAMC,SAAS,GAAGF,IAAI,CAACjG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACtC,MAAA,IAAI,CAACmG,SAAS,CAAChR,IAAI,CAAC,UAACiR,CAAC,EAAA;UAAA,OAAKA,CAAC,KAAK,CAAC;EAAA,MAAA,CAAA,CAAC,EAAE;EACnC7T,QAAAA,MAAM,CAACzC,GAAG,CAAA,8BAAA,IAENoW,OAAO,GAAG,GAAG,GAAG,GAAG,CAAA,GAAA,oBAAA,GACA5P,UAAU,CAAC6P,SAAS,CAAC,GAAA,MAAA,GAAO7P,UAAU,CAACuF,KAAK,CACnE,CAAC;EACDoK,QAAAA,IAAI,CAAClN,GAAG,CAAC8C,KAAK,EAAE,CAAC,CAAC;EACpB,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA;EACF;EAEO,SAASwK,mBAAmBA,CACjCpL,WAAoC,EACT;IAC3B,IAAMqL,MAAiC,GAAG,EAAE;EAC5CN,EAAAA,gBAAgB,CAAC/K,WAAW,EAAE,UAACgL,IAAI,EAAA;EAAA,IAAA,OAAKK,MAAM,CAACxH,IAAI,CAACmH,IAAI,CAACjG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAAA,CAAA,CAAC;EAC1E,EAAA,OAAOsG,MAAM;EACf;EAEA,SAASN,gBAAgBA,CACvB/K,WAAoC,EACpCsL,SAAoE,EACpE;IACA,IAAMrF,KAAK,GAAGrB,OAAO,CAAC5E,WAAW,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EACpDiG,EAAAA,KAAK,CAACnN,OAAO,CAAC,UAACoN,IAAI,EAAK;EACtB,IAAA,IAAMS,IAAI,GAAG/B,OAAO,CAACsB,IAAI,EAAE,CACzB,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,CACP,CAAC,CAAC,CAAC,CAAuB;MAC3B,IAAI,CAACS,IAAI,EAAE;EACX,IAAA,IAAMO,aAAa,GAAGP,IAAI,CAAC5B,QAAQ,CAAC,CAAC,CAAC;MACtC,IAAIwG,QAAQ,GAAG3G,OAAO,CAACsC,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC;EAC/C,IAAA,IAAM+D,OAAO,GAAGM,QAAQ,CAACvR,MAAM,GAAG,CAAC;MACnC,IAAI,CAACiR,OAAO,EAAE;QACZM,QAAQ,GAAG3G,OAAO,CAACsC,aAAa,EAAE,CAAC,MAAM,CAAC,CAAC;EAC7C,IAAA;EACAqE,IAAAA,QAAQ,CAACzS,OAAO,CAAC,UAAC0S,GAAG,EAAK;EACxB,MAAA,IAAMhE,cAAc,GAAGyD,OAAO,GAAGO,GAAG,CAACzG,QAAQ,CAAC,EAAE,CAAC,GAAGyG,GAAG,CAACzG,QAAQ,CAAC,EAAE,CAAC;QACpE,IAAM0G,SAAS,GAAG7G,OAAO,CAAC4C,cAAc,EAAE,CAAC,MAAM,CAAC,CAAC;EACnDiE,MAAAA,SAAS,CAAC3S,OAAO,CAAC,UAAC4O,IAAI,EAAK;EAC1B,QAAA,IAAMsD,IAAI,GAAGU,SAAS,CAAChE,IAAI,CAAC;EAC5B,QAAA,IAAIsD,IAAI,EAAE;EACRM,UAAAA,SAAS,CAACN,IAAI,EAAEC,OAAO,CAAC;EAC1B,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,CAAC;EACJ,EAAA,CAAC,CAAC;EACJ;EAEO,SAASS,SAASA,CAAChE,IAAgB,EAAsB;EAC9D,EAAA,IAAMC,IAAI,GAAG/C,OAAO,CAAC8C,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAuB;EAC7D,EAAA,IAAIC,IAAI,EAAE;EACR,IAAA,IAAMC,MAAM,GAAG3D,OAAO,CAAC0D,IAAI,CAAC5C,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C,IAAA,IAAI6C,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,MAAM,EAAE;EAC1C,MAAA,IAAMoD,IAAI,GAAGpG,OAAO,CAAC8C,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAuB;EACrE,MAAA,IAAIsD,IAAI,EAAE;EACR,QAAA,OAAOA,IAAI;EACb,MAAA;EACF,IAAA;EAGF,EAAA;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAWO,SAASW,aAAaA,CAC3B9L,IAAgB,EAChB+L,QAAkB,EAClBtU,MAAe,EACa;IAC5B,IAAMuU,MAAkC,GAAG,EAAE;IAC7C,IAAMC,KAAK,GAAGlH,OAAO,CAAC/E,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EAC7C,EAAA,KAAK,IAAI3E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4Q,KAAK,CAAC9R,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrC,IAAA,IAAM6Q,IAAI,GAAGD,KAAK,CAAC5Q,CAAC,CAAC;EACrB;EACA;EACA;EACA;EACA,IAAA,IAAM8Q,IAAI,GAAGpH,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EACvC;EACA,IAAA,IAAM5T,EAAE,GAAGmM,UAAU,CAAC0H,IAAI,EAAE,CAAC,CAAC;EAC9B,IAAA,IAAMjF,KAAK,GAAG6E,QAAQ,CAACzT,EAAE,CAAC;MAC1B,IAAI,CAAC4O,KAAK,EAAE;EACV,MAAA;EACF,IAAA;MACC8E,MAAM,CAAC1T,EAAE,CAAC,KAAV0T,MAAM,CAAC1T,EAAE,CAAC,GAAa;EACtBkE,MAAAA,KAAK,EAAE4P,GAAG;EACVlN,MAAAA,QAAQ,EAAE,CAAC;EACXmN,MAAAA,WAAW,EAAE,CAAC;QACd5G,SAAS,EAAEyB,KAAK,CAACzB,SAAS;QAC1BpN,IAAI,EAAE6O,KAAK,CAAC7O;OACb,CAAA;EACD,IAAA,IAAMiU,UAAsB,GAAGN,MAAM,CAAC1T,EAAE,CAAC;EACzC;EACA,IAAA,IAAMiU,IAAI,GAAGxH,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAEvC,IAAA,IAAIK,IAAI,EAAS;EACf,MAAA,IAAM/G,OAAO,GAAG+G,IAAI,CAAC,CAAC,CAAC;EACvB,MAAA,IAAIC,QAAQ,GAAG/H,UAAU,CAAC8H,IAAI,EAAE,CAAC,CAAC;QAClC,IAAI/G,OAAO,KAAK,CAAC,EAAE;EACjB;EACA;EACA;UACA,IAAIgH,QAAQ,KAAKzI,YAAU,EAAE;YAC3BtM,MAAM,CAACG,IAAI,CAAA,kFAEX,CAAC;EACH,QAAA,CAAC,MAAM;YACL4U,QAAQ,IAAIzI,YAAU,GAAG,CAAC;EAC1ByI,UAAAA,QAAQ,IAAI/H,UAAU,CAAC8H,IAAI,EAAE,CAAC,CAAC;EACjC,QAAA;EACF,MAAA;EACA,MAAA,IACE9K,cAAA,CAAgB+K,QAAQ,CAAC,KACxB,CAAC9K,cAAA,CAAgB4K,UAAU,CAAC9P,KAAK,CAAC,IAAIgQ,QAAQ,GAAGF,UAAU,CAAC9P,KAAK,CAAC,EACnE;UACA8P,UAAU,CAAC9P,KAAK,GAAGgQ,QAAQ;EAC7B,MAAA;EACF,IAAA;EAEA,IAAA,IAAMC,YAAY,GAAGvF,KAAK,CAACC,OAAO;EAClC,IAAA,IAAMuF,SAAS,GAAGjI,UAAU,CAAC0H,IAAI,EAAE,CAAC,CAAC,IAAGM,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAErF,KAAK,CAAC;MAC5D,IAAIuF,qBAA6B,GAAG,CAAAF,YAAY,oBAAZA,YAAY,CAAEvN,QAAQ,KAAI,CAAC;MAC/D,IAAIwN,SAAS,GAAG,QAAQ,EAAE;EACxB;QACA,IAAIA,SAAS,GAAG,QAAQ,EAAE;EACxB;EACA;EACAC,QAAAA,qBAAqB,GAAGlI,UAAU,CAAC0H,IAAI,EAAE,EAAE,CAAC;EAC9C,MAAA,CAAC,MAAM;EACL;EACAQ,QAAAA,qBAAqB,GAAGlI,UAAU,CAAC0H,IAAI,EAAE,CAAC,CAAC;EAC7C,MAAA;EACF,IAAA;MACA,IAAMS,KAAK,GAAG7H,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;EACrC,IAAA,IAAIW,SAAS,GAAGP,UAAU,CAAC9P,KAAK,IAAI,CAAC;MACrC,IAAIsQ,WAAW,GAAG,CAAC;MACnB,IAAIC,cAAc,GAAGJ,qBAAqB;EAC1C,IAAA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACzS,MAAM,EAAE6S,CAAC,EAAE,EAAE;EACrC,MAAA,IAAMC,IAAI,GAAGL,KAAK,CAACI,CAAC,CAAC;EACrB,MAAA,IAAMX,WAAW,GAAG5H,UAAU,CAACwI,IAAI,EAAE,CAAC,CAAC;EACvC,MAAA,IAAMC,WAAW,GAAGZ,UAAU,CAACD,WAAW;QAC1CC,UAAU,CAACD,WAAW,IAAIA,WAAW;EACrC;EACA,MAAA,IAAMc,iBAAiB,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EACxC,MAAA,IAAMG,uBAAuB,GAAGH,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EAC9C,MAAA,IAAMI,qBAAqB,GAAGJ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EAC5C,MAAA,IAAMK,iBAAiB,GAAGL,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EACxC,MAAA,IAAMM,kBAAkB,GAAGN,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EACzC,MAAA,IAAMO,kCAAkC,GAAGP,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;QACzD,IAAI1I,MAAM,GAAG,CAAC;QACd,IAAIkJ,SAAS,GAAGpB,WAAW;EAC3B,MAAA,IAAIc,iBAAiB,EAAE;EACrB5I,QAAAA,MAAM,IAAI,CAAC;EACb,MAAA;QACA,IAAI6I,uBAAuB,IAAIf,WAAW,EAAE;UAC1C,IAAMqB,eAAe,GAAGT,IAAI,CAAC1I,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;UAC/C,IAAI,CAACmJ,eAAe,IAAIpB,UAAU,CAACqB,aAAa,KAAKtU,SAAS,EAAE;YAC9DiT,UAAU,CAACqB,aAAa,GAAGT,WAAW;EACxC,QAAA;EACA3I,QAAAA,MAAM,IAAI,CAAC;EACX,QAAA,IAAI8I,qBAAqB,EAAE;EACzBN,UAAAA,cAAc,GAAGtI,UAAU,CAACwI,IAAI,EAAE1I,MAAM,CAAC;EACzCA,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA,CAAC,MAAM;EACLwI,UAAAA,cAAc,GAAGJ,qBAAqB;EACxC,QAAA;EACA,QAAA,IAAIW,iBAAiB,EAAE;EACrB/I,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA;EACA,QAAA,IAAIiJ,kCAAkC,EAAE;EACtCjJ,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA;EACAsI,QAAAA,SAAS,IAAIE,cAAc;EAC3BD,QAAAA,WAAW,IAAIC,cAAc;EAC7BU,QAAAA,SAAS,EAAE;EACb,MAAA;QACA,OAAOA,SAAS,EAAE,EAAE;EAClB,QAAA,IAAIJ,qBAAqB,EAAE;EACzBN,UAAAA,cAAc,GAAGtI,UAAU,CAACwI,IAAI,EAAE1I,MAAM,CAAC;EACzCA,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA,CAAC,MAAM;EACLwI,UAAAA,cAAc,GAAGJ,qBAAqB;EACxC,QAAA;EACA,QAAA,IAAIW,iBAAiB,EAAE;EACrB/I,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA;EACA,QAAA,IAAIgJ,kBAAkB,EAAE;YACtB,IAAMG,gBAAe,GAAGT,IAAI,CAAC1I,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;YAC/C,IAAI,CAACmJ,gBAAe,EAAE;EACpB,YAAA,IAAIpB,UAAU,CAACqB,aAAa,KAAKtU,SAAS,EAAE;gBAC1CiT,UAAU,CAACqB,aAAa,GACtBrB,UAAU,CAACD,WAAW,IAAIoB,SAAS,GAAG,CAAC,CAAC;gBAC1CnB,UAAU,CAACsB,aAAa,GAAGf,SAAS;EACtC,YAAA;EACF,UAAA;EACAtI,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA;EACA,QAAA,IAAIiJ,kCAAkC,EAAE;EACtCjJ,UAAAA,MAAM,IAAI,CAAC;EACb,QAAA;EACAsI,QAAAA,SAAS,IAAIE,cAAc;EAC3BD,QAAAA,WAAW,IAAIC,cAAc;EAC/B,MAAA;EACA,MAAA,IAAI,CAACD,WAAW,IAAIH,qBAAqB,EAAE;UACzCG,WAAW,IAAIH,qBAAqB,GAAGN,WAAW;EACpD,MAAA;EACF,IAAA;MACAC,UAAU,CAACpN,QAAQ,IAAI4N,WAAW;EACpC,EAAA;IACA,IAAI,CAAC9S,MAAM,CAAChB,IAAI,CAACgT,MAAM,CAAC,CAAC3R,IAAI,CAAC,UAACkM,OAAO,EAAA;EAAA,IAAA,OAAKyF,MAAM,CAACzF,OAAO,CAAC,CAACrH,QAAQ;EAAA,EAAA,CAAA,CAAC,EAAE;EACpE;MACA,IAAI2O,YAAY,GAAGC,QAAQ;MAC3B,IAAIC,UAAU,GAAG,CAAC;MAClB,IAAMC,KAAK,GAAGjJ,OAAO,CAAC/E,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;EACrC,IAAA,KAAK,IAAI3E,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG2S,KAAK,CAAC7T,MAAM,EAAEkB,GAAC,EAAE,EAAE;QACrC,IAAMiK,IAAI,GAAGD,iBAAiB,CAAC2I,KAAK,CAAC3S,GAAC,CAAC,CAAC;EACxC,MAAA,IAAIiK,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAEC,UAAU,EAAE;EACpBsI,QAAAA,YAAY,GAAG3a,IAAI,CAAC+D,GAAG,CACrB4W,YAAY,EACZvI,IAAI,CAACI,wBAAwB,GAAGJ,IAAI,CAACG,SACvC,CAAC;UACD,IAAMwI,kBAAkB,GAAG3I,IAAI,CAACC,UAAU,CAAC2I,MAAM,CAC/C,UAACC,GAAG,EAAEC,GAAG,EAAA;YAAA,OAAKD,GAAG,GAAGC,GAAG,CAACvW,IAAI,CAACqH,QAAQ,IAAI,CAAC;EAAA,QAAA,CAAA,EAC1C,CACF,CAAC;EACD6O,QAAAA,UAAU,GAAG7a,IAAI,CAACsD,GAAG,CACnBuX,UAAU,EACVE,kBAAkB,GAAG3I,IAAI,CAACI,wBAAwB,GAAGJ,IAAI,CAACG,SAC5D,CAAC;EACH,MAAA;EACF,IAAA;EACA,IAAA,IAAIsI,UAAU,IAAI7L,cAAA,CAAgB6L,UAAU,CAAC,EAAE;QAC7C/T,MAAM,CAAChB,IAAI,CAACgT,MAAM,CAAC,CAAC/S,OAAO,CAAC,UAACsN,OAAO,EAAK;EACvC,QAAA,IAAI,CAACyF,MAAM,CAACzF,OAAO,CAAC,CAACrH,QAAQ,EAAE;YAC7B8M,MAAM,CAACzF,OAAO,CAAC,CAACrH,QAAQ,GACtB6O,UAAU,GAAG/B,MAAM,CAACzF,OAAO,CAAC,CAACd,SAAS,GAAGuG,MAAM,CAACzF,OAAO,CAAC,CAAC/J,KAAK;EAClE,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA;EACF,EAAA;EACA,EAAA,OAAOwP,MAAM;EACf;;EAEA;EACO,SAASqC,iBAAiBA,CAC/BrO,IAA6B,EACb;EAChB,EAAA,IAAMsO,cAA8B,GAAG;EACrCC,IAAAA,KAAK,EAAE,IAAI;EACXC,IAAAA,SAAS,EAAE;KACZ;IAED,IAAMC,KAAK,GAAG1J,OAAO,CAAC/E,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;EACrC,EAAA,IAAIyO,KAAK,CAACtU,MAAM,GAAG,CAAC,EAAE;MACpBmU,cAAc,CAACE,SAAS,GAAGxO,IAAI;EAC/B,IAAA,OAAOsO,cAAc;EACvB,EAAA;IACA,IAAMI,IAAI,GAAGD,KAAK,CAACA,KAAK,CAACtU,MAAM,GAAG,CAAC,CAAC;EACpC;EACAmU,EAAAA,cAAc,CAACC,KAAK,GAAGvO,IAAI,CAACtN,KAAK,CAAC,CAAC,EAAEgc,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;EACzDL,EAAAA,cAAc,CAACE,SAAS,GAAGxO,IAAI,CAACtN,KAAK,CAACgc,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;EAC1D,EAAA,OAAOL,cAAc;EACvB;EAOO,SAASM,gBAAgBA,CAACC,KAAiB,EAAEC,KAAiB,EAAE;EACrE,EAAA,IAAMC,IAAI,GAAG,IAAInT,UAAU,CAACiT,KAAK,CAAC1U,MAAM,GAAG2U,KAAK,CAAC3U,MAAM,CAAC;EACxD4U,EAAAA,IAAI,CAAC9Q,GAAG,CAAC4Q,KAAK,CAAC;IACfE,IAAI,CAAC9Q,GAAG,CAAC6Q,KAAK,EAAED,KAAK,CAAC1U,MAAM,CAAC;EAC7B,EAAA,OAAO4U,IAAI;EACb;EAaO,SAASC,YAAYA,CAC1BC,UAAkB,EAClB/H,KAAuB,EACL;IAClB,IAAMgI,UAAU,GAAG,EAAsB;EACzC,EAAA,IAAMC,SAAS,GAAGjI,KAAK,CAACkI,OAAO;EAC/B,EAAA,IAAM3J,SAAS,GAAGyB,KAAK,CAACzB,SAAS;EACjC,EAAA,IAAMc,OAAO,GAAGW,KAAK,CAAC5O,EAAE;IACxB,IAAI+W,YAAY,GAAG,KAAK;IAExB,IAAMZ,KAAK,GAAG1J,OAAO,CAACoK,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;EAC1CV,EAAAA,KAAK,CAACa,GAAG,CAAC,UAACC,IAAI,EAAK;EAClB,IAAA,IAAMC,UAAU,GAAGD,IAAI,CAACZ,UAAU,GAAG,CAAC;MACtC,IAAM1C,KAAK,GAAGlH,OAAO,CAACwK,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC;EACrCtD,IAAAA,KAAK,CAACqD,GAAG,CAAC,UAACpD,IAAI,EAAK;EAClB;EACA,MAAA,IAAMM,QAAQ,GAAGzH,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAACoD,GAAG,CAAC,UAAC/C,IAAI,EAAK;EACrD,QAAA,IAAM/G,OAAO,GAAG+G,IAAI,CAAC,CAAC,CAAC;EACvB,QAAA,IAAI3H,MAAM,GAAGH,UAAU,CAAC8H,IAAI,EAAE,CAAC,CAAC;UAChC,IAAI/G,OAAO,KAAK,CAAC,EAAE;YACjBZ,MAAM,IAAI1R,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EACzBuP,UAAAA,MAAM,IAAIH,UAAU,CAAC8H,IAAI,EAAE,CAAC,CAAC;EAC/B,QAAA;UACA,OAAO3H,MAAM,GAAGa,SAAS;QAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;QAEL,IAAK+G,QAAQ,KAAanT,SAAS,EAAE;EACnC4V,QAAAA,UAAU,GAAGzC,QAAQ;EACvB,MAAA;EAEA,MAAA,OAAOzH,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAACoD,GAAG,CAAC,UAACnD,IAAI,EAAK;EAC3C,QAAA,IAAM7T,EAAE,GAAGmM,UAAU,CAAC0H,IAAI,EAAE,CAAC,CAAC;UAC9B,IAAMO,SAAS,GAAGjI,UAAU,CAAC0H,IAAI,EAAE,CAAC,CAAC,GAAG,QAAQ;EAChD,QAAA,IAAMsD,qBAAqB,GAAG,CAAC/C,SAAS,GAAG,QAAQ,MAAM,CAAC;EAC1D,QAAA,IAAMgD,6BAA6B,GAAG,CAAChD,SAAS,GAAG,QAAQ,MAAM,CAAC;EAClE,QAAA,IAAMiD,4BAA4B,GAAG,CAACjD,SAAS,GAAG,QAAQ,MAAM,CAAC;UACjE,IAAIC,qBAAqB,GAAG,CAAC;EAC7B,QAAA,IAAMiD,wBAAwB,GAAG,CAAClD,SAAS,GAAG,QAAQ,MAAM,CAAC;UAC7D,IAAImD,iBAAiB,GAAG,CAAC;EACzB,QAAA,IAAMC,yBAAyB,GAAG,CAACpD,SAAS,GAAG,QAAQ,MAAM,CAAC;UAC9D,IAAIqD,UAAU,GAAG,CAAC;UAElB,IAAIzX,EAAE,KAAKiO,OAAO,EAAE;EAClB,UAAA,IAAIkJ,qBAAqB,EAAE;EACzBM,YAAAA,UAAU,IAAI,CAAC;EACjB,UAAA;EACA,UAAA,IAAIL,6BAA6B,EAAE;EACjCK,YAAAA,UAAU,IAAI,CAAC;EACjB,UAAA;EACA,UAAA,IAAIJ,4BAA4B,EAAE;EAChChD,YAAAA,qBAAqB,GAAGlI,UAAU,CAAC0H,IAAI,EAAE4D,UAAU,CAAC;EACpDA,YAAAA,UAAU,IAAI,CAAC;EACjB,UAAA;EACA,UAAA,IAAIH,wBAAwB,EAAE;EAC5BC,YAAAA,iBAAiB,GAAGpL,UAAU,CAAC0H,IAAI,EAAE4D,UAAU,CAAC;EAChDA,YAAAA,UAAU,IAAI,CAAC;EACjB,UAAA;EACA,UAAA,IAAID,yBAAyB,EAAE;EAC7BC,YAAAA,UAAU,IAAI,CAAC;EACjB,UAAA;EACA,UAAA,IAAI7I,KAAK,CAAC7O,IAAI,KAAK,OAAO,EAAE;EAC1BgX,YAAAA,YAAY,GAAGW,MAAM,CAAC9I,KAAK,CAACM,KAAK,CAAC;EACpC,UAAA;EAEAzC,UAAAA,OAAO,CAACmH,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAACoD,GAAG,CAAC,UAACrC,IAAI,EAAK;EACpC,YAAA,IAAMzH,OAAO,GAAGyH,IAAI,CAAC,CAAC,CAAC;cACvB,IAAM7F,KAAK,GAAG3C,UAAU,CAACwI,IAAI,EAAE,CAAC,CAAC,GAAG,QAAQ;EAC5C,YAAA,IAAME,iBAAiB,GAAG,CAAC/F,KAAK,GAAG,QAAQ,MAAM,CAAC;cAClD,IAAI6I,UAAU,GAAG,CAAC;EAClB,YAAA,IAAM7C,uBAAuB,GAAG,CAAChG,KAAK,GAAG,QAAQ,MAAM,CAAC;EACxD,YAAA,IAAMiG,qBAAqB,GAAG,CAACjG,KAAK,GAAG,QAAQ,MAAM,CAAC;cACtD,IAAI2F,cAAc,GAAG,CAAC;EACtB,YAAA,IAAMO,iBAAiB,GAAG,CAAClG,KAAK,GAAG,QAAQ,MAAM,CAAC;cAClD,IAAI8I,UAAU,GAAG,CAAC;EAClB,YAAA,IAAM3C,kBAAkB,GAAG,CAACnG,KAAK,GAAG,QAAQ,MAAM,CAAC;EACnD,YAAA,IAAM+I,+BAA+B,GAAG,CAAC/I,KAAK,GAAG,QAAQ,MAAM,CAAC;cAChE,IAAIgJ,iBAAiB,GAAG,CAAC;EACzB,YAAA,IAAM/D,WAAW,GAAG5H,UAAU,CAACwI,IAAI,EAAE,CAAC,CAAC;EACvC,YAAA,IAAIoD,UAAU,GAAG,CAAC,CAAC;;EAEnB,YAAA,IAAIlD,iBAAiB,EAAE;EACrB8C,cAAAA,UAAU,GAAGxL,UAAU,CAACwI,IAAI,EAAEoD,UAAU,CAAC;EACzCA,cAAAA,UAAU,IAAI,CAAC;EACjB,YAAA;EACA,YAAA,IAAIjD,uBAAuB,EAAE;EAC3BiD,cAAAA,UAAU,IAAI,CAAC;EACjB,YAAA;EAEA,YAAA,IAAIC,YAAY,GAAGL,UAAU,GAAGT,UAAU;cAE1C,KAAK,IAAIe,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGlE,WAAW,EAAEkE,EAAE,EAAE,EAAE;EACvC,cAAA,IAAIlD,qBAAqB,EAAE;EACzBN,gBAAAA,cAAc,GAAGtI,UAAU,CAACwI,IAAI,EAAEoD,UAAU,CAAC;EAC7CA,gBAAAA,UAAU,IAAI,CAAC;EACjB,cAAA,CAAC,MAAM;EACLtD,gBAAAA,cAAc,GAAGJ,qBAAqB;EACxC,cAAA;EACA,cAAA,IAAIW,iBAAiB,EAAE;EACrB4C,gBAAAA,UAAU,GAAGzL,UAAU,CAACwI,IAAI,EAAEoD,UAAU,CAAC;EACzCA,gBAAAA,UAAU,IAAI,CAAC;EACjB,cAAA,CAAC,MAAM;EACLH,gBAAAA,UAAU,GAAGL,iBAAiB;EAChC,cAAA;EACA,cAAA,IAAItC,kBAAkB,EAAE;EACtB8C,gBAAAA,UAAU,IAAI,CAAC;EACjB,cAAA;EACA,cAAA,IAAIF,+BAA+B,EAAE;kBACnC,IAAI3K,OAAO,KAAK,CAAC,EAAE;EACjB4K,kBAAAA,iBAAiB,GAAG3L,UAAU,CAACwI,IAAI,EAAEoD,UAAU,CAAC;EAClD,gBAAA,CAAC,MAAM;EACLD,kBAAAA,iBAAiB,GAAG1L,UAAU,CAACuI,IAAI,EAAEoD,UAAU,CAAC;EAClD,gBAAA;EACAA,gBAAAA,UAAU,IAAI,CAAC;EACjB,cAAA;EACA,cAAA,IAAInJ,KAAK,CAAC7O,IAAI,KAAKwE,qBAAqB,CAACC,KAAK,EAAE;kBAC9C,IAAI0T,aAAa,GAAG,CAAC;kBACrB,OAAOA,aAAa,GAAGN,UAAU,EAAE;EACjC,kBAAA,IAAMO,QAAQ,GAAGhM,UAAU,CAAC0K,SAAS,EAAEmB,YAAY,CAAC;EACpDA,kBAAAA,YAAY,IAAI,CAAC;oBACjB,IAAII,YAAY,CAACrB,YAAY,EAAEF,SAAS,CAACmB,YAAY,CAAC,CAAC,EAAE;sBACvD,IAAMtQ,IAAI,GAAGmP,SAAS,CAACjK,QAAQ,CAC7BoL,YAAY,EACZA,YAAY,GAAGG,QACjB,CAAC;EACDE,oBAAAA,uBAAuB,CACrB3Q,IAAI,EACJqP,YAAY,GAAG,CAAC,GAAG,CAAC,EACpBJ,UAAU,GAAGmB,iBAAiB,GAAG3K,SAAS,EAC1CyJ,UACF,CAAC;EACH,kBAAA;EACAoB,kBAAAA,YAAY,IAAIG,QAAQ;oBACxBD,aAAa,IAAIC,QAAQ,GAAG,CAAC;EAC/B,gBAAA;EACF,cAAA;gBAEAxB,UAAU,IAAIlC,cAAc,GAAGtH,SAAS;EAC1C,YAAA;EACF,UAAA,CAAC,CAAC;EACJ,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,CAAC;EACJ,EAAA,CAAC,CAAC;EACF,EAAA,OAAOyJ,UAAU;EACnB;EAEO,SAASc,MAAMA,CAACxI,KAAyB,EAAE;IAChD,IAAI,CAACA,KAAK,EAAE;EACV,IAAA,OAAO,KAAK;EACd,EAAA;IACA,IAAMoJ,SAAS,GAAGpJ,KAAK,CAACxM,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACvC,EAAA,OACE4V,SAAS,KAAK,MAAM,IACpBA,SAAS,KAAK,MAAM;EACpB;EACAA,EAAAA,SAAS,KAAK,MAAM,IACpBA,SAAS,KAAK,MAAM;EAExB;EAEA,SAASF,YAAYA,CAACrB,YAAqB,EAAEwB,UAAkB,EAAE;EAC/D,EAAA,IAAIxB,YAAY,EAAE;EAChB,IAAA,IAAMyB,QAAQ,GAAID,UAAU,IAAI,CAAC,GAAI,IAAI;EACzC,IAAA,OAAOC,QAAQ,KAAK,EAAE,IAAIA,QAAQ,KAAK,EAAE;EAC3C,EAAA,CAAC,MAAM;EACL,IAAA,IAAMA,SAAQ,GAAGD,UAAU,GAAG,IAAI;MAClC,OAAOC,SAAQ,KAAK,CAAC;EACvB,EAAA;EACF;EAEO,SAASH,uBAAuBA,CACrCI,aAAyB,EACzBC,UAAkB,EAClBC,GAAW,EACX7B,OAAyB,EACzB;EACA,EAAA,IAAMpP,IAAI,GAAGkR,UAAU,CAACH,aAAa,CAAC;IACtC,IAAII,MAAM,GAAG,CAAC;EACd;EACAA,EAAAA,MAAM,IAAIH,UAAU;IACpB,IAAII,WAAW,GAAG,CAAC;IACnB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAI/F,CAAC,GAAG,CAAC;EAET,EAAA,OAAO6F,MAAM,GAAGnR,IAAI,CAAC7F,MAAM,EAAE;EAC3BiX,IAAAA,WAAW,GAAG,CAAC;MACf,GAAG;EACD,MAAA,IAAID,MAAM,IAAInR,IAAI,CAAC7F,MAAM,EAAE;EACzB,QAAA;EACF,MAAA;EACAmR,MAAAA,CAAC,GAAGtL,IAAI,CAACmR,MAAM,EAAE,CAAC;EAClBC,MAAAA,WAAW,IAAI9F,CAAC;MAClB,CAAC,QAAQA,CAAC,KAAK,IAAI;;EAEnB;EACA+F,IAAAA,WAAW,GAAG,CAAC;MACf,GAAG;EACD,MAAA,IAAIF,MAAM,IAAInR,IAAI,CAAC7F,MAAM,EAAE;EACzB,QAAA;EACF,MAAA;EACAmR,MAAAA,CAAC,GAAGtL,IAAI,CAACmR,MAAM,EAAE,CAAC;EAClBE,MAAAA,WAAW,IAAI/F,CAAC;MAClB,CAAC,QAAQA,CAAC,KAAK,IAAI;EAEnB,IAAA,IAAMgG,QAAQ,GAAGtR,IAAI,CAAC7F,MAAM,GAAGgX,MAAM;EACrC;MACA,IAAII,MAAM,GAAGJ,MAAM;;EAEnB;MACA,IAAIE,WAAW,GAAGC,QAAQ,EAAE;EAC1BH,MAAAA,MAAM,IAAIE,WAAW;EACvB,IAAA,CAAC,MAAM,IAAIA,WAAW,GAAGC,QAAQ,EAAE;EACjC;EACA7Z,MAAAA,MAAM,CAACtF,KAAK,CAAA,yBAAA,GACgBkf,WAAW,GAAA,sBAAA,GAAuBC,QAAQ,0BACtE,CAAC;EACD;EACA,MAAA;EACF,IAAA;MAEA,IAAIF,WAAW,KAAK,CAAC,EAAE;EACrB,MAAA,IAAMI,WAAW,GAAGxR,IAAI,CAACuR,MAAM,EAAE,CAAC;QAClC,IAAIC,WAAW,KAAK,GAAG,EAAE;EACvB,QAAA,IAAMC,YAAY,GAAGnN,UAAU,CAACtE,IAAI,EAAEuR,MAAM,CAAC;EAC7CA,QAAAA,MAAM,IAAI,CAAC;UAEX,IAAIE,YAAY,KAAK,EAAE,EAAE;EACvB,UAAA,IAAMC,aAAa,GAAGjN,UAAU,CAACzE,IAAI,EAAEuR,MAAM,CAAC;EAC9CA,UAAAA,MAAM,IAAI,CAAC;YAEX,IAAIG,aAAa,KAAK,UAAU,EAAE;EAChC,YAAA,IAAMC,YAAY,GAAG3R,IAAI,CAACuR,MAAM,EAAE,CAAC;;EAEnC;cACA,IAAII,YAAY,KAAK,CAAC,EAAE;EACtB,cAAA,IAAMlJ,SAAS,GAAGzI,IAAI,CAACuR,MAAM,EAAE,CAAC;EAChC,cAAA,IAAMK,QAAQ,GAAG,IAAI,GAAGnJ,SAAS;EACjC,cAAA,IAAMoJ,OAAO,GAAG,IAAI,GAAGpJ,SAAS;gBAChC,IAAMqJ,UAAU,GAAGD,OAAO,GAAG,CAAC,GAAGD,QAAQ,GAAG,CAAC,GAAG,CAAC;EACjD,cAAA,IAAMG,SAAS,GAAG,IAAInW,UAAU,CAACkW,UAAU,CAAC;EAC5C,cAAA,IAAID,OAAO,EAAE;EACXE,gBAAAA,SAAS,CAAC,CAAC,CAAC,GAAGtJ,SAAS;kBACxB,KAAK,IAAIpN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyW,UAAU,EAAEzW,CAAC,EAAE,EAAE;oBACnC0W,SAAS,CAAC1W,CAAC,CAAC,GAAG2E,IAAI,CAACuR,MAAM,EAAE,CAAC;EAC/B,gBAAA;EACF,cAAA;gBAEAnC,OAAO,CAACpL,IAAI,CAAC;EACX3L,gBAAAA,IAAI,EAAEsZ,YAAY;EAClBP,gBAAAA,WAAW,EAAXA,WAAW;EACXH,gBAAAA,GAAG,EAAHA,GAAG;EACHtG,gBAAAA,KAAK,EAAEoH;EACT,eAAC,CAAC;EACJ,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA,CAAC,MAAM,IAAIX,WAAW,KAAK,CAAC,EAAE;QAC5B,IAAIC,WAAW,GAAG,EAAE,EAAE;UACpB,IAAMW,YAA2B,GAAG,EAAE;UACtC,KAAK,IAAI3W,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;YAC3B,IAAMiQ,EAAC,GAAGtL,IAAI,CAACuR,MAAM,EAAE,CAAC,CAAC/e,QAAQ,CAAC,EAAE,CAAC;EACrCwf,UAAAA,YAAY,CAAChO,IAAI,CAACsH,EAAC,CAACnR,MAAM,IAAI,CAAC,GAAG,GAAG,GAAGmR,EAAC,GAAGA,EAAC,CAAC;EAE9C,UAAA,IAAIjQ,GAAC,KAAK,CAAC,IAAIA,GAAC,KAAK,CAAC,IAAIA,GAAC,KAAK,CAAC,IAAIA,GAAC,KAAK,CAAC,EAAE;EAC5C2W,YAAAA,YAAY,CAAChO,IAAI,CAAC,GAAG,CAAC;EACxB,UAAA;EACF,QAAA;EACA,QAAA,IAAM7J,MAAM,GAAGkX,WAAW,GAAG,EAAE;EAC/B,QAAA,IAAMY,aAAa,GAAG,IAAIrW,UAAU,CAACzB,MAAM,CAAC;UAC5C,KAAK,IAAIkB,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGlB,MAAM,EAAEkB,GAAC,EAAE,EAAE;YAC/B4W,aAAa,CAAC5W,GAAC,CAAC,GAAG2E,IAAI,CAACuR,MAAM,EAAE,CAAC;EACnC,QAAA;UAEAnC,OAAO,CAACpL,IAAI,CAAC;EACXoN,UAAAA,WAAW,EAAXA,WAAW;EACXH,UAAAA,GAAG,EAAHA,GAAG;EACHjf,UAAAA,IAAI,EAAEggB,YAAY,CAACE,IAAI,CAAC,EAAE,CAAC;EAC3BC,UAAAA,QAAQ,EAAE3X,cAAc,CAACyX,aAAa,CAAC;EACvCA,UAAAA,aAAa,EAAbA;EACF,SAAC,CAAC;EACJ,MAAA;EACF,IAAA;EACF,EAAA;EACF;;EAEA;EACA;EACA;EACO,SAASf,UAAUA,CAAClR,IAAgB,EAAc;EACvD,EAAA,IAAM7F,MAAM,GAAG6F,IAAI,CAAC2B,UAAU;IAC9B,IAAMyQ,YAAY,GAAG,EAAmB;IACxC,IAAI/W,CAAC,GAAG,CAAC;;EAET;EACA,EAAA,OAAOA,CAAC,GAAGlB,MAAM,GAAG,CAAC,EAAE;MACrB,IAAI6F,IAAI,CAAC3E,CAAC,CAAC,KAAK,CAAC,IAAI2E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI2E,IAAI,CAAC3E,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;EAC9D+W,MAAAA,YAAY,CAACpO,IAAI,CAAC3I,CAAC,GAAG,CAAC,CAAC;EACxBA,MAAAA,CAAC,IAAI,CAAC;EACR,IAAA,CAAC,MAAM;EACLA,MAAAA,CAAC,EAAE;EACL,IAAA;EACF,EAAA;;EAEA;EACA;EACA,EAAA,IAAI+W,YAAY,CAACjY,MAAM,KAAK,CAAC,EAAE;EAC7B,IAAA,OAAO6F,IAAI;EACb,EAAA;;EAEA;EACA,EAAA,IAAMqS,SAAS,GAAGlY,MAAM,GAAGiY,YAAY,CAACjY,MAAM;EAC9C,EAAA,IAAMmY,OAAO,GAAG,IAAI1W,UAAU,CAACyW,SAAS,CAAC;IACzC,IAAIE,WAAW,GAAG,CAAC;EAEnB,EAAA,KAAKlX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgX,SAAS,EAAEE,WAAW,EAAE,EAAElX,CAAC,EAAE,EAAE;EAC7C,IAAA,IAAIkX,WAAW,KAAKH,YAAY,CAAC,CAAC,CAAC,EAAE;EACnC;EACAG,MAAAA,WAAW,EAAE;EACb;QACAH,YAAY,CAACI,KAAK,EAAE;EACtB,IAAA;EACAF,IAAAA,OAAO,CAACjX,CAAC,CAAC,GAAG2E,IAAI,CAACuS,WAAW,CAAC;EAChC,EAAA;EACA,EAAA,OAAOD,OAAO;EAChB;EAEO,SAASG,SAASA,CAACzS,IAAgB,EAAoB;EAC5D,EAAA,IAAMwF,OAAO,GAAGxF,IAAI,CAAC,CAAC,CAAC;IACvB,IAAI0S,WAAmB,GAAG,EAAE;IAC5B,IAAIlf,KAAa,GAAG,EAAE;IACtB,IAAImf,SAAiB,GAAG,CAAC;IACzB,IAAIC,qBAA6B,GAAG,CAAC;IACrC,IAAIC,gBAAwB,GAAG,CAAC;IAChC,IAAIC,aAAqB,GAAG,CAAC;IAC7B,IAAIxa,EAAU,GAAG,CAAC;IAClB,IAAIiM,MAAc,GAAG,CAAC;IAEtB,IAAIiB,OAAO,KAAK,CAAC,EAAE;EACjB,IAAA,OAAOpB,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;EAC1DmO,MAAAA,WAAW,IAAItO,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACzDA,MAAAA,MAAM,IAAI,CAAC;EACb,IAAA;EAEAmO,IAAAA,WAAW,IAAItO,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACzDA,IAAAA,MAAM,IAAI,CAAC;EAEX,IAAA,OAAOH,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;EAC1D/Q,MAAAA,KAAK,IAAI4Q,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACnDA,MAAAA,MAAM,IAAI,CAAC;EACb,IAAA;EAEA/Q,IAAAA,KAAK,IAAI4Q,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACnDA,IAAAA,MAAM,IAAI,CAAC;EAEXoO,IAAAA,SAAS,GAAGlO,UAAU,CAACzE,IAAI,EAAE,EAAE,CAAC;EAChC4S,IAAAA,qBAAqB,GAAGnO,UAAU,CAACzE,IAAI,EAAE,EAAE,CAAC;EAC5C8S,IAAAA,aAAa,GAAGrO,UAAU,CAACzE,IAAI,EAAE,EAAE,CAAC;EACpC1H,IAAAA,EAAE,GAAGmM,UAAU,CAACzE,IAAI,EAAE,EAAE,CAAC;EACzBuE,IAAAA,MAAM,GAAG,EAAE;EACb,EAAA,CAAC,MAAM,IAAIiB,OAAO,KAAK,CAAC,EAAE;EACxBjB,IAAAA,MAAM,IAAI,CAAC;EACXoO,IAAAA,SAAS,GAAGlO,UAAU,CAACzE,IAAI,EAAEuE,MAAM,CAAC;EACpCA,IAAAA,MAAM,IAAI,CAAC;EACX,IAAA,IAAMwO,oBAAoB,GAAGtO,UAAU,CAACzE,IAAI,EAAEuE,MAAM,CAAC;EACrDA,IAAAA,MAAM,IAAI,CAAC;EACX,IAAA,IAAMyO,qBAAqB,GAAGvO,UAAU,CAACzE,IAAI,EAAEuE,MAAM,CAAC;EACtDA,IAAAA,MAAM,IAAI,CAAC;MACXsO,gBAAgB,GAAG3f,IAAA,CAAAmC,GAAA,CAAA,CAAC,EAAI,EAAE,CAAA,GAAG0d,oBAAoB,GAAGC,qBAAqB;EACzE,IAAA,IAAI,CAACC,aAAA,CAAqBJ,gBAAgB,CAAC,EAAE;QAC3CA,gBAAgB,GAAGvf,MAAM,CAACK,gBAAgB;EAC1C8D,MAAAA,MAAM,CAACG,IAAI,CACT,kGACF,CAAC;EACH,IAAA;EAEAkb,IAAAA,aAAa,GAAGrO,UAAU,CAACzE,IAAI,EAAEuE,MAAM,CAAC;EACxCA,IAAAA,MAAM,IAAI,CAAC;EACXjM,IAAAA,EAAE,GAAGmM,UAAU,CAACzE,IAAI,EAAEuE,MAAM,CAAC;EAC7BA,IAAAA,MAAM,IAAI,CAAC;EAEX,IAAA,OAAOH,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;EAC1DmO,MAAAA,WAAW,IAAItO,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACzDA,MAAAA,MAAM,IAAI,CAAC;EACb,IAAA;EAEAmO,IAAAA,WAAW,IAAItO,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACzDA,IAAAA,MAAM,IAAI,CAAC;EAEX,IAAA,OAAOH,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;EAC1D/Q,MAAAA,KAAK,IAAI4Q,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACnDA,MAAAA,MAAM,IAAI,CAAC;EACb,IAAA;EAEA/Q,IAAAA,KAAK,IAAI4Q,OAAO,CAACpE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAAC;EACnDA,IAAAA,MAAM,IAAI,CAAC;EACb,EAAA;IACA,IAAM2O,OAAO,GAAGlT,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEvE,IAAI,CAAC2B,UAAU,CAAC;IAEtD,OAAO;EACL+Q,IAAAA,WAAW,EAAXA,WAAW;EACXlf,IAAAA,KAAK,EAALA,KAAK;EACLmf,IAAAA,SAAS,EAATA,SAAS;EACTE,IAAAA,gBAAgB,EAAhBA,gBAAgB;EAChBD,IAAAA,qBAAqB,EAArBA,qBAAqB;EACrBE,IAAAA,aAAa,EAAbA,aAAa;EACbxa,IAAAA,EAAE,EAAFA,EAAE;EACF4a,IAAAA,OAAO,EAAPA;KACD;EACH;EAEO,SAASC,MAAMA,CAAC9a,IAAuB,EAA4B;IAAA,KAAA,IAAA+a,IAAA,GAAAC,SAAA,CAAAlZ,MAAA,EAAvB+Y,OAAO,OAAAI,KAAA,CAAAF,IAAA,GAAA,CAAA,GAAAA,IAAA,WAAAG,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA,EAAA,EAAA;EAAPL,IAAAA,OAAO,CAAAK,IAAA,GAAA,CAAA,CAAA,GAAAF,SAAA,CAAAE,IAAA,CAAA;EAAA,EAAA;EACxD,EAAA,IAAMtY,GAAG,GAAGiY,OAAO,CAAC/Y,MAAM;IAC1B,IAAI2K,IAAI,GAAG,CAAC;IACZ,IAAIzJ,CAAC,GAAGJ,GAAG;IACX,OAAOI,CAAC,EAAE,EAAE;EACVyJ,IAAAA,IAAI,IAAIoO,OAAO,CAAC7X,CAAC,CAAC,CAACsG,UAAU;EAC/B,EAAA;EACA,EAAA,IAAMiD,MAAM,GAAG,IAAIhJ,UAAU,CAACkJ,IAAI,CAAC;IACnCF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,EAAE,GAAI,IAAI;IAC/BF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,EAAE,GAAI,IAAI;IAC/BF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,CAAC,GAAI,IAAI;EAC9BF,EAAAA,MAAM,CAAC,CAAC,CAAC,GAAGE,IAAI,GAAG,IAAI;EACvBF,EAAAA,MAAM,CAAC3G,GAAG,CAAC5F,IAAI,EAAE,CAAC,CAAC;EACnB,EAAA,KAAKgD,CAAC,GAAG,CAAC,EAAEyJ,IAAI,GAAG,CAAC,EAAEzJ,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;MAClCuJ,MAAM,CAAC3G,GAAG,CAACiV,OAAO,CAAC7X,CAAC,CAAC,EAAEyJ,IAAI,CAAC;EAC5BA,IAAAA,IAAI,IAAIoO,OAAO,CAAC7X,CAAC,CAAC,CAACsG,UAAU;EAC/B,EAAA;EACA,EAAA,OAAOiD,MAAM;EACf;EAEO,SAAS4O,OAAOA,CACrBC,QAAoB,EACpBC,MAAgC,EAChC1T,IAAgB,EAChB;EACA,EAAA,IAAIyT,QAAQ,CAAC9R,UAAU,KAAK,EAAE,EAAE;EAC9B,IAAA,MAAM,IAAIgS,UAAU,CAAC,mBAAmB,CAAC;EAC3C,EAAA;EACA,EAAA,IAAInO,OAAO;EACX,EAAA,IAAIoO,IAAI;EACR,EAUO;EACLpO,IAAAA,OAAO,GAAG,CAAC;EACXoO,IAAAA,IAAI,GAAG,IAAIhY,UAAU,EAAE;EACzB,EAAA;EACA,EAAA,IAAIiY,QAAQ;IACZ,IAAIrO,OAAO,GAAG,CAAC,EAAE;EACfqO,IAAAA,QAAQ,GAAG,IAAIjY,UAAU,CAAC,CAAC,CAAC;EAC5B,IAAA,IAAI8X,MAAM,CAAEvZ,MAAM,GAAG,CAAC,EAAE;EACtB,MAAA,IAAI2Z,QAAQ,CAACD,QAAQ,CAAC9X,MAAM,CAAC,CAACgY,SAAS,CAAC,CAAC,EAAEL,MAAM,CAAEvZ,MAAM,EAAE,KAAK,CAAC;EACnE,IAAA;EACF,EAAA,CAAC,MAAM;EACL0Z,IAAAA,QAAQ,GAAG,IAAIjY,UAAU,EAAE;EAC7B,EAAA;EACA,EAAA,IAAMoY,QAAQ,GAAG,IAAIpY,UAAU,CAAC,CAAC,CAAC;EAClC,EAAA,IAAIoE,IAAI,CAAC2B,UAAU,GAAG,CAAC,EAAE;EACvB,IAAA,IAAImS,QAAQ,CAACE,QAAQ,CAACjY,MAAM,CAAC,CAACgY,SAAS,CAAC,CAAC,EAAE/T,IAAI,CAAC2B,UAAU,EAAE,KAAK,CAAC;EACpE,EAAA;IACA,OAAOwR,MAAM,CACX,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EACpB,IAAIvX,UAAU,CAAC,CACb4J,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,IAAI;KACL,CAAC,EACFiO,QAAQ;EAAE;EACVI,EAAAA,QAAQ,EACRD,IAAI,EACJI,QAAQ,EACRhU,IACF,CAAC;EACH;EAkBO,SAASiU,cAAcA,CAC5BlI,QAAqB,EACa;IAClC,IAAM9G,OAAyC,GAAG,EAAE;IACpD,IAAI8G,QAAQ,YAAYmI,WAAW,EAAE;EACnC,IAAA,IAAM/Z,MAAM,GAAG4R,QAAQ,CAACpK,UAAU;MAClC,IAAI4C,MAAM,GAAG,CAAC;EACd,IAAA,OAAOA,MAAM,GAAG,EAAE,GAAGpK,MAAM,EAAE;QAC3B,IAAMga,IAAI,GAAG,IAAIL,QAAQ,CAAC/H,QAAQ,EAAExH,MAAM,CAAC;EAC3C,MAAA,IAAM6P,IAAI,GAAGC,SAAS,CAACF,IAAI,CAAC;EAC5BlP,MAAAA,OAAO,CAACjB,IAAI,CAACoQ,IAAI,CAAC;QAClB7P,MAAM,IAAI6P,IAAI,CAACtP,IAAI;EACrB,IAAA;EACF,EAAA;EACA,EAAA,OAAOG,OAAO;EAChB;EAEA,SAASoP,SAASA,CAACF,IAA2B,EAAgC;EAC5E,EAAA,IAAMrP,IAAI,GAAGqP,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;EAC9B,EAAA,IAAM/P,MAAM,GAAG4P,IAAI,CAACxF,UAAU;EAC9B,EAAA,IAAMxU,MAAM,GAAGga,IAAI,CAACxS,UAAU;IAC9B,IAAIxH,MAAM,GAAG2K,IAAI,EAAE;MACjB,OAAO;EACLP,MAAAA,MAAM,EAANA,MAAM;EACNO,MAAAA,IAAI,EAAE3K;OACP;EACH,EAAA;EACA,EAAA,IAAM9B,IAAI,GAAG8b,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;IAC9B,IAAIjc,IAAI,KAAK,UAAU,EAAE;MACvB,OAAO;EAAEkM,MAAAA,MAAM,EAANA,MAAM;EAAEO,MAAAA,IAAI,EAAJA;OAAM;EACzB,EAAA;IACA,IAAMU,OAAO,GAAG2O,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,KAAK,EAAE;EACxC,EAAA,IAAI9O,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,CAAC,EAAE;MAClC,OAAO;EAAEjB,MAAAA,MAAM,EAANA,MAAM;EAAEO,MAAAA,IAAI,EAAJA;OAAM;EACzB,EAAA;EACA,EAAA,IAAM/I,MAAM,GAAGoY,IAAI,CAACpY,MAAM;EAC1B,EAAA,IAAM0X,QAAQ,GAAGjY,UAAU,CACzB,IAAII,UAAU,CAACG,MAAM,EAAEwI,MAAM,GAAG,EAAE,EAAE,EAAE,CACxC,CAAiB;IAEjB,IAAIqP,IAAsC,GAAG,IAAI;IACjD,IAAI5T,IAAoC,GAAG,IAAI;IAC/C,IAAIuU,cAAc,GAAG,CAAC;IAEtB,IAAI/O,OAAO,KAAK,CAAC,EAAE;EACjB+O,IAAAA,cAAc,GAAG,EAAE;EACrB,EAAA,CAAC,MAAM;EACL,IAAA,IAAMC,SAAS,GAAGL,IAAI,CAACG,SAAS,CAAC,EAAE,CAAC;MACpC,IAAI,CAACE,SAAS,IAAIra,MAAM,GAAG,EAAE,GAAGqa,SAAS,GAAG,EAAE,EAAE;QAC9C,OAAO;EAAEjQ,QAAAA,MAAM,EAANA,MAAM;EAAEO,QAAAA,IAAI,EAAJA;SAAM;EACzB,IAAA;EACA8O,IAAAA,IAAI,GAAG,EAAE;MACT,KAAK,IAAIvY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmZ,SAAS,EAAEnZ,CAAC,EAAE,EAAE;EAClCuY,MAAAA,IAAI,CAAC5P,IAAI,CAAC,IAAIpI,UAAU,CAACG,MAAM,EAAEwI,MAAM,GAAG,EAAE,GAAGlJ,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;EAC7D,IAAA;EACAkZ,IAAAA,cAAc,GAAG,EAAE,GAAGC,SAAS,GAAG,EAAE;EACtC,EAAA;IAEA,IAAI,CAACD,cAAc,EAAE;MACnB,OAAO;EAAEhQ,MAAAA,MAAM,EAANA,MAAM;EAAEO,MAAAA,IAAI,EAAJA;OAAM;EACzB,EAAA;EAEA,EAAA,IAAM2P,kBAAkB,GAAGN,IAAI,CAACG,SAAS,CAACC,cAAc,CAAC;EACzD,EAAA,IAAIzP,IAAI,GAAG,EAAE,GAAG2P,kBAAkB,EAAE;MAClC,OAAO;EAAElQ,MAAAA,MAAM,EAANA,MAAM;EAAEO,MAAAA,IAAI,EAAJA;OAAM;EACzB,EAAA;EACA9E,EAAAA,IAAI,GAAG,IAAIpE,UAAU,CACnBG,MAAM,EACNwI,MAAM,GAAGgQ,cAAc,GAAG,CAAC,EAC3BE,kBACF,CAAC;IACD,OAAO;EACLjP,IAAAA,OAAO,EAAPA,OAAO;EACPiO,IAAAA,QAAQ,EAARA,QAAQ;EACRG,IAAAA,IAAI,EAAJA,IAAI;EACJ5T,IAAAA,IAAI,EAAJA,IAAI;EACJuE,IAAAA,MAAM,EAANA,MAAM;EACNO,IAAAA,IAAI,EAAJA;KACD;EACH;;EC77CO,IAAM4P,gCAAgC,GAAG,SAAnCA,gCAAgCA,GAAS;EACpD,EAAA,OAAO,uBAAuB,CAACC,IAAI,CAACC,SAAS,CAACC,SAAS,CAAC;EAC1D,CAAC;;EAED;EACA;EACO,IAAMC,mBAAmB,GAAG;EACjC3R,EAAAA,KAAK,EAAE;EACL4R,IAAAA,IAAI,EAAE,CAAC;EACP,IAAA,MAAM,EAAE,IAAI;EACZ,IAAA,MAAM,EAAE,CAAC;EACTC,IAAAA,IAAI,EAAE,GAAG;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACP,IAAA,MAAM,EAAE,CAAC;EACT,IAAA,MAAM,EAAE,CAAC;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACP,IAAA,MAAM,EAAE,GAAG;EACXC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,GAAG;EAAE;EACXC,IAAAA,IAAI,EAAE,GAAG;EAAE;EACXC,IAAAA,IAAI,EAAE,GAAG;EAAE;EACXC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACP,IAAA,MAAM,EAAE,CAAC;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EAAE;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE;KACP;EACDxT,EAAAA,KAAK,EAAE;EACLyT,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,GAAG;EACTC,IAAAA,IAAI,EAAE,GAAG;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,GAAG;EACTC,IAAAA,IAAI,EAAE,GAAG;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,IAAI;EACVC,IAAAA,IAAI,EAAE,IAAI;EACVC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE,CAAC;EACP,IAAA,MAAM,EAAE,CAAC;EACTC,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE;KACP;EACDrU,EAAAA,IAAI,EAAE;EACJsU,IAAAA,IAAI,EAAE,CAAC;EACPC,IAAAA,IAAI,EAAE;EACR;EACF,CAAU;EAIH,SAASC,WAAWA,CAACnR,KAAa,EAAEnP,IAAe,EAAW;EACnE,EAAA,IAAMugB,SAAS,GAAG9D,mBAAmB,CAACzc,IAAI,CAAC;EAC3C,EAAA,OAAO,CAAC,CAACugB,SAAS,IAAI,CAAC,CAACA,SAAS,CAACpR,KAAK,CAAC9U,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD;EAEO,SAASmmB,6BAA6BA,CAC3CC,MAAc,EACdzgB,IAAe,EACfe,wBAAwB,EACf;EAAA,EAAA,IADTA,wBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,wBAAwB,GAAG,IAAI;EAAA,EAAA;IAE/B,OAAO,CAAC0f,MAAK,CACVhd,KAAK,CAAC,GAAG,CAAA,CACTzB,IAAI,CACH,UAACmN,KAAK,EAAA;MAAA,OACJ,CAACuR,2BAA2B,CAACvR,KAAK,EAAEnP,IAAI,EAAEe,wBAAwB,CAAC;EAAA,EAAA,CACvE,CAAC;EACL;EAEA,SAAS2f,2BAA2BA,CAClCvR,KAAa,EACbnP,IAAe,EACfe,wBAAwB,EACf;EAAA,EAAA,IAAA4f,qBAAA;EAAA,EAAA,IADT5f,wBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,wBAAwB,GAAG,IAAI;EAAA,EAAA;EAE/B,EAAA,IAAMG,WAAW,GAAGJ,cAAc,CAACC,wBAAwB,CAAC;EAC5D,EAAA,OAAA,CAAA4f,qBAAA,GAAOzf,WAAW,oBAAXA,WAAW,CAAE0f,eAAe,CAACC,gBAAgB,CAAC1R,KAAK,EAAEnP,IAAI,CAAC,CAAC,KAAA,IAAA,GAAA2gB,qBAAA,GAAI,KAAK;EAC7E;EAEO,SAASE,gBAAgBA,CAAC1R,KAAa,EAAEnP,IAAe,EAAU;IACvE,OAAUA,IAAI,oBAAemP,KAAK;EACpC;EAEO,SAAS2R,yBAAyBA,CACvCC,UAA8B,EACtB;EACR,EAAA,IAAIA,UAAU,EAAE;MACd,IAAM7R,MAAM,GAAG6R,UAAU,CAACpe,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACzC,IAAA,OAAO8Z,mBAAmB,CAAC1R,KAAK,CAACmE,MAAM,CAAC;EAC1C,EAAA;EACA,EAAA,OAAO,CAAC;EACV;EAEO,SAAS8R,iCAAiCA,CAACC,QAAgB,EAAU;EAC1E,EAAA,IAAMC,kBAAkB,GAAG7E,gCAAgC,EAAE;EAC7D,EAAA,OAAO4E,QAAQ,CAACxd,KAAK,CAAC,GAAG,CAAC,CAACoS,MAAM,CAAC,UAACpD,GAAG,EAAEvD,MAAM,EAAK;EACjD,IAAA,IAAMiS,aAAa,GAAGD,kBAAkB,IAAIvJ,MAAM,CAACzI,MAAM,CAAC;MAC1D,IAAMkS,eAAe,GAAGD,aAAY,GAChC,CAAA,GACA1E,mBAAmB,CAAC1R,KAAK,CAACmE,MAAM,CAAC;EACrC,IAAA,IAAIkS,eAAe,EAAE;EACnB,MAAA,OAAO,CAACA,eAAe,GAAG,CAAC,GAAG3O,GAAG,KAAKA,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EACpD,IAAA;EACA,IAAA,OAAO,CAACgK,mBAAmB,CAAC3R,KAAK,CAACoE,MAAM,CAAC,GAAGuD,GAAG,KAAKA,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IAClE,CAAC,EAAE,CAAC,CAAC;EACP;EAOA,IAAM4O,sBAAsC,GAAG,EAAE;EAIjD,SAASC,2BAA2BA,CAClCC,cAAkC,EAClCxgB,wBAAwB,EAChB;EAAA,EAAA,IADRA,wBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,wBAAwB,GAAG,IAAI;EAAA,EAAA;EAE/B,EAAA,IAAIsgB,sBAAsB,CAACE,cAAc,CAAC,EAAE;MAC1C,OAAOF,sBAAsB,CAACE,cAAc,CAAC;EAC/C,EAAA;EAEA,EAAA,IAAMC,aAAa,GAAG;EACpB;EACA;EACA;EACArE,IAAAA,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC9BY,IAAAA,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EACtB;EACA;MACA,YAAY,EAAE,CAAC,KAAK;KACrB,CAACwD,cAAc,CAAC;EAEjB,EAAA,KAAK,IAAIve,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwe,aAAa,CAAC1f,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAAA,IAAA,IAAAye,eAAA;MAC7C,IACEf,2BAA2B,CACzBc,aAAa,CAACxe,CAAC,CAAC,EAChB,OAAO,EACPjC,wBACF,CAAA,EACA;EACAsgB,MAAAA,sBAAsB,CAACE,cAAc,CAAC,GAAGC,aAAa,CAACxe,CAAC,CAAC;QACzD,OAAOwe,aAAa,CAACxe,CAAC,CAAC;MACzB,CAAC,MAAM,IACLwe,aAAa,CAACxe,CAAC,CAAC,KAAK,KAAK,IAAA,CAAAye,eAAA,GAC1B3gB,cAAc,CAACC,wBAAwB,CAAC,KAAA,IAAA,IAAxC0gB,eAAA,CAA0Cb,eAAe,CAAC,YAAY,CAAA,EACtE;EACA,MAAA,OAAO,EAAE;EACX,IAAA;EACF,EAAA;EAEA,EAAA,OAAOW,cAAc;EACvB;EAEA,IAAMG,kBAAkB,GAAG,yBAAyB;EAC7C,SAASC,sBAAsBA,CACpCxS,KAAa,EACbpO,wBAAwB,EAChB;EAAA,EAAA,IADRA,wBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,wBAAwB,GAAG,IAAI;EAAA,EAAA;EAE/B,EAAA,OAAOoO,KAAK,CAACzU,OAAO,CAACgnB,kBAAkB,EAAE,UAACE,CAAC,EAAA;MAAA,OACzCN,2BAA2B,CACzBM,CAAC,CAACC,WAAW,EAAE,EACf9gB,wBACF,CAAC;EAAA,EAAA,CACH,CAAC;EACH;EAEO,SAAS+gB,iBAAiBA,CAC/BC,cAAkC,EAClCC,aAAiC,EACb;IACpB,IAAMvB,MAAgB,GAAG,EAAE;EAC3B,EAAA,IAAIsB,cAAc,EAAE;EAClB,IAAA,IAAME,SAAS,GAAGF,cAAc,CAACte,KAAK,CAAC,GAAG,CAAC;EAC3C,IAAA,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGif,SAAS,CAACngB,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACzC,IAAI,CAACsd,WAAW,CAAC2B,SAAS,CAACjf,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE;EACvCyd,QAAAA,MAAM,CAAC9U,IAAI,CAACsW,SAAS,CAACjf,CAAC,CAAC,CAAC;EAC3B,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,IAAIgf,aAAa,EAAE;EACjBvB,IAAAA,MAAM,CAAC9U,IAAI,CAACqW,aAAa,CAAC;EAC5B,EAAA;EACA,EAAA,OAAOvB,MAAM,CAAC5G,IAAI,CAAC,GAAG,CAAC;EACzB;EAEO,SAASqI,yBAAyBA,CACvCC,WAA+B,EAC/BC,UAA8B,EACV;EACpB;EACA;EACA,EAAA,IACED,WAAW,KACVA,WAAW,CAACrgB,MAAM,GAAG,CAAC,IACrB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAACI,OAAO,CAACigB,WAAW,CAAC,KAAK,EAAE,CAAA,EACtE;EACA,IAAA,IACEE,sBAAsB,CAACF,WAAW,EAAE,OAAO,CAAC,IAC5CE,sBAAsB,CAACF,WAAW,EAAE,OAAO,CAAA,EAC3C;EACA,MAAA,OAAOA,WAAW;EACpB,IAAA;EACF,EAAA;EACA,EAAA,IAAIC,UAAU,EAAE;EACd,IAAA,IAAME,WAAW,GAAGF,UAAU,CAAC3e,KAAK,CAAC,GAAG,CAAC;EACzC,IAAA,IAAI6e,WAAW,CAACxgB,MAAM,GAAG,CAAC,EAAE;EAC1B,MAAA,IAAIqgB,WAAW,EAAE;UACf,KAAK,IAAInf,CAAC,GAAGsf,WAAW,CAACxgB,MAAM,EAAEkB,CAAC,EAAE,GAAI;YACtC,IAAIsf,WAAW,CAACtf,CAAC,CAAC,CAACL,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKwf,WAAW,CAACxf,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;cAClE,OAAO2f,WAAW,CAACtf,CAAC,CAAC;EACvB,UAAA;EACF,QAAA;EACF,MAAA;QACA,OAAOsf,WAAW,CAAC,CAAC,CAAC;EACvB,IAAA;EACF,EAAA;IACA,OAAOF,UAAU,IAAID,WAAW;EAClC;EAEA,SAASE,sBAAsBA,CAAClT,KAAa,EAAEnP,IAAe,EAAW;EACvE,EAAA,OAAOsgB,WAAW,CAACnR,KAAK,EAAEnP,IAAI,CAAC,IAAI0gB,2BAA2B,CAACvR,KAAK,EAAEnP,IAAI,CAAC;EAC7E;EAEO,SAASuiB,mBAAmBA,CAACC,WAAmB,EAAU;EAC/D;EACA;EACA,EAAA,IAAM/B,MAAM,GAAG+B,WAAW,CAAC/e,KAAK,CAAC,GAAG,CAAC;EACrC,EAAA,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyd,MAAM,CAAC3e,MAAM,EAAEkB,CAAC,EAAE,EAAE;MACtC,IAAMyf,OAAO,GAAGhC,MAAM,CAACzd,CAAC,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC;EACpC;EACA,IAAA,IAAIgf,OAAO,CAAC3gB,MAAM,GAAG,CAAC,IAAI2gB,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;EAC/ChC,MAAAA,MAAM,CAACzd,CAAC,CAAC,GAAA,OAAA,GAAWuC,QAAQ,CAACkd,OAAO,CAAC,CAAC,CAAC,CAAC,CAACtoB,QAAQ,CAAC,EAAE,CAAC,GAAG,CACtD,KAAK,GAAGoL,QAAQ,CAACkd,OAAO,CAAC,CAAC,CAAC,CAAC,CAACtoB,QAAQ,CAAC,EAAE,CAAA,EACxCE,KAAK,CAAC,EAAE,CAAG;EACf,IAAA;EACF,EAAA;EACA,EAAA,OAAOomB,MAAM,CAAC5G,IAAI,CAAC,GAAG,CAAC;EACzB;EAEO,SAAS6I,uBAAuBA,CAAC3B,UAAkB,EAAU;EAClE;EACA,EAAA,IAAIA,UAAU,CAAC4B,UAAU,CAAC,OAAO,CAAC,EAAE;EAClC,IAAA,IAAMC,SAAS,GAAG7B,UAAU,CAACtd,KAAK,CAAC,GAAG,CAAC;EACvC,IAAA,IAAMof,YAAY,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC;EACxD,IAAA,KAAK,IAAI7f,CAAC,GAAG4f,SAAS,CAAC9gB,MAAM,EAAEkB,CAAC,GAAG,CAAC,IAAIA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QACnD4f,SAAS,CAAC5f,CAAC,CAAC,GAAG6f,YAAY,CAAC7f,CAAC,GAAG,CAAC,CAAC;EACpC,IAAA;EACA,IAAA,OAAO4f,SAAS,CAAC/I,IAAI,CAAC,GAAG,CAAC;EAC5B,EAAA;EACA,EAAA,OAAOkH,UAAU;EACnB;EAQO,SAAS+B,0BAA0BA,CACxC/hB,wBAAiC,EAClB;EACf,EAAA,IAAMG,WAAW,GAAGJ,cAAc,CAACC,wBAAwB,CAAC,IAAI;MAC9D6f,eAAe,EAAE,SAAjBA,eAAeA,GAAA;EAAA,MAAA,OAAQ,KAAK;EAAA,IAAA;KAC7B;IACD,OAAO;EACLmC,IAAAA,IAAI,EAAE7hB,WAAW,CAAC0f,eAAe,CAAC,YAAY,CAAC;EAC/CoC,IAAAA,GAAG,EAAE9hB,WAAW,CAAC0f,eAAe,CAAC,yBAAyB,CAAC;MAC3DqC,GAAG,EACC/hB,WAAW,CAAC0f,eAAe,CAAC,0BAA0B,CAAA;KAE3D;EACH;EAEO,SAASsC,oBAAoBA,CAACC,QAAgB,EAAU;EAC7D,EAAA,OAAOA,QAAQ,CAACzoB,OAAO,CAAC,4BAA4B,EAAE,IAAI,CAAC;EAC7D;;ECvSA;EACA,IAAM0oB,eAA8C,GAAG;EACrDC,EAAAA,SAAS,EAAE,IAAI;EACfC,EAAAA,cAAc,EAAE,IAAI;EACpBC,EAAAA,MAAM,EAAE;EACR;EACF,CAAC;;EAED;EACA,IAAMC,iBAAgD,GAAG;EACvDH,EAAAA,SAAS,EAAE,KAAK;EAChBE,EAAAA,MAAM,EAAE,KAAK;EACbD,EAAAA,cAAc,EAAE;EAChB;EACF,CAAC;EAEM,IAAMG,sBAAyC,GAAG;EACvDJ,EAAAA,SAAS,EAAE,IAAI;EACfK,EAAAA,cAAc,EAAE,EAAkC;IAClDC,mBAAmB,EAAE,CAACP,eAAe;EACvC,CAAU;EAEH,SAASQ,oBAAoBA,CAClC9pB,KAAY,EACZ4pB,cAA4C,EACzB;IACnB,OAAO;EACLL,IAAAA,SAAS,EAAE,KAAK;EAChBK,IAAAA,cAAc,EAAdA,cAAc;MACdC,mBAAmB,EAAE,CAACH,iBAAiB,CAAC;EACxC1pB,IAAAA,KAAK,EAALA;KACD;EACH;EAEO,SAAS+pB,qCAAqCA,CACnD5c,KAAY,EACZ6c,kBAAsC,EACtCC,iBAAyC,EACzCC,gBAAwB,EACxBC,SAAiB,EACjBC,eAAiD,EACxC;EACT;EACA,EAAA,IAAM1B,WAAW,GAAGvb,KAAK,CAAC8Z,UAAU;IACpC,IAAMoD,WAAW,GAAGld,KAAK,CAACmd,UAAU,GAAGnd,KAAK,CAACkd,WAAW,GAAG,IAAI;EAC/D,EAAA,IAAME,oBAAoB,GAAGH,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEE,UAAU;EACxD,EAAA,IAAME,kBAAkB,GAAGJ,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEK,QAAQ;EACpD,EAAA,IAAMC,WAAW,GAAGF,kBAAkB,GAClC/e,QAAQ,CAAC+e,kBAAkB,CAAC,GAC5BD,oBAAoB,GAClB5O,QAAQ,GACR,CAAC;IACP,IAAIgP,aAA4C,GAAG,IAAI;EACvD,EAAA,IAAIN,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEriB,MAAM,EAAE;MACvB,IAAI;QACF,IAAIqiB,WAAW,CAACriB,MAAM,KAAK,CAAC,IAAIqiB,WAAW,CAAC,CAAC,CAAC,EAAE;UAC9CM,aAAa,GAAGX,kBAAkB,CAACY,MAAM,CAACP,WAAW,CAAC,CAAC,CAAC,CAAC,CAACI,QAAQ;EACpE,MAAA,CAAC,MAAM;UACLE,aAAa,GAAGN,WAAW,CAACtO,MAAM,CAChC,UAAC8O,GAAG,EAAEC,OAAO,EAAK;EAChB,UAAA,IAAIA,OAAO,EAAE;EACX,YAAA,IAAMC,eAAe,GAAGf,kBAAkB,CAACY,MAAM,CAACE,OAAO,CAAC;cAC1D,IAAI,CAACC,eAAe,EAAE;EACpB,cAAA,MAAM,IAAIC,KAAK,CAAA,oBAAA,GAAsBF,OAAO,eAAY,CAAC;EAC3D,YAAA;EACA;EACAjjB,YAAAA,MAAM,CAAChB,IAAI,CAACkkB,eAAe,CAACN,QAAQ,CAAC,CAAC3jB,OAAO,CAAC,UAAC5B,GAAG,EAAK;EACrD2lB,cAAAA,GAAG,CAAC3lB,GAAG,CAAC,GAAG,CAAC2lB,GAAG,CAAC3lB,GAAG,CAAC,IAAI,CAAC,IAAI6lB,eAAe,CAACN,QAAQ,CAACvlB,GAAG,CAAC;EAC5D,YAAA,CAAC,CAAC;EACJ,UAAA;EACA,UAAA,OAAO2lB,GAAG;EACZ,QAAA,CAAC,EACD;EAAE,UAAA,CAAC,EAAE;EAAE,SACT,CAAC;EACH,MAAA;MACF,CAAC,CAAC,OAAO7qB,KAAK,EAAE;EACd,MAAA,OAAO,IAAI;EACb,IAAA;EACF,EAAA;IACA,OACG0oB,WAAW,KAAKxhB,SAAS;EACxB;IACCwhB,WAAW,CAAC/e,KAAK,CAAC,GAAG,CAAC,CAACzB,IAAI,CAAC,UAAC+e,UAAU,EAAA;MAAA,OAAKpJ,MAAM,CAACoJ,UAAU,CAAC;EAAA,EAAA,CAAA,CAAC,IAC7D9Z,KAAK,CAAC8d,KAAK,GAAG,IAAI,IAAI9d,KAAK,CAAC+d,MAAM,GAAG,IAAK,IAC1C/d,KAAK,CAAC+d,MAAM,GAAG,IAAI,IAAI/d,KAAK,CAAC8d,KAAK,GAAG,IAAK,IAC3C9d,KAAK,CAACge,SAAS,GAAGpqB,IAAI,CAACsD,GAAG,CAAC6lB,gBAAgB,EAAE,EAAE,CAAC,IAC/C/c,KAAK,CAACie,UAAU,KAAK,KAAK,IACzBje,KAAK,CAACie,UAAU,KAAKnB,iBAAkB,IACzC9c,KAAK,CAACke,OAAO,GAAGtqB,IAAI,CAACsD,GAAG,CAAC8lB,SAAS,EAAE,GAAG,CAAC,CAAC,IAC5C,CAAC,CAACQ,aAAa,IACdrb,cAAA,CAAgBob,WAAW,CAAC,IAC5B7iB,MAAM,CAAChB,IAAI,CAAC8jB,aAAa,CAAC,CAACziB,IAAI,CAC7B,UAACuiB,QAAQ,EAAA;EAAA,IAAA,OAAKhf,QAAQ,CAACgf,QAAQ,CAAC,GAAGC,WAAW;EAAA,EAAA,CAChD,CAAE;EAER;EAEO,SAASY,2BAA2BA,CACzCne,KAAY,EACZ6c,kBAAsC,EACtCuB,iBAAgD,EAChDC,KAGC,EAC2B;EAAA,EAAA,IAJ5BA,KAGC,KAAA,MAAA,EAAA;MAHDA,KAGC,GAAG,EAAE;EAAA,EAAA;EAEN,EAAA,IAAM9C,WAAW,GAAGvb,KAAK,CAAC8Z,UAAU;IACpC,IAAK,CAACyB,WAAW,IAAI,CAACvb,KAAK,CAACmd,UAAU,IAAK,CAACiB,iBAAiB,EAAE;EAC7D,IAAA,OAAOE,OAAO,CAACC,OAAO,CAAC/B,sBAAsB,CAAC;EAChD,EAAA;IAEA,IAAMC,cAA4C,GAAG,EAAE;EAEvD,EAAA,IAAM+B,eAAe,GAAGC,uBAAuB,CAACze,KAAK,CAAC;EACtD,EAAA,IAAM0e,UAAU,GAAGF,eAAe,CAAC3jB,MAAM;IACzC,IAAM8jB,eAAe,GAAGC,uBAAuB,CAC7C5e,KAAK,EACL6c,kBAAkB,EAClB6B,UAAU,GAAG,CACf,CAAC;EACD,EAAA,IAAMG,UAAU,GAAGF,eAAe,CAAC9jB,MAAM;EACzC,EAAA,KAAK,IAAIkB,CAAC,GAAG2iB,UAAU,IAAI,CAAC,GAAGG,UAAU,IAAI,CAAC,EAAE9iB,CAAC,EAAE,GAAI;EACrD,IAAA,IAAM+iB,aAAyC,GAAG;EAChD/lB,MAAAA,IAAI,EAAE;OACP;EACD,IAAA,IAAI2lB,UAAU,EAAE;QACdI,aAAa,CAAChb,KAAK,GAAG0a,eAAe,CAACziB,CAAC,GAAG2iB,UAAU,CAAC;EACvD,IAAA;EACA,IAAA,IAAIG,UAAU,EAAE;QACdC,aAAa,CAACjb,KAAK,GAAG8a,eAAe,CAAC5iB,CAAC,GAAG8iB,UAAU,CAAC;EACrD,MAAA,IAAME,YAAY,GAAGD,aAAa,CAACjb,KAAK,CAACqa,OAAO;EAChD,MAAA,IAAIY,aAAa,CAAChb,KAAK,IAAIib,YAAY,EAAE;EACvCD,QAAAA,aAAa,CAAChb,KAAK,CAACoa,OAAO,IAAIa,YAAY;EAC7C,MAAA;EACF,IAAA;EACAtC,IAAAA,cAAc,CAAC/X,IAAI,CAACoa,aAAa,CAAC;EACpC,EAAA;EAEA,EAAA,IAAIvD,WAAW,EAAE;EACf;EACA,IAAA,IAAMyD,EAAE,GAAG1J,SAAS,CAACC,SAAS;MAC9B,IACEgG,WAAW,CAAC/e,KAAK,CAAC,GAAG,CAAC,CAACzB,IAAI,CAAC,UAAC+e,UAAU,EAAA;QAAA,OAAKpJ,MAAM,CAACoJ,UAAU,CAAC;EAAA,IAAA,CAAA,CAAC,IAC/D1E,gCAAgC,EAAE,EAClC;EACA,MAAA,OAAOkJ,OAAO,CAACC,OAAO,CACpB5B,oBAAoB,CAClB,IAAIkB,KAAK,CAAA,wFAAA,GACkFmB,EAAE,GAAA,GAC7F,CAAC,EACDvC,cACF,CACF,CAAC;EACH,IAAA;EACF,EAAA;IAEA,OAAO6B,OAAO,CAACW,GAAG,CAChBxC,cAAc,CAACzM,GAAG,CAAC,UAAC8O,aAAa,EAAK;EACpC;EACA,IAAA,IAAMI,eAAe,GAAGC,uBAAuB,CAACL,aAAa,CAAC;EAC9D,IAAA,OACET,KAAK,CAACa,eAAe,CAAC,KACrBb,KAAK,CAACa,eAAe,CAAC,GAAGd,iBAAiB,CAACgB,YAAY,CAACN,aAAa,CAAC,CAAC;EAE5E,EAAA,CAAC,CACH,CAAC,CACEO,IAAI,CAAC,UAAC3C,mBAAmB,EAAA;MAAA,OAAM;EAC9BN,MAAAA,SAAS,EAAE,CAACM,mBAAmB,CAAC3hB,IAAI,CAAC,UAACxC,IAAI,EAAA;UAAA,OAAK,CAACA,IAAI,CAAC6jB,SAAS;QAAA,CAAA,CAAC;EAC/DK,MAAAA,cAAc,EAAdA,cAAc;EACdC,MAAAA,mBAAmB,EAAnBA;OACD;EAAA,EAAA,CAAC,CAAC,CACF4C,KAAK,CAAC,UAACzsB,KAAK,EAAA;MAAA,OAAM;EACjBupB,MAAAA,SAAS,EAAE,KAAK;EAChBK,MAAAA,cAAc,EAAdA,cAAc;EACdC,MAAAA,mBAAmB,EAAE,EAAqC;EAC1D7pB,MAAAA,KAAK,EAALA;OACD;EAAA,EAAA,CAAC,CAAC;EACP;EAEA,SAAS4rB,uBAAuBA,CAACze,KAAY,EAAwB;EAAA,EAAA,IAAAuf,iBAAA;EACnE,EAAA,IAAMhE,WAAW,GAAA,CAAAgE,iBAAA,GAAGvf,KAAK,CAAC8Z,UAAU,KAAA,IAAA,GAAA,MAAA,GAAhByF,iBAAA,CAAkB/iB,KAAK,CAAC,GAAG,CAAC;EAChD,EAAA,IAAM0hB,OAAO,GAAGsB,yBAAyB,CAACxf,KAAK,CAAC;EAChD,EAAA,IAAM8d,KAAK,GAAG9d,KAAK,CAAC8d,KAAK,IAAI,GAAG;EAChC,EAAA,IAAMC,MAAM,GAAG/d,KAAK,CAAC+d,MAAM,IAAI,GAAG;EAClC;EACA,EAAA,IAAM0B,SAAS,GAAGzf,KAAK,CAACge,SAAS,IAAI,EAAE;IACvC,IAAMC,UAAU,GAAGje,KAAK,CAACie,UAAU,CAACrD,WAAW,EAA0B;IACzE,OAAOW,WAAW,GACdA,WAAW,CAACvL,GAAG,CAAC,UAAC8J,UAAkB,EAAK;EACtC,IAAA,IAAM4F,kBAAsC,GAAG;QAC7CC,WAAW,EAAE/F,gBAAgB,CAC3B6B,uBAAuB,CAAC3B,UAAU,CAAC,EACnC,OACF,CAAC;EACDgE,MAAAA,KAAK,EAALA,KAAK;EACLC,MAAAA,MAAM,EAANA,MAAM;EACNG,MAAAA,OAAO,EAAPA,OAAO;EACPuB,MAAAA,SAAS,EAATA;OACD;MACD,IAAIxB,UAAU,KAAK,KAAK,EAAE;QACxByB,kBAAkB,CAACE,gBAAgB,GAAG3B,UAA8B;EACtE,IAAA;EACA,IAAA,OAAOyB,kBAAkB;IAC3B,CAAC,CAAC,GACF,EAAE;EACR;EAEA,SAASd,uBAAuBA,CAC9B5e,KAAY,EACZ6c,kBAAsC,EACtCgD,QAAiB,EACK;EAAA,EAAA,IAAAC,iBAAA;EACtB,EAAA,IAAMC,WAAW,GAAA,CAAAD,iBAAA,GAAG9f,KAAK,CAACmd,UAAU,KAAA,IAAA,GAAA,MAAA,GAAhB2C,iBAAA,CAAkBtjB,KAAK,CAAC,GAAG,CAAC;EAChD,EAAA,IAAMwjB,eAAe,GAAGR,yBAAyB,CAACxf,KAAK,CAAC;EACxD,EAAA,IAAI+f,WAAW,IAAI/f,KAAK,CAACkd,WAAW,EAAE;MACpC,OAAOld,KAAK,CAACkd,WAAW,CAACtO,MAAM,CAAC,UAAC6N,cAAc,EAAEwD,YAAY,EAAK;EAAA,MAAA,IAAAC,qBAAA;EAChE,MAAA,IAAMxT,MAAM,GAAGuT,YAAY,GAAA,CAAAC,qBAAA,GACvBrD,kBAAkB,CAACY,MAAM,CAACwC,YAAY,CAAC,KAAA,IAAA,GAAA,MAAA,GAAvCC,qBAAA,CAAyCxT,MAAM,GAC/C,IAAI;EACR,MAAA,IAAIA,MAAM,EAAE;UACV,OAAOA,MAAM,CAACkC,MAAM,CAAC,UAACuR,OAAO,EAAEC,UAAU,EAAK;EAC5C,UAAA,IAAIA,UAAU,CAACzC,OAAO,KAAKsC,YAAY,EAAE;cACvC,IAAMI,cAAc,GAAGC,UAAU,CAACF,UAAU,CAAC9C,QAAQ,IAAI,EAAE,CAAC;EAC5DyC,YAAAA,WAAW,CAACpmB,OAAO,CAAC,UAACwjB,UAAU,EAAK;EAClC,cAAA,IAAMoD,kBAAsC,GAAG;EAC7CZ,gBAAAA,WAAW,EAAE/F,gBAAgB,CAACuD,UAAU,EAAE,OAAO,CAAC;kBAClDe,OAAO,EAAE2B,QAAQ,GACbW,qBAAqB,CAACrD,UAAU,EAAE6C,eAAe,CAAC,GAClDA;iBACL;EACD,cAAA,IAAIK,cAAc,EAAE;EAClBE,gBAAAA,kBAAkB,CAACjD,QAAQ,GAAG,EAAE,GAAG+C,cAAc;EACnD,cAAA;EACAF,cAAAA,OAAO,CAACzb,IAAI,CAAC6b,kBAAkB,CAAC;EAClC,YAAA,CAAC,CAAC;EACJ,UAAA;EACA,UAAA,OAAOJ,OAAO;UAChB,CAAC,EAAE1D,cAAc,CAAC;EACpB,MAAA;EACA,MAAA,OAAOA,cAAc;MACvB,CAAC,EAAE,EAA0B,CAAC;EAChC,EAAA;EACA,EAAA,OAAO,EAAE;EACX;EAEA,SAAS+D,qBAAqBA,CAC5BrD,UAAkB,EAClBsD,YAAoB,EACZ;IACR,IAAIA,YAAY,IAAI,CAAC,EAAE;EACrB,IAAA,OAAO,CAAC;EACV,EAAA;IACA,IAAI1B,YAAY,GAAG,MAAM;IACzB,IAAI5B,UAAU,KAAK,MAAM,EAAE;EACzB4B,IAAAA,YAAY,GAAG,MAAM;EACvB,EAAA,CAAC,MAAM,IAAI5B,UAAU,KAAK,MAAM,EAAE;EAChC4B,IAAAA,YAAY,GAAG,MAAM;EACvB,EAAA;IACA,OAAOnrB,IAAI,CAAC+D,GAAG,CAAC8oB,YAAY,GAAG,CAAC,EAAE1B,YAAY,CAAC,CAAC;EAClD;EAEA,SAASS,yBAAyBA,CAACxf,KAAY,EAAU;IACvD,OACEpM,IAAI,CAAC8sB,IAAI,CAAC9sB,IAAI,CAACsD,GAAG,CAAC8I,KAAK,CAACke,OAAO,GAAG,GAAG,EAAEle,KAAK,CAAC2gB,cAAc,CAAC,GAAG,IAAI,CAAC,GACnE,IAAI,IAAI,CAAC;EAEf;EAEA,SAASxB,uBAAuBA,CAACyB,MAAkC,EAAU;IAC3E,IAAI7oB,GAAG,GAAG,EAAE;EACZ,EAAA,IAAQ8L,KAAK,GAAY+c,MAAM,CAAvB/c,KAAK;MAAEC,KAAK,GAAK8c,MAAM,CAAhB9c,KAAK;EACpB,EAAA,IAAIA,KAAK,EAAE;EACT,IAAA,IAAMoE,KAAK,GAAG+T,oBAAoB,CAACnY,KAAK,CAAC6b,WAAW,CAAC;EACrD5nB,IAAAA,GAAG,IAAOmQ,KAAK,GAAA,IAAA,GAAKpE,KAAK,CAACia,MAAM,GAAA,GAAA,GAAIja,KAAK,CAACga,KAAK,GAAA,GAAA,GAAIlqB,IAAI,CAAC8sB,IAAI,CAAC5c,KAAK,CAAC2b,SAAS,CAAC,IAC3E3b,KAAK,CAAC8b,gBAAgB,IAAI,IAAI,CAAA,GAAA,GAAA,GAC5BhsB,IAAI,CAAC8sB,IAAI,CAAC5c,KAAK,CAACoa,OAAO,GAAG,GAAG,CAAG;EACtC,EAAA;EACA,EAAA,IAAIra,KAAK,EAAE;EACT,IAAA,IAAMqE,MAAK,GAAG+T,oBAAoB,CAACpY,KAAK,CAAC8b,WAAW,CAAC;MACrD5nB,GAAG,IAAA,EAAA,IAAO+L,KAAK,GAAG,GAAG,GAAG,EAAE,CAAA,GAAGoE,MAAK,GAAA,IAAA,GAAKrE,KAAK,CAACyZ,QAAU;EACzD,EAAA;EACA,EAAA,OAAOvlB,GAAG;EACZ;;ECjQO,IAAM8oB,UAAU,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAU;EAG9D,SAASC,WAAWA,CAAC5sB,KAAU,EAAsB;IAC1D,OAAO2sB,UAAU,CAAC5lB,OAAO,CAAC/G,KAAK,CAAC,GAAG,EAAE;EACvC;EAEO,IAAM6sB,gBAAgB,GAAG,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAU;EAGtD,SAASC,YAAYA,CAAC9sB,KAAU,EAAuB;EAC5D,EAAA,OAAO,CAAC,CAACA,KAAK,IAAI6sB,gBAAgB,CAAC9lB,OAAO,CAAC/G,KAAK,CAAC,GAAG,EAAE;EACxD;EAIA,IAAkB+sB,OAAO,GAAA;IAAAC,EAAA,EAAA,EAAA;IAAAC,GAAA,EAAA,KAAA;IAAAC,EAAA,EAAA;EAAA,CAAA;EAMlB,SAASC,YAAYA,CAACC,OAAqB,EAAW;EAC3D,EAAA,IAAQC,YAAY,GAA6BD,OAAO,CAAhDC,YAAY;MAAEC,iBAAiB,GAAUF,OAAO,CAAlCE,iBAAiB;MAAEC,GAAG,GAAKH,OAAO,CAAfG,GAAG;EAC5C;EACA;EACA;EACA,EAAA,IAAMC,oBAAoB,GAAGD,GAAG,GAAGF,YAAY,GAAG,CAAC;IACnD,IAAIA,YAAY,IAAIG,oBAAoB,EAAE;EACxC,IAAA,IAAIF,iBAAiB,EAAE;QACrB,OAAOP,OAAO,CAACG,EAAE;EACnB,IAAA;MACA,OAAOH,OAAO,CAACE,GAAG;EACpB,EAAA;IACA,OAAOF,OAAO,CAACC,EAAE;EACnB;EAEA,IAAaS,gBAAgB,gBAAA,YAAA;EAK3B,EAAA,SAAAA,iBAAYC,GAAY,EAAEC,IAAa,EAAEC,IAAc,EAAE;EAAA,IAAA,IAAA,CAJzDF,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHC,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACJC,IAAI,GAAA,MAAA;MAGF,IAAI,CAACF,GAAG,GAAGA,GAAG;MACd,IAAI,CAACC,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB,EAAA;EAAC,EAAA,IAAAnsB,MAAA,GAAAgsB,gBAAA,CAAA/rB,SAAA;EAAAD,EAAAA,MAAA,CAEDosB,aAAa,GAAb,SAAAA,aAAaA,CAACC,GAAW,EAAkB;MACzC,IAAMlvB,GAAQ,GAAG,IAAIoG,IAAI,CAACnG,GAAG,CAACivB,GAAG,CAAC;EAClC,IAAA,IAAI,IAAI,CAACJ,GAAG,KAAK7nB,SAAS,EAAE;EAC1BjH,MAAAA,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,UAAU,EAAE,IAAI,CAACijB,GAAG,CAAC1uB,QAAQ,EAAE,CAAC;EACvD,IAAA;EACA,IAAA,IAAI,IAAI,CAAC2uB,IAAI,KAAK9nB,SAAS,EAAE;EAC3BjH,MAAAA,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,WAAW,EAAE,IAAI,CAACkjB,IAAI,CAAC3uB,QAAQ,EAAE,CAAC;EACzD,IAAA;MACA,IAAI,IAAI,CAAC4uB,IAAI,EAAE;QACbhvB,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,WAAW,EAAE,IAAI,CAACmjB,IAAI,CAAC;EAC9C,IAAA;MACA,OAAOhvB,GAAG,CAACovB,IAAI;IACjB,CAAC;EAAA,EAAA,OAAAP,gBAAA;EAAA,CAAA,EAAA;EAGH,IAAaQ,KAAK,gBAAA,YAAA;IA0BhB,SAAAA,KAAAA,CAAYzhB,IAAiC,EAAE;EAAA,IAAA,IAAA,CAzB/B0hB,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNjF,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVe,OAAO,GAAA,MAAA;EAAA,IAAA,IAAA,CACPlE,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACRlnB,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHkrB,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACTD,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACN/kB,EAAE,GAAA,MAAA;EAAA,IAAA,IAAA,CACFgC,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACJmN,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACZ2R,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVgE,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACdwD,OAAO,GAAA,MAAA;MAAA,IAAA,CACPe,aAAa,GAAW,CAAC;MAAA,IAAA,CACzBC,SAAS,GAAW,CAAC;EAAA,IAAA,IAAA,CACrB1lB,MAAM,GAAA,MAAA;MAAA,IAAA,CACN2lB,WAAW,GAAW,CAAC;EAAA,IAAA,IAAA,CACvBC,gBAAgB,GAAA,MAAA;EAAA,IAAA,IAAA,CAChBrG,eAAe,GAAA,MAAA;MAAA,IAAA,CACdsG,WAAW,GAAW,CAAC;EAAA,IAAA,IAAA,CACvBC,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACZC,eAAe,GAAA,MAAA;EACvB;MAAA,IAAA,CACiBC,MAAM,GAAW,CAAC;EAGjC,IAAA,IAAI,CAAC9vB,GAAG,GAAG,CAAC4N,IAAI,CAAC5N,GAAG,CAAC;EACrB,IAAA,IAAI,CAACsvB,MAAM,GAAG,CAAC1hB,IAAI,CAACmiB,KAAK,CAAC;EAC1B,IAAA,IAAI,CAAC3E,OAAO,GAAGxd,IAAI,CAACwd,OAAO;MAC3B,IAAIxd,IAAI,CAAC4gB,OAAO,EAAE;EAChB,MAAA,IAAI,CAACA,OAAO,GAAG5gB,IAAI,CAAC4gB,OAAO;EAC7B,IAAA;EACA,IAAA,IAAI,CAACtoB,EAAE,GAAG0H,IAAI,CAAC1H,EAAE,IAAI,CAAC;EACtB,IAAA,IAAI,CAACgC,IAAI,GAAG0F,IAAI,CAAC1F,IAAI;EACrB,IAAA,IAAI,CAAC8iB,KAAK,GAAGpd,IAAI,CAACod,KAAK,IAAI,CAAC;EAC5B,IAAA,IAAI,CAACC,MAAM,GAAGrd,IAAI,CAACqd,MAAM,IAAI,CAAC;EAC9B,IAAA,IAAI,CAACC,SAAS,GAAGtd,IAAI,CAACmiB,KAAK,CAACC,aAAa,CAAC,YAAY,EAAE,CAAC,CAAC;MAC1D,IAAI,CAACL,WAAW,GAAG/hB,IAAI,CAACmiB,KAAK,CAACE,cAAc,CAAC,mBAAmB,CAAC;EACjE,IAAA,IAAI,CAAC5F,UAAU,GAAGzc,IAAI,CAACyc,UAAU;EACjC,IAAA,IAAI,CAACrD,UAAU,GAAGpZ,IAAI,CAACoZ,UAAU;EACjC,IAAA,IAAI,CAACE,QAAQ,GAAG,CAACtZ,IAAI,CAACoZ,UAAU,EAAEpZ,IAAI,CAACyc,UAAU,CAAC,CAC/C6F,MAAM,CAAC,UAACtvB,CAAC,EAAA;QAAA,OAAK,CAAC,CAACA,CAAC;EAAA,IAAA,CAAA,CAAC,CAClBsc,GAAG,CAAC,UAACiT,CAAS,EAAA;EAAA,MAAA,OAAKA,CAAC,CAACvnB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EAAA,IAAA,CAAA,CAAC,CACrCkX,IAAI,CAAC,GAAG,CAAC;MACZ,IAAI,cAAc,IAAIlS,IAAI,EAAE;EAAA,MAAA,IAAAwiB,kBAAA;EAC1B,MAAA,IAAI,CAAC/a,YAAY,GAAGzH,IAAI,CAACyH,YAAY;QACrC,IAAMgb,iBAAiB,GAAA,CAAAD,kBAAA,GAAGxiB,IAAI,CAACyH,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjB+a,kBAAA,CAAmBpJ,UAAU;EACvD,MAAA,IAAIqJ,iBAAiB,IAAIA,iBAAiB,KAAKziB,IAAI,CAACoZ,UAAU,EAAE;UAC9D,IAAI,CAACE,QAAQ,IAAA,GAAA,GAAQmJ,iBAAiB,CAACznB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAG;EAC1D,MAAA;EACF,IAAA;MACA,IAAI,CAAC0nB,UAAU,CAAC,OAAO,EAAE1iB,IAAI,CAACmiB,KAAK,CAAC7tB,KAAK,CAAC;MAC1C,IAAI,CAACouB,UAAU,CAAC,MAAM,EAAE1iB,IAAI,CAACmiB,KAAK,CAACQ,SAAS,CAAC;EAC/C,EAAA;EAAC,EAAA,IAAAniB,OAAA,GAAAihB,KAAA,CAAAvsB,SAAA;EAAAsL,EAAAA,OAAA,CAkCDoiB,aAAa,GAAb,SAAAA,aAAaA,CAAC3F,OAA2B,EAAW;EAClD,IAAA,OAAO4F,QAAQ,CAAC,IAAI,CAACb,YAAY,EAAE/E,OAAO,CAAC;IAC7C,CAAC;EAAAzc,EAAAA,OAAA,CAEDsiB,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAAC7F,OAA2B,EAAW;EACrD,IAAA,OAAO4F,QAAQ,CAAC,IAAI,CAACZ,eAAe,EAAEhF,OAAO,CAAC;IAChD,CAAC;IAAAzc,OAAA,CAUDkiB,UAAU,GAAV,SAAAA,UAAUA,CAACrqB,IAAY,EAAE4kB,OAA2B,EAAE;MACpD,IAAI,CAACA,OAAO,EAAE;EACZ,MAAA;EACF,IAAA;MACA,IAAI5kB,IAAI,KAAK,OAAO,EAAE;EACpB,MAAA,IAAImkB,WAAW,GAAG,IAAI,CAACwF,YAAY;QACnC,IAAI,CAACxF,WAAW,EAAE;EAChBA,QAAAA,WAAW,GAAG,IAAI,CAACwF,YAAY,GAAG,EAAE;EACtC,MAAA;QACA,IAAIxF,WAAW,CAACjiB,OAAO,CAAC0iB,OAAO,CAAC,KAAK,EAAE,EAAE;EACvCT,QAAAA,WAAW,CAACxY,IAAI,CAACiZ,OAAO,CAAC;EAC3B,MAAA;EACF,IAAA,CAAC,MAAM,IAAI5kB,IAAI,KAAK,MAAM,EAAE;EAC1B,MAAA,IAAI0qB,cAAc,GAAG,IAAI,CAACd,eAAe;QACzC,IAAI,CAACc,cAAc,EAAE;EACnBA,QAAAA,cAAc,GAAG,IAAI,CAACd,eAAe,GAAG,EAAE;EAC5C,MAAA;QACA,IAAIc,cAAc,CAACxoB,OAAO,CAAC0iB,OAAO,CAAC,KAAK,EAAE,EAAE;EAC1C8F,QAAAA,cAAc,CAAC/e,IAAI,CAACiZ,OAAO,CAAC;EAC9B,MAAA;EACF,IAAA;EACF,EAAA;;EAEA;EAAA;IAAAzc,OAAA,CAuBAwiB,WAAW,GAAX,SAAAA,WAAWA,GAAG,CAAC,CAAC;IAAA,OAAA5rB,YAAA,CAAAqqB,KAAA,EAAA,CAAA;MAAApqB,GAAA,EAAA,YAAA;MAAAC,GAAA,EA9FhB,SAAAA,GAAAA,GAAyB;QACvB,OAAOpE,IAAI,CAACsD,GAAG,CAAC,IAAI,CAACqrB,WAAW,EAAE,IAAI,CAACrE,OAAO,CAAC;EACjD,IAAA;EAAC,GAAA,EAAA;MAAAnmB,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;QAC3B,OAAO,IAAI,CAACyqB,WAAW,IAAI,IAAI,CAACF,WAAW,IAAI,IAAI,CAACrE,OAAO;EAC7D,IAAA;EAAC,GAAA,EAAA;MAAAnmB,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;EAC3B,MAAA,OAAO,IAAI,CAACoqB,MAAM,CAAC,CAAC,CAAC;EACvB,IAAA;EAAC,GAAA,EAAA;MAAArqB,GAAA,EAAA,QAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqB;EACnB,MAAA,OAAO,IAAI,CAAC6qB,KAAK,CAACc,MAAM,IAAI,EAAE;EAChC,IAAA;EAAC,GAAA,EAAA;MAAA5rB,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,OAAO,IAAI,CAAC6qB,KAAK,CAAC,YAAY,CAAC,IAAI,GAAG;EACxC,IAAA;EAAC,GAAA,EAAA;MAAA9qB,GAAA,EAAA,YAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;EAC3B,MAAA,OAAO,IAAI,CAAC6qB,KAAK,CAAC,aAAa,CAAC,IAAI,KAAK;EAC3C,IAAA;EAAC,GAAA,EAAA;MAAA9qB,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoB;QAClB,OAAO,IAAI,CAAC6qB,KAAK,CAACC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;EAC7C,IAAA;EAAC,GAAA,EAAA;MAAA/qB,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkB;EAChB,MAAA,OAAO,IAAI,CAAClF,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAAiF,GAAA,EAAA,aAAA;MAAAC,GAAA,EAUD,SAAAA,GAAAA,GAAsD;QACpD,OAAO,IAAI,CAAC0qB,YAAY;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAA3qB,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyD;QACvD,OAAO,IAAI,CAAC2qB,eAAe;EAC7B,IAAA;EAAC,GAAA,EAAA;MAAA5qB,GAAA,EAAA,OAAA;MAAAC,GAAA,EA0BD,SAAAA,GAAAA,GAAoB;EAClB,MAAA,OAAO,CAAC;MACV,CAAC;EAAA2G,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAUzK,KAAa,EAAE,CAAC;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,eAAA;MAAAC,GAAA,EAE3B,SAAAA,GAAAA,GAAwD;QACtD,OAAO,IAAI,CAACklB,WAAW,GAAG,CAAC,IAAI,CAAC+C,YAAY,CAAC,GAAGlmB,SAAS;EAC3D,IAAA;EAAC,GAAA,EAAA;MAAAhC,GAAA,EAAA,cAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuD;QACrD,OAAO,IAAI,CAACyrB,cAAc,GAAG,CAAC,IAAI,CAACG,WAAW,CAAC,GAAG7pB,SAAS;EAC7D,IAAA;EAAC,GAAA,EAAA;MAAAhC,GAAA,EAAA,cAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuC;EAAA,MAAA,IAAA6rB,iBAAA;QACrC,OAAA,CAAAA,iBAAA,GAAO,IAAI,CAAC3G,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB2G,iBAAA,CAAmB,CAAC,CAAC;EAC9B,IAAA;EAAC,GAAA,EAAA;MAAA9rB,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsC;EAAA,MAAA,IAAA8rB,oBAAA;QACpC,OAAA,CAAAA,oBAAA,GAAO,IAAI,CAACL,cAAc,KAAA,IAAA,GAAA,MAAA,GAAnBK,oBAAA,CAAsB,CAAC,CAAC;EACjC,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;EAKH,SAASP,QAAQA,CACf9F,MAA0C,EAC1CE,OAA2B,EAClB;EACT,EAAA,IAAI,CAACA,OAAO,IAAI,CAACF,MAAM,EAAE;EACvB,IAAA,OAAO,KAAK;EACd,EAAA;IACA,OAAOA,MAAM,CAACxiB,OAAO,CAAC0iB,OAAO,CAAC,KAAK,EAAE;EACvC;;ECxQA;EACA;EACA;EACO,SAASoG,cAAcA,GAAG;EAC/B,EAAA,IAAI,OAAOC,UAAU,KAAK,UAAU,EAAE;EACpC,IAAA,IAAMC,cAAc,GAAGD,UAAU,CAAC,uBAAuB,CAAC;EAC1D,IAAA,IAAME,QAAQ,GAAGF,UAAU,CAAC,WAAW,CAAC;EACxC,IAAA,IAAIC,cAAc,CAACE,KAAK,KAAKD,QAAQ,CAACC,KAAK,EAAE;EAC3C,MAAA,OAAOF,cAAc,CAACG,OAAO,KAAK,IAAI;EACxC,IAAA;EACF,EAAA;EACA,EAAA,OAAO,KAAK;EACd;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASC,wBAAwBA,CACtCvH,iBAAyC,EACzCwH,eAAiD,EACjD;IACA,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,kBAAqC,GAAG,EAAE;EAE9C,EAAA,IAAI1H,iBAAiB,EAAE;MACrByH,SAAS,GAAGzH,iBAAiB,KAAK,KAAK;MACvC0H,kBAAkB,GAAG,CAAC1H,iBAAiB,CAAC;EAC1C,EAAA;EAEA,EAAA,IAAIwH,eAAe,EAAE;MACnBE,kBAAkB,GAChBF,eAAe,CAACE,kBAAkB,IAAIzD,gBAAgB,CAAC3tB,KAAK,CAAC,CAAC,CAAC;EACjE,IAAA,IAAMqxB,kBAAkB,GACtBD,kBAAkB,CAAC5R,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC0R,eAAe,CAACxK,UAAU;EACtEyK,IAAAA,SAAS,GACPD,eAAe,CAACC,SAAS,KAAKxqB,SAAS,GACnCuqB,eAAe,CAACC,SAAS,GACzBE,kBAAkB,IAAIV,cAAc,EAAE;MAC5C,IAAI,CAACQ,SAAS,EAAE;QACdC,kBAAkB,GAAG,CAAC,KAAK,CAAC;EAC9B,IAAA;EACF,EAAA;IAEA,OAAO;EACLD,IAAAA,SAAS,EAATA,SAAS;EACTC,IAAAA,kBAAkB,EAAlBA;KACD;EACH;;EClEA,IAAME,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAC5BC,QAAmE,EAChE;EACH,EAAA,IAAMC,KAAK,GAAG,IAAIC,OAAO,EAAE;EAC3B,EAAA,OAAO,UAACC,CAAC,EAAE5wB,KAAK,EAAK;EACnB,IAAA,IAAIywB,QAAQ,EAAE;EACZzwB,MAAAA,KAAK,GAAGywB,QAAQ,CAACG,CAAC,EAAE5wB,KAAK,CAAC;EAC5B,IAAA;MACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;EAC/C,MAAA,IAAI0wB,KAAK,CAACG,GAAG,CAAC7wB,KAAK,CAAC,EAAE;EACpB,QAAA;EACF,MAAA;EACA0wB,MAAAA,KAAK,CAACI,GAAG,CAAC9wB,KAAK,CAAC;EAClB,IAAA;EACA,IAAA,OAAOA,KAAK;IACd,CAAC;EACH,CAAC;EAEM,IAAM+wB,SAAS,GAAG,SAAZA,SAASA,CACpBhhB,MAAS,EACT0gB,QAAsD,EAAA;IAAA,OAC3CO,IAAI,CAACD,SAAS,CAAChhB,MAAM,EAAEygB,wBAAwB,CAACC,QAAQ,CAAC,CAAC;EAAA,CAAA;;ECmBhE,SAASQ,iBAAiBA,CAC/BC,UAAwC,EACxCtI,iBAAyC,EACzCE,SAAiB,EACjBC,eAAiD,EACjDqH,eAAiD,EAChC;EACjB,EAAA,IAAMe,SAAS,GAAG3qB,MAAM,CAAChB,IAAI,CAAC0rB,UAAU,CAAC;EACzC,EAAA,IAAM/H,kBAAkB,GAAGJ,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEK,QAAQ;EACpD,EAAA,IAAMF,oBAAoB,GAAGH,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEE,UAAU;EACxD,EAAA,IAAMmI,oBAAoB,GAAGhB,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAExK,UAAU;IACxD,IAAMyL,YAAY,GAAGlI,kBAAkB,IAAI/e,QAAQ,CAAC+e,kBAAkB,CAAC,KAAK,CAAC;EAC7E;IACA,IAAImI,SAAS,GAAG,KAAK;IACrB,IAAIC,oBAAoB,GAAG,KAAK;IAChC,IAAIC,SAAS,GAAGlX,QAAQ;IACxB,IAAImX,YAAY,GAAGnX,QAAQ;IAC3B,IAAIoX,UAAU,GAAGpX,QAAQ;IACzB,IAAIqX,QAAQ,GAAGrX,QAAQ;IACvB,IAAIsX,aAAa,GAAG,CAAC;IACrB,IAAIC,WAA8B,GAAG,EAAE;EAEvC,EAAA,IAAAC,qBAAA,GAA0C3B,wBAAwB,CAChEvH,iBAAiB,EACjBwH,eACF,CAAC;MAHOC,SAAS,GAAAyB,qBAAA,CAATzB,SAAS;MAAEC,kBAAkB,GAAAwB,qBAAA,CAAlBxB,kBAAkB;IAGpC,IAAAyB,KAAA,GAAA,SAAAA,KAAAA,GAEqC;MACpC,IAAMC,IAAI,GAAGd,UAAU,CAACC,SAAS,CAACtpB,CAAC,CAAC,CAAC;MACrCypB,SAAS,KAATA,SAAS,GAAKU,IAAI,CAAC5I,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;MAClCoI,SAAS,GAAG9xB,IAAI,CAAC+D,GAAG,CAAC+tB,SAAS,EAAEQ,IAAI,CAACR,SAAS,CAAC;MAC/CC,YAAY,GAAG/xB,IAAI,CAAC+D,GAAG,CAACguB,YAAY,EAAEO,IAAI,CAACP,YAAY,CAAC;MACxDC,UAAU,GAAGhyB,IAAI,CAAC+D,GAAG,CAACiuB,UAAU,EAAEM,IAAI,CAACN,UAAU,CAAC;EAClD,IAAA,IAAMO,mBAAmB,GAAG3B,kBAAkB,CAACxB,MAAM,CACnD,UAACoD,KAAK,EAAA;EAAA,MAAA,OAAKF,IAAI,CAACH,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;EAAA,IAAA,CACxC,CAAC;EACD,IAAA,IAAID,mBAAmB,CAACtrB,MAAM,GAAG,CAAC,EAAE;EAClC4qB,MAAAA,oBAAoB,GAAG,IAAI;EAC7B,IAAA;IACF,CAAA;IAZA,KAAK,IAAI1pB,CAAC,GAAGspB,SAAS,CAACxqB,MAAM,EAAEkB,CAAC,EAAE,GAAA;MAAAkqB,KAAA,EAAA;EAAA,EAAA;IAalCP,SAAS,GAAGvjB,cAAA,CAAgBujB,SAAS,CAAC,GAAGA,SAAS,GAAG,CAAC;IACtDC,YAAY,GAAGvjB,cAAA,CAAgBujB,YAAY,CAAC,GAAGA,YAAY,GAAG,CAAC;IAC/D,IAAMU,SAAS,GAAGzyB,IAAI,CAACsD,GAAG,CAAC,IAAI,EAAEwuB,SAAS,CAAC;IAC3C,IAAMY,YAAY,GAAG1yB,IAAI,CAACsD,GAAG,CAAC,EAAE,EAAEyuB,YAAY,CAAC;IAC/CC,UAAU,GAAGhjB,cAAA,CAAgBgjB,UAAU,CAAC,GAAGA,UAAU,GAAG5I,SAAS;IACjEA,SAAS,GAAGppB,IAAI,CAACsD,GAAG,CAAC0uB,UAAU,EAAE5I,SAAS,CAAC;EAC3C;IACA,IAAI,CAACyI,oBAAoB,EAAE;EACzB3I,IAAAA,iBAAiB,GAAG/iB,SAAS;EAC/B,EAAA;EACA,EAAA,IAAMwsB,eAAe,GAAGlB,SAAS,CAACxqB,MAAM,GAAG,CAAC;IAC5C,IAAMmf,QAAQ,GAAGqL,SAAS,CAACzW,MAAM,CAC/B,UAAC4X,QAA4B,EAAEC,SAAiB,EAAK;EACnD;EACA,IAAA,IAAMC,aAAa,GAAGtB,UAAU,CAACqB,SAAS,CAAC;MAC3C,IAAIA,SAAS,KAAKD,QAAQ,EAAE;EAC1B,MAAA,OAAOA,QAAQ;EACjB,IAAA;MACAT,WAAW,GAAGN,oBAAmB,GAC7BjB,kBAAkB,CAACxB,MAAM,CACvB,UAACoD,KAAK,EAAA;EAAA,MAAA,OAAKM,aAAa,CAACX,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;MAAA,CACjD,CAAA,GACA,EAAE;EACN,IAAA,IAAIG,eAAe,EAAE;EACnB,MAAA,IAAIG,aAAa,CAACd,UAAU,GAAG5I,SAAS,EAAE;UACxC2J,6BAA6B,CAC3BF,SAAS,EAAA,iBAAA,GACSC,aAAa,CAACd,UAAU,GAAA,yBAAA,GAA0B5I,SACtE,CAAC;EACD,QAAA,OAAOwJ,QAAQ;EACjB,MAAA;EACA,MAAA,IAAI,CAACE,aAAa,CAACE,eAAe,EAAE;UAClCD,6BAA6B,CAC3BF,SAAS,EAAA,uDAEX,CAAC;EACD,QAAA,OAAOD,QAAQ;EACjB,MAAA;EACA,MAAA,IACEpJ,oBAAoB,IACpBqJ,SAAS,CAACxrB,OAAO,CAACmiB,oBAAoB,CAAC1hB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAA,EAChE;EACAirB,QAAAA,6BAA6B,CAC3BF,SAAS,EAAA,2BAAA,GACkBrJ,oBAAoB,iBACjD,CAAC;EACD,QAAA,OAAOoJ,QAAQ;EACjB,MAAA;EACA,MAAA,IAAInJ,kBAAkB,IAAI,CAACkI,YAAY,EAAE;EACvC,QAAA,IAAI,CAACmB,aAAa,CAACpJ,QAAQ,CAACD,kBAAkB,CAAC,EAAE;EAC/CsJ,UAAAA,6BAA6B,CAC3BF,SAAS,EAAA,qBAAA,GACapJ,kBAAkB,gDAA2C3iB,MAAM,CAAChB,IAAI,CAC5FgtB,aAAa,CAACpJ,QAChB,CAAC,MACH,CAAC;EACD,UAAA,OAAOkJ,QAAQ;EACjB,QAAA;EACF,MAAA,CAAC,MAAM,IACL,CAAC,CAACpJ,oBAAoB,IAAImI,YAAY,KACtCC,SAAS,IACTkB,aAAa,CAACpJ,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAA,EAChC;UACAqJ,6BAA6B,CAC3BF,SAAS,EAAA,uCAEX,CAAC;EACD,QAAA,OAAOD,QAAQ;EACjB,MAAA;EACA,MAAA,IAAIE,aAAa,CAAChB,SAAS,GAAGW,SAAS,EAAE;UACvCM,6BAA6B,CAC3BF,SAAS,EAAA,oBAAA,GACYC,aAAa,CAAChB,SAAS,GAAA,gBAAA,GAAiBW,SAC/D,CAAC;EACD,QAAA,OAAOG,QAAQ;EACjB,MAAA;EACA,MAAA,IAAIE,aAAa,CAACf,YAAY,GAAGW,YAAY,EAAE;UAC7CK,6BAA6B,CAC3BF,SAAS,EAAA,mBAAA,GACWC,aAAa,CAACf,YAAY,GAAA,gBAAA,GAAiBW,YACjE,CAAC;EACD,QAAA,OAAOE,QAAQ;EACjB,MAAA;EACA,MAAA,IACE,CAACT,WAAW,CAAChrB,IAAI,CAAC,UAACqrB,KAAK,EAAA;EAAA,QAAA,OAAKM,aAAa,CAACX,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;EAAA,MAAA,CAAA,CAAA,EACjE;UACAO,6BAA6B,CAC3BF,SAAS,EAAA,kCAAA,GAC0BxB,SAAS,CAACc,WAAW,CAAC,WAC3D,CAAC;EACD,QAAA,OAAOS,QAAQ;EACjB,MAAA;EACA,MAAA,IACElB,oBAAoB,IACpBmB,SAAS,CAACxrB,OAAO,CAACqqB,oBAAoB,CAAC5pB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAA,EAChE;EACAirB,QAAAA,6BAA6B,CAC3BF,SAAS,EAAA,2BAAA,GACkBnB,oBAAoB,iBACjD,CAAC;EACD,QAAA,OAAOkB,QAAQ;EACjB,MAAA;EACA,MAAA,IAAIE,aAAa,CAACG,QAAQ,GAAGf,aAAa,EAAE;UAC1Ca,6BAA6B,CAC3BF,SAAS,EAAA,eAAA,GACOC,aAAa,CAACG,QAAQ,GAAA,qBAAA,GAAsBf,aAC9D,CAAC;EACD,QAAA,OAAOU,QAAQ;EACjB,MAAA;EACF,IAAA;EACA;MACA,IACEA,QAAQ,KACPzM,iCAAiC,CAAC0M,SAAS,CAAC,IAC3C1M,iCAAiC,CAACyM,QAAQ,CAAC,IAC3CE,aAAa,CAACrE,aAAa,GAAG+C,UAAU,CAACoB,QAAQ,CAAC,CAACnE,aAAa,CAAA,EAClE;EACA,MAAA,OAAOmE,QAAQ;EACjB,IAAA;MACAX,QAAQ,GAAGa,aAAa,CAACb,QAAQ;MACjCC,aAAa,GAAGY,aAAa,CAACG,QAAQ;EACtC,IAAA,OAAOJ,SAAS;IAClB,CAAC,EACD1sB,SACF,CAAC;IACD,OAAO;EACLigB,IAAAA,QAAQ,EAARA,QAAQ;EACR+L,IAAAA,WAAW,EAAXA,WAAW;EACXxB,IAAAA,SAAS,EAATA,SAAS;EACToB,IAAAA,YAAY,EAAZA,YAAY;EACZC,IAAAA,UAAU,EAAVA,UAAU;EACVC,IAAAA,QAAQ,EAARA;KACD;EACH;EAEA,SAASc,6BAA6BA,CAACG,OAAe,EAAEC,MAAc,EAAE;EACtE5uB,EAAAA,MAAM,CAACzC,GAAG,CAAA,gCAAA,GACwBoxB,OAAO,GAAA,qBAAA,GAAqBC,MAC9D,CAAC;EACH;EAQO,SAASC,qBAAqBA,CAACC,cAA+B,EAAE;IACrE,OAAOA,cAAc,CAACrY,MAAM,CAC1B,UAACiO,kBAAsC,EAAEjV,KAAK,EAAK;MACjD,IAAIsf,UAAU,GAAGrK,kBAAkB,CAACY,MAAM,CAAC7V,KAAK,CAAC+V,OAAO,CAAC;MACzD,IAAI,CAACuJ,UAAU,EAAE;QACfA,UAAU,GAAGrK,kBAAkB,CAACY,MAAM,CAAC7V,KAAK,CAAC+V,OAAO,CAAC,GAAG;EACtDjR,QAAAA,MAAM,EAAE,EAAE;EACV4Q,QAAAA,QAAQ,EAAE;EAAE,UAAA,CAAC,EAAE;WAAG;EAClB6J,QAAAA,UAAU,EAAE,KAAK;EACjBC,QAAAA,aAAa,EAAE;SAChB;EACH,IAAA;EACAF,IAAAA,UAAU,CAACxa,MAAM,CAAChI,IAAI,CAACkD,KAAK,CAAC;EAC7B,IAAA,IAAMyf,WAAW,GAAGzf,KAAK,CAAC0V,QAAQ,IAAI,GAAG;EACzC4J,IAAAA,UAAU,CAAC5J,QAAQ,CAAC+J,WAAW,CAAC,GAC9B,CAACH,UAAU,CAAC5J,QAAQ,CAAC+J,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;MAC7CH,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAIvf,KAAK,CAACC,OAAO;MAC9Dqf,UAAU,CAACE,aAAa,GAAGF,UAAU,CAACE,aAAa,IAAIxf,KAAK,CAAC0f,UAAU;MACvE,IAAIJ,UAAU,CAACC,UAAU,EAAE;QACzBtK,kBAAkB,CAAC+J,eAAe,GAAG,IAAI;EAC3C,IAAA;MACA,IAAIM,UAAU,CAACE,aAAa,EAAE;QAC5BvK,kBAAkB,CAAC0K,kBAAkB,GAAG,IAAI;EAC9C,IAAA;EACA,IAAA,OAAO1K,kBAAkB;EAC3B,EAAA,CAAC,EACD;EACE+J,IAAAA,eAAe,EAAE,KAAK;EACtBW,IAAAA,kBAAkB,EAAE,KAAK;EACzB9J,IAAAA,MAAM,EAAE;EACV,GACF,CAAC;EACH;EAEO,SAAS+J,aAAaA,CAC3BC,MAAe,EACf5K,kBAAsC,EACtC6K,YAAoB,EACpBC,YAAoB,EACU;EAC9B,EAAA,OAAOF,MAAK,CACTr0B,KAAK,CAACs0B,YAAY,EAAEC,YAAY,GAAG,CAAC,CAAA,CACpC/Y,MAAM,CAAC,UAACgZ,KAAmC,EAAE5nB,KAAK,EAAEqD,KAAK,EAAK;EAC7D,IAAA,IAAI,CAACrD,KAAK,CAACga,QAAQ,EAAE;EACnB,MAAA,OAAO4N,KAAK;EACd,IAAA;EACA,IAAA,IAAM1K,WAAW,GAAGld,KAAK,CAACkd,WAAW;EACrC,IAAA,IAAIgJ,IAAI,GAAG0B,KAAK,CAAC5nB,KAAK,CAACga,QAAQ,CAAC;MAChC,IAAI,CAACkM,IAAI,EAAE;EACT0B,MAAAA,KAAK,CAAC5nB,KAAK,CAACga,QAAQ,CAAC,GAAGkM,IAAI,GAAG;EAC7BN,QAAAA,UAAU,EAAEpX,QAAQ;EACpBkX,QAAAA,SAAS,EAAElX,QAAQ;EACnBmX,QAAAA,YAAY,EAAEnX,QAAQ;EACtBqX,QAAAA,QAAQ,EAAExiB,KAAK;EACfwjB,QAAAA,QAAQ,EAAE,CAAC;EACXd,QAAAA,WAAW,EAAE;EAAE8B,UAAAA,GAAG,EAAE;WAAG;EACvBvK,QAAAA,QAAQ,EAAE;EAAE,UAAA,GAAG,EAAE;WAAG;UACpBsJ,eAAe,EAAE,CAAC1J,WAAW;EAC7BmF,QAAAA,aAAa,EAAE;SAChB;EACH,IAAA;EACA6D,IAAAA,IAAI,CAACN,UAAU,GAAGhyB,IAAI,CAAC+D,GAAG,CAACuuB,IAAI,CAACN,UAAU,EAAE5lB,KAAK,CAACke,OAAO,CAAC;EAC1D,IAAA,IAAM4J,mBAAmB,GAAGl0B,IAAI,CAAC+D,GAAG,CAACqI,KAAK,CAAC+d,MAAM,EAAE/d,KAAK,CAAC8d,KAAK,CAAC;EAC/DoI,IAAAA,IAAI,CAACR,SAAS,GAAG9xB,IAAI,CAAC+D,GAAG,CAACuuB,IAAI,CAACR,SAAS,EAAEoC,mBAAmB,CAAC;EAC9D5B,IAAAA,IAAI,CAACP,YAAY,GAAG/xB,IAAI,CAAC+D,GAAG,CAACuuB,IAAI,CAACP,YAAY,EAAE3lB,KAAK,CAACge,SAAS,CAAC;EAChEkI,IAAAA,IAAI,CAACL,QAAQ,GAAGjyB,IAAI,CAAC+D,GAAG,CAACuuB,IAAI,CAACL,QAAQ,EAAExiB,KAAK,CAAC;EAC9C6iB,IAAAA,IAAI,CAACW,QAAQ,GAAGjzB,IAAI,CAACsD,GAAG,CAACgvB,IAAI,CAACW,QAAQ,EAAE7mB,KAAK,CAAC+nB,KAAK,CAAC;EACpD7B,IAAAA,IAAI,CAAC7D,aAAa,IAAIriB,KAAK,CAACqiB,aAAa;MACzC6D,IAAI,CAACH,WAAW,CAAC/lB,KAAK,CAACie,UAAU,CAAC,GAChC,CAACiI,IAAI,CAACH,WAAW,CAAC/lB,KAAK,CAACie,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;MAC/C,IAAyBf,WAAW,EAAE;EACpCA,MAAAA,WAAW,CAACvjB,OAAO,CAAC,UAACsmB,YAAY,EAAK;UACpC,IAAI,CAACA,YAAY,EAAE;EACjB,UAAA;EACF,QAAA;EACA,QAAA,IAAM+H,UAAU,GAAGnL,kBAAkB,CAACY,MAAM,CAACwC,YAAY,CAAC;UAC1D,IAAI,CAAC+H,UAAU,EAAE;EACf,UAAA;EACF,QAAA;EACA;UACA9B,IAAI,CAACU,eAAe,GAClBV,IAAI,CAACU,eAAe,IAAI/J,kBAAkB,CAAC+J,eAAc,GACrDoB,UAAU,CAACb,UAAS,GACpBa,UAAU,CAACZ,aAAa,IACvB,CAACvK,kBAAkB,CAAC+J,eAAe,IAClC,CAAC/J,kBAAkB,CAAC0K,kBAAmB;EAC/C7sB,QAAAA,MAAM,CAAChB,IAAI,CAACsuB,UAAU,CAAC1K,QAAQ,CAAC,CAAC3jB,OAAO,CAAC,UAAC2jB,QAAQ,EAAK;YACrD4I,IAAI,CAAC5I,QAAQ,CAACA,QAAQ,CAAC,GACrB,CAAC4I,IAAI,CAAC5I,QAAQ,CAACA,QAAQ,CAAC,IAAI,CAAC,IAAI0K,UAAU,CAAC1K,QAAQ,CAACA,QAAQ,CAAC;EAClE,QAAA,CAAC,CAAC;EACJ,MAAA,CAAC,CAAC;EACJ,IAAA;EACA,IAAA,OAAOsK,KAAK;IACd,CAAC,EAAE,EAAE,CAAC;EACV;EAEO,SAASK,uBAAuBA,CACrCC,MAIa,EACwD;IACrE,IAAI,CAACA,MAAM,EAAE;EACX,IAAA,OAAOA,MAAM;EACf,EAAA;IACA,IAAA1oB,IAAA,GACE0oB,MAAM;MADAC,IAAI,GAAA3oB,IAAA,CAAJ2oB,IAAI;MAAEC,SAAS,GAAA5oB,IAAA,CAAT4oB,SAAS;MAAEC,eAAe,GAAA7oB,IAAA,CAAf6oB,eAAe;MAAE/K,QAAQ,GAAA9d,IAAA,CAAR8d,QAAQ;MAAEH,UAAU,GAAA3d,IAAA,CAAV2d,UAAU;IAE9D,OAAO;EAAEgL,IAAAA,IAAI,EAAJA,IAAI;EAAEC,IAAAA,SAAS,EAATA,SAAS;EAAEC,IAAAA,eAAe,EAAfA,eAAe;EAAE/K,IAAAA,QAAQ,EAARA,QAAQ;EAAEH,IAAAA,UAAU,EAAVA;KAAY;EACnE;EAEO,SAASmL,kBAAkBA,CAChCJ,MAAsE,EACtExb,MAAuB,EACvB6b,cAGY,EACJ;IACR,IAAI,OAAO,IAAIL,MAAM,EAAE;EACrB,IAAA,IAAM7kB,KAAK,GAAGqJ,MAAM,CAACzR,OAAO,CAACitB,MAAM,CAAC;EACpC,IAAA,IAAI7kB,KAAK,KAAK,EAAE,EAAE;EAChB,MAAA,OAAOA,KAAK;EACd,IAAA;EACF,EAAA;EACA,EAAA,KAAK,IAAItH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,IAAA,IAAM6L,KAAK,GAAG8E,MAAM,CAAC3Q,CAAC,CAAC;MACvB,IAAIysB,aAAa,CAACN,MAAM,EAAEtgB,KAAK,EAAE2gB,cAAc,CAAC,EAAE;EAChD,MAAA,OAAOxsB,CAAC;EACV,IAAA;EACF,EAAA;EACA,EAAA,OAAO,EAAE;EACX;EAEO,SAASysB,aAAaA,CAC3BN,MAAsE,EACtEtgB,KAAoB,EACpB2gB,cAGY,EACH;EACT,EAAA,IAAQ5K,OAAO,GAAgDuK,MAAM,CAA7DvK,OAAO;MAAE3iB,IAAI,GAA0CktB,MAAM,CAApDltB,IAAI;MAAEmtB,IAAI,GAAoCD,MAAM,CAA9CC,IAAI;MAAEC,SAAS,GAAyBF,MAAM,CAAxCE,SAAS;MAAWK,SAAS,GAAKP,MAAM,CAA7BrgB,OAAO;EAC/C,EAAA,IAAM6gB,MAAM,GAAIR,MAAM,CAA6BQ,MAAM;IACzD,OACE,CAAC/K,OAAO,KAAK5jB,SAAS,IAAI6N,KAAK,CAAC+V,OAAO,KAAKA,OAAO,MAClD3iB,IAAI,KAAKjB,SAAS,IAAI6N,KAAK,CAAC5M,IAAI,KAAKA,IAAI,CAAC,KAC1CmtB,IAAI,KAAKpuB,SAAS,IAAI4uB,cAAc,CAACR,IAAI,EAAEvgB,KAAK,CAACugB,IAAI,CAAC,CAAC,KACvDA,IAAI,KAAKpuB,SAAS,IAAI6N,KAAK,CAACwgB,SAAS,KAAKA,SAAS,CAAC,KACpDK,SAAS,KAAK1uB,SAAS,IAAI6N,KAAK,CAACC,OAAO,KAAK4gB,SAAS,CAAC,KACvDC,MAAM,KAAK3uB,SAAS,IAAI6N,KAAK,CAAC8gB,MAAM,KAAKA,MAAM,CAAC,KAChD,EAAE,iBAAiB,IAAIR,MAAM,CAAC,IAC7BU,oBAAoB,CAClBV,MAAM,CAACG,eAAe,IAAI,EAAE,EAC5BzgB,KAAK,CAACygB,eACR,CAAC,CAAC,KACHE,cAAc,KAAKxuB,SAAS,IAAIwuB,cAAc,CAACL,MAAM,EAAEtgB,KAAK,CAAC,CAAA;EAElE;EAEA,SAAS+gB,cAAcA,CAACE,SAAiB,EAAEC,SAAiB,EAAkB;EAAA,EAAA,IAAnCA,SAAiB,KAAA,MAAA,EAAA;EAAjBA,IAAAA,SAAiB,GAAG,IAAI;EAAA,EAAA;EACjE,EAAA,IAAID,SAAS,CAAChuB,MAAM,KAAKiuB,SAAS,CAACjuB,MAAM,EAAE;MACzC,OAAOguB,SAAS,KAAKC,SAAS;EAChC,EAAA;EACA,EAAA,OAAOD,SAAS,CAACnN,UAAU,CAACoN,SAAS,CAAC,IAAIA,SAAS,CAACpN,UAAU,CAACmN,SAAS,CAAC;EAC3E;EAEA,SAASD,oBAAoBA,CAC3BG,gBAAwB,EACxBC,gBAAwB,EACf;EAAA,EAAA,IADTA,gBAAwB,KAAA,MAAA,EAAA;EAAxBA,IAAAA,gBAAwB,GAAG,EAAE;EAAA,EAAA;EAE7B,EAAA,IAAMC,IAAI,GAAGF,gBAAgB,CAACvsB,KAAK,CAAC,GAAG,CAAC;EACxC,EAAA,IAAM0sB,IAAI,GAAGF,gBAAgB,CAACxsB,KAAK,CAAC,GAAG,CAAC;EACxC;EACA,EAAA,OACEysB,IAAI,CAACpuB,MAAM,KAAKquB,IAAI,CAACruB,MAAM,IAAI,CAACouB,IAAI,CAACluB,IAAI,CAAC,UAACouB,EAAE,EAAA;MAAA,OAAKD,IAAI,CAACjuB,OAAO,CAACkuB,EAAE,CAAC,KAAK,EAAE;IAAA,CAAA,CAAA;EAE7E;EAEO,SAASC,mBAAmBA,CACjClB,MAA4C,EAC5CtgB,KAAoB,EACpB;EACA,EAAA,IAAQuV,UAAU,GAAe+K,MAAM,CAA/B/K,UAAU;MAAEG,QAAQ,GAAK4K,MAAM,CAAnB5K,QAAQ;EAC5B,EAAA,OACE,CAACH,UAAU,KAAKpjB,SAAS,IACvB,CAAC6N,KAAK,CAACuV,UAAU,IAAI,EAAE,EAAEzhB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KACtCyhB,UAAU,CAACzhB,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAC7B4hB,QAAQ,KAAKvjB,SAAS,IAAIujB,QAAQ,MAAM1V,KAAK,CAAC0V,QAAQ,IAAI,GAAG,CAAC,CAAA;EAEnE;EAEO,SAAS+L,8BAA8BA,CAC5CnB,MAA4C,EAC5CT,MAAe,EACfR,cAA+B,EAC/BqC,WAAmB,EACnBf,cAGY,EACJ;EACR,EAAA,IAAMgB,YAAY,GAAG9B,MAAM,CAAC6B,WAAW,CAAC;EACxC;EACA;EACA,EAAA,IAAME,QAAQ,GAAG/B,MAAM,CAAC7Y,MAAM,CAC5B,UAAC6a,UAAuC,EAAEzpB,KAAK,EAAEqD,KAAK,EAAK;EACzD,IAAA,IAAM2e,GAAG,GAAGhiB,KAAK,CAACgiB,GAAG;EACrB,IAAA,IAAM0H,UAAU,GAAGD,UAAU,CAACzH,GAAG,CAAC,KAAKyH,UAAU,CAACzH,GAAG,CAAC,GAAG,EAAE,CAAC;EAC5D0H,IAAAA,UAAU,CAAChlB,IAAI,CAACrB,KAAK,CAAC;EACtB,IAAA,OAAOomB,UAAU;IACnB,CAAC,EACD,EACF,CAAC;EACD,EAAA,IAAMC,UAAU,GAAGF,QAAQ,CAACD,YAAY,CAACvH,GAAG,CAAC;EAC7C,EAAA,IAAI0H,UAAU,CAAC7uB,MAAM,GAAG,CAAC,EAAE;MACzByuB,WAAW,GAAG11B,IAAI,CAACsD,GAAG,CAAC6N,KAAK,CAACnR,IAAI,EAAE81B,UAAU,CAAC;EAChD,EAAA;EACA;EACA,EAAA,IAAM5M,iBAAiB,GAAGyM,YAAY,CAACtL,UAAU;EACjD,EAAA,IAAMlB,gBAAgB,GAAGwM,YAAY,CAACvL,SAAS;IAC/C,IAAM2L,iBAAiB,GAAGJ,YAAY,CAACvP,QAAQ,CAACte,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/D,IAAMkuB,aAAa,GAAGC,mBAAmB,CACvCpC,MAAM,EACN6B,WAAW,EACX,UAACtpB,KAAY,EAAK;MAChB,IACEA,KAAK,CAACie,UAAU,KAAKnB,iBAAiB,IACtC9c,KAAK,CAACge,SAAS,KAAKjB,gBAAgB,IACpC/c,KAAK,CAACga,QAAQ,CAACte,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAKiuB,iBAAgB,EACnD;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EACA,IAAA,IAAMzM,WAAW,GAAGld,KAAK,CAACkd,WAAW;EACrC,IAAA,IAAMxQ,MAAM,GAAGua,cAAc,CAACjE,MAAM,CAClC,UAACpb,KAAK,EAAA;EAAA,MAAA,OACJ,CAACsV,WAAW,IAAIA,WAAW,CAACjiB,OAAO,CAAC2M,KAAK,CAAC+V,OAAO,CAAC,KAAK,EAAE;EAAA,IAAA,CAC7D,CAAC;MACD,OAAO2K,kBAAkB,CAACJ,MAAM,EAAExb,MAAM,EAAE6b,cAAc,CAAC,GAAG,EAAE;EAChE,EAAA,CACF,CAAC;EACD,EAAA,IAAIqB,aAAa,GAAG,EAAE,EAAE;EACtB,IAAA,OAAOA,aAAa;EACtB,EAAA;IACA,OAAOC,mBAAmB,CAACpC,MAAM,EAAE6B,WAAW,EAAE,UAACtpB,KAAY,EAAK;EAChE,IAAA,IAAMkd,WAAW,GAAGld,KAAK,CAACkd,WAAW;EACrC,IAAA,IAAMxQ,MAAM,GAAGua,cAAc,CAACjE,MAAM,CAClC,UAACpb,KAAK,EAAA;EAAA,MAAA,OACJ,CAACsV,WAAW,IAAIA,WAAW,CAACjiB,OAAO,CAAC2M,KAAK,CAAC+V,OAAO,CAAC,KAAK,EAAE;EAAA,IAAA,CAC7D,CAAC;MACD,OAAO2K,kBAAkB,CAACJ,MAAM,EAAExb,MAAM,EAAE6b,cAAc,CAAC,GAAG,EAAE;EAChE,EAAA,CAAC,CAAC;EACJ;EAEA,SAASsB,mBAAmBA,CAC1BC,GAAU,EACVR,WAAmB,EACnBnd,SAAiC,EACzB;EACR,EAAA,KAAK,IAAIpQ,CAAC,GAAGutB,WAAW,EAAEvtB,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;EACrC,IAAA,IAAIoQ,SAAS,CAAC2d,GAAG,CAAC/tB,CAAC,CAAC,CAAC,EAAE;EACrB,MAAA,OAAOA,CAAC;EACV,IAAA;EACF,EAAA;EACA,EAAA,KAAK,IAAIA,EAAC,GAAGutB,WAAW,GAAG,CAAC,EAAEvtB,EAAC,GAAG+tB,GAAG,CAACjvB,MAAM,EAAEkB,EAAC,EAAE,EAAE;EACjD,IAAA,IAAIoQ,SAAS,CAAC2d,GAAG,CAAC/tB,EAAC,CAAC,CAAC,EAAE;EACrB,MAAA,OAAOA,EAAC;EACV,IAAA;EACF,EAAA;EACA,EAAA,OAAO,EAAE;EACX;EAEO,SAASguB,iBAAiBA,CAC/BC,aAAiC,EACjCC,GAAQ,EACC;EAAA,EAAA,IAAAC,iBAAA;EACT,EAAA,OAAO,CAAC,CAACF,aAAa,IAAIA,aAAa,MAAA,CAAAE,iBAAA,GAAKD,GAAG,CAACE,YAAY,KAAA,IAAA,GAAA,MAAA,GAAhBD,iBAAA,CAAkBlI,GAAG,CAAA;EACnE;;ECvewD,IAiBlDoI,aAAa,0BAAAC,OAAA,EAAA;IAqBjB,SAAAD,aAAAA,CAAYH,IAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,KAAK,EAAE4qB,IAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAAAiH,IAAAA,KAAA,CArBhB6qB,GAAG,GAAA,MAAA;MAAA7qB,KAAA,CACLkrB,gBAAgB,GAAW,CAAC;EAAAlrB,IAAAA,KAAA,CAC5BmrB,mBAAmB,GAAW,EAAE;EAAAnrB,IAAAA,KAAA,CAChCorB,cAAc,GAAW,EAAE;EAAAprB,IAAAA,KAAA,CAC3BqrB,cAAc,GAAW,EAAE;MAAArrB,KAAA,CAC3BsrB,gBAAgB,GAAW,EAAE;MAAAtrB,KAAA,CAC7Byd,kBAAkB,GAA8B,IAAI;MAAAzd,KAAA,CACpDgmB,UAAU,GAAwC,IAAI;EAAAhmB,IAAAA,KAAA,CACtDurB,KAAK,GAAW,EAAE;MAAAvrB,KAAA,CAClBwrB,WAAW,GAAoB,IAAI;MAAAxrB,KAAA,CACnCyrB,WAAW,GAAgB,IAAI;MAAAzrB,KAAA,CAC/B0rB,gBAAgB,GAAW,CAAC;EAAA1rB,IAAAA,KAAA,CAC5B2rB,cAAc,GAAW,EAAE;EAAA3rB,IAAAA,KAAA,CAC3B4rB,cAAc,GAGlB,EAAE;EAAA5rB,IAAAA,KAAA,CAEC6rB,WAAW,GAAA,MAAA;EAwLlB;EACF;EACA;EACA;EAHE7rB,IAAAA,KAAA,CAIQ8rB,kBAAkB,GAAG,UAACC,WAAmB,EAAK;EAAA,MAAA,IAAA3rB,IAAA;QACpD,IAAA8D,MAAA,GAAAlE,KAAA;UAAqBJ,IAAI,GAAAsE,MAAA,CAAjBsnB,WAAW;UAAqB/I,IAAI,GAAAve,MAAA,CAAjBunB,WAAW;UAAQZ,GAAG,GAAA3mB,MAAA,CAAH2mB,GAAG;EACjD,MAAA,IAAQmB,gBAAgB,GAAYnB,GAAG,CAA/BmB,gBAAgB;UAAEjH,KAAK,GAAK8F,GAAG,CAAb9F,KAAK;EAC/B,MAAA,IAAI,CAACnlB,IAAI,IAAI,CAACmlB,KAAK,EAAE;EACnB,QAAA;EACF,MAAA;EAEA,MAAA,IAAMkH,GAAG,GAAGC,WAAW,CAACD,GAAG,EAAE;QAC7B,IAAMnpB,KAAkB,GAAG2f,IAAI,GAAGA,IAAI,CAAC3f,KAAK,GAAGlD,IAAI,CAACkD,KAAK;QACzD,IAAMtC,QAAQ,GAAGiiB,IAAI,GAAGA,IAAI,CAACjiB,QAAQ,GAAGZ,IAAI,CAACY,QAAQ;QACrD,IAAM2rB,WAAW,GAAGF,GAAG,GAAGnpB,KAAK,CAACjF,OAAO,CAACC,KAAK;EAC7C,MAAA,IAAMwqB,YAAY,GAAGuC,GAAG,CAACvC,YAAY;EACrC,MAAA,IAAM8D,mBAAmB,GAAGxsB,IAAI,CAACgB,KAAK;EACtC,MAAA,IAAMyrB,gBAAgB,GAAGrsB,KAAA,CAAKqrB,cAAc;EAC5C;EACA,MAAA,IACEvoB,KAAK,CAACvF,OAAO,IACZuF,KAAK,CAACtF,MAAM,IAAIsF,KAAK,CAACtF,MAAM,KAAKsF,KAAK,CAACpF,KAAM,IAC9C0uB,mBAAmB,IAAI9D,YAAW,EAClC;UACAtoB,KAAA,CAAKssB,UAAU,EAAE;EACjB;EACAtsB,QAAAA,KAAA,CAAKqrB,cAAc,GAAG,EAAE;EACxB,QAAA;EACF,MAAA;;EAEA;QACA,IAAI,CAACW,gBAAgB,EAAE;EACrB,QAAA;EACF,MAAA;;EAEA;QACA,IAAMO,kBAAkB,GACtBF,gBAAgB,GAAG,EAAE,IAAIA,gBAAgB,KAAKD,mBAAmB;EACnE,MAAA,IAAMI,WAAW,GAAG,CAAC,CAACT,WAAW,IAAIQ,kBAAkB;EACvD,MAAA,IACE,CAACC,WAAW,KACXzH,KAAK,CAAC0H,MAAM,IAAI,CAAC1H,KAAK,CAAC2H,YAAY,IAAI,CAAC3H,KAAK,CAAC4H,UAAU,CAAA,EACzD;EACA,QAAA;EACF,MAAA;EAEA,MAAA,IAAMC,UAAU,GAAG/B,GAAG,CAACgC,qBAAqB;EAC5C,MAAA,IAAI,CAACL,WAAW,IAAII,UAAU,KAAK,IAAI,EAAE;EACvC,QAAA;EACF,MAAA;QAEA,IAAME,YAAY,GAAG9sB,KAAA,CAAK6rB,WAAW,CAACrzB,eAAe,EAAE;QACvD,IAAMk0B,YAAY,GAAGl4B,IAAI,CAACQ,GAAG,CAAC+vB,KAAK,CAAC2H,YAAY,CAAC;EACjD;EACA,MAAA,IACEP,WAAW,IACX33B,IAAI,CAACsD,GAAG,CAACg1B,YAAY,EAAE,IAAI,IAAItsB,QAAQ,IAAIksB,YAAY,GAAG,CAAC,CAAC,CAAC,CAAA,EAC7D;EACA,QAAA;EACF,MAAA;;EAEA;QACA,IAAMK,qBAAqB,GAAGH,UAAS,GACnCA,UAAU,CAACrwB,GAAG,GAAGmwB,YAAW,GAC5B,CAAC;QACL,IAAMv0B,IAAI,GAAG2K,KAAK,CAACjF,OAAO,CAACE,KAAI,GAC3B+E,KAAK,CAACjF,OAAO,CAACE,KAAK,GAAG+E,KAAK,CAACjF,OAAO,CAACC,KAAI,GACxC,EAAE;QACN,IAAMkvB,eAAe,GAAGlqB,KAAK,CAACtF,MAAM,IAAIrF,IAAI,GAAG,EAAE;EACjD,MAAA,IAAMyF,UAAkB,GAAGoC,KAAA,CAAKitB,aAAa,EAAE;EAC/C,MAAA,IAAM5E,MAAM,GAAGwC,GAAG,CAACxC,MAAM;EACzB,MAAA,IAAMznB,KAAK,GAAGynB,MAAM,CAAC+D,mBAAmB,CAAC;QACzC,IAAMc,WAAW,GAAG14B,IAAI,CAACsD,GAAG,CAC1BgL,KAAK,CAACtF,MAAM,EACZhJ,IAAI,CAAC24B,KAAK,CAAE3sB,QAAQ,IAAIZ,IAAI,CAACkf,OAAO,IAAIle,KAAK,CAAC2gB,cAAc,CAAC,GAAI,CAAC,CACpE,CAAC;QACD,IAAI6L,aAAa,GAAGJ,eAAe,GAAGb,WAAW,GAAGh0B,IAAI,GAAGg0B,WAAW;EACtE,MAAA,IAAIiB,aAAa,GAAG,CAAC,IAAIJ,eAAe,EAAE;EACxCI,QAAAA,aAAa,GAAG54B,IAAI,CAAC+D,GAAG,CAAC4zB,WAAW,EAAGrpB,KAAK,CAACtF,MAAM,GAAG,CAAC,GAAII,UAAU,CAAC;EACxE,MAAA;EACA,MAAA,IAAMyvB,QAAQ,GAAGL,eAAc,GAC1BlqB,KAAK,CAACtF,MAAM,GAAG,IAAI,GAAI4vB,aAAY,GACpC,CAAC;EACL;EACA,MAAA,IAAME,WAAW,GAAGR,YAAY,GAAG,IAAI;EACvC,MAAA,IAAMS,eAAe,GAAGF,QAAO,GAC3B,CAACH,WAAW,GAAGpqB,KAAK,CAACtF,MAAM,IAAI6vB,QAAO,GACrCH,WAAW,GAAG,CAAC,GAAItvB,UAAU,GAAG0vB,WAAW;EAChD;QACA,IAAIC,eAAe,IAAIR,qBAAqB,EAAE;EAC5C,QAAA;EACF,MAAA;QAEA,IAAMS,GAAG,GAAGH,QAAQ,GAAGA,QAAQ,GAAG,CAAC,GAAGzvB,UAAU;QAChD,IAAM6vB,IAAI,GACR,CAAA,CAAArtB,IAAA,GAAC,CAAA2rB,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAE7J,OAAO,KAAIliB,KAAA,CAAK6qB,GAAG,CAAC6C,kBAAkB,qBAApDttB,IAAA,CAAuDqtB,IAAI,MAAK,IAAI;QACtE,IAAME,oBAAoB,GAAG3tB,KAAA,CAAK6qB,GAAG,CAACrJ,MAAM,CAACmM,oBAAoB;EACjE,MAAA,IAAIC,wBAAgC,GAAGh5B,MAAM,CAACi5B,iBAAiB;EAC/D,MAAA,IAAIC,aAAqB;EACzB;EACA,MAAA,KACEA,aAAa,GAAG1B,mBAAmB,GAAG,CAAC,EACvC0B,aAAa,GAAGxF,YAAY,EAC5BwF,aAAa,EAAC,EACd;EACA;EACA;EACA,QAAA,IAAMC,gBAAgB,GAAG1F,MAAM,CAACyF,aAAa,CAAC,CAACE,UAAU;UACzD,IAAMC,iBAAiB,GAAG,CAAC5F,MAAM,CAACyF,aAAa,CAAC,CAAC5L,OAAO,IAAIuL,IAAI;EAChEG,QAAAA,wBAAwB,GAAG5tB,KAAA,CAAKkuB,iBAAiB,CAC/CZ,WAAW,EACXE,GAAG,EACHhtB,QAAQ,GAAGutB,gBAAgB,EAC3BE,iBACF,CAAC;EACD,QAAA,IACEL,wBAAwB,GACxBp5B,IAAI,CAAC+D,GAAG,CAACw0B,qBAAqB,EAAEvsB,QAAQ,GAAG8sB,WAAW,CAAA,EACtD;EACA,UAAA;EACF,QAAA;EACF,MAAA;EACA;EACA;QACA,IAAIM,wBAAwB,IAAIL,eAAe,EAAE;EAC/C,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAIK,wBAAwB,GAAGptB,QAAQ,GAAG,EAAE,EAAE;EAC5C,QAAA;EACF,MAAA;EACA,MAAA,IAAIwsB,eAAe,EAAE;EACnB;EACAhtB,QAAAA,KAAA,CAAK6rB,WAAW,CAACp1B,MAAM,CACrB01B,WAAW,GAAG33B,IAAI,CAAC+D,GAAG,CAACu0B,YAAY,EAAE30B,IAAI,CAAC,EAC1C2K,KAAK,CAACtF,MACR,CAAC;EACH,MAAA,CAAC,MAAM;EACL;EACAwC,QAAAA,KAAA,CAAK6rB,WAAW,CAAC3zB,UAAU,CAACi0B,WAAW,CAAC;EAC1C,MAAA;EACA,MAAA,IAAMgC,oBAAoB,GAAG9F,MAAM,CAACyF,aAAa,CAAC,CAACE,UAAU;QAC7D,IAAIhuB,KAAA,CAAKitB,aAAa,EAAE,GAAGU,oBAAoB,GAAGQ,oBAAoB,EAAE;EACtEnuB,QAAAA,KAAA,CAAKouB,cAAc,CAACD,oBAAoB,CAAC;EAC3C,MAAA;EACA,MAAA,IAAME,eAAe,GAAGruB,KAAA,CAAKsuB,aAAa,CACxCH,oBAAoB,EACpB7F,YAAY,EACZwF,aAAa,EACb,CAAC,EACDf,qBAAqB,EACrB,CAAC,EACD,CACF,CAAC;EACD,MAAA,IAAIsB,eAAe,GAAG,EAAE,EAAE;EACxBP,QAAAA,aAAa,GAAGO,eAAe;EACjC,MAAA;EAEAruB,MAAAA,KAAA,CAAK9G,IAAI,CAAA,WAAA,GAAa0G,IAAI,CAACC,EAAE,IAC3B4iB,IAAI,GAAG,QAAQ,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAC,CAAA,GAAA,YAAA,GACrBmoB,mBAAmB,GAAA,oDAAA,GACTxsB,IAAI,CAACY,QAAQ,CAAC+tB,OAAO,CAAC,CAAC,CAAC,GAAA,+BAAA,GACtBxB,qBAAqB,CAACwB,OAAO,CAAC,CAAC,CAAC,GAAA,sDAAA,GACXhB,eAAe,CAACgB,OAAO,CAAC,CAAC,CAAC,gEACtBX,wBAAwB,CAACW,OAAO,CAC9E,CACF,CAAC,GAAA,2BAAA,IACgBp2B,IAAI,GAAG,CAAC,CAAA,GAAA,kCAAA,IAEvB4K,cAAA,CAAgBnF,UAAU,CAAC,GAAGA,UAAU,GAAG,CAAC,GAAG,SAAQ,CAAA,GAAA,+BAAA,IAEtCoC,KAAA,CAAKitB,aAAa,EAAE,GAAG,CAAC,wCACtBa,aAAa,GAAA,KAAA,IAAMK,oBAAoB,GAAG,CAAC,UAAM,CAAC;EAEzEtD,MAAAA,GAAG,CAACiD,aAAa,GAAGjD,GAAG,CAAC2D,aAAa,GAAGV,aAAa;QAErD9tB,KAAA,CAAKssB,UAAU,EAAE;EACjB,MAAA,IAAMmC,cAAc,GAAG,SAAjBA,cAAcA,GAAS;EAC3B;UACAzuB,KAAA,CAAKssB,UAAU,EAAE;EACjB,QAAA,IACEtsB,KAAA,CAAKwrB,WAAW,KAAK5rB,IAAI,IACzBI,KAAA,CAAK6qB,GAAG,CAAC6D,SAAS,KAAKZ,aAAa,IACpCA,aAAa,GAAG,CAAA,EAChB;EACA,UAAA,IAAMf,sBAAqB,GAAG/sB,KAAA,CAAK2uB,kBAAkB,EAAE;YACvD3uB,KAAA,CACG9G,IAAI,CAAA,4BAAA,IAA8B40B,aAAa,GAAG,CAAC,GAAG,oBAAoB,GAAG,EAAE,CAAA,GAAA,6BAAA,GAC/DluB,IAAI,CAACY,QAAQ,CAAC+tB,OAAO,CAAC,CAAC,CAAC,GAAA,iCAAA,GACtBxB,sBAAqB,CAACwB,OAAO,CAAC,CAAC,CAAC,GAAA,IAAI,CAAC;YAC1D3uB,IAAI,CAAC2C,aAAa,EAAE;EACpBvC,UAAAA,KAAA,CAAKwrB,WAAW,GAAGxrB,KAAA,CAAKyrB,WAAW,GAAG,IAAI;YAC1C,IAAIqC,aAAa,GAAGxF,YAAY,EAAE;EAChC,YAAA,IAAIsG,iBAAiB,GAAG5uB,KAAA,CAAKsuB,aAAa,CACxCtuB,KAAA,CAAK6qB,GAAG,CAACxC,MAAM,CAACC,YAAY,CAAC,CAACxJ,OAAO,EACrCwJ,YAAY,EACZwF,aAAa,EACb,CAAC,EACDf,sBAAqB,EACrB,CAAC,EACD,CACF,CAAC;EACD,YAAA,IAAI6B,iBAAiB,KAAK,EAAE,EAAE;EAC5BA,cAAAA,iBAAiB,GAAGtG,YAAY;EAClC,YAAA;cACAtoB,KAAA,CAAK6qB,GAAG,CAACiD,aAAa,GAAG9tB,KAAA,CAAK6qB,GAAG,CAAC2D,aAAa,GAAGI,iBAAiB;EACnE5uB,YAAAA,KAAA,CAAKouB,cAAc,CAACpuB,KAAA,CAAK6qB,GAAG,CAACxC,MAAM,CAACuG,iBAAiB,CAAC,CAAC9P,OAAO,CAAC;EACjE,UAAA;EACF,QAAA;QACF,CAAC;EACD,MAAA,IAAIyN,kBAAkB,IAAIgB,eAAe,GAAGK,wBAAwB,GAAG,CAAC,EAAE;EACxEa,QAAAA,cAAc,EAAE;EAClB,MAAA,CAAC,MAAM;EACLzuB,QAAAA,KAAA,CAAKurB,KAAK,GAAGzxB,IAAI,CAAC+0B,WAAW,CAC3BJ,cAAc,EACdb,wBAAwB,GAAG,IAC7B,CAAC;EACH,MAAA;EAEA/C,MAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC25B,2BAA2B,EAAE;EAAEnvB,QAAAA,IAAI,EAAJA,IAAI;EAAE6iB,QAAAA,IAAI,EAAJA,IAAI;EAAE3f,QAAAA,KAAK,EAALA;EAAM,OAAC,CAAC;MACxE,CAAC;MAjZC9C,KAAA,CAAK6qB,GAAG,GAAGA,IAAG;EACd7qB,IAAAA,KAAA,CAAK6rB,WAAW,GAAG7rB,KAAA,CAAKgvB,aAAa,EAAE;MACvChvB,KAAA,CAAKivB,iBAAiB,EAAE;EAAA,IAAA,OAAAjvB,KAAA;EAC1B,EAAA;IAAA6B,cAAA,CAAAmpB,aAAA,EAAAC,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAy0B,aAAA,CAAAx0B,SAAA;EAAAD,EAAAA,MAAA,CAEO63B,cAAc,GAArB,SAAOA,cAAcA,CAACc,sBAA+B,EAAE;EACrD,IAAA,IAAIA,sBAAsB,EAAE;EAC1B,MAAA,IAAI,CAAC54B,GAAG,CAAA,yBAAA,GAA2B44B,sBAAwB,CAAC;EAC5D,MAAA,IAAI,CAACrE,GAAG,CAACrJ,MAAM,CAAC0N,sBAAsB,GAAGA,sBAAsB;EACjE,IAAA;EACA,IAAA,IAAI,CAAC9D,cAAc,GAAG,EAAE;EACxB,IAAA,IAAI,CAACS,WAAW,GAAG,IAAI,CAACmD,aAAa,EAAE;IACzC,CAAA;EAAAz4B,EAAAA,MAAA,CAEQy4B,aAAa,GAArB,SAAQA,aAAaA,GAA2B;EAC9C,IAAA,IAAMxN,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;EAC9B,IAAA,OAAO,IAAIzqB,sBAAsB,CAC/ByqB,MAAM,CAAC2N,cAAc,EACrB3N,MAAM,CAAC4N,cAAc,EACrB5N,MAAM,CAAC0N,sBACT,CAAC;IACH,CAAA;EAAA34B,EAAAA,MAAA,CAEU04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACo6B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrD5E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs6B,WAAW,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;EACnD9E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDhF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DlF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrDpF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC86B,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzDtF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACg7B,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvExF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAA;EAAAh6B,EAAAA,MAAA,CAEUi6B,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;MACX,IAAI,CAACA,GAAG,EAAE;EACR,MAAA;EACF,IAAA;EACAA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACo6B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtD5E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs6B,WAAW,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;EACpD9E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDhF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DlF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtDpF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC86B,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1DtF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACg7B,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACxExF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3C,CAAA;EAAAh6B,EAAAA,MAAA,CAEOkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC+3B,mBAAmB,EAAE;MAC1B,IAAI,CAAClE,UAAU,EAAE;EACjB;MACA,IAAI,CAACzB,GAAG,GAAG,IAAI,CAACiB,kBAAkB,GAAG,IAAI,CAACF,cAAc,GAAG,IAAI;EAC/D,IAAA,IAAI,CAACJ,WAAW,GAAG,IAAI,CAACC,WAAW,GAAG,IAAI;IAC5C,CAAA;IAAAl1B,MAAA,CAEUg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,CACzBmB,KAA8B,EAC9BpvB,IAAyB,EACzB;EACA,IAAA,IAAI,CAAC6pB,mBAAmB,GAAG,EAAE;EAC7B,IAAA,IAAI,CAACC,cAAc,GAAG,EAAE;MACxB,IAAI,CAACF,gBAAgB,GAAG,CAAC;EACzB,IAAA,IAAI,CAACU,cAAc,GAAG,EAAE;EACxB,IAAA,IAAI,CAACJ,WAAW,GAAG,IAAI,CAACC,WAAW,GAAG,IAAI;MAC1C,IAAI,CAAC0E,eAAe,EAAE;MACtB,IAAI,CAAC7D,UAAU,EAAE;IACnB,CAAA;EAAA/1B,EAAAA,MAAA,CAEQ45B,eAAe,GAAvB,SAAQA,eAAeA,GAAG;MACxB,IAAI,IAAI,CAAChF,mBAAmB,GAAG,EAAE,IAAI,IAAI,CAACK,WAAW,EAAE;EACrD,MAAA,IAAI,CAACL,mBAAmB,GAAG,IAAI,CAACK,WAAW,CAAC5qB,KAAK;EACnD,IAAA;EACA,IAAA,IAAI,CAACyqB,cAAc,GAAG,EAAE;MACxB,IAAI,CAACgF,qBAAqB,EAAE;MAC5B,IAAI,CAACrK,UAAU,GAAG,IAAI;MACtB,IAAI,CAACvI,kBAAkB,GAAG,IAAI;IAChC,CAAA;EAAAlnB,EAAAA,MAAA,CAEQ85B,qBAAqB,GAA7B,SAAQA,qBAAqBA,GAAG;EAC9B,IAAA,IAAI,CAACjF,cAAc,GAAG,EAAE;MACxB,IAAI,CAACE,gBAAgB,GAAG,EAAE;IAC5B,CAAA;IAAA/0B,MAAA,CAEUk5B,aAAa,GAAvB,SAAUA,aAAaA,CAACiB,KAA0B,EAAEpvB,IAAqB,EAAE;EACzE,IAAA,IAAM1B,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB,IAAA,IAAI,IAAI,CAAC+wB,cAAc,CAAC/wB,IAAI,CAAC,EAAE;EAC7B,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACA,IAAI,CAAC2B,WAAW,EAAE;EAAA,MAAA,IAAAqvB,UAAA;QACrB,IAAI,CAACpF,WAAW,GAAG5rB,IAAI;QACvB,IAAI,CAAC6rB,WAAW,GAAA,CAAAmF,UAAA,GAAGtvB,IAAI,CAACmhB,IAAI,KAAA,IAAA,GAAAmO,UAAA,GAAI,IAAI;EACtC,IAAA;MACA,IAAI,CAACtE,UAAU,EAAE;EACjB,IAAA,IAAI,CAACf,KAAK,GAAGzxB,IAAI,CAAC+0B,WAAW,CAAC,IAAI,CAAC/C,kBAAkB,EAAE,GAAG,CAAC;IAC7D,CAAA;IAAAv1B,MAAA,CAEUw5B,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBW,KAA6B,EAC7BpvB,IAAwB,EAClB;MACN,IAAI,CAACgrB,UAAU,EAAE;IACnB,CAAA;IAAA/1B,MAAA,CAEUg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;MACtD,IAAIA,IAAI,CAACuvB,KAAK,EAAE;EACd,MAAA;EACF,IAAA;MACA,QAAQvvB,IAAI,CAAC4gB,OAAO;QAClB,KAAK/sB,YAAY,CAAC27B,sBAAsB;QACxC,KAAK37B,YAAY,CAAC47B,mBAAmB;EACnC;EACA,QAAA,IAAI,CAAC5F,mBAAmB,GAAG,EAAE;EAC7B,QAAA,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,QAAA;QACF,KAAKj2B,YAAY,CAAC67B,iBAAiB;EAAE,QAAA;EACnC,UAAA,IAAMpxB,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB,UAAA,IAAQ4rB,WAAW,GAAwB,IAAI,CAAvCA,WAAW;cAAe/I,IAAI,GAAK,IAAI,CAA1BgJ,WAAW;EAChC,UAAA,IACE7rB,IAAI,IACJ4rB,WAAW,IACX5rB,IAAI,CAACC,EAAE,KAAK2rB,WAAW,CAAC3rB,EAAE,IAC1BD,IAAI,CAACgB,KAAK,KAAK4qB,WAAW,CAAC5qB,KAAI,EAC/B;EACA,YAAA,IAAMqrB,GAAG,GAAGC,WAAW,CAACD,GAAG,EAAE;cAC7B,IAAMnpB,KAAkB,GAAG2f,IAAI,GAAGA,IAAI,CAAC3f,KAAK,GAAGlD,IAAI,CAACkD,KAAK;cACzD,IAAMqpB,WAAW,GAAGF,GAAG,GAAGnpB,KAAK,CAACjF,OAAO,CAACC,KAAK;cAC7C,IAAM3F,IAAI,GAAG2K,KAAK,CAACjF,OAAO,CAACE,KAAI,GAC3B+E,KAAK,CAACjF,OAAO,CAACE,KAAK,GAAG+E,KAAK,CAACjF,OAAO,CAACC,KAAI,GACxC,EAAE;cACN,IAAMkvB,eAAe,GAAGlqB,KAAK,CAACtF,MAAM,IAAIrF,IAAI,GAAG,EAAE;EACjD,YAAA,IAAI60B,eAAe,EAAE;gBACnB,IAAMF,YAAY,GAAG,IAAI,CAACjB,WAAW,CAACrzB,eAAe,EAAE;EACvD,cAAA,IAAI,CAACqzB,WAAW,CAACp1B,MAAM,CACrB01B,WAAW,GAAG33B,IAAI,CAAC+D,GAAG,CAACu0B,YAAY,EAAE30B,IAAI,CAAC,EAC1C2K,KAAK,CAACtF,MACR,CAAC;EACH,YAAA,CAAC,MAAM;EACL,cAAA,IAAI,CAACquB,WAAW,CAAC3zB,UAAU,CAACi0B,WAAW,CAAC;EAC1C,YAAA;EACF,UAAA;EACA,UAAA;EACF,QAAA;EACF;IACF,CAAA;EAAA51B,EAAAA,MAAA,CAEQ23B,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvB+C,kBAA0B,EAC1BC,SAAiB,EACjBC,YAAoB,EACpBC,QAAiB,EACT;EACR,IAAA,IAAMC,WAAW,GAAGJ,kBAAkB,GAAGE,YAAY,GAAGD,SAAS;MACjE,IAAMI,eAAe,GAAGF,QAAO,GAC3BH,kBAAkB,GAAG,IAAI,CAAC/F,gBAAe,GACzC,CAAC;MACL,OAAOmG,WAAW,GAAGC,eAAe;IACtC,CAAA;IAAA/6B,MAAA,CAEU05B,aAAa,GAAvB,SAAUA,aAAaA,CAACS,KAA0B,EAAEpvB,IAAqB,EAAE;EACzE,IAAA,IAAMkgB,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;EAC9B,IAAA,IAAQ3jB,OAAO,GAAKyD,IAAI,CAACwB,KAAK,CAAtBjF,OAAO;MACf,IAAM0zB,aAAa,GAAG1zB,OAAO,CAACG,GAAG,GAAGH,OAAO,CAACE,KAAK;EACjD,IAAA,IAAIiF,cAAA,CAAgBuuB,aAAa,CAAC,EAAE;EAClC,MAAA,IAAI,CAACrG,gBAAgB,GAAGqG,aAAa,GAAG,IAAI;EAC9C,IAAA;EACA,IAAA,IAAIjwB,IAAI,CAAC4gB,OAAO,CAACuL,IAAI,EAAE;EACrB,MAAA,IAAI,CAAC5B,WAAW,CAACl0B,MAAM,CAAC6pB,MAAM,CAACgQ,eAAe,EAAEhQ,MAAM,CAACiQ,eAAe,CAAC;EACzE,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC5F,WAAW,CAACl0B,MAAM,CAAC6pB,MAAM,CAAC2N,cAAc,EAAE3N,MAAM,CAAC4N,cAAc,CAAC;EACvE,IAAA;EACA,IAAA,IAAI,IAAI,CAAC7D,KAAK,GAAG,EAAE,EAAE;EACnB,MAAA,IAAI,CAACO,kBAAkB,CAACxqB,IAAI,CAACowB,SAAS,CAAC;EACzC,IAAA;IACF,CAAA;IAAAn7B,MAAA,CAiOUo5B,YAAY,GAAtB,SAAUA,YAAYA,CACpBe,KAAyB,EAAAiB,KAAA,EAEzB;EAAA,IAAA,IADE/xB,IAAI,GAAA+xB,KAAA,CAAJ/xB,IAAI;QAAE6iB,IAAI,GAAAkP,KAAA,CAAJlP,IAAI;MAEZ,IAAM3f,KAAK,GAAG2f,IAAI,GAAGA,IAAI,CAAC3f,KAAK,GAAGlD,IAAI,CAACkD,KAAK;EAC5C,IAAA,IAAIlD,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,EAAE;EACxC,MAAA,IAAI,CAACk2B,WAAW,CAAC3zB,UAAU,CAAC4K,KAAK,CAACjF,OAAO,CAACE,KAAK,GAAG+E,KAAK,CAACjF,OAAO,CAACC,KAAK,CAAC;EACxE,IAAA;EACA,IAAA,IAAI,IAAI,CAAC6yB,cAAc,CAAC/wB,IAAI,CAAC,EAAE;EAC7B,MAAA;EACF,IAAA;EACA;MACA,IAAI,CAAC0sB,UAAU,EAAE;EACjB;EACA,IAAA,IAAI1sB,IAAI,CAACgB,KAAK,KAAK,IAAI,CAACyqB,cAAc,EAAE;EACtC,MAAA,IAAI,CAACA,cAAc,GAAG,EAAE;EAC1B,IAAA;EACA,IAAA,IAAI,CAACD,cAAc,GAAG,EAAE;;EAExB;EACA,IAAA,IAAI,IAAI,CAACP,GAAG,CAACrJ,MAAM,CAACoQ,qBAAqB,EAAE;QACzC,IAAMpxB,QAAQ,GAAGiiB,IAAI,GAAGA,IAAI,CAACjiB,QAAQ,GAAGZ,IAAI,CAACY,QAAQ;QACrD,IAAMI,KAAK,GAAG,IAAI,CAACiqB,GAAG,CAACxC,MAAM,CAACzoB,IAAI,CAACgB,KAAK,CAAC;EACzC,MAAA,IAAMixB,WAAW,GACf,CAACjxB,KAAK,CAACpD,MAAM,GAAGoD,KAAK,CAACpD,MAAM,CAACyO,KAAK,GAAG,CAAC,IAAInJ,KAAK,CAACtF,MAAM;EACxD,MAAA,IAAMs0B,cAAc,GAClB,CAAClxB,KAAK,CAACpD,MAAM,GAAGoD,KAAK,CAACpD,MAAM,CAACgD,QAAQ,GAAG,CAAC,IAAIA,QAAQ;QACvDI,KAAK,CAACpD,MAAM,GAAG;EAAEyO,QAAAA,KAAK,EAAE4lB,WAAW;EAAErxB,QAAAA,QAAQ,EAAEsxB;SAAgB;EAC/DlxB,MAAAA,KAAK,CAACuiB,WAAW,GAAG3uB,IAAI,CAAC24B,KAAK,CAAE,CAAC,GAAG0E,WAAW,GAAIC,cAAc,CAAC;EACpE,IAAA;MACA,IAAIlyB,IAAI,CAAC2B,WAAW,EAAE;EACpB,MAAA,IAAMwwB,gBAAkC,GAAG;EACzCjvB,QAAAA,KAAK,EAALA,KAAK;EACLlD,QAAAA,IAAI,EAAJA,IAAI;EACJ6iB,QAAAA,IAAI,EAAJA,IAAI;UACJ7oB,EAAE,EAAEgG,IAAI,CAACjG;SACV;QACD,IAAI,CAACk2B,cAAc,CAACz6B,MAAM,CAACw6B,aAAa,EAAEmC,gBAAgB,CAAC;QAC3DnyB,IAAI,CAAC2B,WAAW,GAAG,KAAK;EAC1B,IAAA,CAAC,MAAM;EACL;EACA,MAAA,IAAI,CAAC4pB,mBAAmB,GAAGvrB,IAAI,CAACgB,KAAK;EACvC,IAAA;IACF,CAAA;IAAArK,MAAA,CAEUs5B,cAAc,GAAxB,SAAUA,cAAcA,CACtBa,KAA2B,EAC3BpvB,IAAsB,EACtB;EACA,IAAA,IAAQ1B,IAAI,GAAW0B,IAAI,CAAnB1B,IAAI;QAAE6iB,IAAI,GAAKnhB,IAAI,CAAbmhB,IAAI;EAClB,IAAA,IAAM3f,KAAK,GAAG2f,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAE3f,KAAK,CAACtF,MAAM,GAAGilB,IAAI,CAAC3f,KAAK,GAAGlD,IAAI,CAACkD,KAAK;MAE1D,IAAIA,KAAK,CAACvF,OAAO,EAAE;EACjB,MAAA;EACF,IAAA;EACA,IAAA,IAAI,IAAI,CAACozB,cAAc,CAAC/wB,IAAI,CAAC,EAAE;EAC7B,MAAA;EACF,IAAA;EACA;EACA;EACA;EACA,IAAA,IAAMoyB,YAAY,GAChBlvB,KAAK,CAAC7E,OAAO,CAACD,GAAG,GACjB8E,KAAK,CAACjF,OAAO,CAACC,KAAK,GACnBtJ,IAAI,CAAC+D,GAAG,CACNuK,KAAK,CAACjF,OAAO,CAACE,KAAK,GAAG+E,KAAK,CAACjF,OAAO,CAACC,KAAK,EACzC,IAAI,CAAC+tB,WAAW,CAACrzB,eAAe,EAClC,CAAC;MACH,IAAI,CAACqzB,WAAW,CAACp1B,MAAM,CAACu7B,YAAY,EAAElvB,KAAK,CAACtF,MAAM,CAAC;EACnDsF,IAAAA,KAAK,CAAClF,UAAU,GAAG,IAAI,CAACqvB,aAAa,EAAE;MACvC,IAAIrtB,IAAI,CAAC2B,WAAW,EAAE;EACpB,MAAA,IAAI,CAACmqB,gBAAgB,GAAGsG,YAAY,GAAG,IAAI;EAC7C,IAAA,CAAC,MAAM;QACL,IAAI,CAACtG,gBAAgB,GAAG,CAAC;EAC3B,IAAA;IACF,CAAA;EAAAn1B,EAAAA,MAAA,CAEQo6B,cAAc,GAAtB,SAAQA,cAAcA,CAAC/wB,IAAc,EAAW;EAC9C;EACA,IAAA,OAAOA,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,IAAIiK,IAAI,CAACC,EAAE,KAAK,aAAa;IAC1E,CAAA;EAAAtJ,EAAAA,MAAA,CAEO+1B,UAAU,GAAjB,SAAOA,UAAUA,GAAG;EAClB,IAAA,IAAI,IAAI,CAACf,KAAK,GAAG,EAAE,EAAE;EACnBzxB,MAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAAC1G,KAAK,CAAC;EAC9B,MAAA,IAAI,CAACA,KAAK,GAAG,EAAE;EACjB,IAAA;IACF,CAAA;EAAAh1B,EAAAA,MAAA,CAyEQ27B,eAAe,GAAvB,SAAQA,eAAeA,GAAW;EAChC,IAAA,OAAU,IAAI,CAACjF,aAAa,EAAE,GAAA,GAAA,GAAI,IAAI,CAAC0B,kBAAkB,EAAE,CAACJ,OAAO,CAAC,CAAC,CAAC;IACxE,CAAA;EAAAh4B,EAAAA,MAAA,CAEQ47B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAW;EACpC,IAAA,IAAQ3G,WAAW,GAAuB,IAAI,CAAtCA,WAAW;QAAEC,WAAW,GAAU,IAAI,CAAzBA,WAAW;QAAEZ,GAAG,GAAK,IAAI,CAAZA,GAAG;EACrC,IAAA,IAAIA,GAAG,CAACxC,MAAM,CAAC5sB,MAAM,IAAI,CAAC,EAAE;QAC1B,OAAOovB,GAAG,CAAC6D,SAAS;EACtB,IAAA;EACA,IAAA,IAAQnG,YAAY,GAA2BsC,GAAG,CAA1CtC,YAAY;QAAE/G,MAAM,GAAmBqJ,GAAG,CAA5BrJ,MAAM;QAAE8G,YAAY,GAAKuC,GAAG,CAApBvC,YAAY;EAC1C,IAAA,IAAM8J,mBAAmB,GAAG3G,WAAU,GAClCA,WAAW,CAACjrB,QAAO,GACnBgrB,WAAU,GACRA,WAAW,CAAChrB,QAAO,GACnB,CAAC;EACP,IAAA,IAAM6xB,KAAK,GAAG,IAAI,CAACpF,aAAa,EAAE;EAClC;EACA,IAAA,IAAMF,qBAAqB,GAAG,IAAI,CAAC4B,kBAAkB,EAAE;EAEvD,IAAA,IAAI2D,QAAQ,GAAG9Q,MAAM,CAAC+Q,kBAAkB;EACxC,IAAA,IAAIC,UAAU,GAAGhR,MAAM,CAACmM,oBAAoB;;EAE5C;EACA,IAAA,IAAIZ,qBAAqB,EAAE;EACzB,MAAA,IAAM0F,UAAS,GAAG,IAAI,CAACnE,aAAa,CAClC+D,KAAK,EACL/J,YAAY,EACZC,YAAY,EACZwE,qBAAqB,EACrB,CAAC,EACDuF,QAAQ,EACRE,UACF,CAAC;QACD,IAAIC,UAAS,IAAI,CAAC,EAAE;EAClB,QAAA,IAAI,CAAC9G,cAAc,GAAG,EAAE;EACxB,QAAA,OAAO8G,UAAS;EAClB,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAIC,kBAAkB,GAAGN,mBAAkB,GACvC59B,IAAI,CAAC+D,GAAG,CAAC65B,mBAAmB,EAAE5Q,MAAM,CAACkR,kBAAkB,CAAA,GACvDlR,MAAM,CAACkR,kBAAkB;MAE7B,IAAI,CAAC3F,qBAAqB,EAAE;EAC1B;EACA,MAAA,IAAMrB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;EAC9C,MAAA,IAAIA,gBAAgB,EAAE;EACpB;EACA;EACA;EACA;EACA;EACA,QAAA,IAAMiH,eAAe,GAAGP,mBAAkB,GACtC59B,IAAI,CAAC+D,GAAG,CAAC65B,mBAAmB,EAAE5Q,MAAM,CAACmR,eAAe,CAAA,GACpDnR,MAAM,CAACmR,eAAe;UAC1BD,kBAAkB,GAAGC,eAAe,GAAGjH,gBAAgB;UACvD,IAAI,CAACvyB,IAAI,CAAA,oBAAA,GACc3E,IAAI,CAAC24B,KAAK,CAC7B,IAAI,GAAGzB,gBACT,CAAC,GAAA,8CAAA,GAA+Cl3B,IAAI,CAAC24B,KAAK,CACxD,IAAI,GAAGuF,kBACT,CAAC,GAAA,KACH,CAAC;EACD;UACAJ,QAAQ,GAAGE,UAAU,GAAG,CAAC;EAC3B,MAAA;EACF,IAAA;EACA,IAAA,IAAMC,SAAS,GAAG,IAAI,CAACnE,aAAa,CAClC+D,KAAK,EACL/J,YAAY,EACZC,YAAY,EACZwE,qBAAqB,EACrB2F,kBAAkB,EAClBJ,QAAQ,EACRE,UACF,CAAC;EACD,IAAA,IAAI,IAAI,CAAC7G,cAAc,KAAK8G,SAAS,EAAE;QACrC,IAAI,CAAC9G,cAAc,GAAG8G,SAAS;QAC/B,IAAI,CAACt5B,IAAI,CAAA,CAEL4zB,qBAAqB,GAAG,sBAAsB,GAAG,iBAAgB,IAAA,0BAAA,GACxC0F,SAC7B,CAAC;EACH,IAAA;EACA,IAAA,IAAIA,SAAS,GAAG,EAAE,EAAE;EAClB,MAAA,OAAOA,SAAS;EAClB,IAAA;EACA;EACA,IAAA,IAAMG,QAAQ,GAAG/H,GAAG,CAACxC,MAAM,CAACC,YAAY,CAAC;EACzC,IAAA,IAAMuK,SAAS,GAAGhI,GAAG,CAACE,YAAY;EAClC,IAAA,IAAI8H,SAAS,IAAI,CAAAD,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAE9T,OAAO,IAAG+T,SAAS,CAAC/T,OAAO,EAAE;EACtD,MAAA,OAAOwJ,YAAY;EACrB,IAAA;EACA;MACA,OAAOuC,GAAG,CAAC6D,SAAS;IACtB,CAAA;EAAAn4B,EAAAA,MAAA,CAEQo4B,kBAAkB,GAA1B,SAAQA,kBAAkBA,GAAW;EACnC,IAAA,IAAM9D,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAM9F,KAAK,GAAG8F,GAAG,CAAC9F,KAAK;MACvB,IAAI,CAACA,KAAK,EAAE;EACV,MAAA,OAAO3V,QAAQ;EACjB,IAAA;EACA;EACA;EACA,IAAA,IAAMsd,YAAY,GAChB3H,KAAK,IAAIA,KAAK,CAAC2H,YAAY,KAAK,CAAC,GAAGl4B,IAAI,CAACQ,GAAG,CAAC+vB,KAAK,CAAC2H,YAAY,CAAC,GAAG,GAAG;EACxE,IAAA,IAAME,UAAU,GAAG/B,GAAG,CAACgC,qBAAqB;MAC5C,OAAO,CAACD,UAAU,GAAGA,UAAU,CAACrwB,GAAG,GAAG,CAAC,IAAImwB,YAAY;IACzD,CAAA;EAAAn2B,EAAAA,MAAA,CAEQ02B,aAAa,GAArB,SAAQA,aAAaA,GAAW;MAC9B,OAAO,IAAI,CAACpB,WAAW,CAACvzB,WAAW,EAAC,GAChC,IAAI,CAACuzB,WAAW,CAACh1B,WAAW,EAAC,GAC7B,IAAI,CAACg0B,GAAG,CAACrJ,MAAM,CAAC0N,sBAAsB;IAC5C,CAAA;EAAA34B,EAAAA,MAAA,CAEQ+3B,aAAa,GAArB,SAAQA,aAAaA,CACnB1Q,SAAiB,EACjB0K,YAAoB,EACpBC,YAAoB,EACpBwE,qBAA6B,EAC7B2F,kBAA0B,EAC1BJ,QAAgB,EAChBE,UAAkB,EACV;EAAA,IAAA,IAAAM,qBAAA;QAAAC,MAAA,GAAA,IAAA;EACR,IAAA,IAAMC,gBAAwB,GAAGjG,qBAAqB,GAAG2F,kBAAkB;EAC3E,IAAA,IAAMvH,mBAAmB,GAAG,IAAI,CAACA,mBAAmB;EACpD,IAAA,IAAM8H,kBAAkB,GACtB9H,mBAAmB,KAAK,EAAE,GAAG,IAAI,CAACN,GAAG,CAACqI,UAAU,GAAG/H,mBAAmB;EACxE,IAAA,IAAQK,WAAW,GAAkB,IAAI,CAAjCA,WAAW;QAAEC,WAAW,GAAK,IAAI,CAApBA,WAAW;EAChC,IAAA,IAAA0H,SAAA,GAAsD,IAAI,CAACtI,GAAG;QAAtDxC,MAAM,GAAA8K,SAAA,CAAN9K,MAAM;QAAER,cAAc,GAAAsL,SAAA,CAAdtL,cAAc;QAAE6G,SAAS,GAAAyE,SAAA,CAATzE,SAAS;QAAElN,MAAM,GAAA2R,SAAA,CAAN3R,MAAM;EACjD,IAAA,IAAI6G,MAAM,CAAC5sB,MAAM,KAAK,CAAC,EAAE;EACvB,MAAA,OAAO,CAAC;EACV,IAAA;EACA,IAAA,IAAMmF,KAAK,GAAGynB,MAAM,CAAC4K,kBAAkB,CAAsB;EAC7D,IAAA,IAAMxF,IAAI,GAAG,CAAC,EAAA,CAAAqF,qBAAA,GAAC,IAAI,CAACjI,GAAG,CAAC6C,kBAAkB,KAAA,IAAA,IAA3BoF,qBAAA,CAA6BrF,IAAI,CAAA;MAChD,IAAMrC,cAAc,GAAGsD,SAAS,KAAK,EAAE,IAAIvD,mBAAmB,KAAK,EAAE;EACrE,IAAA,IAAIiI,eAAmC;MACvC,IAAI1V,iBAAyC,GAAG,KAAK;MACrD,IAAIC,gBAAgB,GAAG,CAAA/c,KAAK,oBAALA,KAAK,CAAEge,SAAS,KAAI,CAAC;EAE5C,IAAA,IAAQf,eAAe,GAAsB2D,MAAM,CAA3C3D,eAAe;QAAEqH,eAAe,GAAK1D,MAAM,CAA1B0D,eAAe;EACxC,IAAA,IAAMzH,kBAAkB,GACtB,IAAI,CAACA,kBAAkB,KACtB,IAAI,CAACA,kBAAkB,GAAGmK,qBAAqB,CAACC,cAAc,CAAC,CAAC;MACnE,IAAIwL,aAAa,GAAG,EAAE;EACtB,IAAA,IAAIjI,cAAc,EAAE;EAClB,MAAA,IAAI,IAAI,CAACA,cAAc,KAAK,EAAE,EAAE;UAC9B,OAAO,IAAI,CAACA,cAAc;EAC5B,MAAA;QACA,IAAMpF,UAAU,GACd,IAAI,CAACA,UAAU,KACd,IAAI,CAACA,UAAU,GAAGoC,aAAa,CAC9BC,MAAM,EACN5K,kBAAkB,EAClB6K,YAAY,EACZC,YACF,CAAC,CAAC;EACJ,MAAA,IAAM+K,SAAS,GAAGvN,iBAAiB,CACjCC,UAAU,EACVtI,iBAAiB,EACjBE,SAAS,EACTC,eAAe,EACfqH,eACF,CAAC;EACD,MAAA,IACEtK,QAAQ,GAMN0Y,SAAS,CANX1Y,QAAQ;UACR+L,WAAW,GAKT2M,SAAS,CALX3M,WAAW;UACXJ,YAAY,GAIV+M,SAAS,CAJX/M,YAAY;UACZC,UAAU,GAGR8M,SAAS,CAHX9M,UAAU;UACVC,QAAQ,GAEN6M,SAAS,CAFX7M,QAAQ;UACRtB,SAAS,GACPmO,SAAS,CADXnO,SAAS;EAEXkO,MAAAA,aAAa,GAAG5M,QAAQ;EACxB2M,MAAAA,eAAe,GAAGxY,QAAQ;EAC1B8C,MAAAA,iBAAiB,GAAGyH,SAAQ,GACxBwB,WAAW,CAACA,WAAW,CAAClrB,MAAM,GAAG,CAAC,CAAA,GAClCkrB,WAAW,CAAC,CAAC,CAAC;EAClBhJ,MAAAA,gBAAgB,GAAG4I,YAAY;QAC/B3I,SAAS,GAAGppB,IAAI,CAACsD,GAAG,CAAC8lB,SAAS,EAAE4I,UAAU,CAAC;EAC3C,MAAA,IAAI,CAAClwB,GAAG,CAAA,oBAAA,GAAsBuvB,SAAS,CAACyN,SAAS,CAAG,CAAC;EACvD,IAAA,CAAC,MAAM;EACLF,MAAAA,eAAe,GAAGxyB,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEga,QAAQ;EACjC8C,MAAAA,iBAAiB,GAAG9c,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEie,UAAU;EACvC,IAAA;EAEA,IAAA,IAAMuT,mBAAmB,GAAG3G,WAAU,GAClCA,WAAW,CAACjrB,QAAO,GACnBgrB,WAAU,GACRA,WAAW,CAAChrB,QAAO,GACnB,CAAC;MAEP,IAAM+yB,eAAe,GAAG,IAAI,CAAC1H,WAAW,CAACrzB,eAAe,EAAE,GAAG,IAAI;MACjE,IAAMg7B,aAAuB,GAAG,EAAE;MAAA,IAAA3M,KAAA,GAAA,SAAAA,KAAAA,GACiB;EAAA,QAAA,IAAA4M,qBAAA;EACjD,QAAA,IAAM/B,SAAS,GAAGrJ,MAAM,CAAC1rB,CAAC,CAAC;EAC3B,QAAA,IAAM+2B,QAAQ,GAAG/2B,CAAC,GAAGs2B,kBAAkB;UACvC,IAAI,CAACvB,SAAS,EAAE;EAAA,UAAA,OAAA,CAAA,CAAA;EAEhB,QAAA;EACA,QAAA,IAEElQ,MAAM,CAACmS,oBAAoB,IAC3B,CAACjC,SAAS,CAAC3U,eAAe,IAC1B,CAAC2U,SAAS,CAACtO,gBAAe,EAC1B;EACA,UAAA,IAAMpE,iBAAiB,GAAG9I,SAAS,CAAC8I,iBAEvB;YACb,IACE,QAAOA,iBAAiB,IAAA,IAAA,GAAA,MAAA,GAAjBA,iBAAiB,CAAEgB,YAAY,CAAA,KAAK,UAAU,IACrDxC,qCAAqC,CACnCkU,SAAS,EACTjU,kBAAkB,EAClBC,iBAAiB,EACjBC,gBAAgB,EAChBC,SAAS,EACTC,eACF,CAAA,EACA;EACA6T,YAAAA,SAAS,CAACtO,gBAAgB,GAAGrE,2BAA2B,CACtD2S,SAAS,EACTjU,kBAAkB,EAClBuB,iBAAiB,EACjB+T,MAAI,CAACnH,cACP,CAAC;EACD8F,YAAAA,SAAS,CAACtO,gBAAe,CACtBnD,IAAI,CAAC,UAACD,YAAY,EAAK;EACtB,cAAA,IAAI,CAAC+S,MAAI,CAAClI,GAAG,EAAE;EACb,gBAAA;EACF,cAAA;gBACA6G,SAAS,CAAC3U,eAAe,GAAGiD,YAAY;EACxC,cAAA,IAAMqI,MAAM,GAAG0K,MAAI,CAAClI,GAAG,CAACxC,MAAM;EAC9B,cAAA,IAAMpkB,KAAK,GAAGokB,MAAM,CAACxsB,OAAO,CAAC61B,SAAS,CAAC;gBACvC,IAAI1R,YAAY,CAACvsB,KAAK,EAAE;EACtBs/B,gBAAAA,MAAI,CAAC75B,IAAI,CAAA,0CAAA,GAEL8mB,YAAY,CAACvsB,KAAI,GAAA,eAAA,GACJwQ,KAAK,GAAA,GAAA,GAAI4hB,SAAS,CAAC7F,YAAY,CAChD,CAAC;EACH,cAAA,CAAC,MAAM,IAAI,CAACA,YAAY,CAAChD,SAAS,EAAE;kBAClC+V,MAAI,CAAC75B,IAAI,CAAA,8DAAA,GACwD+K,KAAK,SAAI4hB,SAAS,CAC/E7F,YACF,CACF,CAAC;kBACD,IAAI/b,KAAK,GAAG,EAAE,IAAIokB,MAAM,CAAC5sB,MAAM,GAAG,CAAC,EAAE;EACnCs3B,kBAAAA,MAAI,CAACz8B,GAAG,CAAA,6BAAA,GAA+B2N,KAAO,CAAC;EAC/C8uB,kBAAAA,MAAI,CAAClI,GAAG,CAAC+I,WAAW,CAAC3vB,KAAK,CAAC;oBAC3B,IAAI8uB,MAAI,CAAClI,GAAG,CAAC6D,SAAS,KAAK,EAAE,EAAE;EAC7BqE,oBAAAA,MAAI,CAAClI,GAAG,CAACiD,aAAa,GAAG,CAAC;EAC5B,kBAAA;EACF,gBAAA;gBACF,CAAC,MAAM,IACL9N,YAAY,CAAC1C,mBAAmB,CAAC3hB,IAAI,CACnC,UAACxC,IAAI,EAAA;kBAAA,OACHA,IAAI,CAAC+jB,MAAM,KAAK,KAAK,IAAI/jB,IAAI,CAAC8jB,cAAc,KAAK,KAAK;EAAA,cAAA,CAC1D,CAAA,EACA;kBACA8V,MAAI,CAACz8B,GAAG,CAAA,2CAAA,GACsC2N,KAAK,uCAAkC4hB,SAAS,CAAC7F,YAAY,CAC3G,CAAC;EACH,cAAA;EACF,YAAA,CAAC,CAAA,CACAE,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChBs/B,cAAAA,MAAI,CAAC75B,IAAI,CAAA,iDAAA,GAC2CzF,KACpD,CAAC;EACH,YAAA,CAAC,CAAC;EACN,UAAA,CAAC,MAAM;cACLi+B,SAAS,CAAC3U,eAAe,GAAGK,sBAAsB;EACpD,UAAA;EACF,QAAA;;EAEA;EACA;UACA,IACGgW,eAAe,IAAI1B,SAAS,CAAC9W,QAAQ,KAAKwY,eAAe,IACzD1V,iBAAiB,IAAIgU,SAAS,CAAC7S,UAAU,KAAKnB,iBAAkB,IAChEgW,QAAQ,IAAI/V,gBAAgB,GAAG+T,SAAS,CAAC9S,SAAU,IACnD,CAAC8U,QAAQ,IACR/V,gBAAgB,GAAG,CAAC,IACpBA,gBAAgB,GAAG+T,SAAS,CAAC9S,SAAU,IAAA,CAAA6U,qBAAA,GACzC/B,SAAS,CAAC3U,eAAe,KAAA,IAAA,IAAA,CAAA0W,qBAAA,GAAzBA,qBAAA,CAA2BnW,mBAAmB,KAAA,IAAA,IAA9CmW,qBAAA,CAAgD93B,IAAI,CAClD,UAACxC,IAAI,EAAA;EAAA,UAAA,OAAKA,IAAI,CAAC+jB,MAAM,KAAK,KAAK;EAAA,QAAA,CACjC,CAAA,EACA;EACA,UAAA,IAAI,CAACkO,cAAc,IAAIzuB,CAAC,KAAK02B,aAAa,EAAE;EAC1CG,YAAAA,aAAa,CAACluB,IAAI,CAAC3I,CAAC,CAAC;EAAA,YAAA,OAAA,CAAA,CAAA;EAEvB,UAAA;EACF,QAAA;EAEA,QAAA,IAAMk3B,YAAY,GAAGnC,SAAS,CAACxP,OAAO;EACtC,QAAA,IAAM4R,WAAW,GACf,CAACrI,WAAU,GACPoI,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAEE,UAAS,GACvBF,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAEG,qBAAqB,KAAK5B,mBAAmB;EAEjE,QAAA,IAAI6B,UAAkB;EACtB;EACA;EACA;EACA;EACA;EACA;UACA,IAAI,CAACP,QAAQ,EAAE;YACbO,UAAU,GAAG3B,QAAQ,GAAG1U,SAAS;EACnC,QAAA,CAAC,MAAM;YACLqW,UAAU,GAAGzB,UAAU,GAAG5U,SAAS;EACrC,QAAA;;EAEA;UACA,IAAMkB,OAAe,GACnBsT,mBAAmB,IACnBrF,qBAAqB,IAAIqF,mBAAmB,GAAG,CAAC,IAChDM,kBAAkB,KAAK,CAAA,GACnBhB,SAAS,CAACnQ,cAAa,GACvBmQ,SAAS,CAAC1D,UAAU;EAC1B,QAAA,IAAMkG,aAAqB,GAAGnB,MAAI,CAAC7E,iBAAiB,CAClDqF,eAAe,EACfU,UAAU,EACVnV,OAAO,GAAGgV,WAAW,EACrBD,YAAY,KAAKl5B,SACnB,CAAC;EAED,QAAA,IAAMw5B,wBAAwB;EAC5B;EACAF,QAAAA,UAAU,IAAInV,OAAO;EACrB;EACCniB,QAAAA,CAAC,KAAKwuB,mBAAmB,IACvBuG,SAAS,CAACxO,SAAS,KAAK,CAAC,IAAIwO,SAAS,CAACzO,aAAa,KAAK,CAAE,CAAC;EAC/D;EACA;EACA;EACCiR,QAAAA,aAAa,IAAIX,eAAe,IAC/B,CAAC/vB,cAAA,CAAgB0wB,aAAa,CAAC,IAC9BzG,IAAI,IAAI,CAACsF,MAAI,CAACrH,gBAAiB,IAChCwI,aAAa,GAAGlB,gBAAgB,CAAC;EACrC,QAAA,IAAImB,wBAAwB,EAAE;EAC5B,UAAA,IAAMC,eAAe,GAAGrB,MAAI,CAACqB,eAAe;EAC5C,UAAA,IACEz3B,CAAC,KAAK+xB,SAAS,KACd0F,eAAe,KAAK,EAAE,IAAIA,eAAe,KAAK1F,SAAS,CAAA,EACxD;cACA,IAAI8E,aAAa,CAAC/3B,MAAM,EAAE;EACxBs3B,cAAAA,MAAI,CAAC/5B,KAAK,CAAA,mBAAA,GACYw6B,aAAa,CAAChgB,IAAI,CACpC,GACF,CAAC,YAAO+U,YAAY,GAAA,qCAAA,GAClBF,MAAM,CAACmL,aAAa,CAAC,CAAC,CAAC,CAAC,CAACpZ,MAAK,GAAA,KAAA,GAC3BiO,MAAM,CAACmL,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC3U,UAAU,GAAA,0BAAA,GACtCuU,eAAc,GAAA,KAAA,GACX1V,iBACP,CAAC;EACH,YAAA;EACAqV,YAAAA,MAAI,CAAC55B,IAAI,CAAA,mBAAA,GACa85B,kBAAkB,GAAA,IAAA,GAAKt2B,CAAC,GAAA,cAAA,GAAenI,IAAI,CAAC24B,KAAK,CACnE8G,UACF,CAAC,GAAA,YAAA,GAAaz/B,IAAI,CAAC24B,KAAK,CACtB8G,UAAU,GAAGnV,OACf,CAAC,GAAA,QAAA,GAASyU,eAAe,CAAChF,OAAO,CAC/B,CACF,CAAC,GAAA,eAAA,GAAgBuF,WAAW,CAACvF,OAAO,CAClC,CACF,CAAC,GAAA,oBAAA,GAAqByE,gBAAgB,CAACzE,OAAO,CAC5C,CACF,CAAC,GAAA,iBAAA,GAAkB2F,aAAa,CAAC3F,OAAO,CACtC,CACF,CAAC,GAAA,kBAAA,GAAmBnD,cAAc,GAAA,YAAA,GAAasG,SAAS,CAAC9W,QAAQ,GAAA,cAAA,GAAe8W,SAAS,CAAC7S,UAAU,GAAA,iBAAA,GAAkB6P,SACxH,CAAC;EACH,UAAA;EACA,UAAA,IAAItD,cAAc,EAAE;cAClB2H,MAAI,CAAC3H,cAAc,GAAGzuB,CAAC;EACzB,UAAA;EACA;EAAA,UAAA,OAAA;EAAA03B,YAAAA,CAAA,EACO13B;EAAC,WAAA;EACV,QAAA;QACF,CAAA;QAAA23B,IAAA;MAxLA,KAAK,IAAI33B,CAAC,GAAG4rB,YAAY,EAAE5rB,CAAC,IAAI2rB,YAAY,EAAE3rB,CAAC,EAAE,EAAA;EAAA23B,MAAAA,IAAA,GAAAzN,KAAA,EAAA;EAAA,MAAA,IAAAyN,IAAA,KAAA,CAAA,EAI7C;EAAQ,MAAA,IAAAA,IAAA,EAAA,OAAAA,IAAA,CAAAD,CAAA;EAAA,IAAA;EAqLZ;EACA,IAAA,OAAO,EAAE;IACX,CAAA;EAAA99B,EAAAA,MAAA,CAUUg+B,mBAAmB,GAA7B,SAAUA,mBAAmBA,CAACC,SAAiB,EAAE;EAC/C,IAAA,IAAAC,UAAA,GAAuC,IAAI,CAAC5J,GAAG;QAAvCtC,YAAY,GAAAkM,UAAA,CAAZlM,YAAY;QAAED,YAAY,GAAAmM,UAAA,CAAZnM,YAAY;EAClC,IAAA,OAAO9zB,IAAI,CAAC+D,GAAG,CAAC/D,IAAI,CAACsD,GAAG,CAAC08B,SAAS,EAAElM,YAAY,CAAC,EAAEC,YAAY,CAAC;IAClE,CAAA;IAAA,OAAA7vB,YAAA,CAAAsyB,aAAA,EAAA,CAAA;MAAAryB,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAldA,SAAAA,GAAAA,GAAoC;EAClC,MAAA,IAAA87B,UAAA,GAAuC,IAAI,CAAC7J,GAAG;UAAvCtC,YAAY,GAAAmM,UAAA,CAAZnM,YAAY;UAAED,YAAY,GAAAoM,UAAA,CAAZpM,YAAY;EAClC,MAAA,IAAM1qB,UAAU,GAAG,IAAI,CAACqvB,aAAa,EAAE;QACvC,IAAM0H,aAAa,GAAG,IAAI,CAAC9J,GAAG,CAACrJ,MAAM,CAACkR,kBAAkB;EACxD,MAAA,IAAMkC,YAAY,GAAG,IAAI,CAACtG,aAAa,CACrC1wB,UAAU,EACV0qB,YAAY,EACZC,YAAY,EACZ,CAAC,EACDoM,aAAa,EACb,CAAC,EACD,CACF,CAAC;EACD,MAAA,IAAIC,YAAY,GAAG,EAAE,EAAE;EACrB,QAAA,OAAOA,YAAY;EACrB,MAAA;EACA,MAAA,IAAM1B,UAAU,GAAG,IAAI,CAACrI,GAAG,CAACqI,UAAU;EACtC,MAAA,IAAM2B,OAAO,GAAGrgC,IAAI,CAAC+D,GAAG,CAAC/D,IAAI,CAACsD,GAAG,CAACo7B,UAAU,EAAE5K,YAAY,CAAC,EAAEC,YAAY,CAAC;EAC1E,MAAA,IAAI,CAACrvB,IAAI,CAAA,2EAAA,GACqEg6B,UAAU,GAAA,cAAA,GAAe2B,OACvG,CAAC;EACD,MAAA,OAAOA,OAAO;EAChB,IAAA;EAAA,GAAA,EAAA;MAAAl8B,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAEA,SAAAA,GAAAA,GAAqC;QACnC,IAAI,IAAI,CAAC0yB,gBAAgB,EAAE;EACzB,QAAA,OAAO,EAAE;EACX,MAAA;QACA,OAAO,IAAI,CAACD,cAAc;EAC5B,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAA1yB,GAAA,EAAA,eAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAAmC;EACjC,MAAA,IAAMw7B,eAAe,GAAG,IAAI,CAACA,eAAe;EAC5C,MAAA,IAAMvI,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,MAAA,IAAMiJ,WAAW,GAAGjJ,WAAW,CAACvzB,WAAW,EAAE;EAC7C,MAAA,IAAMy8B,eAAe,GAAG,IAAI,CAAC5J,mBAAmB,GAAG,EAAE;EACrD;QACA,IACEiJ,eAAe,KAAK,EAAE,KACrB,CAACU,WAAW,IACX,CAACC,eAAe,IAChB,IAAI,CAACzJ,gBAAgB,KAAK,IAAI,CAAC4G,eAAe,EAAE,CAAA,EAClD;EACA,QAAA,OAAOkC,eAAe;EACxB,MAAA;;EAEA;EACA,MAAA,IAAMY,gBAAgB,GACpBF,WAAW,IAAIC,eAAc,GACzB,IAAI,CAAC5C,mBAAmB,EAAC,GACzB,IAAI,CAAC8C,cAAc;;EAEzB;EACA,MAAA,IAAIb,eAAe,KAAK,EAAE,EAAE;EAC1B,QAAA,IAAM/L,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;UAC9B,IACEA,MAAM,CAAC5sB,MAAM,GAAGjH,IAAI,CAACsD,GAAG,CAACs8B,eAAe,EAAEY,gBAAgB,CAAC,IAC3D3M,MAAM,CAAC+L,eAAe,CAAC,CAAClR,SAAS,IAAImF,MAAM,CAAC2M,gBAAgB,CAAC,CAAC9R,SAAQ,EACtE;EACA,UAAA,OAAOkR,eAAe;EACxB,QAAA;EACF,MAAA;;EAEA;QACA,IAAI,CAAC/I,cAAc,GAAG2J,gBAAgB;EACtC,MAAA,IAAI,CAAC1J,gBAAgB,GAAG,IAAI,CAAC4G,eAAe,EAAE;EAE9C,MAAA,OAAO8C,gBAAgB;MACzB,CAAA;EAAAz1B,IAAAA,GAAA,EAkYA,SAAAA,GAAAA,CAAyBi1B,SAAiB,EAAE;EAC1C,MAAA,IAAM1/B,KAAK,GAAG,IAAI,CAACy/B,mBAAmB,CAACC,SAAS,CAAC;EACjD,MAAA,IAAI,IAAI,CAACnJ,cAAc,KAAKv2B,KAAK,EAAE;UACjC,IAAI,CAACw2B,gBAAgB,GAAG,EAAE;UAC1B,IAAI,CAACD,cAAc,GAAGv2B,KAAK;EAC7B,MAAA;EACF,IAAA;EAAA,GAAA,CAAA,CAAA;EAAA,CAAA,CAh9B0B+D,MAAM,CAAA;;EChClC,IAAMq8B,YAAY,GAAG;EACnB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACEC,EAAAA,MAAM,EAAE,SAARA,MAAMA,CACJC,IAAS,EACTC,YAAuC,EAC7B;MACV,IAAI5O,QAAgB,GAAG,CAAC;EACxB,IAAA,IAAI6O,QAAgB,GAAGF,IAAI,CAAC35B,MAAM,GAAG,CAAC;MACtC,IAAI85B,YAA2B,GAAG,IAAI;MACtC,IAAIC,cAAwB,GAAG,IAAI;MAEnC,OAAO/O,QAAQ,IAAI6O,QAAQ,EAAE;QAC3BC,YAAY,GAAI,CAAC9O,QAAQ,GAAG6O,QAAQ,IAAI,CAAC,GAAI,CAAC;EAC9CE,MAAAA,cAAc,GAAGJ,IAAI,CAACG,YAAY,CAAC;EAEnC,MAAA,IAAME,gBAAgB,GAAGJ,YAAY,CAACG,cAAc,CAAC;QACrD,IAAIC,gBAAgB,GAAG,CAAC,EAAE;UACxBhP,QAAQ,GAAG8O,YAAY,GAAG,CAAC;EAC7B,MAAA,CAAC,MAAM,IAAIE,gBAAgB,GAAG,CAAC,EAAE;UAC/BH,QAAQ,GAAGC,YAAY,GAAG,CAAC;EAC7B,MAAA,CAAC,MAAM;EACL,QAAA,OAAOC,cAAc;EACvB,MAAA;EACF,IAAA;EAEA,IAAA,OAAO,IAAI;EACb,EAAA;EACF,CAAC;;ECvCD;EACA;EACA;EACA;EACA;EACA;EACO,SAASE,iBAAiBA,CAC/BC,SAA0B,EAC1BC,QAAuB,EACvBC,sBAA8B,EACR;IACtB,IACED,QAAQ,KAAK,IAAI,IACjB,CAAChhB,KAAK,CAACkhB,OAAO,CAACH,SAAS,CAAC,IACzB,CAACA,SAAS,CAACl6B,MAAM,IACjB,CAACsH,cAAA,CAAgB6yB,QAAQ,CAAC,EAC1B;EACA,IAAA,OAAO,IAAI;EACb,EAAA;;EAEA;EACA,EAAA,IAAMG,QAAQ,GAAGJ,SAAS,CAAC,CAAC,CAAC,CAACpyB,eAAe;EAC7C,EAAA,IAAIqyB,QAAQ,IAAIG,QAAQ,IAAI,CAAC,CAAC,EAAE;EAC9B,IAAA,OAAO,IAAI;EACb,EAAA;IAEA,IAAMC,MAAM,GAAGL,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAACw6B,kBAAkB;EACjE,EAAA,IAAIL,QAAQ,KAAKI,MAAM,IAAI,CAAC,CAAC,EAAE;EAC7B,IAAA,OAAO,IAAI;EACb,EAAA;EAEA,EAAA,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGP,SAAS,CAACl6B,MAAM,EAAE,EAAEy6B,GAAG,EAAE;EAC/C,IAAA,IAAMt2B,IAAI,GAAG+1B,SAAS,CAACO,GAAG,CAAC;MAC3B,IAAIC,sBAAsB,CAACP,QAAQ,EAAEC,sBAAsB,EAAEj2B,IAAI,CAAC,EAAE;EAClE,MAAA,OAAOA,IAAI;EACb,IAAA;EACF,EAAA;EAEA,EAAA,OAAO,IAAI;EACb;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASw2B,iBAAiBA,CAC/BC,YAAkC,EAClCV,SAA0B,EAC1BW,SAAiB,EACjBT,sBAA8B,EAC9BU,uBAA+B,EACT;EAAA,EAAA,IAHtBD,SAAiB,KAAA,MAAA,EAAA;EAAjBA,IAAAA,SAAiB,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IACrBT,sBAA8B,KAAA,MAAA,EAAA;EAA9BA,IAAAA,sBAA8B,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IAClCU,uBAA+B,KAAA,MAAA,EAAA;EAA/BA,IAAAA,uBAA+B,GAAG,KAAK;EAAA,EAAA;IAEvC,IAAIC,QAA8B,GAAG,IAAI;EACzC,EAAA,IAAIH,YAAY,EAAE;EAChBG,IAAAA,QAAQ,GAAGb,SAAS,CAAC,CAAC,GAAGU,YAAY,CAACx2B,EAAE,GAAG81B,SAAS,CAAC,CAAC,CAAC,CAAC91B,EAAE,CAAC,IAAI,IAAI;EACnE;EACA,IAAA,IAAM42B,eAAe,GAAIJ,YAAY,CAACp1B,MAAM,GAAcq1B,SAAS;EACnE,IAAA,IAAIG,eAAe,GAAG,CAAC,IAAIA,eAAe,GAAG,SAAS,EAAE;EACtDH,MAAAA,SAAS,IAAI,SAAS;EACxB,IAAA;EACA,IAAA,IACEE,QAAQ,IACRH,YAAY,CAACz1B,KAAK,KAAK41B,QAAQ,CAAC51B,KAAK,IACrC41B,QAAQ,CAACx4B,GAAG,IAAIq4B,YAAY,CAACr4B,GAAG,EAChC;EACAw4B,MAAAA,QAAQ,GAAGb,SAAS,CAAC,CAAC,GAAGU,YAAY,CAACx2B,EAAE,GAAG81B,SAAS,CAAC,CAAC,CAAC,CAAC91B,EAAE,CAAC,IAAI,IAAI;EACrE,IAAA;EACF,EAAA,CAAC,MAAM,IAAIy2B,SAAS,KAAK,CAAC,IAAIX,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK,KAAK,CAAC,EAAE;EACtD04B,IAAAA,QAAQ,GAAGb,SAAS,CAAC,CAAC,CAAC;EACzB,EAAA;EACA;EACA,EAAA,IACEa,QAAQ,KACN,CAAC,CAACH,YAAY,IAAIA,YAAY,CAACz1B,KAAK,KAAK41B,QAAQ,CAAC51B,KAAK,KACvD81B,2BAA2B,CACzBJ,SAAS,EACTT,sBAAsB,EACtBW,QACF,CAAC,KAAK,CAAC,IACPG,6BAA6B,CAC3BH,QAAQ,EACRH,YAAY,EACZ7hC,IAAI,CAAC+D,GAAG,CAACg+B,uBAAuB,EAAEV,sBAAsB,CAC1D,CAAC,CAAC,EACJ;EACA,IAAA,OAAOW,QAAQ;EACjB,EAAA;EACA;EACA,EAAA,IAAMI,aAAa,GAAG1B,YAAY,CAACC,MAAM,CACvCQ,SAAS,EACTe,2BAA2B,CAACp9B,IAAI,CAAC,IAAI,EAAEg9B,SAAS,EAAET,sBAAsB,CAC1E,CAAC;IACD,IAAIe,aAAa,KAAKA,aAAa,KAAKP,YAAY,IAAI,CAACG,QAAQ,CAAC,EAAE;EAClE,IAAA,OAAOI,aAAa;EACtB,EAAA;EACA;EACA,EAAA,OAAOJ,QAAQ;EACjB;EAEA,SAASG,6BAA6BA,CACpCH,QAAkB,EAClBH,YAA6B,EAC7BE,uBAA+B,EACtB;IACT,IACEF,YAAY,IACZA,YAAY,CAACv4B,KAAK,KAAK,CAAC,IACxBu4B,YAAY,CAACz1B,KAAK,GAAG41B,QAAQ,CAAC51B,KAAK,IACnC,CAACy1B,YAAY,CAACt1B,MAAM,IAAI,CAAC,IAAI,CAAC,EAC9B;EACA,IAAA,IAAM81B,aAAa,GAAGR,YAAY,CAAC91B,OAAO,CAACiP,MAAM,CAAC,UAAChP,QAAQ,EAAEs2B,GAAG,EAAK;EACnE,MAAA,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;EACpBt2B,QAAAA,QAAQ,IAAI0gB,UAAU,CAAC4V,GAAG,CAAC,CAAC,CAAC,CAAC;EAChC,MAAA;EACA,MAAA,OAAOt2B,QAAQ;MACjB,CAAC,EAAE+1B,uBAAuB,CAAC;EAC3B,IAAA,OAAOC,QAAQ,CAAC14B,KAAK,IAAI+4B,aAAa;EACxC,EAAA;EACA,EAAA,OAAO,KAAK;EACd;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASH,2BAA2BA,CACzCJ,SAAS,EACTT,sBAAsB,EACtBxO,SAAwB,EACxB;EAAA,EAAA,IAHAiP,SAAS,KAAA,MAAA,EAAA;EAATA,IAAAA,SAAS,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IACbT,sBAAsB,KAAA,MAAA,EAAA;EAAtBA,IAAAA,sBAAsB,GAAG,CAAC;EAAA,EAAA;EAG1B;EACA,EAAA,IACExO,SAAS,CAACvpB,KAAK,IAAIw4B,SAAS,IAC5BjP,SAAS,CAACvpB,KAAK,GAAGupB,SAAS,CAAC7mB,QAAQ,GAAG81B,SAAS,EAChD;EACA,IAAA,OAAO,CAAC;EACV,EAAA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;IACA,IAAMS,wBAAwB,GAAGviC,IAAI,CAAC+D,GAAG,CACvCs9B,sBAAsB,EACtBxO,SAAS,CAAC7mB,QAAQ,IAAI6mB,SAAS,CAAClmB,QAAQ,GAAGkmB,SAAS,CAAClmB,QAAQ,GAAG,CAAC,CACnE,CAAC;IACD,IACEkmB,SAAS,CAACvpB,KAAK,GAAGupB,SAAS,CAAC7mB,QAAQ,GAAGu2B,wBAAwB,IAC/DT,SAAS,EACT;EACA,IAAA,OAAO,CAAC;EACV,EAAA,CAAC,MAAM,IACLjP,SAAS,CAACvpB,KAAK,GAAGi5B,wBAAwB,GAAGT,SAAS,IACtDjP,SAAS,CAACvpB,KAAK,EACf;EACA;EACA,IAAA,OAAO,EAAE;EACX,EAAA;EAEA,EAAA,OAAO,CAAC;EACV;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASq4B,sBAAsBA,CACpCa,YAAoB,EACpBnB,sBAA8B,EAC9BxO,SAAwB,EACf;IACT,IAAM0P,wBAAwB,GAC5BviC,IAAI,CAAC+D,GAAG,CACNs9B,sBAAsB,EACtBxO,SAAS,CAAC7mB,QAAQ,IAAI6mB,SAAS,CAAClmB,QAAQ,GAAGkmB,SAAS,CAAClmB,QAAQ,GAAG,CAAC,CACnE,CAAC,GAAG,IAAI;;EAEV;EACA,EAAA,IAAM80B,kBAAkB,GAAG5O,SAAS,CAAC4O,kBAAkB,IAAI,CAAC;EAC5D,EAAA,OAAOA,kBAAkB,GAAGc,wBAAwB,GAAGC,YAAY;EACrE;EAiBO,SAASC,iBAAiBA,CAC/B/U,OAAiC,EACjCrhB,EAAU,EACVq2B,GAAW,EACW;EACtB,EAAA,IAAIhV,OAAO,EAAE;MACX,IAAIA,OAAO,CAACiV,OAAO,IAAIt2B,EAAE,IAAIqhB,OAAO,CAACkV,KAAK,IAAIv2B,EAAE,EAAE;EAChD,MAAA,IAAI80B,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACjC,MAAA,IAAQ0B,YAAY,GAAKnV,OAAO,CAAxBmV,YAAY;EACpB,MAAA,IAAIA,YAAY,EAAE;EAChB1B,QAAAA,SAAS,GAAGA,SAAS,CAAC2B,MAAM,CAACD,YAAY,CAAC;EAC5C,MAAA;EACA,MAAA,IAAIE,OAAkC;EACtCrC,MAAAA,YAAY,CAACC,MAAM,CAACQ,SAAS,EAAE,UAACtO,SAAS,EAAK;EAC5C,QAAA,IAAIA,SAAS,CAACxmB,EAAE,GAAGA,EAAE,EAAE;EACrB,UAAA,OAAO,CAAC;EACV,QAAA;EACA,QAAA,IAAIwmB,SAAS,CAACxmB,EAAE,GAAGA,EAAE,EAAE;EACrB,UAAA,OAAO,EAAE;EACX,QAAA;EACA02B,QAAAA,OAAO,GAAGlQ,SAAS;EACnB,QAAA,IAAIA,SAAS,CAACrpB,GAAG,IAAIk5B,GAAG,EAAE;EACxB,UAAA,OAAO,CAAC;EACV,QAAA;EACA,QAAA,IAAI7P,SAAS,CAACvpB,KAAK,GAAGo5B,GAAG,EAAE;EACzB,UAAA,OAAO,EAAE;EACX,QAAA;EACA,QAAA,OAAO,CAAC;EACV,MAAA,CAAC,CAAC;QACF,OAAOK,OAAO,IAAI,IAAI;EACxB,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;;EC3PO,SAASC,cAAcA,CAAC/jC,KAAgB,EAAW;IACxD,QAAQA,KAAK,CAACyuB,OAAO;MACnB,KAAK/sB,YAAY,CAAC67B,iBAAiB;MACnC,KAAK77B,YAAY,CAACsiC,gBAAgB;MAClC,KAAKtiC,YAAY,CAACuiC,kBAAkB;MACpC,KAAKviC,YAAY,CAACwiC,qBAAqB;EACrC,MAAA,OAAO,IAAI;EACf;EACA,EAAA,OAAO,KAAK;EACd;EAEO,SAASC,UAAUA,CAACnkC,KAAgB,EAAW;EACpD,EAAA,OAAOA,KAAK,CAACyuB,OAAO,CAAC5F,UAAU,CAAC,KAAK,CAAC;EACxC;EAEO,SAASub,kBAAkBA,CAACpkC,KAAgB,EAAW;EAC5D,EAAA,OAAOmkC,UAAU,CAACnkC,KAAK,CAAC,IAAI,CAAC,CAACA,KAAK,CAACmM,IAAI,IAAI,CAACnM,KAAK,CAACmM,IAAI,CAAC0M,WAAW;EACrE;EAEO,SAASwrB,cAAcA,CAC5BC,UAAsB,EACtBtkC,KAAgB,EACI;EACpB,EAAA,IAAMukC,SAAS,GAAGR,cAAc,CAAC/jC,KAAK,CAAC;IACvC,OAAOskC,UAAU,CAACtvB,OAAO,CAAA,CAAIuvB,SAAS,GAAG,SAAS,GAAG,OAAO,IAAA,OAAA,CAAQ;EACtE;EAEO,SAASC,aAAaA,CAC3BC,WAAwB,EACxBC,UAAkB,EACV;EACR;EACA,EAAA,IAAMC,aAAa,GACjBF,WAAW,CAACG,OAAO,KAAK,QAAQ,GAAG,CAAC,GAAG7jC,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAEwhC,UAAU,CAAC;EAChE,EAAA,OAAO3jC,IAAI,CAAC+D,GAAG,CACb6/B,aAAa,GAAGF,WAAW,CAACI,YAAY,EACxCJ,WAAW,CAACK,eACd,CAAC;EACH;EAEO,SAASC,4BAA4BA,CAC1CC,WAAyB,EACX;EACd,EAAA,OAAAnwB,cAAA,CAAAA,cAAA,CAAA,EAAA,EACKmwB,WAAW,CAAA,EACX;EACDC,IAAAA,UAAU,EAAE,IAAI;EAChBC,IAAAA,YAAY,EAAE;KACf,CAAA;EAEL;EAEO,SAASC,WAAWA,CACzBV,WAA2C,EAC3CC,UAAkB,EAClBH,SAAkB,EAClBa,cAA2C,EACL;IACtC,IAAI,CAACX,WAAW,EAAE;EAChB,IAAA,OAAO,KAAK;EACd,EAAA;EACA,EAAA,IAAMY,UAAU,GAAGD,cAAc,IAAA,IAAA,GAAA,MAAA,GAAdA,cAAc,CAAEE,IAAI;EACvC,EAAA,IAAMt7B,KAAK,GACT06B,UAAU,GAAGD,WAAW,CAACc,WAAW,KACnCC,kBAAkB,CAACH,UAAU,CAAC,IAAI,CAAC,CAACd,SAAS,CAAC;EACjD,EAAA,OAAOE,WAAW,CAACU,WAAW,GAC1BV,WAAW,CAACU,WAAW,CACrBV,WAAW,EACXC,UAAU,EACVH,SAAS,EACTa,cAAc,EACdp7B,KACF,CAAC,GACDA,KAAK;EACX;EAEO,SAASw7B,kBAAkBA,CAACH,UAA8B,EAAW;EAC1E;EACA,EAAA,OACEI,iBAAiB,CAACJ,UAAU,CAAC,IAC5B,CAAC,CAACA,UAAU,KAAKA,UAAU,GAAG,GAAG,IAAIA,UAAU,GAAG,GAAG,CAAE;EAE5D;EAEO,SAASI,iBAAiBA,CAACJ,UAA8B,EAAW;IACzE,OAAOA,UAAU,KAAK,CAAC,IAAI5iB,SAAS,CAACijB,MAAM,KAAK,KAAK;EACvD;;ECpEA,IAAkBC,kBAAkB,GAAA;IAAAC,SAAA,EAAA,CAAA;IAAAC,yBAAA,EAAA,CAAA;IAAAC,0BAAA,EAAA,CAAA;IAAAC,YAAA,EAAA;EAAA,CAAA;EASpC,IAAkBC,gBAAgB,GAAA;IAAAC,IAAA,EAAA,CAAA;IAAAC,6BAAA,EAAA,CAAA;IAAAC,6BAAA,EAAA,CAAA;IAAAC,4BAAA,EAAA,CAAA,CAAA;EAMjC,IAWoBC,eAAe,0BAAA7O,OAAA,EAAA;IAOlC,SAAA6O,eAAAA,CAAYjP,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,kBAAkB,EAAE4qB,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAJvB6qB,GAAG,GAAA,MAAA;MAAA7qB,KAAA,CACZ+5B,aAAa,GAAW,CAAC;MAI/B/5B,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;MACd7qB,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAi4B,eAAA,EAAA7O,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAujC,eAAA,CAAAtjC,SAAA;EAAAD,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAMpE,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EACxC1F,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;IACzD,CAAC;EAAA1jC,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAM3F,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACA,GAAG,EAAE;EACR,MAAA;EACF,IAAA;EACAA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EACzC1F,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAAC4J,UAAU,EAAE,IAAI,CAAC;EAC5CrP,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;IAC1D,CAAC;EAAA1jC,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAAC+3B,mBAAmB,EAAE;EAC1B;MACA,IAAI,CAAC3F,GAAG,GAAG,IAAI;IACjB,CAAC;IAAAt0B,MAAA,CAED4jC,SAAS,GAAT,SAAAA,SAASA,CAACC,aAAqB,EAAQ,CAAC,CAAC;EAAA7jC,EAAAA,MAAA,CAEzC8jC,QAAQ,GAAR,SAAAA,QAAQA,GAAS;MACf,IAAI,CAACN,aAAa,GAAG,CAAC;IACxB,CAAC;EAAAxjC,EAAAA,MAAA,CAEO+jC,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAAC16B,IAA0B,EAAU;MAC/D,IAAI,CAAAA,IAAI,IAAA,IAAA,GAAA,MAAA,GAAJA,IAAI,CAAEjG,IAAI,MAAKjE,iBAAiB,CAACC,IAAI,EAAE;QACzC,OAAOiK,IAAI,CAACgB,KAAK;EACnB,IAAA;EACA,IAAA,OAAO,IAAI,CAAC25B,eAAe,EAAE;IAC/B,CAAC;EAAAhkC,EAAAA,MAAA,CAEOgkC,eAAe,GAAvB,SAAQA,eAAeA,GAAW;EAAA,IAAA,IAAAzP,iBAAA;EAChC,IAAA,IAAMD,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAMV,YAAY,GAAGU,GAAG,CAACV,YAAY;EACrC,IAAA,IAAI,CAAAW,iBAAA,GAAAD,GAAG,CAACE,YAAY,KAAA,IAAA,IAAhBD,iBAAA,CAAkB5I,OAAO,IAAIiI,YAAY,KAAK,EAAE,EAAE;QACpD,OAAOU,GAAG,CAAC6D,SAAS;EACtB,IAAA;EACA,IAAA,OAAOvE,YAAY;IACrB,CAAC;IAAA5zB,MAAA,CAEOikC,aAAa,GAArB,SAAQA,aAAaA,CACnB55B,KAAwB,EACxB65B,UAAoB,EACX;EACT,IAAA,IAAI75B,KAAK,EAAE;EAAA,MAAA,IAAA85B,cAAA;EACT,MAAA,IAAA,CAAAA,cAAA,GAAI95B,KAAK,CAACshB,OAAO,KAAA,IAAA,IAAbwY,cAAA,CAAeC,MAAM,CAACF,UAAU,CAAC,EAAE;EACrC,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,IAAMG,cAAc,GAAGh6B,KAAK,CAACkd,WAAW;EACxC,MAAA,IAAI8c,cAAc,EAAE;UAClB,IAAMC,WAAW,GAAG,IAAI,CAAChQ,GAAG,CAAChD,cAAc,CAACjE,MAAM,CAChD,UAACpb,KAAK,EAAA;YAAA,OAAKoyB,cAAc,CAAC/+B,OAAO,CAAC2M,KAAK,CAAC+V,OAAO,CAAC,IAAI,CAAC;EAAA,QAAA,CACvD,CAAC;EACD,QAAA,OAAOsc,WAAW,CAACl/B,IAAI,CAAC,UAAC6M,KAAK,EAAA;EAAA,UAAA,IAAAsyB,cAAA;YAAA,OAAA,CAAAA,cAAA,GAAKtyB,KAAK,CAAC0Z,OAAO,KAAA,IAAA,GAAA,MAAA,GAAb4Y,cAAA,CAAeH,MAAM,CAACF,UAAU,CAAC;UAAA,CAAA,CAAC;EACvE,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;EAAAlkC,EAAAA,MAAA,CAEOg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAACwK,aAAa,GAAG,CAAC;IACxB,CAAC;EAAAxjC,EAAAA,MAAA,CAEO0jC,cAAc,GAAtB,SAAQA,cAAcA,GAAG;MACvB,IAAI,CAACF,aAAa,GAAG,CAAC;IACxB,CAAC;IAAAxjC,MAAA,CAEOg6B,OAAO,GAAf,SAAQA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;EAAA,IAAA,IAAAy5B,UAAA;MACpD,IAAIz5B,IAAI,CAACuvB,KAAK,EAAE;EACd,MAAA;EACF,IAAA;EACA,IAAA,IAAMhG,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAMzwB,OAAO,GAAGkH,IAAI,CAAClH,OAAO;MAE5B,QAAQkH,IAAI,CAAC4gB,OAAO;QAClB,KAAK/sB,YAAY,CAAC6lC,eAAe;QACjC,KAAK7lC,YAAY,CAAC67B,iBAAiB;QACnC,KAAK77B,YAAY,CAAC8lC,cAAc;QAChC,KAAK9lC,YAAY,CAACsiC,gBAAgB;UAChCn2B,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACC,0BAA0B,CAAC75B,IAAI,CAAC;EACxD,QAAA;QACF,KAAKnM,YAAY,CAACimC,kBAAkB;EAClC;UACA,IAAA,CAAAL,UAAA,GAAIz5B,IAAI,CAAC1B,IAAI,KAAA,IAAA,IAATm7B,UAAA,CAAWp5B,GAAG,EAAE;EAClBL,UAAAA,IAAI,CAAC45B,WAAW,GAAGG,0BAA0B,EAAE;EAC/C,UAAA;EACF,QAAA;EACF;QACA,KAAKlmC,YAAY,CAACmmC,QAAQ;QAC1B,KAAKnmC,YAAY,CAAComC,kBAAkB;EAAE,QAAA;EACpC;YACAj6B,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACC,0BAA0B,CAAC75B,IAAI,CAAC;EACxDA,UAAAA,IAAI,CAAC45B,WAAW,CAACM,MAAM,GAAGpC,kBAAkB,CAACE,yBAAyB;EACtE,UAAA;EACF,QAAA;QACA,KAAKnkC,YAAY,CAACsmC,iBAAiB;QACnC,KAAKtmC,YAAY,CAACumC,mBAAmB;EACnC,QAAA;EAAA,UAAA,IAAAC,aAAA;EACE;EACA,UAAA,IAAMC,UAAU,GACdt6B,IAAI,CAACu6B,MAAM,KAAKnmC,iBAAiB,CAACC,IAAI,GACjC2L,IAAI,CAACV,KAAK,GACXiqB,GAAG,CAAC6D,SAAS;YACnB,IACEptB,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAACsmC,iBAAiB,IAC/C,CAAC,EAAA,CAAAE,aAAA,GAACr6B,IAAI,CAAClH,OAAO,KAAA,IAAA,IAAA,CAAAuhC,aAAA,GAAZA,aAAA,CAAc9H,YAAY,KAAA,IAAA,IAA1B8H,aAAA,CAA4BlO,IAAI,CAAA,EAClC;cACAnsB,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACY,8BAA8B,CACpDx6B,IAAI,EACJs6B,UACF,CAAC;EACH,UAAA,CAAC,MAAM;EACL;cACAt6B,IAAI,CAACy6B,UAAU,GAAG,KAAK;cACvBz6B,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACc,oBAAoB,CAAC16B,IAAI,EAAEs6B,UAAU,CAAC;EAChE,UAAA;EACF,QAAA;EACA,QAAA;QACF,KAAKzmC,YAAY,CAAC8mC,gBAAgB;QAClC,KAAK9mC,YAAY,CAACuiC,kBAAkB;UAClC,IAAI,QAAOt9B,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEwG,KAAK,CAAA,KAAK,QAAQ,EAAE;EACtCU,UAAAA,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACY,8BAA8B,CACpDx6B,IAAI,EACJlH,OAAO,CAACwG,KACV,CAAC;EACH,QAAA;EACA,QAAA;QACF,KAAKzL,YAAY,CAAC+mC,sBAAsB;QACxC,KAAK/mC,YAAY,CAACgnC,wBAAwB;QAC1C,KAAKhnC,YAAY,CAACinC,mBAAmB;QACrC,KAAKjnC,YAAY,CAACknC,2BAA2B;EAC3C,QAAA,IAAIjiC,OAAO,EAAE;EACX,UAAA,IAAMwG,KAAK,GAAGiqB,GAAG,CAACE,YAAY;EAC9B,UAAA,IACEnqB,KAAK,KACHxG,OAAO,CAACT,IAAI,KAAKtE,mBAAmB,CAACG,WAAW,IAChDoL,KAAK,CAACsjB,aAAa,CAAC9pB,OAAO,CAACmkB,OAAO,CAAC,IACnCnkB,OAAO,CAACT,IAAI,KAAKtE,mBAAmB,CAACI,cAAc,IAClDmL,KAAK,CAACwjB,gBAAgB,CAAChqB,OAAO,CAACmkB,OAAO,CAAE,CAAC,EAC7C;EACA;EACA;EACAjd,YAAAA,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACY,8BAA8B,CACpDx6B,IAAI,EACJupB,GAAG,CAAC6D,SACN,CAAC;EACDptB,YAAAA,IAAI,CAAC45B,WAAW,CAACM,MAAM,GACrBpC,kBAAkB,CAACE,yBAAyB;EAC9Ch4B,YAAAA,IAAI,CAAC45B,WAAW,CAACxyB,KAAK,GACpB+wB,gBAAgB,CAACE,6BAA6B;EAChD,YAAA;EACF,UAAA;EACF,QAAA;EACA,QAAA;QACF,KAAKxkC,YAAY,CAACmnC,mCAAmC;EACnD,QAAA;YACEh7B,IAAI,CAAC45B,WAAW,GAAG;cACjBM,MAAM,EAAEpC,kBAAkB,CAACE,yBAAyB;cACpD5wB,KAAK,EAAE+wB,gBAAgB,CAACG;aACzB;EACH,QAAA;EACA,QAAA;QACF,KAAKzkC,YAAY,CAAConC,gCAAgC;QAClD,KAAKpnC,YAAY,CAACqnC,gCAAgC;QAClD,KAAKrnC,YAAY,CAACsnC,qBAAqB;EACrC,QAAA;YACEn7B,IAAI,CAAC45B,WAAW,GAAG;cACjBM,MAAM,EAAEpC,kBAAkB,CAACE,yBAAyB;cACpD5wB,KAAK,EAAE+wB,gBAAgB,CAACI;aACzB;EACH,QAAA;EACA,QAAA;QACF,KAAK1kC,YAAY,CAAC27B,sBAAsB;QACxC,KAAK37B,YAAY,CAACunC,iBAAiB;QACnC,KAAKvnC,YAAY,CAAC47B,mBAAmB;EACnC;EACA,QAAA,IAAI,CAACzvB,IAAI,CAAC45B,WAAW,EAAE;EAAA,UAAA,IAAAyB,WAAA;YACrBr7B,IAAI,CAAC45B,WAAW,GAAG,IAAI,CAACc,oBAAoB,CAC1C16B,IAAI,EAAA,CAAAq7B,WAAA,GACJr7B,IAAI,CAACV,KAAK,KAAA,IAAA,GAAA+7B,WAAA,GAAI9R,GAAG,CAAC6D,SACpB,CAAC;EACH,QAAA;EACA,QAAA;QACF,KAAKv5B,YAAY,CAACynC,kBAAkB;QACpC,KAAKznC,YAAY,CAAC0nC,sBAAsB;QACxC,KAAK1nC,YAAY,CAAC2nC,iBAAiB;QACnC,KAAK3nC,YAAY,CAAC4nC,kBAAkB;QACpC,KAAK5nC,YAAY,CAAC6nC,oBAAoB;QACtC,KAAK7nC,YAAY,CAAC8nC,qBAAqB;QACvC,KAAK9nC,YAAY,CAAC+nC,qBAAqB;EACrC57B,QAAAA,IAAI,CAAC45B,WAAW,GAAGG,0BAA0B,EAAE;EAC/C,QAAA;EACJ;EAEA,IAAA,IAAI/5B,IAAI,CAAC3H,IAAI,KAAKzE,UAAU,CAACioC,gBAAgB,EAAE;EAC7C;QACA77B,IAAI,CAACy6B,UAAU,GAAG,KAAK;EACvBz6B,MAAAA,IAAI,CAAC45B,WAAW,GAAGG,0BAA0B,EAAE;EACjD,IAAA;IACF,CAAC;IAAA9kC,MAAA,CAEOulC,8BAA8B,GAAtC,SAAQA,8BAA8BA,CACpCx6B,IAAe,EACfs6B,UAAqC,EACvB;EACd,IAAA,IAAM/Q,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAMqN,WAAW,GAAGJ,cAAc,CAACjN,GAAG,CAACrJ,MAAM,CAAC4b,kBAAkB,EAAE97B,IAAI,CAAC;EACvE,IAAA,IAAM62B,UAAU,GAAG,IAAI,CAAC4B,aAAa,EAAE;EACvC,IAAA,IAAMt8B,KAAK,GAAGm7B,WAAW,CACvBV,WAAW,EACXC,UAAU,EACVX,cAAc,CAACl2B,IAAI,CAAC,EACpBA,IAAI,CAAC+7B,QACP,CAAC;EACD,IAAA,IAAI5/B,KAAK,EAAE;QACT,OAAO;UACL+9B,MAAM,EAAEpC,kBAAkB,CAACI,YAAY;UACvC9wB,KAAK,EAAE+wB,gBAAgB,CAACC,IAAI;EAC5BxB,QAAAA,WAAW,EAAXA,WAAW;EACXC,QAAAA,UAAU,EAAVA;SACD;EACH,IAAA;MACA,IAAM+C,WAAW,GAAG,IAAI,CAACc,oBAAoB,CAAC16B,IAAI,EAAEs6B,UAAU,CAAC;EAC/D,IAAA,IAAI1D,WAAW,EAAE;QACfgD,WAAW,CAAChD,WAAW,GAAGA,WAAW;QACrCgD,WAAW,CAAC/C,UAAU,GAAGA,UAAU;EACrC,IAAA;EACA,IAAA,OAAO+C,WAAW;IACpB,CAAC;EAAA3kC,EAAAA,MAAA,CAEO4kC,0BAA0B,GAAlC,SAAQA,0BAA0BA,CAAC75B,IAAe,EAAgB;EAChE,IAAA,IAAMupB,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB;EACA;MACA,IAAMyS,iBAAiB,GAAG,IAAI,CAAChD,oBAAoB,CAACh5B,IAAI,CAAC1B,IAAI,CAAC;EAC9D,IAAA,IAAMgB,KAAK,GAAGiqB,GAAG,CAACxC,MAAM,CAACiV,iBAAiB,CAAC;EAC3C,IAAA,IAAAC,WAAA,GAA0C1S,GAAG,CAACrJ,MAAM;QAA5Cgc,cAAc,GAAAD,WAAA,CAAdC,cAAc;QAAEC,aAAa,GAAAF,WAAA,CAAbE,aAAa;EACrC,IAAA,IAAMvF,WAAW,GAAGJ,cAAc,CAChCF,UAAU,CAACt2B,IAAI,CAAC,GAAGm8B,aAAa,GAAGD,cAAc,EACjDl8B,IACF,CAAC;MACD,IAAMo8B,cAAc,GAAG7S,GAAG,CAACxC,MAAM,CAAC7Y,MAAM,CACtC,UAAC8O,GAAG,EAAE1d,KAAK,EAAA;EAAA,MAAA,OAAK0d,GAAG,GAAG1d,KAAK,CAACqiB,aAAa;EAAA,IAAA,CAAA,EACzC,CACF,CAAC;EACD;EACA,IAAA,IAAIriB,KAAK,EAAE;EACT,MAAA,IAAIU,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAACmmC,QAAQ,EAAE;UAC1C16B,KAAK,CAACqiB,aAAa,EAAE;EACvB,MAAA;EACA,MAAA,IAAI,CAAC4U,kBAAkB,CAACv2B,IAAI,CAAC,EAAE;EAC7B,QAAA,IAAM7D,KAAK,GAAGm7B,WAAW,CACvBV,WAAW,EACXwF,cAAc,EACdlG,cAAc,CAACl2B,IAAI,CAAC,EACpBA,IAAI,CAAC+7B,QACP,CAAC;EACD,QAAA,IAAI5/B,KAAK,EAAE;YACT,OAAO;cACL+9B,MAAM,EAAEpC,kBAAkB,CAACI,YAAY;cACvC9wB,KAAK,EAAE+wB,gBAAgB,CAACC,IAAI;EAC5BxB,YAAAA,WAAW,EAAXA,WAAW;EACXC,YAAAA,UAAU,EAAEuF;aACb;EACH,QAAA;EACF,MAAA;EACF,IAAA;EACA;EACA;MACA,IAAMxC,WAAW,GAAG,IAAI,CAACc,oBAAoB,CAAC16B,IAAI,EAAEg8B,iBAAiB,CAAC;EACtE;EACA,IAAA,IAAIpF,WAAW,EAAE;QACfgD,WAAW,CAAChD,WAAW,GAAGA,WAAW;QACrCgD,WAAW,CAAC/C,UAAU,GAAGuF,cAAc;EACzC,IAAA;EACA,IAAA,OAAOxC,WAAW;IACpB,CAAC;IAAA3kC,MAAA,CAEOylC,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1B16B,IAAe,EACfs6B,UAAqC,EACvB;EACd,IAAA,IAAM/Q,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAI+Q,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAKjhC,SAAS,EAAE;QACnDihC,UAAU,GAAG/Q,GAAG,CAAC6D,SAAS;EAC5B,IAAA;MACA,IAAM9tB,KAAK,GAAG,IAAI,CAACiqB,GAAG,CAACxC,MAAM,CAACuT,UAAU,CAAC;EACzC,IAAA,IAAIh7B,KAAK,EAAE;QAAA,IAAA+8B,WAAA,EAAAC,cAAA;EACT,MAAA,IAAMC,YAAY,GAAGv8B,IAAI,CAAC4gB,OAAO;QACjCthB,KAAK,CAACsiB,SAAS,EAAE;EACjB,MAAA,IAAI2a,YAAY,KAAK1oC,YAAY,CAAC47B,mBAAmB,EAAE;UACrDnwB,KAAK,CAACqiB,aAAa,EAAE;EACvB,MAAA;EACA;QACA,IAAIuR,SAAS,GAAG,EAAE;EAClB,MAAA,IAAQnM,MAAM,GAA4CwC,GAAG,CAArDxC,MAAM;UAAEqG,SAAS,GAAiC7D,GAAG,CAA7C6D,SAAS;UAAEpG,YAAY,GAAmBuC,GAAG,CAAlCvC,YAAY;UAAEC,YAAY,GAAKsC,GAAG,CAApBtC,YAAY;QACrD,IAAI,CAACsC,GAAG,CAACmB,gBAAgB,IAAI,CAACnB,GAAG,CAACrJ,MAAM,CAACsc,0BAA0B,EAAE;EACnEjT,QAAAA,GAAG,CAAC6D,SAAS,GAAG,EAAE;EACpB,MAAA;QACA,IAAMqP,aAAa,GAAA,CAAAJ,WAAA,GAAGr8B,IAAI,CAAC1B,IAAI,KAAA,IAAA,GAAA,MAAA,GAAT+9B,WAAA,CAAWhkC,IAAI;EACrC;EACA,MAAA,IAAMqkC,iBAAiB,GACpBD,aAAa,KAAKroC,iBAAiB,CAACE,KAAK,IACxCioC,YAAY,KAAK1oC,YAAY,CAACimC,kBAAkB,IACjD95B,IAAI,CAAC28B,gBAAgB,KAAK,OAAO,KAC/BJ,YAAY,KAAK1oC,YAAY,CAAC27B,sBAAsB,IACnD+M,YAAY,KAAK1oC,YAAY,CAAC47B,mBAAmB,CAAE;QACzD,IAAMmN,uBAAuB,GAC3BF,iBAAiB,IACjB3V,MAAM,CAAC1sB,IAAI,CAAC,UAAAyE,IAAA,EAAA;EAAA,QAAA,IAAG2d,UAAU,GAAA3d,IAAA,CAAV2d,UAAU;EAAA,QAAA,OAAOnd,KAAK,CAACmd,UAAU,KAAKA,UAAU;QAAA,CAAA,CAAC;EAClE;EACA,MAAA,IAAMogB,iBAAiB,GACrB78B,IAAI,CAAC28B,gBAAgB,KAAK,OAAO,KAChCJ,YAAY,KAAK1oC,YAAY,CAAC27B,sBAAsB,IACnD+M,YAAY,KAAK1oC,YAAY,CAAC47B,mBAAmB,CAAC;QACtD,IAAMqN,uBAAuB,GAC3BD,iBAAiB,IACjB9V,MAAM,CAAC1sB,IAAI,CACT,UAAAg2B,KAAA,EAAA;EAAA,QAAA,IAAG/W,QAAQ,GAAA+W,KAAA,CAAR/W,QAAQ;YAAEmD,UAAU,GAAA4T,KAAA,CAAV5T,UAAU;UAAA,OACrBnd,KAAK,CAACga,QAAQ,KAAKA,QAAQ,IAAIha,KAAK,CAACmd,UAAU,KAAKA,UAAU;EAAA,MAAA,CAClE,CAAC;QACH,IAAAsgB,KAAA,GAAA,CAAAT,cAAA,GACEt8B,IAAI,CAAClH,OAAO,KAAA,IAAA,GAAAwjC,cAAA,GAAI,EAAE;UADNU,iBAAiB,GAAAD,KAAA,CAAvB1kC,IAAI;UAA8B4kC,oBAAoB,GAAAF,KAAA,CAA7B9f,OAAO;QACnB,IAAAsI,KAAA,GAAA,SAAAA,KAAAA,GACc;YACjC,IAAMQ,SAAS,GAAG,CAAC1qB,CAAC,GAAG+xB,SAAS,IAAIrG,MAAM,CAAC5sB,MAAM;YACjD,IACE4rB,SAAS,KAAKqH,SAAS,IACvBrH,SAAS,IAAIiB,YAAY,IACzBjB,SAAS,IAAIkB,YAAY,IACzBF,MAAM,CAAChB,SAAS,CAAC,CAACnE,SAAS,KAAK,CAAC,EACjC;cAAA,IAAAsb,kBAAA,EAAAC,qBAAA;EACA,YAAA,IAAMC,cAAc,GAAGrW,MAAM,CAAChB,SAAS,CAAC;EACxC;EACA,YAAA,IACEwW,YAAY,KAAK1oC,YAAY,CAACmmC,QAAQ,IACtCyC,aAAa,KAAKroC,iBAAiB,CAACC,IAAI,IACxC2L,IAAI,CAAC1B,IAAI,EACT;EACA,cAAA,IAAMi0B,YAAY,GAAGxL,MAAM,CAAChB,SAAS,CAAC,CAACnF,OAAO;EAC9C,cAAA,IAAI2R,YAAY,EAAE;EAChB,gBAAA,IAAM8K,aAAa,GAAGvI,iBAAiB,CACrC90B,IAAI,CAAC1B,IAAI,EACTi0B,YAAY,CAAC8B,SAAS,EACtBr0B,IAAI,CAAC1B,IAAI,CAAC9B,KACZ,CAAC;EACD,gBAAA,IAAI6gC,aAAa,IAAA,IAAA,IAAbA,aAAa,CAAEh9B,GAAG,EAAE;EAAA,kBAAA,OAAA,CAAA,CAAA;EAExB,gBAAA;EACF,cAAA;cACF,CAAC,MAAM,IACJ28B,iBAAiB,KAAKjpC,mBAAmB,CAACG,WAAW,IACpDkpC,cAAc,CAACxa,aAAa,CAACqa,oBAAoB,CAAC,IACnDD,iBAAiB,KAAKjpC,mBAAmB,CAACI,cAAc,IACvDipC,cAAc,CAACta,gBAAgB,CAACma,oBAAoB,CAAE,EACxD;EACA;EAAA,cAAA,OAAA,CAAA,CAAA;EAEF,YAAA,CAAC,MAAM,IACJR,aAAa,KAAKroC,iBAAiB,CAACE,KAAK,IAAA,CAAA4oC,kBAAA,GACxC59B,KAAK,CAACkd,WAAW,KAAA,IAAA,IAAjB0gB,kBAAA,CAAmB7iC,IAAI,CAAC,UAAC4iB,OAAO,EAAA;EAAA,cAAA,OAC9BmgB,cAAc,CAACxa,aAAa,CAAC3F,OAAO,CAAC;EAAA,YAAA,CACvC,CAAC,IACFwf,aAAa,KAAKroC,iBAAiB,CAACG,QAAQ,IAAA,CAAA4oC,qBAAA,GAC3C79B,KAAK,CAACyjB,cAAc,KAAA,IAAA,IAApBoa,qBAAA,CAAsB9iC,IAAI,CAAC,UAAC4iB,OAAO,EAAA;EAAA,cAAA,OACjCmgB,cAAc,CAACta,gBAAgB,CAAC7F,OAAO,CAAC;EAAA,YAAA,CAC1C,CAAE,IACH2f,uBAAuB,IACtBt9B,KAAK,CAACmd,UAAU,KAAK2gB,cAAc,CAAC3gB,UAAW,IAChDqgB,uBAAuB,IACtBx9B,KAAK,CAACga,QAAQ,KAAK8jB,cAAc,CAAC9jB,QAAS,IAC5C,CAACsjB,uBAAuB,IACvBt9B,KAAK,CAACga,QAAQ,KAAK8jB,cAAc,CAAC9jB,QAAS,EAC7C;EACA;EAAA,cAAA,OAAA,CAAA,CAAA;EAEF,YAAA;EACA4Z,YAAAA,SAAS,GAAGnN,SAAS;EAAC,YAAA,OAAA,CAAA,CAAA;EAExB,UAAA;UACF,CAAC;UAAAiN,IAAA;QAxDD,KAAK,IAAI33B,CAAC,GAAG0rB,MAAM,CAAC5sB,MAAM,EAAEkB,CAAC,EAAE,GAAA;EAAA23B,QAAAA,IAAA,GAAAzN,KAAA,EAAA;EAAA,QAAA,IAAAyN,IAAA,KAAA,CAAA,EAuBrB;EAAS,QAAA,IAAAA,IAAA,KAAA,CAAA,EA+Bf;EAAM,MAAA;QAGV,IAAIE,SAAS,GAAG,EAAE,IAAI3J,GAAG,CAAC6D,SAAS,KAAK8F,SAAS,EAAE;UACjDlzB,IAAI,CAACy6B,UAAU,GAAG,IAAI;UACtB,IAAI,CAAChC,aAAa,GAAG,CAAC;UACtB,OAAO;YACLyB,MAAM,EAAEpC,kBAAkB,CAACE,yBAAyB;YACpD5wB,KAAK,EAAE+wB,gBAAgB,CAACC,IAAI;EAC5BlL,UAAAA,aAAa,EAAEgG;WAChB;EACH,MAAA;EACF,IAAA;EACA;EACA;MACA,OAAO;QACLgH,MAAM,EAAEpC,kBAAkB,CAACE,yBAAyB;QACpD5wB,KAAK,EAAE+wB,gBAAgB,CAACE;OACzB;IACH,CAAC;IAAApjC,MAAA,CAEM2jC,UAAU,GAAjB,SAAOA,UAAUA,CAACxJ,KAAmB,EAAEpvB,IAAe,EAAE;EAAA,IAAA,IAAAs9B,iBAAA;MACtD,QAAA,CAAAA,iBAAA,GAAQt9B,IAAI,CAAC45B,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB0D,iBAAA,CAAkBpD,MAAM;QAC9B,KAAKpC,kBAAkB,CAACC,SAAS;EAC/B,QAAA;QACF,KAAKD,kBAAkB,CAACE,yBAAyB;EAC/C,QAAA,IAAI,CAACuF,yBAAyB,CAACv9B,IAAI,CAAC;EACpC,QAAA,IACE,CAACA,IAAI,CAAC45B,WAAW,CAAC4D,QAAQ,IAC1Bx9B,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAACmmC,QAAQ,EACtC;YACAh6B,IAAI,CAACuvB,KAAK,GAAG,IAAI;EACnB,QAAA,CAAC,MAAM,IAAI,+BAA+B,CAAC5a,IAAI,CAAC3U,IAAI,CAAC7N,KAAK,CAACsrC,OAAO,CAAC,EAAE;EACnE,UAAA,IAAI,CAAC7lC,IAAI,CAAA,4BAAA,GACqBoI,IAAI,CAAC28B,gBAAgB,0EACnD,CAAC;EACD,UAAA,IAAI,CAACpT,GAAG,CAACmU,iBAAiB,EAAE;EAC9B,QAAA;EACA,QAAA;EAIJ;MAEA,IAAI19B,IAAI,CAACuvB,KAAK,EAAE;EACd,MAAA,IAAI,CAAChG,GAAG,CAACwP,QAAQ,EAAE;EACnB,MAAA;EACF,IAAA;IACF,CAAC;EAAA9jC,EAAAA,MAAA,CAEOsoC,yBAAyB,GAAjC,SAAQA,yBAAyBA,CAACv9B,IAAe,EAAE;EACjD,IAAA,IAAMupB,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAMqQ,WAAW,GAAG55B,IAAI,CAAC45B,WAAW;MACpC,IAAI,CAACA,WAAW,EAAE;EAChB,MAAA;EACF,IAAA;EACA,IAAA,IAAQxyB,KAAK,GAAKwyB,WAAW,CAArBxyB,KAAK;EACb,IAAA,IAAM8lB,aAAa,GAAG0M,WAAW,CAAC1M,aAAa;EAE/C,IAAA,QAAQ9lB,KAAK;QACX,KAAK+wB,gBAAgB,CAACC,IAAI;EACxB,QAAA,IAAI,CAACuF,WAAW,CAAC39B,IAAI,EAAEktB,aAAa,CAAC;EACrC,QAAA;QACF,KAAKiL,gBAAgB,CAACG,6BAA6B;EAAE,QAAA;YACnD,IAAMgC,UAAU,GAAG,IAAI,CAACtB,oBAAoB,CAACh5B,IAAI,CAAC1B,IAAI,CAAC;EACvD,UAAA,IAAMgB,KAAK,GAAGiqB,GAAG,CAACxC,MAAM,CAACuT,UAAU,CAAC;YACpC,IAAMsD,mBAAmB,GAAIt+B,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAwB6iB,KAAK,CAC7D,YAAY,CACb;YACDyX,WAAW,CAACiE,SAAS,GAAGD,mBAAmB;YAC3C,IAAIA,mBAAmB,KAAK,MAAM,EAAE;cAClC,IAAI,CAAChmC,IAAI,CAAA,mDAAoD,CAAC;YAChE,CAAC,MAAM,IAAIgmC,mBAAmB,EAAE;EAC9BrU,YAAAA,GAAG,CAACuU,YAAY,GACd3d,UAAU,CAACA,UAAU,CAAC5lB,OAAO,CAACqjC,mBAAmB,CAAC,GAAG,CAAC,CAAC;cACzDhE,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC3B,YAAA,IAAI,CAAC5lC,IAAI,CAAA,0CAAA,GACmC2xB,GAAG,CAACuU,YAAY,gBAC5D,CAAC;EACD,YAAA;EACF,UAAA;EACA;EACF,QAAA;EACA;QACA,KAAK3F,gBAAgB,CAACI,4BAA4B;EAAE,QAAA;EAClD,UAAA,IAAMv2B,QAAQ,GAAGhC,IAAI,CAACgL,WAAW;EACjC,UAAA,IAAIhJ,QAAQ,EAAE;EACZ;EACA,YAAA,IAAM+kB,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;EAC9B,YAAA,IAAMgX,mBAAmB,GAAGhX,MAAM,CAAC5sB,MAAM;EACzC,YAAA,KAAK,IAAIkB,CAAC,GAAG0iC,mBAAmB,EAAE1iC,CAAC,EAAE,GAAI;gBACvC,IAAI,IAAI,CAAC69B,aAAa,CAACnS,MAAM,CAAC1rB,CAAC,CAAC,EAAE2G,QAAQ,CAAC,EAAE;kBAAA,IAAAg8B,qBAAA,EAAAC,WAAA;kBAC3C,IAAI,CAACjpC,GAAG,CAAA,4BAAA,GACuBqG,CAAC,UAAK0rB,MAAM,CAAC1rB,CAAC,CAAC,CAACmiB,OAAO,GAAA,wBAAA,IAAA,CAAAwgB,qBAAA,GAAwBjX,MAAM,CAAC1rB,CAAC,CAAC,CAACmhB,WAAW,KAAA,IAAA,GAAA,MAAA,GAArBwhB,qBAAA,CAAuB9rB,IAAI,CAAC,GAAG,CAAC,CAAA,GAAA,MAAA,IAAA,CAAA+rB,WAAA,GAAMj+B,IAAI,CAAC1B,IAAI,KAAA,IAAA,GAAA,MAAA,GAAT2/B,WAAA,CAAW5lC,IAAI,CAAA,GAAA,aAAA,GAAcmD,UAAU,CAACwG,QAAQ,CAACjB,KAAK,IAAI,EAAE,CAChL,CAAC;EACDgmB,gBAAAA,MAAM,CAAC1rB,CAAC,CAAC,CAACsmB,aAAa,EAAE;EACzBoF,gBAAAA,MAAM,CAAC1rB,CAAC,CAAC,CAACumB,SAAS,EAAE;kBACrB,IAAI,CAAC5sB,GAAG,CAAA,iBAAA,GAAmBqG,CAAC,yBAAoB2E,IAAI,CAAC7N,KAAK,GAAA,GAAG,CAAC;EAC9D,gBAAA,IAAI,CAACo3B,GAAG,CAAC+I,WAAW,CAACj3B,CAAC,CAAC;EACzB,cAAA;EACF,YAAA;EACA,YAAA,IAAMiD,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;cACtB,IAAI,IAAI,CAACirB,GAAG,CAACxC,MAAM,CAAC5sB,MAAM,GAAG4jC,mBAAmB,EAAE;gBAChDnE,WAAW,CAAC4D,QAAQ,GAAG,IAAI;cAC7B,CAAC,MAAM,IAAIl/B,IAAI,IAAIA,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,EAAE;EACvD;EACA,cAAA,IAAM6pC,YAAY,GAAG5/B,IAAI,CAAC0M,WAAW;gBACrC,IAAIkzB,YAAY,IAAI,CAACl8B,QAAQ,CAAC0hB,OAAO,CAACwa,YAAY,CAAC,EAAE;kBACnDtE,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,cAAA;EACF,YAAA;EACF,UAAA;EACA,UAAA;EACF,QAAA;EACF;EACA;EACA,IAAA,IAAI,CAAC5D,WAAW,CAAC4D,QAAQ,EAAE;EACzB,MAAA,IAAI,CAACG,WAAW,CAAC39B,IAAI,EAAEktB,aAAa,CAAC;EACvC,IAAA;IACF,CAAC;IAAAj4B,MAAA,CAEO0oC,WAAW,GAAnB,SAAQA,WAAWA,CAAC39B,IAAe,EAAEs6B,UAA8B,EAAE;EACnE,IAAA,IAAIA,UAAU,KAAKjhC,SAAS,IAAI2G,IAAI,CAAC45B,WAAW,EAAE;QAChD,IAAI,CAAChiC,IAAI,CAAA,qBAAA,GAAuB0iC,UAAU,eAAUt6B,IAAI,CAAC4gB,OAAS,CAAC;EACnE,MAAA,IAAI,CAAC2I,GAAG,CAAC2D,aAAa,GAAGoN,UAAU;EACnCt6B,MAAAA,IAAI,CAAC45B,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAChC;QACA,IAAI,CAACjU,GAAG,CAACiD,aAAa,GAAG,IAAI,CAACjD,GAAG,CAAC2D,aAAa;EAC/C,MAAA,IACEltB,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC27B,sBAAsB,IACpDxvB,IAAI,CAACwb,QAAQ,IACbxb,IAAI,CAAC28B,gBAAgB,KAAK,YAAY,EACtC;EACA,QAAA,IAAMn1B,KAAK,GAAG+T,oBAAoB,CAACvb,IAAI,CAACwb,QAAQ,CAAC;EACjD,QAAA,IAAMuL,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;UAC9B,KAAK,IAAI1rB,CAAC,GAAG0rB,MAAM,CAAC5sB,MAAM,EAAEkB,CAAC,EAAE,GAAI;YACjC,IAAI0rB,MAAM,CAAC1rB,CAAC,CAAC,CAAI2E,IAAI,CAAC28B,gBAAgB,GAAA,OAAA,CAAQ,KAAKn1B,KAAK,EAAE;cACxD,IAAI,CAACxS,GAAG,CAAA,iBAAA,GACYqG,CAAC,GAAA,OAAA,GAAQ2E,IAAI,CAAC4gB,OAAO,GAAA,MAAA,GAAMpZ,KAAK,GAAA,mBACpD,CAAC;EACD,YAAA,IAAI,CAAC+hB,GAAG,CAAC+I,WAAW,CAACj3B,CAAC,CAAC;EACzB,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;EAAA,EAAA,OAAAm9B,eAAA;EAAA,CAAA,CA5hBOjhC,MAAM,CAAA;EA+hBT,SAASwiC,0BAA0BA,CAACyD,QAAkB,EAAgB;EAC3E,EAAA,IAAM5D,WAAyB,GAAG;MAChCM,MAAM,EAAEpC,kBAAkB,CAACC,SAAS;MACpC3wB,KAAK,EAAE+wB,gBAAgB,CAACC;KACzB;EACD,EAAA,IAAIoF,QAAQ,EAAE;MACZ5D,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,EAAA;EACA,EAAA,OAAO5D,WAAW;EACpB;;ECzkBA,IAAkBuE,aAAa,GAAA;IAAAC,UAAA,EAAA,YAAA;IAAAC,SAAA,EAAA,WAAA;IAAAC,OAAA,EAAA,SAAA;IAAAC,EAAA,EAAA;EAAA,CAAA;EAO/B,IAAaC,eAAe,gBAAA,YAAA;IAiB1B,SAAAA,eAAAA,CAAYjV,GAAQ,EAAE;EAAA,IAAA,IAAA,CAhBdkV,eAAe,GACrBzkC,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;EAAA,IAAA,IAAA,CACbC,gBAAgB,GACtB3kC,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;EAAA,IAAA,IAAA,CACbrK,SAAS,GACfr6B,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;EAAA,IAAA,IAAA,CACbE,UAAU,GAIP5kC,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;MAAA,IAAA,CAEtBG,aAAa,GAAW,GAAG;EAAA,IAAA,IAAA,CAC3BtV,GAAG,GAAA,MAAA;MAAA,IAAA,CACHuV,OAAO,GAAY,KAAK;MAG9B,IAAI,CAACvV,GAAG,GAAGA,GAAG;MAEd,IAAI,CAACwV,kBAAkB,EAAE;EAC3B,EAAA;EAAC,EAAA,IAAA9pC,MAAA,GAAAupC,eAAA,CAAAtpC,SAAA;EAAAD,EAAAA,MAAA,CAEO8pC,kBAAkB,GAA1B,SAAQA,kBAAkBA,GAAG;EAC3B,IAAA,IAAQxV,GAAG,GAAK,IAAI,CAAZA,GAAG;EACX,IAAA,IAAIA,GAAG,EAAE;EACPA,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACkrC,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3D1V,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDhF,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs6B,WAAW,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;EACrD,IAAA;IACF,CAAC;EAAAp5B,EAAAA,MAAA,CAEOiqC,oBAAoB,GAA5B,SAAQA,oBAAoBA,GAAG;EAC7B,IAAA,IAAQ3V,GAAG,GAAK,IAAI,CAAZA,GAAG;EACX,IAAA,IAAIA,GAAG,EAAE;EACPA,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACkrC,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5D1V,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDhF,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs6B,WAAW,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAAC;EACtD,IAAA;IACF,CAAC;EAAAp5B,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC+nC,oBAAoB,EAAE;EAC3B;EACA,IAAA,IAAI,CAAC3V,GAAG;EACN;EACA,IAAA,IAAI,CAAC8K,SAAS;EACd;EACA,IAAA,IAAI,CAACoK,eAAe;EACpB;EACA,IAAA,IAAI,CAACE,gBAAgB,GACrB,IAAI,CAACC,UAAU,GACb,IAAI;EACV,EAAA;;EAEA;EACF;EACA;EACA;IAHE3pC,MAAA,CAIOkqC,eAAe,GAAtB,SAAOA,eAAeA,CACpBC,QAAgB,EAChBC,SAA4B,EACC;EAC7B,IAAA,IAAMC,WAAW,GAAG,IAAI,CAACb,eAAe,CAACY,SAAS,CAAC;EACnD,IAAA,IAAIC,WAAW,EAAE;QACf,KAAK,IAAIjkC,CAAC,GAAGikC,WAAW,CAACnlC,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACtC,QAAA,IAAMkkC,UAAU,GAAGD,WAAW,CAACjkC,CAAC,CAAC;UACjC,IAAI,CAACkkC,UAAU,EAAS;EACtB,UAAA;EACF,QAAA;EACA,QAAA,IACEA,UAAU,CAAC/iC,KAAK,IAAI4iC,QAAQ,IAC5BA,QAAQ,IAAIG,UAAU,CAAC7iC,GAAG,IAC1B6iC,UAAU,CAACrjC,MAAM,EACjB;EACA,UAAA,OAAOqjC,UAAU;EACnB,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI,CAACC,eAAe,CAACJ,QAAQ,EAAEC,SAAS,CAAC;EAClD,EAAA;;EAEA;EACF;EACA;EACA;EACA;IAJEpqC,MAAA,CAKOuqC,eAAe,GAAtB,SAAOA,eAAeA,CACpBJ,QAAgB,EAChBC,SAA4B,EACN;MACtB,OAAO,IAAI,CAACI,YAAY,CAACL,QAAQ,EAAEC,SAAS,EAAE,IAAI,CAAC;IACrD,CAAC;IAAApqC,MAAA,CAEMwqC,YAAY,GAAnB,SAAOA,YAAYA,CACjBL,QAAgB,EAChBC,SAA4B,EAC5BK,QAAkB,EACI;EACtB,IAAA,IAAQrL,SAAS,GAAK,IAAI,CAAlBA,SAAS;EACjB,IAAA,IAAMr7B,IAAI,GAAGgB,MAAM,CAAChB,IAAI,CAACq7B,SAAS,CAAC;MACnC,KAAK,IAAIh5B,CAAC,GAAGrC,IAAI,CAACmB,MAAM,EAAEkB,CAAC,EAAE,GAAI;QAC/B,IAAMskC,cAAc,GAAGtL,SAAS,CAACr7B,IAAI,CAACqC,CAAC,CAAC,CAAC;EACzC,MAAA,IACE,CAAAskC,cAAc,IAAA,IAAA,GAAA,MAAA,GAAdA,cAAc,CAAEC,IAAI,CAACvnC,IAAI,MAAKgnC,SAAS,KACtC,CAACK,QAAQ,IAAIC,cAAc,CAACD,QAAQ,CAAC,EACtC;EACA,QAAA,IAAMphC,IAAI,GAAGqhC,cAAc,CAACC,IAAI;UAChC,IAAIthC,IAAI,CAAC9B,KAAK,IAAI4iC,QAAQ,IAAIA,QAAQ,IAAI9gC,IAAI,CAAC5B,GAAG,EAAE;EAClD,UAAA,OAAO4B,IAAI;EACb,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI;EACb,EAAA;;EAEA;EACF;EACA;EACA;EACA;EAJErJ,EAAAA,MAAA,CAKO4qC,sBAAsB,GAA7B,SAAOA,sBAAsBA,CAC3BC,gBAAkC,EAClCC,SAAqB,EACrBC,YAA+B,EAC/BC,YAA0B,EAC1BC,eAAyB,EACzB;EAAA,IAAA,IAAAxhC,KAAA,GAAA,IAAA;MACA,IAAI,IAAI,CAACkgC,UAAU,EAAE;EACnB,MAAA,IAAI,CAACA,UAAU,CAACkB,gBAAgB,CAAC,GAAGC,SAAS;EAC/C,IAAA;EACA;EACA;EACA,IAAA,IAAMI,cAAc,GAAG,CAAAF,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAEl9B,QAAQ,CAACxE,EAAE,KAAI,EAAE;EACtDvE,IAAAA,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACq7B,SAAS,CAAC,CAACp7B,OAAO,CAAC,UAAC5B,GAAG,EAAK;EAC3C,MAAA,IAAMsoC,cAAc,GAAGjhC,KAAI,CAAC21B,SAAS,CAACh9B,GAAG,CAAC;QAC1C,IAAI,CAACsoC,cAAc,EAAE;EACnB,QAAA;EACF,MAAA;EACA,MAAA,IAAIQ,cAAc,IAAIR,cAAc,CAACC,IAAI,CAACrhC,EAAE,EAAE;EAC5C,QAAA;EACF,MAAA;EACA,MAAA,IACE,CAACohC,cAAc,CAACD,QAAQ,KACvB,CAACC,cAAc,CAACzjC,MAAM,IAAIgkC,eAAe,CAAC,EAC3C;EACA,QAAA,IAAIP,cAAc,CAACC,IAAI,CAACvnC,IAAI,KAAK2nC,YAAY,EAAE;EAC7CthC,UAAAA,KAAI,CAAC0hC,cAAc,CAACT,cAAc,CAACC,IAAI,CAAC;EAC1C,QAAA;EACA,QAAA;EACF,MAAA;EACA,MAAA,IAAMS,MAAM,GAAGV,cAAc,CAACja,KAAK,CAACoa,gBAAgB,CAAC;QACrD,IAAI,CAACO,MAAM,EAAE;EACX,QAAA;EACF,MAAA;EACA,MAAA,IAAIA,MAAM,CAACC,IAAI,CAACnmC,MAAM,KAAK,CAAC,EAAE;EAC5BuE,QAAAA,KAAI,CAAC0hC,cAAc,CAACT,cAAc,CAACC,IAAI,CAAC;EACxC,QAAA;EACF,MAAA;EACAS,MAAAA,MAAM,CAACC,IAAI,CAACjmC,IAAI,CAAC,UAACimC,IAAuB,EAAK;EAC5C,QAAA,IAAMC,aAAa,GAAG,CAAC7hC,KAAI,CAAC8hC,cAAc,CACxCF,IAAI,CAAC9gC,QAAQ,EACb8gC,IAAI,CAAC7gC,MAAM,EACXsgC,SACF,CAAC;EACD,QAAA,IAAIQ,aAAa,EAAE;EACjB;EACA7hC,UAAAA,KAAI,CAAC0hC,cAAc,CAACT,cAAc,CAACC,IAAI,CAAC;EAC1C,QAAA;EACA,QAAA,OAAOW,aAAa;EACtB,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,CAAC;EACJ,EAAA;;EAEA;EACF;EACA;EACA;EAHEtrC,EAAAA,MAAA,CAIOwrC,sBAAsB,GAA7B,SAAOA,sBAAsBA,CAACzgC,IAAsB,EAAE;EAAA,IAAA,IAAA4C,MAAA,GAAA,IAAA;EACpD,IAAA,IAAMg8B,UAAU,GAAG,IAAI,CAACA,UAAU;MAClC,IAAI,CAACA,UAAU,IAAI5+B,IAAI,CAAC1B,IAAI,CAACC,EAAE,KAAK,aAAa,EAAE;EACjD,MAAA;EACF,IAAA;EAEA,IAAA,IAAMD,IAAI,GAAG0B,IAAI,CAAC1B,IAAqB;EACvC,IAAA,IAAMoiC,OAAO,GAAGC,cAAc,CAACriC,IAAI,CAAC;EACpC,IAAA,IAAMqhC,cAAc,GAAG,IAAI,CAACtL,SAAS,CAACqM,OAAO,CAAC;MAC9C,IAAI,CAACf,cAAc,IAAKA,cAAc,CAACD,QAAQ,IAAIphC,IAAI,CAAC+B,GAAI,EAAE;EAC5D,MAAA;EACF,IAAA;EACA,IAAA,IAAMugC,UAAU,GAAG,CAACtiC,IAAI,CAAChB,MAAM;MAC/BtD,MAAM,CAAChB,IAAI,CAAC4lC,UAAU,CAAC,CAAC3lC,OAAO,CAAC,UAAC6mC,gBAAkC,EAAK;EACtE,MAAA,IAAMe,UAAU,GAAGviC,IAAI,CAACR,iBAAiB,CAACgiC,gBAAgB,CAAC;QAC3D,IAAI,CAACe,UAAU,EAAE;EACf,QAAA;EACF,MAAA;EACA,MAAA,IAAMd,SAAS,GAAGnB,UAAU,CAACkB,gBAAgB,CAAe;QAC5D,IAAMx+B,OAAO,GAAGs/B,UAAU,IAAIC,UAAU,CAACv/B,OAAO,KAAK,IAAI;EACzDq+B,MAAAA,cAAc,CAACja,KAAK,CAACoa,gBAAgB,CAAC,GAAGl9B,MAAI,CAACk+B,gBAAgB,CAC5DxiC,IAAI,EACJ0B,IAAI,CAACmhB,IAAI,EACT7f,OAAO,EACPy+B,SACF,CAAC;EACH,IAAA,CAAC,CAAC;MACFJ,cAAc,CAACzjC,MAAM,GAAG,IAAI;MAC5B,IAAIlC,MAAM,CAAChB,IAAI,CAAC2mC,cAAc,CAACja,KAAK,CAAC,CAACvrB,MAAM,EAAE;QAC5CwlC,cAAc,CAACD,QAAQ,GAAG,IAAI;EAC9B,MAAA,IAAMt/B,OAAO,GAAIu/B,cAAc,CAACC,IAAI,CAACx/B,OAAO,GAC1C9B,IAAI,CAAC8B,OAAO,IAAIu/B,cAAc,CAACC,IAAI,CAACx/B,OAAQ;EAC9C,MAAA,IAAIA,OAAO,EAAE;UACX,IAAI,CAACu+B,gBAAgB,CAACgB,cAAc,CAACC,IAAI,CAACvnC,IAAI,CAAC,GAAGsnC,cAAc;EAClE,MAAA;EACA,MAAA,IAAI,CAACoB,SAAS,CAACpB,cAAc,CAAC,EAAE;EAC9B;EACA,QAAA,IAAI,CAACqB,WAAW,CAAC1iC,IAAI,CAACC,EAAE,GAAG,CAAC,EAAED,IAAI,CAACjG,IAAI,CAAC;EAC1C,MAAA;EACF,IAAA,CAAC,MAAM;EACL;EACA,MAAA,IAAI,CAAC+nC,cAAc,CAACT,cAAc,CAACC,IAAI,CAAC;EAC1C,IAAA;IACF,CAAC;IAAA3qC,MAAA,CAEO+rC,WAAW,GAAnB,SAAQA,WAAWA,CAACC,QAAgB,EAAE5B,SAA4B,EAAE;EAClE,IAAA,IAAMC,WAAW,GAAG,IAAI,CAACb,eAAe,CAACY,SAAS,CAAC;MACnD,IAAI,CAACC,WAAW,EAAE;EAChB,MAAA;EACF,IAAA;MACA,IAAI,CAACb,eAAe,CAACY,SAAS,CAAC,GAAG6B,WAAW,CAC3C5B,WAAW,EACX,UAACne,IAAI,EAAA;EAAA,MAAA,OAAKA,IAAI,CAACpe,QAAQ,CAACxE,EAAE,IAAI0iC,QAAQ;EAAA,IAAA,CACxC,CAAC;IACH,CAAC;IAAAhsC,MAAA,CAEMksC,YAAY,GAAnB,SAAOA,YAAYA,CAAC7iC,IAAmB,EAAE8iC,KAAY,EAAE;EACrD,IAAA,IAAMV,OAAO,GAAGC,cAAc,CAACriC,IAAI,CAAC;EACpC,IAAA,IAAIqhC,cAAc,GAAG,IAAI,CAACtL,SAAS,CAACqM,OAAO,CAAC;EAC5C,IAAA,IAAI,CAACf,cAAc,IAAIyB,KAAK,EAAE;EAC5BzB,MAAAA,cAAc,GAAG,IAAI,CAACtL,SAAS,CAACqM,OAAO,CAAC,GAAG;EACzCd,QAAAA,IAAI,EAAEthC,IAAI;EACV+iC,QAAAA,WAAW,EAAE,IAAI;EACjBnlC,QAAAA,MAAM,EAAE,IAAI;EACZwjC,QAAAA,QAAQ,EAAE,KAAK;EACfha,QAAAA,KAAK,EAAE1rB,MAAM,CAAC0kC,MAAM,CAAC,IAAI;SAC1B;QACD,IAAIpgC,IAAI,CAAC+B,GAAG,EAAE;UACZ,IAAI,CAACy+B,OAAO,GAAG,IAAI;EACrB,MAAA;EACF,IAAA;EACA,IAAA,IAAIa,cAAc,EAAE;QAClBA,cAAc,CAACzjC,MAAM,GAAG,IAAI;QAC5ByjC,cAAc,CAACD,QAAQ,GAAG,IAAI;EAChC,IAAA;IACF,CAAC;EAAAzqC,EAAAA,MAAA,CAEO6rC,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtB/9B,QAAkB,EAClBoe,IAAiB,EACjB7f,OAAgB,EAChBy+B,SAAqB,EACE;EACvB,IAAA,IAAML,QAA+B,GAAG;EACtCY,MAAAA,IAAI,EAAE,EAAE;EACRh/B,MAAAA,OAAO,EAAPA;OACD;EACD,IAAA,IAAM9B,QAAQ,GAAGuD,QAAQ,CAACvG,KAAK;EAC/B,IAAA,IAAMiD,MAAM,GAAGsD,QAAQ,CAACrG,GAAG;EAC3B,IAAA,IAAMqD,SAAS,GAAGgD,QAAQ,CAAChD,SAAS,IAAIN,MAAM;EAC9C,IAAA,IAAMK,WAAW,GAAGiD,QAAQ,CAACjD,WAAW,IAAIN,QAAQ;EACpD,IAAA,KAAK,IAAInE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0kC,SAAS,CAAC5lC,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACzC,IAAMimC,SAAS,GAAGvB,SAAS,CAACvjC,KAAK,CAACnB,CAAC,CAAC,GAAG,IAAI,CAACwjC,aAAa;QACzD,IAAM0C,OAAO,GAAGxB,SAAS,CAACrjC,GAAG,CAACrB,CAAC,CAAC,GAAG,IAAI,CAACwjC,aAAa;EACrD,MAAA,IAAI/+B,WAAW,IAAIwhC,SAAS,IAAIvhC,SAAS,IAAIwhC,OAAO,EAAE;EACpD;EACA;EACA7B,QAAAA,QAAQ,CAACY,IAAI,CAACt8B,IAAI,CAAC;EACjBxE,UAAAA,QAAQ,EAAEtM,IAAI,CAACsD,GAAG,CAACgJ,QAAQ,EAAEugC,SAAS,CAACvjC,KAAK,CAACnB,CAAC,CAAC,CAAC;EAChDoE,UAAAA,MAAM,EAAEvM,IAAI,CAAC+D,GAAG,CAACwI,MAAM,EAAEsgC,SAAS,CAACrjC,GAAG,CAACrB,CAAC,CAAC;EAC3C,SAAC,CAAC;EACF,QAAA;QACF,CAAC,MAAM,IAAImE,QAAQ,GAAG+hC,OAAO,IAAI9hC,MAAM,GAAG6hC,SAAS,EAAE;EACnD,QAAA,IAAM9kC,KAAK,GAAGtJ,IAAI,CAACsD,GAAG,CAACgJ,QAAQ,EAAEugC,SAAS,CAACvjC,KAAK,CAACnB,CAAC,CAAC,CAAC;EACpD,QAAA,IAAMqB,GAAG,GAAGxJ,IAAI,CAAC+D,GAAG,CAACwI,MAAM,EAAEsgC,SAAS,CAACrjC,GAAG,CAACrB,CAAC,CAAC,CAAC;UAC9C,IAAIqB,GAAG,GAAGF,KAAK,EAAE;YACfkjC,QAAQ,CAACp+B,OAAO,GAAG,IAAI;EACvB;EACA;EACAo+B,UAAAA,QAAQ,CAACY,IAAI,CAACt8B,IAAI,CAAC;EACjBxE,YAAAA,QAAQ,EAAEhD,KAAK;EACfiD,YAAAA,MAAM,EAAE/C;EACV,WAAC,CAAC;EACJ,QAAA;EACF,MAAA,CAAC,MAAM,IAAI+C,MAAM,IAAI6hC,SAAS,EAAE;EAC9B;EACA,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO5B,QAAQ;EACjB,EAAA;;EAEA;EACF;EACA;EAFEzqC,EAAAA,MAAA,CAGOusC,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAAClB,IAAY,EAAwB;MAC5D,IAAImB,YAA6B,GAAG,IAAI;EACxC,IAAA,IAAIC,WAAmB;EACvB,IAAA,IAAIJ,SAAiB;EACrB,IAAA,IAAIC,OAAe;MACnB,IAAII,WAAmB,GAAG,CAAC;EAC3B,IAAA,IAAQ9C,aAAa,GAAgB,IAAI,CAAjCA,aAAa;QAAExK,SAAS,GAAK,IAAI,CAAlBA,SAAS;MAChCr6B,MAAM,CAAChB,IAAI,CAACq7B,SAAS,CAAC,CAACp7B,OAAO,CAAC,UAAC5B,GAAG,EAAK;EACtC,MAAA,IAAMsoC,cAAc,GAAGtL,SAAS,CAACh9B,GAAG,CAAC;QACrC,IAAI,CAACsoC,cAAc,EAAE;EACnB,QAAA;EACF,MAAA;EACA,MAAA,IAAIoB,SAAS,CAACpB,cAAc,CAAC,EAAE;EAC7B2B,QAAAA,SAAS,GAAG3B,cAAc,CAACC,IAAI,CAACpjC,KAAK,GAAGqiC,aAAa;EACrD0C,QAAAA,OAAO,GAAG5B,cAAc,CAACC,IAAI,CAACljC,GAAG,GAAGmiC,aAAa;EACjD,QAAA,IAAIyB,IAAI,IAAIgB,SAAS,IAAIhB,IAAI,IAAIiB,OAAO,EAAE;EACxC;EACAG,UAAAA,WAAW,GAAGxuC,IAAI,CAAC+D,GAAG,CAACqpC,IAAI,GAAGgB,SAAS,EAAEC,OAAO,GAAGjB,IAAI,CAAC;YACxD,IAAIqB,WAAW,IAAID,WAAW,EAAE;cAC9BD,YAAY,GAAG9B,cAAc,CAACC,IAAI;EAClC+B,YAAAA,WAAW,GAAGD,WAAW;EAC3B,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;EACF,IAAA,OAAOD,YAAY;IACrB,CAAC;EAAAxsC,EAAAA,MAAA,CAEM2sC,iBAAiB,GAAxB,SAAOA,iBAAiBA,CAACvpC,IAAuB,EAAW;EACzD,IAAA,IAAMwpC,kBAAkB,GAAG,IAAI,CAAClD,gBAAgB,CAACtmC,IAAI,CAAC;EACtD,IAAA,OACEwpC,kBAAkB,KAAKxoC,SAAS,KAC/BwoC,kBAAkB,CAACnC,QAAQ,IAAIqB,SAAS,CAACc,kBAAkB,CAAC,CAAC;IAElE,CAAC;EAAA5sC,EAAAA,MAAA,CAEM6sC,QAAQ,GAAf,SAAOA,QAAQA,CAAC/+B,QAAkB,EAAiB;EACjD,IAAA,IAAM29B,OAAO,GAAGC,cAAc,CAAC59B,QAAQ,CAAC;EACxC,IAAA,IAAM48B,cAAc,GAAG,IAAI,CAACtL,SAAS,CAACqM,OAAO,CAAC;EAE9C,IAAA,IAAIf,cAAc,EAAE;EAClB,MAAA,IAAI,CAACA,cAAc,CAACD,QAAQ,EAAE;UAC5B,OAAOvB,aAAa,CAACE,SAAS;EAChC,MAAA,CAAC,MAAM,IAAI0C,SAAS,CAACpB,cAAc,CAAC,EAAE;UACpC,OAAOxB,aAAa,CAACG,OAAO;EAC9B,MAAA,CAAC,MAAM;UACL,OAAOH,aAAa,CAACI,EAAE;EACzB,MAAA;EACF,IAAA;MAEA,OAAOJ,aAAa,CAACC,UAAU;IACjC,CAAC;IAAAnpC,MAAA,CAEOurC,cAAc,GAAtB,SAAQA,cAAcA,CACpBhhC,QAAgB,EAChBC,MAAc,EACdsgC,SAAqB,EACZ;EACT,IAAA,IAAIuB,SAAS;EACb,IAAA,IAAIC,OAAO;EACX,IAAA,KAAK,IAAIlmC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0kC,SAAS,CAAC5lC,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACzCimC,SAAS,GAAGvB,SAAS,CAACvjC,KAAK,CAACnB,CAAC,CAAC,GAAG,IAAI,CAACwjC,aAAa;QACnD0C,OAAO,GAAGxB,SAAS,CAACrjC,GAAG,CAACrB,CAAC,CAAC,GAAG,IAAI,CAACwjC,aAAa;EAC/C,MAAA,IAAIr/B,QAAQ,IAAI8hC,SAAS,IAAI7hC,MAAM,IAAI8hC,OAAO,EAAE;EAC9C,QAAA,OAAO,IAAI;EACb,MAAA;QAEA,IAAI9hC,MAAM,IAAI6hC,SAAS,EAAE;EACvB;EACA,QAAA,OAAO,KAAK;EACd,MAAA;EACF,IAAA;EAEA,IAAA,OAAO,KAAK;IACd,CAAC;EAAArsC,EAAAA,MAAA,CAEOg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAAC8T,kBAAkB,EAAE;IAC3B,CAAC;IAAA9sC,MAAA,CAEOo5B,YAAY,GAApB,SAAQA,YAAYA,CAACe,KAAyB,EAAEpvB,IAAoB,EAAE;EACpE;EACA;EACA,IAAA,IAAIA,IAAI,CAAC1B,IAAI,CAACC,EAAE,KAAK,aAAa,IAAIyB,IAAI,CAAC1B,IAAI,CAAC2B,WAAW,EAAE;EAC3D,MAAA;EACF,IAAA;EAEA,IAAA,IAAM3B,IAAI,GAAG0B,IAAI,CAAC1B,IAAqB;EACvC;MACA,IAAMpC,MAAM,GAAG8D,IAAI,CAACmhB,IAAI,GAAG,IAAI,GAAGnhB,IAAI;EAEtC,IAAA,IAAM0gC,OAAO,GAAGC,cAAc,CAACriC,IAAI,CAAC;EACpC,IAAA,IAAI,CAAC+1B,SAAS,CAACqM,OAAO,CAAC,GAAG;EACxBd,MAAAA,IAAI,EAAEthC,IAAI;EACV+iC,MAAAA,WAAW,EAAE,IAAI;EACjBnlC,MAAAA,MAAM,EAANA,MAAM;EACNwjC,MAAAA,QAAQ,EAAE,KAAK;EACfha,MAAAA,KAAK,EAAE1rB,MAAM,CAAC0kC,MAAM,CAAC,IAAI;OAC1B;IACH,CAAC;IAAAzpC,MAAA,CAEOgqC,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtB7P,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAQ1B,IAAI,GAA6B0B,IAAI,CAArC1B,IAAI;QAAE6iB,IAAI,GAAuBnhB,IAAI,CAA/BmhB,IAAI;QAAEyd,UAAU,GAAW5+B,IAAI,CAAzB4+B,UAAU;QAAEvmC,IAAI,GAAK2H,IAAI,CAAb3H,IAAI;EACpC,IAAA,IAAIiG,IAAI,CAACC,EAAE,KAAK,aAAa,EAAE;EAC7B,MAAA;EACF,IAAA;EACA,IAAA,IAAMyhC,YAAY,GAAG1hC,IAAI,CAACjG,IAAI;EAC9B,IAAA,IAAI8oB,IAAI,EAAE;EACR,MAAA,IAAIme,WAAW,GAAG,IAAI,CAACb,eAAe,CAACuB,YAAY,CAAC;QACpD,IAAI,CAACV,WAAW,EAAE;UAChB,IAAI,CAACb,eAAe,CAACuB,YAAY,CAAC,GAAGV,WAAW,GAAG,EAAE;EACvD,MAAA;EACAA,MAAAA,WAAW,CAACt7B,IAAI,CAACmd,IAAI,CAAC;EACxB,IAAA;EACA;MACA,IAAI,CAACyd,UAAU,GAAGA,UAAU;EAC5B,IAAA,IAAMmB,SAAS,GAAGnB,UAAU,CAACvmC,IAAI,CAAe;MAChD,IAAI,CAACwnC,sBAAsB,CAACxnC,IAAI,EAAE0nC,SAAS,EAAEC,YAAY,EAAE7e,IAAI,CAAC;IAClE,CAAC;IAAAlsB,MAAA,CAEOs5B,cAAc,GAAtB,SAAQA,cAAcA,CAACa,KAA2B,EAAEpvB,IAAsB,EAAE;EAC1E,IAAA,IAAI,CAACygC,sBAAsB,CAACzgC,IAAI,CAAC;IACnC,CAAC;EAAA/K,EAAAA,MAAA,CAEO+sC,WAAW,GAAnB,SAAQA,WAAWA,CAACj/B,QAAkB,EAAW;EAC/C,IAAA,IAAM29B,OAAO,GAAGC,cAAc,CAAC59B,QAAQ,CAAC;EACxC,IAAA,OAAO,CAAC,CAAC,IAAI,CAACsxB,SAAS,CAACqM,OAAO,CAAC;IAClC,CAAC;EAAAzrC,EAAAA,MAAA,CAEMgtC,YAAY,GAAnB,SAAOA,YAAYA,CAAC5pC,IAAwB,EAAW;EACrD,IAAA,IAAQg8B,SAAS,GAAK,IAAI,CAAlBA,SAAS;EACjB,IAAA,IAAMr7B,IAAI,GAAGgB,MAAM,CAAChB,IAAI,CAACq7B,SAAS,CAAC;MACnC,IAAI,CAACh8B,IAAI,EAAE;EACT,MAAA,OAAOW,IAAI,CAACmB,MAAM,GAAG,CAAC;EACxB,IAAA;MACA,KAAK,IAAIkB,CAAC,GAAGrC,IAAI,CAACmB,MAAM,EAAEkB,CAAC,EAAE,GAAI;QAC/B,IAAMskC,cAAc,GAAGtL,SAAS,CAACr7B,IAAI,CAACqC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAAskC,cAAc,IAAA,IAAA,GAAA,MAAA,GAAdA,cAAc,CAAEC,IAAI,CAACvnC,IAAI,MAAKA,IAAI,EAAE;EACtC,QAAA,OAAO,IAAI;EACb,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;EAAApD,EAAAA,MAAA,CAEMitC,QAAQ,GAAf,SAAOA,QAAQA,CAAC7pC,IAAuB,EAAW;EAAA,IAAA,IAAA8pC,qBAAA;EAChD,IAAA,OAAO,CAAC,EAAA,CAAAA,qBAAA,GAAC,IAAI,CAAC1D,eAAe,CAACpmC,IAAI,CAAC,KAAA,IAAA,IAA1B8pC,qBAAA,CAA4BhoC,MAAM,CAAA;IAC7C,CAAC;EAAAlF,EAAAA,MAAA,CAEMmtC,sBAAsB,GAA7B,SAAOA,sBAAsBA,CAC3B5lC,KAAa,EACbE,GAAW,EACXsjC,YAA+B,EAC/BqC,WAAqB,EACrBC,cAAwB,EACxB;EAAA,IAAA,IAAA7Q,MAAA,GAAA,IAAA;EACA,IAAA,IAAI4Q,WAAW,IAAI,CAAC,IAAI,CAACvD,OAAO,EAAE;EAChC,MAAA;EACF,IAAA;EACA9kC,IAAAA,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACq7B,SAAS,CAAC,CAACp7B,OAAO,CAAC,UAAC5B,GAAG,EAAK;EAC3C,MAAA,IAAMsoC,cAAc,GAAGlO,MAAI,CAAC4C,SAAS,CAACh9B,GAAG,CAAC;QAC1C,IAAI,CAACsoC,cAAc,EAAE;EACnB,QAAA;EACF,MAAA;EACA,MAAA,IAAMrhC,IAAI,GAAGqhC,cAAc,CAACC,IAAI;EAChC,MAAA,IAAIthC,IAAI,CAACjG,IAAI,KAAK2nC,YAAY,IAAKqC,WAAW,IAAI,CAAC/jC,IAAI,CAAC+B,GAAI,EAAE;EAC5D,QAAA;EACF,MAAA;EACA,MAAA,IACE/B,IAAI,CAAC9B,KAAK,GAAGE,GAAG,IAChB4B,IAAI,CAAC5B,GAAG,GAAGF,KAAK,KACfmjC,cAAc,CAACD,QAAQ,IAAI4C,cAAc,CAAC,EAC3C;EACA7Q,QAAAA,MAAI,CAAC2O,cAAc,CAAC9hC,IAAI,CAAC;EAC3B,MAAA;EACF,IAAA,CAAC,CAAC;IACJ,CAAC;EAAArJ,EAAAA,MAAA,CAEMmrC,cAAc,GAArB,SAAOA,cAAcA,CAACr9B,QAAkB,EAAE;EACxC,IAAA,IAAM29B,OAAO,GAAGC,cAAc,CAAC59B,QAAQ,CAAC;MACxCA,QAAQ,CAAClF,yBAAyB,EAAE;MACpC,IAAMyhC,WAAW,GAAG,IAAI,CAACb,eAAe,CAAC17B,QAAQ,CAAC1K,IAAI,CAAC;EACvD,IAAA,IAAIinC,WAAW,EAAE;EACf,MAAA,IAAMiD,UAAU,GAAGx/B,QAAQ,CAACxE,EAAE;EAC9B,MAAA,IAAI,CAACkgC,eAAe,CAAC17B,QAAQ,CAAC1K,IAAI,CAAC,GAAG6oC,WAAW,CAC/C5B,WAAW,EACX,UAACne,IAAI,EAAA;EAAA,QAAA,OAAKA,IAAI,CAACpe,QAAQ,CAACxE,EAAE,KAAKgkC,UAAU;EAAA,MAAA,CAC3C,CAAC;EACH,IAAA;EACA,IAAA,OAAO,IAAI,CAAClO,SAAS,CAACqM,OAAO,CAAC;MAC9B,IAAI39B,QAAQ,CAAC3C,OAAO,EAAE;EACpB,MAAA,OAAO,IAAI,CAACu+B,gBAAgB,CAAC57B,QAAQ,CAAC1K,IAAI,CAAC;EAC7C,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CAEM8sC,kBAAkB,GAAzB,SAAOA,kBAAkBA,GAAG;EAAA,IAAA,IAAAlQ,SAAA;MAC1B,IAAI,CAACwC,SAAS,GAAGr6B,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;MACpC,IAAI,CAACC,gBAAgB,GAAG3kC,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;MAC3C,IAAI,CAACD,eAAe,GAAGzkC,MAAM,CAAC0kC,MAAM,CAAC,IAAI,CAAC;MAC1C,IAAI,CAACI,OAAO,GAAG,KAAK;EACpB,IAAA,IAAM0D,QAAQ,GAAA,CAAA3Q,SAAA,GAAG,IAAI,CAACtI,GAAG,KAAA,IAAA,IAAA,CAAAsI,SAAA,GAARA,SAAA,CAAUzF,kBAAkB,KAAA,IAAA,GAAA,MAAA,GAA5ByF,SAAA,CAA8B4Q,QAAQ;EACvD,IAAA,IAAID,QAAQ,EAAE;EACZA,MAAAA,QAAQ,CAACvpC,OAAO,CAAC,UAACkoB,IAAI,EAAA;EAAA,QAAA,OAAKA,IAAI,CAACtjB,yBAAyB,EAAE;QAAA,CAAA,CAAC;EAC9D,IAAA;IACF,CAAC;EAAA,EAAA,OAAA2gC,eAAA;EAAA,CAAA,EAAA;EAGH,SAASuC,SAASA,CAACpB,cAA8B,EAAW;EAAA,EAAA,IAAA+C,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAC1D,OACEjD,cAAc,CAACD,QAAQ,IACvB,CAAC,EACCC,cAAc,CAACC,IAAI,CAACv/B,GAAG,IAAA,CAAAqiC,qBAAA,GACvB/C,cAAc,CAACja,KAAK,CAACtiB,KAAK,KAAA,IAAA,IAA1Bs/B,qBAAA,CAA4BphC,OAAO,KAAAqhC,sBAAA,GACnChD,cAAc,CAACja,KAAK,CAACviB,KAAK,KAAA,IAAA,IAA1Bw/B,sBAAA,CAA4BrhC,OAAO,IAAA,CAAAshC,sBAAA,GACnCjD,cAAc,CAACja,KAAK,CAACriB,UAAU,KAAA,IAAA,IAA/Bu/B,sBAAA,CAAiCthC,OAAO,CACzC;EAEL;EAEA,SAASq/B,cAAcA,CAAC59B,QAAkB,EAAU;IAClD,OAAUA,QAAQ,CAAC1K,IAAI,GAAA,GAAA,GAAI0K,QAAQ,CAACzD,KAAK,GAAA,GAAA,GAAIyD,QAAQ,CAACxE,EAAE;EAC1D;EAEA,SAAS2iC,WAAWA,CAACuB,QAAgB,EAAEh3B,SAAkC,EAAE;EACzE,EAAA,OAAOg3B,QAAQ,CAACngB,MAAM,CAAC,UAACnB,IAAI,EAAK;EAC/B,IAAA,IAAM0hB,IAAI,GAAGp3B,SAAS,CAAC0V,IAAI,CAAC;MAC5B,IAAI,CAAC0hB,IAAI,EAAE;QACT1hB,IAAI,CAACtjB,yBAAyB,EAAE;EAClC,IAAA;EACA,IAAA,OAAOglC,IAAI;EACb,EAAA,CAAC,CAAC;EACJ;;ECljBA,IAAkBC,gBAAgB,GAAA;IAAAC,GAAA,EAAA,CAAA;IAAAC,GAAA,EAAA;EAAA,CAAA;;ECAsB,IAEnCC,SAAS,gBAAA,YAAA;EAK5B,EAAA,SAAAA,UAAYC,MAAoB,EAAEC,EAAc,EAAEC,OAAyB,EAAE;EAAA,IAAA,IAAA,CAJrEF,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNG,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACLD,OAAO,GAAA,MAAA;MAGb,IAAI,CAACF,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACG,KAAK,GAAGF,EAAE;MACf,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB,EAAA;EAAC,EAAA,IAAAnuC,MAAA,GAAAguC,SAAA,CAAA/tC,SAAA;IAAAD,MAAA,CAEDquC,OAAO,GAAP,SAAAA,OAAOA,CAACtjC,IAAiB,EAAE3I,GAAc,EAAE;MACzC,QAAQ,IAAI,CAAC+rC,OAAO;QAClB,KAAKN,gBAAgB,CAACC,GAAG;EACvB,QAAA,OAAO,IAAI,CAACG,MAAM,CAACI,OAAO,CACxB;EAAEhpC,UAAAA,IAAI,EAAE,SAAS;YAAE6oC,EAAE,EAAE,IAAI,CAACE;EAAM,SAAC,EACnChsC,GAAG,EACH2I,IACF,CAAC;QACH,KAAK8iC,gBAAgB,CAACE,GAAG;EACvB,QAAA,OAAO,IAAI,CAACE,MAAM,CAACI,OAAO,CACxB;EAAEhpC,UAAAA,IAAI,EAAE,SAAS;YAAEipC,OAAO,EAAE,IAAI,CAACF,KAAK;EAAElpC,UAAAA,MAAM,EAAE;WAAI;EAAE;UACtD9C,GAAG,EACH2I,IACF,CAAC;EACH,MAAA;EACE,QAAA,MAAM,IAAImd,KAAK,CAAA,+BAAA,GAAiC,IAAI,CAACimB,OAAS,CAAC;EACnE;IACF,CAAC;EAAA,EAAA,OAAAH,SAAA;EAAA,CAAA,EAAA;;EC9BH;EACO,SAASO,aAAaA,CAAC/oC,KAA8B,EAAE;EAC5D,EAAA,IAAMgpC,WAAW,GAAGhpC,KAAK,CAACkH,UAAU;EACpC,EAAA,IAAM+hC,YAAY,GAChBD,WAAW,IAAI,IAAI3vB,QAAQ,CAACrZ,KAAK,CAACsB,MAAM,CAAC,CAAC4nC,QAAQ,CAACF,WAAW,GAAG,CAAC,CAAC;EACrE,EAAA,IAAIC,YAAY,EAAE;MAChB,OAAOjpC,KAAK,CAAC/H,KAAK,CAAC,CAAC,EAAE+wC,WAAW,GAAGC,YAAY,CAAC;EACnD,EAAA;EACA,EAAA,OAAOjpC,KAAK;EACd;EAAC,IAEoBmpC,YAAY,gBAAA,YAAA;EAyB/B,EAAA,SAAAA,eAAc;MAAA,IAAA,CAxBNC,IAAI,GAAkB,CAC5B,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAC5D;MAAA,IAAA,CACOC,MAAM,GAAuB,CACnC,IAAIC,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,CACrB;MAAA,IAAA,CACOC,SAAS,GAAuB,CACtC,IAAID,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,EACpB,IAAIA,WAAW,CAAC,GAAG,CAAC,CACrB;EAAA,IAAA,IAAA,CACOE,IAAI,GAAgB,IAAIF,WAAW,CAAC,GAAG,CAAC;EAAA,IAAA,IAAA,CACxCG,OAAO,GAAgB,IAAIH,WAAW,CAAC,GAAG,CAAC;EAAA,IAAA,IAAA,CAC3C1sC,GAAG,GAAgB,IAAI0sC,WAAW,CAAC,CAAC,CAAC;MAAA,IAAA,CAErCI,MAAM,GAAW,CAAC;MAAA,IAAA,CAClBC,OAAO,GAAW,CAAC;EAAA,IAAA,IAAA,CACnBC,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,cAAc,GAAA,MAAA;MAGpB,IAAI,CAACC,SAAS,EAAE;EAClB,EAAA;;EAEA;EAAA,EAAA,IAAAtvC,MAAA,GAAA2uC,YAAA,CAAA1uC,SAAA;EAAAD,EAAAA,MAAA,CACAuvC,wBAAwB,GAAxB,SAAAA,wBAAwBA,CAACC,WAAW,EAAE;EACpC,IAAA,IAAMtwB,IAAI,GAAG,IAAIL,QAAQ,CAAC2wB,WAAW,CAAC;EACtC,IAAA,IAAMC,QAAQ,GAAG,IAAIX,WAAW,CAAC,CAAC,CAAC;MACnC,KAAK,IAAI1oC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1BqpC,QAAQ,CAACrpC,CAAC,CAAC,GAAG8Y,IAAI,CAACG,SAAS,CAACjZ,CAAC,GAAG,CAAC,CAAC;EACrC,IAAA;EAEA,IAAA,OAAOqpC,QAAQ;IACjB,CAAC;EAAAzvC,EAAAA,MAAA,CAEDsvC,SAAS,GAAT,SAAAA,SAASA,GAAG;EACV,IAAA,IAAMN,IAAI,GAAG,IAAI,CAACA,IAAI;EACtB,IAAA,IAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;EAC5B,IAAA,IAAMJ,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAMa,OAAO,GAAGb,MAAM,CAAC,CAAC,CAAC;EACzB,IAAA,IAAMc,OAAO,GAAGd,MAAM,CAAC,CAAC,CAAC;EACzB,IAAA,IAAMe,OAAO,GAAGf,MAAM,CAAC,CAAC,CAAC;EACzB,IAAA,IAAMgB,OAAO,GAAGhB,MAAM,CAAC,CAAC,CAAC;EACzB,IAAA,IAAME,SAAS,GAAG,IAAI,CAACA,SAAS;EAChC,IAAA,IAAMe,UAAU,GAAGf,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMgB,UAAU,GAAGhB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMiB,UAAU,GAAGjB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMkB,UAAU,GAAGlB,SAAS,CAAC,CAAC,CAAC;EAE/B,IAAA,IAAMpgC,CAAC,GAAG,IAAImgC,WAAW,CAAC,GAAG,CAAC;MAC9B,IAAIl5B,CAAC,GAAG,CAAC;MACT,IAAIs6B,EAAE,GAAG,CAAC;MACV,IAAI9pC,CAAC,GAAG,CAAC;MACT,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;QACxB,IAAIA,CAAC,GAAG,GAAG,EAAE;EACXuI,QAAAA,CAAC,CAACvI,CAAC,CAAC,GAAGA,CAAC,IAAI,CAAC;EACf,MAAA,CAAC,MAAM;UACLuI,CAAC,CAACvI,CAAC,CAAC,GAAIA,CAAC,IAAI,CAAC,GAAI,KAAK;EACzB,MAAA;EACF,IAAA;MAEA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EACxB,MAAA,IAAI+pC,EAAE,GAAGD,EAAE,GAAIA,EAAE,IAAI,CAAE,GAAIA,EAAE,IAAI,CAAE,GAAIA,EAAE,IAAI,CAAE,GAAIA,EAAE,IAAI,CAAE;QAC3DC,EAAE,GAAIA,EAAE,KAAK,CAAC,GAAKA,EAAE,GAAG,IAAK,GAAG,IAAI;EACpCnB,MAAAA,IAAI,CAACp5B,CAAC,CAAC,GAAGu6B,EAAE;EACZlB,MAAAA,OAAO,CAACkB,EAAE,CAAC,GAAGv6B,CAAC;;EAEf;EACA,MAAA,IAAMw6B,EAAE,GAAGzhC,CAAC,CAACiH,CAAC,CAAC;EACf,MAAA,IAAMy6B,EAAE,GAAG1hC,CAAC,CAACyhC,EAAE,CAAC;EAChB,MAAA,IAAME,EAAE,GAAG3hC,CAAC,CAAC0hC,EAAE,CAAC;;EAEhB;QACA,IAAIE,CAAC,GAAI5hC,CAAC,CAACwhC,EAAE,CAAC,GAAG,KAAK,GAAKA,EAAE,GAAG,SAAU;QAC1CT,OAAO,CAAC95B,CAAC,CAAC,GAAI26B,CAAC,IAAI,EAAE,GAAKA,CAAC,KAAK,CAAE;QAClCZ,OAAO,CAAC/5B,CAAC,CAAC,GAAI26B,CAAC,IAAI,EAAE,GAAKA,CAAC,KAAK,EAAG;QACnCX,OAAO,CAACh6B,CAAC,CAAC,GAAI26B,CAAC,IAAI,CAAC,GAAKA,CAAC,KAAK,EAAG;EAClCV,MAAAA,OAAO,CAACj6B,CAAC,CAAC,GAAG26B,CAAC;;EAEd;EACAA,MAAAA,CAAC,GAAID,EAAE,GAAG,SAAS,GAAKD,EAAE,GAAG,OAAQ,GAAID,EAAE,GAAG,KAAM,GAAIx6B,CAAC,GAAG,SAAU;QACtEk6B,UAAU,CAACK,EAAE,CAAC,GAAII,CAAC,IAAI,EAAE,GAAKA,CAAC,KAAK,CAAE;QACtCR,UAAU,CAACI,EAAE,CAAC,GAAII,CAAC,IAAI,EAAE,GAAKA,CAAC,KAAK,EAAG;QACvCP,UAAU,CAACG,EAAE,CAAC,GAAII,CAAC,IAAI,CAAC,GAAKA,CAAC,KAAK,EAAG;EACtCN,MAAAA,UAAU,CAACE,EAAE,CAAC,GAAGI,CAAC;;EAElB;QACA,IAAI,CAAC36B,CAAC,EAAE;UACNA,CAAC,GAAGs6B,EAAE,GAAG,CAAC;EACZ,MAAA,CAAC,MAAM;EACLt6B,QAAAA,CAAC,GAAGw6B,EAAE,GAAGzhC,CAAC,CAACA,CAAC,CAACA,CAAC,CAAC2hC,EAAE,GAAGF,EAAE,CAAC,CAAC,CAAC;EACzBF,QAAAA,EAAE,IAAIvhC,CAAC,CAACA,CAAC,CAACuhC,EAAE,CAAC,CAAC;EAChB,MAAA;EACF,IAAA;IACF,CAAC;EAAAlwC,EAAAA,MAAA,CAEDwwC,SAAS,GAAT,SAAAA,SAASA,CAACC,SAAsB,EAAE;EAChC;EACA,IAAA,IAAMruC,GAAG,GAAG,IAAI,CAACmtC,wBAAwB,CAACkB,SAAS,CAAC;MACpD,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAIphC,MAAM,GAAG,CAAC;EAEd,IAAA,OAAOA,MAAM,GAAGlN,GAAG,CAAC8C,MAAM,IAAIwrC,OAAO,EAAE;QACrCA,OAAO,GAAGtuC,GAAG,CAACkN,MAAM,CAAC,KAAK,IAAI,CAAClN,GAAG,CAACkN,MAAM,CAAC;EAC1CA,MAAAA,MAAM,EAAE;EACV,IAAA;EAEA,IAAA,IAAIohC,OAAO,EAAE;EACX,MAAA;EACF,IAAA;MAEA,IAAI,CAACtuC,GAAG,GAAGA,GAAG;MACd,IAAM+sC,OAAO,GAAI,IAAI,CAACA,OAAO,GAAG/sC,GAAG,CAAC8C,MAAO;MAE3C,IAAIiqC,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,CAAC,IAAIA,OAAO,KAAK,CAAC,EAAE;EACnD,MAAA,MAAM,IAAIjnB,KAAK,CAAC,uBAAuB,GAAGinB,OAAO,CAAC;EACpD,IAAA;EAEA,IAAA,IAAMD,MAAM,GAAI,IAAI,CAACA,MAAM,GAAG,CAACC,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAE;EACpD,IAAA,IAAIwB,KAAK;EACT,IAAA,IAAIC,QAAQ;MAEZ,IAAMxB,WAAW,GAAI,IAAI,CAACA,WAAW,GAAG,IAAIN,WAAW,CAACI,MAAM,CAAE;MAChE,IAAMG,cAAc,GAAI,IAAI,CAACA,cAAc,GAAG,IAAIP,WAAW,CAACI,MAAM,CAAE;EACtE,IAAA,IAAM2B,IAAI,GAAG,IAAI,CAAC7B,IAAI;EACtB,IAAA,IAAMJ,IAAI,GAAG,IAAI,CAACA,IAAI;EAEtB,IAAA,IAAMG,SAAS,GAAG,IAAI,CAACA,SAAS;EAChC,IAAA,IAAMe,UAAU,GAAGf,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMgB,UAAU,GAAGhB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMiB,UAAU,GAAGjB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMkB,UAAU,GAAGlB,SAAS,CAAC,CAAC,CAAC;EAE/B,IAAA,IAAI+B,IAAI;EACR,IAAA,IAAIP,CAAC;MAEL,KAAKI,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGzB,MAAM,EAAEyB,KAAK,EAAE,EAAE;QACvC,IAAIA,KAAK,GAAGxB,OAAO,EAAE;UACnB2B,IAAI,GAAG1B,WAAW,CAACuB,KAAK,CAAC,GAAGvuC,GAAG,CAACuuC,KAAK,CAAC;EACtC,QAAA;EACF,MAAA;EACAJ,MAAAA,CAAC,GAAGO,IAAI;EAER,MAAA,IAAIH,KAAK,GAAGxB,OAAO,KAAK,CAAC,EAAE;EACzB;EACAoB,QAAAA,CAAC,GAAIA,CAAC,IAAI,CAAC,GAAKA,CAAC,KAAK,EAAG;;EAEzB;EACAA,QAAAA,CAAC,GACEM,IAAI,CAACN,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,GACpBM,IAAI,CAAEN,CAAC,KAAK,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GAC9BM,IAAI,CAAEN,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAC7BM,IAAI,CAACN,CAAC,GAAG,IAAI,CAAC;;EAEhB;UACAA,CAAC,IAAI3B,IAAI,CAAE+B,KAAK,GAAGxB,OAAO,GAAI,CAAC,CAAC,IAAI,EAAE;QACxC,CAAC,MAAM,IAAIA,OAAO,GAAG,CAAC,IAAIwB,KAAK,GAAGxB,OAAO,KAAK,CAAC,EAAE;EAC/C;EACAoB,QAAAA,CAAC,GACEM,IAAI,CAACN,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,GACpBM,IAAI,CAAEN,CAAC,KAAK,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GAC9BM,IAAI,CAAEN,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAC7BM,IAAI,CAACN,CAAC,GAAG,IAAI,CAAC;EAClB,MAAA;EAEAnB,MAAAA,WAAW,CAACuB,KAAK,CAAC,GAAGG,IAAI,GAAG,CAAC1B,WAAW,CAACuB,KAAK,GAAGxB,OAAO,CAAC,GAAGoB,CAAC,MAAM,CAAC;EACtE,IAAA;MAEA,KAAKK,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAG1B,MAAM,EAAE0B,QAAQ,EAAE,EAAE;QAChDD,KAAK,GAAGzB,MAAM,GAAG0B,QAAQ;QACzB,IAAIA,QAAQ,GAAG,CAAC,EAAE;EAChBL,QAAAA,CAAC,GAAGnB,WAAW,CAACuB,KAAK,CAAC;EACxB,MAAA,CAAC,MAAM;EACLJ,QAAAA,CAAC,GAAGnB,WAAW,CAACuB,KAAK,GAAG,CAAC,CAAC;EAC5B,MAAA;EAEA,MAAA,IAAIC,QAAQ,GAAG,CAAC,IAAID,KAAK,IAAI,CAAC,EAAE;EAC9BtB,QAAAA,cAAc,CAACuB,QAAQ,CAAC,GAAGL,CAAC;EAC9B,MAAA,CAAC,MAAM;UACLlB,cAAc,CAACuB,QAAQ,CAAC,GACtBd,UAAU,CAACe,IAAI,CAACN,CAAC,KAAK,EAAE,CAAC,CAAC,GAC1BR,UAAU,CAACc,IAAI,CAAEN,CAAC,KAAK,EAAE,GAAI,IAAI,CAAC,CAAC,GACnCP,UAAU,CAACa,IAAI,CAAEN,CAAC,KAAK,CAAC,GAAI,IAAI,CAAC,CAAC,GAClCN,UAAU,CAACY,IAAI,CAACN,CAAC,GAAG,IAAI,CAAC,CAAC;EAC9B,MAAA;QAEAlB,cAAc,CAACuB,QAAQ,CAAC,GAAGvB,cAAc,CAACuB,QAAQ,CAAC,KAAK,CAAC;EAC3D,IAAA;EACF,EAAA;;EAEA;EAAA;EAAA5wC,EAAAA,MAAA,CACA+wC,sBAAsB,GAAtB,SAAAA,sBAAsBA,CAACC,IAAI,EAAE;MAC3B,OACGA,IAAI,IAAI,EAAE,GACV,CAACA,IAAI,GAAG,MAAM,KAAK,CAAE,GACrB,CAACA,IAAI,GAAG,QAAQ,KAAK,CAAE,GACvBA,IAAI,KAAK,EAAG;IAEjB,CAAC;IAAAhxC,MAAA,CAEDquC,OAAO,GAAP,SAAAA,OAAOA,CACL4C,gBAAiC,EACjC3hC,MAAc,EACd8+B,KAAkB,EAClB;EACA,IAAA,IAAM8C,OAAO,GAAG,IAAI,CAAC/B,OAAO,GAAG,CAAC;EAChC,IAAA,IAAME,cAAc,GAAG,IAAI,CAACA,cAAc;EAC1C,IAAA,IAAM8B,OAAO,GAAG,IAAI,CAAClC,OAAO;EAE5B,IAAA,IAAMF,SAAS,GAAG,IAAI,CAACA,SAAS;EAChC,IAAA,IAAMe,UAAU,GAAGf,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMgB,UAAU,GAAGhB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMiB,UAAU,GAAGjB,SAAS,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAMkB,UAAU,GAAGlB,SAAS,CAAC,CAAC,CAAC;EAE/B,IAAA,IAAMqC,UAAU,GAAG,IAAI,CAAC7B,wBAAwB,CAACnB,KAAK,CAAC;EACvD,IAAA,IAAIiD,WAAW,GAAGD,UAAU,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAIE,WAAW,GAAGF,UAAU,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAIG,WAAW,GAAGH,UAAU,CAAC,CAAC,CAAC;EAC/B,IAAA,IAAII,WAAW,GAAGJ,UAAU,CAAC,CAAC,CAAC;EAE/B,IAAA,IAAMK,UAAU,GAAG,IAAIC,UAAU,CAACT,gBAAgB,CAAC;MACnD,IAAMU,WAAW,GAAG,IAAID,UAAU,CAACD,UAAU,CAACvsC,MAAM,CAAC;EAErD,IAAA,IAAI0sC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EAClB,IAAA,IAAIC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EAClB,IAAA,IAAIC,WAAW,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAW;MAEtD,IAAI5B,KAAK,EAAEvqC,CAAC;EACZ,IAAA,IAAMosC,QAAQ,GAAG,IAAI,CAACzB,sBAAsB;EAE5C,IAAA,OAAOzhC,MAAM,GAAGmiC,UAAU,CAACvsC,MAAM,EAAE;EACjCktC,MAAAA,WAAW,GAAGI,QAAQ,CAACf,UAAU,CAACniC,MAAM,CAAC,CAAC;QAC1C+iC,WAAW,GAAGG,QAAQ,CAACf,UAAU,CAACniC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9CgjC,WAAW,GAAGE,QAAQ,CAACf,UAAU,CAACniC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9CijC,WAAW,GAAGC,QAAQ,CAACf,UAAU,CAACniC,MAAM,GAAG,CAAC,CAAC,CAAC;EAE9C0iC,MAAAA,EAAE,GAAGI,WAAW,GAAG/C,cAAc,CAAC,CAAC,CAAC;EACpC4C,MAAAA,EAAE,GAAGM,WAAW,GAAGlD,cAAc,CAAC,CAAC,CAAC;EACpC6C,MAAAA,EAAE,GAAGI,WAAW,GAAGjD,cAAc,CAAC,CAAC,CAAC;EACpC8C,MAAAA,EAAE,GAAGE,WAAW,GAAGhD,cAAc,CAAC,CAAC,CAAC;EAEpCsB,MAAAA,KAAK,GAAG,CAAC;;EAET;QACA,KAAKvqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8qC,OAAO,EAAE9qC,CAAC,EAAE,EAAE;EAC5BwrC,QAAAA,EAAE,GACA9B,UAAU,CAACkC,EAAE,KAAK,EAAE,CAAC,GACrBjC,UAAU,CAAEkC,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,GAC7BjC,UAAU,CAAEkC,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,GAC5BjC,UAAU,CAACkC,EAAE,GAAG,IAAI,CAAC,GACrB9C,cAAc,CAACsB,KAAK,CAAC;EACvBkB,QAAAA,EAAE,GACA/B,UAAU,CAACmC,EAAE,KAAK,EAAE,CAAC,GACrBlC,UAAU,CAAEmC,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,GAC7BlC,UAAU,CAAEmC,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,GAC5BlC,UAAU,CAAC+B,EAAE,GAAG,IAAI,CAAC,GACrB3C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;EAC3BmB,QAAAA,EAAE,GACAhC,UAAU,CAACoC,EAAE,KAAK,EAAE,CAAC,GACrBnC,UAAU,CAAEoC,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,GAC7BnC,UAAU,CAAEgC,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,GAC5B/B,UAAU,CAACgC,EAAE,GAAG,IAAI,CAAC,GACrB5C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;EAC3BoB,QAAAA,EAAE,GACAjC,UAAU,CAACqC,EAAE,KAAK,EAAE,CAAC,GACrBpC,UAAU,CAAEiC,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,GAC7BhC,UAAU,CAAEiC,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,GAC5BhC,UAAU,CAACiC,EAAE,GAAG,IAAI,CAAC,GACrB7C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;EAC3B;EACAqB,QAAAA,EAAE,GAAGJ,EAAE;EACPK,QAAAA,EAAE,GAAGJ,EAAE;EACPK,QAAAA,EAAE,GAAGJ,EAAE;EACPK,QAAAA,EAAE,GAAGJ,EAAE;UAEPpB,KAAK,GAAGA,KAAK,GAAG,CAAC;EACnB,MAAA;;EAEA;EACAiB,MAAAA,EAAE,GACCT,OAAO,CAACa,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GACxBb,OAAO,CAAEc,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GACjCd,OAAO,CAAEe,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAChCf,OAAO,CAACgB,EAAE,GAAG,IAAI,CAAC,GAClB9C,cAAc,CAACsB,KAAK,CAAC;QACvBkB,EAAE,GACCV,OAAO,CAACc,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GACxBd,OAAO,CAAEe,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GACjCf,OAAO,CAAEgB,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAChChB,OAAO,CAACa,EAAE,GAAG,IAAI,CAAC,GAClB3C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;QAC3BmB,EAAE,GACCX,OAAO,CAACe,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GACxBf,OAAO,CAAEgB,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GACjChB,OAAO,CAAEa,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAChCb,OAAO,CAACc,EAAE,GAAG,IAAI,CAAC,GAClB5C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;QAC3BoB,EAAE,GACCZ,OAAO,CAACgB,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,GACxBhB,OAAO,CAAEa,EAAE,IAAI,EAAE,GAAI,IAAI,CAAC,IAAI,EAAG,GACjCb,OAAO,CAAEc,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,IAAI,CAAE,GAChCd,OAAO,CAACe,EAAE,GAAG,IAAI,CAAC,GAClB7C,cAAc,CAACsB,KAAK,GAAG,CAAC,CAAC;;EAE3B;QACAgB,WAAW,CAACriC,MAAM,CAAC,GAAGkjC,QAAQ,CAACZ,EAAE,GAAGP,WAAW,CAAC;QAChDM,WAAW,CAACriC,MAAM,GAAG,CAAC,CAAC,GAAGkjC,QAAQ,CAACT,EAAE,GAAGT,WAAW,CAAC;QACpDK,WAAW,CAACriC,MAAM,GAAG,CAAC,CAAC,GAAGkjC,QAAQ,CAACV,EAAE,GAAGP,WAAW,CAAC;QACpDI,WAAW,CAACriC,MAAM,GAAG,CAAC,CAAC,GAAGkjC,QAAQ,CAACX,EAAE,GAAGL,WAAW,CAAC;;EAEpD;EACAH,MAAAA,WAAW,GAAGe,WAAW;EACzBd,MAAAA,WAAW,GAAGe,WAAW;EACzBd,MAAAA,WAAW,GAAGe,WAAW;EACzBd,MAAAA,WAAW,GAAGe,WAAW;QAEzBjjC,MAAM,GAAGA,MAAM,GAAG,CAAC;EACrB,IAAA;MAEA,OAAOqiC,WAAW,CAAC7qC,MAAM;IAC3B,CAAC;EAAA,EAAA,OAAA6nC,YAAA;EAAA,CAAA,EAAA;;ECjVqD,IAEnC8D,UAAU,gBAAA,YAAA;EAK7B,EAAA,SAAAA,WACExE,MAAoB,EACpB7rC,GAAgB,EAChB+rC,OAAyB,EACzB;EAAA,IAAA,IAAA,CARMF,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACN7rC,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACH+rC,OAAO,GAAA,MAAA;MAOb,IAAI,CAACF,MAAM,GAAGA,MAAM;MACpB,IAAI,CAAC7rC,GAAG,GAAGA,GAAG;MACd,IAAI,CAAC+rC,OAAO,GAAGA,OAAO;EACxB,EAAA;EAAC,EAAA,IAAAnuC,MAAA,GAAAyyC,UAAA,CAAAxyC,SAAA;EAAAD,EAAAA,MAAA,CAEDwwC,SAAS,GAAT,SAAAA,SAASA,GAAG;EACV,IAAA,IAAMkC,cAAc,GAAGC,iBAAiB,CAAC,IAAI,CAACxE,OAAO,CAAC;MACtD,OAAO,IAAI,CAACF,MAAM,CAAC2E,SAAS,CAC1B,KAAK,EACL,IAAI,CAACxwC,GAAG,EACR;EAAEiD,MAAAA,IAAI,EAAEqtC;OAAgB,EACxB,KAAK,EACL,CAAC,SAAS,EAAE,SAAS,CACvB,CAAC;IACH,CAAC;EAAA,EAAA,OAAAD,UAAA;EAAA,CAAA,EAAA;EAGH,SAASE,iBAAiBA,CAACxE,OAAyB,EAAE;EACpD,EAAA,QAAQA,OAAO;MACb,KAAKN,gBAAgB,CAACC,GAAG;EACvB,MAAA,OAAO,SAAS;MAClB,KAAKD,gBAAgB,CAACE,GAAG;EACvB,MAAA,OAAO,SAAS;EAClB,IAAA;EACE,MAAA,MAAM,IAAI7lB,KAAK,CAAA,gCAAA,GAAkCimB,OAAS,CAAC;EAC/D;EACF;;EC9BA,IAAM0E,UAAU,GAAG,EAAE,CAAC;EAAC,IAEFC,SAAS,gBAAA,YAAA;EAa5B,EAAA,SAAAA,SAAAA,CAAY7nB,MAAiB,EAAA8nB,KAAA,EAAsC;EAAA,IAAA,IAAAlpC,IAAA,GAAAkpC,KAAA,cAAJ,EAAE,GAAAA,KAAA;QAAAC,qBAAA,GAAAnpC,IAAA,CAAhCopC,kBAAkB;EAAlBA,MAAAA,kBAAkB,GAAAD,qBAAA,KAAA,MAAA,GAAG,IAAI,GAAAA,qBAAA;MAAA,IAAA,CAZlDE,UAAU,GAAY,IAAI;EAAA,IAAA,IAAA,CAC1BD,kBAAkB,GAAA,MAAA;MAAA,IAAA,CAClBhF,MAAM,GAAwB,IAAI;MAAA,IAAA,CAClCkF,iBAAiB,GAAwB,IAAI;MAAA,IAAA,CAC7C/wC,GAAG,GAAuB,IAAI;MAAA,IAAA,CAC9BgxC,UAAU,GAAsB,IAAI;MAAA,IAAA,CACpCC,aAAa,GAAmC,IAAI;MAAA,IAAA,CACpDC,SAAS,GAAuB,IAAI;MAAA,IAAA,CACpCC,aAAa,GAAuB,IAAI;EAAA,IAAA,IAAA,CACxCC,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,iBAAiB,GAAA,MAAA;EAGvB,IAAA,IAAI,CAACA,iBAAiB,GAAGxoB,MAAM,CAACwoB,iBAAiB;MACjD,IAAI,CAACR,kBAAkB,GAAGA,kBAAkB;EAC5C;EACA,IAAA,IAAIA,kBAAkB,EAAE;QACtB,IAAI;EACF,QAAA,IAAMS,aAAa,GAAGnwC,IAAI,CAACvG,MAAM;EACjC,QAAA,IAAI02C,aAAa,EAAE;YACjB,IAAI,CAACzF,MAAM,GACTyF,aAAa,CAACzF,MAAM,IAClByF,aAAa,CAASC,YAA6B;EACzD,QAAA;QACF,CAAC,CAAC,OAAO1vC,CAAC,EAAE;EACV;EAAA,MAAA;EAEJ,IAAA;EACA,IAAA,IAAI,CAACuvC,WAAW,GAAG,CAAC,IAAI,CAACvF,MAAM;EACjC,EAAA;EAAC,EAAA,IAAAjuC,MAAA,GAAA8yC,SAAA,CAAA7yC,SAAA;EAAAD,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAAC+rC,MAAM,GAAG,IAAI;MAClB,IAAI,CAACkF,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAAC/wC,GAAG,GAAG,IAAI;MACf,IAAI,CAACgxC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,aAAa,GAAG,IAAI;MACzB,IAAI,CAACC,SAAS,GAAG,IAAI;MACrB,IAAI,CAACC,aAAa,GAAG,IAAI;IAC3B,CAAC;EAAAvzC,EAAAA,MAAA,CAEM4zC,MAAM,GAAb,SAAOA,MAAMA,GAAG;MACd,OAAO,IAAI,CAACJ,WAAW;IACzB,CAAC;EAAAxzC,EAAAA,MAAA,CAEM6zC,KAAK,GAAZ,SAAOA,KAAKA,GAAmC;EAC7C,IAAA,IAAQN,aAAa,GAAoB,IAAI,CAArCA,aAAa;QAAEF,aAAa,GAAK,IAAI,CAAtBA,aAAa;EACpC,IAAA,IAAI,CAACE,aAAa,IAAIF,aAAa,EAAE;QACnC,IAAI,CAACS,KAAK,EAAE;EACZ,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAM/oC,IAAI,GAAG,IAAIpE,UAAU,CAAC4sC,aAAa,CAAC;MAC1C,IAAI,CAACO,KAAK,EAAE;MACZ,IAAI,IAAI,CAACb,kBAAkB,EAAE;QAC3B,OAAO1E,aAAa,CAACxjC,IAAI,CAAC;EAC5B,IAAA;EACA,IAAA,OAAOA,IAAI;IACb,CAAC;EAAA/K,EAAAA,MAAA,CAEM8zC,KAAK,GAAZ,SAAOA,KAAKA,GAAG;MACb,IAAI,CAACP,aAAa,GAAG,IAAI;MACzB,IAAI,CAACD,SAAS,GAAG,IAAI;MACrB,IAAI,CAACD,aAAa,GAAG,IAAI;MACzB,IAAI,IAAI,CAACF,iBAAiB,EAAE;QAC1B,IAAI,CAACA,iBAAiB,GAAG,IAAI;EAC/B,IAAA;IACF,CAAC;EAAAnzC,EAAAA,MAAA,CAEMquC,OAAO,GAAd,SAAOA,OAAOA,CACZtjC,IAA8B,EAC9B3I,GAAgB,EAChB8rC,EAAe,EACfC,OAAyB,EACH;EAAA,IAAA,IAAA1kC,KAAA,GAAA,IAAA;MACtB,IAAI,IAAI,CAAC+pC,WAAW,EAAE;EACpB,MAAA,OAAO,IAAI7qB,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;EACtC,QAAA,IAAMC,QAAQ,GAAG/0B,WAAW,CAACg1B,MAAM,CAAClpC,IAAI,CAAC,GAAGA,IAAI,GAAG,IAAIpE,UAAU,CAACoE,IAAI,CAAC;UACvEtB,KAAI,CAACyqC,eAAe,CAACF,QAAQ,EAAE5xC,GAAG,EAAE8rC,EAAE,EAAEC,OAAO,CAAC;EAChD,QAAA,IAAMgG,aAAa,GAAG1qC,KAAI,CAACoqC,KAAK,EAAE;EAClC,QAAA,IAAIM,aAAa,EAAE;EACjBvrB,UAAAA,OAAO,CAACurB,aAAa,CAACrtC,MAAM,CAAC;EAC/B,QAAA,CAAC,MAAM;EACLitC,UAAAA,MAAM,CAAC,IAAI7rB,KAAK,CAAC,0CAA0C,CAAC,CAAC;EAC/D,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA;EACA,IAAA,OAAO,IAAI,CAACksB,gBAAgB,CAAC,IAAIztC,UAAU,CAACoE,IAAI,CAAC,EAAE3I,GAAG,EAAE8rC,EAAE,EAAEC,OAAO,CAAC;EACtE,EAAA;;EAEA;EACA;EAAA;EAAAnuC,EAAAA,MAAA,CACOk0C,eAAe,GAAtB,SAAOA,eAAeA,CACpBnpC,IAAgB,EAChB3I,GAAgB,EAChB8rC,EAAe,EACfC,OAAyB,EACL;EACpB,IAAA,IAAQmF,SAAS,GAAmC,IAAI,CAAhDA,SAAS;QAAEC,aAAa,GAAoB,IAAI,CAArCA,aAAa;QAAEF,aAAa,GAAK,IAAI,CAAtBA,aAAa;MAC/C,IAAIlF,OAAO,KAAKN,gBAAgB,CAACC,GAAG,IAAI1rC,GAAG,CAACsK,UAAU,KAAK,EAAE,EAAE;EAC7DlK,MAAAA,MAAM,CAACG,IAAI,CAAC,8CAA8C,CAAC;EAC3D,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAI,CAAC0xC,OAAO,CAAC,gBAAgB,CAAC;EAC9B;EACA;EACA;EACA;;EAEA,IAAA,IAAIhB,aAAa,EAAE;EACjBtoC,MAAAA,IAAI,GAAG4O,gBAAgB,CAAC05B,aAAa,EAAEtoC,IAAI,CAAC;QAC5C,IAAI,CAACsoC,aAAa,GAAG,IAAI;EAC3B,IAAA;;EAEA;EACA,IAAA,IAAMiB,YAAY,GAAG,IAAI,CAACC,aAAa,CAACxpC,IAAI,CAAC;EAC7C,IAAA,IAAI,CAACupC,YAAY,CAACpvC,MAAM,EAAE;EACxB,MAAA,OAAO,IAAI;EACb,IAAA;EAEA,IAAA,IAAIouC,SAAS,EAAE;EACbpF,MAAAA,EAAE,GAAGoF,SAAS;EAChB,IAAA;EAEA,IAAA,IAAIH,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;MAC9C,IAAI,CAACA,iBAAiB,EAAE;QACtBA,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,GAAG,IAAIxE,YAAY,EAAE;EACjE,IAAA;EACAwE,IAAAA,iBAAiB,CAAC3C,SAAS,CAACpuC,GAAG,CAAC;MAEhC,IAAMuN,MAAM,GAAG4jC,aAAa;EAE5B,IAAA,IAAI,CAACA,aAAa,GAAGJ,iBAAiB,CAAC9E,OAAO,CAACiG,YAAY,CAACxtC,MAAM,EAAE,CAAC,EAAEonC,EAAE,CAAC;MAC1E,IAAI,CAACoF,SAAS,GAAGgB,YAAY,CAAC72C,KAAK,CAAC,GAAG,CAAC,CAACqJ,MAAM;MAE/C,IAAI,CAAC6I,MAAM,EAAE;EACX,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAOA,MAAM;IACf,CAAC;EAAA3P,EAAAA,MAAA,CAEMo0C,gBAAgB,GAAvB,SAAOA,gBAAgBA,CACrBrpC,IAA6B,EAC7B3I,GAAgB,EAChB8rC,EAAe,EACfC,OAAyB,EACH;EAAA,IAAA,IAAAxgC,MAAA,GAAA,IAAA;MACtB,IAAI,IAAI,CAACvL,GAAG,KAAKA,GAAG,IAAI,CAAC,IAAI,CAACgxC,UAAU,EAAE;EACxC,MAAA,IAAI,CAAC,IAAI,CAACnF,MAAM,EAAE;EAChB,QAAA,OAAOtlB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC4rB,gBAAgB,CAACzpC,IAAI,EAAE3I,GAAG,EAAE8rC,EAAE,EAAEC,OAAO,CAAC,CAAC;EACvE,MAAA;QACA,IAAI,CAAC/rC,GAAG,GAAGA,GAAG;EACd,MAAA,IAAI,CAACgxC,UAAU,GAAG,IAAIX,UAAU,CAAC,IAAI,CAACxE,MAAM,EAAE7rC,GAAG,EAAE+rC,OAAO,CAAC;EAC7D,IAAA;EACA,IAAA,OAAO,IAAI,CAACiF,UAAU,CACnB5C,SAAS,EAAE,CACX9mB,IAAI,CAAC,UAAC+qB,MAAiB,EAAK;EAC3B;EACA,MAAA,IAAI,CAAC9mC,MAAI,CAACsgC,MAAM,EAAE;UAChB,OAAOtlB,OAAO,CAACorB,MAAM,CAAC,IAAI7rB,KAAK,CAAC,4BAA4B,CAAC,CAAC;EAChE,MAAA;EACAva,MAAAA,MAAI,CAAC0mC,OAAO,CAAC,uBAAuB,CAAC;EACrC,MAAA,IAAMr3C,MAAM,GAAG,IAAIgxC,SAAS,CAACrgC,MAAI,CAACsgC,MAAM,EAAE,IAAItnC,UAAU,CAACunC,EAAE,CAAC,EAAEC,OAAO,CAAC;QACtE,OAAOnxC,MAAM,CAACqxC,OAAO,CAACtjC,IAAI,CAACjE,MAAM,EAAE2tC,MAAM,CAAC;EAC5C,IAAA,CAAC,CAAC,CACD9qB,KAAK,CAAC,UAAC+qB,GAAG,EAAK;QACdlyC,MAAM,CAACG,IAAI,CAAA,uDAAA,GAC+C+xC,GAAG,CAACrvC,IAAI,GAAA,IAAA,GAAKqvC,GAAG,CAAClM,OAC3E,CAAC;QAED,OAAO76B,MAAI,CAAC6mC,gBAAgB,CAACzpC,IAAI,EAAE3I,GAAG,EAAE8rC,EAAE,EAAEC,OAAO,CAAC;EACtD,IAAA,CAAC,CAAC;IACN,CAAC;EAAAnuC,EAAAA,MAAA,CAEOw0C,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBzpC,IAAgB,EAChB3I,GAAgB,EAChB8rC,EAAe,EACfC,OAAyB,EACJ;EACrB,IAAA,IAAMsF,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;EAChD,IAAA,IAAIA,iBAAiB,EAAE;QACrB,IAAI,CAACD,WAAW,GAAG,IAAI;QACvB,IAAI,CAACN,UAAU,GAAG,IAAI;QACtB,IAAI,CAACgB,eAAe,CAACnpC,IAAI,EAAE3I,GAAG,EAAE8rC,EAAE,EAAEC,OAAO,CAAC;EAC5C,MAAA,IAAMgG,aAAa,GAAG,IAAI,CAACN,KAAK,EAAE;EAClC,MAAA,IAAIM,aAAa,EAAE;UACjB,OAAOA,aAAa,CAACrtC,MAAM;EAC7B,MAAA;EACF,IAAA;EACA,IAAA,MAAM,IAAIohB,KAAK,CACb,WAAW,IACRurB,iBAAiB,GAAG,sBAAsB,GAAG,EAAE,CAAC,GACjD,0BACJ,CAAC;IACH,CAAC;EAAAzzC,EAAAA,MAAA,CAEOu0C,aAAa,GAArB,SAAQA,aAAaA,CAACxpC,IAAgB,EAAc;MAClD,IAAIupC,YAAY,GAAGvpC,IAAI;MACvB,IAAM4pC,UAAU,GAAG5pC,IAAI,CAAC7F,MAAM,GAAI6F,IAAI,CAAC7F,MAAM,GAAG2tC,UAAW;EAC3D,IAAA,IAAI8B,UAAU,KAAK5pC,IAAI,CAAC7F,MAAM,EAAE;QAC9BovC,YAAY,GAAGvpC,IAAI,CAACtN,KAAK,CAAC,CAAC,EAAEk3C,UAAU,CAAC;QACxC,IAAI,CAACtB,aAAa,GAAGtoC,IAAI,CAACtN,KAAK,CAACk3C,UAAU,CAAC;EAC7C,IAAA;EACA,IAAA,OAAOL,YAAY;IACrB,CAAC;EAAAt0C,EAAAA,MAAA,CAEOq0C,OAAO,GAAf,SAAQA,OAAOA,CAACO,GAAW,EAAE;EAC3B,IAAA,IAAI,CAAC,IAAI,CAAC1B,UAAU,EAAE;EACpB,MAAA;EACF,IAAA;EACA1wC,IAAAA,MAAM,CAACzC,GAAG,CAAA,eAAA,GAAiB60C,GAAK,CAAC;MACjC,IAAI,CAAC1B,UAAU,GAAG,KAAK;IACzB,CAAC;EAAA,EAAA,OAAAJ,SAAA;EAAA,CAAA,EAAA;;EC/MH,IAAM+B,cAAc,GAAG52C,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAAC,IAEnB00C,cAAc,gBAAA,YAAA;IAKjC,SAAAA,cAAAA,CAAY7pB,MAAiB,EAAE;EAAA,IAAA,IAAA,CAJdA,MAAM,GAAA,MAAA;MAAA,IAAA,CACf9gB,MAAM,GAAyC,IAAI;MAAA,IAAA,CACnD4qC,eAAe,GAAW,EAAE;MAGlC,IAAI,CAAC9pB,MAAM,GAAGA,MAAM;EACtB,EAAA;EAAC,EAAA,IAAAjrB,MAAA,GAAA80C,cAAA,CAAA70C,SAAA;EAAAD,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,IAAI,CAACiI,MAAM,EAAE;EACf,MAAA,IAAI,CAACA,MAAM,CAACjI,OAAO,EAAE;QACrB,IAAI,CAACiI,MAAM,GAAG,IAAI;EACpB,IAAA;IACF,CAAC;EAAAnK,EAAAA,MAAA,CAEDmM,KAAK,GAAL,SAAAA,KAAKA,GAAG;MACN,IAAI,IAAI,CAAChC,MAAM,EAAE;EACf;EACA,MAAA,IAAI,CAACA,MAAM,CAACgC,KAAK,EAAE;EACrB,IAAA;IACF,CAAC;IAAAnM,MAAA,CAEDg1C,IAAI,GAAJ,SAAAA,IAAIA,CACF3rC,IAAc,EACd4rC,UAAyC,EAChB;EAAA,IAAA,IAAAxrC,KAAA,GAAA,IAAA;EACzB,IAAA,IAAMtM,GAAG,GAAGkM,IAAI,CAAClM,GAAG;MACpB,IAAI,CAACA,GAAG,EAAE;EACR,MAAA,OAAOwrB,OAAO,CAACorB,MAAM,CACnB,IAAImB,SAAS,CAAC;UACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;UAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC6lC,eAAe;EACrCnK,QAAAA,KAAK,EAAE,KAAK;EACZjxB,QAAAA,IAAI,EAAJA,IAAI;UACJnM,KAAK,EAAE,IAAIgrB,KAAK,CAAA,2BAAA,IACc/qB,GAAG,GAAG,WAAW,GAAG,KAAK,CACvD,CAAC;EACDi4C,QAAAA,cAAc,EAAE;EAClB,OAAC,CACH,CAAC;EACH,IAAA;MACA,IAAI,CAACjpC,KAAK,EAAE;EAEZ,IAAA,IAAM8e,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAMoqB,eAAe,GAAGpqB,MAAM,CAACqqB,OAAO;EACtC,IAAA,IAAMC,cAAc,GAAGtqB,MAAM,CAAC9gB,MAAM;EAEpC,IAAA,OAAO,IAAIwe,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;QACtC,IAAItqC,KAAI,CAACU,MAAM,EAAE;EACfV,QAAAA,KAAI,CAACU,MAAM,CAACjI,OAAO,EAAE;EACvB,MAAA;QACA,IAAImH,IAAI,CAAC+B,GAAG,EAAE;EACZ,QAAA,IAAI/B,IAAI,CAACW,OAAO,CAAC5E,IAAI,CAAC,UAACowC,IAAI,EAAA;EAAA,UAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK;EAAA,QAAA,CAAA,CAAC,EAAE;EAClDzB,UAAAA,MAAM,CAAC0B,kBAAkB,CAACpsC,IAAI,CAAC,CAAC;EAChC,UAAA;EACF,QAAA,CAAC,MAAM;EACL;YACAA,IAAI,CAAC+B,GAAG,GAAG,KAAK;EAClB,QAAA;EACF,MAAA;EACA,MAAA,IAAMjB,MAAM,GAAIV,KAAI,CAACU,MAAM,GAAGkrC,eAAe,GACzC,IAAIA,eAAe,CAACpqB,MAAM,CAAC,GAC1B,IAAIsqB,cAAc,CAACtqB,MAAM,CAAoC;EAClE,MAAA,IAAMyqB,aAAa,GAAGC,mBAAmB,CAACtsC,IAAI,CAAC;QAC/CA,IAAI,CAACc,MAAM,GAAGA,MAAM;QACpB,IAAMq3B,UAAU,GAAGS,4BAA4B,CAC7ChX,MAAM,CAACgc,cAAc,CAAC/0B,OACxB,CAAC;EACD,MAAA,IAAM0jC,YAAiC,GAAG;EACxCpU,QAAAA,UAAU,EAAVA,UAAU;UACVqU,OAAO,EAAErU,UAAU,CAACsU,aAAa;EACjCC,QAAAA,QAAQ,EAAE,CAAC;EACXC,QAAAA,UAAU,EAAE,CAAC;EACbC,QAAAA,aAAa,EAAE,CAAC;UAChBC,aAAa,EAAE7sC,IAAI,CAACC,EAAE,KAAK,aAAa,GAAGuP,QAAQ,GAAGg8B;SACvD;EACD;EACAxrC,MAAAA,IAAI,CAACkD,KAAK,GAAGpC,MAAM,CAACoC,KAAK;EACzB,MAAA,IAAM4pC,SAAiD,GAAG;UACxDC,SAAS,EAAE,SAAXA,SAASA,CAAGtP,QAAQ,EAAEv6B,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EACvD3rC,UAAAA,KAAI,CAAC4sC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;EAC9B,UAAA,IAAI8T,OAAO,GAAG6oB,QAAQ,CAAC/7B,IAAmB;EAC1C,UAAA,IAAIlH,OAAO,CAACyyC,OAAO,IAAIjtC,IAAI,CAAC0M,WAAW,EAAE;EACvC1M,YAAAA,IAAI,CAAC0M,WAAW,CAACm4B,EAAE,GAAG,IAAIvnC,UAAU,CAACsX,OAAO,CAACxgB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAC1DwgB,YAAAA,OAAO,GAAGA,OAAO,CAACxgB,KAAK,CAAC,EAAE,CAAC;EAC7B,UAAA;EACAmrB,UAAAA,OAAO,CAAC;EACNvf,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAE,IAAI;EACVjO,YAAAA,OAAO,EAAPA,OAAO;EACPm3B,YAAAA,cAAc,EAAdA;EACF,WAAC,CAAC;UACJ,CAAC;UACDpb,OAAO,EAAE,SAATA,OAAOA,CAAG8M,QAAQ,EAAEjjC,OAAO,EAAEuxC,cAAc,EAAE7oC,KAAK,EAAK;EACrD9C,UAAAA,KAAI,CAAC4sC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC6lC,eAAe;EACrCnK,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;EACJy9B,YAAAA,QAAQ,EAAA/0B,cAAA,CAAA;EAAI5U,cAAAA,GAAG,EAAHA,GAAG;EAAE4N,cAAAA,IAAI,EAAE3G;EAAS,aAAA,EAAK0iC,QAAQ,CAAE;cAC/C5pC,KAAK,EAAE,IAAIgrB,KAAK,CAAA,aAAA,GAAe4e,QAAQ,CAACtE,IAAI,GAAA,GAAA,GAAIsE,QAAQ,CAAC53B,IAAM,CAAC;EAChEkmC,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;UACH,CAAC;UACDgqC,OAAO,EAAE,SAATA,OAAOA,CAAGhqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EAC3C3rC,UAAAA,KAAI,CAAC4sC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC43C,gBAAgB;EACtClc,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;EACJnM,YAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAC,SAAS,CAAC;EAC3BktB,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;UACH,CAAC;UACDkqC,SAAS,EAAE,SAAXA,SAASA,CAAGlqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EAC7C3rC,UAAAA,KAAI,CAAC4sC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC67B,iBAAiB;EACvCH,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;cACJnM,KAAK,EAAE,IAAIgrB,KAAK,CAAA,gBAAA,GAAkB0tB,YAAY,CAACC,OAAO,OAAI,CAAC;EAC3DT,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;EACH,QAAA;SACD;EACD,MAAA,IAAI0oC,UAAU,EAAE;UACdkB,SAAS,CAAClB,UAAU,GAAG,UAAC1oC,KAAK,EAAE1I,OAAO,EAAEkH,IAAI,EAAEqqC,cAAc,EAAA;EAAA,UAAA,OAC1DH,UAAU,CAAC;EACT5rC,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAE,IAAI;EACVjO,YAAAA,OAAO,EAAElT,IAAmB;EAC5BqqC,YAAAA,cAAc,EAAdA;EACF,WAAC,CAAC;EAAA,QAAA,CAAA;EACN,MAAA;QACAjrC,MAAM,CAAC6qC,IAAI,CAACU,aAAa,EAAEE,YAAY,EAAEO,SAAS,CAAC;EACrD,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAn2C,MAAA,CAEM02C,QAAQ,GAAf,SAAOA,QAAQA,CACbrtC,IAAc,EACd6iB,IAAU,EACV+oB,UAAwC,EACf;EAAA,IAAA,IAAAtnC,MAAA,GAAA,IAAA;MACzB,IAAI,CAACxB,KAAK,EAAE;EAEZ,IAAA,IAAM8e,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAMoqB,eAAe,GAAGpqB,MAAM,CAACqqB,OAAO;EACtC,IAAA,IAAMC,cAAc,GAAGtqB,MAAM,CAAC9gB,MAAM;EAEpC,IAAA,OAAO,IAAIwe,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;QACtC,IAAIpmC,MAAI,CAACxD,MAAM,EAAE;EACfwD,QAAAA,MAAI,CAACxD,MAAM,CAACjI,OAAO,EAAE;EACvB,MAAA;EACA,MAAA,IAAImH,IAAI,CAAC+B,GAAG,IAAI8gB,IAAI,CAAC9gB,GAAG,EAAE;EACxB2oC,QAAAA,MAAM,CAAC0B,kBAAkB,CAACpsC,IAAI,EAAE6iB,IAAI,CAAC,CAAC;EACtC,QAAA;EACF,MAAA;EACA,MAAA,IAAM/hB,MAAM,GAAIwD,MAAI,CAACxD,MAAM,GAAGkrC,eAAe,GACzC,IAAIA,eAAe,CAACpqB,MAAM,CAAC,GAC1B,IAAIsqB,cAAc,CAACtqB,MAAM,CAAoC;EAClE,MAAA,IAAMyqB,aAAa,GAAGC,mBAAmB,CAACtsC,IAAI,EAAE6iB,IAAI,CAAC;QACrD7iB,IAAI,CAACc,MAAM,GAAGA,MAAM;EACpB;QACA,IAAMq3B,UAAU,GAAGS,4BAA4B,CAC7ChX,MAAM,CAACgc,cAAc,CAAC/0B,OACxB,CAAC;EACD,MAAA,IAAM0jC,YAAiC,GAAG;EACxCpU,QAAAA,UAAU,EAAVA,UAAU;UACVqU,OAAO,EAAErU,UAAU,CAACsU,aAAa;EACjCC,QAAAA,QAAQ,EAAE,CAAC;EACXC,QAAAA,UAAU,EAAE,CAAC;EACbC,QAAAA,aAAa,EAAE,CAAC;EAChBC,QAAAA,aAAa,EAAErB;SAChB;EACD;EACA3oB,MAAAA,IAAI,CAAC3f,KAAK,GAAGpC,MAAM,CAACoC,KAAK;EACzBpC,MAAAA,MAAM,CAAC6qC,IAAI,CAACU,aAAa,EAAEE,YAAY,EAAE;UACvCQ,SAAS,EAAE,SAAXA,SAASA,CAAGtP,QAAQ,EAAEv6B,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EACvDznC,UAAAA,MAAI,CAAC0oC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;EAC9BwD,UAAAA,MAAI,CAACgpC,mBAAmB,CAACttC,IAAI,EAAE6iB,IAAI,CAAC;EACpC,UAAA,IAAM0qB,cAA8B,GAAG;EACrCvtC,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAJA,IAAI;cACJjO,OAAO,EAAE6oB,QAAQ,CAAC/7B,IAAmB;EACrCqqC,YAAAA,cAAc,EAAdA;aACD;YACDH,UAAU,CAAC2B,cAAc,CAAC;YAC1BhuB,OAAO,CAACguB,cAAc,CAAC;UACzB,CAAC;UACD5c,OAAO,EAAE,SAATA,OAAOA,CAAG8M,QAAQ,EAAEjjC,OAAO,EAAEuxC,cAAc,EAAE7oC,KAAK,EAAK;EACrDoB,UAAAA,MAAI,CAAC0oC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC6lC,eAAe;EACrCnK,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAJA,IAAI;EACJ4a,YAAAA,QAAQ,EAAA/0B,cAAA,CAAA;gBACN5U,GAAG,EAAEu4C,aAAa,CAACv4C,GAAG;EACtB4N,cAAAA,IAAI,EAAE3G;EAAS,aAAA,EACZ0iC,QAAQ,CACZ;cACD5pC,KAAK,EAAE,IAAIgrB,KAAK,CAAA,aAAA,GAAe4e,QAAQ,CAACtE,IAAI,GAAA,GAAA,GAAIsE,QAAQ,CAAC53B,IAAM,CAAC;EAChEkmC,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;UACH,CAAC;UACDgqC,OAAO,EAAE,SAATA,OAAOA,CAAGhqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;YAC3C/rC,IAAI,CAACkD,KAAK,CAACvF,OAAO,GAAGklB,IAAI,CAAC3f,KAAK,CAACvF,OAAO;EACvC2G,UAAAA,MAAI,CAAC0oC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC43C,gBAAgB;EACtClc,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAJA,IAAI;EACJhvB,YAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAC,SAAS,CAAC;EAC3BktB,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;UACH,CAAC;UACDkqC,SAAS,EAAE,SAAXA,SAASA,CAAGlqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EAC7CznC,UAAAA,MAAI,CAAC0oC,WAAW,CAAChtC,IAAI,EAAEc,MAAM,CAAC;YAC9B4pC,MAAM,CACJ,IAAImB,SAAS,CAAC;cACZ9xC,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;cAC9BxpB,OAAO,EAAE/sB,YAAY,CAAC67B,iBAAiB;EACvCH,YAAAA,KAAK,EAAE,KAAK;EACZjxB,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAJA,IAAI;cACJhvB,KAAK,EAAE,IAAIgrB,KAAK,CAAA,gBAAA,GAAkB0tB,YAAY,CAACC,OAAO,OAAI,CAAC;EAC3DT,YAAAA,cAAc,EAAdA,cAAc;EACd7oC,YAAAA,KAAK,EAALA;EACF,WAAC,CACH,CAAC;EACH,QAAA;EACF,OAAC,CAAC;EACJ,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAvM,MAAA,CAEO22C,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAACttC,IAAc,EAAE6iB,IAAU,EAAE;EACtD,IAAA,IAAM2qB,SAAS,GAAGxtC,IAAI,CAACkD,KAAK;EAC5B,IAAA,IAAMuqC,SAAS,GAAG5qB,IAAI,CAAC3f,KAAK;EAC5B,IAAA,IAAMwqC,SAAS,GAAGD,SAAS,CAAC3vC,KAAK;EACjC0vC,IAAAA,SAAS,CAAC5vC,MAAM,IAAI6vC,SAAS,CAAC7vC,MAAM;EACpC,IAAA,IAAI8vC,SAAS,EAAE;EACb,MAAA,IAAMC,aAAa,GAAG/4C,IAAI,CAAC24B,KAAK,CAACvtB,IAAI,CAACY,QAAQ,GAAGiiB,IAAI,CAACjiB,QAAQ,CAAC;EAC/D,MAAA,IAAMgtC,cAAc,GAAGh5C,IAAI,CAAC+D,GAAG,CAC7B/D,IAAI,CAAC24B,KAAK,CAACigB,SAAS,CAAC5vC,MAAM,GAAG8vC,SAAS,CAAC,EACxCC,aACF,CAAC;EACD,MAAA,IAAME,iBAAiB,GAAGF,aAAa,GAAGC,cAAc;EACxD,MAAA,IAAME,iBAAiB,GACrBD,iBAAiB,GAAGj5C,IAAI,CAAC24B,KAAK,CAACigB,SAAS,CAAC5vC,MAAM,GAAGgwC,cAAc,CAAC;EACnEJ,MAAAA,SAAS,CAAC1vC,KAAK,GAAG0vC,SAAS,CAAC5vC,MAAM,GAAGkwC,iBAAiB;EACxD,IAAA,CAAC,MAAM;EACLN,MAAAA,SAAS,CAAC1vC,KAAK,GAAGlJ,IAAI,CAACsD,GAAG,CAACs1C,SAAS,CAAC5vC,MAAM,EAAE4vC,SAAS,CAAC1vC,KAAK,CAAC;EAC/D,IAAA;EACA,IAAA,IAAMiwC,WAAW,GAAGP,SAAS,CAACvvC,OAAO;EACrC,IAAA,IAAM+vC,WAAW,GAAGP,SAAS,CAACxvC,OAAO;MACrC,IAAI8vC,WAAW,CAAC7vC,KAAK,EAAE;EACrB;QACA6vC,WAAW,CAAC5vC,KAAK,IAAI6vC,WAAW,CAAC7vC,KAAK,GAAG6vC,WAAW,CAAC9vC,KAAK;EAC5D,IAAA,CAAC,MAAM;EACL6vC,MAAAA,WAAW,CAAC7vC,KAAK,GAAG8vC,WAAW,CAAC9vC,KAAK;EACrC6vC,MAAAA,WAAW,CAAC5vC,KAAK,GAAG6vC,WAAW,CAAC7vC,KAAK;EACvC,IAAA;EACA4vC,IAAAA,WAAW,CAAC3vC,GAAG,GAAG4vC,WAAW,CAAC5vC,GAAG;IACnC,CAAC;IAAAzH,MAAA,CAEOq2C,WAAW,GAAnB,SAAQA,WAAWA,CAAChtC,IAAc,EAAEc,MAAqC,EAAE;MACzEd,IAAI,CAACc,MAAM,GAAG,IAAI;EAClB,IAAA,IAAI,IAAI,CAACA,MAAM,KAAKA,MAAM,EAAE;EAC1B5G,MAAAA,IAAI,CAAC+zC,YAAY,CAAC,IAAI,CAACvC,eAAe,CAAC;QACvC,IAAI,CAAC5qC,MAAM,GAAG,IAAI;EACpB,IAAA;MACAA,MAAM,CAACjI,OAAO,EAAE;IAClB,CAAC;EAAA,EAAA,OAAA4yC,cAAA;EAAA,CAAA,EAAA;EAGH,SAASa,mBAAmBA,CAC1BtsC,IAAc,EACd6iB,IAAiB,EACM;EAAA,EAAA,IADvBA,IAAiB,KAAA,MAAA,EAAA;EAAjBA,IAAAA,IAAiB,GAAG,IAAI;EAAA,EAAA;EAExB,EAAA,IAAMqrB,OAAoB,GAAGrrB,IAAI,IAAI7iB,IAAI;EACzC,EAAA,IAAMqsC,aAAoC,GAAG;EAC3CrsC,IAAAA,IAAI,EAAJA,IAAI;EACJ6iB,IAAAA,IAAI,EAAJA,IAAI;EACJsrB,IAAAA,YAAY,EAAE,aAAa;MAC3Br6C,GAAG,EAAEo6C,OAAO,CAACp6C,GAAG;MAChBs6C,OAAO,EAAE,EAAE;EACXC,IAAAA,UAAU,EAAE,CAAC;EACbC,IAAAA,QAAQ,EAAE;KACX;EACD,EAAA,IAAMpwC,KAAK,GAAGgwC,OAAO,CAACK,oBAA8B;EACpD,EAAA,IAAMnwC,GAAG,GAAG8vC,OAAO,CAAC7uC,kBAA4B;IAChD,IAAI8D,cAAA,CAAgBjF,KAAK,CAAC,IAAIkF,cAAA,CAAgBhF,GAAG,CAAC,EAAE;EAAA,IAAA,IAAAowC,iBAAA;MAClD,IAAIC,cAAc,GAAGvwC,KAAK;MAC1B,IAAIwwC,YAAY,GAAGtwC,GAAG;EACtB,IAAA,IACE4B,IAAI,CAACC,EAAE,KAAK,aAAa,IACzB0uC,yBAAyB,CAAA,CAAAH,iBAAA,GAACxuC,IAAI,CAAC0M,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB8hC,iBAAA,CAAkBI,MAAM,CAAC,EACnD;EACA;EACA;EACA;EACA,MAAA,IAAMC,WAAW,GAAGzwC,GAAG,GAAGF,KAAK;QAC/B,IAAI2wC,WAAW,GAAG,EAAE,EAAE;UACpBH,YAAY,GAAGtwC,GAAG,IAAI,EAAE,GAAIywC,WAAW,GAAG,EAAG,CAAC;EAChD,MAAA;QACA,IAAI3wC,KAAK,KAAK,CAAC,EAAE;UACfmuC,aAAa,CAACY,OAAO,GAAG,IAAI;UAC5BwB,cAAc,GAAGvwC,KAAK,GAAG,EAAE;EAC7B,MAAA;EACF,IAAA;MACAmuC,aAAa,CAACgC,UAAU,GAAGI,cAAc;MACzCpC,aAAa,CAACiC,QAAQ,GAAGI,YAAY;EACvC,EAAA;EACA,EAAA,OAAOrC,aAAa;EACtB;EAEA,SAASD,kBAAkBA,CAACpsC,IAAc,EAAE6iB,IAAW,EAAa;EAClE,EAAA,IAAMhvB,KAAK,GAAG,IAAIgrB,KAAK,CAAA,MAAA,IAAQ7e,IAAI,CAAC+B,GAAG,GAAG,KAAK,GAAG,WAAW,YAAQ,CAAC;EACtE,EAAA,IAAM+sC,SAA6B,GAAG;MACpC/0C,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;MAC5BzsB,OAAO,EAAE/sB,YAAY,CAACmmC,QAAQ;EAC9BzK,IAAAA,KAAK,EAAE,KAAK;EACZjxB,IAAAA,IAAI,EAAJA,IAAI;EACJnM,IAAAA,KAAK,EAALA,KAAK;EACLk4C,IAAAA,cAAc,EAAE;KACjB;EACD,EAAA,IAAIlpB,IAAI,EAAE;MACRisB,SAAS,CAACjsB,IAAI,GAAGA,IAAI;EACvB,EAAA;IACA,CAACA,IAAI,GAAGA,IAAI,GAAG7iB,IAAI,EAAEkD,KAAK,CAACvF,OAAO,GAAG,IAAI;EACzC,EAAA,OAAO,IAAIkuC,SAAS,CAACiD,SAAS,CAAC;EACjC;EAEA,SAASH,yBAAyBA,CAACC,MAAM,EAAE;EACzC,EAAA,OAAOA,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,SAAS;EACrD;EAEA,IAAa/C,SAAS,0BAAAmD,MAAA,EAAA;IAEpB,SAAAnD,SAAAA,CAAYnqC,IAAwB,EAAE;EAAA,IAAA,IAAAyxB,MAAA;MACpCA,MAAA,GAAA6b,MAAA,CAAA3uC,IAAA,CAAA,IAAA,EAAMqB,IAAI,CAAC7N,KAAK,CAACsrC,OAAO,CAAC,IAAA,IAAA;EAAChM,IAAAA,MAAA,CAFZzxB,IAAI,GAAA,MAAA;MAGlByxB,MAAA,CAAKzxB,IAAI,GAAGA,IAAI;EAAC,IAAA,OAAAyxB,MAAA;EACnB,EAAA;IAAClxB,cAAA,CAAA4pC,SAAA,EAAAmD,MAAA,CAAA;EAAA,EAAA,OAAAnD,SAAA;EAAA,CAAA,cAAAoD,gBAAA,CAL4BpwB,KAAK,CAAA,CAAA;;ECvXpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EA5BA,IA6BqBqwB,QAAQ,0BAAA7jB,OAAA,EAAA;EAM3B,EAAA,SAAA6jB,QAAAA,CAAYh2C,KAAa,EAAEC,MAAe,EAAE;EAAA,IAAA,IAAAiH,KAAA;MAC1CA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,OAAMnH,KAAK,EAAEC,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CANN+uC,UAAU,GAAA,MAAA;MAAA/uC,KAAA,CACnBgvC,UAAU,GAAkB,IAAI;MAAAhvC,KAAA,CAChCivC,aAAa,GAAkB,IAAI;MAAAjvC,KAAA,CACnCkvC,cAAc,GAAG,CAAC;MAIxBlvC,KAAA,CAAK+uC,UAAU,GAAG/uC,KAAA,CAAKmvC,IAAI,CAAC71C,IAAI,CAAA0G,KAAK,CAAC;EAAC,IAAA,OAAAA,KAAA;EACzC,EAAA;IAAC6B,cAAA,CAAAitC,QAAA,EAAA7jB,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAu4C,QAAA,CAAAt4C,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC22C,mBAAmB,EAAE;MAC1B,IAAI,CAACC,kBAAkB,EAAE;IAC3B,CAAC;EAAA94C,EAAAA,MAAA,CAES64C,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B;MACA,IAAI,CAACE,aAAa,EAAE;MACpB,IAAI,CAACrd,aAAa,EAAE;IACtB,CAAC;IAAA17B,MAAA,CAES84C,kBAAkB,GAA5B,SAAUA,kBAAkBA,GAAG,CAAC,CAAC;EAAA94C,EAAAA,MAAA,CAE1Bg5C,WAAW,GAAlB,SAAOA,WAAWA,GAAY;EAC5B,IAAA,OAAO,CAAC,CAAC,IAAI,CAACN,aAAa;IAC7B,CAAC;EAAA14C,EAAAA,MAAA,CAEMi5C,WAAW,GAAlB,SAAOA,WAAWA,GAAY;EAC5B,IAAA,OAAO,CAAC,CAAC,IAAI,CAACR,UAAU;EAC1B,EAAA;;EAEA;EACF;EACA;EACA;EAHEz4C,EAAAA,MAAA,CAIOs4B,WAAW,GAAlB,SAAOA,WAAWA,CAAC4gB,MAAc,EAAW;EAC1C,IAAA,IAAI,CAAC,IAAI,CAACR,aAAa,EAAE;QACvB,IAAI,CAACC,cAAc,GAAG,CAAC;EACvB,MAAA,IAAI,CAACD,aAAa,GAAGn1C,IAAI,CAAC+0B,WAAW,CAAC,IAAI,CAACkgB,UAAU,EAAEU,MAAM,CAAC;EAC9D,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;EACd,EAAA;;EAEA;EACF;EACA;EAFEl5C,EAAAA,MAAA,CAGO07B,aAAa,GAApB,SAAOA,aAAaA,GAAY;MAC9B,IAAI,IAAI,CAACgd,aAAa,EAAE;EACtBn1C,MAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAACgd,aAAa,CAAC;QACtC,IAAI,CAACA,aAAa,GAAG,IAAI;EACzB,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;EACd,EAAA;;EAEA;EACF;EACA;EAFE14C,EAAAA,MAAA,CAGO+4C,aAAa,GAApB,SAAOA,aAAaA,GAAY;MAC9B,IAAI,IAAI,CAACN,UAAU,EAAE;EACnBl1C,MAAAA,IAAI,CAAC+zC,YAAY,CAAC,IAAI,CAACmB,UAAU,CAAC;QAClC,IAAI,CAACA,UAAU,GAAG,IAAI;EACtB,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;EACd,EAAA;;EAEA;EACF;EACA;EACA;EACA;EAJEz4C,EAAAA,MAAA,CAKO44C,IAAI,GAAX,SAAOA,IAAIA,GAAS;MAClB,IAAI,CAACD,cAAc,EAAE;EACrB,IAAA,IAAI,IAAI,CAACA,cAAc,KAAK,CAAC,EAAE;QAC7B,IAAI,CAACQ,MAAM,EAAE;EACb;EACA;EACA,MAAA,IAAI,IAAI,CAACR,cAAc,GAAG,CAAC,EAAE;EAC3B;UACA,IAAI,CAACS,aAAa,EAAE;EACtB,MAAA;QACA,IAAI,CAACT,cAAc,GAAG,CAAC;EACzB,IAAA;IACF,CAAC;EAAA34C,EAAAA,MAAA,CAEMo5C,aAAa,GAApB,SAAOA,aAAaA,GAAS;MAC3B,IAAI,CAACL,aAAa,EAAE;EACpB,IAAA,IAAI,CAACN,UAAU,GAAGl1C,IAAI,CAAC81C,UAAU,CAAC,IAAI,CAACb,UAAU,EAAE,CAAC,CAAC;EACvD,EAAA;;EAEA;EACF;EACA;EACA;IAHEx4C,MAAA,CAIUm5C,MAAM,GAAhB,SAAUA,MAAMA,GAAS,CAAC,CAAC;EAAA,EAAA,OAAAZ,QAAA;EAAA,CAAA,CAjGSj2C,MAAM,CAAA;;ECtB5C,IAAag3C,aAAa,GAiBxB,SAAAA,aAAAA,CACEjvC,KAAa,EACbf,EAAU,EACVjG,EAAU,EACVwM,IAAI,EACJqc,IAAI,EACJ7f,OAAO,EACP;EAAA,EAAA,IAHAwD,IAAI,KAAA,MAAA,EAAA;EAAJA,IAAAA,IAAI,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IACRqc,IAAI,KAAA,MAAA,EAAA;MAAJA,IAAI,GAAG,EAAE;EAAA,EAAA;EAAA,EAAA,IACT7f,OAAO,KAAA,MAAA,EAAA;EAAPA,IAAAA,OAAO,GAAG,KAAK;EAAA,EAAA;EAAA,EAAA,IAAA,CAtBDhC,KAAK,GAAA,MAAA;EAAA,EAAA,IAAA,CACLf,EAAE,GAAA,MAAA;EAAA,EAAA,IAAA,CACF4iB,IAAI,GAAA,MAAA;EAAA,EAAA,IAAA,CACJ7oB,EAAE,GAAA,MAAA;EAAA,EAAA,IAAA,CACFwM,IAAI,GAAA,MAAA;EAAA,EAAA,IAAA,CACJxD,OAAO,GAAA,MAAA;EAAA,EAAA,IAAA,CACPktC,WAAW,GACzBC,uBAAuB,EAAE;EAAA,EAAA,IAAA,CACX7xC,SAAS,GAErB;MACFuG,KAAK,EAAEsrC,uBAAuB,EAAE;MAChCrrC,KAAK,EAAEqrC,uBAAuB,EAAE;MAChCprC,UAAU,EAAEorC,uBAAuB;KACpC;IAUC,IAAI,CAACnvC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACf,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACjG,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACwM,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACqc,IAAI,GAAGA,IAAI;IAChB,IAAI,CAAC7f,OAAO,GAAGA,OAAO;EACxB,CAAC;EAGH,SAASmtC,uBAAuBA,GAA8B;IAC5D,OAAO;EAAEjyC,IAAAA,KAAK,EAAE,CAAC;EAAEkyC,IAAAA,YAAY,EAAE,CAAC;EAAEC,IAAAA,UAAU,EAAE,CAAC;EAAEjyC,IAAAA,GAAG,EAAE;KAAG;EAC7D;;EC7CA;EACA;EACA;EACA;EACA;EACA;EACA;;EAsBA,IAAMkyC,YAAwB,GAAG;EAC/Bz0C,EAAAA,MAAM,EAAE,CAAC;IACTqC,KAAK,EAAE,SAAPA,KAAKA,GAAA;EAAA,IAAA,OAAQ,CAAC;EAAA,EAAA,CAAA;IACdE,GAAG,EAAE,SAALA,GAAGA,GAAA;EAAA,IAAA,OAAQ,CAAC;EAAA,EAAA;EACd,CAAC;EAED,IAAamyC,YAAY,gBAAA,YAAA;EAAA,EAAA,SAAAA,YAAAA,GAAA,CAAA;EACvB;EACF;EACA;IAFEA,YAAA,CAGOC,UAAU,GAAjB,SAAOA,UAAUA,CAACrrB,KAAiB,EAAE2b,QAAgB,EAAW;EAC9D,IAAA,IAAI3b,KAAK,EAAE;EACT,MAAA,IAAMic,QAAQ,GAAGmP,YAAY,CAACE,WAAW,CAACtrB,KAAK,CAAC;QAChD,KAAK,IAAIpoB,CAAC,GAAGqkC,QAAQ,CAACvlC,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACnC,QAAA,IAAI+jC,QAAQ,IAAIM,QAAQ,CAACljC,KAAK,CAACnB,CAAC,CAAC,IAAI+jC,QAAQ,IAAIM,QAAQ,CAAChjC,GAAG,CAACrB,CAAC,CAAC,EAAE;EAChE,UAAA,OAAO,IAAI;EACb,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;EAAAwzC,EAAAA,YAAA,CAEMG,cAAc,GAArB,SAAOA,cAAcA,CAACvrB,KAAwB,EAAqB;EACjE,IAAA,IAAIA,KAAK,EAAE;EACT,MAAA,IAAMmb,UAAU,GAAGiQ,YAAY,CAACE,WAAW,CAACtrB,KAAK,CAAC;EAClD,MAAA,OAAOorB,YAAY,CAACI,iBAAiB,CAACrQ,UAAU,CAAC;EACnD,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;EAAAiQ,EAAAA,YAAA,CAEMI,iBAAiB,GAAxB,SAAOA,iBAAiBA,CAACrQ,UAAsB,EAAqB;MAClE,IAAMc,QAA2B,GAAG,EAAE;EACtC,IAAA,KAAK,IAAIrkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGujC,UAAU,CAACzkC,MAAM,EAAEkB,CAAC,EAAE,EAAE;QAC1CqkC,QAAQ,CAAC17B,IAAI,CAAC;EAAExH,QAAAA,KAAK,EAAEoiC,UAAU,CAACpiC,KAAK,CAACnB,CAAC,CAAC;EAAEqB,QAAAA,GAAG,EAAEkiC,UAAU,CAACliC,GAAG,CAACrB,CAAC;EAAE,OAAC,CAAC;EACvE,IAAA;EACA,IAAA,OAAOqkC,QAAQ;IACjB,CAAC;IAAAmP,YAAA,CAEMvjB,UAAU,GAAjB,SAAOA,UAAUA,CACf7H,KAAwB,EACxBmS,GAAW,EACXsZ,eAAuB,EACX;EACZ,IAAA,IAAIzrB,KAAK,EAAE;EACT,MAAA,IAAMic,QAAQ,GAAGmP,YAAY,CAACG,cAAc,CAACvrB,KAAK,CAAC;QACnD,IAAIic,QAAQ,CAACvlC,MAAM,EAAE;UACnB,OAAO00C,YAAY,CAACM,YAAY,CAACzP,QAAQ,EAAE9J,GAAG,EAAEsZ,eAAe,CAAC;EAClE,MAAA;EACF,IAAA;MACA,OAAO;EAAEj0C,MAAAA,GAAG,EAAE,CAAC;EAAEuB,MAAAA,KAAK,EAAEo5B,GAAG;EAAEl5B,MAAAA,GAAG,EAAEk5B,GAAG;EAAEwZ,MAAAA,aAAa,EAAE;OAAI;IAC5D,CAAC;IAAAP,YAAA,CAEMM,YAAY,GAAnB,SAAOA,YAAYA,CACjBzP,QAA2B,EAC3B9J,GAAW,EACXsZ,eAAuB,EACX;MACZtZ,GAAG,GAAG1iC,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEo/B,GAAG,CAAC;EACtB;EACA,IAAA,IAAI8J,QAAQ,CAACvlC,MAAM,GAAG,CAAC,EAAE;EACvBulC,MAAAA,QAAQ,CAAC2P,IAAI,CAAC,UAACC,CAAC,EAAEhkC,CAAC,EAAA;EAAA,QAAA,OAAKgkC,CAAC,CAAC9yC,KAAK,GAAG8O,CAAC,CAAC9O,KAAK,IAAI8O,CAAC,CAAC5O,GAAG,GAAG4yC,CAAC,CAAC5yC,GAAG;QAAA,CAAA,CAAC;EAC7D,IAAA;MAEA,IAAI0yC,aAAqB,GAAG,EAAE;MAC9B,IAAIG,SAA4B,GAAG,EAAE;EACrC,IAAA,IAAIL,eAAe,EAAE;EACnB;EACA;EACA;EACA,MAAA,KAAK,IAAI7zC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqkC,QAAQ,CAACvlC,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACxC,QAAA,IAAIu6B,GAAG,IAAI8J,QAAQ,CAACrkC,CAAC,CAAC,CAACmB,KAAK,IAAIo5B,GAAG,IAAI8J,QAAQ,CAACrkC,CAAC,CAAC,CAACqB,GAAG,EAAE;EACtD0yC,UAAAA,aAAa,GAAG/zC,CAAC;EACnB,QAAA;EACA,QAAA,IAAMm0C,OAAO,GAAGD,SAAS,CAACp1C,MAAM;EAChC,QAAA,IAAIq1C,OAAO,EAAE;YACX,IAAMC,OAAO,GAAGF,SAAS,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC9yC,GAAG;EAC1C;YACA,IAAIgjC,QAAQ,CAACrkC,CAAC,CAAC,CAACmB,KAAK,GAAGizC,OAAO,GAAGP,eAAe,EAAE;EACjD;EACA;EACA;EACA;cACA,IAAIxP,QAAQ,CAACrkC,CAAC,CAAC,CAACqB,GAAG,GAAG+yC,OAAO,EAAE;EAC7BF,cAAAA,SAAS,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC9yC,GAAG,GAAGgjC,QAAQ,CAACrkC,CAAC,CAAC,CAACqB,GAAG;EAC9C,YAAA;EACF,UAAA,CAAC,MAAM;EACL;EACA6yC,YAAAA,SAAS,CAACvrC,IAAI,CAAC07B,QAAQ,CAACrkC,CAAC,CAAC,CAAC;EAC7B,UAAA;EACF,QAAA,CAAC,MAAM;EACL;EACAk0C,UAAAA,SAAS,CAACvrC,IAAI,CAAC07B,QAAQ,CAACrkC,CAAC,CAAC,CAAC;EAC7B,QAAA;EACF,MAAA;EACF,IAAA,CAAC,MAAM;EACLk0C,MAAAA,SAAS,GAAG7P,QAAQ;EACtB,IAAA;MAEA,IAAIgQ,SAAS,GAAG,CAAC;EAEjB,IAAA,IAAIC,SAA6B;;EAEjC;MACA,IAAIC,WAAmB,GAAGha,GAAG;MAC7B,IAAIZ,SAAiB,GAAGY,GAAG;EAC3B,IAAA,KAAK,IAAIv6B,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGk0C,SAAS,CAACp1C,MAAM,EAAEkB,EAAC,EAAE,EAAE;EACzC,MAAA,IAAMmB,KAAK,GAAG+yC,SAAS,CAACl0C,EAAC,CAAC,CAACmB,KAAK;EAChC,MAAA,IAAME,GAAG,GAAG6yC,SAAS,CAACl0C,EAAC,CAAC,CAACqB,GAAG;EAC5B;EACA,MAAA,IAAI0yC,aAAa,KAAK,EAAE,IAAIxZ,GAAG,IAAIp5B,KAAK,IAAIo5B,GAAG,IAAIl5B,GAAG,EAAE;EACtD0yC,QAAAA,aAAa,GAAG/zC,EAAC;EACnB,MAAA;QACA,IAAIu6B,GAAG,GAAGsZ,eAAe,IAAI1yC,KAAK,IAAIo5B,GAAG,GAAGl5B,GAAG,EAAE;EAC/C;EACAkzC,QAAAA,WAAW,GAAGpzC,KAAK;EACnBw4B,QAAAA,SAAS,GAAGt4B,GAAG;UACfgzC,SAAS,GAAG1a,SAAS,GAAGY,GAAG;EAC7B,MAAA,CAAC,MAAM,IAAIA,GAAG,GAAGsZ,eAAe,GAAG1yC,KAAK,EAAE;EACxCmzC,QAAAA,SAAS,GAAGnzC,KAAK;EACjB,QAAA;EACF,MAAA;EACF,IAAA;MACA,OAAO;EACLvB,MAAAA,GAAG,EAAEy0C,SAAS;QACdlzC,KAAK,EAAEozC,WAAW,IAAI,CAAC;QACvBlzC,GAAG,EAAEs4B,SAAS,IAAI,CAAC;EACnB2a,MAAAA,SAAS,EAATA,SAAS;EACTjQ,MAAAA,QAAQ,EAARA,QAAQ;EACR0P,MAAAA,aAAa,EAAbA;OACD;EACH,EAAA;;EAEA;EACF;EACA;EACA;EAHEP,EAAAA,YAAA,CAIOE,WAAW,GAAlB,SAAOA,WAAWA,CAACtrB,KAAiB,EAAc;MAChD,IAAI;EACF,MAAA,OAAOA,KAAK,CAACic,QAAQ,IAAIkP,YAAY;MACvC,CAAC,CAAC,OAAO11C,CAAC,EAAE;EACVzB,MAAAA,MAAM,CAACzC,GAAG,CAAC,8BAA8B,EAAEkE,CAAC,CAAC;EAC7C,MAAA,OAAO01C,YAAY;EACrB,IAAA;IACF,CAAC;EAAA,EAAA,OAAAC,YAAA;EAAA,CAAA,EAAA;;ECtKH,IAAMgB,0BAA0B,GAAG,yBAAyB;EAErD,SAASC,qBAAqBA,CAACr0C,GAAW,EAAW;EAC1D,EAAA,OAAOo0C,0BAA0B,CAACl7B,IAAI,CAAClZ,GAAG,CAAC;EAC7C;EAEO,SAASs0C,mBAAmBA,CACjCC,MAGC,EACDx8C,KAAa,EACL;IACR,IAAIw8C,MAAM,CAACC,YAAY,KAAK,IAAI,IAAID,MAAM,CAACE,eAAe,EAAE;EAC1D,IAAA,IAAMD,YAAY,GAAGD,MAAM,CAACC,YAAY;MACxC,OAAOz8C,KAAK,CAACT,OAAO,CAClB88C,0BAA0B,EAC1B,UAACM,iBAAyB,EAAK;EAC7B,MAAA,IAAMC,YAAY,GAAGD,iBAAiB,CAACn1C,SAAS,CAC9C,CAAC,EACDm1C,iBAAiB,CAACh2C,MAAM,GAAG,CAC7B,CAAC;EACD,MAAA,IAAMk2C,aAAa,GAAGJ,YAAY,oBAAZA,YAAY,CAAGG,YAAY,CAAC;QAClD,IAAIC,aAAa,KAAKh3C,SAAS,EAAE;EAC/B22C,QAAAA,MAAM,CAACM,oBAAoB,KAA3BN,MAAM,CAACM,oBAAoB,GAAK,IAAInzB,KAAK,CAAA,+DAAA,GACwBizB,YAAY,GAAA,IAC7E,CAAC,CAAA;EACD,QAAA,OAAOD,iBAAiB;EAC1B,MAAA;EACA,MAAA,OAAOE,aAAa;EACtB,IAAA,CACF,CAAC;EACH,EAAA;EACA,EAAA,OAAO78C,KAAK;EACd;EAEO,SAAS+8C,qBAAqBA,CACnCP,MAGC,EACDQ,IAAc,EACdC,SAAiB,EACjB;EACA,EAAA,IAAIR,YAAY,GAAGD,MAAM,CAACC,YAAY;IACtC,IAAI,CAACA,YAAY,EAAE;EACjBD,IAAAA,MAAM,CAACC,YAAY,GAAGA,YAAY,GAAG,EAAE;EACzC,EAAA;EACA,EAAA,IAAIS,IAAY;EAChB,EAAA,IAAIC,KAAK;IACT,IAAI,YAAY,IAAIH,IAAI,EAAE;MACxBE,IAAI,GAAGF,IAAI,CAACI,UAAU;MACtB,IAAI;QACF,IAAMrvB,YAAY,GAAG,IAAI/oB,IAAI,CAACnG,GAAG,CAACo+C,SAAS,CAAC,CAAClvB,YAAY;EACzD,MAAA,IAAIA,YAAY,CAAC8C,GAAG,CAACqsB,IAAI,CAAC,EAAE;EAC1BC,QAAAA,KAAK,GAAGpvB,YAAY,CAACjqB,GAAG,CAACo5C,IAAI,CAAC;EAChC,MAAA,CAAC,MAAM;EACL,QAAA,MAAM,IAAIvzB,KAAK,CAAA,IAAA,GACTuzB,IAAI,GAAA,kDAAA,GAAiDD,SAAS,OACpE,CAAC;EACH,MAAA;MACF,CAAC,CAAC,OAAOt+C,KAAK,EAAE;EACd69C,MAAAA,MAAM,CAACM,oBAAoB,KAA3BN,MAAM,CAACM,oBAAoB,GAAK,IAAInzB,KAAK,CAAA,2BAAA,GACXhrB,KAAK,CAACsrC,OACpC,CAAC,CAAA;EACH,IAAA;EACF,EAAA,CAAC,MAAM;MACLiT,IAAI,GAAGF,IAAI,CAACE,IAAI;MAChBC,KAAK,GAAGH,IAAI,CAACG,KAAK;EACpB,EAAA;IACA,IAAID,IAAI,IAAIT,YAAY,EAAE;EACxBD,IAAAA,MAAM,CAACM,oBAAoB,KAA3BN,MAAM,CAACM,oBAAoB,GAAK,IAAInzB,KAAK,CAAA,uDAAA,GACgBuzB,IAAI,GAAA,IAC7D,CAAC,CAAA;EACH,EAAA,CAAC,MAAM;EACLT,IAAAA,YAAY,CAACS,IAAI,CAAC,GAAGC,KAAK,IAAI,EAAE;EAClC,EAAA;EACF;EAEO,SAASE,wBAAwBA,CACtCb,MAGC,EACDQ,IAAc,EACdM,kBAAsC,EACtC;EACA,EAAA,IAAMC,MAAM,GAAGP,IAAI,CAACO,MAAM;EAC1B,EAAA,IAAID,kBAAkB,IAAIC,MAAM,IAAID,kBAAkB,EAAE;EACtD,IAAA,IAAIb,YAAY,GAAGD,MAAM,CAACC,YAAY;MACtC,IAAI,CAACA,YAAY,EAAE;EACjBD,MAAAA,MAAM,CAACC,YAAY,GAAGA,YAAY,GAAG,EAAE;EACzC,IAAA;EACAA,IAAAA,YAAY,CAACc,MAAM,CAAC,GAAGD,kBAAkB,CAACC,MAAM,CAAC;EACnD,EAAA,CAAC,MAAM;EACLf,IAAAA,MAAM,CAACM,oBAAoB,KAA3BN,MAAM,CAACM,oBAAoB,GAAK,IAAInzB,KAAK,CAAA,sEAAA,GAC+B4zB,MAAM,GAAA,IAC9E,CAAC,CAAA;EACH,EAAA;EACF;;ECnGA,IAAMC,wBAAwB,GAAG,eAAe;EAChD,IAAMC,eAAe,GAAG,2BAA2B;;EAEnD;EACA,IAAaC,QAAQ,gBAAA,YAAA;EAGnB,EAAA,SAAAA,QAAAA,CACE/uB,KAAmC,EACnC6tB,MAGC,EACD;EACA,IAAA,IAAI,OAAO7tB,KAAK,KAAK,QAAQ,EAAE;QAC7BA,KAAK,GAAG+uB,QAAQ,CAACC,aAAa,CAAChvB,KAAK,EAAE6tB,MAAM,CAAC;EAC/C,IAAA;EACA73C,IAAAA,QAAA,CAAc,IAAI,EAAEgqB,KAAK,CAAC;EAC5B,EAAA;EAAA,EAAA,IAAAltB,MAAA,GAAAi8C,QAAA,CAAAh8C,SAAA;EAAAD,EAAAA,MAAA,CAMAotB,cAAc,GAAd,SAAAA,cAAcA,CAAC+uB,QAAgB,EAAU;MACvC,IAAMC,QAAQ,GAAGzzC,QAAQ,CAAC,IAAI,CAACwzC,QAAQ,CAAC,EAAE,EAAE,CAAC;EAC7C,IAAA,IAAIC,QAAQ,GAAG/9C,MAAM,CAACK,gBAAgB,EAAE;EACtC,MAAA,OAAOma,QAAQ;EACjB,IAAA;EAEA,IAAA,OAAOujC,QAAQ;IACjB,CAAA;EAAAp8C,EAAAA,MAAA,CAEAq8C,kBAAkB,GAAlB,SAAAA,kBAAkBA,CAACF,QAAgB,EAAE;EACnC,IAAA,IAAI,IAAI,CAACA,QAAQ,CAAC,EAAE;EAClB,MAAA,IAAIG,WAAW,GAAG,CAAC,IAAI,CAACH,QAAQ,CAAC,IAAI,IAAI,EAAE1+C,KAAK,CAAC,CAAC,CAAC;EACnD6+C,MAAAA,WAAW,GAAG,CAACA,WAAW,CAACp3C,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,IAAIo3C,WAAW;QAE/D,IAAM/9C,KAAK,GAAG,IAAIoI,UAAU,CAAC21C,WAAW,CAACp3C,MAAM,GAAG,CAAC,CAAC;EACpD,MAAA,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGk2C,WAAW,CAACp3C,MAAM,GAAG,CAAC,EAAEkB,CAAC,EAAE,EAAE;UAC/C7H,KAAK,CAAC6H,CAAC,CAAC,GAAGuC,QAAQ,CAAC2zC,WAAW,CAAC7+C,KAAK,CAAC2I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EAC9D,MAAA;EAEA,MAAA,OAAO7H,KAAK;EACd,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAA;EAAAyB,EAAAA,MAAA,CAEAu8C,0BAA0B,GAA1B,SAAAA,0BAA0BA,CAACJ,QAAgB,EAAU;MACnD,IAAMC,QAAQ,GAAGzzC,QAAQ,CAAC,IAAI,CAACwzC,QAAQ,CAAC,EAAE,EAAE,CAAC;EAC7C,IAAA,IAAIC,QAAQ,GAAG/9C,MAAM,CAACK,gBAAgB,EAAE;EACtC,MAAA,OAAOma,QAAQ;EACjB,IAAA;EAEA,IAAA,OAAOujC,QAAQ;IACjB,CAAA;EAAAp8C,EAAAA,MAAA,CAEA+N,oBAAoB,GAApB,SAAAA,oBAAoBA,CAACouC,QAAgB,EAAU;EAC7C,IAAA,OAAOxxB,UAAU,CAAC,IAAI,CAACwxB,QAAQ,CAAC,CAAC;IACnC,CAAA;IAAAn8C,MAAA,CAEAmtB,aAAa,GAAb,SAAAA,aAAaA,CAACgvB,QAAgB,EAAEK,YAAoB,EAAU;EAC5D,IAAA,IAAMj+C,KAAK,GAAG,IAAI,CAAC49C,QAAQ,CAAC;EAC5B,IAAA,OAAO59C,KAAK,GAAGosB,UAAU,CAACpsB,KAAK,CAAC,GAAGi+C,YAAY;IACjD,CAAA;EAAAx8C,EAAAA,MAAA,CAEAiO,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAACkuC,QAAgB,EAAsB;MACrD,OAAO,IAAI,CAACA,QAAQ,CAAC;IACvB,CAAA;IAAAn8C,MAAA,CAEAy8C,oBAAoB,GAApB,SAAAA,oBAAoBA,CAClBN,QAAgB,EAChBO,IAAO,EACwB;EAC/B,IAAA,IAAMC,SAAS,GAAG,IAAI,CAACR,QAAQ,CAAC;EAChC,IAAA,OAAO,CAACQ,SAAS,GAAGA,SAAS,CAAC91C,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,EAAEoS,MAAM,CACvD,UAACtJ,MAAqC,EAAEitC,UAAkB,EAAK;QAC7DjtC,MAAM,CAACitC,UAAU,CAAC33B,WAAW,EAAE,CAAY,GAAG,IAAI;EAClD,MAAA,OAAOtV,MAAM;MACf,CAAC,EACD+sC,IACF,CAAC;IACH,CAAA;EAAA18C,EAAAA,MAAA,CAEAgO,IAAI,GAAJ,SAAAA,IAAIA,CAACmuC,QAAgB,EAAW;EAC9B,IAAA,OAAO,IAAI,CAACA,QAAQ,CAAC,KAAK,KAAK;IACjC,CAAA;EAAAn8C,EAAAA,MAAA,CAEA68C,iBAAiB,GAAjB,SAAAA,iBAAiBA,CAACV,QAAgB,EAKpB;MACZ,IAAMW,GAAG,GAAGf,wBAAwB,CAACgB,IAAI,CAAC,IAAI,CAACZ,QAAQ,CAAC,CAAC;MACzD,IAAIW,GAAG,KAAK,IAAI,EAAE;EAChB,MAAA,OAAO14C,SAAS;EAClB,IAAA;MAEA,OAAO;QACL+jB,KAAK,EAAExf,QAAQ,CAACm0C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC3B10B,MAAM,EAAEzf,QAAQ,CAACm0C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;OAC5B;IACH,CAAA;IAAAb,QAAA,CAEOC,aAAa,GAApB,SAAOA,aAAaA,CAClBc,KAAa,EACbjC,MAGC,EACuB;EACxB,IAAA,IAAIkC,KAA6B;MACjC,IAAM/vB,KAAK,GAAG,EAAE;MAChB,IAAMgwB,KAAK,GAAG,GAAG;MACjBlB,eAAe,CAACmB,SAAS,GAAG,CAAC;MAC7B,OAAO,CAACF,KAAK,GAAGjB,eAAe,CAACe,IAAI,CAACC,KAAK,CAAC,MAAM,IAAI,EAAE;QACrD,IAAM33C,IAAI,GAAG43C,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,EAAE;EAC5B,MAAA,IAAI7+C,KAAK,GAAG0+C,KAAK,CAAC,CAAC,CAAC;QACpB,IAAMI,YAAY,GAChB9+C,KAAK,CAAC+G,OAAO,CAAC43C,KAAK,CAAC,KAAK,CAAC,IAC1B3+C,KAAK,CAACb,WAAW,CAACw/C,KAAK,CAAC,KAAK3+C,KAAK,CAAC2G,MAAM,GAAG,CAAC;QAC/C,IAAIo4C,mBAAmB,GAAG,KAAK;EAC/B,MAAA,IAAID,YAAY,EAAE;UAChB9+C,KAAK,GAAGA,KAAK,CAACd,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5B,MAAA,CAAC,MAAM;EACL,QAAA,QAAQ4H,IAAI;EACV,UAAA,KAAK,IAAI;EACT,UAAA,KAAK,YAAY;EACjB,UAAA,KAAK,WAAW;EAChB,UAAA,KAAK,YAAY;EACfi4C,YAAAA,mBAAmB,GAAG,IAAI;EAC9B;EACF,MAAA;EACA,MAAA,IAAIvC,MAAM,KAAKsC,YAAY,IAAIC,mBAAmB,CAAC,EAAE;EACnD,QAAmC;EACjC/+C,UAAAA,KAAK,GAAGu8C,mBAAmB,CAACC,MAAM,EAAEx8C,KAAK,CAAC;EAC5C,QAAA;EACF,MAAA,CAAC,MAAM,IAAI,CAAC++C,mBAAmB,IAAI,CAACD,YAAY,EAAE;EAChD,QAAA,QAAQh4C,IAAI;EACV,UAAA,KAAK,iBAAiB;cACpB,IAAI9G,KAAK,KAAK,MAAM,EAAE;EACpB,cAAA;EACF,YAAA;EACF;EACA,UAAA,KAAK,aAAa;EAClB,UAAA,KAAK,OAAO;EACZ,UAAA,KAAK,gBAAgB;EACrB,UAAA,KAAK,OAAO;EACZ,UAAA,KAAK,WAAW;EAChB,UAAA,KAAK,UAAU;EACf,UAAA,KAAK,iBAAiB;EACtB,UAAA,KAAK,QAAQ;EACb,UAAA,KAAK,SAAS;EACd,UAAA,KAAK,UAAU;EACf,UAAA,KAAK,UAAU;EACf,UAAA,KAAK,IAAI;EACT,UAAA,KAAK,QAAQ;EACb,UAAA,KAAK,aAAa;EAClB,UAAA,KAAK,WAAW;EAChB,UAAA,KAAK,mBAAmB;EACxB,UAAA,KAAK,UAAU;EACf,UAAA,KAAK,MAAM;EACX,UAAA,KAAK,YAAY;EACjB,UAAA,KAAK,YAAY;EACjB,UAAA,KAAK,6BAA6B;EAClC,UAAA,KAAK,YAAY;EACjB,UAAA,KAAK,qBAAqB;EAC1B,UAAA,KAAK,mBAAmB;EACxB,UAAA,KAAK,YAAY;EACjB,UAAA,KAAK,WAAW;EAChB,UAAA,KAAK,qBAAqB;EAC1B,UAAA,KAAK,KAAK;EACV,UAAA,KAAK,OAAO;EACZ,UAAA,KAAK,OAAO;EACZ,UAAA,KAAK,cAAc;EACnB,UAAA,KAAK,aAAa;EAChB;EACAiE,YAAAA,MAAM,CAACG,IAAI,CAAIq6C,KAAK,GAAA,cAAA,GAAe33C,IAAI,uBAAoB,CAAC;EAC9D;EACF;EACF,MAAA;EACA6nB,MAAAA,KAAK,CAAC7nB,IAAI,CAAC,GAAG9G,KAAK;EACrB,IAAA;EACA,IAAA,OAAO2uB,KAAK;IACd,CAAA;IAAA,OAAA/qB,YAAA,CAAA85C,QAAA,EAAA,CAAA;MAAA75C,GAAA,EAAA,aAAA;MAAAC,GAAA,EArKA,SAAAA,GAAAA,GAA4B;QAC1B,OAAO0C,MAAM,CAAChB,IAAI,CAAC,IAAI,CAAC,CAACspB,MAAM,CAAC,UAACkuB,IAAI,EAAA;UAAA,OAAKA,IAAI,CAACx1C,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI;QAAA,CAAA,CAAC;EAC1E,IAAA;EAAA,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;ECvBF;;EAqBA,IAAMw3C,kBAAkB,GAAG,4BAA4B;EAEhD,SAASC,uBAAuBA,CAACrB,QAAgB,EAAW;EACjE,EAAA,OACEA,QAAQ,KAAA,IAA0B,IAClCA,QAAQ,KAAA,OAA6B,IACrCA,QAAQ,KAAA,KAA2B,IACnCA,QAAQ,KAAA,YAAkC,IAC1CA,QAAQ,KAAA,UAAgC,IACxCA,QAAQ,KAAA,UAAgC,IACxCA,QAAQ,KAAA,aAAmC;EAE/C;EAEO,SAASsB,iBAAiBA,CAACtB,QAAgB,EAAW;EAC3D,EAAA,OACEA,QAAQ,KAAA,YAAkC,IAC1CA,QAAQ,KAAA,WAAiC,IACzCA,QAAQ,KAAA,YAAkC;EAE9C;EAEA,IAAauB,SAAS,gBAAA,YAAA;EAUpB,EAAA,SAAAA,UACEC,aAAuB,EACvBC,mBAA2C,EAC3CC,QAAgB,EAChB;EAAA,IAAA,IAAAC,qBAAA;EAAA,IAAA,IADAD,QAAgB,KAAA,MAAA,EAAA;EAAhBA,MAAAA,QAAgB,GAAG,CAAC;EAAA,IAAA;EAAA,IAAA,IAAA,CAZftC,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACJwC,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACTC,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACPC,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVC,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACRC,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVC,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACJC,kBAAkB,GAAA,MAAA;MAOxB,IAAI,CAACN,SAAS,GAAG,CAAAH,mBAAmB,oBAAnBA,mBAAmB,CAAEG,SAAS,KAAI,IAAI;EACvD,IAAA,IAAI,CAACC,QAAQ,GAAA,CAAAF,qBAAA,GAAGF,mBAAmB,IAAA,IAAA,GAAA,MAAA,GAAnBA,mBAAmB,CAAEI,QAAQ,KAAA,IAAA,GAAAF,qBAAA,GAAID,QAAQ;EACzD,IAAA,IAAID,mBAAmB,EAAE;EACvB,MAAA,IAAMU,YAAY,GAAGV,mBAAmB,CAACrC,IAAI;EAC7C,MAAA,KAAK,IAAMn5C,GAAG,IAAIk8C,YAAY,EAAE;UAC9B,IACEv5C,MAAM,CAAC9E,SAAS,CAACs+C,cAAc,CAAC70C,IAAI,CAACi0C,aAAa,EAAEv7C,GAAG,CAAC,IACxDu7C,aAAa,CAACv7C,GAAG,CAAC,KAAKk8C,YAAY,CAACl8C,GAAG,CAAC,EACxC;YACAI,MAAM,CAACG,IAAI,CAAA,6BAAA,GACoBP,GAAG,8CAAuCu7C,aAAa,CAACa,EAAE,GAAA,IACzF,CAAC;YACD,IAAI,CAACH,kBAAkB,GAAGj8C,GAAG;EAC7B,UAAA;EACF,QAAA;EACF,MAAA;EACA;EACAu7C,MAAAA,aAAa,GAAGz6C,QAAA,CACd,IAAI+4C,QAAQ,CAAC,EAAE,CAAC,EAChBqC,YAAY,EACZX,aACF,CAAC;EACH,IAAA;MACA,IAAI,CAACpC,IAAI,GAAGoC,aAAa;EACzB,IAAA,IAAIC,mBAAmB,EAAE;EACvB,MAAA,IAAI,CAACK,UAAU,GAAGL,mBAAmB,CAACK,UAAU;EAChD,MAAA,IAAI,CAACG,IAAI,GAAGR,mBAAmB,CAACQ,IAAI;EACpC,MAAA,IAAI,CAACF,QAAQ,GAAGN,mBAAmB,CAACM,QAAQ;EAC5C,MAAA,IAAI,CAACC,UAAU,GAAGP,mBAAmB,CAACO,UAAU;EAClD,IAAA,CAAC,MAAM;QACL,IAAI,CAACF,UAAU,GAAG,IAAIrgD,IAAI,CAAC+/C,aAAa,cAA+B,CAAC;EAC1E,IAAA;EACA,IAAA,IAAI,UAAA,IAA+B,IAAI,CAACpC,IAAI,EAAE;EAC5C,MAAA,IAAMkD,OAAO,GACX,CAAAb,mBAAmB,IAAA,IAAA,GAAA,MAAA,GAAnBA,mBAAmB,CAAEa,OAAO,KAC5B,IAAI7gD,IAAI,CAAC,IAAI,CAAC29C,IAAI,YAA6B,CAAC;QAClD,IAAI/uC,cAAA,CAAgBiyC,OAAO,CAAC5gD,OAAO,EAAE,CAAC,EAAE;UACtC,IAAI,CAACqgD,QAAQ,GAAGO,OAAO;EACzB,MAAA;EACF,IAAA;EACF,EAAA;IAAC,OAAAt8C,YAAA,CAAAu7C,SAAA,EAAA,CAAA;MAAAt7C,GAAA,EAAA,IAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAiB;EACf,MAAA,OAAO,IAAI,CAACk5C,IAAI,CAACiD,EAAE;EACrB,IAAA;EAAC,GAAA,EAAA;MAAAp8C,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoB;EAClB,MAAA,OAAO,IAAI,CAACk5C,IAAI,CAACmD,KAAK;EACxB,IAAA;EAAC,GAAA,EAAA;MAAAt8C,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,IAAM+7C,IAAI,GAAG,IAAI,CAACA,IAAI;QACtB,IAAIA,IAAI,KAAKh6C,SAAS,EAAE;EACtB,QAAA,OAAQ,IAAI,CAACg6C,IAAI,GAAG,IAAI,CAAC7C,IAAI,CAACkB,oBAAoB,CAChD,IAAI,CAAClB,IAAI,CAACoD,GAAG,GAAG,KAAK,GAAG,OAAO,EAC/B;EACEC,UAAAA,GAAG,EAAE,KAAK;EACVC,UAAAA,IAAI,EAAE,KAAK;EACXC,UAAAA,IAAI,EAAE;EACR,SACF,CAAC;EACH,MAAA;EACA,MAAA,OAAOV,IAAI;EACb,IAAA;EAAC,GAAA,EAAA;MAAAh8C,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,IAAQ07C,SAAS,GAAK,IAAI,CAAlBA,SAAS;EACjB;QACA,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,CAAC/wC,eAAe,KAAK,IAAI,EAAE;UAC5DxK,MAAM,CAACG,IAAI,CAAA,2DAAA,GACkD,IAAI,CAACU,EAAE,GAAA,MAAA,GAAM06C,SAC1E,CAAC;EACD,QAAA,OAAO5mC,GAAG;EACZ,MAAA;EACA,MAAA,OACE4mC,SAAS,CAACx2C,KAAK,GACf,CAAC,IAAI,CAACw3C,SAAS,CAAClhD,OAAO,EAAE,GAAGkgD,SAAS,CAAC/wC,eAAe,IAAI,IAAI;EAEjE,IAAA;EAAC,GAAA,EAAA;MAAA5K,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsB;QACpB,OAAO,IAAI,CAAC47C,UAAU;EACxB,IAAA;EAAC,GAAA,EAAA;MAAA77C,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA2B;QACzB,IAAM28C,SAAS,GAAG,IAAI,CAACd,QAAQ,IAAI,IAAI,CAACC,UAAU;EAClD,MAAA,IAAIa,SAAS,EAAE;EACb,QAAA,OAAOA,SAAS;EAClB,MAAA;EACA,MAAA,IAAM/0C,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC9B,IAAIA,QAAQ,KAAK,IAAI,EAAE;EACrB,QAAA,OAAQ,IAAI,CAACk0C,UAAU,GAAG,IAAIvgD,IAAI,CAChC,IAAI,CAACqgD,UAAU,CAACpgD,OAAO,EAAE,GAAGoM,QAAQ,GAAG,IACzC,CAAC;EACH,MAAA;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EAAC,GAAA,EAAA;MAAA7H,GAAA,EAAA,UAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA8B;EAC5B,MAAA,IAAI,UAAA,IAA+B,IAAI,CAACk5C,IAAI,EAAE;UAC5C,IAAMtxC,QAAQ,GAAG,IAAI,CAACsxC,IAAI,CAACxtC,oBAAoB,WAE/C,CAAC;EACD,QAAA,IAAItB,cAAA,CAAgBxC,QAAQ,CAAC,EAAE;EAC7B,UAAA,OAAOA,QAAQ;EACjB,QAAA;EACF,MAAA,CAAC,MAAM,IAAI,IAAI,CAACi0C,QAAQ,EAAE;EACxB,QAAA,OAAO,CAAC,IAAI,CAACA,QAAQ,CAACrgD,OAAO,EAAE,GAAG,IAAI,CAACogD,UAAU,CAACpgD,OAAO,EAAE,IAAI,IAAI;EACrE,MAAA;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EAAC,GAAA,EAAA;MAAAuE,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqC;EACnC,MAAA,IAAI,kBAAA,IAAuC,IAAI,CAACk5C,IAAI,EAAE;EACpD,QAAA,OAAO,IAAI,CAACA,IAAI,CAACxtC,oBAAoB,mBAErC,CAAC;EACH,MAAA;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EAAC,GAAA,EAAA;MAAA3L,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyB;EACvB,MAAA,OAAO,IAAI,CAACk5C,IAAI,CAACvtC,IAAI,cAA+B,CAAC;EACvD,IAAA;EAAC,GAAA,EAAA;MAAA5L,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA8B;EAC5B,MAAA,OAAO,IAAI,CAAC48C,KAAK,KAAK1B,kBAAkB;EAC1C,IAAA;EAAC,GAAA,EAAA;MAAAn7C,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuB;QACrB,OACE,CAAC,CAAC,IAAI,CAACgB,EAAE,IACT,CAAC,IAAI,CAACg7C,kBAAkB,IACxBpxC,cAAA,CAAgB,IAAI,CAAC8xC,SAAS,CAAClhD,OAAO,EAAE,CAAC,KACxC,IAAI,CAACoM,QAAQ,KAAK,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAI,CAAC,CAAC,KAC7C,CAAC,IAAI,CAACi1C,SAAS,IAAI,CAAC,CAAC,IAAI,CAACD,KAAK,CAAC,KAChC,CAAC,IAAI,CAAC1D,IAAI,CAACoD,GAAG,IACZ,CAAC,IAAI,CAACQ,GAAG,CAACP,GAAG,IAAI,CAAC,IAAI,CAACO,GAAG,CAACN,IAAK,IACjC,IAAI,CAACM,GAAG,CAACP,GAAG,KAAK,IAAI,CAACO,GAAG,CAACN,IAAI,CAAC,KAChC,CAAC,IAAI,CAACO,cAAc,IACnB,aAAa,IAAI,IAAI,CAAC7D,IAAI,IAC1B,cAAc,IAAI,IAAI,CAACA,IAAI,CAAC;EAElC,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;ECtMH,IAAM8D,uBAAuB,GAAG,EAAE;;EAElC;EACA;EACA;EACA,IAAaC,YAAY,gBAAA,YAAA;IAiDvB,SAAAA,YAAAA,CAAYC,OAAe,EAAE;MAAA,IAAA,CAhDtBC,QAAQ,GAAY,KAAK;MAAA,IAAA,CACzBC,cAAc,GAAY,KAAK;EAAA,IAAA,IAAA,CAC/BhiB,qBAAqB,GAAA,MAAA;MAAA,IAAA,CACrBoD,KAAK,GAAW,CAAC;MAAA,IAAA,CACjB6e,KAAK,GAAW,CAAC;EAAA,IAAA,IAAA,CACjBtgB,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACT0B,YAAY,GAAA,MAAA;MAAA,IAAA,CACZ0M,QAAQ,GAAkB,IAAI;EAAA,IAAA,IAAA,CAC9BmS,UAAU,GAAA,MAAA;MAAA,IAAA,CACVC,iBAAiB,GAAW,CAAC;MAAA,IAAA,CAC7B1oB,IAAI,GAAY,IAAI;MAAA,IAAA,CACpB2oB,gBAAgB,GAAW,EAAE;MAAA,IAAA,CAC7BC,SAAS,GAAW,CAAC;EAAA,IAAA,IAAA,CACrBC,gBAAgB,GAAA,MAAA;MAAA,IAAA,CAChBC,OAAO,GAAY,IAAI;MAAA,IAAA,CACvBC,QAAQ,GAAY,IAAI;MAAA,IAAA,CACxBC,MAAM,GAAW,CAAC;MAAA,IAAA,CAClBtf,OAAO,GAAW,CAAC;MAAA,IAAA,CACnBuf,OAAO,GAAW,CAAC;MAAA,IAAA,CACnBC,eAAe,GAAkB,IAAI;MAAA,IAAA,CACrCC,cAAc,GAAW,CAAC;MAAA,IAAA,CAC1BC,aAAa,GAAW,CAAC;MAAA,IAAA,CACzBl9C,IAAI,GAAkB,IAAI;EAAA,IAAA,IAAA,CAC1BjG,GAAG,GAAA,MAAA;MAAA,IAAA,CACHojD,IAAI,GAAW,EAAE;MAAA,IAAA,CACjBhwC,OAAO,GAAkB,IAAI;MAAA,IAAA,CAC7BiwC,cAAc,GAAY,KAAK;MAAA,IAAA,CAC/B50B,YAAY,GAAW,CAAC;MAAA,IAAA,CACxBC,iBAAiB,GAAY,KAAK;MAAA,IAAA,CAClC40B,eAAe,GAAW,CAAC;EAAA,IAAA,IAAA,CAC3BC,yBAAyB,GAAA,MAAA;MAAA,IAAA,CACzBC,YAAY,GAAW,CAAC;MAAA,IAAA,CACxBC,QAAQ,GAAW,CAAC;MAAA,IAAA,CACpBpjB,UAAU,GAAW,CAAC;EAAA,IAAA,IAAA,CACtBqjB,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,gBAAgB,GAAA,MAAA;MAAA,IAAA,CAChBC,UAAU,GAAW,CAAC;EAAA,IAAA,IAAA,CACtBC,iBAAiB,GAAA,MAAA;MAAA,IAAA,CACjBC,cAAc,GAAW,CAAC;MAAA,IAAA,CAC1BC,YAAY,GAAW,CAAC;MAAA,IAAA,CACxBC,UAAU,GAAW,CAAC;MAAA,IAAA,CACtBC,QAAQ,GAAW,CAAC;EAAA,IAAA,IAAA,CACpBC,kBAAkB,GAAA,MAAA;MAAA,IAAA,CAClBhG,oBAAoB,GAAiB,IAAI;MAAA,IAAA,CACzCL,YAAY,GAAuB,IAAI;MAAA,IAAA,CACvCC,eAAe,GAAG,KAAK;EAAA,IAAA,IAAA,CACvBqG,qBAAqB,GAAA,MAAA;MAG1B,IAAI,CAACliB,SAAS,GAAG,EAAE;MACnB,IAAI,CAACiiB,kBAAkB,GAAG,EAAE;EAC5B,IAAA,IAAI,CAAC1B,UAAU,GAAG,EAAE;MACpB,IAAI,CAACxiD,GAAG,GAAGoiD,OAAO;EACpB,EAAA;EAAC,EAAA,IAAAv/C,MAAA,GAAAs/C,YAAA,CAAAr/C,SAAA;EAAAD,EAAAA,MAAA,CAEDuhD,QAAQ,GAAR,SAAAA,QAAQA,CAAC/4C,QAAkC,EAAE;MAC3C,IAAI,CAACA,QAAQ,EAAE;QACb,IAAI,CAACy3C,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACD,OAAO,GAAG,IAAI;EACnB,MAAA;EACF,IAAA;MACA,IAAMwB,UAAU,GAAG,IAAI,CAACC,UAAU,GAAGj5C,QAAQ,CAACi5C,UAAU;MACxD,IAAMC,aAAa,GAAG,IAAI,CAACC,aAAa,GAAGn5C,QAAQ,CAACm5C,aAAa;MACjE,IAAI,CAAC3B,OAAO,GACV,IAAI,CAACN,KAAK,KAAKl3C,QAAQ,CAACk3C,KAAK,IAC7B,CAAC,CAACgC,aAAa,IACf,CAAC,CAACF,UAAU,IACZ,CAAC,IAAI,CAACtqB,IAAI;MACZ,IAAI,CAAC+oB,QAAQ,GACX,IAAI,CAACP,KAAK,GAAGl3C,QAAQ,CAACk3C,KAAK,IAC3B8B,UAAU,GAAG,CAAC,IACbA,UAAU,KAAK,CAAC,IAAIE,aAAa,GAAG,CAAE;EACzC,IAAA,IAAI,IAAI,CAAC1B,OAAO,IAAI,IAAI,CAACC,QAAQ,EAAE;EACjC,MAAA,IAAI,CAACC,MAAM,GAAGjiD,IAAI,CAACE,KAAK,CAACqK,QAAQ,CAAC03C,MAAM,GAAG,GAAG,CAAC;EACjD,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACA,MAAM,GAAG13C,QAAQ,CAAC03C,MAAM,GAAG,CAAC;EACnC,IAAA;IACF,CAAC;EAAAlgD,EAAAA,MAAA,CAEDokC,MAAM,GAAN,SAAAA,MAAMA,CAACr3B,QAAkB,EAAW;MAClC,OAAO,IAAI,CAACs0C,kBAAkB,CAACj8C,IAAI,CAAC,UAACiE,IAAI,EAAK;EAC5C,MAAA,IAAI0M,WAAW,GAAG1M,IAAI,CAAC0M,WAAW;QAClC,IAAI,CAACA,WAAW,EAAE;EAChB1M,QAAAA,IAAI,CAACsC,YAAY,CAACoB,QAAQ,CAACnB,SAA6B,CAAC;UACzDmK,WAAW,GAAG1M,IAAI,CAAC0M,WAAW;EAChC,MAAA;QACA,OAAO,CAAC,CAACA,WAAW,IAAIhJ,QAAQ,CAAC0hB,OAAO,CAAC1Y,WAAW,CAAC;EACvD,IAAA,CAAC,CAAC;IACJ,CAAC;IAAA,OAAA5T,YAAA,CAAAm9C,YAAA,EAAA,CAAA;MAAAl9C,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkC;EAChC,MAAA,IAAI,IAAI,CAAC+8B,SAAS,CAACl6B,MAAM,EAAE;EACzB,QAAA,OAAOsH,cAAA,CACL,IAAI,CAAC4yB,SAAS,CAAC,IAAI,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAAC8H,eAC5C,CAAC;EACH,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAAC,GAAA,EAAA;MAAA5K,GAAA,EAAA,qBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkC;QAChC,OACE,IAAI,CAACo7B,qBAAqB,IAC1B,IAAI,CAAC4iB,cAAc,IACnBhB,uBAAuB;EAE3B,IAAA;EAAC,GAAA,EAAA;MAAAj9C,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoB;QAClB,IAAMu/C,OAAO,GAAG,IAAI,CAACV,YAAY,GAAG,IAAI,CAACD,cAAc;QACvD,IAAIW,OAAO,GAAG,CAAC,EAAE;UACf,IAAMC,WAAW,GAAG,IAAI,CAACT,QAAQ,GAAG,IAAI,CAACD,UAAU;EACnD,QAAA,OAAQU,WAAW,GAAG,IAAI,GAAID,OAAO;EACvC,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAC,GAAA,EAAA;MAAAx/C,GAAA,EAAA,MAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmB;EACjB,MAAA,OAAO,IAAI,CAACy/C,OAAO,IAAI,IAAI,CAACC,WAAW;EACzC,IAAA;EAAC,GAAA,EAAA;MAAA3/C,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsB;EAAA,MAAA,IAAA2/C,cAAA;QACpB,IAAA,CAAAA,cAAA,GAAI,IAAI,CAACxU,QAAQ,KAAA,IAAA,IAAbwU,cAAA,CAAe98C,MAAM,EAAE;EACzB,QAAA,OAAO,IAAI,CAACsoC,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG;EACpD,MAAA;QACA,OAAO,IAAI,CAACs6C,WAAW;EACzB,IAAA;EAAC,GAAA,EAAA;MAAA3/C,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;EACxB,MAAA,IAAI,IAAI,CAAC+8B,SAAS,CAACl6B,MAAM,EAAE;EACzB,QAAA,OAAO,IAAI,CAACk6B,SAAS,CAAC,IAAI,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG;EACtD,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAC,GAAA,EAAA;MAAArF,GAAA,EAAA,eAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA4B;EAC1B,MAAA,IAAI,IAAI,CAAC+8B,SAAS,CAACl6B,MAAM,EAAE;EACzB,QAAA,OAAO,IAAI,CAACk6B,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK;EAChC,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAC,GAAA,EAAA;MAAAnF,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkB;QAChB,IAAI,IAAI,CAAC09C,gBAAgB,EAAE;EACzB,QAAA,OAAO9hD,IAAI,CAACsD,GAAG,CAAC3D,IAAI,CAAC83B,GAAG,EAAE,GAAG,IAAI,CAACqqB,gBAAgB,EAAE,CAAC,CAAC,GAAG,IAAI;EAC/D,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAC,GAAA,EAAA;MAAA39C,GAAA,EAAA,eAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA4B;EAAA,MAAA,IAAA4/C,eAAA;QAC1B,IAAA,CAAAA,eAAA,GAAI,IAAI,CAACzU,QAAQ,KAAA,IAAA,IAAbyU,eAAA,CAAe/8C,MAAM,EAAE;EACzB,QAAA,OAAO,IAAI,CAACsoC,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC,CAACwI,KAAK;EACtD,MAAA;EACA,MAAA,OAAO,EAAE;EACX,IAAA;EAAC,GAAA,EAAA;MAAAtL,GAAA,EAAA,cAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA2B;EACzB,MAAA,IAAMmrC,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,MAAA,IAAIA,QAAQ,EAAE;EACZ,QAAA,IAAM2P,SAAS,GAAG,IAAI,CAACwE,aAAa;EACpC,QAAA,IAAIxE,SAAS,KAAK,EAAE,EAAE;YACpB,KAAK,IAAI/2C,CAAC,GAAGonC,QAAQ,CAACtoC,MAAM,EAAEkB,CAAC,EAAE,GAAI;cACnC,IAAIonC,QAAQ,CAACpnC,CAAC,CAAC,CAACsH,KAAK,GAAGyvC,SAAS,EAAE;EACjC,cAAA,OAAO3P,QAAQ,CAACpnC,CAAC,CAAC,CAACsH,KAAK;EAC1B,YAAA;EACF,UAAA;EACA,UAAA,OAAOyvC,SAAS;EAClB,QAAA;EACF,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAC,GAAA,EAAA;MAAA/6C,GAAA,EAAA,YAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyB;EAAA,MAAA,IAAA6/C,eAAA;QACvB,IAAA,CAAAA,eAAA,GAAI,IAAI,CAAC1U,QAAQ,KAAA,IAAA,IAAb0U,eAAA,CAAeh9C,MAAM,EAAE;EACzB,QAAA,OAAO,IAAI,CAACsoC,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC,CAAC4I,QAAQ,CAACxE,EAAE;EAC5D,MAAA;QACA,OAAO,IAAI,CAACo2C,KAAK;EACnB,IAAA;EAAC,GAAA,EAAA;MAAAt9C,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuB;EACrB,MAAA,IAAI,IAAI,CAAC60B,IAAI,IAAI,IAAI,CAACpL,GAAG,IAAI,IAAI,CAACo0B,MAAM,GAAG,CAAC,EAAE;UAC5C,IAAMiC,sBAAsB,GAAG,IAAI,CAACL,OAAO,GAAG,IAAI,CAACM,aAAa;EAChE,QAAA,OACE,IAAI,CAACt2B,GAAG,GACR7tB,IAAI,CAACsD,GAAG,CAAC4gD,sBAAsB,EAAE,IAAI,CAAC7B,aAAa,CAAC,GAClD,IAAI,CAAC+B,mBAAmB;EAE9B,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;ECzMI,SAASC,gBAAgBA,CAC9BjI,CAAmC,EACnChkC,CAAmC,EAC1B;EACT,EAAA,IAAIgkC,CAAC,CAACn1C,MAAM,KAAKmR,CAAC,CAACnR,MAAM,EAAE;MACzB,OAAO,CAACm1C,CAAC,CAACj1C,IAAI,CAAC,UAAC7G,KAAsB,EAAE6H,CAAS,EAAA;EAAA,MAAA,OAAK7H,KAAK,KAAK8X,CAAC,CAACjQ,CAAC,CAAC;MAAA,CAAA,CAAC;EACvE,EAAA;EACA,EAAA,OAAO,KAAK;EACd;EAEO,SAASm8C,wBAAwBA,CACtClI,CAAsD,EACtDhkC,CAAsD,EAC7C;EACT,EAAA,IAAI,CAACgkC,CAAC,IAAI,CAAChkC,CAAC,EAAE;EACZ,IAAA,OAAO,IAAI;EACb,EAAA;EACA,EAAA,IAAI,CAACgkC,CAAC,IAAI,CAAChkC,CAAC,EAAE;EACZ,IAAA,OAAO,KAAK;EACd,EAAA;EACA,EAAA,OAAOisC,gBAAgB,CAACjI,CAAC,EAAEhkC,CAAC,CAAC;EAC/B;;ECnBO,SAASmsC,uBAAuBA,CAACvK,MAAc,EAAW;IAC/D,OACEA,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,SAAS,IAAIA,MAAM,KAAK,aAAa;EAE5E;EAEO,SAASwK,+BAA+BA,CAC7CxK,MAAc,EACI;EAClB,EAAA,QAAQA,MAAM;EACZ,IAAA,KAAK,SAAS;EACd,IAAA,KAAK,SAAS;QACZ,OAAOpK,gBAAgB,CAACC,GAAG;EAC7B,IAAA,KAAK,aAAa;QAChB,OAAOD,gBAAgB,CAACE,GAAG;EAC7B,IAAA;EACE,MAAA,MAAM,IAAI7lB,KAAK,CAAA,8BAAA,GAAgC+vB,MAAQ,CAAC;EAC5D;EACF;;ECGO,SAASyK,YAAYA,CAACC,gBAAwB,EAAE;IACrD,OAAOh8C,UAAU,CAACC,IAAI,CAACg8C,IAAI,CAACD,gBAAgB,CAAC,EAAE,UAAC5kD,CAAC,EAAA;EAAA,IAAA,OAAKA,CAAC,CAAC8kD,UAAU,CAAC,CAAC,CAAC;IAAA,CAAA,CAAC;EACxE;;ECzBA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEO,SAASC,cAAcA,CAACt8C,GAAW,EAAE;EAC1C,EAAA,OAAOG,UAAU,CAACC,IAAI,CAACm8C,QAAQ,CAACC,kBAAkB,CAACx8C,GAAG,CAAC,CAAC,EAAE,UAACzI,CAAC,EAAA;EAAA,IAAA,OAC1DA,CAAC,CAAC8kD,UAAU,CAAC,CAAC,CAAC;EAAA,EAAA,CACjB,CAAC;EACH;;ECdA,SAASI,aAAaA,CAACz8C,GAAW,EAA2B;EAC3D,EAAA,IAAM08C,UAAU,GAAGJ,cAAc,CAACt8C,GAAG,CAAC,CAACyJ,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACtD,EAAA,IAAMkzC,gBAAgB,GAAG,IAAIx8C,UAAU,CAAC,EAAE,CAAC;IAC3Cw8C,gBAAgB,CAACn6C,GAAG,CAACk6C,UAAU,EAAE,EAAE,GAAGA,UAAU,CAACh+C,MAAM,CAAC;EACxD,EAAA,OAAOi+C,gBAAgB;EACzB;EAEO,SAASC,gBAAgBA,CAACt3C,KAAiB,EAAE;IAClD,IAAMu3C,IAAI,GAAG,SAAPA,IAAIA,CAAa79C,KAAiB,EAAEoB,IAAY,EAAE08C,EAAU,EAAE;EAClE,IAAA,IAAMC,GAAG,GAAG/9C,KAAK,CAACoB,IAAI,CAAC;EACvBpB,IAAAA,KAAK,CAACoB,IAAI,CAAC,GAAGpB,KAAK,CAAC89C,EAAE,CAAC;EACvB99C,IAAAA,KAAK,CAAC89C,EAAE,CAAC,GAAGC,GAAG;IACjB,CAAC;EAEDF,EAAAA,IAAI,CAACv3C,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EACjBu3C,EAAAA,IAAI,CAACv3C,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EACjBu3C,EAAAA,IAAI,CAACv3C,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EACjBu3C,EAAAA,IAAI,CAACv3C,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EACnB;EAEO,SAAS03C,0BAA0BA,CACxCn3B,GAAW,EACqB;EAChC;EACA,EAAA,IAAMo3B,UAAU,GAAGp3B,GAAG,CAACxlB,KAAK,CAAC,GAAG,CAAC;IACjC,IAAI68C,OAAuC,GAAG,IAAI;EAClD,EAAA,IAAID,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIA,UAAU,CAACv+C,MAAM,KAAK,CAAC,EAAE;MACvD,IAAMy+C,cAAc,GAAGF,UAAU,CAAC,CAAC,CAAC,CAAC58C,KAAK,CAAC,GAAG,CAAC;EAC/C,IAAA,IAAM+8C,UAAU,GAAGD,cAAc,CAACA,cAAc,CAACz+C,MAAM,GAAG,CAAC,CAAC,CAAC2B,KAAK,CAAC,GAAG,CAAC;EACvE,IAAA,IAAI+8C,UAAU,CAAC1+C,MAAM,KAAK,CAAC,EAAE;EAC3B,MAAA,IAAM2+C,QAAQ,GAAGD,UAAU,CAAC,CAAC,CAAC,KAAK,QAAQ;EAC3C,MAAA,IAAM74C,IAAI,GAAG64C,UAAU,CAAC,CAAC,CAAC;EAC1B,MAAA,IAAIC,QAAQ,EAAE;UACZF,cAAc,CAACG,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EAC7BJ,QAAAA,OAAO,GAAGhB,YAAY,CAAC33C,IAAI,CAAC;EAC9B,MAAA,CAAC,MAAM;EACL24C,QAAAA,OAAO,GAAGT,aAAa,CAACl4C,IAAI,CAAC;EAC/B,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,OAAO24C,OAAO;EAChB;;EC5CA;EACO,IAAMK,YAAY,GAAG,OAAOxgD,IAAI,KAAK,WAAW,GAAGA,IAAI,GAAGa,SAAS;;ECI1E;EACA;EACA;EACA,IAAkB4/C,UAAU,GAAA;IAAAC,QAAA,EAAA,iBAAA;IAAAC,QAAA,EAAA,eAAA;IAAAC,SAAA,EAAA,yBAAA;IAAAC,QAAA,EAAA;EAAA,CAAA;;EAO5B;EACA,IAAkBC,gBAAgB,GAAA;IAAAJ,QAAA,EAAA,iBAAA;IAAAC,QAAA,EAAA,gCAAA;IAAAC,SAAA,EAAA,yBAAA;IAAAC,QAAA,EAAA;EAAA,CAAA;EAO3B,SAASE,gCAAgCA,CAC9CC,MAAwB,EACA;EACxB,EAAA,QAAQA,MAAM;MACZ,KAAKF,gBAAgB,CAACH,QAAQ;QAC5B,OAAOF,UAAU,CAACE,QAAQ;MAC5B,KAAKG,gBAAgB,CAACF,SAAS;QAC7B,OAAOH,UAAU,CAACG,SAAS;MAC7B,KAAKE,gBAAgB,CAACD,QAAQ;QAC5B,OAAOJ,UAAU,CAACI,QAAQ;MAC5B,KAAKC,gBAAgB,CAACJ,QAAQ;QAC5B,OAAOD,UAAU,CAACC,QAAQ;EAC9B;EACF;EA0BO,SAASO,gCAAgCA,CAC9CC,SAAqB,EACS;EAC9B,EAAA,QAAQA,SAAS;MACf,KAAKT,UAAU,CAACE,QAAQ;QACtB,OAAOG,gBAAgB,CAACH,QAAQ;MAClC,KAAKF,UAAU,CAACG,SAAS;QACvB,OAAOE,gBAAgB,CAACF,SAAS;MACnC,KAAKH,UAAU,CAACI,QAAQ;QACtB,OAAOC,gBAAgB,CAACD,QAAQ;MAClC,KAAKJ,UAAU,CAACC,QAAQ;QACtB,OAAOI,gBAAgB,CAACJ,QAAQ;EACpC;EACF;EAEO,SAASS,sBAAsBA,CACpCz5B,MAA2B,EACb;EACd,EAAA,IAAQ05B,UAAU,GAAyB15B,MAAM,CAAzC05B,UAAU;MAAEC,kBAAkB,GAAK35B,MAAM,CAA7B25B,kBAAkB;IACtC,IAAMC,mBAAiC,GAAGF,UAAU,GAChD,CACEX,UAAU,CAACE,QAAQ,EACnBF,UAAU,CAACI,QAAQ,EACnBJ,UAAU,CAACG,SAAS,EACpBH,UAAU,CAACC,QAAQ,CACpB,CAAC52B,MAAM,CAAC,UAACo3B,SAAS,EAAA;EAAA,IAAA,OAAK,CAAC,CAACE,UAAU,CAACF,SAAS,CAAC;EAAA,EAAA,CAAA,CAAC,GAChD,EAAE;IACN,IAAI,CAACI,mBAAmB,CAACb,UAAU,CAACI,QAAQ,CAAC,IAAIQ,kBAAkB,EAAE;EACnEC,IAAAA,mBAAmB,CAAC91C,IAAI,CAACi1C,UAAU,CAACI,QAAQ,CAAC;EAC/C,EAAA;EACA,EAAA,OAAOS,mBAAmB;EAC5B;EAOO,IAAMC,2BAA2B,GAAI,UAAAC,qBAAA,EAAiC;IAC3E,IAAIhB,YAAY,IAAA,IAAA,IAAA,CAAAgB,qBAAA,GAAZhB,YAAY,CAAEpkC,SAAS,KAAA,IAAA,IAAvBolC,qBAAA,CAAyBD,2BAA2B,EAAE;MACxD,OAAOvhD,IAAI,CAACoc,SAAS,CAACmlC,2BAA2B,CAAC/hD,IAAI,CAACQ,IAAI,CAACoc,SAAS,CAAC;EACxE,EAAA,CAAC,MAAM;EACL,IAAA,OAAO,IAAI;EACb,EAAA;EACF,CAAC,EAAG;;EAEJ;EACA;EACA;EACO,SAASqlC,wCAAwCA,CACtDP,SAAqB,EACrBr6B,WAAqB,EACrBxE,WAAqB,EACrBq/B,gBAAkC,EACH;EAC/B,EAAA,IAAIC,aAAuB;EAC3B,EAAA,QAAQT,SAAS;MACf,KAAKT,UAAU,CAACE,QAAQ;EACtBgB,MAAAA,aAAa,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;EAChC,MAAA;MACF,KAAKlB,UAAU,CAACI,QAAQ;MACxB,KAAKJ,UAAU,CAACG,SAAS;QACvBe,aAAa,GAAG,CAAC,MAAM,CAAC;EACxB,MAAA;MACF,KAAKlB,UAAU,CAACC,QAAQ;EACtBiB,MAAAA,aAAa,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;EAClC,MAAA;EACF,IAAA;EACE,MAAA,MAAM,IAAIh9B,KAAK,CAAA,sBAAA,GAAwBu8B,SAAW,CAAC;EACvD;IACA,OAAOU,kCAAkC,CACvCD,aAAa,EACb96B,WAAW,EACXxE,WAAW,EACXq/B,gBACF,CAAC;EACH;EAEA,SAASE,kCAAkCA,CACzCD,aAAuB,EACvB96B,WAAqB,EACrBxE,WAAqB,EACrBq/B,gBAAkC,EACH;EAC/B,EAAA,IAAMG,UAAuC,GAAG;EAC9CF,IAAAA,aAAa,EAAEA,aAAa;EAC5BG,IAAAA,eAAe,EAAEJ,gBAAgB,CAACI,eAAe,IAAI,UAAU;EAC/DC,IAAAA,qBAAqB,EAAEL,gBAAgB,CAACK,qBAAqB,IAAI,UAAU;MAC3EC,YAAY,EAAEN,gBAAgB,CAACM,YAAY,IAAI,CAC7CN,gBAAgB,CAACO,WAAW,IAAI,WAAW,CAC5C;EACDC,IAAAA,iBAAiB,EAAEr7B,WAAW,CAAC/P,GAAG,CAAC,UAAC9H,KAAK,EAAA;QAAA,OAAM;EAC7CyX,QAAAA,WAAW,yBAAuBzX,KAAO;EACzCmzC,QAAAA,UAAU,EAAET,gBAAgB,CAACU,eAAe,IAAI,EAAE;EAClDC,QAAAA,gBAAgB,EAAEX,gBAAgB,CAACY,qBAAqB,IAAI;SAC7D;EAAA,IAAA,CAAC,CAAC;EACHC,IAAAA,iBAAiB,EAAElgC,WAAW,CAACvL,GAAG,CAAC,UAAC9H,KAAK,EAAA;QAAA,OAAM;EAC7CyX,QAAAA,WAAW,yBAAuBzX,KAAO;EACzCmzC,QAAAA,UAAU,EAAET,gBAAgB,CAACc,eAAe,IAAI,EAAE;EAClDH,QAAAA,gBAAgB,EAAEX,gBAAgB,CAACe,qBAAqB,IAAI;SAC7D;MAAA,CAAC;KACH;IAED,OAAO,CAACZ,UAAU,CAAC;EACrB;EAEO,SAASa,uBAAuBA,CACrChB,gBAA8C,EACrC;EAAA,EAAA,IAAAiB,qBAAA;IACT,OACE,CAAC,CAACjB,gBAAgB,KACjBA,gBAAgB,CAACO,WAAW,KAAK,oBAAoB,IACpD,CAAC,GAAAU,qBAAA,GAACjB,gBAAgB,CAACM,YAAY,KAAA,IAAA,IAA7BW,qBAAA,CAA+B9gD,IAAI,CACnC,UAAChC,IAAI,EAAA;MAAA,OAAKA,IAAI,KAAK,oBAAoB;EAAA,EAAA,CACzC,CAAC,CAAA,CAAC;EAER;EAEO,SAAS+iD,iBAAiBA,CAACC,QAAiC,EAAE;EACnE,EAAA,IAAMC,aAAa,GAAG,IAAIC,WAAW,CACnCF,QAAQ,CAACt/C,MAAM,EACfs/C,QAAQ,CAAC1sC,UAAU,EACnB0sC,QAAQ,CAAC15C,UAAU,GAAG,CACxB,CAAC;EACD,EAAA,IAAM65C,UAAU,GAAGlgD,MAAM,CAACC,YAAY,CAAC8I,KAAK,CAAC,IAAI,EAAEiP,KAAK,CAACzX,IAAI,CAACy/C,aAAa,CAAC,CAAC;;EAE7E;EACA,EAAA,IAAMG,WAAW,GAAGD,UAAU,CAACxgD,SAAS,CACtCwgD,UAAU,CAACjhD,OAAO,CAAC,GAAG,CAAC,EACvBihD,UAAU,CAACrhD,MACb,CAAC;EACD,EAAA,IAAMuhD,MAAM,GAAG,IAAIC,SAAS,EAAE;IAC9B,IAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACJ,WAAW,EAAE,UAAU,CAAC;IAC9D,IAAMK,OAAO,GAAGF,MAAM,CAACG,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACrD,EAAA,IAAID,OAAO,EAAE;MACX,IAAM/6C,KAAK,GAAG+6C,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC,GAC/BF,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,SAAS,GAC/BH,OAAO,CAACI,YAAY,CAAC,OAAO,CAAC;EACjC,IAAA,IAAIn7C,KAAK,EAAE;EACT,MAAA,IAAMo7C,UAAU,GAAGxE,YAAY,CAAC52C,KAAK,CAAC,CAACmE,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACtD;EACA;QACAmzC,gBAAgB,CAAC8D,UAAU,CAAC;EAC5B,MAAA,OAAOA,UAAU;EACnB,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;;ECzMA,IAAIC,gBAA4D,GAAG,EAAE;EAerE,IAAaC,QAAQ,gBAAA,YAAA;EAoBnB,EAAA,SAAAA,QAAAA,CACEnP,MAAc,EACd5rB,GAAW,EACXk4B,MAAc,EACd8C,cAAwB,EACxBnZ,EAAkC,EAClCpiC,KAAc,EACd;EAAA,IAAA,IAHAu7C,cAAwB,KAAA,MAAA,EAAA;QAAxBA,cAAwB,GAAG,CAAC,CAAC,CAAC;EAAA,IAAA;EAAA,IAAA,IAC9BnZ,EAAkC,KAAA,MAAA,EAAA;EAAlCA,MAAAA,EAAkC,GAAG,IAAI;EAAA,IAAA;EAAA,IAAA,IAAA,CAxB3B7hB,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACH4rB,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNrsC,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACT07C,iBAAiB,GAAA,MAAA;EAAA,IAAA,IAAA,CACjBn6C,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACT6I,kBAAkB,GAAA,MAAA;MAAA,IAAA,CAC3Bk4B,EAAE,GAAmC,IAAI;MAAA,IAAA,CACzC9rC,GAAG,GAAmC,IAAI;MAAA,IAAA,CAC1C0J,KAAK,GAAmC,IAAI;MAAA,IAAA,CAC5CqT,IAAI,GAAmC,IAAI;MAkBhD,IAAI,CAAC84B,MAAM,GAAGA,MAAM;MACpB,IAAI,CAAC5rB,GAAG,GAAGA,GAAG;MACd,IAAI,CAACzgB,SAAS,GAAG24C,MAAM;MACvB,IAAI,CAAC+C,iBAAiB,GAAGD,cAAc;MACvC,IAAI,CAACnZ,EAAE,GAAGA,EAAE;MACZ,IAAI,CAAC/gC,SAAS,GAAG8qC,MAAM,GAAGA,MAAM,KAAK,MAAM,GAAG,KAAK;MACnD,IAAI,CAACjiC,kBAAkB,GACrB,IAAI,CAAC7I,SAAS,IAAI,CAACq1C,uBAAuB,CAACvK,MAAM,CAAC;MACpD,IAAInsC,KAAK,YAALA,KAAK,CAAEia,UAAU,CAAC,IAAI,CAAC,EAAE;QAC3B,IAAI,CAACja,KAAK,GAAG,IAAInF,UAAU,CAACD,gBAAgB,CAACoF,KAAK,CAAC,CAAC;EACtD,IAAA;EACF,EAAA;EAAAs7C,EAAAA,QAAA,CA3BOG,qBAAqB,GAA5B,SAAOA,qBAAqBA,GAAG;MAC7BJ,gBAAgB,GAAG,EAAE;IACvB,CAAA;IAAAC,QAAA,CAEOI,cAAc,GAArB,SAAOA,cAAcA,CAACn7B,GAAW,EAAEvgB,KAA8B,EAAE;EACjEq7C,IAAAA,gBAAgB,CAAC96B,GAAG,CAAC,GAAGvgB,KAAK;IAC/B,CAAA;EAAA,EAAA,IAAA9L,MAAA,GAAAonD,QAAA,CAAAnnD,SAAA;EAAAD,EAAAA,MAAA,CAuBOyuB,OAAO,GAAd,SAAOA,OAAOA,CAACrsB,GAAa,EAAW;EACrC,IAAA,OACEA,GAAG,CAACiqB,GAAG,KAAK,IAAI,CAACA,GAAG,IACpBjqB,GAAG,CAAC61C,MAAM,KAAK,IAAI,CAACA,MAAM,IAC1B71C,GAAG,CAAC+K,SAAS,KAAK,IAAI,CAACA,SAAS,IAChC/K,GAAG,CAACwJ,SAAS,KAAK,IAAI,CAACA,SAAS,IAChC02C,gBAAgB,CAAClgD,GAAG,CAACklD,iBAAiB,EAAE,IAAI,CAACA,iBAAiB,CAAC,IAC/D/E,wBAAwB,CAACngD,GAAG,CAAC8rC,EAAE,EAAE,IAAI,CAACA,EAAE,CAAC,IACzCqU,wBAAwB,CAACngD,GAAG,CAAC0J,KAAK,EAAE,IAAI,CAACA,KAAK,CAAA;IAElD,CAAA;EAAA9L,EAAAA,MAAA,CAEOynD,WAAW,GAAlB,SAAOA,WAAWA,GAAY;EAC5B;MACA,IAAI,IAAI,CAACxP,MAAM,EAAE;EACf,MAAA,IAAIuK,uBAAuB,CAAC,IAAI,CAACvK,MAAM,CAAC,IAAI,IAAI,CAACA,MAAM,KAAK,MAAM,EAAE;EAClE,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,IAAI,IAAI,CAACrsC,SAAS,KAAK,UAAU,EAAE;EACjC;EACA,QAAA,OAAO,IAAI,CAACqsC,MAAM,KAAK,YAAY;QACrC,CAAC,MAA2B;UAC1B,QAAQ,IAAI,CAACrsC,SAAS;YACpB,KAAKy4C,gBAAgB,CAACH,QAAQ;YAC9B,KAAKG,gBAAgB,CAACD,QAAQ;YAC9B,KAAKC,gBAAgB,CAACF,SAAS;YAC/B,KAAKE,gBAAgB,CAACJ,QAAQ;EAC5B,YAAA,OACE,CAAC,YAAY,EAAE,iBAAiB,EAAE,gBAAgB,CAAC,CAAC3+C,OAAO,CACzD,IAAI,CAAC2yC,MACP,CAAC,KAAK,EAAC;EAEb;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAA;IAAAj4C,MAAA,CAEO+L,cAAc,GAArB,SAAOA,cAAcA,CACnBzC,EAA0B,EAC1Bo+C,SAAmD,EAClC;MACjB,IAAI,CAAC,IAAI,CAACv6C,SAAS,IAAI,CAAC,IAAI,CAACkf,GAAG,EAAE;EAChC,MAAA,OAAO,IAAI;EACb,IAAA;EAEA,IAAA,IAAIm2B,uBAAuB,CAAC,IAAI,CAACvK,MAAM,CAAC,EAAE;EACxC,MAAA,IAAI/J,EAAE,GAAG,IAAI,CAACA,EAAE;QAChB,IAAI,CAACA,EAAE,EAAE;EACP,QAAA,IAAI,OAAO5kC,EAAE,KAAK,QAAQ,EAAE;EAC1B;EACA;EACA;EACA9G,UAAAA,MAAM,CAACG,IAAI,CAAA,sDAAA,GAC6C,IAAI,CAACs1C,MAAM,0BACnE,CAAC;;EAED;EACA3uC,UAAAA,EAAE,GAAG,CAAC;EACR,QAAA;EACA4kC,QAAAA,EAAE,GAAGyZ,0BAA0B,CAACr+C,EAAE,CAAC;EACrC,MAAA;QACA,IAAMyM,WAAW,GAAG,IAAIqxC,QAAQ,CAC9B,IAAI,CAACnP,MAAM,EACX,IAAI,CAAC5rB,GAAG,EACR,UAAU,EACV,IAAI,CAACi7B,iBAAiB,EACtBpZ,EACF,CAAC;EACD,MAAA,OAAOn4B,WAAW;EACpB,IAAA;MAMA,IAAI,IAAI,CAACjK,KAAK,EAAE;EACd;EACA,MAAA,IAAM87C,aAAa,GAAGT,gBAAgB,CAAC,IAAI,CAAC96B,GAAG,CAAC;QAChD,IAAIu7B,aAAa,IAAI,CAACtF,gBAAgB,CAAC,IAAI,CAACx2C,KAAK,EAAE87C,aAAa,CAAC,EAAE;UACjER,QAAQ,CAACI,cAAc,CAAC,IAAI,CAACn7B,GAAG,EAAE,IAAI,CAACvgB,KAAK,CAAC;EAC/C,MAAA;QAEA,IAAI,IAAI,CAACqT,IAAI,EAAE;EACb,QAAA,OAAO,IAAI;EACb,MAAA;EACF,IAAA;;EAEA;EACA;EACA,IAAA,IAAMinC,QAAQ,GAAG5C,0BAA0B,CAAC,IAAI,CAACn3B,GAAG,CAAC;EACrD,IAAA,IAAI+5B,QAAQ,EAAE;QACZ,QAAQ,IAAI,CAACx6C,SAAS;UACpB,KAAKy4C,gBAAgB,CAACD,QAAQ;EAC5B;EACA;YACA,IAAI,CAACjlC,IAAI,GAAGinC,QAAQ;EACpB;EACA,UAAA,IAAI,CAAC,IAAI,CAACt6C,KAAK,EAAE;EACf,YAAA,IAAMkE,OAAO,GAAGgP,cAAc,CAAConC,QAAQ,CAACt/C,MAAM,CAAC;cAC/C,IAAIkJ,OAAO,CAAC9K,MAAM,EAAE;EAAA,cAAA,IAAA2iD,cAAA;EAClB,cAAA,IAAMC,QAAQ,GAAG93C,OAAO,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAClE,KAAK,GAAG,CAAA+7C,cAAA,GAAAC,QAAQ,CAACnpC,IAAI,KAAA,IAAA,IAAbkpC,cAAA,CAAe3iD,MAAM,GAAG4iD,QAAQ,CAACnpC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EAC9D,YAAA;EACF,UAAA;EACA,UAAA,IAAI,CAAC,IAAI,CAAC7S,KAAK,EAAE;EACf,YAAA,IAAI,CAACA,KAAK,GAAGi8C,wBAAwB,CAACL,SAAS,CAAC;EAClD,UAAA;EACA,UAAA;UACF,KAAKrD,gBAAgB,CAACF,SAAS;EAAE,UAAA;EAC/B,YAAA,IAAM6D,sBAAsB,GAAG,IAAIrhD,UAAU,CAAC,CAC5C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAC7B,CAAC;;EAEF;EACA;cACA,IAAI,CAACwY,IAAI,GAAGZ,OAAO,CAACypC,sBAAsB,EAAE,IAAI,EAAE5B,QAAQ,CAAC;EAE3D,YAAA,IAAI,CAACt6C,KAAK,GAAGq6C,iBAAiB,CAACC,QAAQ,CAAC;EAExC,YAAA;EACF,UAAA;EACA,QAAA;EAAS,UAAA;cACP,IAAI1C,OAAO,GAAG0C,QAAQ,CAACn2C,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;EACtC,YAAA,IAAIyzC,OAAO,CAACx+C,MAAM,KAAK,EAAE,EAAE;EACzB,cAAA,IAAM+iD,MAAM,GAAG,IAAIthD,UAAU,CAAC,EAAE,CAAC;gBACjCshD,MAAM,CAACj/C,GAAG,CAAC06C,OAAO,EAAE,EAAE,GAAGA,OAAO,CAACx+C,MAAM,CAAC;EACxCw+C,cAAAA,OAAO,GAAGuE,MAAM;EAClB,YAAA;cACA,IAAI,CAACn8C,KAAK,GAAG43C,OAAO;EACpB,YAAA;EACF,UAAA;EACF;EACF,IAAA;;EAEA;EACA,IAAA,IAAI,CAAC,IAAI,CAAC53C,KAAK,IAAI,IAAI,CAACA,KAAK,CAACY,UAAU,KAAK,EAAE,EAAE;EAC/C,MAAA,IAAIZ,KAAiD;EACrDA,MAAAA,KAAK,GAAGo8C,uBAAuB,CAACR,SAAS,CAAC;QAC1C,IAAI,CAAC57C,KAAK,EAAE;EACVA,QAAAA,KAAK,GAAGi8C,wBAAwB,CAACL,SAAS,CAAC;UAC3C,IAAI,CAAC57C,KAAK,EAAE;EACVA,UAAAA,KAAK,GAAGq7C,gBAAgB,CAAC,IAAI,CAAC96B,GAAG,CAAC;EACpC,QAAA;EACF,MAAA;EACA,MAAA,IAAIvgB,KAAK,EAAE;UACT,IAAI,CAACA,KAAK,GAAGA,KAAK;UAClBs7C,QAAQ,CAACI,cAAc,CAAC,IAAI,CAACn7B,GAAG,EAAEvgB,KAAK,CAAC;EAC1C,MAAA;EACF,IAAA;EAEA,IAAA,OAAO,IAAI;IACb,CAAA;EAAA,EAAA,OAAAs7C,QAAA;EAAA,CAAA,EAAA;EAGF,SAASc,uBAAuBA,CAC9BR,SAA8D,EAC9D;IACA,IAAMS,WAAW,GAAGT,SAAS,IAAA,IAAA,GAAA,MAAA,GAATA,SAAS,CAAGrD,gBAAgB,CAACD,QAAQ,CAAC;EAC1D,EAAA,IAAI+D,WAAW,EAAE;MACf,OAAOA,WAAW,CAACr8C,KAAK;EAC1B,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEA,SAASi8C,wBAAwBA,CAC/BL,SAA8D,EAC9D;IACA,IAAMU,YAAY,GAAGV,SAAS,IAAA,IAAA,GAAA,MAAA,GAATA,SAAS,CAAGrD,gBAAgB,CAACF,SAAS,CAAC;EAC5D,EAAA,IAAIiE,YAAY,EAAE;EAChB,IAAA,IAAMC,iBAAiB,GAAG7E,0BAA0B,CAAC4E,YAAY,CAAC/7B,GAAG,CAAC;EACtE,IAAA,IAAIg8B,iBAAiB,EAAE;QACrB,OAAOlC,iBAAiB,CAACkC,iBAAiB,CAAC;EAC7C,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEA,SAASV,0BAA0BA,CAACW,aAAqB,EAAE;EACzD,EAAA,IAAMC,SAAS,GAAG,IAAI5hD,UAAU,CAAC,EAAE,CAAC;IACpC,KAAK,IAAIP,CAAC,GAAG,EAAE,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;EAC5BmiD,IAAAA,SAAS,CAACniD,CAAC,CAAC,GAAIkiD,aAAa,IAAK,CAAC,IAAI,EAAE,GAAGliD,CAAC,CAAE,GAAI,IAAI;EACzD,EAAA;EACA,EAAA,OAAOmiD,SAAS;EAClB;;EC1MA,IAAMC,qBAAqB,GACzB,oJAAoJ;EACtJ,IAAMC,2BAA2B,GAAG,oBAAoB;EAExD,IAAMC,iBAAiB,GAAG,kCAAkC,CAAC;;EAE7D,IAAMC,yBAAyB,GAAG,IAAIC,MAAM,CAC1C,CACE,yCAAyC,CAAClkD,MAAM;EAAE;EAClD,qBAAqB,CAACA,MAAM;EAAE;EAC9B,KAAK,CAACA,MAAM;EAAE,CACf,CAACuY,IAAI,CAAC,GAAG,CAAC,EACX,GACF,CAAC;EAED,IAAM4rC,yBAAyB,GAAG,IAAID,MAAM,CAC1C,CACE,wJAAuJ,CACpJlkD,MAAM,EACT,uFAAsF,CACnFA,MAAM,EACT,yDAAyD,CAACA,MAAM,EAChE,iBAAiB,CAACA,MAAM,EACxB,qBAAqB,CAACA,MAAM,CAC7B,CAACuY,IAAI,CAAC,GAAG,CACZ,CAAC;EAAA,IAEoB6rC,UAAU,gBAAA,YAAA;EAAA,EAAA,SAAAA,UAAAA,GAAA,CAAA;IAAAA,UAAA,CACtBC,SAAS,GAAhB,SAAOA,SAASA,CACdjhC,MAGG,EACHkhC,YAAoB,EAIR;EACZ,IAAA,KAAK,IAAI5iD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0hB,MAAM,CAAC5iB,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,MAAA,IAAM6iD,KAAK,GAAGnhC,MAAM,CAAC1hB,CAAC,CAAC;EACvB,MAAA,IAAI6iD,KAAK,CAAC5lD,EAAE,KAAK2lD,YAAY,EAAE;EAC7B,QAAA,OAAOC,KAAK;EACd,MAAA;EACF,IAAA;IACF,CAAA;IAAAH,UAAA,CAEOlgC,OAAO,GAAd,SAAOA,OAAOA,CAACzrB,GAAG,EAAEoiD,OAAO,EAAE;EAC3B,IAAA,OAAOr2C,kCAAgB,CAACq2C,OAAO,EAAEpiD,GAAG,EAAE;EAAEgM,MAAAA,eAAe,EAAE;EAAK,KAAC,CAAC;IAClE,CAAA;EAAA2/C,EAAAA,UAAA,CAEOI,eAAe,GAAtB,SAAOA,eAAeA,CAAC1iD,GAAW,EAAW;EAC3C,IAAA,OAAOkiD,iBAAiB,CAAChpC,IAAI,CAAClZ,GAAG,CAAC;IACpC,CAAA;IAAAsiD,UAAA,CAEOK,mBAAmB,GAA1B,SAAOA,mBAAmBA,CACxBC,MAAc,EACdngD,OAAe,EACa;MAC5B,IAAMgyC,eAAe,GACjBJ,qBAAqB,CAACuO,MAAM,CAAA,CACvB;EACT,IAAA,IAAMrO,MAAkC,GAAG;EACzCsO,MAAAA,eAAe,EAAE,IAAI;EACrBv3B,MAAAA,MAAM,EAAE,EAAE;EACVupB,MAAAA,oBAAoB,EAAE,IAAI;EAC1BiO,MAAAA,WAAW,EAAE,IAAI;EACjBC,MAAAA,WAAW,EAAE,IAAI;EACjBnJ,MAAAA,eAAe,EAAE,IAAI;EACrBpF,MAAAA,YAAY,EAAE,IAAI;EAClBC,MAAAA,eAAe,EAAfA;OACD;MACD,IAAMuO,qBAAoC,GAAG,EAAE;MAE/ChB,qBAAqB,CAACrL,SAAS,GAAG,CAAC;EACnC,IAAA,IAAI,CAACiM,MAAM,CAACrjC,UAAU,CAAC,SAAS,CAAC,EAAE;EACjCg1B,MAAAA,MAAM,CAACM,oBAAoB,GAAG,IAAInzB,KAAK,CAAC,qBAAqB,CAAC;EAC9D,MAAA,OAAO6yB,MAAM;EACf,IAAA;EACA,IAAA,IAAIprC,MAA8B;MAClC,OAAO,CAACA,MAAM,GAAG64C,qBAAqB,CAACzL,IAAI,CAACqM,MAAM,CAAC,KAAK,IAAI,EAAE;EAC5D,MAAA,IAAIz5C,MAAM,CAAC,CAAC,CAAC,EAAE;EAAA,QAAA,IAAA85C,oBAAA;EACb;UACA,IAAMv8B,KAAK,GAAG,IAAI+uB,QAAQ,CAACtsC,MAAM,CAAC,CAAC,CAAC,EAAEorC,MAAM,CAAoB;EAChE,QAAA,IAAM1uB,GAAG,GACLyuB,mBAAmB,CAACC,MAAM,EAAEprC,MAAM,CAAC,CAAC,CAAC,CAAA,CAC5B;EACb,QAAA,IAAMtF,KAAkB,GAAG;EACzB6iB,UAAAA,KAAK,EAALA,KAAK;EACL3E,UAAAA,OAAO,EACL2E,KAAK,CAACE,cAAc,CAAC,WAAW,CAAC,IACjCF,KAAK,CAACE,cAAc,CAAC,mBAAmB,CAAC;YAC3C/nB,IAAI,EAAE6nB,KAAK,CAACuuB,IAAI;EAChBt+C,UAAAA,GAAG,EAAE2rD,UAAU,CAAClgC,OAAO,CAACyD,GAAG,EAAEpjB,OAAO;WACrC;EAED,QAAA,IAAMygD,UAAU,GAAGx8B,KAAK,CAAC2vB,iBAAiB,CAAC,YAAY,CAAC;EACxD,QAAA,IAAI6M,UAAU,EAAE;EACdr/C,UAAAA,KAAK,CAAC8d,KAAK,GAAGuhC,UAAU,CAACvhC,KAAK;EAC9B9d,UAAAA,KAAK,CAAC+d,MAAM,GAAGshC,UAAU,CAACthC,MAAM;EAClC,QAAA;EAEAuhC,QAAAA,SAAS,CAACz8B,KAAK,CAACc,MAAM,EAAE3jB,KAAK,CAAC;EAC9B,QAAA,IAAMu/C,kBAAkB,GAAG18B,KAAK,CAAC,qBAAqB,CAAC;EACvD,QAAA,IAAI08B,kBAAkB,EAAE;EACtBv/C,UAAAA,KAAK,CAACmI,YAAY,GAAG,EAAE;EACvBm3C,UAAAA,SAAS,CAACC,kBAAkB,EAAEv/C,KAAK,CAACmI,YAAY,CAAC;EACnD,QAAA;UAEA,IAAI,EAAA,CAAAi3C,oBAAA,GAACp/C,KAAK,CAACw/C,aAAa,KAAA,IAAA,IAAnBJ,oBAAA,CAAqBvkD,MAAM,CAAA,EAAE;EAChCskD,UAAAA,qBAAqB,CAACz6C,IAAI,CAAC1E,KAAK,CAAC;EACnC,QAAA;EAEA0wC,QAAAA,MAAM,CAACjpB,MAAM,CAAC/iB,IAAI,CAAC1E,KAAK,CAAC;EAC3B,MAAA,CAAC,MAAM,IAAIsF,MAAM,CAAC,CAAC,CAAC,EAAE;EACpB,QAAA,IAAM4wB,GAAG,GAAG5wB,MAAM,CAAC,CAAC,CAAC;EACrB,QAAA,IAAMm6C,UAAU,GAAGn6C,MAAM,CAAC,CAAC,CAAC;EAC5B,QAAA,QAAQ4wB,GAAG;EACT,UAAA,KAAK,cAAc;EAAE,YAAA;EACnB;gBACA,IAAMwpB,YAAY,GAAG,IAAI9N,QAAQ,CAAC6N,UAAU,EAAE/O,MAAM,CAAC;EACrD,cAAA,IAAMiP,MAAM,GAAGD,YAAY,CAAC,SAAS,CAAC;EACtC,cAAA,IAAIC,MAAM,EAAE;EACV,gBAAA,IAAIjP,MAAM,CAACuO,WAAW,KAAK,IAAI,EAAE;EAC/BvO,kBAAAA,MAAM,CAACuO,WAAW,GAAG,EAAE;EACzB,gBAAA;EACAvO,gBAAAA,MAAM,CAACuO,WAAW,CAACU,MAAM,CAAC,GAAGD,YAAY;EAC3C,cAAA;EACA,cAAA;EACF,YAAA;EACA,UAAA,KAAK,aAAa;EAAE,YAAA;EAClB;gBACA,IAAME,UAAU,GAAGC,QAAQ,CAACJ,UAAU,EAAE7gD,OAAO,EAAE8xC,MAAM,CAAC;gBACxD,IAAIkP,UAAU,CAAC98C,SAAS,IAAI88C,UAAU,CAACxC,WAAW,EAAE,EAAE;EACpD,gBAAA,IAAI1M,MAAM,CAACwO,WAAW,KAAK,IAAI,EAAE;oBAC/BxO,MAAM,CAACwO,WAAW,GAAG,EAAE;EACzB,gBAAA;EACAxO,gBAAAA,MAAM,CAACwO,WAAW,CAACx6C,IAAI,CAACk7C,UAAU,CAAC;EACrC,cAAA,CAAC,MAAM;EACLznD,gBAAAA,MAAM,CAACG,IAAI,CAAA,mDAAA,GAC0CmnD,UAAU,OAC/D,CAAC;EACH,cAAA;EACA,cAAA;EACF,YAAA;EACA,UAAA,KAAK,QAAQ;EAAE,YAAA;EACb;EACA,cAAmC;kBACjC,IAAMK,kBAAkB,GAAG,IAAIlO,QAAQ,CAAC6N,UAAU,EAAE/O,MAAM,CAAC;EAC3DO,gBAAAA,qBAAqB,CAACP,MAAM,EAAEoP,kBAAkB,EAAElhD,OAAO,CAAC;EAC5D,cAAA;EACA,cAAA;EACF,YAAA;EACA,UAAA,KAAK,kBAAkB;EAAE,YAAA;EACvB;gBACA,IAAMmhD,yBAAyB,GAAG,IAAInO,QAAQ,CAAC6N,UAAU,EAAE/O,MAAM,CAAC;gBAClEA,MAAM,CAACsO,eAAe,GAAG;kBACvBh9B,GAAG,EAAEy8B,UAAU,CAAClgC,OAAO,CACrBwhC,yBAAyB,CAAC,YAAY,CAAC,EACvCnhD,OACF,CAAC;EACDohD,gBAAAA,SAAS,EAAED,yBAAyB,CAAC,YAAY,CAAC,IAAI;iBACvD;EACD,cAAA;EACF,YAAA;EACA,UAAA,KAAK,OAAO;EAAE,YAAA;EACZ;EACArP,cAAAA,MAAM,CAACqF,eAAe,GAAGkK,oBAAoB,CAACR,UAAU,CAAC;EACzD,cAAA;EACF,YAAA;EAGF;EACF,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAMS,uBAAuB,GAC3Bf,qBAAqB,CAACtkD,MAAM,GAAG,CAAC,IAChCskD,qBAAqB,CAACtkD,MAAM,GAAG61C,MAAM,CAACjpB,MAAM,CAAC5sB,MAAM;MAErD61C,MAAM,CAACjpB,MAAM,GAAGy4B,uBAAsB,GAClCf,qBAAoB,GACpBzO,MAAM,CAACjpB,MAAM;EACjB,IAAA,IAAIipB,MAAM,CAACjpB,MAAM,CAAC5sB,MAAM,KAAK,CAAC,EAAE;EAC9B61C,MAAAA,MAAM,CAACM,oBAAoB,GAAG,IAAInzB,KAAK,CAAC,6BAA6B,CAAC;EACxE,IAAA;EAEA,IAAA,OAAO6yB,MAAM;IACf,CAAA;IAAA+N,UAAA,CAEO0B,wBAAwB,GAA/B,SAAOA,wBAAwBA,CAC7BpB,MAAc,EACdngD,OAAe,EACf8xC,MAAkC,EACF;EAChC,IAAA,IAAIprC,MAA8B;MAClC,IAAMK,OAAuC,GAAG,EAAE;EAClD,IAAA,IAAM8hB,MAAM,GAAGipB,MAAM,CAACjpB,MAAM;EAC5B,IAAA,IAAM24B,YAAY,GAAG;EACnBprD,MAAAA,KAAK,EAAEyyB,MAAM,CAACzX,GAAG,CAAC,UAAChQ,KAAkB,EAAA;UAAA,OAAM;EACzChH,UAAAA,EAAE,EAAEgH,KAAK,CAAC6iB,KAAK,CAAC7tB,KAAK;YACrBmoB,UAAU,EAAEnd,KAAK,CAACmd;WACnB;EAAA,MAAA,CAAC,CAAC;EACHkG,MAAAA,SAAS,EAAEoE,MAAM,CAACzX,GAAG,CAAC,UAAChQ,KAAkB,EAAA;UAAA,OAAM;EAC7ChH,UAAAA,EAAE,EAAEgH,KAAK,CAAC6iB,KAAK,CAACQ,SAAS;YACzBg9B,SAAS,EAAErgD,KAAK,CAACqgD;WAClB;EAAA,MAAA,CAAC,CAAC;EACH,MAAA,iBAAiB,EAAE;OACpB;MACD,IAAIrnD,EAAE,GAAG,CAAC;MACVolD,2BAA2B,CAACtL,SAAS,GAAG,CAAC;MACzC,OAAO,CAACxtC,MAAM,GAAG84C,2BAA2B,CAAC1L,IAAI,CAACqM,MAAM,CAAC,MAAM,IAAI,EAAE;QACnE,IAAMl8B,KAAK,GAAG,IAAI+uB,QAAQ,CAACtsC,MAAM,CAAC,CAAC,CAAC,EAAEorC,MAAM,CAAoB;EAChE,MAAA,IAAM33C,IAAI,GAAG8pB,KAAK,CAACy9B,IAAI;EACvB,MAAA,IAAIvnD,IAAI,EAAE;EACR,QAAA,IAAM0kB,MAEO,GAAG2iC,YAAY,CAACrnD,IAAI,CAAC;EAClC,QAAA,IAAMwnD,MAAuB,GAAG56C,OAAO,CAAC5M,IAAI,CAAC,IAAI,EAAE;EACnD4M,QAAAA,OAAO,CAAC5M,IAAI,CAAC,GAAGwnD,MAAM;EACtB,QAAA,IAAMp4B,IAAI,GAAGtF,KAAK,CAAC29B,QAAQ;EAC3B,QAAA,IAAMp4B,SAAS,GAAGvF,KAAK,CAAC,gBAAgB,CAAC;EACzC,QAAA,IAAMvF,QAAQ,GAAGuF,KAAK,CAAC49B,QAAQ;EAC/B,QAAA,IAAMp4B,eAAe,GAAGxF,KAAK,CAAC69B,eAAe;EAC7C,QAAA,IAAMC,UAAU,GAAG99B,KAAK,CAAC,aAAa,CAAC;EACvC,QAAA,IAAMsB,KAAoB,GAAG;EAC3BtB,UAAAA,KAAK,EAALA,KAAK;EACL3E,UAAAA,OAAO,EAAE,CAAC;YACVllB,EAAE,EAAEA,EAAE,EAAE;EACR2kB,UAAAA,OAAO,EAAEkF,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE;EAChC7nB,UAAAA,IAAI,EAAE6nB,KAAK,CAACuuB,IAAI,IAAIjpB,IAAI,IAAI,EAAE;EAC9BpvB,UAAAA,IAAI,EAAJA,IAAI;EACJ8O,UAAAA,OAAO,EAAEgb,KAAK,CAAClf,IAAI,CAAC,SAAS,CAAC;EAC9B2jB,UAAAA,UAAU,EAAEzE,KAAK,CAAClf,IAAI,CAAC,YAAY,CAAC;EACpC+kB,UAAAA,MAAM,EAAE7F,KAAK,CAAClf,IAAI,CAAC,QAAQ,CAAC;EAC5BwkB,UAAAA,IAAI,EAAJA,IAAI;EACJr1B,UAAAA,GAAG,EAAE+vB,KAAK,CAAC+9B,GAAG,GAAGnC,UAAU,CAAClgC,OAAO,CAACsE,KAAK,CAAC+9B,GAAG,EAAEhiD,OAAO,CAAC,GAAG;WAC3D;EACD,QAAA,IAAIwpB,SAAS,EAAE;YACbjE,KAAK,CAACiE,SAAS,GAAGA,SAAS;EAC7B,QAAA;EACA,QAAA,IAAI9K,QAAQ,EAAE;YACZ6G,KAAK,CAAC7G,QAAQ,GAAGA,QAAQ;EAC3B,QAAA;EACA,QAAA,IAAI+K,eAAe,EAAE;YACnBlE,KAAK,CAACkE,eAAe,GAAGA,eAAe;EACzC,QAAA;EACA,QAAA,IAAIs4B,UAAU,EAAE;YACdx8B,KAAK,CAACw8B,UAAU,GAAGA,UAAU;EAC/B,QAAA;EAEA,QAAA,IAAIljC,MAAM,IAAA,IAAA,IAANA,MAAM,CAAE5iB,MAAM,EAAE;EAClB;EACA;EACA;EACA,UAAA,IAAMgmD,UAAU,GACdpC,UAAU,CAACC,SAAS,CAACjhC,MAAM,EAAE0G,KAAK,CAACxG,OAAiB,CAAC,IAAIF,MAAM,CAAC,CAAC,CAAC;EACpEqjC,UAAAA,WAAW,CAAC38B,KAAK,EAAE08B,UAAU,EAAE,YAAY,CAAC;EAC5CC,UAAAA,WAAW,CAAC38B,KAAK,EAAE08B,UAAU,EAAE,WAAW,CAAC;EAC7C,QAAA;EAEAN,QAAAA,MAAM,CAAC77C,IAAI,CAACyf,KAAK,CAAC;EACpB,MAAA;EACF,IAAA;EACA,IAAA,OAAOxe,OAAO;IAChB,CAAA;EAAA84C,EAAAA,UAAA,CAEOsC,kBAAkB,GAAzB,SAAOA,kBAAkBA,CACvBhC,MAAc,EACdngD,OAAe,EACf5F,EAAU,EACVD,IAAuB,EACvBioD,UAAkB,EAClBC,wBAA4C,EAC9B;EAAA,IAAA,IAAAC,qBAAA;EACd,IAAA,IAAMvjD,IAAI,GAAG;EAAE7K,MAAAA,GAAG,EAAE8L;OAAS;EAC7B,IAAA,IAAMoB,KAAK,GAAG,IAAIi1C,YAAY,CAACr2C,OAAO,CAAC;EACvC,IAAA,IAAMm2B,SAA8B,GAAG/0B,KAAK,CAAC+0B,SAAS;MACtD,IAAMosB,gBAAiC,GAAG,EAAE;EAC5C;MACA,IAAIC,kBAAmC,GAAG,IAAI;MAC9C,IAAIC,SAAS,GAAG,CAAC;MACjB,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIrL,aAAa,GAAG,CAAC;MACrB,IAAIsL,oBAAoB,GAAG,CAAC;MAC5B,IAAIC,cAAc,GAAG,CAAC;MACtB,IAAIC,QAAyB,GAAG,IAAI;MACpC,IAAIziD,IAAc,GAAG,IAAIE,QAAQ,CAACnG,IAAI,EAAE4E,IAAI,CAAC;EAC7C,IAAA,IAAI2H,MAAiD;EACrD,IAAA,IAAIvJ,CAAS;EACb,IAAA,IAAI8D,SAAgC;MACpC,IAAI6hD,aAAa,GAAG,EAAE;MACtB,IAAIC,cAAc,GAAG,KAAK;MAC1B,IAAIC,aAA4B,GAAG,IAAI;EACvC,IAAA,IAAIC,kBAAwC;MAE5CvD,yBAAyB,CAACxL,SAAS,GAAG,CAAC;MACvC9yC,KAAK,CAACk2C,IAAI,GAAG6I,MAAM;MACnB/+C,KAAK,CAAC4wC,eAAe,GACjBJ,qBAAqB,CAACuO,MAAM,CAAA,CACvB;EACT,IAAA,IAAI,EAAAmC,qBAAA,GAAA5C,yBAAyB,CAAC5L,IAAI,CAACqM,MAAM,CAAC,KAAA,IAAA,GAAA,MAAA,GAAtCmC,qBAAA,CAAyC,CAAC,CAAC,MAAK,SAAS,EAAE;EAC7DlhD,MAAAA,KAAK,CAACgxC,oBAAoB,GAAG,IAAInzB,KAAK,CACpC,mCACF,CAAC;EACD,MAAA,OAAO7d,KAAK;EACd,IAAA;MACA,OAAO,CAACsF,MAAM,GAAGg5C,yBAAyB,CAAC5L,IAAI,CAACqM,MAAM,CAAC,MAAM,IAAI,EAAE;EACjE,MAAA,IAAI4C,cAAc,EAAE;EAClBA,QAAAA,cAAc,GAAG,KAAK;EACtB3iD,QAAAA,IAAI,GAAG,IAAIE,QAAQ,CAACnG,IAAI,EAAE4E,IAAI,CAAC;EAC/B;UACAqB,IAAI,CAACsB,cAAc,GAAG21C,aAAa;EACnCj3C,QAAAA,IAAI,CAACoC,QAAQ,CAAC60C,aAAa,CAAC;UAC5Bj3C,IAAI,CAACC,EAAE,GAAGoiD,SAAS;UACnBriD,IAAI,CAACiB,EAAE,GAAGshD,oBAAoB;EAC9B,QAAA,IAAIC,cAAc,EAAE;YAClBxiD,IAAI,CAACkf,OAAO,GAAGsjC,cAAc;EAC/B,QAAA;UACAxiD,IAAI,CAACgB,KAAK,GAAGhH,EAAE;EACf,QAAA,IAAIooD,kBAAkB,EAAE;YACtBpiD,IAAI,CAAC6B,WAAW,GAAGugD,kBAAkB;YACrC,IAAIA,kBAAkB,CAAC1hD,kBAAkB,EAAE;EACzCV,YAAAA,IAAI,CAACU,kBAAkB,GAAG0hD,kBAAkB,CAAC1hD,kBAAkB;cAC/D0hD,kBAAkB,CAAC1hD,kBAAkB,GAAG,IAAI;EAC9C,UAAA;EACA,UAAA,IAAIkiD,aAAa,EAAE;EACjB5iD,YAAAA,IAAI,CAACd,YAAY,CAAC0jD,aAAa,CAAC;EAChCA,YAAAA,aAAa,GAAG,IAAI;EACtB,UAAA;EACF,QAAA;EACF,MAAA;EAEA,MAAA,IAAMhiD,QAAQ,GAAG0F,MAAM,CAAC,CAAC,CAAC;EAC1B,MAAA,IAAI1F,QAAQ,EAAE;EACZ;EACAZ,QAAAA,IAAI,CAACY,QAAQ,GAAG0gB,UAAU,CAAC1gB,QAAQ,CAAC;EACpC;EACA,QAAA,IAAMgB,KAAK,GAAG,CAAC,GAAG,GAAG0E,MAAM,CAAC,CAAC,CAAC,EAAElS,KAAK,CAAC,CAAC,CAAC;EACxC4L,QAAAA,IAAI,CAAC4B,KAAK,GAAGA,KAAK,IAAI,IAAI;UAC1B5B,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC9D,KAAK,GAAG,CAAC,KAAK,EAAEhB,QAAQ,EAAEgB,KAAK,CAAC,GAAG,CAAC,KAAK,EAAEhB,QAAQ,CAAC,CAAC;EACzE,MAAA,CAAC,MAAM,IAAI0F,MAAM,CAAC,CAAC,CAAC,EAAE;EACpB;EACA,QAAA,IAAInD,cAAA,CAAgBnD,IAAI,CAACY,QAAQ,CAAC,EAAE;YAClCZ,IAAI,CAACsB,cAAc,GAAG21C,aAAa;EACnCj3C,UAAAA,IAAI,CAACoC,QAAQ,CAAC60C,aAAa,CAAC;EAC5B,UAAA,IAAIp2C,SAAS,EAAE;EACbiiD,YAAAA,gBAAgB,CAAC9iD,IAAI,EAAEa,SAAS,EAAEG,KAAK,CAAC;EAC1C,UAAA;YACAhB,IAAI,CAACC,EAAE,GAAGoiD,SAAS;YACnBriD,IAAI,CAACgB,KAAK,GAAGhH,EAAE;YACfgG,IAAI,CAACiB,EAAE,GAAGshD,oBAAoB;EAC9BxsB,UAAAA,SAAS,CAACrwB,IAAI,CAAC1F,IAAI,CAAC;EACpB;EACA,UAAA,IAAMgjB,GAAG,GAAG,CAAC,GAAG,GAAG1c,MAAM,CAAC,CAAC,CAAC,EAAElS,KAAK,CAAC,CAAC,CAAC;EACtC4L,UAAAA,IAAI,CAAChB,MAAM,GACPyyC,mBAAmB,CAACzwC,KAAK,EAAEgiB,GAAG,CAAA,CAC3B;EACP+/B,UAAAA,qBAAqB,CACnB/iD,IAAI,EACJyiD,QAAQ,EACRN,gBACF,CAAC;EACDM,UAAAA,QAAQ,GAAGziD,IAAI;YACfi3C,aAAa,IAAIj3C,IAAI,CAACY,QAAQ;EAC9ByhD,UAAAA,SAAS,EAAE;EACXC,UAAAA,WAAW,GAAG,CAAC;EACfK,UAAAA,cAAc,GAAG,IAAI;EACvB,QAAA;EACF,MAAA,CAAC,MAAM;UACLr8C,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC,CAACstC,KAAK,CAAC4L,yBAAyB,CAAC;UACnD,IAAI,CAACl5C,MAAM,EAAE;EACXnN,UAAAA,MAAM,CAACG,IAAI,CAAC,oDAAoD,CAAC;EACjE,UAAA;EACF,QAAA;EACA,QAAA,KAAKyD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuJ,MAAM,CAACzK,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAClC,UAAA,IAAKuJ,MAAM,CAACvJ,CAAC,CAAC,KAAahC,SAAS,EAAE;EACpC,YAAA;EACF,UAAA;EACF,QAAA;;EAEA;EACA,QAAA,IAAMm8B,GAAG,GAAG,CAAC,GAAG,GAAG5wB,MAAM,CAACvJ,CAAC,CAAC,EAAE3I,KAAK,CAAC,CAAC,CAAC;EACtC,QAAA,IAAM4uD,MAAM,GAAG,CAAC,GAAG,GAAG18C,MAAM,CAACvJ,CAAC,GAAG,CAAC,CAAC,EAAE3I,KAAK,CAAC,CAAC,CAAC;UAC7C,IAAM6uD,MAAM,GAAG38C,MAAM,CAACvJ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAGuJ,MAAM,CAACvJ,CAAC,GAAG,CAAC,CAAC,EAAE3I,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;EAEpE,QAAA,QAAQ8iC,GAAG;EACT,UAAA,KAAK,WAAW;EACd,YAAA,IAAIurB,QAAQ,EAAE;EACZziD,cAAAA,IAAI,CAACd,YAAY,CAAC8jD,MAAM,EAAEP,QAAQ,CAAC;EACrC,YAAA,CAAC,MAAM;EACLziD,cAAAA,IAAI,CAACd,YAAY,CAAC8jD,MAAM,CAAC;EAC3B,YAAA;EACA,YAAA;EACF,UAAA,KAAK,mBAAmB;EACtB;cACAhjD,IAAI,CAACU,kBAAkB,GAAGsiD,MAAM;cAChChjD,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC,CAAC,mBAAmB,EAAEs9C,MAAM,CAAC,CAAC;EAChD,YAAA,IAAIN,aAAa,KAAK,EAAE,EAAE;gBACxBA,aAAa,GAAG3sB,SAAS,CAACl6B,MAAM;EAClC,YAAA;EACA,YAAA;EACF,UAAA,KAAK,eAAe;cAClB,IAAImF,KAAK,CAACjH,IAAI,EAAE;EACdmpD,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA;EACAtF,YAAAA,KAAK,CAACjH,IAAI,GAAGipD,MAAM,CAACl4C,WAAW,EAAE;EACjC,YAAA;EACF,UAAA,KAAK,gBAAgB;EACnB,YAAA,IAAI9J,KAAK,CAAC81C,OAAO,KAAK,CAAC,EAAE;EACvBoM,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA,CAAC,MAAM,IAAIyvB,SAAS,CAACl6B,MAAM,GAAG,CAAC,EAAE;EAC/BsnD,cAAAA,mCAAmC,CAACniD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EACzD,YAAA;cACA+7C,SAAS,GAAGrhD,KAAK,CAAC81C,OAAO,GAAGx3C,QAAQ,CAAC0jD,MAAM,CAAC;EAC5C,YAAA;EACF,UAAA,KAAK,MAAM;EAAE,YAAA;gBACX,IAAIhiD,KAAK,CAACo2C,eAAe,EAAE;EACzB8L,gBAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,cAAA;gBACA,IAAM88C,SAAS,GAAG,IAAIxQ,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;EAC7C,cAAA,IAAMo2C,eAAe,GACnBgM,SAAS,CAACr/B,cAAc,CAAC,kBAAkB,CAAC;EAC9C,cAAA,IAAI3gB,cAAA,CAAgBg0C,eAAe,CAAC,EAAE;kBACpCp2C,KAAK,CAACo2C,eAAe,IAAIA,eAAe;EACxC;EACA,gBAAA,KAAK,IAAIr6C,EAAC,GAAGq6C,eAAe,EAAEr6C,EAAC,EAAE,GAAI;EACnCg5B,kBAAAA,SAAS,CAACrwB,IAAI,CAAC,IAAI,CAAC;EACtB,gBAAA;EACA28C,gBAAAA,SAAS,IAAIjL,eAAe;EAC9B,cAAA;EACA,cAAA,IAAMC,yBAAyB,GAAG+L,SAAS,CAACx+C,gBAAgB,CAC1D,6BACF,CAAC;EACD,cAAA,IAAIyyC,yBAAyB,EAAE;EAC7Br2C,gBAAAA,KAAK,CAACq2C,yBAAyB,GAAG,CAChCr2C,KAAK,CAACq2C,yBAAyB,IAAI,EAAC,EACpC3f,MAAM,CAAC2f,yBAAyB,CAAC75C,KAAK,CAAC,IAAI,CAAC,CAAC;EACjD,cAAA;EACA,cAAA;EACF,YAAA;EACA,UAAA,KAAK,gBAAgB;EACnB,YAAA,IAAIwD,KAAK,CAACg2C,cAAc,KAAK,CAAC,EAAE;EAC9BkM,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA;EACAtF,YAAAA,KAAK,CAACg2C,cAAc,GAAGpiD,IAAI,CAACsD,GAAG,CAACoH,QAAQ,CAAC0jD,MAAM,CAAC,EAAE,CAAC,CAAC;EACpD,YAAA;EACF,UAAA,KAAK,SAAS;EACZ,YAAA,IAAIhiD,KAAK,CAACkG,OAAO,KAAK,IAAI,EAAE;EAC1Bg8C,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA;EACAtF,YAAAA,KAAK,CAACkG,OAAO,GAAG5H,QAAQ,CAAC0jD,MAAM,CAAC;EAChC,YAAA;EACF,UAAA,KAAK,sBAAsB;EACzB,YAAA;EACF,UAAA,KAAK,SAAS;EACZ,YAAA,IAAI,CAAChiD,KAAK,CAAC6sB,IAAI,EAAE;EACfq1B,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA;cACAtF,KAAK,CAAC6sB,IAAI,GAAG,KAAK;EAClB,YAAA;EACF,UAAA,KAAK,GAAG;cACN,IAAIm1B,MAAM,IAAIC,MAAM,EAAE;EACpBjjD,cAAAA,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAACu9C,MAAM,GAAG,CAACD,MAAM,EAAEC,MAAM,CAAC,GAAG,CAACD,MAAM,CAAC,CAAC;EACzD,YAAA;EACA,YAAA;EACF,UAAA,KAAK,eAAe;EAClBT,YAAAA,oBAAoB,EAAE;cACtBviD,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;EAC1B,YAAA;EACF,UAAA,KAAK,KAAK;cACR1F,IAAI,CAAC+B,GAAG,GAAG,IAAI;cACf/B,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC,CAACwxB,GAAG,CAAC,CAAC;EACxB,YAAA;EACF,UAAA,KAAK,SAAS;cACZl3B,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC,CAACwxB,GAAG,EAAE8rB,MAAM,CAAC,CAAC;EAChCR,YAAAA,cAAc,GAAGljD,QAAQ,CAAC0jD,MAAM,CAAC,GAAG,IAAI;EACxC,YAAA,IAAIp/C,cAAA,CAAgB4+C,cAAc,CAAC,EAAE;gBACnCxiD,IAAI,CAACkf,OAAO,GAAGsjC,cAAc;EAC/B,YAAA,CAAC,MAAM;EACLA,cAAAA,cAAc,GAAG,CAAC;EACpB,YAAA;EACA,YAAA;EACF,UAAA,KAAK,WAAW;EAAE,YAAA;gBAChB,IAAMlO,aAAa,GAAG,IAAI1B,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;EACjD,cAAA,IAAMqiD,SAAS,GAAG,IAAIhP,SAAS,CAC7BC,aAAa,EACbtzC,KAAK,CAACs1C,UAAU,CAAChC,aAAa,CAACa,EAAE,CAAC,EAClCn0C,KAAK,CAACu1C,iBACR,CAAC;gBACDv1C,KAAK,CAACu1C,iBAAiB,EAAE;EACzB,cAAA,IAAI8M,SAAS,CAACC,OAAO,IAAItiD,KAAK,CAACo2C,eAAe,EAAE;kBAC9Cp2C,KAAK,CAACs1C,UAAU,CAAC+M,SAAS,CAACrpD,EAAE,CAAC,GAAGqpD,SAAS;EAC5C,cAAA,CAAC,MAAM;EACLlqD,gBAAAA,MAAM,CAACG,IAAI,CAAA,oCAAA,GAAqC0pD,MAAM,OAAG,CAAC;EAC5D,cAAA;EACA;gBACAhjD,IAAI,CAACW,OAAO,CAAC+E,IAAI,CAAC,CAAC,iBAAiB,EAAEs9C,MAAM,CAAC,CAAC;EAC9C,cAAA;EACF,YAAA;EACA,UAAA,KAAK,QAAQ;EAAE,YAAA;EACb,cAAmC;kBACjC,IAAMlC,kBAAkB,GAAG,IAAIlO,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;kBACtD,IAAI,QAAQ,IAAI8/C,kBAAkB,EAAE;EAClCvO,kBAAAA,wBAAwB,CACtBvxC,KAAK,EACL8/C,kBAAkB,EAClBmB,wBACF,CAAC;EACH,gBAAA,CAAC,MAAM;EACLhQ,kBAAAA,qBAAqB,CAACjxC,KAAK,EAAE8/C,kBAAkB,EAAElhD,OAAO,CAAC;EAC3D,gBAAA;EACF,cAAA;EACA,cAAA;EACF,YAAA;EAEA,UAAA,KAAK,wBAAwB;EAC3B,YAAA,IAAIoB,KAAK,CAACu2B,OAAO,KAAK,CAAC,EAAE;EACvB2rB,cAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,YAAA,CAAC,MAAM,IAAIyvB,SAAS,CAACl6B,MAAM,GAAG,CAAC,EAAE;EAC/BsnD,cAAAA,mCAAmC,CAACniD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EACzD,YAAA;cACAtF,KAAK,CAACu2B,OAAO,GAAGgrB,oBAAoB,GAAGjjD,QAAQ,CAAC0jD,MAAM,CAAC;EACvD,YAAA;EACF,UAAA,KAAK,KAAK;EAAE,YAAA;gBACV,IAAMt/C,QAAQ,GAAGm9C,QAAQ,CAACmC,MAAM,EAAEpjD,OAAO,EAAEoB,KAAK,CAAC;EACjD,cAAA,IAAI0C,QAAQ,CAAC06C,WAAW,EAAE,EAAE;EAC1B,gBAAA,IAAI16C,QAAQ,CAACkrC,MAAM,KAAK,MAAM,EAAE;EAC9B/tC,kBAAAA,SAAS,GAAG9F,SAAS;EACrB,kBAAA;EACF,gBAAA;kBACA,IAAI,CAAC8F,SAAS,EAAE;oBACdA,SAAS,GAAG,EAAE;EAChB,gBAAA;EACA,gBAAA,IAAM0iD,UAAU,GAAG1iD,SAAS,CAAC6C,QAAQ,CAACnB,SAAS,CAAC;EAChD;kBACA,IAAI,EAACghD,UAAU,IAAA,IAAA,IAAVA,UAAU,CAAEn+B,OAAO,CAAC1hB,QAAQ,CAAC,CAAA,EAAE;EAClC,kBAAA,IAAI6/C,UAAU,EAAE;EACd1iD,oBAAAA,SAAS,GAAGhH,QAAA,CAAc,EAAE,EAAEgH,SAAS,CAAC;EAC1C,kBAAA;EACAA,kBAAAA,SAAS,CAAC6C,QAAQ,CAACnB,SAAS,CAAC,GAAGmB,QAAQ;EAC1C,gBAAA;EACF,cAAA,CAAC,MAAM;kBACLvK,MAAM,CAACG,IAAI,CAAA,+CAAA,GACsC0pD,MAAM,GAAA,IAAA,IAAsB,EAAE,CAAmB,CAClG,CAAC;EACH,cAAA;EACA,cAAA;EACF,YAAA;EACA,UAAA,KAAK,OAAO;EACVhiD,YAAAA,KAAK,CAAC+1C,eAAe,GAAGkK,oBAAoB,CAAC+B,MAAM,CAAC;EACpD,YAAA;EACF,UAAA,KAAK,KAAK;EAAE,YAAA;gBACV,IAAMQ,QAAQ,GAAG,IAAI5Q,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;gBAC5C,IAAIhB,IAAI,CAACY,QAAQ,EAAE;EACjB;EACA;EACA;kBACA,IAAM6iD,IAAI,GAAG,IAAIvjD,QAAQ,CAACnG,IAAI,EAAE4E,IAAI,CAAC;kBACrC+kD,cAAc,CAACD,IAAI,EAAED,QAAQ,EAAExpD,EAAE,EAAE6G,SAAS,CAAC;EAC7CuhD,gBAAAA,kBAAkB,GAAGqB,IAAI;kBACzBzjD,IAAI,CAAC6B,WAAW,GAAGugD,kBAAkB;kBACrC,IACEA,kBAAkB,CAAC1hD,kBAAkB,IACrC,CAACV,IAAI,CAACU,kBAAiB,EACvB;EACAV,kBAAAA,IAAI,CAACU,kBAAkB,GAAG0hD,kBAAkB,CAAC1hD,kBAAkB;EACjE,gBAAA;EACF,cAAA,CAAC,MAAM;EACL;EACA;EACA,gBAAA,IAAMtC,GAAG,GAAG4B,IAAI,CAACX,kBAAkB;EACnC,gBAAA,IAAIjB,GAAG,EAAE;EACP,kBAAA,IAAMF,KAAK,GAAG8B,IAAI,CAACuuC,oBAA8B;EACjDqU,kBAAAA,aAAa,GAAMxkD,GAAG,GAAGF,KAAK,SAAIA,KAAO;EAC3C,gBAAA,CAAC,MAAM;EACL0kD,kBAAAA,aAAa,GAAG,IAAI;EACtB,gBAAA;kBACAc,cAAc,CAAC1jD,IAAI,EAAEwjD,QAAQ,EAAExpD,EAAE,EAAE6G,SAAS,CAAC;EAC7CuhD,gBAAAA,kBAAkB,GAAGpiD,IAAI;EACzB2iD,gBAAAA,cAAc,GAAG,IAAI;EACvB,cAAA;gBACAP,kBAAkB,CAACnhD,EAAE,GAAGshD,oBAAoB;EAC5C,cAAA;EACF,YAAA;EACA,UAAA,KAAK,gBAAgB;EAAE,YAAA;EACrB,cAAA,IAAIM,kBAAkB,EAAE;EACtBK,gBAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,cAAA;EACAu8C,cAAAA,kBAAkB,GAAG,IAAIjQ,QAAQ,CAACoQ,MAAM,CAAC;gBACzChiD,KAAK,CAACm2C,cAAc,GAAG0L,kBAAkB,CAACl+C,IAAI,CAAC,kBAAkB,CAAC;gBAClE3D,KAAK,CAACuhB,YAAY,GAAGsgC,kBAAkB,CAAC/+B,aAAa,CACnD,gBAAgB,EAChB,CACF,CAAC;EACD9iB,cAAAA,KAAK,CAACwhB,iBAAiB,GACrBxhB,KAAK,CAACuhB,YAAY,GAAG,CAAC,IACtBsgC,kBAAkB,CAACl+C,IAAI,CAAC,qBAAqB,CAAC;gBAChD3D,KAAK,CAACs2C,YAAY,GAAGuL,kBAAkB,CAAC/+B,aAAa,CACnD,gBAAgB,EAChB,CACF,CAAC;gBACD9iB,KAAK,CAACu2C,QAAQ,GAAGsL,kBAAkB,CAAC/+B,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;EACjE,cAAA;EACF,YAAA;EACA,UAAA,KAAK,UAAU;EAAE,YAAA;gBACf,IAAI9iB,KAAK,CAACmzB,UAAU,EAAE;EACpB+uB,gBAAAA,4CAA4C,CAACliD,KAAK,EAAEk2B,GAAG,EAAE5wB,MAAM,CAAC;EAClE,cAAA;EACA,cAAA,IAAMq9C,YAAY,GAAG,IAAI/Q,QAAQ,CAACoQ,MAAM,CAAC;gBACzChiD,KAAK,CAACmzB,UAAU,GAAGwvB,YAAY,CAACj/C,oBAAoB,CAAC,aAAa,CAAC;EACnE,cAAA;EACF,YAAA;EACA,UAAA,KAAK,MAAM;EAAE,YAAA;EACX,cAAA,IAAIy/B,QAAQ,GAAGnjC,KAAK,CAACmjC,QAAQ;gBAC7B,IAAI,CAACA,QAAQ,EAAE;EACbA,gBAAAA,QAAQ,GAAGnjC,KAAK,CAACmjC,QAAQ,GAAG,EAAE;EAChC,cAAA;EACA,cAAA,IAAMyf,oBAAoB,GACxBtB,WAAW,GAAG,CAAC,GAAGne,QAAQ,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC,GAAGd,SAAS;gBAC7D,IAAMsJ,KAAK,GAAGi+C,WAAW,EAAE;gBAC3B,IAAMl+C,SAAS,GAAG,IAAIwuC,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;EAC7C,cAAA,IAAM6hB,IAAI,GAAG,IAAI3e,IAAI,CACnBE,SAAS,EACTpE,IAAI,EACJrB,IAAI,EACJ0F,KAAK,EACLu/C,oBACF,CAAC;EACDzf,cAAAA,QAAQ,CAACz+B,IAAI,CAACmd,IAAI,CAAC;EACnB7iB,cAAAA,IAAI,CAACY,QAAQ,IAAIiiB,IAAI,CAACjiB,QAAQ;EAC9B,cAAA;EACF,YAAA;EACA,UAAA,KAAK,cAAc;EAAE,YAAA;gBACnB,IAAMijD,gBAAgB,GAAG,IAAIjR,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;gBACpDA,KAAK,CAACw2C,WAAW,GAAGqM,gBAAgB;EACpC,cAAA;EACF,YAAA;EACA,UAAA,KAAK,kBAAkB;EAAE,YAAA;gBACvB,IAAMC,oBAAoB,GAAG,IAAIlR,QAAQ,CAACoQ,MAAM,EAAEhiD,KAAK,CAAC;EACxDA,cAAAA,KAAK,CAACy2C,gBAAgB,GAAGz2C,KAAK,CAACy2C,gBAAgB,IAAI,EAAE;EACrDz2C,cAAAA,KAAK,CAACy2C,gBAAgB,CAAC/xC,IAAI,CAACo+C,oBAAoB,CAAC;EACjD,cAAA;EACF,YAAA;EACA,UAAA;EACE3qD,YAAAA,MAAM,CAACG,IAAI,CAAA,+BAAA,GAAiCgN,MAAQ,CAAC;EACrD,YAAA;EACJ;EACF,MAAA;EACF,IAAA;EACA,IAAA,IAAIm8C,QAAQ,IAAI,CAACA,QAAQ,CAACzjD,MAAM,EAAE;QAChC+2B,SAAS,CAACguB,GAAG,EAAE;QACf9M,aAAa,IAAIwL,QAAQ,CAAC7hD,QAAQ;QAClC,IAAII,KAAK,CAACmjC,QAAQ,EAAE;UAClBnjC,KAAK,CAACy2B,YAAY,GAAGgrB,QAAyB;EAChD,MAAA;EACF,IAAA,CAAC,MAAM,IAAIzhD,KAAK,CAACmjC,QAAQ,EAAE;EACzB4e,MAAAA,qBAAqB,CACnB/iD,IAAI,EACJyiD,QAAQ,EACRN,gBACF,CAAC;QACDniD,IAAI,CAACiB,EAAE,GAAGshD,oBAAoB;QAC9BvhD,KAAK,CAACy2B,YAAY,GAAGz3B,IAAqB;EAC1C,MAAA,IAAIa,SAAS,EAAE;EACbiiD,QAAAA,gBAAgB,CAAC9iD,IAAI,EAAEa,SAAS,EAAEG,KAAK,CAAC;EAC1C,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACA,KAAK,CAACg2C,cAAc,EAAE;EACzBh2C,MAAAA,KAAK,CAACgxC,oBAAoB,GAAG,IAAInzB,KAAK,0BAA0B,CAAC;EACnE,IAAA;EACA,IAAA,IAAMmlC,cAAc,GAAGjuB,SAAS,CAACl6B,MAAM;EACvC,IAAA,IAAMooD,aAAa,GAAGluB,SAAS,CAAC,CAAC,CAAC;EAClC,IAAA,IAAMmuB,YAAY,GAAGnuB,SAAS,CAACiuB,cAAc,GAAG,CAAC,CAAC;EAClD/M,IAAAA,aAAa,IAAIj2C,KAAK,CAACo2C,eAAe,GAAGp2C,KAAK,CAACg2C,cAAc;EAC7D,IAAA,IAAIC,aAAa,GAAG,CAAC,IAAI+M,cAAc,IAAIE,YAAY,EAAE;EACvDljD,MAAAA,KAAK,CAACozB,qBAAqB,GAAG6iB,aAAa,GAAG+M,cAAc;EAC5D,MAAA,IAAMG,MAAM,GAAGD,YAAY,CAACjkD,EAAE;QAC9Be,KAAK,CAACq1C,KAAK,GAAG8N,MAAM,KAAK,aAAa,GAAGA,MAAM,GAAG,CAAC;EACnD,MAAA,IAAI,CAACnjD,KAAK,CAAC6sB,IAAI,EAAE;UACfq2B,YAAY,CAACpiD,OAAO,GAAG,IAAI;EAC7B,MAAA;EACA;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;QACM,IAAI4gD,aAAa,GAAG,CAAC,EAAE;EACrB0B,QAAAA,wBAAwB,CAACruB,SAAS,EAAE2sB,aAAa,CAAC;EAClD,QAAA,IAAIuB,aAAa,EAAE;EACjB9B,UAAAA,gBAAgB,CAACkC,OAAO,CAACJ,aAA8B,CAAC;EAC1D,QAAA;EACF,MAAA;EACF,IAAA;MACA,IAAIjjD,KAAK,CAACy2B,YAAY,EAAE;EACtBwf,MAAAA,aAAa,IAAIj2C,KAAK,CAACy2B,YAAY,CAAC72B,QAAQ;EAC9C,IAAA;MACAI,KAAK,CAACi2C,aAAa,GAAGA,aAAa;MACnC,IAAIkL,gBAAgB,CAACtmD,MAAM,IAAImF,KAAK,CAACu1C,iBAAiB,IAAI0N,aAAa,EAAE;EACvEK,MAAAA,aAAa,CAACnC,gBAAgB,EAAEnhD,KAAK,CAAC;EACxC,IAAA;MAEAA,KAAK,CAACw2B,KAAK,GAAG+qB,oBAAoB;EAElC,IAAA,OAAOvhD,KAAK;IACd,CAAA;EAAA,EAAA,OAAAy+C,UAAA;EAAA,CAAA,EAAA;EAGK,SAAS6E,aAAaA,CAC3BnC,gBAAiC,EACjC7/B,OAAqB,EACrB;EACA;EACA,EAAA,IAAIiiC,oBAAoB,GAAGpC,gBAAgB,CAACtmD,MAAM;IAClD,IAAI,CAAC0oD,oBAAoB,EAAE;MACzB,IAAIjiC,OAAO,CAACkiC,kBAAkB,EAAE;EAC9B,MAAA,IAAMN,YAAY,GAAG5hC,OAAO,CAACyT,SAAS,CAACzT,OAAO,CAACyT,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC;EACpEsmD,MAAAA,gBAAgB,CAACz8C,IAAI,CAACw+C,YAAY,CAAC;EACnCK,MAAAA,oBAAoB,EAAE;EACxB,IAAA,CAAC,MAAM;EACL;EACA,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,IAAME,mBAAmB,GAAGtC,gBAAgB,CAACoC,oBAAoB,GAAG,CAAC,CAAC;IACtE,IAAMG,WAAW,GAAGpiC,OAAO,CAACuL,IAAI,GAAGre,QAAQ,GAAG8S,OAAO,CAAC20B,aAAa;IACnE,IAAM0N,YAAY,GAAGjpD,MAAM,CAAChB,IAAI,CAAC4nB,OAAO,CAACg0B,UAAU,CAAC;IACpD,KAAK,IAAIv5C,CAAC,GAAG4nD,YAAY,CAAC9oD,MAAM,EAAEkB,CAAC,EAAE,GAAI;MACvC,IAAMsmD,SAAS,GAAG/gC,OAAO,CAACg0B,UAAU,CAACqO,YAAY,CAAC5nD,CAAC,CAAC,CAAE;MACtD,IAAM6nD,aAAa,GAAGvB,SAAS,CAAC3N,SAAS,CAAClhD,OAAO,EAAE;EACnD6uD,IAAAA,SAAS,CAAC3O,SAAS,GAAG+P,mBAAmB,CAAC30C,GAAG;EAC7C,IAAA,KAAK,IAAIpB,CAAC,GAAG61C,oBAAoB,EAAE71C,CAAC,EAAE,GAAI;EAAA,MAAA,IAAAm2C,mBAAA;EACxC,MAAA,IAAI,CAAA,CAAAA,mBAAA,GAAA1C,gBAAgB,CAACzzC,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAAnBm2C,mBAAA,CAAqB5kD,EAAE,IAAGqiB,OAAO,CAACw0B,OAAO,EAAE;EAC7C,QAAA;EACF,MAAA;EACA,MAAA,IAAMgO,SAAS,GAAGC,yBAAyB,CACzCziC,OAAO,EACPsiC,aAAa,EACbzC,gBAAgB,EAChBzzC,CAAC,EACDg2C,WACF,CAAC;EACD,MAAA,IAAII,SAAS,KAAK,EAAE,EAAE;UACpBzB,SAAS,CAAC3O,SAAS,GAAGpyB,OAAO,CAACyT,SAAS,CAAC+uB,SAAS,CAAC,CAACh1C,GAAG;EACtD,QAAA;EACF,MAAA;EACF,IAAA;EACF,EAAA;EACF;EAEA,SAASi1C,yBAAyBA,CAChCziC,OAAqB,EACrBsiC,aAAqB,EACrBzC,gBAAiC,EACjC99C,KAAa,EACb4+B,OAAe,EACP;EACR,EAAA,IAAM+hB,WAAW,GAAG7C,gBAAgB,CAAC99C,KAAK,CAA8B;EACxE,EAAA,IAAI2gD,WAAW,EAAE;EACf;EACA,IAAA,IAAMC,QAAQ,GAAGD,WAAW,CAACrhD,eAAyB;EACtD,IAAA,IAAIihD,aAAa,IAAIK,QAAQ,IAAI5gD,KAAK,KAAK,CAAC,EAAE;EAAA,MAAA,IAAA6gD,iBAAA;QAC5C,IAAMC,kBAAkB,GACtB,CAAC,CAAA,CAAAD,iBAAA,GAAA/C,gBAAgB,CAAC99C,KAAK,GAAG,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAA3B6gD,iBAAA,CAA6BhnD,KAAK,KAAI+kC,OAAO,IAAI+hB,WAAW,CAAC9mD,KAAK;EACrE,MAAA,IAAI0mD,aAAa,IAAIK,QAAQ,GAAGE,kBAAkB,GAAG,IAAI,EAAE;EACzD;UACA,IAAMC,UAAU,GAAGjD,gBAAgB,CAAC99C,KAAK,CAAC,CAACpE,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO;UAC/D,IAAIsO,UAAU,GAAG,CAAC,EAAE;EAClB,UAAA,OAAO,EAAE;EACX,QAAA;EACA,QAAA,IAAMrvB,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACnC,QAAA,IAAIA,SAAS,CAACl6B,MAAM,GAAGsmD,gBAAgB,CAACtmD,MAAM,EAAE;EAC9C,UAAA,IAAMwpD,UAAU,GACdlD,gBAAgB,CAAC99C,KAAK,GAAG,CAAC,CAAC,IAAI0xB,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC;YAChE,IAAMypD,QAAQ,GAAGD,UAAU,CAACplD,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO;YAChD,KAAK,IAAI/5C,CAAC,GAAGuoD,QAAQ,EAAEvoD,CAAC,GAAGqoD,UAAU,EAAEroD,CAAC,EAAE,EAAE;EAC1C,YAAA,IAAMwoD,iBAAiB,GAAGxvB,SAAS,CAACh5B,CAAC,CAAC,CAAC4G,eAAyB;EAChE,YAAA,IACEihD,aAAa,IAAIW,iBAAiB,IAClCX,aAAa,GAAGW,iBAAiB,GAAGxvB,SAAS,CAACh5B,CAAC,CAAC,CAAC6D,QAAQ,GAAG,IAAG,EAC/D;EACA,cAAA,OAAO7D,CAAC;EACV,YAAA;EACF,UAAA;EACF,QAAA;EACA,QAAA,OAAOqoD,UAAU;EACnB,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,OAAO,EAAE;EACX;EAEA,SAASvE,QAAQA,CACf2E,gBAAwB,EACxB5lD,OAAe,EACf8xC,MAAiD,EACvC;IAAA,IAAA+T,gBAAA,EAAAC,mBAAA;EACV;IACA,IAAMC,QAAQ,GAAG,IAAI/S,QAAQ,CAAC4S,gBAAgB,EAAE9T,MAAM,CAAC;IACvD,IAAMkU,aAAa,GAAA,CAAAH,gBAAA,GAAGE,QAAQ,CAACE,MAAM,KAAA,IAAA,GAAAJ,gBAAA,GAAI,EAAE;EAC3C,EAAA,IAAMK,UAAU,GAAGH,QAAQ,CAAC/D,GAAG;EAC/B,EAAA,IAAMmE,SAAS,GAAGJ,QAAQ,CAAC3S,kBAAkB,CAAC,IAAI,CAAC;EACnD,EAAA,IAAMgT,wBAAwB,GAAGL,QAAQ,CAACM,iBAAiB;EAC3D;IACA,IAAMC,gBAAgB,GAAA,CAAAR,mBAAA,GAAGC,QAAQ,CAACQ,SAAS,KAAA,IAAA,GAAAT,mBAAA,GAAI,UAAU;IAEzD,IAAII,UAAU,IAAIH,QAAQ,CAACS,EAAE,IAAI,CAACL,SAAS,EAAE;EAC3C5sD,IAAAA,MAAM,CAACtF,KAAK,CAAA,cAAA,GAAgB8xD,QAAQ,CAACS,EAAI,CAAC;EAC5C,EAAA;EACA;EACA;EACA,EAAA,IAAMC,WAAW,GAAGP,UAAU,GAAGrG,UAAU,CAAClgC,OAAO,CAACumC,UAAU,EAAElmD,OAAO,CAAC,GAAG,EAAE;IAC7E,IAAMq+C,iBAAiB,GAAG,CACxB+H,wBAAwB,GAAGA,wBAAwB,GAAG,GAAE,EAEvDxoD,KAAK,CAAC,GAAG,CAAA,CACTwT,GAAG,CAAChc,MAAM,CAAA,CACVgvB,MAAM,CAAChvB,MAAM,CAACC,QAAQ,CAAC;EAE1B,EAAA,OAAO,IAAI8oD,QAAQ,CACjB6H,aAAa,EACbS,WAAW,EACXH,gBAAgB,EAChBjI,iBAAiB,EACjB8H,SAAS,EACTJ,QAAQ,CAACW,KACX,CAAC;EACH;EAEA,SAASrF,oBAAoBA,CAACsF,eAAuB,EAAiB;EACpE,EAAA,IAAMC,UAAU,GAAG,IAAI5T,QAAQ,CAAC2T,eAAe,CAAC;EAChD,EAAA,IAAMxP,eAAe,GAAGyP,UAAU,CAAC9hD,oBAAoB,CAAC,aAAa,CAAC;EACtE,EAAA,IAAIT,cAAA,CAAgB8yC,eAAe,CAAC,EAAE;EACpC,IAAA,OAAOA,eAAe;EACxB,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEA,SAASuJ,SAASA,CAChBmG,oBAAwC,EACxCzlD,KAAmB,EACnB;EACA,EAAA,IAAIwZ,MAAM,GAAG,CAACisC,oBAAoB,IAAI,EAAE,EAAEjpD,KAAK,CAAC,OAAO,CAAC,CAACwmB,MAAM,CAAC,UAACtvB,CAAC,EAAA;EAAA,IAAA,OAAKA,CAAC;IAAA,CAAA,CAAC;IACzE,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAACiG,OAAO,CAAC,UAACZ,IAAe,EAAK;EACtD,IAAA,IAAM2sD,QAAQ,GAAGlsC,MAAM,CAACwJ,MAAM,CAAC,UAAC9a,KAAK,EAAA;EAAA,MAAA,OAAKmR,WAAW,CAACnR,KAAK,EAAEnP,IAAI,CAAC;MAAA,CAAA,CAAC;MACnE,IAAI2sD,QAAQ,CAAC7qD,MAAM,EAAE;EACnB;QACAmF,KAAK,CAAIjH,IAAI,GAAA,OAAA,CAAQ,GAAG2sD,QAAQ,CAAC11C,GAAG,CAAC,UAACtc,CAAC,EAAA;UAAA,OAAKA,CAAC,CAAC8I,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAAA,MAAA,CAAA,CAAC,CAACoW,IAAI,CAAC,GAAG,CAAC;EACtE;EACA4G,MAAAA,MAAM,GAAGA,MAAM,CAACwJ,MAAM,CAAC,UAAC9a,KAAK,EAAA;UAAA,OAAKw9C,QAAQ,CAACzqD,OAAO,CAACiN,KAAK,CAAC,KAAK,EAAE;QAAA,CAAA,CAAC;EACnE,IAAA;EACF,EAAA,CAAC,CAAC;IACFlI,KAAK,CAACw/C,aAAa,GAAGhmC,MAAM;EAC9B;EAEA,SAASsnC,WAAWA,CAClB38B,KAAoB,EACpBwhC,SAAsD,EACtDC,aAAyC,EACzC;EACA,EAAA,IAAMC,UAAU,GAAGF,SAAS,CAACC,aAAa,CAAC;EAC3C,EAAA,IAAIC,UAAU,EAAE;EACd1hC,IAAAA,KAAK,CAACyhC,aAAa,CAAC,GAAGC,UAAU;EACnC,EAAA;EACF;EAEA,SAASzC,wBAAwBA,CAC/BruB,SAA8B,EAC9B2sB,aAAqB,EACrB;EACA,EAAA,IAAIoE,QAAQ,GAAG/wB,SAAS,CAAC2sB,aAAa,CAAa;EACnD,EAAA,KAAK,IAAI3lD,CAAC,GAAG2lD,aAAa,EAAE3lD,CAAC,EAAE,GAAI;EACjC,IAAA,IAAMiD,IAAI,GAAG+1B,SAAS,CAACh5B,CAAC,CAAC;EACzB;MACA,IAAI,CAACiD,IAAI,EAAE;EACT,MAAA;EACF,IAAA;MACAA,IAAI,CAAC2D,eAAe,GACjBmjD,QAAQ,CAACnjD,eAAe,GAAc3D,IAAI,CAACY,QAAQ,GAAG,IAAI;EAC7DkmD,IAAAA,QAAQ,GAAG9mD,IAAI;EACjB,EAAA;EACF;EAEO,SAAS+iD,qBAAqBA,CACnC/iD,IAAmB,EACnByiD,QAA8B,EAC9BN,gBAAiC,EACjC;IACA,IAAIniD,IAAI,CAACU,kBAAkB,EAAE;EAC3ByhD,IAAAA,gBAAgB,CAACz8C,IAAI,CAAC1F,IAAI,CAAC;EAC7B,EAAA,CAAC,MAAM,IAAIyiD,QAAQ,YAARA,QAAQ,CAAE9+C,eAAe,EAAE;EACpC3D,IAAAA,IAAI,CAAC2D,eAAe,GAAG8+C,QAAQ,CAACpsB,kBAAkB;EACpD,EAAA;EACF;EAEA,SAASqtB,cAAcA,CACrB1jD,IAAc,EACdwjD,QAAkB,EAClBxpD,EAAU,EACV6G,SAAgC,EAChC;EACAb,EAAAA,IAAI,CAAChB,MAAM,GAAGwkD,QAAQ,CAAC5B,GAAG;IAC1B,IAAI4B,QAAQ,CAACuD,SAAS,EAAE;EACtB/mD,IAAAA,IAAI,CAACd,YAAY,CAACskD,QAAQ,CAACuD,SAAS,CAAC;EACvC,EAAA;IACA/mD,IAAI,CAACgB,KAAK,GAAGhH,EAAE;IACfgG,IAAI,CAACC,EAAE,GAAG,aAAa;EACvB,EAAA,IAAIY,SAAS,EAAE;MACbb,IAAI,CAACa,SAAS,GAAGA,SAAS;EAC5B,EAAA;IACAb,IAAI,CAAC6B,WAAW,GAAG,IAAI;EACzB;EAEA,SAASihD,gBAAgBA,CACvB9iD,IAAc,EACda,SAAoB,EACpBG,KAAmB,EACnB;IACAhB,IAAI,CAACa,SAAS,GAAGA,SAAS;EAC1B,EAAA,IAAQm3C,kBAAkB,GAAKh3C,KAAK,CAA5Bg3C,kBAAkB;EAC1B,EAAA,IACE,CAAC,CAACA,kBAAkB,CAACn8C,MAAM,IACzBm8C,kBAAkB,CAACA,kBAAkB,CAACn8C,MAAM,GAAG,CAAC,CAAC,CAACgF,SAAS,KACzDA,SAAS,KACbnF,MAAM,CAAChB,IAAI,CAACmG,SAAS,CAAC,CAAC9E,IAAI,CACzB,UAACm/C,MAAM,EAAA;EAAA,IAAA,OAAKr6C,SAAS,CAACq6C,MAAM,CAAC,CAAEvuC,kBAAkB;EAAA,EAAA,CACnD,CAAA,EACA;EACAqrC,IAAAA,kBAAkB,CAACtyC,IAAI,CAAC1F,IAAI,CAAC;EAC/B,EAAA;EACF;EAEA,SAASkjD,4CAA4CA,CACnDliD,KAAmB,EACnBk2B,GAAW,EACX5wB,MAAgB,EAChB;EACAtF,EAAAA,KAAK,CAACgxC,oBAAoB,GAAG,IAAInzB,KAAK,CAAA,SAAA,GAC1BqY,GAAG,GAAA,mCAAA,GAAoC5wB,MAAM,CAAC,CAAC,CAAC,MAC5D,CAAC;EACH;EAEA,SAAS68C,mCAAmCA,CAC1CniD,KAAmB,EACnBk2B,GAAW,EACX5wB,MAAgB,EAChB;EACAtF,EAAAA,KAAK,CAACgxC,oBAAoB,GAAG,IAAInzB,KAAK,CAAA,SAAA,GAC1BqY,GAAG,GAAA,+CAAA,GAAgD5wB,MAAM,CAAC,CAAC,CAAC,MACxE,CAAC;EACH;;EC18BA,SAAS0gD,eAAeA,CAACC,QAAuB,EAAEC,MAAqB,EAAE;EACvE,EAAA,IAAMC,SAAS,GAAGD,MAAM,CAAChmD,QAAkB;EAC3C;EACA,EAAA,IAAIiC,cAAA,CAAgBgkD,SAAS,CAAC,EAAE;EAC9B;EACA;MACA,IAAIvmD,QAAgB,GAAG,CAAC;EACxB,IAAA,IAAIZ,IAAc;EAClB,IAAA,IAAIknD,MAAM,CAACjnD,EAAE,GAAGgnD,QAAQ,CAAChnD,EAAE,EAAE;EAC3BW,MAAAA,QAAQ,GAAGumD,SAAS,GAAGF,QAAQ,CAAC/oD,KAAK;EACrC8B,MAAAA,IAAI,GAAGinD,QAAQ;EACjB,IAAA,CAAC,MAAM;EACLrmD,MAAAA,QAAQ,GAAGqmD,QAAQ,CAAC/oD,KAAK,GAAGipD,SAAS;EACrCnnD,MAAAA,IAAI,GAAGknD,MAAM;EACf,IAAA;EACA,IAAA,IAAIlnD,IAAI,CAACY,QAAQ,KAAKA,QAAQ,EAAE;EAC9BZ,MAAAA,IAAI,CAACqC,WAAW,CAACzB,QAAQ,CAAC;EAC5B,IAAA;EACA;IACF,CAAC,MAAM,IAAIsmD,MAAM,CAACjnD,EAAE,GAAGgnD,QAAQ,CAAChnD,EAAE,EAAE;MAClC,IAAMmnD,UAAU,GAAGH,QAAQ,CAAChmD,EAAE,KAAKimD,MAAM,CAACjmD,EAAE;EAC5C;EACA,IAAA,IAAImmD,UAAU,IAAIH,QAAQ,CAACxlD,SAAS,EAAE;EACpCylD,MAAAA,MAAM,CAAC9kD,QAAQ,CAAC6kD,QAAQ,CAAC/oD,KAAK,IAAI+oD,QAAQ,CAACxlD,SAAS,GAAGwlD,QAAQ,CAAC/oD,KAAK,CAAC,CAAC;EACzE,IAAA,CAAC,MAAM;QACLgpD,MAAM,CAAC9kD,QAAQ,CAAC6kD,QAAQ,CAAC/oD,KAAK,GAAG+oD,QAAQ,CAACrmD,QAAQ,CAAC;EACrD,IAAA;EACF,EAAA,CAAC,MAAM;EACLsmD,IAAAA,MAAM,CAAC9kD,QAAQ,CAACxN,IAAI,CAACsD,GAAG,CAAC+uD,QAAQ,CAAC/oD,KAAK,GAAGgpD,MAAM,CAACtmD,QAAQ,EAAE,CAAC,CAAC,CAAC;EAChE,EAAA;EACF;EAEO,SAASymD,gBAAgBA,CAC9B/kC,OAAiC,EACjCtiB,IAAmB,EACnBkB,QAAgB,EAChBC,MAAc,EACdC,QAAgB,EAChBC,MAAc,EACdlI,MAAe,EACP;EACR,EAAA,IAAMmuD,mBAAmB,GAAGnmD,MAAM,GAAGD,QAAQ;IAC7C,IAAIomD,mBAAmB,IAAI,CAAC,EAAE;EAC5BnuD,IAAAA,MAAM,CAACG,IAAI,CAAC,0CAA0C,EAAE0G,IAAI,CAAC;EAC7DmB,IAAAA,MAAM,GAAGD,QAAQ,GAAGlB,IAAI,CAACY,QAAQ;EACjCS,IAAAA,MAAM,GAAGD,QAAQ,GAAGpB,IAAI,CAACY,QAAQ;EACnC,EAAA;IACA,IAAIY,WAAW,GAAGN,QAAQ;IAC1B,IAAIO,SAAS,GAAGN,MAAM;EACtB,EAAA,IAAMomD,YAAY,GAAGvnD,IAAI,CAACkB,QAAkB;EAC5C,EAAA,IAAMsmD,UAAU,GAAGxnD,IAAI,CAACmB,MAAgB;EACxC,EAAA,IAAIiC,cAAA,CAAgBmkD,YAAY,CAAC,EAAE;EACjC;MACA,IAAMhmD,QAAQ,GAAG3M,IAAI,CAACQ,GAAG,CAACmyD,YAAY,GAAGrmD,QAAQ,CAAC;EAClD,IAAA,IAAIohB,OAAO,IAAI/gB,QAAQ,GAAG+gB,OAAO,CAAC20B,aAAa,EAAE;EAC/C99C,MAAAA,MAAM,CAACG,IAAI,CAAA,gDAAA,GACwCiI,QAAQ,GAAA,cAAA,GAAevB,IAAI,CAACgB,KAAK,GAAA,GAAA,GAAIshB,OAAO,CAACxuB,GAChG,CAAC;MACH,CAAC,MAAM,IAAI,CAAC8P,cAAA,CAAgB5D,IAAI,CAACuB,QAAkB,CAAC,EAAE;QACpDvB,IAAI,CAACuB,QAAQ,GAAGA,QAAQ;EAC1B,IAAA,CAAC,MAAM;EACLvB,MAAAA,IAAI,CAACuB,QAAQ,GAAG3M,IAAI,CAACsD,GAAG,CAACqJ,QAAQ,EAAEvB,IAAI,CAACuB,QAAkB,CAAC;EAC7D,IAAA;MAEAC,WAAW,GAAG5M,IAAI,CAACsD,GAAG,CAACgJ,QAAQ,EAAEqmD,YAAY,CAAC;MAC9CrmD,QAAQ,GAAGtM,IAAI,CAAC+D,GAAG,CAACuI,QAAQ,EAAEqmD,YAAY,CAAC;EAC3CnmD,IAAAA,QAAQ,GACNpB,IAAI,CAACoB,QAAQ,KAAKrG,SAAS,GACvBnG,IAAI,CAAC+D,GAAG,CAACyI,QAAQ,EAAEpB,IAAI,CAACoB,QAAQ,CAAC,GACjCA,QAAQ;MAEdK,SAAS,GAAG7M,IAAI,CAAC+D,GAAG,CAACwI,MAAM,EAAEqmD,UAAU,CAAC;MACxCrmD,MAAM,GAAGvM,IAAI,CAACsD,GAAG,CAACiJ,MAAM,EAAEqmD,UAAU,CAAC;EACrCnmD,IAAAA,MAAM,GAAGrB,IAAI,CAACqB,MAAM,KAAKtG,SAAS,GAAGnG,IAAI,CAACsD,GAAG,CAACmJ,MAAM,EAAErB,IAAI,CAACqB,MAAM,CAAC,GAAGA,MAAM;EAC7E,EAAA;EAEA,EAAA,IAAMomD,KAAK,GAAGvmD,QAAQ,GAAGlB,IAAI,CAAC9B,KAAK;EACnC,EAAA,IAAI8B,IAAI,CAAC9B,KAAK,KAAK,CAAC,EAAE;EACpB8B,IAAAA,IAAI,CAACoC,QAAQ,CAAClB,QAAQ,CAAC;EACzB,EAAA;IACAlB,IAAI,CAACqC,WAAW,CAAClB,MAAM,GAAGnB,IAAI,CAAC9B,KAAK,CAAC;IACrC8B,IAAI,CAACkB,QAAQ,GAAGA,QAAQ;IACxBlB,IAAI,CAACwB,WAAW,GAAGA,WAAW;IAC9BxB,IAAI,CAACoB,QAAQ,GAAGA,QAAQ;IACxBpB,IAAI,CAACmB,MAAM,GAAGA,MAAM;IACpBnB,IAAI,CAACyB,SAAS,GAAGA,SAAS;IAC1BzB,IAAI,CAACqB,MAAM,GAAGA,MAAM;EAEpB,EAAA,IAAMpB,EAAE,GAAGD,IAAI,CAACC,EAAE;EAClB;EACA,EAAA,IAAI,CAACqiB,OAAO,IAAIriB,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO,IAAI72C,EAAE,GAAGqiB,OAAO,CAAC+zB,KAAK,EAAE;EAC1D,IAAA,OAAO,CAAC;EACV,EAAA;EACA,EAAA,IAAIt5C,CAAS;EACb,EAAA,IAAM2qD,OAAO,GAAGznD,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO;EACpC,EAAA,IAAM/gB,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACnC;EACA;EACA;EACA;EACA;EACAA,EAAAA,SAAS,CAAC2xB,OAAO,CAAC,GAAG1nD,IAAI;EACzB;IACA,KAAKjD,CAAC,GAAG2qD,OAAO,EAAE3qD,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC5BiqD,IAAAA,eAAe,CAACjxB,SAAS,CAACh5B,CAAC,CAAC,EAAEg5B,SAAS,CAACh5B,CAAC,GAAG,CAAC,CAAC,CAAC;EACjD,EAAA;;EAEA;EACA,EAAA,KAAKA,CAAC,GAAG2qD,OAAO,EAAE3qD,CAAC,GAAGg5B,SAAS,CAACl6B,MAAM,GAAG,CAAC,EAAEkB,CAAC,EAAE,EAAE;EAC/CiqD,IAAAA,eAAe,CAACjxB,SAAS,CAACh5B,CAAC,CAAC,EAAEg5B,SAAS,CAACh5B,CAAC,GAAG,CAAC,CAAC,CAAC;EACjD,EAAA;IACA,IAAIulB,OAAO,CAACmV,YAAY,EAAE;EACxBuvB,IAAAA,eAAe,CAACjxB,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,EAAEymB,OAAO,CAACmV,YAAY,CAAC;EACxE,EAAA;EAEAnV,EAAAA,OAAO,CAAC6zB,QAAQ,GAAG7zB,OAAO,CAAC8zB,cAAc,GAAG,IAAI;EAChD,EAAA,OAAOqR,KAAK;EACd;EAEO,SAASE,YAAYA,CAC1BC,UAAwB,EACxBC,UAAwB,EACxB1uD,MAAe,EACf;IACA,IAAIyuD,UAAU,KAAKC,UAAU,EAAE;EAC7B,IAAA;EACF,EAAA;EACA;IACA,IAAIzF,kBAAmC,GAAG,IAAI;EAC9C,EAAA,IAAM0F,YAAY,GAAGF,UAAU,CAAC7xB,SAAS;EACzC,EAAA,KAAK,IAAIh5B,CAAC,GAAG+qD,YAAY,CAACjsD,MAAM,GAAG,CAAC,EAAEkB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;EACjD,IAAA,IAAMgrD,OAAO,GAAGD,YAAY,CAAC/qD,CAAC,CAAC,CAAC8E,WAAW;EAC3C,IAAA,IAAIkmD,OAAO,EAAE;EACX3F,MAAAA,kBAAkB,GAAG2F,OAAO;EAC5B,MAAA;EACF,IAAA;EACF,EAAA;IAEA,IAAIH,UAAU,CAACnwB,YAAY,EAAE;EAC3B;EACA,IAAA,OAAOmwB,UAAU,CAACnwB,YAAY,CAACt2B,MAAM;EACvC,EAAA;EACA;EACA;EACA,EAAA,IAAI6mD,OAAkC;EACtCC,EAAAA,uBAAuB,CACrBL,UAAU,EACVC,UAAU,EACV,UAACK,OAAO,EAAEC,OAAO,EAAEC,YAAY,EAAEC,YAAY,EAAK;EAChD,IAAA,IACE,CAAC,CAACR,UAAU,CAACtwB,OAAO,IAAIswB,UAAU,CAACzQ,eAAe,KAClD+Q,OAAO,CAAClnD,EAAE,KAAKinD,OAAO,CAACjnD,EAAE,EACzB;QACA,IAAMqnD,QAAQ,GAAGJ,OAAO,CAACjnD,EAAE,GAAGknD,OAAO,CAAClnD,EAAE;EACxC,MAAA,KAAK,IAAIlE,EAAC,GAAGqrD,YAAY,EAAErrD,EAAC,GAAGsrD,YAAY,CAACxsD,MAAM,EAAEkB,EAAC,EAAE,EAAE;EACvDsrD,QAAAA,YAAY,CAACtrD,EAAC,CAAC,CAACkE,EAAE,IAAIqnD,QAAQ;EAChC,MAAA;EACAT,MAAAA,UAAU,CAACrwB,KAAK,GAAG6wB,YAAY,CAACA,YAAY,CAACxsD,MAAM,GAAG,CAAC,CAAC,CAACoF,EAAE;EAC7D,IAAA;EACA,IAAA,IACEgD,cAAA,CAAgBikD,OAAO,CAAChnD,QAAQ,CAAC,IACjCqnD,cAAA,CAAgBL,OAAO,CAAC/mD,MAAM,CAAC,EAC/B;QACAgnD,OAAO,CAAC/lD,QAAQ,CAAE+lD,OAAO,CAACjnD,QAAQ,GAAGgnD,OAAO,CAAChnD,QAAU,CAAC;EACxDinD,MAAAA,OAAO,CAAC/mD,QAAQ,GAAG8mD,OAAO,CAAC9mD,QAAQ;EACnC+mD,MAAAA,OAAO,CAAC3mD,WAAW,GAAG0mD,OAAO,CAAC1mD,WAAW;EAEzC2mD,MAAAA,OAAO,CAAChnD,MAAM,GAAG+mD,OAAO,CAAC/mD,MAAM;EAC/BgnD,MAAAA,OAAO,CAAC9mD,MAAM,GAAG6mD,OAAO,CAAC7mD,MAAM;EAC/B8mD,MAAAA,OAAO,CAAC1mD,SAAS,GAAGymD,OAAO,CAACzmD,SAAS;QACrC0mD,OAAO,CAAC9lD,WAAW,CAAC6lD,OAAO,CAAC/mD,MAAM,GAAI+mD,OAAO,CAAChnD,QAAS,CAAC;QAExD,IAAIinD,OAAO,CAACvnD,QAAQ,EAAE;EACpBonD,QAAAA,OAAO,GAAGG,OAAO;EACnB,MAAA;;EAEA;EACAN,MAAAA,UAAU,CAAC1R,QAAQ,GAAG0R,UAAU,CAACzR,cAAc,GAAG,IAAI;EACxD,IAAA;MAEA,IAAI8R,OAAO,CAACM,UAAU,EAAE;EACtBL,MAAAA,OAAO,CAAC3oD,iBAAiB,GAAG0oD,OAAO,CAAC1oD,iBAAiB;EACvD,IAAA;EAEA2oD,IAAAA,OAAO,CAACrnD,MAAM,GAAGonD,OAAO,CAACpnD,MAAM;MAE/B,IAAIonD,OAAO,CAACjlD,QAAQ,EAAE;EACpBklD,MAAAA,OAAO,CAACjlD,KAAK,GAAGglD,OAAO,CAAChlD,KAAK;EAC/B,IAAA;MAEA,IAAIglD,OAAO,CAACrmD,WAAW,EAAE;EACvBsmD,MAAAA,OAAO,CAACtmD,WAAW,GAAGqmD,OAAO,CAACrmD,WAAW;QACzCugD,kBAAkB,GAAG8F,OAAO,CAACrmD,WAAW;EAC1C,IAAA;EACF,EAAA,CACF,CAAC;EAED,EAAA,IAAMwmD,YAAY,GAAGR,UAAU,CAAC9xB,SAAS;EACzC,EAAA,IAAM0yB,gBAAgB,GAAGZ,UAAU,CAACpwB,YAAY,GAC5C4wB,YAAY,CAAC3wB,MAAM,CAACmwB,UAAU,CAACpwB,YAAY,CAAC,GAC5C4wB,YAAY;EAChB,EAAA,IAAIjG,kBAAkB,EAAE;EACtBqG,IAAAA,gBAAgB,CAAC9tD,OAAO,CAAC,UAACqF,IAAI,EAAK;EAAA,MAAA,IAAA0oD,mBAAA;QACjC,IACG1oD,IAAI,KACJ,CAACA,IAAI,CAAC6B,WAAW,IAChB7B,IAAI,CAAC6B,WAAW,CAAC7C,MAAM,MAAA,CAAA0pD,mBAAA,GAAKtG,kBAAkB,qBAAlBsG,mBAAA,CAAoB1pD,MAAM,CAAA,CAAC,EACzD;UACAgB,IAAI,CAAC6B,WAAW,GAAGugD,kBAAkB;EACvC,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA;IAEA,IAAIyF,UAAU,CAACzQ,eAAe,EAAE;MAC9ByQ,UAAU,CAAClQ,iBAAiB,GAAG0Q,YAAY,CAACtsD,IAAI,CAAC,UAACiE,IAAI,EAAA;EAAA,MAAA,OAAK,CAACA,IAAI;EAAA,IAAA,CAAO,CAAC;MACxE,IAAI6nD,UAAU,CAAClQ,iBAAiB,EAAE;EAChCx+C,MAAAA,MAAM,CAACG,IAAI,CACT,6EACF,CAAC;QACD,KAAK,IAAIyD,GAAC,GAAG8qD,UAAU,CAACzQ,eAAe,EAAEr6C,GAAC,EAAE,GAAI;UAC9CsrD,YAAY,CAACn0C,KAAK,EAAE;EACtB,MAAA;QACA2zC,UAAU,CAAC/Q,OAAO,GAAGuR,YAAY,CAAC,CAAC,CAAC,CAACpoD,EAAE;EACzC,IAAA,CAAC,MAAM;QACL,IAAI4nD,UAAU,CAACrlC,iBAAiB,EAAE;EAChCqlC,QAAAA,UAAU,CAACvR,UAAU,GAAGqS,eAAe,CACrCf,UAAU,CAACtR,UAAU,EACrBuR,UAAU,EACV1uD,MACF,CAAC;EACH,MAAA;QACA,IAAMgpD,gBAAgB,GAAGyF,UAAU,CAAC7xB,SAAS,CAAC/R,MAAM,CAClD,UAAChkB,IAAI,EAAA;UAAA,OAAKA,IAAI,CAACU,kBAAkB;EAAA,MAAA,CACnC,CAAC;QACD,IAAIknD,UAAU,CAACpD,kBAAkB,IAAI,CAACqD,UAAU,CAACrD,kBAAkB,EAAE;EACnE,QAAA,KAAK,IAAIznD,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG0rD,gBAAgB,CAAC5sD,MAAM,EAAEkB,GAAC,EAAE,EAAE;YAChD,IAAI0rD,gBAAgB,CAAC1rD,GAAC,CAAC,CAAC4G,eAAe,KAAK,IAAI,EAAE;EAChDo/C,YAAAA,qBAAqB,CACnB0F,gBAAgB,CAAC1rD,GAAC,CAAC,EACnB0rD,gBAAgB,CAAC1rD,GAAC,GAAG,CAAC,CAAC,EACvBolD,gBACF,CAAC;EACH,UAAA;EACF,QAAA;EACF,MAAA;EACAmC,MAAAA,aAAa,CAACnC,gBAAgB,EAAE0F,UAAU,CAAC;EAC7C,IAAA;EACAA,IAAAA,UAAU,CAACrwB,KAAK,GAAG6wB,YAAY,CAACA,YAAY,CAACxsD,MAAM,GAAG,CAAC,CAAC,CAACoF,EAAE;EAC7D,EAAA;EACA,EAAA,IAAI,CAAC4mD,UAAU,CAACtwB,OAAO,EAAE;EAAA,IAAA,IAAAqxB,qBAAA;MACvB,IAAMC,mBAAmB,GAAGC,iBAAiB,CAC3ClB,UAAU,EACVC,UAAU,CAAC/Q,OAAO,GAAG,CACvB,CAAC;EACD+Q,IAAAA,UAAU,CAACtwB,OAAO,GAAA,CAAAqxB,qBAAA,GAAGC,mBAAmB,oBAAnBA,mBAAmB,CAAE5nD,EAAE,KAAA,IAAA,GAAA2nD,qBAAA,GAAIP,YAAY,CAAC,CAAC,CAAC,CAACpnD,EAAE;EACpE,EAAA;;EAEA;EACA8nD,EAAAA,mBAAmB,CACjBnB,UAAU,CAACzjB,QAAQ,EACnB0jB,UAAU,CAAC1jB,QAAQ,EACnB,UAAC6kB,OAAa,EAAEC,OAAa,EAAK;EAChCA,IAAAA,OAAO,CAACzpD,iBAAiB,GAAGwpD,OAAO,CAACxpD,iBAAiB;EACrDypD,IAAAA,OAAO,CAAC/lD,KAAK,GAAG8lD,OAAO,CAAC9lD,KAAK;EAC/B,EAAA,CACF,CAAC;;EAED;EACA,EAAA,IAAI8kD,OAAO,EAAE;MACXX,gBAAgB,CACdQ,UAAU,EACVG,OAAO,EACPA,OAAO,CAAC9mD,QAAQ,EAChB8mD,OAAO,CAAC7mD,MAAM,EACd6mD,OAAO,CAAC5mD,QAAQ,EAChB4mD,OAAO,CAAC3mD,MAAM,EACdlI,MACF,CAAC;EACH,EAAA,CAAC,MAAM;EACL;EACA;EACA;EACA+vD,IAAAA,aAAa,CAACtB,UAAU,EAAEC,UAAU,CAAC;EACvC,EAAA;IAEA,IAAIQ,YAAY,CAACxsD,MAAM,EAAE;EACvBgsD,IAAAA,UAAU,CAAC5Q,aAAa,GAAG4Q,UAAU,CAACsB,IAAI,GAAGd,YAAY,CAAC,CAAC,CAAC,CAACnqD,KAAK;EACpE,EAAA;EAEA2pD,EAAAA,UAAU,CAACjQ,cAAc,GAAGgQ,UAAU,CAAChQ,cAAc;EACrDiQ,EAAAA,UAAU,CAAC/P,UAAU,GAAG8P,UAAU,CAAC9P,UAAU;EAC7C,EAAA,IAAMpB,gBAAgB,GAAGmR,UAAU,CAACnR,gBAAgB;EACpD,EAAA,IAAImR,UAAU,CAACjR,QAAQ,IAAIF,gBAAgB,EAAE;EAC3C,IAAA,IAAMyS,IAAI,GAAGtB,UAAU,CAACsB,IAAI;EAC5B,IAAA,IAAI,CAACtB,UAAU,CAAC/P,UAAU,EAAE;QAC1B+P,UAAU,CAACjQ,cAAc,GAAGlB,gBAAgB;QAC5CmR,UAAU,CAAC/P,UAAU,GAAGqR,IAAI;EAC9B,IAAA;MACAtB,UAAU,CAAChQ,YAAY,GAAGnB,gBAAgB;MAC1CmR,UAAU,CAAC9P,QAAQ,GAAGoR,IAAI;EAC5B,EAAA,CAAC,MAAM;EACLtB,IAAAA,UAAU,CAAChQ,YAAY,GAAG+P,UAAU,CAAC/P,YAAY;EACjDgQ,IAAAA,UAAU,CAAC9P,QAAQ,GAAG6P,UAAU,CAAC7P,QAAQ;EACzC8P,IAAAA,UAAU,CAACnR,gBAAgB,GAAGkR,UAAU,CAAClR,gBAAgB;EAC3D,EAAA;EACA,EAAA,IAAImR,UAAU,CAACrR,gBAAgB,KAAK,EAAE,EAAE;EACtCqR,IAAAA,UAAU,CAACrR,gBAAgB,GAAGoR,UAAU,CAACpR,gBAAgB;EAC3D,EAAA;EACF;EAEA,SAASmS,eAAeA,CACtBS,aAAoD,EACpDvB,UAAwB,EACxB1uD,MAAe,EACwB;EACvC,EAAA,IAAoBkwD,eAAe,GAAgCxB,UAAU,CAArEvR,UAAU;MAAmBe,yBAAyB,GAAKwQ,UAAU,CAAxCxQ,yBAAyB;IAC9D,IAAMf,UAAU,GAAGz8C,QAAA,CAAc,EAAE,EAAEuvD,aAAa,CAAC;EACnD,EAAA,IAAI/R,yBAAyB,EAAE;EAC7BA,IAAAA,yBAAyB,CAAC18C,OAAO,CAAC,UAACX,EAAE,EAAK;QACxC,OAAOs8C,UAAU,CAACt8C,EAAE,CAAC;EACvB,IAAA,CAAC,CAAC;EACJ,EAAA;EACA,EAAA,IAAMsvD,QAAQ,GAAG5tD,MAAM,CAAChB,IAAI,CAAC47C,UAAU,CAAC;EACxC,EAAA,IAAMiT,UAAU,GAAGD,QAAQ,CAACztD,MAAM;IAClC,IAAI,CAAC0tD,UAAU,EAAE;EACf,IAAA,OAAOF,eAAe;EACxB,EAAA;IACA3tD,MAAM,CAAChB,IAAI,CAAC2uD,eAAe,CAAC,CAAC1uD,OAAO,CAAC,UAACX,EAAE,EAAK;EAC3C,IAAA,IAAMwvD,eAAe,GAAGlT,UAAU,CAACt8C,EAAE,CAAC;EACtC,IAAA,IAAMqpD,SAAS,GAAG,IAAIhP,SAAS,CAACgV,eAAe,CAACrvD,EAAE,CAAC,CAAEk4C,IAAI,EAAEsX,eAAe,CAAC;MAC3E,IAAInG,SAAS,CAACC,OAAO,EAAE;EACrBhN,MAAAA,UAAU,CAACt8C,EAAE,CAAC,GAAGqpD,SAAS;QAC1B,IAAI,CAACmG,eAAe,EAAE;UACpBnG,SAAS,CAAC1O,QAAQ,IAAI4U,UAAU;EAClC,MAAA;EACF,IAAA,CAAC,MAAM;EACLpwD,MAAAA,MAAM,CAACG,IAAI,CAAA,0DAAA,GACiD2sB,SAAS,CACjEojC,eAAe,CAACrvD,EAAE,CAAC,CAAEk4C,IACvB,CAAC,OACH,CAAC;EACH,IAAA;EACF,EAAA,CAAC,CAAC;EACF,EAAA,OAAOoE,UAAU;EACnB;EAEO,SAASyS,mBAAmBA,CACjCU,QAAuB,EACvBC,QAAuB,EACvBC,cAAgC,EAChC;IACA,IAAIF,QAAQ,IAAIC,QAAQ,EAAE;MACxB,IAAIE,KAAK,GAAG,CAAC;EACb,IAAA,KAAK,IAAI7sD,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAG8sD,QAAQ,CAAC5tD,MAAM,EAAEkB,CAAC,IAAIJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EACpD,MAAA,IAAMisD,QAAO,GAAGS,QAAQ,CAAC1sD,CAAC,CAAC;EAC3B,MAAA,IAAMksD,QAAO,GAAGS,QAAQ,CAAC3sD,CAAC,GAAG6sD,KAAK,CAAC;QACnC,IACGZ,QAAO,IACPC,QAAe,IAChBD,QAAO,CAAC3kD,KAAK,KAAK4kD,QAAO,CAAC5kD,KAAK,IAC/B2kD,QAAO,CAACvkD,QAAQ,CAACxE,EAAE,KAAKgpD,QAAO,CAACxkD,QAAQ,CAACxE,EAAE,EAC3C;EACA0pD,QAAAA,cAAc,CAACX,QAAO,EAAEC,QAAO,CAAC;EAClC,MAAA,CAAC,MAAM;EACLW,QAAAA,KAAK,EAAE;EACT,MAAA;EACF,IAAA;EACF,EAAA;EACF;EAEO,SAAS3B,uBAAuBA,CACrCL,UAAwB,EACxBC,UAAwB,EACxB8B,cAAoC,EACpC;EACA,EAAA,IAAMvS,eAAe,GAAGyQ,UAAU,CAACzQ,eAAe;EAClD,EAAA,IAAMl5C,KAAK,GACTtJ,IAAI,CAACsD,GAAG,CAAC0vD,UAAU,CAAC9Q,OAAO,EAAE+Q,UAAU,CAAC/Q,OAAO,CAAC,GAAG+Q,UAAU,CAAC/Q,OAAO;EACvE,EAAA,IAAM14C,GAAG,GACP,CAACwpD,UAAU,CAACnwB,YAAY,GAAG,CAAC,GAAG,CAAC,KAC/B2f,eAAe,GACZyQ,UAAU,CAACxR,KAAK,GAChBzhD,IAAI,CAAC+D,GAAG,CAACivD,UAAU,CAACvR,KAAK,EAAEwR,UAAU,CAACxR,KAAK,CAAC,CAAC,GACjDwR,UAAU,CAAC/Q,OAAO;IACpB,IAAM8S,KAAK,GAAG/B,UAAU,CAAC/Q,OAAO,GAAG8Q,UAAU,CAAC9Q,OAAO;EACrD,EAAA,IAAM+S,QAAQ,GAAGhC,UAAU,CAACpwB,YAAY,GACpCowB,UAAU,CAAC9xB,SAAS,CAAC2B,MAAM,CAACmwB,UAAU,CAACpwB,YAAY,CAAC,GACpDowB,UAAU,CAAC9xB,SAAS;EACxB,EAAA,IAAM+zB,QAAQ,GAAGlC,UAAU,CAACnwB,YAAY,GACpCmwB,UAAU,CAAC7xB,SAAS,CAAC2B,MAAM,CAACkwB,UAAU,CAACnwB,YAAY,CAAC,GACpDmwB,UAAU,CAAC7xB,SAAS;IAExB,KAAK,IAAIh5B,CAAC,GAAGmB,KAAK,EAAEnB,CAAC,IAAIqB,GAAG,EAAErB,CAAC,EAAE,EAAE;EACjC,IAAA,IAAMmrD,QAAO,GAAG4B,QAAQ,CAACF,KAAK,GAAG7sD,CAAC,CAAC;EACnC,IAAA,IAAIorD,QAAO,GAAG0B,QAAQ,CAAC9sD,CAAC,CAAC;EACzB,IAAA,IAAIq6C,eAAe,IAAK,CAAC+Q,QAAe,IAAKD,QAAe,EAAE;EAC5D;QACAC,QAAO,GAAGN,UAAU,CAAC9xB,SAAS,CAACh5B,CAAC,CAAC,GAAGmrD,QAAO;EAC7C,IAAA;MACA,IAAKA,QAAO,IAAaC,QAAe,EAAE;QACxCwB,cAAc,CAACzB,QAAO,EAAEC,QAAO,EAAEprD,CAAC,EAAE8sD,QAAQ,CAAC;EAC7C,MAAA,IAAME,SAAS,GAAG7B,QAAO,CAAClpD,MAAM;EAChC,MAAA,IAAMgrD,QAAQ,GAAG7B,QAAO,CAACnpD,MAAM;QAC/B,IAAI+qD,SAAS,IAAIE,6BAA6B,CAACF,SAAS,EAAEC,QAAQ,CAAC,EAAE;EACnEnC,QAAAA,UAAU,CAAC7V,oBAAoB,GAAGkY,gBAAgB,CAAA,0BAAA,GACrB/B,QAAO,CAACloD,EAAE,GAAA,GAAA,EACrC2nD,UAAU,EACVC,UAAU,EACVK,QAAO,EACPC,QACF,CAAC;EACD,QAAA;QACF,CAAC,MAAM,IAAID,QAAO,CAACjnD,EAAE,KAAKknD,QAAO,CAAClnD,EAAE,EAAE;UACpC4mD,UAAU,CAAC7V,oBAAoB,GAAGkY,gBAAgB,uCACZhC,QAAO,CAACjnD,EAAE,GAAA,IAAA,GAAKknD,QAAO,CAAClnD,EAAE,GAAA,GAAA,EAC7D2mD,UAAU,EACVC,UAAU,EACVK,QAAO,EACPC,QACF,CAAC;EACD,QAAA;EACF,MAAA;EACF,IAAA;EACF,EAAA;EACF;EAEA,SAAS+B,gBAAgBA,CACvB/qB,OAAe,EACfyoB,UAAwB,EACxBC,UAAwB,EACxBK,OAAsB,EACtBC,OAAsB,EACf;IACP,OAAO,IAAItpC,KAAK,CACXsgB,OAAO,GAAA,GAAA,GAAIgpB,OAAO,CAACr0D,GAAG,GAAA,uBAAA,GACR8zD,UAAU,CAAC9Q,OAAO,UACrC8Q,UAAU,CAAC1Q,IAAI,GAAA,yBAAA,GAEI2Q,UAAU,CAAC/Q,OAAO,GAAA,IAAA,GACrC+Q,UAAU,CAAC3Q,IACX,CAAC;EACH;EAEO,SAASgS,aAAaA,CAC3BtB,UAAwB,EACxBC,UAAwB,EACxBsC,gCAAyC,EACnC;EAAA,EAAA,IADNA,gCAAyC,KAAA,MAAA,EAAA;EAAzCA,IAAAA,gCAAyC,GAAG,IAAI;EAAA,EAAA;EAEhD,EAAA,IAAMP,KAAK,GACT/B,UAAU,CAAC/Q,OAAO,GAAG+Q,UAAU,CAACzQ,eAAe,GAAGwQ,UAAU,CAAC9Q,OAAO;EACtE,EAAA,IAAMgR,YAAY,GAAGF,UAAU,CAAC7xB,SAAS;EACzC,EAAA,IAAMq0B,gBAAgB,GAAGR,KAAK,IAAI,CAAC;IACnC,IAAIS,OAAO,GAAG,CAAC;EACf,EAAA,IAAID,gBAAgB,IAAIR,KAAK,GAAG9B,YAAY,CAACjsD,MAAM,EAAE;EACnDwuD,IAAAA,OAAO,GAAGvC,YAAY,CAAC8B,KAAK,CAAC,CAAC1rD,KAAK;EACrC,EAAA,CAAC,MAAM,IAAIksD,gBAAgB,IAAIvC,UAAU,CAAC/Q,OAAO,KAAK8Q,UAAU,CAACvR,KAAK,GAAG,CAAC,EAAE;MAC1EgU,OAAO,GAAGzC,UAAU,CAAClP,WAAW;EAClC,EAAA,CAAC,MAAM,IAAI0R,gBAAgB,IAAID,gCAAgC,EAAE;EAC/D;MACAE,OAAO,GAAGzC,UAAU,CAAC7O,aAAa,GAAG6Q,KAAK,GAAG/B,UAAU,CAAC7O,mBAAmB;EAC7E,EAAA,CAAC,MAAM,IAAI,CAAC6O,UAAU,CAACzQ,eAAe,IAAIyQ,UAAU,CAAC9O,aAAa,KAAK,CAAC,EAAE;EACxE;MACAsR,OAAO,GAAGzC,UAAU,CAAC7O,aAAa;EACpC,EAAA,CAAC,MAAM;EACL;EACA,IAAA;EACF,EAAA;EACAuR,EAAAA,UAAU,CAACzC,UAAU,EAAEwC,OAAO,CAAC;EACjC;EAEO,SAASC,UAAUA,CAAChoC,OAAqB,EAAE+nC,OAAe,EAAE;EACjE,EAAA,IAAIA,OAAO,EAAE;EACX,IAAA,IAAMt0B,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACnC,IAAA,KAAK,IAAIh5B,CAAC,GAAGulB,OAAO,CAAC80B,eAAe,EAAEr6C,CAAC,GAAGg5B,SAAS,CAACl6B,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC/Dg5B,MAAAA,SAAS,CAACh5B,CAAC,CAAC,CAACoF,QAAQ,CAACkoD,OAAO,CAAC;EAChC,IAAA;MACA,IAAI/nC,OAAO,CAACmV,YAAY,EAAE;EACxBnV,MAAAA,OAAO,CAACmV,YAAY,CAACt1B,QAAQ,CAACkoD,OAAO,CAAC;EACxC,IAAA;EACF,EAAA;EACF;EAEO,SAASE,qBAAqBA,CACnC1C,UAAwB,EACxB2C,oBAA4B,EACpB;EAAA,EAAA,IADRA,oBAA4B,KAAA,MAAA,EAAA;EAA5BA,IAAAA,oBAA4B,GAAGh7C,QAAQ;EAAA,EAAA;EAEvC,EAAA,IAAIi7C,cAAc,GAAG,IAAI,GAAG5C,UAAU,CAAC7Q,cAAc;IAErD,IAAI6Q,UAAU,CAAClR,OAAO,EAAE;EACtB;EACA,IAAA,IAAM5gB,SAAS,GAAG8xB,UAAU,CAAC9xB,SAAS;MACtC,IAAM20B,0BAA0B,GAAG,CAAC;MACpC,IACE30B,SAAS,CAACl6B,MAAM,IAChB4uD,cAAc,GAAGC,0BAA0B,GAAGF,oBAAoB,EAClE;EACA,MAAA,IAAMG,mBAAmB,GACvB50B,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAAC+E,QAAQ,GAAG,IAAI;QACjD,IAAI+pD,mBAAmB,GAAGF,cAAc,EAAE;EACxCA,QAAAA,cAAc,GAAGE,mBAAmB;EACtC,MAAA;EACF,IAAA;EACF,EAAA,CAAC,MAAM;EACL;EACA;EACA;EACA;EACAF,IAAAA,cAAc,IAAI,CAAC;EACrB,EAAA;EAEA,EAAA,OAAO71D,IAAI,CAAC24B,KAAK,CAACk9B,cAAc,CAAC;EACnC;EAEO,SAAS3B,iBAAiBA,CAC/BxmC,OAAiC,EACjCriB,EAAU,EACV2rB,WAA6B,EACP;IACtB,IAAI,CAACtJ,OAAO,EAAE;EACZ,IAAA,OAAO,IAAI;EACb,EAAA;IACA,IAAI7d,QAAQ,GAAG6d,OAAO,CAACyT,SAAS,CAAC91B,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO,CAExC;EACb,EAAA,IAAIryC,QAAQ,EAAE;EACZ,IAAA,OAAOA,QAAQ;EACjB,EAAA;IACAA,QAAQ,GAAG6d,OAAO,CAACmV,YAAY;EAC/B,EAAA,IAAIhzB,QAAQ,IAAIA,QAAQ,CAACxE,EAAE,KAAKA,EAAE,EAAE;EAClC,IAAA,OAAOwE,QAAQ;EACjB,EAAA;EACA,EAAA,IAAIxE,EAAE,GAAGqiB,OAAO,CAACw0B,OAAO,IAAIlrB,WAAW,IAAIA,WAAW,CAAC3rB,EAAE,KAAKA,EAAE,EAAE;EAChE,IAAA,OAAO2rB,WAAW;EACpB,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEO,SAASg/B,WAAWA,CACzBtoC,OAAiC,EACjCriB,EAAU,EACV4qD,SAAiB,EACJ;IACb,IAAI,CAACvoC,OAAO,EAAE;EACZ,IAAA,OAAO,IAAI;EACb,EAAA;IACA,OAAOwoC,QAAQ,CAACxoC,OAAO,CAAC6hB,QAAQ,EAAElkC,EAAE,EAAE4qD,SAAS,CAAC;EAClD;EAEO,SAASC,QAAQA,CACtB3mB,QAAmC,EACnClkC,EAAU,EACV4qD,SAAiB,EACJ;EACb,EAAA,IAAI1mB,QAAQ,EAAE;MACZ,KAAK,IAAIpnC,CAAC,GAAGonC,QAAQ,CAACtoC,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACnC,MAAA,IAAM8lB,IAAI,GAAGshB,QAAQ,CAACpnC,CAAC,CAAC;EACxB,MAAA,IAAI8lB,IAAI,CAACxe,KAAK,KAAKwmD,SAAS,IAAIhoC,IAAI,CAACpe,QAAQ,CAACxE,EAAE,KAAKA,EAAE,EAAE;EACvD,QAAA,OAAO4iB,IAAI;EACb,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEO,SAASkoC,4BAA4BA,CAACtiC,MAAe,EAAE;EAC5DA,EAAAA,MAAM,CAAC9tB,OAAO,CAAC,UAACqG,KAAK,EAAEqD,KAAK,EAAK;EAAA,IAAA,IAAAy2B,cAAA;EAC/B,IAAA,CAAAA,cAAA,GAAA95B,KAAK,CAACshB,OAAO,KAAA,IAAA,IAAbwY,cAAA,CAAe/E,SAAS,CAACp7B,OAAO,CAAC,UAAC8J,QAAQ,EAAK;QAC7CA,QAAQ,CAACzD,KAAK,GAAGqD,KAAK;QACtB,IAAII,QAAQ,CAAC5C,WAAW,EAAE;EACxB4C,QAAAA,QAAQ,CAAC5C,WAAW,CAACb,KAAK,GAAGqD,KAAK;EACpC,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA,CAAC,CAAC;EACJ;EAEA,SAAS4lD,6BAA6BA,CACpCF,SAAiB,EACjBC,QAA4B,EACnB;EACT,EAAA,IAAID,SAAS,KAAKC,QAAQ,IAAIA,QAAQ,EAAE;MACtC,OAAOgB,UAAU,CAACjB,SAAS,CAAC,KAAKiB,UAAU,CAAChB,QAAQ,CAAC;EACvD,EAAA;EACA,EAAA,OAAO,KAAK;EACd;EAEA,SAASgB,UAAUA,CAAChoC,GAAW,EAAU;EACvC,EAAA,OAAOA,GAAG,CAACvuB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;EACpC;;ECpmBO,SAASw2D,mBAAmBA,CACjCl1B,SAAqB,EACrB90B,EAAU,EACO;EACjB,EAAA,KAAK,IAAIlE,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGo5B,SAAS,CAACl6B,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EAAA,IAAA,IAAAmuD,YAAA;EACpD,IAAA,IAAI,CAAA,CAAAA,YAAA,GAAAn1B,SAAS,CAACh5B,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAAZmuD,YAAA,CAAcjqD,EAAE,MAAKA,EAAE,EAAE;QAC3B,OAAO80B,SAAS,CAACh5B,CAAC,CAAC;EACrB,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEO,SAASouD,4BAA4BA,CAC1CC,UAAoC,EACpC9oC,OAAqB,EACiB;EACtC,EAAA,IAAI8oC,UAAU,EAAE;EACd,IAAA,IACE9oC,OAAO,CAACiV,OAAO,GAAG6zB,UAAU,CAAC5zB,KAAK,IAClClV,OAAO,CAACkV,KAAK,GAAG4zB,UAAU,CAAC7zB,OAAO,EAClC;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EACF,EAAA;EACA,EAAA,OAAO,KAAK;EACd;EAEA,SAAS8zB,mBAAmBA,CAACrrD,IAAc,EAAEqqD,OAAe,EAAE;EAC5D,EAAA,IAAMnsD,KAAK,GAAG8B,IAAI,CAAC9B,KAAK,GAAGmsD,OAAO;IAClCrqD,IAAI,CAACkB,QAAQ,GAAGhD,KAAK;EACrB8B,EAAAA,IAAI,CAACoC,QAAQ,CAAClE,KAAK,CAAC;EACpB8B,EAAAA,IAAI,CAACmB,MAAM,GAAGjD,KAAK,GAAG8B,IAAI,CAACY,QAAQ;EACrC;EAEO,SAAS0qD,kBAAkBA,CAACjB,OAAe,EAAE/nC,OAAqB,EAAE;EACzE;EACA,EAAA,IAAMyT,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACnC,EAAA,KAAK,IAAIh5B,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGo5B,SAAS,CAACl6B,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EACpDsuD,IAAAA,mBAAmB,CAACt1B,SAAS,CAACh5B,CAAC,CAAC,EAAEstD,OAAO,CAAC;EAC5C,EAAA;EACA;IACA,IAAI/nC,OAAO,CAACmV,YAAY,EAAE;EACxB4zB,IAAAA,mBAAmB,CAAC/oC,OAAO,CAACmV,YAAY,EAAE4yB,OAAO,CAAC;EACpD,EAAA;IACA/nC,OAAO,CAAC8zB,cAAc,GAAG,IAAI;EAC/B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASmV,WAAWA,CACzBC,aAAuC,EACvClpC,OAAqB,EACrB;IACA,IAAI,CAACkpC,aAAa,EAAE;EAClB,IAAA;EACF,EAAA;EACAC,EAAAA,oBAAoB,CAACnpC,OAAO,EAAEkpC,aAAa,CAAC;EAC5C,EAAA,IAAI,CAAClpC,OAAO,CAAC8zB,cAAc,EAAE;EAC3B;EACA;EACA;EACAsV,IAAAA,uBAAuB,CAACppC,OAAO,EAAEkpC,aAAa,CAAC;EACjD,EAAA;IACA,IAAI,CAAClpC,OAAO,CAAC8zB,cAAc,IAAI,CAAC9zB,OAAO,CAAC80B,eAAe,EAAE;EACvD;EACA;EACA;EACA8R,IAAAA,aAAa,CAACsC,aAAa,EAAElpC,OAAO,EAAE,KAAK,CAAC;EAC9C,EAAA;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACO,SAASmpC,oBAAoBA,CAClCnpC,OAAqB,EACrB8oC,UAAoC,EACpC;EACA,EAAA,IAAI,CAACD,4BAA4B,CAACC,UAAU,EAAE9oC,OAAO,CAAC,EAAE;EACtD,IAAA;EACF,EAAA;EACA,EAAA,IAAMqpC,QAAQ,GAAG/2D,IAAI,CAAC+D,GAAG,CAACyyD,UAAU,CAAC5zB,KAAK,EAAElV,OAAO,CAACkV,KAAK,CAAC;IAC1D,IAAMo0B,OAAO,GAAGX,mBAAmB,CAACG,UAAU,CAACr1B,SAAS,EAAE41B,QAAQ,CAAC;IACnE,IAAM3rD,IAAI,GAAGirD,mBAAmB,CAAC3oC,OAAO,CAACyT,SAAS,EAAE41B,QAAQ,CAAC;EAC7D,EAAA,IAAI,CAACC,OAAO,IAAI,CAAC5rD,IAAI,EAAE;EACrB,IAAA;EACF,EAAA;EACA7G,EAAAA,MAAM,CAACzC,GAAG,CAAA,sDAAA,GAAwDi1D,QAAU,CAAC;IAC7E,IAAM/B,KAAK,GAAGgC,OAAO,CAAC1tD,KAAK,GAAG8B,IAAI,CAAC9B,KAAK;EACxCotD,EAAAA,kBAAkB,CAAC1B,KAAK,EAAEtnC,OAAO,CAAC;EACpC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASopC,uBAAuBA,CACrCppC,OAAqB,EACrB8oC,UAAwB,EACxB;IACA,IAAI,CAAC9oC,OAAO,CAACkiC,kBAAkB,IAAI,CAAC4G,UAAU,CAAC5G,kBAAkB,EAAE;EACjE,IAAA;EACF,EAAA;EAEA,EAAA,IAAMzuB,SAAS,GAAGzT,OAAO,CAACyT,SAAS;EACnC,EAAA,IAAM81B,YAAY,GAAGT,UAAU,CAACr1B,SAAS;IACzC,IAAI,CAACA,SAAS,CAACl6B,MAAM,IAAI,CAACgwD,YAAY,CAAChwD,MAAM,EAAE;EAC7C,IAAA;EACF,EAAA;;EAEA;EACA;EACA;EACA,EAAA,IAAI+vD,OAAoC;EACxC,EAAA,IAAI5rD,IAAiC;EACrC,EAAA,IAAM2rD,QAAQ,GAAG/2D,IAAI,CAAC+D,GAAG,CAACyyD,UAAU,CAAC5zB,KAAK,EAAElV,OAAO,CAACkV,KAAK,CAAC;IAC1D,IAAI4zB,UAAU,CAAC7zB,OAAO,GAAGo0B,QAAQ,IAAIrpC,OAAO,CAACiV,OAAO,GAAGo0B,QAAQ,EAAE;EAC/DC,IAAAA,OAAO,GAAGX,mBAAmB,CAACY,YAAY,EAAEF,QAAQ,CAAC;EACrD3rD,IAAAA,IAAI,GAAGirD,mBAAmB,CAACl1B,SAAS,EAAE41B,QAAQ,CAAC;EACjD,EAAA;EACA,EAAA,IAAI,CAACC,OAAO,IAAI,CAAC5rD,IAAI,EAAE;EACrB4rD,IAAAA,OAAO,GAAGC,YAAY,CAACj3D,IAAI,CAACE,KAAK,CAAC+2D,YAAY,CAAChwD,MAAM,GAAG,CAAC,CAAC,CAAC;MAC3DmE,IAAI,GACFirD,mBAAmB,CAACl1B,SAAS,EAAE61B,OAAO,CAAC3qD,EAAE,CAAC,IAC1C80B,SAAS,CAACnhC,IAAI,CAACE,KAAK,CAACihC,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAAC;EAC/C,EAAA;EACA,EAAA,IAAMiwD,MAAM,GAAGF,OAAO,CAACjoD,eAAe;EACtC,EAAA,IAAMooD,SAAS,GAAG/rD,IAAI,CAAC2D,eAAe;EACtC,EAAA,IAAI,CAACmoD,MAAM,IAAI,CAACC,SAAS,EAAE;EACzB,IAAA;EACF,EAAA;EAEA,EAAA,IAAMnC,KAAK,GAAG,CAACmC,SAAS,GAAGD,MAAM,IAAI,IAAI,IAAI9rD,IAAI,CAAC9B,KAAK,GAAG0tD,OAAO,CAAC1tD,KAAK,CAAC;EACxEotD,EAAAA,kBAAkB,CAAC1B,KAAK,EAAEtnC,OAAO,CAAC;EACpC;;EC9JO,SAAS0pC,gBAAgBA,CAC9B7hC,EAAe,EACfpwB,IAAY,EACZkyD,QAA4C,EAC5C;EACAC,EAAAA,mBAAmB,CAAC/hC,EAAE,EAAEpwB,IAAI,EAAEkyD,QAAQ,CAAC;EACvC9hC,EAAAA,EAAE,CAAC6hC,gBAAgB,CAACjyD,IAAI,EAAEkyD,QAAQ,CAAC;EACrC;EAEO,SAASC,mBAAmBA,CACjC/hC,EAAe,EACfpwB,IAAY,EACZkyD,QAA4C,EAC5C;EACA9hC,EAAAA,EAAE,CAAC+hC,mBAAmB,CAACnyD,IAAI,EAAEkyD,QAAQ,CAAC;EACxC;;ECfA;EACA;EACA;;EAEA,IAAME,UAAU,GAAG;EACjBj4D,EAAAA,QAAQ,EAAE,SAAVA,QAAQA,CAAYS,CAAa,EAAE;MACjC,IAAI+B,GAAG,GAAG,EAAE;EACZ,IAAA,IAAMiG,GAAG,GAAGhI,CAAC,CAACkH,MAAM;MACpB,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;QAC5BrG,GAAG,IAAA,GAAA,GAAQ/B,CAAC,CAACuJ,KAAK,CAACnB,CAAC,CAAC,CAAC4xB,OAAO,CAAC,CAAC,CAAC,SAAIh6B,CAAC,CAACyJ,GAAG,CAACrB,CAAC,CAAC,CAAC4xB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAG;EAC5D,IAAA;EAEA,IAAA,OAAOj4B,GAAG;EACZ,EAAA;EACF,CAAC;;EC4DM,IAAM01D,KAAK,GAAG;EACnBC,EAAAA,OAAO,EAAE,SAAS;EAClBC,EAAAA,IAAI,EAAE,MAAM;EACZC,EAAAA,WAAW,EAAE,aAAa;EAC1B38B,EAAAA,YAAY,EAAE,cAAc;EAC5B48B,EAAAA,0BAA0B,EAAE,4BAA4B;EACxDC,EAAAA,aAAa,EAAE,eAAe;EAC9BC,EAAAA,OAAO,EAAE,SAAS;EAClBC,EAAAA,MAAM,EAAE,QAAQ;EAChBC,EAAAA,KAAK,EAAE,OAAO;EACdl8B,EAAAA,KAAK,EAAE,OAAO;EACdm8B,EAAAA,gBAAgB,EAAE,kBAAkB;EACpCC,EAAAA,aAAa,EAAE;EACjB,CAAC;EAAA,IAOoBC,oBAAmB,0BAAAC,SAAA,EAAA;IAgCtC,SAAAD,oBAAAA,CACE9hC,GAAQ,EACRgiC,eAAgC,EAChClsD,SAAoB,EACpBmsD,SAAiB,EACjBxrB,YAA+B,EAC/B;EAAA,IAAA,IAAAthC,KAAA;MACAA,KAAA,GAAA4sD,SAAA,CAAA3sD,IAAA,CAAA,IAAA,EAAM6sD,SAAS,EAAEjiC,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAAAiH,IAAAA,KAAA,CAnCpB6qB,GAAG,GAAA,MAAA;MAAA7qB,KAAA,CAEHq2B,YAAY,GAAyB,IAAI;MAAAr2B,KAAA,CACzCwrB,WAAW,GAAoB,IAAI;EAAAxrB,IAAAA,KAAA,CACnC6sD,eAAe,GAAA,MAAA;MAAA7sD,KAAA,CACf+sD,UAAU,GAA+B,IAAI;EAAA/sD,IAAAA,KAAA,CAC7CgtD,MAAM,GAAuChB,KAAK,CAACC,OAAO;EAAAjsD,IAAAA,KAAA,CAC1DshC,YAAY,GAAA,MAAA;MAAAthC,KAAA,CACZ+kB,KAAK,GAA4B,IAAI;MAAA/kB,KAAA,CACrCitD,WAAW,GAAsB,IAAI;EAAAjtD,IAAAA,KAAA,CACrCwhB,MAAM,GAAA,MAAA;MAAAxhB,KAAA,CACNuB,WAAW,GAAY,KAAK;MAAAvB,KAAA,CAC5BktD,eAAe,GAAW,CAAC;MAAAltD,KAAA,CAC3BmtD,gBAAgB,GAAW,CAAC;MAAAntD,KAAA,CAC5Bo6B,aAAa,GAAW,CAAC;MAAAp6B,KAAA,CACzB22C,eAAe,GAAkB,IAAI;MAAA32C,KAAA,CACrCotD,SAAS,GAAW,CAAC;MAAAptD,KAAA,CACrBqoB,MAAM,GAAwB,IAAI;EAAAroB,IAAAA,KAAA,CAClCqtD,cAAc,GAAA,MAAA;EAAArtD,IAAAA,KAAA,CACdW,SAAS,GAAA,MAAA;MAAAX,KAAA,CACTstD,eAAe,GAAiB,IAAI;MAAAttD,KAAA,CACpCutD,kBAAkB,GAAY,KAAK;EAAAvtD,IAAAA,KAAA,CACnCwtD,SAAS,GAAA,MAAA;MAAAxtD,KAAA,CACTytD,OAAO,GAAsB,EAAE;MAAAztD,KAAA,CAC/B9B,SAAS,GAAY,IAAI;MAAA8B,KAAA,CACzB0tD,YAAY,GAAY,KAAK;EAAA1tD,IAAAA,KAAA,CAC/B2tD,MAAM,GAAA,MAAA;MAAA3tD,KAAA,CA4NJ4tD,cAAc,GAAG,YAAM;QAC/B,IAAA1pD,MAAA,GAAAlE,KAAA;UAAQwhB,MAAM,GAAAtd,MAAA,CAANsd,MAAM;UAAEgK,WAAW,GAAAtnB,MAAA,CAAXsnB,WAAW;UAAEzG,KAAK,GAAA7gB,MAAA,CAAL6gB,KAAK;UAAEkoC,WAAW,GAAA/oD,MAAA,CAAX+oD,WAAW;UAAEY,KAAK,GAAA3pD,MAAA,CAAL2pD,KAAK;QACtD,IAAMC,WAAmB,GAAG/oC,KAAK,GAAGA,KAAK,CAAC+oC,WAAW,GAAG,CAAC;EACzD,MAAA,IAAMlhC,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CACxCqgC,WAAW,GAAGA,WAAW,GAAGloC,KAAK,EACjC+oC,WAAW,EACXtsC,MAAM,CAACusC,aACT,CAAC;EACD,MAAA,IAAMC,cAAc,GAAG,CAACphC,UAAU,CAACrwB,GAAG;QAEtCyD,KAAA,CAAK1J,GAAG,CAAA,mBAAA,IAEJyM,cAAA,CAAgB+qD,WAAW,CAAC,GAAGA,WAAW,CAACv/B,OAAO,CAAC,CAAC,CAAC,GAAGu/B,WAAU,CAAA,GAAA,WAAA,GACxDD,KAAK,GAAA,IAAA,IAAKG,cAAc,GAAG,QAAQ,GAAG,IAAI,CAAA,GAAA,SACxD,CAAC;EAED,MAAA,IAAIhuD,KAAA,CAAK6tD,KAAK,KAAK7B,KAAK,CAACQ,KAAK,EAAE;UAC9BxsD,KAAA,CAAKiuD,iBAAiB,EAAE;QAC1B,CAAC,MAAM,IAAIziC,WAAW,EAAE;EACtB;EACA,QAAA,IAAM0iC,SAAS,GAAG1sC,MAAM,CAACqU,sBAAsB;EAC/C,QAAA,IAAMs4B,eAAe,GAAG3iC,WAAW,CAAC1tB,KAAK,GAAGowD,SAAS;UACrD,IAAME,aAAa,GACjB5iC,WAAW,CAAC1tB,KAAK,GAAG0tB,WAAW,CAAChrB,QAAQ,GAAG0tD,SAAS;EACtD;EACA,QAAA,IACEF,cAAc,IACdI,aAAa,GAAGxhC,UAAU,CAAC9uB,KAAK,IAChCqwD,eAAe,GAAGvhC,UAAU,CAAC5uB,GAAE,EAC/B;EACA,UAAA,IAAMqwD,YAAY,GAAGP,WAAW,GAAGM,aAAa;EAChD;EACA,UAAA,IAAIN,WAAW,GAAGK,eAAe,IAAIE,YAAY,EAAE;EACjD,YAAA,IAAIA,YAAY,IAAI7iC,WAAW,CAAC9qB,MAAM,EAAE;EACtCV,cAAAA,KAAA,CAAK1J,GAAG,CAAA,yCAAA,GACoCk1B,WAAW,CAAC3rB,EAAE,MAC1D,CAAC;gBACD2rB,WAAW,CAACjpB,aAAa,EAAE;gBAC3BvC,KAAA,CAAKiuD,iBAAiB,EAAE;EAC1B,YAAA;cACAjuD,KAAA,CAAKq2B,YAAY,GAAG,IAAI;EAC1B,UAAA;EACF,QAAA;EACF,MAAA;EAEA,MAAA,IAAItR,KAAK,EAAE;EACT;EACA/kB,QAAAA,KAAA,CAAK6sD,eAAe,CAACnpB,sBAAsB,CACzCoqB,WAAW,EACX1+C,QAAQ,EACRpP,KAAA,CAAKshC,YAAY,EACjB,IACF,CAAC;;EAED;EACA,QAAA,IAAM4rB,eAAe,GAAGltD,KAAA,CAAKktD,eAAe;UAC5C,IAAIY,WAAW,GAAGZ,eAAe,EAAE;YACjCltD,KAAA,CAAKktD,eAAe,GAAGY,WAAW;EACpC,QAAA;EAEA,QAAA,IAAI,CAAC9tD,KAAA,CAAK0tD,YAAY,EAAE;YACtB,IAAMp3B,SAAS,GAAG9hC,IAAI,CAACsD,GAAG,CAAC80B,UAAU,CAAC5uB,GAAG,EAAE8vD,WAAW,CAAC;EACvD,UAAA,IAAMQ,eAAe,GAAGtuD,KAAA,CAAKsuD,eAAe,CAC1CtuD,KAAA,CAAKuuD,eAAe,EAAE,EACtBj4B,SACF,CAAC;EACD,UAAA,IAAIg4B,eAAe,EAAE;EACnBtuD,YAAAA,KAAA,CAAK1J,GAAG,CAAA,sCAAA,GACiCw3D,WAAW,CAACv/B,OAAO,CACxD,CACF,CAAC,GAAA,gBAAA,GAAiB+H,SAAS,CAAC/H,OAAO,CAAC,CAAC,CACvC,CAAC;cACDvuB,KAAA,CAAK0tD,YAAY,GAAGY,eAAe;EACrC,UAAA;EACF,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAI,CAACtuD,KAAA,CAAK6qB,GAAG,CAAC2jC,gBAAgB,EAAE;UAC9BxuD,KAAA,CAAK1J,GAAG,CAAA,UAAA,IACK03D,cAAc,GAAG,eAAe,GAAG,kBAAkB,CAAA,GAAA,MAAA,GAAOF,WAAW,GAAA,mCACpF,CAAC;UACD9tD,KAAA,CAAKmtD,gBAAgB,GAAGW,WAAW;EACnC,QAAA,IAAIE,cAAc,EAAE;YAClBhuD,KAAA,CAAKo6B,aAAa,GAAG0zB,WAAW;EAClC,QAAA;EACF,MAAA;QAEA,IAAIE,cAAc,IAAIhuD,KAAA,CAAK6tD,KAAK,KAAK7B,KAAK,CAACE,IAAI,EAAE;EAC/C;UACAlsD,KAAA,CAAK2vC,aAAa,EAAE;EACtB,MAAA;MACF,CAAC;MAAA3vC,KAAA,CAESyuD,YAAY,GAAG,YAAM;EAC7B;QACAzuD,KAAA,CAAK1J,GAAG,CAAA,gDAAiD,CAAC;EAC1D0J,MAAAA,KAAA,CAAKo6B,aAAa,GAAGp6B,KAAA,CAAKktD,eAAe,GAAG,CAAC;MAC/C,CAAC;MApTCltD,KAAA,CAAKshC,YAAY,GAAGA,YAAY;MAChCthC,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;MACd7qB,KAAA,CAAKqtD,cAAc,GAAG,IAAIhiB,cAAc,CAACxgB,GAAG,CAACrJ,MAAM,CAAC;MACpDxhB,KAAA,CAAKW,SAAS,GAAGA,SAAS;MAC1BX,KAAA,CAAK6sD,eAAe,GAAGA,eAAe;EACtC7sD,IAAAA,KAAA,CAAKwhB,MAAM,GAAGqJ,GAAG,CAACrJ,MAAM;MACxBxhB,KAAA,CAAKwtD,SAAS,GAAG,IAAInkB,SAAS,CAACxe,GAAG,CAACrJ,MAAM,CAAC;EAAA,IAAA,OAAAxhB,KAAA;EAC5C,EAAA;IAAA6B,cAAA,CAAA8qD,oBAAA,EAAAC,SAAA,CAAA;EAAA,EAAA,IAAAr2D,MAAA,GAAAo2D,oBAAA,CAAAn2D,SAAA;EAAAD,EAAAA,MAAA,CAEU04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD9jC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DhkC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DlkC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAA;EAAAh6B,EAAAA,MAAA,CAEUi6B,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D9jC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DhkC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DlkC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3C,CAAA;EAAAh6B,EAAAA,MAAA,CAEUm5C,MAAM,GAAhB,SAAUA,MAAMA,GAAG;MACjB,IAAI,CAACsf,SAAS,EAAE;IAClB,CAAA;IAAAz4D,MAAA,CAEUy4D,SAAS,GAAnB,SAAUA,SAASA,GAAG,CAAC,CAAA;IAAAz4D,MAAA,CAEhB4jC,SAAS,GAAhB,SAAOA,SAASA,CAACC,aAAqB,EAAQ,CAAC,CAAA;EAAA7jC,EAAAA,MAAA,CAExC8jC,QAAQ,GAAf,SAAOA,QAAQA,GAAG;EAChB,IAAA,IAAI,IAAI,CAACwzB,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACoB,cAAc,CAAC3qD,KAAK,EAAE;MAC3B,IAAI,CAAC/B,SAAS,CAAC+B,KAAK,CAAC,IAAI,CAAC4+B,YAAY,CAAC;EACvC,IAAA,IAAM1hC,IAAI,GAAG,IAAI,CAAC4rB,WAAW;EAC7B,IAAA,IAAI5rB,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAEc,MAAM,EAAE;QAChBd,IAAI,CAAC2C,aAAa,EAAE;EACpB,MAAA,IAAI,CAACsqD,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EAC3C,IAAA;MACA,IAAI,CAACqvD,eAAe,EAAE;MACtB,IAAI,CAACzjC,WAAW,GAAG,IAAI;MACvB,IAAI,CAAC6K,YAAY,GAAG,IAAI;MACxB,IAAI,CAACpE,aAAa,EAAE;MACpB,IAAI,CAACqd,aAAa,EAAE;EACpB,IAAA,IAAI,CAACue,KAAK,GAAG7B,KAAK,CAACC,OAAO;IAC5B,CAAA;EAAA11D,EAAAA,MAAA,CAcO24D,cAAc,GAArB,SAAOA,cAAcA,GAAG;MACtB,IAAI,CAAChxD,SAAS,GAAG,KAAK;IACxB,CAAA;EAAA3H,EAAAA,MAAA,CAEO44D,eAAe,GAAtB,SAAOA,eAAeA,GAAG;MACvB,IAAI,CAACjxD,SAAS,GAAG,IAAI;IACvB,CAAA;IAAA3H,MAAA,CAMU64D,YAAY,GAAtB,SAAUA,YAAYA,CACpBxiC,UAAsB,EACtBiH,YAA0B,EACjB;EACT;MACA,IAAIA,YAAY,CAACpG,IAAI,IAAI,CAAC,IAAI,CAAC1I,KAAK,EAAE;EACpC,MAAA,OAAO,KAAK;EACd,IAAA;EACA;EACA,IAAA,IAAMuR,SAAS,GAAG1J,UAAU,CAAC5uB,GAAG,IAAI,CAAC;MACrC,IAAMqxD,aAAa,GAAG,IAAI,CAAC7tC,MAAM,CAAC8tC,cAAc,IAAI,CAAC;MACrD,IAAIh5B,SAAS,IAAI+4B,aAAa,EAAE;EAC9B,MAAA,OAAO,KAAK;EACd,IAAA;EACA;EACA,IAAA,IAAM/e,cAAc,GAAG1jB,UAAU,CAACoU,QAAQ;EAC1C,IAAA,IACE,IAAI,CAACxf,MAAM,CAACusC,aAAa,IACzBzd,cAAc,IACdA,cAAc,CAAC70C,MAAM,GAAG,CAAA,EACxB;EACA;EACAmxB,MAAAA,UAAU,GAAGujB,YAAY,CAACM,YAAY,CACpCH,cAAc,EACd1jB,UAAU,CAAC9uB,KAAK,EAChB,CACF,CAAC;EACH,IAAA;EACA,IAAA,IAAMmzC,SAAS,GAAGrkB,UAAU,CAACqkB,SAAS;EACtC,IAAA,IAAMse,sBAAsB,GAC1Bte,SAAS,IAAIA,SAAS,GAAGoe,aAAa,IAAIpe,SAAS,GAAGpd,YAAY,CAACk1B,IAAI;EACzE,IAAA,IAAIwG,sBAAsB,EAAE;EAC1B,MAAA,OAAO,KAAK;EACd,IAAA;EACA;MACA,IAAI,IAAI,CAACxqC,KAAK,CAAC+oC,WAAW,GAAGlhC,UAAU,CAAC9uB,KAAK,EAAE;EAC7C,MAAA,OAAO,KAAK;EACd,IAAA;EACA,IAAA,IAAMimC,QAAQ,GAAGlQ,YAAY,CAACkQ,QAAQ;EACtC;EACA;EACA,IAAA,IAAIA,QAAQ,IAAA,IAAA,IAARA,QAAQ,CAAEtoC,MAAM,EAAE;QACpB,IAAM+zD,QAAQ,GAAGzrB,QAAQ,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC;;EAE9C;EACA;EACA;EACA;EACA,MAAA,IAAMg0D,gBAAgB,GAAGtf,YAAY,CAACC,UAAU,CAC9C,IAAI,CAACrrB,KAAK,EACVyqC,QAAQ,CAAC1xD,KAAK,GAAG0xD,QAAQ,CAAChvD,QAAQ,GAAG,CACvC,CAAC;EACD,MAAA,OAAOivD,gBAAgB;EACzB,IAAA;EAEA,IAAA,IAAMnuB,YAAY,GAChBzN,YAAY,CAAC8B,SAAS,CAAC9B,YAAY,CAAC8B,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAAC9B,IAAI;EAChE,IAAA,OAAO,IAAI,CAACkzD,eAAe,CAAC3pB,iBAAiB,CAAC5B,YAAY,CAAC;IAC7D,CAAA;EAAA/qC,EAAAA,MAAA,CAEOg4D,eAAe,GAAtB,SAAOA,eAAeA,GAA6B;MACjD,IAAI,IAAI,CAAClmC,MAAM,IAAI,IAAI,CAACilC,eAAe,KAAK,IAAI,EAAE;EAChD,MAAA,OAAO,IAAI,CAACA,eAAe,CAACprC,OAAO;EACrC,IAAA;IACF,CAAA;IAAA3rB,MAAA,CAaUo4D,eAAe,GAAzB,SAAUA,eAAeA,CACvBj+B,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAMyjB,KAAK,GAAI,IAAI,CAACA,KAAK,GAAG,IAAI,CAACkoC,WAAW,GAAG3rD,IAAI,CAACyjB,KAAM;MAC1D6mC,gBAAgB,CAAC7mC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC6oC,cAAc,CAAC;MACvDhC,gBAAgB,CAAC7mC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC0pC,YAAY,CAAC;EACnD,IAAA,IAAMjtC,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAI,IAAI,CAAC6G,MAAM,IAAI7G,MAAM,CAACkuC,aAAa,IAAI,IAAI,CAAC7B,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EACvE,MAAA,IAAI,CAAC9xB,SAAS,CAAC3Y,MAAM,CAAC4Y,aAAa,CAAC;EACtC,IAAA;IACF,CAAA;IAAA7jC,MAAA,CAEUs4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAMquD,iBAAiB,GAAG,CAAC,CAACruD,IAAI,CAACsuD,aAAa;EAC9C,IAAA,IAAM7qC,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAIA,KAAK,KAAK,IAAI,EAAE;EAClB,MAAA;EACF,IAAA;MACA,IAAIA,KAAK,CAAC8qC,KAAK,EAAE;EACf,MAAA,IAAI,CAACv5D,GAAG,CAAC,oDAAoD,CAAC;EAC9D,MAAA,IAAI,CAAC8jC,aAAa,GAAG,IAAI,CAAC8yB,eAAe,GAAG,CAAC;EAC/C,IAAA;;EAEA;MACApB,mBAAmB,CAAC/mC,KAAK,EAAE,SAAS,EAAE,IAAI,CAAC6oC,cAAc,CAAC;MAC1D9B,mBAAmB,CAAC/mC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC0pC,YAAY,CAAC;EAEtD,IAAA,IAAI,IAAI,CAAC9tD,SAAS,IAAI,CAACgvD,iBAAiB,EAAE;EACxC,MAAA,IAAI,CAAChvD,SAAS,CAACmvD,MAAM,EAAE;EACzB,IAAA;EACA,IAAA,IAAI,CAAC/qC,KAAK,GAAG,IAAI,CAACkoC,WAAW,GAAG,IAAI;MACpC,IAAI,CAACU,MAAM,GAAGhzD,SAAS;EACvB,IAAA,IAAIg1D,iBAAiB,EAAE;QACrB,IAAI,CAAC1B,iBAAiB,EAAE;QACxB,IAAI,CAACgB,eAAe,EAAE;EACtB,MAAA;EACF,IAAA;MACA,IAAI,CAACvB,YAAY,GAAG,KAAK;EACzB,IAAA,IAAI,CAACb,eAAe,CAACxpB,kBAAkB,EAAE;MACzC,IAAI,CAAChJ,QAAQ,EAAE;IACjB,CAAA;EAAA9jC,EAAAA,MAAA,CAEUg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;MAC5B,IAAI,CAACk+B,OAAO,GAAG,EAAE;MACjB,IAAI,CAACplC,MAAM,GAAG,IAAI,CAACilC,eAAe,GAAG,IAAI,CAAC9hC,WAAW,GAAG,IAAI;EAC5D,IAAA,IAAI,CAAC0hC,eAAe,GAAG,IAAI,CAAC9yB,aAAa,GAAG,CAAC;MAC7C,IAAI,CAACmzB,kBAAkB,GAAG,KAAK;IACjC,CAAA;IAAAh3D,MAAA,CAEUg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE,CAAC,CAAA;IAAA/K,MAAA,CAsG/Cw4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBr+B,KAA6B,EAC7BpvB,IAAwB,EAClB;EACN,IAAA,IAAI,CAACq1C,eAAe,GAAGr1C,IAAI,CAACq1C,eAAe;IAC7C,CAAA;EAAApgD,EAAAA,MAAA,CAEU64C,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;MAC9B,IAAI,CAAC/U,QAAQ,EAAE;MACf,IAAI,IAAI,CAAC0yB,UAAU,EAAE;EACnB,MAAA,IAAI,CAACA,UAAU,CAACt0D,OAAO,EAAE;QACzB,IAAI,CAACs0D,UAAU,GAAG,IAAI;EACxB,IAAA;EACAH,IAAAA,SAAA,CAAAp2D,SAAA,CAAM44C,mBAAmB,CAAAnvC,IAAA,CAAA,IAAA,CAAA;EACzB;MACA,IAAI,CAAC4qB,GAAG,GAAG,IAAI,CAAC+iC,cAAc,GAAG,IAAI,CAACa,YAAY,GAAG,IAAI;IAC3D,CAAA;EAAAl4D,EAAAA,MAAA,CAEU84C,kBAAkB,GAA5B,SAAUA,kBAAkBA,GAAG;EAC7B,IAAA,IAAI,CAACwe,KAAK,GAAG7B,KAAK,CAACC,OAAO;MAC1B,IAAI,IAAI,CAACoB,cAAc,EAAE;EACvB,MAAA,IAAI,CAACA,cAAc,CAAC50D,OAAO,EAAE;EAC/B,IAAA;MACA,IAAI,IAAI,CAACkI,SAAS,EAAE;EAClB,MAAA,IAAI,CAACA,SAAS,CAAClI,OAAO,EAAE;EAC1B,IAAA;MACA,IAAI,IAAI,CAAC+0D,SAAS,EAAE;EAClB,MAAA,IAAI,CAACA,SAAS,CAAC/0D,OAAO,EAAE;EAC1B,IAAA;MAEA,IAAI,CAACoyB,GAAG,GACN,IAAI,CAACv0B,GAAG,GACR,IAAI,CAAC4C,IAAI,GACT,IAAI,CAACs0D,SAAS,GACd,IAAI,CAAC7sD,SAAS,GACd,IAAI,CAAC0sD,cAAc,GACnB,IAAI,CAACR,eAAe,GAClB,IAAW;EACfD,IAAAA,SAAA,CAAAp2D,SAAA,CAAM64C,kBAAkB,CAAApvC,IAAA,CAAA,IAAA,CAAA;IAC1B,CAAA;IAAA1J,MAAA,CAEUw5D,YAAY,GAAtB,SAAUA,YAAYA,CACpBnwD,IAAmB,EACnBgB,KAAY,EACZovD,gBAAwB,EACxB;MACA,IAAI,CAACzC,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAAC0C,oBAAoB,CAACrwD,IAAI,EAAEgB,KAAK,EAAEovD,gBAAgB,CAAC;IAC1D,CAAA;IAAAz5D,MAAA,CAEQ05D,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1B5rD,QAAuB,EACvBzD,KAAY,EACZovD,gBAAwB,EACxB;EAAA,IAAA,IAAAj9B,MAAA,GAAA,IAAA;EACA,IAAA,IAAMm9B,gBAA8C,GAAG,SAAjDA,gBAA8CA,CAClD5uD,IAAoB,EACjB;EACH,MAAA,IAAM1B,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB,MAAA,IAAImzB,MAAI,CAACo9B,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EACjCmzB,QAAAA,MAAI,CAAC75B,IAAI,CACJ0G,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,IACzByB,IAAI,CAACmhB,IAAI,GAAG,SAAS,GAAGnhB,IAAI,CAACmhB,IAAI,CAACxe,KAAK,GAAG,EAAC,CAAA,GAAA,MAAA,GACtC8uB,MAAI,CAACq9B,QAAQ,CAACxwD,IAAI,EAAE,KAAK,EAAE0B,IAAI,CAACmhB,IAAI,CAAC,mCAC9C,CAAC;EACDsQ,QAAAA,MAAI,CAAC85B,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACzC,QAAA;EACF,MAAA;EACAA,MAAAA,IAAI,CAACkD,KAAK,CAACnF,UAAU,EAAE;EACvBo1B,MAAAA,MAAI,CAACs9B,2BAA2B,CAAC/uD,IAAI,CAAC;MACxC,CAAC;EAED,IAAA,IAAI,CAACgvD,WAAW,CAACjsD,QAAQ,EAAEzD,KAAK,EAAEovD,gBAAgB,EAAEE,gBAAgB,CAAA,CACjEjwC,IAAI,CAAC,UAAC3e,IAAI,EAAK;QACd,IAAI,CAACA,IAAI,EAAE;EACT;EACA,QAAA;EACF,MAAA;EACA,MAAA,IAAMusD,KAAK,GAAG96B,MAAI,CAAC86B,KAAK;EACxB,MAAA,IAAMjuD,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB,MAAA,IAAImzB,MAAI,CAACo9B,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EACjC,QAAA,IACEiuD,KAAK,KAAK7B,KAAK,CAACx8B,YAAY,IAC3B,CAACuD,MAAI,CAACvH,WAAW,IAAIqiC,KAAK,KAAK7B,KAAK,CAACM,OAAO,EAC7C;EACAv5B,UAAAA,MAAI,CAAC85B,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACzCmzB,UAAAA,MAAI,CAAC86B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,QAAA;EACA,QAAA;EACF,MAAA;QAEA,IAAI,SAAS,IAAI5qD,IAAI,EAAE;UACrByxB,MAAI,CAACz8B,GAAG,CAAA,SAAA,GACIsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,YAAOkzB,MAAI,CAACw9B,aAAa,EAAE,SAAI3wD,IAAI,CAACgB,KACxE,CAAC;UACDmyB,MAAI,CAAClI,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs6B,WAAW,EAAEpuB,IAAI,CAAC;EAC5C,MAAA;;EAEA;EACAyxB,MAAAA,MAAI,CAACy9B,2BAA2B,CAAClvD,IAAI,CAAC;EACxC,IAAA,CAAC,CAAA,CACA4e,KAAK,CAAC,UAACyH,MAAM,EAAK;EACjB,MAAA,IAAIoL,MAAI,CAAC86B,KAAK,KAAK7B,KAAK,CAACC,OAAO,IAAIl5B,MAAI,CAAC86B,KAAK,KAAK7B,KAAK,CAAC17B,KAAK,EAAE;EAC9D,QAAA;EACF,MAAA;EACAyC,MAAAA,MAAI,CAAC75B,IAAI,CAAA,cAAA,IAAgB,CAAAyuB,MAAM,IAAA,IAAA,GAAA,MAAA,GAANA,MAAM,CAAEoX,OAAO,KAAIpX,MAAM,CAAE,CAAC;EACrDoL,MAAAA,MAAI,CAAC09B,oBAAoB,CAACpsD,QAAQ,CAAC;EACrC,IAAA,CAAC,CAAC;IACN,CAAA;EAAA9N,EAAAA,MAAA,CAEUm6D,oBAAoB,GAA9B,SAAUA,oBAAoBA,CAAC9wD,IAAc,EAAE;EAAA,IAAA,IAAA+wD,iBAAA;EAC7C,IAAA,IAAQ9D,eAAe,GAAK,IAAI,CAAxBA,eAAe;EACvB,IAAA,IAAM+D,SAAS,GAAG/D,eAAe,CAACzpB,QAAQ,CAACxjC,IAAI,CAAC;EAChD,IAAA,IAAIgxD,SAAS,KAAKnxB,aAAa,CAACE,SAAS,EAAE;EACzC;EACA,MAAA,IAAM2B,YAAY,GAAG1hC,IAAI,CAACjG,IAAyB;QACnD,IAAM82C,YAAY,GAAG,IAAI,CAACogB,gBAAgB,CACxC,IAAI,CAAC5D,WAAW,EAChB3rB,YACF,CAAC;QACD,IAAMwvB,sBAAsB,GAAGt8D,IAAI,CAACsD,GAAG,CACrC8H,IAAI,CAACY,QAAQ,EACbiwC,YAAY,GAAGA,YAAY,CAACl0C,GAAG,GAAG,IAAI,CAACilB,MAAM,CAACuvC,eAChD,CAAC;EACD;EACA,MAAA,IAAMC,iBAAiB,GAAI,IAAI,CAASA,iBAE3B;EACb,MAAA,IAAMC,WAAW,GAAGD,iBAAgB,GAC/BpxD,IAAI,CAACC,EAAE,GAAemxD,iBAAiB,CAACnxD,EAAY,GACrD,CAAC;EACL,MAAA,IACEoxD,WAAW,KAAK,CAAC,IACjB,IAAI,CAACC,qBAAqB,CAACJ,sBAAsB,EAAElxD,IAAI,CAACY,QAAQ,CAAA,EAChE;EACAqsD,QAAAA,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACtC,MAAA;EACF,IAAA,CAAC,MAAM,IAAI,CAAA,CAAA+wD,iBAAA,OAAI,CAAC1D,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB0D,iBAAA,CAAkB3vB,QAAQ,CAACvlC,MAAM,MAAK,CAAC,EAAE;EAClD;QACAoxD,eAAe,CAACxpB,kBAAkB,EAAE;MACtC,CAAC,MAAM,IAAIwpB,eAAe,CAACrpB,QAAQ,CAAC5jC,IAAI,CAACjG,IAAI,CAAC,EAAE;EAC9C;QACAkzD,eAAe,CAAC9qB,sBAAsB,CAAC;EACrCniC,QAAAA,IAAI,EAAJA,IAAI;EACJ6iB,QAAAA,IAAI,EAAE,IAAI;UACV3f,KAAK,EAAElD,IAAI,CAACkD,KAAK;UACjBlJ,EAAE,EAAEgG,IAAI,CAACjG;EACX,OAAC,CAAC;QACF,IAAIkzD,eAAe,CAACzpB,QAAQ,CAACxjC,IAAI,CAAC,KAAK6/B,aAAa,CAACG,OAAO,EAAE;EAC5DitB,QAAAA,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACtC,MAAA;EACF,IAAA;IACF,CAAA;EAAArJ,EAAAA,MAAA,CAEU46D,eAAe,GAAzB,SAAUA,eAAeA,CAACjvC,OAAqB,EAAE;MAC/C,IAAIA,OAAO,CAACq0B,OAAO,IAAI,CAACr0B,OAAO,CAACuL,IAAI,EAAE;EACpC;EACA,MAAA,IAAMq2B,YAAY,GAAG5hC,OAAO,CAACyT,SAAS,CAACzT,OAAO,CAACyT,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC;EACpE,MAAA,IAAI,CAACoxD,eAAe,CAAC9qB,sBAAsB,CAAC;EAC1CniC,QAAAA,IAAI,EAAEkkD,YAAY;EAClBrhC,QAAAA,IAAI,EAAE,IAAI;UACV3f,KAAK,EAAEghD,YAAY,CAAChhD,KAAK;UACzBlJ,EAAE,EAAEkqD,YAAY,CAACnqD;EACnB,OAAC,CAAC;EACJ,IAAA;EACA,IAAA,IAAI,CAACuoB,OAAO,CAACyT,SAAS,CAAC,CAAC,CAAC,EAAE;QACzBzT,OAAO,CAACq1B,iBAAiB,GAAG,IAAI;EAClC,IAAA;IACF,CAAA;EAAAhhD,EAAAA,MAAA,CAEU66D,WAAW,GAArB,SAAUA,WAAWA,CAAC1/B,SAAgB,EAAE;EACtC,IAAA,IAAMxP,OAAO,GAAGwP,SAAS,CAACxP,OAAO;MACjC,OACE,CAAAA,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEuL,IAAI,KACbvL,OAAO,CAACvoB,IAAI,KAAK,OAAO,KACvB,IAAI,CAAC2zD,eAAe,KAAK57B,SAAS,IAAIxP,OAAO,CAACmvC,OAAO,CAAA;IAE1D,CAAA;IAAA96D,MAAA,CAEU+6D,eAAe,GAAzB,SAAUA,eAAeA,CACvBC,WAAmB,EACnBC,SAAiB,EACjB73D,IAA6B,EAC7B;EAAA,IAAA,IADAA,IAA6B,KAAA,MAAA,EAAA;EAA7BA,MAAAA,IAA6B,GAAG,IAAI;EAAA,IAAA;EAEpC,IAAA,IAAI,EAAE43D,WAAW,GAAGC,SAAS,CAAC,EAAE;EAC9B,MAAA;EACF,IAAA;EACA;EACA;EACA,IAAA,IAAMC,UAA8B,GAAG;EAAEF,MAAAA,WAAW,EAAXA,WAAW;EAAEC,MAAAA,SAAS,EAATA,SAAS;EAAE73D,MAAAA,IAAI,EAAJA;OAAM;MACvE,IAAI,CAACkxB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs8D,eAAe,EAAED,UAAU,CAAC;IACtD,CAAA;IAAAl7D,MAAA,CAEUo7D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CAACttD,QAAkB,EAAEzD,KAAY,EAAE;EAAA,IAAA,IAAAgxD,MAAA,GAAA,IAAA;EAC3D,IAAA,IAAI,CAACtB,WAAW,CAACjsD,QAAQ,EAAEzD,KAAK,CAAA,CAC7Bqf,IAAI,CAAC,UAAC3e,IAAI,EAAK;EACd,MAAA,IAAM1B,IAAI,GAAG0B,IAAI,IAAA,IAAA,GAAA,MAAA,GAAJA,IAAI,CAAE1B,IAAI;EACvB,MAAA,IAAI,CAACA,IAAI,IAAIgyD,MAAI,CAACzB,kBAAkB,CAACvwD,IAAI,CAAC,IAAI,CAACgyD,MAAI,CAACvpC,MAAM,EAAE;EAC1D,QAAA,MAAM,IAAI5J,KAAK,CAAC,mBAAmB,CAAC;EACtC,MAAA;EAEA,MAAA,OAAOnd,IAAI;EACb,IAAA,CAAC,CAAA,CACA2e,IAAI,CAAC,UAAC3e,IAAoB,EAAK;EAC9B,MAAA,IAAQupB,GAAG,GAAK+mC,MAAI,CAAZ/mC,GAAG;EACX,MAAA,IAAQjrB,IAAI,GAAc0B,IAAI,CAAtB1B,IAAI;UAAE4U,OAAO,GAAKlT,IAAI,CAAhBkT,OAAO;EACrB,MAAA,IAAMq9C,WAAW,GAAGjyD,IAAI,CAAC0M,WAAW;;EAEpC;QACA,IACEkI,OAAO,IACPA,OAAO,CAACvR,UAAU,GAAG,CAAC,IACtB4uD,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEl5D,GAAG,IAChBk5D,WAAW,CAACptB,EAAE,IACdsU,uBAAuB,CAAC8Y,WAAW,CAACrjB,MAAM,CAAA,EAC1C;UACA,IAAM5L,SAAS,GAAG9oC,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACxC;EACA,QAAA,OAAO2lC,MAAI,CAACpE,SAAQ,CACjB5oB,OAAO,CACN,IAAI1nC,UAAU,CAACsX,OAAO,CAAC,EACvBq9C,WAAW,CAACl5D,GAAG,CAAC0E,MAAM,EACtBw0D,WAAW,CAACptB,EAAE,CAACpnC,MAAM,EACrB27C,+BAA+B,CAAC6Y,WAAW,CAACrjB,MAAM,CACpD,CAAA,CACCtuB,KAAK,CAAC,UAAC+qB,GAAG,EAAK;EACdpgB,UAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;cACxB32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;cAC5BzsB,OAAO,EAAE/sB,YAAY,CAAComC,kBAAkB;EACxC1K,YAAAA,KAAK,EAAE,KAAK;EACZp9B,YAAAA,KAAK,EAAEw3C,GAAG;cACVtjB,MAAM,EAAEsjB,GAAG,CAAClM,OAAO;EACnBn/B,YAAAA,IAAI,EAAJA;EACF,WAAC,CAAC;EACF,UAAA,MAAMqrC,GAAG;EACX,QAAA,CAAC,CAAA,CACAhrB,IAAI,CAAC,UAAC6xC,aAAa,EAAK;YACvB,IAAMjvB,OAAO,GAAG/oC,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACtCpB,UAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC28D,cAAc,EAAE;EACjCnyD,YAAAA,IAAI,EAAJA,IAAI;EACJ4U,YAAAA,OAAO,EAAEs9C,aAAa;EACtBhvD,YAAAA,KAAK,EAAE;EACLkvD,cAAAA,MAAM,EAAEpvB,SAAS;EACjBqvB,cAAAA,QAAQ,EAAEpvB;EACZ;EACF,WAAC,CAAC;YACFvhC,IAAI,CAACkT,OAAO,GAAGs9C,aAAa;EAC5B,UAAA,OAAOF,MAAI,CAACM,uBAAuB,CAAC5wD,IAAI,CAAC;EAC3C,QAAA,CAAC,CAAC;EACN,MAAA;EACA,MAAA,OAAOswD,MAAI,CAACM,uBAAuB,CAAC5wD,IAAI,CAAC;EAC3C,IAAA,CAAC,CAAA,CACA4e,KAAK,CAAC,UAACyH,MAAM,EAAK;EACjB,MAAA,IAAIiqC,MAAI,CAAC/D,KAAK,KAAK7B,KAAK,CAACC,OAAO,IAAI2F,MAAI,CAAC/D,KAAK,KAAK7B,KAAK,CAAC17B,KAAK,EAAE;EAC9D,QAAA;EACF,MAAA;EACAshC,MAAAA,MAAI,CAAC14D,IAAI,CAACyuB,MAAM,CAAC;EACjBiqC,MAAAA,MAAI,CAACnB,oBAAoB,CAACpsD,QAAQ,CAAC;EACrC,IAAA,CAAC,CAAC;IACN,CAAA;EAAA9N,EAAAA,MAAA,CAEQ27D,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAAC5wD,IAAoB,EAAE;EACpD,IAAA,IAAQ+mB,MAAM,GAAK,IAAI,CAAfA,MAAM;MACd,IAAI,CAACA,MAAM,EAAE;EACX,MAAA,MAAM,IAAI5J,KAAK,CAAC,mCAAmC,CAAC;EACtD,IAAA;EACA,IAAA,IAAM3b,KAAK,GAAGxB,IAAI,CAAC1B,IAAI,CAACkD,KAAK;EAC7B,IAAA,IAAI,IAAI,CAAC+qD,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,MAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;MACA5qD,IAAI,CAAC1B,IAAI,CAAC0B,IAAI,GAAG,IAAIpE,UAAU,CAACoE,IAAI,CAACkT,OAAO,CAAC;EAC7C1R,IAAAA,KAAK,CAAC7E,OAAO,CAACH,KAAK,GAAGgF,KAAK,CAAC5E,SAAS,CAACJ,KAAK,GAAGhE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACpEnpB,IAAAA,KAAK,CAAC7E,OAAO,CAACD,GAAG,GAAG8E,KAAK,CAAC5E,SAAS,CAACF,GAAG,GAAGlE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;MAChE,IAAI,CAACkjB,IAAI,EAAE;IACb,CAAA;IAAA54C,MAAA,CAEU47D,wBAAwB,GAAlC,SAAUA,wBAAwBA,CAChC1wD,WAA4B,EAC5B7B,IAAc,EACL;MAAA,IAAAwyD,aAAA,EAAAC,aAAA;EACT,IAAA,IAAM/kD,MAAM,GAAG7L,WAAW,CAAC6L,MAAM;EACjC,IAAA,IACEA,MAAM,IACN,CAAC1N,IAAI,CAAC8D,SAAS,KACd,CAAA0uD,aAAA,GAAA9kD,MAAM,CAAC7I,KAAK,KAAA,IAAA,IAAZ2tD,aAAA,CAAc1uD,SAAS,IAAA,CAAA2uD,aAAA,GAAI/kD,MAAM,CAAC5I,KAAK,KAAA,IAAA,IAAZ2tD,aAAA,CAAc3uD,SAAS,CAAC,KACnD,CAAC,IAAI,CAAC8d,MAAM,CAAC8wC,UAAU,IAAI,CAAC,IAAI,CAAC3xD,SAAS,CAAC4xD,aAAa,CAAA,EACzD;EACA,MAAA,IAAMxtC,KAAK,GAAG,IAAI,CAACA,KAAK;QACxB,IAAMtxB,KAAK,GAAG,IAAIgrB,KAAK,CACrB,iCAAA,GACsC,IAAI,CAAC2xC,QAAQ,CAACxwD,IAAI,CAAC,GAAA,UAAA,IAAWmlB,KAAK,GAAG,sBAAsB,GAAGA,KAAK,CAACytC,SAAS,GAAG,UAAU,CAAA,GAAA,GAAA,CAEnI,CAAC;EACD,MAAA,IAAI,CAACt5D,IAAI,CAACzF,KAAK,CAACsrC,OAAO,CAAC;EACxB;EACA,MAAA,IAAI,CAACha,KAAK,IAAIA,KAAK,CAACytC,SAAS,EAAE;EAC7B,QAAA,OAAO,KAAK;EACd,MAAA;QACA,IAAI,CAAC3nC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;UACjCjb,OAAO,EAAE/sB,YAAY,CAACs9D,kBAAkB;UACxC5hC,KAAK,EAAE,KAAgB;EACvBp9B,QAAAA,KAAK,EAALA,KAAK;EACLmM,QAAAA,IAAI,EAAJA;EACF,OAAC,CAAC;QACF,IAAI,CAACqvD,eAAe,EAAE;EACtB,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAA;EAAA14D,EAAAA,MAAA,CAEU45D,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAACvwD,IAAqB,EAAE;EAClD,IAAA,IAAQ4rB,WAAW,GAAK,IAAI,CAApBA,WAAW;MACnB,OACE,CAAC5rB,IAAI,IACL,CAAC4rB,WAAW,IACZ5rB,IAAI,CAACC,EAAE,KAAK2rB,WAAW,CAAC3rB,EAAE,IAC1BD,IAAI,CAACgB,KAAK,KAAK4qB,WAAW,CAAC5qB,KAAI;IAEnC,CAAA;IAAArK,MAAA,CAEUm8D,oBAAoB,GAA9B,SAAUA,oBAAoBA,CAAC9yD,IAAc,EAAE6iB,IAAiB,EAAE;EAChE,IAAA,IAAMsC,KAAK,GAAG,IAAI,CAACkoC,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACloC,KAAK;MAC9D,IAAI,CAACzuB,GAAG,CAAA,WAAA,GACMsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,IAClC4iB,IAAI,GAAG,SAAS,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAC,CAAA,GAAA,MAAA,GAC5B,IAAI,CAACmsD,QAAQ,CAACxwD,IAAI,EAAE,KAAK,EAAE6iB,IAAI,CAAC,GAAA,YAAA,IACrCsC,KAAI,GACAgnC,UAAU,CAACj4D,QAAQ,CAACq8C,YAAY,CAACE,WAAW,CAACtrB,KAAK,CAAC,CAAA,GACnD,YAAW,CAAA,GAAA,GAEnB,CAAC;EACD,IAAA,IAAIplB,eAAe,CAACC,IAAI,CAAC,EAAE;EAAA,MAAA,IAAA+yD,YAAA;EACzB,MAAA,IAAI/yD,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACG,QAAQ,EAAE;EAC5C,QAAA,IAAMk0B,EAAE,GAAGnqB,IAAI,CAACR,iBAAiB;UACjC,IAAI,CAAC9D,MAAM,CAAChB,IAAI,CAACyvB,EAAE,CAAC,CAACpuB,IAAI,CAAC,UAAChC,IAAI,EAAA;EAAA,UAAA,OAAK,CAAC,CAACowB,EAAE,CAACpwB,IAAI,CAAC;EAAA,QAAA,CAAA,CAAC,EAAE;EAC/C;EACA,UAAA,IAAI,CAACk0D,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACvB,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAMtrD,KAAK,GAAA,CAAA+xD,YAAA,GAAG,IAAI,CAACtqC,MAAM,KAAA,IAAA,GAAA,MAAA,GAAXsqC,YAAA,CAAc/yD,IAAI,CAACgB,KAAK,CAAC;EACvC,MAAA,IAAIA,KAAK,IAAA,IAAA,IAALA,KAAK,CAAEqiB,aAAa,EAAE;EACxB,QAAA,IAAI,CAAC3sB,GAAG,CAAA,0CAAA,GACqCsK,KAAK,CAACqiB,aAAa,sBAChE,CAAC;UACDriB,KAAK,CAACqiB,aAAa,GAAG,CAAC;EACzB,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAC4qC,KAAK,GAAG7B,KAAK,CAACE,IAAI;IACzB,CAAA;EAAA31D,EAAAA,MAAA,CAEUi6D,2BAA2B,GAArC,SAAUA,2BAA2BA,CAACoC,iBAAkC,EAAE;EACxE,IAAA,IAAQ7F,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAClB,IAAI,CAACA,UAAU,EAAE;EACf,MAAA;EACF,IAAA;EACA,IAAA,IAAQntD,IAAI,GAAwBgzD,iBAAiB,CAA7ChzD,IAAI;QAAE6iB,IAAI,GAAkBmwC,iBAAiB,CAAvCnwC,IAAI;QAAEowC,WAAW,GAAKD,iBAAiB,CAAjCC,WAAW;EAC/B;EACA,IAAA,IAAMC,QAAQ,GACZ,CAACD,WAAW,IACZA,WAAW,CAACp3D,MAAM,KAAK,CAAC,IACxBo3D,WAAW,CAACl3D,IAAI,CAAC,UAACo3D,UAAU,EAAA;EAAA,MAAA,OAAK,CAACA,UAAU;MAAA,CAAA,CAAC;EAC/C,IAAA,IAAMC,SAAS,GAAG,IAAInjB,aAAa,CACjCjwC,IAAI,CAACgB,KAAK,EACVhB,IAAI,CAACC,EAAE,EACPD,IAAI,CAACkD,KAAK,CAACnF,UAAU,GAAG,CAAC,EACzB,CAAC,EACD8kB,IAAI,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAE,EACtB,CAAC6uD,QACH,CAAC;EACD/F,IAAAA,UAAU,CAAC3iB,KAAK,CAAC4oB,SAAS,CAAC;IAC7B,CAAA;IAAAz8D,MAAA,CAEU85D,2BAA2B,GAArC,SAAUA,2BAA2BA,CACnCzwD,IAAsC,EACtC,CAAC,CAAA;EAAArJ,EAAAA,MAAA,CAEO+5D,WAAW,GAArB,SAAUA,WAAWA,CACnB1wD,IAAc,EACdgB,KAAY,EACZovD,gBAA+B,EAC/BE,gBAA+C,EACG;EAAA,IAAA,IAAA9hB,iBAAA;QAAA6kB,MAAA,GAAA,IAAA;EAAA,IAAA,IAFlDjD,gBAA+B,KAAA,MAAA,EAAA;EAA/BA,MAAAA,gBAA+B,GAAG,IAAI;EAAA,IAAA;MAGtC,IAAI,CAACxkC,WAAW,GAAG5rB,IAAI;EACvB,IAAA,IAAMsiB,OAAO,GAAGthB,KAAK,CAACshB,OAAO;EAC7B,IAAA,IAAI,CAAC,IAAI,CAACmG,MAAM,IAAI,CAACnG,OAAO,EAAE;QAC5B,MAAM,IAAIzD,KAAK,CAAA,kCAAA,IACsByD,OAAO,GAAG,EAAE,GAAG,SAAS,CAAA,GAAA,GAC7D,CAAC;EACH,IAAA;MAEA,IAAIgxC,iBAAuD,GAAG,IAAI;EAClE,IAAA,IAAItzD,IAAI,CAAC8D,SAAS,IAAI,GAAA0qC,iBAAA,GAACxuC,IAAI,CAAC0M,WAAW,KAAA,IAAA,IAAhB8hC,iBAAA,CAAkBz1C,GAAG,CAAA,EAAE;QAC5C,IAAI,CAACrC,GAAG,CAAA,kBAAA,GACasJ,IAAI,CAACC,EAAE,GAAA,OAAA,GAAQqiB,OAAO,CAACw0B,OAAO,GAAA,GAAA,GAAIx0B,OAAO,CAAC+zB,KAAK,GAAA,KAAA,GAAM,IAAI,CAACsa,aAAa,EAAE,GAAA,GAAA,GAAI3wD,IAAI,CAACgB,KACvG,CAAC;EACD,MAAA,IAAI,CAACitD,KAAK,GAAG7B,KAAK,CAACG,WAAW;QAC9B,IAAI,CAAC3gC,WAAW,GAAG5rB,IAAI;EACvBszD,MAAAA,iBAAiB,GAAG,IAAI,CAACvyD,SAAS,CAAC4qC,IAAI,CAAC3rC,IAAI,CAAC,CAACqgB,IAAI,CAAC,UAACkzC,aAAa,EAAK;UACpE,IAAI,CAACF,MAAI,CAAC9C,kBAAkB,CAACgD,aAAa,CAACvzD,IAAI,CAAC,EAAE;YAChDqzD,MAAI,CAACpoC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACg+D,UAAU,EAAED,aAAa,CAAC;EAClD,UAAA,IAAIF,MAAI,CAACpF,KAAK,KAAK7B,KAAK,CAACG,WAAW,EAAE;EACpC8G,YAAAA,MAAI,CAACpF,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,UAAA;EACA,UAAA,OAAOiH,aAAa;EACtB,QAAA;EACF,MAAA,CAAC,CAAC;QACF,IAAI,CAACtoC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC+2D,WAAW,EAAE;EAAEvsD,QAAAA,IAAI,EAAJA;EAAK,OAAC,CAAC;EAC9C,MAAA,IAAK,IAAI,CAAC4rB,WAAW,KAAyB,IAAI,EAAE;UAClD,IAAI,CAACl1B,GAAG,CAAA,gCAAiC,CAAC;EAC1C,QAAA,OAAO4oB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B,MAAA;EACF,IAAA,CAAC,MAAM,IAAI,CAACvf,IAAI,CAAC8D,SAAS,EAAE;EAC1BwvD,MAAAA,iBAAiB,GAAG,IAAI,CAACvyD,SAAS,CAAC0yD,SAAS,CAC1CzzD,IAAI,EACJsiB,OAAO,CAAC01B,kBAAkB,EAC1B,IAAI,CAAC2V,kBACP,CAAC;EACD,MAAA,IAAI2F,iBAAiB,EAAE;UACrB,IAAI,CAAC58D,GAAG,CAAA,oDAAqD,CAAC;EAChE,MAAA;EACF,IAAA;EAEA,IAAA,IAAM+/B,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,IAAA,IACE12B,eAAe,CAACC,IAAI,CAAC,KACpB,CAACy2B,YAAY,IAAIz2B,IAAI,CAACC,EAAE,KAAKw2B,YAAY,CAACx2B,EAAE,CAAA,EAC7C;EACA,MAAA,IAAMyuD,eAAe,GAAG,IAAI,CAACA,eAAe,CAAC1tD,KAAK,CAACshB,OAAO,EAAEtiB,IAAI,CAAC5B,GAAG,CAAC;EACrE,MAAA,IAAIswD,eAAe,KAAK,IAAI,CAACZ,YAAY,EAAE;EACzC,QAAA,IAAI,CAACp3D,GAAG,CAAA,kBAAA,IAEJg4D,eAAe,GAAG,IAAI,GAAG,KAAI,CAAA,GAAA,cAAA,IAChBj4B,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAEx2B,EAAE,WAAKD,IAAI,CAACC,EAC3C,CAAC;UACD,IAAI,CAAC6tD,YAAY,GAAGY,eAAe;EACrC,MAAA;EACF,IAAA;EACA0B,IAAAA,gBAAgB,GAAGx7D,IAAI,CAACsD,GAAG,CAAC8H,IAAI,CAAC9B,KAAK,EAAEkyD,gBAAgB,IAAI,CAAC,CAAC;MAC9D,IAAI,IAAI,CAACtC,YAAY,IAAI/tD,eAAe,CAACC,IAAI,CAAC,EAAE;EAC9C,MAAA,IAAMmkC,QAAQ,GAAG7hB,OAAO,CAAC6hB,QAAQ;QACjC,IAAIA,QAAQ,IAAImsB,gBAAgB,EAAE;UAChC,IAAIF,gBAAgB,GAAG9tC,OAAO,CAACo2B,WAAW,IAAIp2B,OAAO,CAACmV,YAAY,EAAE;YAClEz3B,IAAI,GAAGsiB,OAAO,CAACmV,YAAY;EAC7B,QAAA;UACA,IAAMozB,SAAS,GAAG,IAAI,CAAC6I,WAAW,CAACvvB,QAAQ,EAAEnkC,IAAI,EAAEowD,gBAAgB,CAAC;EACpE,QAAA,IAAIvF,SAAS,GAAG,EAAE,EAAE;EAClB,UAAA,IAAMhoC,IAAI,GAAGshB,QAAQ,CAAC0mB,SAAS,CAAC;EAChC7qD,UAAAA,IAAI,GAAG,IAAI,CAAC4rB,WAAW,GAAG/I,IAAI,CAACpe,QAAQ;YACvC,IAAI,CAAC/N,GAAG,CAAA,UAAA,GACKsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,GAAA,SAAA,GAAU4iB,IAAI,CAACxe,KAAK,GAAA,IAAA,GAAKwmD,SAAS,GAAA,GAAA,IAAI1mB,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAA,GAAA,OAAA,GAAQ,IAAI,CAAC20D,QAAQ,CAACxwD,IAAI,EAAE,KAAK,EAAE6iB,IAAI,CAAC,GAAA,QAAA,GAClI7iB,IAAI,CAACiB,EAAC,GAAA,IAAA,GACHqhB,OAAO,CAACw0B,OAAO,GAAA,GAAA,GAAIx0B,OAAO,CAAC+zB,KAAK,GAAA,aAAA,GAAc/0B,UAAU,CAC3D8uC,gBAAgB,CAACzhC,OAAO,CAAC,CAAC,CAC5B,CACF,CAAC;YACD,IAAI,CAAC4+B,gBAAgB,GAAG1qC,IAAI,CAAC3kB,KAAK,GAAG2kB,IAAI,CAACjiB,QAAQ;EAClD,UAAA,IAAI,CAACqtD,KAAK,GAAG7B,KAAK,CAACx8B,YAAY;EAC/B,UAAA,IAAItpB,OAAwD;EAC5D,UAAA,IAAIgtD,iBAAiB,EAAE;EACrBhtD,YAAAA,OAAM,GAAGgtD,iBAAgB,CACtBjzC,IAAI,CAAC,UAACkzC,aAAa,EAAK;gBACvB,IACE,CAACA,aAAa,IACdF,MAAI,CAAC9C,kBAAkB,CAACgD,aAAa,CAACvzD,IAAI,CAAA,EAC1C;EACA,gBAAA,OAAO,IAAI;EACb,cAAA;gBACA,OAAOqzD,MAAI,CAACM,eAAe,CACzB3zD,IAAI,EACJ6iB,IAAI,EACJ7hB,KAAK,EACLsvD,gBACF,CAAC;EACH,YAAA,CAAC,CAAA,CACAhwC,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,cAAA,OAAKw/D,MAAI,CAACO,mBAAmB,CAAC//D,KAAK,CAAC;cAAA,CAAA,CAAC;EACtD,UAAA,CAAC,MAAM;EACLyS,YAAAA,OAAM,GAAG,IAAI,CAACqtD,eAAe,CAC3B3zD,IAAI,EACJ6iB,IAAI,EACJ7hB,KAAK,EACLsvD,gBACF,CAAC,CAAChwC,KAAK,CAAC,UAACzsB,KAAgB,EAAA;EAAA,cAAA,OAAKw/D,MAAI,CAACO,mBAAmB,CAAC//D,KAAK,CAAC;cAAA,CAAA,CAAC;EAChE,UAAA;YACA,IAAI,CAACo3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACo6B,YAAY,EAAE;EACpC5vB,YAAAA,IAAI,EAAJA,IAAI;EACJ6iB,YAAAA,IAAI,EAAJA,IAAI;EACJutC,YAAAA,gBAAgB,EAAhBA;EACF,WAAC,CAAC;EACF,UAAA,IAAI,IAAI,CAACxkC,WAAW,KAAK,IAAI,EAAE;cAC7B,OAAOtM,OAAO,CAACorB,MAAM,CACnB,IAAI7rB,KAAK,CAAA,0DAET,CACF,CAAC;EACH,UAAA;EACA,UAAA,OAAOvY,OAAM;EACf,QAAA,CAAC,MAAM,IACL,CAACtG,IAAI,CAAClM,GAAG,IACT,IAAI,CAAC+/D,gBAAgB,CAAC1vB,QAAQ,EAAEisB,gBAAgB,CAAA,EAChD;EACA;EACA,UAAA,OAAO9wC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAIxf,eAAe,CAACC,IAAI,CAAC,IAAI,IAAI,CAAC8tD,YAAY,EAAE;EAAA,MAAA,IAAAgG,iBAAA;QAC9C,IAAI,CAACp9D,GAAG,CAAA,4CAAA,GACuC05D,gBAAgB,CAACzhC,OAAO,CACnE,CACF,CAAC,GAAA,uBAAA,GAAwB3uB,IAAI,CAACC,EAAE,GAAA,iBAAA,IAAA,CAAA6zD,iBAAA,GAAkBxxC,OAAO,CAAC6hB,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAhB2vB,iBAAA,CAAkB9vC,MAAM,CAAC,UAAC+vC,CAAC,EAAA;UAAA,OAAKA,CAAC,CAACn2D,MAAM;EAAA,MAAA,CAAA,CAAC,CAACoT,GAAG,CAAC,UAAC+iD,CAAC,EAAA;EAAA,QAAA,OAAA,GAAA,GAASA,CAAC,CAAC71D,KAAK,GAAA,GAAA,GAAI61D,CAAC,CAAC31D,GAAG,GAAA,GAAA;QAAA,CAAG,CAAC,CACjI,CAAC;QACD,IAAI,CAAC0vD,YAAY,GAAG,KAAK;EAC3B,IAAA,CAAC,MAAM,IAAI,CAAC9tD,IAAI,CAAClM,GAAG,EAAE;EACpB;EACA,MAAA,OAAOwrB,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B,IAAA;MAEA,IAAI,CAAC7oB,GAAG,CAAA,UAAA,GACKsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,YAAO,IAAI,CAACuwD,QAAQ,CAACxwD,IAAI,EAAE,KAAK,CAAC,GAAA,QAAA,GAASA,IAAI,CAACiB,EAAE,UAClF,GAAG,GAAGqhB,OAAO,CAACw0B,OAAO,GAAG,GAAG,GAAGx0B,OAAO,CAAC+zB,KAAK,GAAG,GAAE,CAAA,GAAA,YAAA,GACrC/0B,UAAU,CAAC8uC,gBAAgB,CAACzhC,OAAO,CAAC,CAAC,CAAC,CACrD,CAAC;EACD;MACA,IAAIvrB,cAAA,CAAgBpD,IAAI,CAACC,EAAY,CAAC,IAAI,CAAC,IAAI,CAAC0B,WAAW,EAAE;QAC3D,IAAI,CAAC4rD,gBAAgB,GAAGvtD,IAAI,CAAC9B,KAAK,GAAG8B,IAAI,CAACY,QAAQ;EACpD,IAAA;EACA,IAAA,IAAI,CAACqtD,KAAK,GAAG7B,KAAK,CAACx8B,YAAY;;EAE/B;EACA,IAAA,IAAMokC,cAAc,GAAG,IAAI,CAACpyC,MAAM,CAACqyC,WAAW;EAC9C,IAAA,IAAI3tD,MAAwD;MAC5D,IAAI0tD,cAAc,IAAIV,iBAAiB,EAAE;EACvChtD,MAAAA,MAAM,GAAGgtD,iBAAgB,CACtBjzC,IAAI,CAAC,UAACkzC,aAAa,EAAK;UACvB,IAAI,CAACA,aAAa,IAAIF,MAAI,CAAC9C,kBAAkB,CAACgD,aAAa,CAACvzD,IAAI,CAAC,EAAE;EACjE,UAAA,OAAO,IAAI;EACb,QAAA;UACA,OAAOqzD,MAAI,CAAC5F,cAAc,CAAC9hB,IAAI,CAAC3rC,IAAI,EAAEswD,gBAAgB,CAAC;EACzD,MAAA,CAAC,CAAA,CACAhwC,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,QAAA,OAAKw/D,MAAI,CAACO,mBAAmB,CAAC//D,KAAK,CAAC;QAAA,CAAA,CAAC;EACtD,IAAA,CAAC,MAAM;EACL;EACA;EACAyS,MAAAA,MAAM,GAAGgZ,OAAO,CAACW,GAAG,CAAC,CACnB,IAAI,CAACwtC,cAAc,CAAC9hB,IAAI,CACtB3rC,IAAI,EACJg0D,cAAc,GAAG1D,gBAAgB,GAAGv1D,SACtC,CAAC,EACDu4D,iBAAiB,CAClB,CAAA,CACEjzC,IAAI,CAAC,UAAA7f,IAAA,EAAsB;UAAA,IAApB0zD,cAAc,GAAA1zD,IAAA,CAAA,CAAA,CAAA;EACpB,QAAA,IAAI,CAACwzD,cAAc,IAAI1D,gBAAgB,EAAE;YACvCA,gBAAgB,CAAC4D,cAAc,CAAC;EAClC,QAAA;EACA,QAAA,OAAOA,cAAc;EACvB,MAAA,CAAC,CAAA,CACA5zC,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,QAAA,OAAKw/D,MAAI,CAACO,mBAAmB,CAAC//D,KAAK,CAAC;QAAA,CAAA,CAAC;EACtD,IAAA;MACA,IAAI,CAACo3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACo6B,YAAY,EAAE;EAAE5vB,MAAAA,IAAI,EAAJA,IAAI;EAAEowD,MAAAA,gBAAgB,EAAhBA;EAAiB,KAAC,CAAC;EACjE,IAAA,IAAI,IAAI,CAACxkC,WAAW,KAAK,IAAI,EAAE;QAC7B,OAAOtM,OAAO,CAACorB,MAAM,CACnB,IAAI7rB,KAAK,CAAA,oDAAqD,CAChE,CAAC;EACH,IAAA;EACA,IAAA,OAAOvY,MAAM;IACf,CAAA;EAAA3P,EAAAA,MAAA,CAEQg9D,eAAe,GAAvB,SAAQA,eAAeA,CACrB3zD,IAAc,EACdm0D,QAAc,EACdnzD,KAAY,EACZsvD,gBAA8C,EACb;EAAA,IAAA,IAAA8D,MAAA,GAAA,IAAA;EACjC,IAAA,OAAO,IAAI90C,OAAO,CAChB,UAACC,OAA0B,EAAEmrB,MAAwB,EAAK;EAAA,MAAA,IAAA5P,cAAA;QACxD,IAAMm4B,WAA6B,GAAG,EAAE;QACxC,IAAMoB,eAAe,GAAA,CAAAv5B,cAAA,GAAG95B,KAAK,CAACshB,OAAO,KAAA,IAAA,GAAA,MAAA,GAAbwY,cAAA,CAAeqJ,QAAQ;EAC/C,MAAA,IAAMkJ,SAAQ,GAAG,SAAXA,QAAQA,CAAIxqB,IAAU,EAAK;EAC/BuxC,QAAAA,MAAI,CAAC3G,cAAa,CACfpgB,QAAQ,CAACrtC,IAAI,EAAE6iB,IAAI,EAAEytC,gBAAgB,CAAA,CACrCjwC,IAAI,CAAC,UAACktB,cAA8B,EAAK;EACxC0lB,UAAAA,WAAW,CAACpwC,IAAI,CAACxe,KAAK,CAAC,GAAGkpC,cAAc;EACxC,UAAA,IAAM+mB,UAAU,GAAG/mB,cAAc,CAAC1qB,IAAY;YAC9CuxC,MAAI,CAACnpC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs6B,WAAW,EAAEyd,cAAc,CAAC;EACpD,UAAA,IAAMgnB,QAAQ,GACZ3J,WAAW,CAAC5pD,KAAK,CAACshB,OAAO,EAAEtiB,IAAI,CAACC,EAAE,EAAY4iB,IAAI,CAACxe,KAAK,GAAG,CAAC,CAAC,IAC7DymD,QAAQ,CAACuJ,eAAe,EAAEr0D,IAAI,CAACC,EAAE,EAAY4iB,IAAI,CAACxe,KAAK,GAAG,CAAC,CAAC;EAC9D,UAAA,IAAIkwD,QAAQ,EAAE;cACZlnB,SAAQ,CAACknB,QAAQ,CAAC;EACpB,UAAA,CAAC,MAAM;EACL,YAAA,OAAOh1C,OAAO,CAAC;EACbvf,cAAAA,IAAI,EAAJA,IAAI;EACJ6iB,cAAAA,IAAI,EAAEyxC,UAAU;EAChBrB,cAAAA,WAAW,EAAXA;EACF,aAAC,CAAC;EACJ,UAAA;EACF,QAAA,CAAC,CAAA,CACA3yC,KAAK,CAACoqB,MAAM,CAAC;QAClB,CAAC;QACD2C,SAAQ,CAAC8mB,QAAQ,CAAC;EACpB,IAAA,CACF,CAAC;IACH,CAAA;EAAAx9D,EAAAA,MAAA,CAEQi9D,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzB//D,KAAwD,EACxD;MACA,IAAI,MAAM,IAAIA,KAAK,EAAE;EACnB,MAAA,IAAM6N,IAAI,GAAG7N,KAAK,CAAC6N,IAAI;QACvB,IAAIA,IAAI,CAAC1B,IAAI,IAAI0B,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC43C,gBAAgB,EAAE;UAC/D,IAAI,CAACqnB,qBAAqB,CAAC9yD,IAAI,CAAC1B,IAAI,EAAE0B,IAAI,CAACmhB,IAAI,CAAC;EAClD,MAAA,CAAC,MAAM,IAAInhB,IAAI,CAAC1B,IAAI,IAAI0B,IAAI,CAAC3H,IAAI,KAAKzE,UAAU,CAACioC,gBAAgB,EAAE;EACjE77B,QAAAA,IAAI,CAAC1B,IAAI,CAAC2C,aAAa,EAAE;UACzB,IAAI,CAAC8xD,uBAAuB,EAAE;EAC9B,QAAA,IAAI,CAAC5D,oBAAoB,CAACnvD,IAAI,CAAC1B,IAAI,CAAC;EACtC,MAAA,CAAC,MAAM;UACL,IAAI,CAACirB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEhvB,IAAiB,CAAC;EACnD,MAAA;EACF,IAAA,CAAC,MAAM;QACL,IAAI,CAACupB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;UAC5BpyC,OAAO,EAAE/sB,YAAY,CAACynC,kBAAkB;EACxCqO,QAAAA,GAAG,EAAEx3C,KAAK;EACVA,QAAAA,KAAK,EAALA,KAAK;EACLo9B,QAAAA,KAAK,EAAE;EACT,OAAC,CAAC;EACJ,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAA;EAAAt6B,EAAAA,MAAA,CAEUg+D,sBAAsB,GAAhC,SAAUA,sBAAsBA,CAACvB,SAAwB,EAAE;EACzD,IAAA,IAAM54D,OAAO,GAAG,IAAI,CAACo6D,iBAAiB,CAACxB,SAAS,CAAC;MACjD,IAAI,CAAC54D,OAAO,IAAI,IAAI,CAACyzD,KAAK,KAAK7B,KAAK,CAACM,OAAO,EAAE;QAC5C,IACE,CAAC,IAAI,CAAC9gC,WAAW,IACjB,IAAI,CAACqiC,KAAK,KAAK7B,KAAK,CAACC,OAAO,IAC5B,IAAI,CAAC4B,KAAK,KAAK7B,KAAK,CAAC17B,KAAI,EACzB;EACA,QAAA,IAAI,CAACu9B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,MAAA;EACA,MAAA;EACF,IAAA;EACA,IAAA,IAAQtsD,IAAI,GAAkBxF,OAAO,CAA7BwF,IAAI;QAAE6iB,IAAI,GAAYroB,OAAO,CAAvBqoB,IAAI;QAAE7hB,KAAK,GAAKxG,OAAO,CAAjBwG,KAAK;MACzB,IAAMqrB,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAClCrsB,IAAAA,IAAI,CAACkD,KAAK,CAAC7E,OAAO,CAACD,GAAG,GAAGiuB,GAAG;EAC5B,IAAA,IAAIxJ,IAAI,EAAE;EACRA,MAAAA,IAAI,CAAC3f,KAAK,CAAC7E,OAAO,CAACD,GAAG,GAAGiuB,GAAG;EAC9B,IAAA;EACA;EACA,IAAA,IAAM4H,YAAY,GAAG,IAAI,CAAC06B,eAAe,EAAE;MAC3C,IAAMkG,kBAAkB,GAAG5gC,YAAY,IAAIj0B,IAAI,CAACC,EAAE,GAAGg0B,YAAY,CAACoiB,KAAK;EACvE,IAAA,IAAMqY,eAAe,GACnBmG,kBAAkB,IAAI,IAAI,CAACnG,eAAe,CAACz6B,YAAY,EAAEj0B,IAAI,CAAC5B,GAAG,CAAC;EACpE,IAAA,IAAIswD,eAAe,KAAK,IAAI,CAACZ,YAAY,EAAE;EACzC,MAAA,IAAI,CAACp3D,GAAG,CAAA,kBAAA,IAEJg4D,eAAe,GAAG,IAAI,GAAG,KAAI,CAAA,GAAA,iCAAA,GACG1uD,IAAI,CAAC5B,GAAG,CAACuwB,OAAO,CAAC,CAAC,CACtD,CAAC;QACD,IAAI,CAACm/B,YAAY,GAAGY,eAAe;EACrC,IAAA;EACA,IAAA,IAAI,CAACoG,iBAAiB,CAAC90D,IAAI,EAAE6iB,IAAI,EAAE7hB,KAAK,EAAEoyD,SAAS,CAACpwD,OAAO,CAAC;IAC9D,CAAA;IAAArM,MAAA,CAEQ+3D,eAAe,GAAvB,SAAQA,eAAeA,CACrBpsC,OAAiC,EACjCoU,SAAiB,EACR;EACT,IAAA,IAAI,IAAI,CAAC9U,MAAM,CAACmzC,cAAc,EAAE;QAC9B,IAAI,CAACzyC,OAAO,EAAE;UACZ,OAAO,IAAI,CAACwrC,YAAY;EAC1B,MAAA;QACA,IAAIxrC,OAAO,CAAC6hB,QAAQ,EAAE;EAAA,QAAA,IAAA6wB,qBAAA;EACpB;EACA;EACA,QAAA,IAAMC,SAAS,GAAG3yC,OAAO,CAAC6hB,QAAQ,CAAC,CAAC,CAAC;EACrC;UACA,IAAI8wB,SAAS,CAACxwD,QAAQ,CAAC1K,IAAI,KAAKjE,iBAAiB,CAACG,QAAQ,EAAE;EAC1D,UAAA,OAAO,KAAK;EACd,QAAA;EACA,QAAA,IAAMi/D,aAAa,GACjBD,SAAS,CAAC72D,GAAG,IAAI,EAAA42D,qBAAA,GAAA1yC,OAAO,CAACmV,YAAY,KAAA,IAAA,GAAA,MAAA,GAApBu9B,qBAAA,CAAsBp0D,QAAQ,KAAI,CAAC,CAAC;UACvD,IAAI81B,SAAS,IAAIw+B,aAAa,EAAE;EAAA,UAAA,IAAAC,WAAA;YAC9B,IAAMC,QAAQ,GAAG,IAAI,CAACnqC,GAAG,CAAC2jC,gBAAe,GACrC,CAAA,CAAAuG,WAAA,GAAA,IAAI,CAAChwC,KAAK,qBAAVgwC,WAAA,CAAYjH,WAAW,KAAI,IAAI,CAACZ,eAAc,GAC9C,IAAI,CAAC+H,eAAe,EAAE;YAC1B,IAAID,QAAQ,GAAGH,SAAS,CAAC/2D,KAAK,GAAG+2D,SAAS,CAACxwD,QAAQ,CAAC7D,QAAQ,EAAE;EAC5D,YAAA,OAAO,IAAI;EACb,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAA;EAAAjK,EAAAA,MAAA,CAEUi+D,iBAAiB,GAA3B,SAAUA,iBAAiBA,CACzBxB,SAAwB,EACyC;EACjE,IAAA,IAAQ3qC,MAAM,GAAkB,IAAI,CAA5BA,MAAM;QAAEmD,WAAW,GAAK,IAAI,CAApBA,WAAW;EAC3B,IAAA,IAAeoQ,UAAU,GAA0Bo3B,SAAS,CAApDpyD,KAAK;QAAcf,EAAE,GAAsBmzD,SAAS,CAAjCnzD,EAAE;QAAQ4qD,SAAS,GAAKuI,SAAS,CAA7BvwC,IAAI;EACnC,IAAA,IAAI,EAAC4F,MAAM,IAAA,IAAA,IAANA,MAAM,CAAGuT,UAAU,CAAC,CAAA,EAAE;EACzB,MAAA,IAAI,CAAC1iC,IAAI,CAAA,mDAAA,GAC6C2G,EAAE,GAAA,MAAA,GAAO,IAAI,CAAC0wD,aAAa,EAAE,GAAA,GAAA,GAAI30B,UAAU,8CACjG,CAAC;EACD,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAMh7B,KAAK,GAAGynB,MAAM,CAACuT,UAAU,CAAC;EAChC,IAAA,IAAM/H,YAAY,GAAGjzB,KAAK,CAACshB,OAAO;EAElC,IAAA,IAAMO,IAAI,GACRgoC,SAAS,GAAG,EAAE,GAAGD,WAAW,CAAC32B,YAAY,EAAEh0B,EAAE,EAAE4qD,SAAS,CAAC,GAAG,IAAI;EAClE,IAAA,IAAM7qD,IAAI,GAAG6iB,IAAG,GACZA,IAAI,CAACpe,QAAO,GACZqkD,iBAAiB,CAAC70B,YAAY,EAAEh0B,EAAE,EAAE2rB,WAAW,CAAC;MACpD,IAAI,CAAC5rB,IAAI,EAAE;EACT,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAI4rB,WAAW,IAAIA,WAAW,KAAK5rB,IAAI,EAAE;EACvCA,MAAAA,IAAI,CAACkD,KAAK,GAAG0oB,WAAW,CAAC1oB,KAAK;EAChC,IAAA;MACA,OAAO;EAAElD,MAAAA,IAAI,EAAJA,IAAI;EAAE6iB,MAAAA,IAAI,EAAJA,IAAI;EAAE7hB,MAAAA,KAAK,EAALA;OAAO;IAC9B,CAAA;EAAArK,EAAAA,MAAA,CAEU2+D,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAC1B5zD,IAAkB,EAClB1B,IAAc,EACd6iB,IAAiB,EACjBuwC,SAAwB,EACxBmC,cAAwB,EACxB;EACA,IAAA,IAAI,IAAI,CAACtH,KAAK,KAAK7B,KAAK,CAACM,OAAO,EAAE;EAChC,MAAA;EACF,IAAA;EAEA,IAAA,IAAQn8C,KAAK,GAAY7O,IAAI,CAArB6O,KAAK;QAAEC,KAAK,GAAK9O,IAAI,CAAd8O,KAAK;MACpB,IAAI/S,MAAM,GAAG8S,KAAK;EAClB,IAAA,IAAIC,KAAK,EAAE;EACT;EACA/S,MAAAA,MAAM,GAAG6S,gBAAgB,CAACC,KAAK,EAAEC,KAAK,CAAC;EACzC,IAAA;EAEA,IAAA,IAAI,CAAC/S,MAAM,CAAC5B,MAAM,EAAE;EAClB,MAAA;EACF,IAAA;MACA,IAAM25D,eAAe,GAAG,IAAI,CAAC3H,OAAO,CAAC7tD,IAAI,CAACiB,EAAE,CAE/B;EACb,IAAA,IAAMgF,MAAM,GAAGuvD,eAAc,GACzB,CAACA,eAAe,CAACtnD,QAAQ,GAAGsnD,eAAe,CAACruD,SAAQ,GACpDpM,SAAS;EACb,IAAA,IAAMmzC,OAA4B,GAAG;QACnCn0C,IAAI,EAAE2H,IAAI,CAAC3H,IAAI;EACfiG,MAAAA,IAAI,EAAJA,IAAI;EACJ6iB,MAAAA,IAAI,EAAJA,IAAI;EACJuwC,MAAAA,SAAS,EAATA,SAAS;EACTntD,MAAAA,MAAM,EAANA,MAAM;QACNg2B,MAAM,EAAEj8B,IAAI,CAACjG,IAAI;EACjB2H,MAAAA,IAAI,EAAEjE;OACP;MACD,IAAI,CAACwtB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACigE,gBAAgB,EAAEvnB,OAAO,CAAC;MAElD,IAAIxsC,IAAI,CAACg0D,OAAO,IAAIh0D,IAAI,CAAC8C,WAAW,IAAI,CAACqe,IAAI,EAAE;EAC7C,MAAA,IAAI0yC,cAAc,EAAE;EAClB,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAI,CAACI,cAAc,CAAC31D,IAAI,CAAC;EAC3B,IAAA;IACF,CAAA;EAAArJ,EAAAA,MAAA,CAEUg/D,cAAc,GAAxB,SAAUA,cAAcA,CAAC31D,IAAc,EAAE;EACvC,IAAA,IAAMmlB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAI,CAACA,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA;MACA,IAAI,CAACorB,YAAY,CAACC,UAAU,CAACrrB,KAAK,EAAEA,KAAK,CAAC+oC,WAAW,CAAC,EAAE;QACtD,IAAI,CAACwD,eAAe,CAAC,CAAC,EAAE1xD,IAAI,CAAC9B,KAAK,CAAC;EACnC,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAMgwD,WAAW,GAAG/oC,KAAK,CAAC+oC,WAAW;MACrC,IAAMlhC,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CAAC7H,KAAK,EAAE+oC,WAAW,EAAE,CAAC,CAAC;EACjE,IAAA,IAAM0H,YAAY,GAAG51D,IAAI,CAACY,QAAQ;EAClC,IAAA,IAAMi1D,eAAe,GAAGjhE,IAAI,CAAC+D,GAAG,CAC9B,IAAI,CAACipB,MAAM,CAACqU,sBAAsB,GAAG,CAAC,EACtC2/B,YAAY,GAAG,IACjB,CAAC;MACD,IAAM13D,KAAK,GAAGtJ,IAAI,CAACsD,GAAG,CACpBtD,IAAI,CAAC+D,GAAG,CAACqH,IAAI,CAAC9B,KAAK,GAAG23D,eAAe,EAAE7oC,UAAU,CAAC5uB,GAAG,GAAGy3D,eAAe,CAAC,EACxE3H,WAAW,GAAG2H,eAChB,CAAC;EACD,IAAA,IAAI71D,IAAI,CAAC9B,KAAK,GAAGA,KAAK,GAAG23D,eAAe,EAAE;QACxC,IAAI,CAACnE,eAAe,CAACxzD,KAAK,EAAE8B,IAAI,CAAC9B,KAAK,CAAC;EACzC,IAAA;IACF,CAAA;IAAAvH,MAAA,CAEUs6D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxB6E,UAA6B,EAC7B/7D,IAAuB,EACJ;EAAA,IAAA,IAAAg8D,YAAA;EACnB,IAAA,IAAMz+B,GAAG,GAAG,IAAI,CAAC+9B,eAAe,EAAE;EAClC,IAAA,IAAI,CAACzxD,cAAA,CAAgB0zB,GAAG,CAAC,EAAE;EACzB,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAM0+B,YAAY,GAAG,IAAI,CAAC1I,eAAe,GAAGh2B,GAAG;MAC/C,IAAM62B,aAAa,GACjB6H,YAAY,IAAA,CAAAD,YAAA,GAAI,IAAI,CAAC5wC,KAAK,KAAA,IAAA,IAAV4wC,YAAA,CAAYlpC,MAAM,GAAG,CAAC,GAAG,IAAI,CAACjL,MAAM,CAACusC,aAAa;MACpE,OAAO,IAAI,CAAC8H,qBAAqB,CAACH,UAAU,EAAEx+B,GAAG,EAAEv9B,IAAI,EAAEo0D,aAAa,CAAC;IACzE,CAAA;EAAAx3D,EAAAA,MAAA,CAEUs/D,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAC7BH,UAA6B,EAC7Bx+B,GAAW,EACXv9B,IAAuB,EACvBo0D,aAAqB,EACF;MACnB,IAAMnhC,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CAAC8oC,UAAU,EAAEx+B,GAAG,EAAE62B,aAAa,CAAC;EAC1E;MACA,IAAInhC,UAAU,CAACrwB,GAAG,KAAK,CAAC,IAAIqwB,UAAU,CAACqkB,SAAS,KAAKt2C,SAAS,EAAE;QAC9D,IAAMm7D,iBAAiB,GAAG,IAAI,CAACjJ,eAAe,CAAC/rB,eAAe,CAAC5J,GAAG,EAAEv9B,IAAI,CAAC;EACzE,MAAA,IACEm8D,iBAAiB,KAChBlpC,UAAU,CAACqkB,SAAS,IAAI6kB,iBAAiB,CAAC93D,GAAG,IAAI83D,iBAAiB,CAACn0D,GAAG,CAAA,EACvE;UACA,IAAMo0D,WAAW,GAAGvhE,IAAI,CAACsD,GAAG,CAC1BtD,IAAI,CAAC+D,GAAG,CAACq0B,UAAU,CAACqkB,SAAS,EAAE6kB,iBAAiB,CAAC93D,GAAG,CAAC,GAAGk5B,GAAG,EAC3D62B,aACF,CAAC;UACD,OAAO5d,YAAY,CAACvjB,UAAU,CAAC8oC,UAAU,EAAEx+B,GAAG,EAAE6+B,WAAW,CAAC;EAC9D,MAAA;EACF,IAAA;EACA,IAAA,OAAOnpC,UAAU;IACnB,CAAA;EAAAr2B,EAAAA,MAAA,CAEUy/D,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAAC30C,YAAqB,EAAU;EAC1D,IAAA,IAAQG,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,IAAA,IAAIy0C,SAAiB;EACrB,IAAA,IAAI50C,YAAY,EAAE;EAChB40C,MAAAA,SAAS,GAAGzhE,IAAI,CAACsD,GAAG,CACjB,CAAC,GAAG0pB,MAAM,CAAC00C,aAAa,GAAI70C,YAAY,EACzCG,MAAM,CAACuvC,eACT,CAAC;EACH,IAAA,CAAC,MAAM;QACLkF,SAAS,GAAGz0C,MAAM,CAACuvC,eAAe;EACpC,IAAA;MACA,OAAOv8D,IAAI,CAAC+D,GAAG,CAAC09D,SAAS,EAAEz0C,MAAM,CAAC20C,kBAAkB,CAAC;IACvD,CAAA;IAAA5/D,MAAA,CAEU26D,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAACkF,SAAiB,EAAEZ,YAAoB,EAAE;EACvE,IAAA,IAAMh0C,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAM60C,SAAS,GAAG7hE,IAAI,CAACsD,GAAG,CACxBtD,IAAI,CAAC+D,GAAG,CAAC69D,SAAS,GAAGZ,YAAY,EAAEh0C,MAAM,CAACuvC,eAAe,CAAC,EAC1DyE,YACF,CAAC;EACD,IAAA,IAAMc,aAAa,GAAG9hE,IAAI,CAACsD,GAAG,CAC5Bs+D,SAAS,GAAGZ,YAAY,GAAG,CAAC,EAC5Bh0C,MAAM,CAAC20C,kBAAkB,GAAG,CAAC,EAC7BE,SACF,CAAC;MACD,IAAIC,aAAa,IAAID,SAAS,EAAE;EAC9B;QACA70C,MAAM,CAAC20C,kBAAkB,GAAGG,aAAa;EACzC,MAAA,IAAI,CAACp9D,IAAI,CAAA,8BAAA,GAAgCo9D,aAAa,MAAG,CAAC;EAC1D,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAA;IAAA//D,MAAA,CAEUkqC,eAAe,GAAzB,SAAUA,eAAeA,CACvBC,QAAgB,EAChBY,YAA+B,EACd;EAAA,IAAA,IADjBA,YAA+B,KAAA,MAAA,EAAA;QAA/BA,YAA+B,GAAG5rC,iBAAiB,CAACC,IAAI;EAAA,IAAA;EAExD,IAAA,IAAM4gE,UAAU,GAAI,IAAI,CAAC1J,eAAe,GACpC,IAAI,CAACA,eAAe,CAACpsB,eAAe,CAACC,QAAQ,EAAEY,YAAY,CAAA,GAC3D,IAAI;EACR,IAAA,IAAIi1B,UAAU,IAAI,UAAU,IAAIA,UAAU,EAAE;QAC1C,OAAOA,UAAU,CAAClyD,QAAQ;EAC5B,IAAA;EACA,IAAA,OAAOkyD,UAAU;IACnB,CAAA;IAAAhgE,MAAA,CAEUigE,eAAe,GAAzB,SAAUA,eAAeA,CACvBt/B,GAAW,EACXrD,YAA0B,EACT;EACjB,IAAA,IAAM8B,SAAS,GAAG9B,YAAY,CAAC8B,SAAS;EACxC,IAAA,IAAM8gC,OAAO,GAAG9gC,SAAS,CAACl6B,MAAM;MAEhC,IAAI,CAACg7D,OAAO,EAAE;EACZ,MAAA,OAAO,IAAI;EACb,IAAA;;EAEA;EACA,IAAA,IAAQj1C,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,IAAA,IAAM1jB,KAAK,GAAG63B,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK;MAChC,IAAM44D,YAAY,GAAGl1C,MAAM,CAACmzC,cAAc,IAAI,CAAC,CAAC9gC,YAAY,CAACkQ,QAAQ;MACrE,IAAInkC,IAA0B,GAAG,IAAI;MAErC,IAAIi0B,YAAY,CAACpG,IAAI,EAAE;EACrB,MAAA,IAAMkpC,uBAAuB,GAAGn1C,MAAM,CAACm1C,uBAAuB;QAC9D,IAAIF,OAAO,GAAGE,uBAAuB,EAAE;EACrC,QAAA,IAAI,CAACz9D,IAAI,CAAA,gDAAA,GAC0Cu9D,OAAO,GAAA,UAAA,GAAWE,uBAAuB,MAC5F,CAAC;EACD,QAAA,OAAO,IAAI;EACb,MAAA;EACA;EACA;EACA;EACA;QACA,IACG,CAAC9iC,YAAY,CAACkiB,QAAQ,IACrB,CAAC,IAAI,CAACwX,kBAAkB,IACxB,IAAI,CAACnzB,aAAa,KAAK,EAAE,IAC3BlD,GAAG,GAAGp5B,KAAI,EACV;EAAA,QAAA,IAAA84D,KAAA;EACA,QAAA,IAAIF,YAAY,IAAI,CAAC,IAAI,CAAChJ,YAAY,EAAE;YACtC,IAAI,CAACp3D,GAAG,CAAA,8CAA+C,CAAC;YACxD,IAAI,CAACo3D,YAAY,GAAG,IAAI;EAC1B,QAAA;EACA9tD,QAAAA,IAAI,GAAG,IAAI,CAACi3D,sBAAsB,CAAChjC,YAAY,CAAC;EAChD,QAAA,IAAMijC,SAAS,GAAG,IAAI,CAACjsC,GAAG,CAACuP,aAAa;EACxC,QAAA,IAAM28B,gBAAgB,GAAG,IAAI,CAAClsC,GAAG,CAACksC,gBAAgB;UAClD,IAAM38B,aAAa,GAAGx6B,IAAG,GACrB,CAACk3D,SAAS,KAAK,EAAE,IAAIA,SAAS,IAAIh5D,KAAI,GAClCg5D,SAAQ,GACRC,gBAAgB,KAAKn3D,IAAI,CAAC9B,KAAI,GAClCo5B,GAAG;EACP,QAAA,IAAI,CAAC5gC,GAAG,CAAA,2BAAA,GACsB8jC,aAAa,GAAA,gDAAA,GAAiD08B,SAAS,GAAA,qBAAA,GAAsBC,gBAAgB,GAAA,eAAA,IAAA,CAAAH,KAAA,GAAgBh3D,IAAI,KAAA,IAAA,GAAA,MAAA,GAAJg3D,KAAA,CAAM94D,KAAK,CACtK,CAAC;EACD,QAAA,IAAI,CAACs8B,aAAa,GAAG,IAAI,CAAC+yB,gBAAgB,GAAG/yB,aAAa;EAC5D,MAAA;EACF,IAAA,CAAC,MAAM,IAAIlD,GAAG,IAAIp5B,KAAK,EAAE;EACvB;EACA8B,MAAAA,IAAI,GAAG+1B,SAAS,CAAC,CAAC,CAAC;EACrB,IAAA;;EAEA;MACA,IAAI,CAAC/1B,IAAI,EAAE;EACT,MAAA,IAAM5B,GAAG,GAAG,IAAI,CAAC0vD,YAAW,GACxB75B,YAAY,CAACwkB,OAAM,GACnBxkB,YAAY,CAACykB,WAAW;QAC5B14C,IAAI,GAAG,IAAI,CAACo3D,qBAAqB,CAAC9/B,GAAG,EAAEl5B,GAAG,EAAE61B,YAAY,CAAC;EAC3D,IAAA;MACA,IAAIojC,WAAW,GAAG,IAAI,CAACC,qBAAqB,CAACt3D,IAAI,EAAEi0B,YAAY,CAAC;EAChE,IAAA,IAAI,CAACojC,WAAW,IAAIr3D,IAAI,EAAE;QACxB,IAAMu3D,QAAQ,GAAGv3D,IAAI,CAACC,EAAE,GAAGg0B,YAAY,CAAC6iB,OAAO;EAC/CugB,MAAAA,WAAW,GAAG,IAAI,CAACC,qBAAqB,CACtCvhC,SAAS,CAACwhC,QAAQ,GAAG,CAAC,CAAC,IAAI,IAAI,EAC/BtjC,YACF,CAAC;EACH,IAAA;EACA,IAAA,OAAO,IAAI,CAACujC,yBAAyB,CAACH,WAAW,CAAC;IACpD,CAAA;IAAA1gE,MAAA,CAEU8gE,aAAa,GAAvB,SAAUA,aAAaA,CAACz3D,IAAc,EAAEowD,gBAAwB,EAAW;MACzE,IAAMsH,YAAY,GAAG,IAAI,CAACzK,eAAe,CAACzpB,QAAQ,CAACxjC,IAAI,CAAC;MACxD,OACE,CAAC03D,YAAY,KAAK73B,aAAa,CAACI,EAAE,IAC/By3B,YAAY,KAAK73B,aAAa,CAACG,OAAO,IAAI,CAAC,CAAChgC,IAAI,CAAC+B,GAAI,KACxD,IAAI,CAACwrD,gBAAgB,GAAG6C,gBAAe;IAE3C,CAAA;EAAAz5D,EAAAA,MAAA,CAEUghE,0BAA0B,GAApC,SAAUA,0BAA0BA,CAClC33D,IAAc,EACdi0B,YAA0B,EAC1BjH,UAAsB,EACtB0U,YAA+B,EAC/B20B,SAAiB,EACA;MACjB,IAAIuB,YAA6B,GAAG,IAAI;MACxC,IAAI53D,IAAI,CAAC+B,GAAG,EAAE;QACZ61D,YAAY,GAAG,IAAI,CAAChB,eAAe,CAAC,IAAI,CAACrJ,gBAAgB,EAAEt5B,YAAY,CAAC;QACxE,IAAI2jC,YAAY,IAAI,CAACA,YAAY,CAAC71D,GAAG,IAAIirB,UAAU,CAACqkB,SAAS,EAAE;EAC7D;UACA,IAAMwmB,cAAc,GAAG,IAAI,CAAC5B,qBAAqB,CAC/C,IAAI,CAAC5I,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACloC,KAAK,EAChD6H,UAAU,CAACqkB,SAAS,EACpB3P,YAAY,EACZ,CACF,CAAC;EACD,QAAA,IACEm2B,cAAc,KAAK,IAAI,IACvB7qC,UAAU,CAACrwB,GAAG,GAAGk7D,cAAc,CAACl7D,GAAG,IAAI05D,SAAQ,EAC/C;EACA;EACA,UAAA,IAAMp2D,EAAE,GAAG23D,YAAY,CAAC33D,EAAE;EAC1B,UAAA,IAAI,IAAI,CAAC8tD,MAAM,KAAK9tD,EAAE,EAAE;EACtB,YAAA,IAAI,CAACvJ,GAAG,CAAA,8BAAA,GACwBgrC,YAAY,GAAA,8BAAA,GAA8BzhC,EAC1E,CAAC;cACD,IAAI,CAAC8tD,MAAM,GAAG9tD,EAAE;EAClB,UAAA;EACA,UAAA,OAAO,IAAI;EACb,QAAA;EACF,MAAA;EACF,IAAA;MACA,IAAI,CAAC8tD,MAAM,GAAGhzD,SAAS;EACvB,IAAA,OAAO68D,YAAY;IACrB,CAAA;IAAAjhE,MAAA,CAaU2gE,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAC7Bt3D,IAA0B,EAC1BsiB,OAAiC,EACX;MACtB,IAAI,CAACtiB,IAAI,EAAE;EACT,MAAA,OAAOA,IAAI;EACb,IAAA;EACA,IAAA,IACE83D,oBAAoB,CAAC,IAAI,CAACl2C,MAAM,CAAC,IACjC5hB,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACG,QAAO,EACvC;EACA;EACA,MAAA,IAAM8hE,aAAa,GAAG,IAAI,CAAC9sC,GAAG,CAAC+sC,oBAAoB;EACnD,MAAA,IAAMC,aAAa,GAAGF,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAEE,aAAa;EAClD,MAAA,IAAIA,aAAa,EAAE;EACjB,QAAA,IAAMC,qBAAqB,GAAGD,aAAa,CAACnnC,KAAK;EACjD,QAAA,IAAIonC,qBAAqB,EAAE;EACzB;YACA,IACEA,qBAAqB,CAACC,aAAa,IACnCvjE,IAAI,CAACQ,GAAG,CAAC4K,IAAI,CAAC9B,KAAK,GAAG+5D,aAAa,CAAC/5D,KAAK,CAAC,GAAG,CAAC,IAC9C+5D,aAAa,CAAC/5D,KAAK,KAAK,CAAA,EACxB;EACA,YAAA,OAAO,IAAI;EACb,UAAA;EACF,QAAA,CAAC,MAAM;EACL;EACA,UAAA,IAAI8B,IAAI,CAAC5B,GAAG,IAAI65D,aAAa,CAAC/5D,KAAK,IAAI,CAAAokB,OAAO,oBAAPA,OAAO,CAAEuL,IAAI,MAAK,KAAK,EAAE;EAC9D;EACA;EACA,YAAA,OAAO,IAAI;EACb,UAAA;YACA,IAAI7tB,IAAI,CAAC9B,KAAK,GAAG+5D,aAAa,CAAC75D,GAAG,IAAI65D,aAAa,CAACG,SAAS,EAAE;EAC7D;EACA;EACA,YAAA,IACEH,aAAa,CAACG,SAAS,CAACD,aAAa,IACrCn4D,IAAI,CAAC9B,KAAK,GAAG+5D,aAAa,CAAC75D,GAAG,GAAG,CAAA,EACjC;EACA,cAAA,OAAO,IAAI;EACb,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAMi6D,WAAW,GAAGN,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAEM,WAAW;EAC9C,MAAA,IAAIA,WAAW,EAAE;UACf,KAAK,IAAIt7D,CAAC,GAAGs7D,WAAW,CAACx8D,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACtC,UAAA,IAAMu7D,YAAY,GAAGD,WAAW,CAACt7D,CAAC,CAAC,CAACu7D,YAAY;EAChD,UAAA,IACEA,YAAY,CAACH,aAAa,IAC1Bn4D,IAAI,CAAC9B,KAAK,IAAIo6D,YAAY,CAACt1B,SAAS,IACpChjC,IAAI,CAAC5B,GAAG,IAAIk6D,YAAY,CAACC,UAAS,EAClC;EACA,YAAA,OAAO,IAAI;EACb,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAOv4D,IAAI;IACb,CAAA;EAAArJ,EAAAA,MAAA,CAEA6gE,yBAAyB,GAAzB,SAAAA,yBAAyBA,CAACx3D,IAAqB,EAAe;EAC5D;EACA,IAAA,IAAIA,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAE6B,WAAW,IAAI,CAAC7B,IAAI,CAAC6B,WAAW,CAACH,IAAI,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;QACpE,OAAO3B,IAAI,CAAC6B,WAAW;EACzB,IAAA;EAEA,IAAA,OAAO7B,IAAI;IACb,CAAA;IAAArJ,MAAA,CAEA+8D,WAAW,GAAX,SAAAA,WAAWA,CACTvvB,QAAgB,EAChBnkC,IAAc,EACdowD,gBAAwB,EAChB;MACR,IAAImE,QAAQ,GAAG,EAAE;MACjB,IAAInN,UAAU,GAAG,KAAK;MACtB,IAAIoR,sBAAsB,GAAG,IAAI;EACjC,IAAA,KAAK,IAAIz7D,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGwnC,QAAQ,CAACtoC,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EACnD,MAAA,IAAM8lB,IAAI,GAAGshB,QAAQ,CAACpnC,CAAC,CAAC;EACxBy7D,MAAAA,sBAAsB,GAAGA,sBAAsB,IAAI,CAAC31C,IAAI,CAACre,WAAW;QACpE,IAAI+vD,QAAQ,GAAG,EAAE,IAAInE,gBAAgB,GAAGvtC,IAAI,CAAC3kB,KAAK,EAAE;EAClD,QAAA;EACF,MAAA;EACA,MAAA,IAAMN,MAAM,GAAGilB,IAAI,CAACjlB,MAAM;EAC1B,MAAA,IAAIA,MAAM,EAAE;UACV22D,QAAQ,GAAG,EAAE;EACf,MAAA,CAAC,MAAM,IACLnN,UAAU,IACT,CAACvkC,IAAI,CAACre,WAAW,IAAIg0D,sBAAsB,KAAK31C,IAAI,CAACpe,QAAQ,KAAKzE,IAAI,EACvE;EACA,QAAA,IAAI6iB,IAAI,CAACpe,QAAQ,KAAKzE,IAAI,EAAE;YAC1B,IAAI,CAAC1G,IAAI,CAAA,iBAAA,GACW82D,gBAAgB,0CAAqCvtC,IAAI,CAAC3kB,KAC9E,CAAC;EACH,QAAA;EACAq2D,QAAAA,QAAQ,GAAGx3D,CAAC;EACd,MAAA;EACAqqD,MAAAA,UAAU,GAAGxpD,MAAM;EACrB,IAAA;EACA,IAAA,OAAO22D,QAAQ;IACjB,CAAA;IAAA59D,MAAA,CAEQk9D,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtB1vB,QAAgB,EAChBisB,gBAAwB,EACf;EACT,IAAA,IAAIvtC,IAAU;MACd,KAAK,IAAI9lB,CAAC,GAAGonC,QAAQ,CAACtoC,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACnC8lB,MAAAA,IAAI,GAAGshB,QAAQ,CAACpnC,CAAC,CAAC;EAClB,MAAA,IAAI,CAAC8lB,IAAI,CAACjlB,MAAM,EAAE;EAChB,QAAA,OAAO,KAAK;EACd,MAAA;EACA,MAAA,IAAIwyD,gBAAgB,GAAGvtC,IAAI,CAAC3kB,KAAK,EAAE;EACjC,QAAA,OAAO,IAAI;EACb,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;EACd,EAAA;;EAEA;EACF;EACA;EACA;EACA;EAJEvH,EAAAA,MAAA,CAKUsgE,sBAAsB,GAAhC,SAAUA,sBAAsBA,CAC9BhjC,YAA0B,EACJ;EACtB,IAAA,IAAM8B,SAAS,GAAG9B,YAAY,CAAC8B,SAAS;EACxC,IAAA,IAAMU,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,IAAIz2B,IAA0B,GAAG,IAAI;EACrC,IAAA,IAAIy2B,YAAY,EAAE;QAChB,IAAIxC,YAAY,CAACuwB,kBAAkB,EAAE;EACnC;EACA,QAAA,IAAI,CAAC9tD,GAAG,CAAA,8DAAA,GACyD+/B,YAAY,CAAC9yB,eAC9E,CAAC;EACD3D,QAAAA,IAAI,GAAG81B,iBAAiB,CACtBC,SAAS,EACTU,YAAY,CAACJ,kBAAkB,EAC/B,IAAI,CAACzU,MAAM,CAACqU,sBACd,CAAC;EACH,MAAA;QACA,IAAI,CAACj2B,IAAI,EAAE;EACT;EACA,QAAA,IAAMy4D,QAAQ,GAAIhiC,YAAY,CAACx2B,EAAE,GAAc,CAAC;UAChD,IACEw4D,QAAQ,IAAIxkC,YAAY,CAAC6iB,OAAO,IAChC2hB,QAAQ,IAAIxkC,YAAY,CAACoiB,KAAI,EAC7B;YACA,IAAMzf,QAAQ,GAAGb,SAAS,CAAC0iC,QAAQ,GAAGxkC,YAAY,CAAC6iB,OAAO,CAAC;EAC3D;EACA,UAAA,IAAIrgB,YAAY,CAACx1B,EAAE,KAAK21B,QAAQ,CAAC31B,EAAE,EAAE;EACnCjB,YAAAA,IAAI,GAAG42B,QAAQ;EACf,YAAA,IAAI,CAAClgC,GAAG,CAAA,6DAAA,GAEJsJ,IAAI,CAAEC,EAEV,CAAC;EACH,UAAA;EACF,QAAA;EACA;EACA;UACA,IAAI,CAACD,IAAI,EAAE;EACTA,UAAAA,IAAI,GAAGq3B,iBAAiB,CACtBpD,YAAY,EACZwC,YAAY,CAACx1B,EAAE,EACfw1B,YAAY,CAACr4B,GACf,CAAC;EACD,UAAA,IAAI4B,IAAI,EAAE;EACR,YAAA,IAAI,CAACtJ,GAAG,CAAA,6DAAA,GACwDsJ,IAAI,CAACC,EACrE,CAAC;EACH,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA,CAAC,MAAM;EACL;EACA,MAAA,IAAMy4D,SAAS,GAAG,IAAI,CAACztC,GAAG,CAACksC,gBAAgB;QAC3C,IAAIuB,SAAS,KAAK,IAAI,EAAE;UACtB14D,IAAI,GAAG,IAAI,CAACo3D,qBAAqB,CAC/BsB,SAAS,EACT,IAAI,CAAC/2D,WAAW,GAAGsyB,YAAY,CAACykB,WAAW,GAAGzkB,YAAY,CAACk1B,IAAI,EAC/Dl1B,YACF,CAAC;EACH,MAAA;EACF,IAAA;EAEA,IAAA,OAAOj0B,IAAI;EACb,EAAA;;EAEA;EACF;EACA;IAFErJ,MAAA,CAGUygE,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAC7B1gC,SAAiB,EACjBt4B,GAAW,EACX61B,YAA0B,EACJ;EACtB,IAAA,IAAQrS,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,IAAA,IAAM6U,YAAY,GAAK,IAAI,CAArBA,YAAY;EAClB,IAAA,IAAMV,SAAS,GAAY9B,YAAY,CAAjC8B,SAAS;QAAEsgB,KAAK,GAAKpiB,YAAY,CAAtBoiB,KAAK;EACtB,IAAA,IAAQ5e,YAAY,GAAKxD,YAAY,CAA7BwD,YAAY;EACpB,IAAA,IAAQxB,sBAAsB,GAAKrU,MAAM,CAAjCqU,sBAAsB;EAC9B,IAAA,IAAMkO,QAAQ,GAAGlQ,YAAY,CAACkQ,QAAQ;EAEtC,IAAA,IAAM2pB,YAAY,GAAG,CAAC,EACpB,IAAI,CAACA,YAAY,IACjB3pB,QAAQ,YAARA,QAAQ,CAAEtoC,MAAM,IAChB47B,YAAW,CACZ;MACD,IACEq2B,YAAY,IACZ,CAAC,IAAI,CAACnsD,WAAW,IACjBwiC,QAAQ,CAACA,QAAQ,CAACtoC,MAAM,GAAG,CAAC,CAAC,CAAC4I,QAAQ,CAACxE,EAAE,KAAKw3B,YAAY,CAACx3B,EAAC,EAC5D;EACA;EACA81B,MAAAA,SAAS,GAAGA,SAAS,CAAC2B,MAAM,CAACD,YAAY,CAAC;QAC1C4e,KAAK,GAAG5e,YAAY,CAACx3B,EAAE;EACzB,IAAA;EAEA,IAAA,IAAID,IAA0B;MAC9B,IAAI02B,SAAS,GAAGt4B,GAAG,EAAE;EAAA,MAAA,IAAAu6D,YAAA;EACnB,MAAA,IAAM3C,YAAY,GAAGt/B,SAAS,GAAG,IAAI,CAAC42B,eAAe;QACrD,IAAMsL,eAAe,GACnB5C,YAAY,IACZt/B,SAAS,GAAGt4B,GAAG,GAAG63B,sBAAsB,IAAA,CAAA0iC,YAAA,GACxC,IAAI,CAACxzC,KAAK,KAAA,IAAA,IAAVwzC,YAAA,CAAY9rC,MAAM,IAClB,CAAC,IAAI,CAAC8gC,kBAAiB,GACnB,CAAA,GACA13B,sBAAsB;EAC5B;EACA;QACAj2B,IAAI,GAAGw2B,iBAAiB,CACtBC,YAAY,EACZV,SAAS,EACTW,SAAS,EACTkiC,eACF,CAAC;EACH,IAAA,CAAC,MAAM;EACL;QACA54D,IAAI,GAAG+1B,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC;EACxC,IAAA;EAEA,IAAA,IAAImE,IAAI,EAAE;QACR,IAAMu3D,QAAQ,GAAGv3D,IAAI,CAACC,EAAE,GAAGg0B,YAAY,CAAC6iB,OAAO;EAC/C;EACA;QACA,IAAMka,SAAS,GAAG,IAAI,CAAC/D,eAAe,CAACzpB,QAAQ,CAACxjC,IAAI,CAAC;EACrD,MAAA,IACEgxD,SAAS,KAAKnxB,aAAa,CAACI,EAAE,IAC7B+wB,SAAS,KAAKnxB,aAAa,CAACG,OAAO,IAAIhgC,IAAI,CAAC+B,GAAG,EAChD;EACA00B,QAAAA,YAAY,GAAGz2B,IAAI;EACrB,MAAA;EACA,MAAA,IACEy2B,YAAY,IACZz2B,IAAI,CAACC,EAAE,KAAKw2B,YAAY,CAACx2B,EAAE,KAC1B,CAAC6tD,YAAY,IACZ3pB,QAAQ,CAAC,CAAC,CAAC,CAAC1/B,QAAQ,CAACxE,EAAE,GAAGD,IAAI,CAACC,EAAE,IACjC,CAACg0B,YAAY,CAACpG,IAAI,CAAA,EACpB;EACA;EACA;UACA,IAAMgrC,SAAS,GAAG74D,IAAI,CAACgB,KAAK,KAAKy1B,YAAY,CAACz1B,KAAK;EACnD,QAAA,IAAI63D,SAAS,EAAE;EACb,UAAA,IAAMC,QAAQ,GAAG/iC,SAAS,CAACwhC,QAAQ,GAAG,CAAC,CAAC;EACxC,UAAA,IACEv3D,IAAI,CAACC,EAAE,GAAGo2C,KAAK,IACf,IAAI,CAAC4W,eAAe,CAACzpB,QAAQ,CAACs1B,QAAQ,CAAC,KAAKj5B,aAAa,CAACI,EAAC,EAC3D;EACAjgC,YAAAA,IAAI,GAAG84D,QAAQ;EACjB,UAAA,CAAC,MAAM;EACL94D,YAAAA,IAAI,GAAG,IAAI;EACb,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAOA,IAAI;IACb,CAAA;IAAArJ,MAAA,CAEUoiE,cAAc,GAAxB,SAAUA,cAAcA,CACtBz2C,OAAqB,EACrB02C,eAAyC,EACzCxN,aAAuC,EAC/B;EACR;EACA;EACA,IAAA,IAAM3vD,MAAM,GAAGymB,OAAO,CAACyT,SAAS,CAACl6B,MAAM;MACvC,IAAI,CAACA,MAAM,EAAE;QACX,IAAI,CAACvC,IAAI,CAAA,+BAAgC,CAAC;EAC1C,MAAA,OAAO,CAAC;EACV,IAAA;EACA,IAAA,IAAM2/D,YAAY,GAAG32C,OAAO,CAACy2B,aAAa;MAC1C,IAAMmgB,cAAc,GAAG,CAACF,eAAe;MACvC,IAAMG,OAAO,GAAG72C,OAAO,CAAC8zB,cAAc,IAAInyC,cAAA,CAAgBg1D,YAAY,CAAC;EACvE,IAAA,IAAIC,cAAc,IAAK,CAACC,OAAO,IAAI,CAACF,YAAa,EAAE;EACjD1N,MAAAA,WAAW,CAACC,aAAa,EAAElpC,OAAO,CAAC;EACnC,MAAA,IAAM82C,mBAAmB,GAAG92C,OAAO,CAACy2B,aAAa;QACjD,IAAI,CAACriD,GAAG,CAAA,yBAAA,GACoB0iE,mBAAmB,CAACzqC,OAAO,CAAC,CAAC,CAAC,GAAA,aAAA,IACtDqqC,eAAe,GAAGA,eAAe,CAACliB,OAAO,GAAG,IAAG,CAAA,GAAA,IAAA,GAC5Cx0B,OAAO,CAACw0B,OAAO,GAAA,cAAA,GAAej7C,MACrC,CAAC;EACD,MAAA,OAAOu9D,mBAAmB;EAC5B,IAAA;EACA,IAAA,OAAOH,YAAY;IACrB,CAAA;EAAAtiE,EAAAA,MAAA,CAEU0iE,gBAAgB,GAA1B,SAAUA,gBAAgBA,CAAC/2C,OAAqB,EAAE;EAChD;MACA,IAAMg3C,gBAAgB,GAAG,CAAC;EAC1B,IAAA,OACEh3C,OAAO,CAACuL,IAAI,IACZvL,OAAO,CAAC60B,cAAc,IACtB70B,OAAO,CAAC6R,UAAU,IAClB7R,OAAO,CAACo1B,UAAU,GAChB9iD,IAAI,CAACsD,GAAG,CAACoqB,OAAO,CAACg1B,YAAY,EAAEh1B,OAAO,CAAC6R,UAAU,GAAGmlC,gBAAgB,CAAA;IAE1E,CAAA;IAAA3iE,MAAA,CAEU4iE,gBAAgB,GAA1B,SAAUA,gBAAgBA,CAACj3C,OAAqB,EAAE+nC,OAAe,EAAE;EACjE;EACA,IAAA,IAAI7vB,aAAa,GAAG,IAAI,CAACA,aAAa;MACtC,IAAIA,aAAa,GAAG6vB,OAAO,EAAE;QAC3B7vB,aAAa,GAAG,EAAE;EACpB,IAAA;EACA,IAAA,IAAMk1B,cAAc,GAAG,IAAI,CAACA,cAAc;EAC1C,IAAA,IAAIl1B,aAAa,KAAK,EAAE,EAAE;EACxB;EACA;EACA,MAAA,IAAMg/B,4BAA4B,GAAG,IAAI,CAACziB,eAAe,KAAK,IAAI;QAClE,IAAMA,eAAe,GAAGyiB,4BAA2B,GAC/C,IAAI,CAACziB,eAAc,GACnBz0B,OAAO,CAACy0B,eAAe;QAC3B,IAAIA,eAAe,KAAK,IAAI,IAAIwR,cAAA,CAAgBxR,eAAe,CAAC,EAAE;UAChEvc,aAAa,GAAG6vB,OAAO,GAAGtT,eAAe;UACzC,IAAIA,eAAe,GAAG,CAAC,EAAE;YACvBvc,aAAa,IAAIlY,OAAO,CAAC6mC,IAAI;EAC/B,QAAA;EACA3uB,QAAAA,aAAa,GAAG5lC,IAAI,CAAC+D,GAAG,CACtB/D,IAAI,CAACsD,GAAG,CAACmyD,OAAO,EAAE7vB,aAAa,CAAC,EAChC6vB,OAAO,GAAG/nC,OAAO,CAAC20B,aACpB,CAAC;EACD,QAAA,IAAI,CAACvgD,GAAG,CAAA,2BAAA,GACsB8jC,aAAa,GAAA,yBAAA,GAA0Buc,eAAe,GAAA,YAAA,IAChFyiB,4BAA4B,GAAG,cAAc,GAAG,OAAM,eAE1D,CAAC;UACD,IAAI,CAACh/B,aAAa,GAAGA,aAAa;EACpC,MAAA,CAAC,MAAM,IAAIlY,OAAO,CAACuL,IAAI,EAAE;EACvB;EACA;EACA2M,QAAAA,aAAa,GAAG,IAAI,CAACvP,GAAG,CAACksC,gBAAgB,IAAI9M,OAAO;EACpD,QAAA,IAAI,CAAC3zD,GAAG,CAAA,oDAAA,GAC+C8jC,aACvD,CAAC;EACD,QAAA,IAAI,CAACA,aAAa,GAAG,EAAE;EACzB,MAAA,CAAC,MAAM;UACL,IAAI,CAAC9jC,GAAG,CAAA,uCAAwC,CAAC;EACjD,QAAA,IAAI,CAAC8jC,aAAa,GAAGA,aAAa,GAAG,CAAC;EACxC,MAAA;EACA,MAAA,IAAI,CAAC8yB,eAAe,GAAG9yB,aAAa,GAAGk1B,cAAc;EACvD,IAAA;EACA,IAAA,IAAI,CAACnC,gBAAgB,GAAG/yB,aAAa,GAAGk1B,cAAc;IACxD,CAAA;EAAA/4D,EAAAA,MAAA,CAEU0+D,eAAe,GAAzB,SAAUA,eAAeA,GAAW;EAAA,IAAA,IAAA9hC,SAAA;EAClC,IAAA,IAAQpO,KAAK,GAAK,IAAI,CAAdA,KAAK;EACb;MACA,IAAImS,GAAG,GAAG,CAAC;MACX,IAAI,CAAA/D,SAAA,GAAA,IAAI,CAACtI,GAAG,KAAA,IAAA,IAARsI,SAAA,CAAUq7B,gBAAgB,IAAIzpC,KAAK,EAAE;QACvCmS,GAAG,GAAGnS,KAAK,CAAC+oC,WAAW;EACzB,IAAA,CAAC,MAAM,IAAI,IAAI,CAACX,gBAAgB,IAAI,CAAC,EAAE;QACrCj2B,GAAG,GAAG,IAAI,CAACi2B,gBAAgB;EAC7B,IAAA;EAEA,IAAA,OAAOj2B,GAAG;IACZ,CAAA;IAAA3gC,MAAA,CAEQ69D,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAACx0D,IAAc,EAAE6iB,IAA6B,EAAE;MAC3E,IACE,IAAI,CAACsqC,UAAU,IACfntD,IAAI,CAACjG,IAAI,KAAK,IAAI,CAAC2nC,YAAY,IAC/B3hC,eAAe,CAACC,IAAI,CAAC,IACrBA,IAAI,CAACkD,KAAK,CAACvF,OAAM,EACjB;QACA,IAAI,CAACjH,GAAG,CAAA,WAAA,GACMsJ,IAAI,CAACC,EAAE,IAAG4iB,IAAI,GAAG,QAAQ,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAE,CAAA,GAAA,MAAA,GAAO,IAAI,CAACssD,aAAa,EAAE,GAAA,GAAA,GAChF3wD,IAAI,CAACgB,KAAI,GAAA,cAEb,CAAC;EACD,MAAA,IAAI,CAAC6vD,oBAAoB,CAAC7wD,IAAI,CAAC;EACjC,IAAA;IACF,CAAA;EAAArJ,EAAAA,MAAA,CAEUk6D,oBAAoB,GAA9B,SAAUA,oBAAoBA,CAAC7wD,IAAc,EAAE;MAC7C,IACE,CAAC,IAAI,CAAC4rB,WAAW,IAChB,CAAC,IAAI,CAAC2kC,kBAAkB,CAACvwD,IAAI,CAAC,IAC7B,IAAI,CAACiuD,KAAK,KAAK7B,KAAK,CAACI,0BAA0B,EACjD;EACA,MAAA,IAAI,CAACyB,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;IACF,CAAA;IAAA31D,MAAA,CAEU8iE,wBAAwB,GAAlC,SAAUA,wBAAwBA,CAChCC,UAA6B,EAC7Bh4D,IAAe,EACf;EAAA,IAAA,IAAAwxB,qBAAA;MACA,IAAIxxB,IAAI,CAAC0xD,SAAS,IAAI,CAAC1xD,IAAI,CAAC1B,IAAI,EAAE;QAChC,IAAMxF,OAAO,GAAG,IAAI,CAACo6D,iBAAiB,CAAClzD,IAAI,CAAC0xD,SAAS,CAAC;EACtD,MAAA,IAAI54D,OAAO,EAAE;EACXkH,QAAAA,IAAI,CAAC1B,IAAI,GAAGxF,OAAO,CAACwF,IAAI;EAC1B,MAAA;EACF,IAAA;EACA,IAAA,IAAMA,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB;EACA,IAAA,IAAI,CAACA,IAAI,IAAIA,IAAI,CAACjG,IAAI,KAAK2/D,UAAU,IAAI,CAAC,IAAI,CAACjxC,MAAM,EAAE;EACrD,MAAA;EACF,IAAA;EACA,IAAA,IAAI,IAAI,CAAC8nC,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EAAA,MAAA,IAAA25D,iBAAA;EACjC,MAAA,IAAI,CAACrgE,IAAI,CAAA,mDAAA,GAC6C0G,IAAI,CAAClM,GAAG,GAAA,KAAA,IAAA,CAAA6lE,iBAAA,GAAM,IAAI,CAAC/tC,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB+tC,iBAAA,CAAkB7lE,GAAG,CACzF,CAAC;EACD,MAAA;EACF,IAAA;MACA,IAAM8lE,iBAAiB,GAAGl4D,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAACmmC,QAAQ;EAChE,IAAA,IAAIk+B,iBAAiB,EAAE;QACrB,IAAI,CAAC3M,eAAe,CAACpqB,YAAY,CAAC7iC,IAAI,EAAmB,IAAI,CAAC;EAChE,IAAA;EACA;EACA,IAAA,IAAMs7B,WAAW,GAAG55B,IAAI,CAAC45B,WAAW;MACpC,IAAI,CAACA,WAAW,EAAE;EAChB,MAAA,IAAI,CAAC2yB,KAAK,GAAG7B,KAAK,CAAC17B,KAAK;EACxB,MAAA;EACF,IAAA;EACA,IAAA,IAAQkL,MAAM,GAAyCN,WAAW,CAA1DM,MAAM;QAAE9yB,KAAK,GAAkCwyB,WAAW,CAAlDxyB,KAAK;QAAA+wD,qBAAA,GAAkCv+B,WAAW,CAA3C/C,UAAU;EAAVA,MAAAA,UAAU,GAAAshC,qBAAA,KAAA,MAAA,GAAG,CAAC,GAAAA,qBAAA;QAAEvhC,WAAW,GAAKgD,WAAW,CAA3BhD,WAAW;EAClD,IAAA,IAAMwhC,UAAU,GAAG,CAAC,CAACxhC,WAAW;MAChC,IAAMz6B,KAAK,GAAGi8D,UAAU,IAAIl+B,MAAM,KAAKpC,kBAAkB,CAACI,YAAY;EACtE,IAAA,IAAMmgC,WAAW,GACfD,UAAU,IACV,CAACx+B,WAAW,CAAC4D,QAAQ,IACrBp2B,KAAK,KAAK+wB,gBAAgB,CAACE,6BAA6B;EAC1D,IAAA,IAAMlM,IAAI,GAAA,CAAAqF,qBAAA,GAAG,IAAI,CAACjI,GAAG,CAAC6C,kBAAkB,KAAA,IAAA,GAAA,MAAA,GAA3BoF,qBAAA,CAA6BrF,IAAI;MAC9C,IACE,CAAChwB,KAAK,IACNk8D,WAAW,IACXh6D,eAAe,CAACC,IAAI,CAAC,IACrB,CAACA,IAAI,CAAC8B,OAAO,IACb+rB,IAAI,IACJ,CAACoK,kBAAkB,CAACv2B,IAAI,CAAA,EACxB;EACA,MAAA,IAAI,CAACs4D,mBAAmB,CAACN,UAAU,CAAC;EACpC,MAAA,IAAI,CAACO,UAAU,CAACj6D,IAAI,CAAC;QACrBs7B,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,IAAA,CAAC,MAAM,IAAI,CAACrhC,KAAK,IAAIk8D,WAAW,KAAKxhC,UAAU,GAAGD,WAAW,CAACc,WAAW,EAAE;EAAA,MAAA,IAAA8gC,cAAA;EACzE,MAAA,IAAMC,aAAa,GAAG7gC,iBAAiB,CAAA,CAAA4gC,cAAA,GAACx4D,IAAI,CAAC+7B,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAby8B,cAAA,CAAe/gC,IAAI,CAAC;EAC5D,MAAA,IAAMihC,KAAK,GAAG/hC,aAAa,CAACC,WAAW,EAAEC,UAAU,CAAC;QACpD,IAAI,CAACk8B,uBAAuB,EAAE;QAC9B,IAAI,CAACjH,SAAS,GAAGtzD,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE,GAAG+tC,KAAK;EAC/C,MAAA,IAAI,CAACnM,KAAK,GAAG7B,KAAK,CAACI,0BAA0B;QAC7ClxB,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC3B,MAAA,IAAIi7B,aAAa,EAAE;UACjB,IAAI,CAACzjE,GAAG,CAAA,kCAAmC,CAAC;UAC5C,IAAI,CAAC82D,SAAS,GAAGh+C,QAAQ;UACzB9N,IAAI,CAACqmB,MAAM,GAAG,SAAS;EACvB,QAAA;EACF,MAAA;QACA,IAAI,CAACzuB,IAAI,CAAA,WAAA,GACK0G,IAAI,CAACC,EAAE,GAAA,MAAA,GAAOy5D,UAAU,GAAA,GAAA,GAAI15D,IAAI,CAACgB,KAAK,GAAA,gBAAA,GAChDU,IAAI,CAAC4gB,OAAM,GAAA,qBAAA,IACSiW,UAAU,GAAG,CAAC,CAAA,GAAA,GAAA,GAClCD,WAAW,CAACc,WAAU,GAAA,MAAA,GACjBghC,KAAK,GAAA,IACd,CAAC;MACH,CAAC,MAAM,IAAI9hC,WAAW,EAAE;EACtB,MAAA,IAAI,CAAC0hC,mBAAmB,CAACN,UAAU,CAAC;EACpC,MAAA,IAAInhC,UAAU,GAAGD,WAAW,CAACc,WAAW,EAAE;EACxC;UACA,IACE,CAACwgC,iBAAiB,IAClBh+B,MAAM,KAAKpC,kBAAkB,CAACG,0BAAyB,EACvD;YACA2B,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,QAAA;EACF,MAAA,CAAC,MAAM;UACL,IAAI,CAAC5lC,IAAI,CACJoI,IAAI,CAAC4gB,OAAO,GAAA,kCAAA,GAAmCiW,UAAU,GAAA,GAC9D,CAAC;EACD,QAAA;EACF,MAAA;EACF,IAAA,CAAC,MAAM,IAAIqD,MAAM,KAAKpC,kBAAkB,CAACE,yBAAyB,EAAE;EAClE,MAAA,IAAI,CAACu0B,KAAK,GAAG7B,KAAK,CAACU,aAAa;EAClC,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACmB,KAAK,GAAG7B,KAAK,CAAC17B,KAAK;EAC1B,IAAA;EACA;MACA,IAAI,CAACqf,aAAa,EAAE;IACtB,CAAA;EAAAp5C,EAAAA,MAAA,CAEU0jE,cAAc,GAAxB,SAAUA,cAAcA,GAAG;MACzB,IAAMhuC,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAClC,IAAA,IAAMmhC,SAAS,GAAG,IAAI,CAACA,SAAS;EAChC;EACA,IAAA,IAAM8M,oBAAoB,GAAG9M,SAAS,KAAKh+C,QAAQ;EACnD,IAAA,IACE,CAACg+C,SAAS,IACVnhC,GAAG,IAAImhC,SAAS,IACf8M,oBAAoB,IAAI,CAAChhC,iBAAiB,CAAC,CAAC,CAAC,EAC9C;EACA,MAAA,IAAIghC,oBAAoB,EAAE;UACxB,IAAI,CAAC5jE,GAAG,CAAA,8BAA+B,CAAC;EAC1C,MAAA;QACA,IAAI,CAAC+9D,uBAAuB,EAAE;EAC9B,MAAA,IAAI,CAACxG,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;IACF,CAAA;EAAA31D,EAAAA,MAAA,CAEU4jE,0BAA0B,GAApC,SAAUA,0BAA0BA,CAAC74D,IAAe,EAAW;EAC7D;EACA,IAAA,IAAI,IAAI,CAACusD,KAAK,KAAK7B,KAAK,CAACM,OAAO,IAAI,IAAI,CAACuB,KAAK,KAAK7B,KAAK,CAACO,MAAM,EAAE;EAC/D,MAAA,IAAM3sD,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;EACtB,MAAA,IAAM0hC,YAAY,GAAGhgC,IAAI,CAACu6B,MAA2B;QACrD,IAAM4U,YAAY,GAAG,IAAI,CAACogB,gBAAgB,CACxC,IAAI,CAAC5D,WAAW,EAChB3rB,YACF,CAAC;EACD;EACA;QACA,IAAMN,QAAQ,GAAGyP,YAAY,IAAIA,YAAY,CAACl0C,GAAG,GAAG,GAAG;EACvD,MAAA,IAAIykC,QAAQ,EAAE;EACZ,QAAA,IAAI,CAACkwB,qBAAqB,CAACzgB,YAAY,CAACl0C,GAAG,EAAE,CAAAqD,IAAI,oBAAJA,IAAI,CAAEY,QAAQ,KAAI,EAAE,CAAC;EACpE,MAAA;QACA,IAAM45D,WAAW,GAAG,CAACp5B,QAAQ;EAC7B,MAAA,IAAIo5B,WAAW,EAAE;EACf;EACA;EACA;UACA,IAAI,CAAClhE,IAAI,CAAA,6CAAA,GACuC,IAAI,CAAC+7D,eAAe,EAAE,GAAA,2BAAA,GAA4B3zB,YAAY,GAAA,SAC9G,CAAC;EACH,MAAA;EACA,MAAA,IAAI1hC,IAAI,EAAE;EACR,QAAA,IAAI,CAACitD,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACzC,QAAA,IAAI,CAACutD,gBAAgB,GAAGvtD,IAAI,CAAC9B,KAAK;EACpC,MAAA;QACA,IAAI,CAACmwD,iBAAiB,EAAE;EACxB,MAAA,OAAOmM,WAAW;EACpB,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAA;EAAA7jE,EAAAA,MAAA,CAEUqjE,mBAAmB,GAA7B,SAAUA,mBAAmBA,CAACN,UAA6B,EAAE;EAC3D,IAAA,IAAIA,UAAU,KAAK5jE,iBAAiB,CAACE,KAAK,EAAE;EAC1C;QACA,IAAI,CAAC41B,WAAW,GAAG,IAAI;EACzB,IAAA;EACA;EACA;EACA,IAAA,IAAI,CAAC,IAAI,CAACX,GAAG,CAAC2jC,gBAAgB,EAAE;QAC9B,IAAI,CAACjB,kBAAkB,GAAG,KAAK;EACjC,IAAA;EACA,IAAA,IAAI,IAAI,CAACM,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,MAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;IACF,CAAA;IAAA31D,MAAA,CAEU8jE,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAC1Bt1C,KAAiB,EACjBu1C,UAA4B,EAC5Bh5B,YAA+B,EAC/B;MACA,IAAI,CAACvc,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA;EACA;EACA,IAAA,IAAMw1C,kBAAkB,GAAGpqB,YAAY,CAACE,WAAW,CAACtrB,KAAK,CAAC;MAC1D,IAAI,CAAC8nC,eAAe,CAAC1rB,sBAAsB,CACzCm5B,UAAU,EACVC,kBAAkB,EAClBj5B,YACF,CAAC;EACD,IAAA,IAAI,IAAI,CAACusB,KAAK,KAAK7B,KAAK,CAACQ,KAAK,EAAE;QAC9B,IAAI,CAACyB,iBAAiB,EAAE;EAC1B,IAAA;IACF,CAAA;EAAA13D,EAAAA,MAAA,CAEU03D,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAI,CAAC33D,GAAG,CAAC,qBAAqB,CAAC;MAC/B,IAAI,CAACk1B,WAAW,GAAG,IAAI;MACvB,IAAI,CAAC6K,YAAY,GAAG,IAAI;EACxB,IAAA,IAAI,IAAI,CAACw3B,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,MAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;IACF,CAAA;EAAA31D,EAAAA,MAAA,CAEQ89D,uBAAuB,GAA/B,SAAQA,uBAAuBA,GAAG;EAChC;EACA;EACA,IAAA,IAAI,CAAC,IAAI,CAACxpC,GAAG,CAAC2jC,gBAAgB,EAAE;QAC9B,IAAI,CAACjB,kBAAkB,GAAG,KAAK;EAC/B,MAAA,IAAM3sD,KAAK,GAAG,IAAI,CAAC0sD,eAAe;QAClC,IAAMprC,OAAO,GAAGthB,KAAK,GAAGA,KAAK,CAACshB,OAAO,GAAG,IAAI;EAC5C,MAAA,IAAIA,OAAO,IAAA,IAAA,IAAPA,OAAO,CAAEuL,IAAI,EAAE;EACjB;UACA,IAAI,CAACn3B,GAAG,CAAA,wCAAyC,CAAC;EAClD,QAAA,IAAI,CAAC8jC,aAAa,GAAG,EAAE;UACvB,IAAI,CAAC++B,gBAAgB,CAACj3C,OAAO,EAAEA,OAAO,CAACy2B,aAAa,CAAC;UACrD,IAAI,CAACsV,iBAAiB,EAAE;EAC1B,MAAA,CAAC,MAAM;EACL,QAAA,IAAI,CAACd,gBAAgB,GAAG,IAAI,CAAC/yB,aAAa;EAC5C,MAAA;EACF,IAAA;IACF,CAAA;EAAA7jC,EAAAA,MAAA,CAEUikE,uBAAuB,GAAjC,SAAUA,uBAAuBA,CAACxH,SAAmC,EAAE;MACrE,IAAI,CAAC18D,GAAG,CAAA,6CAAA,GACwC08D,SAAS,CAACnzD,EAAE,GAAA,MAAA,GAAO,IAAI,CAAC0wD,aAAa,EAAE,GAAA,GAAA,IAAIyC,SAAS,CAACpyD,KAAK,KAAK,EAAE,GAAG,WAAW,GAAGoyD,SAAS,CAACpyD,KAAK,CAAA,GAAA,oCACjJ,CAAC;MACD,IAAI,CAAC65D,qBAAqB,EAAE;MAC5B,IAAI,CAACpG,uBAAuB,EAAE;MAC9B,IAAI,CAACpG,iBAAiB,EAAE;IAC1B,CAAA;EAAA13D,EAAAA,MAAA,CAEUkkE,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAAC38D,KAAa,EAAM;EAAA,IAAA,IAAnBA,KAAa,KAAA,MAAA,EAAA;EAAbA,MAAAA,KAAa,GAAG,CAAC;EAAA,IAAA;EAC/C,IAAA,IAAI,CAAC+uD,eAAe,CAACnpB,sBAAsB,CACzC5lC,KAAK,EACLsR,QAAQ,EACR,IAAI,CAACkyB,YAAY,EACjB,KAAK,EACL,IACF,CAAC;IACH,CAAA;EAAA/qC,EAAAA,MAAA,CAEQm+D,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvB90D,IAAmB,EACnB6iB,IAAiB,EACjB7hB,KAAY,EACZgC,OAAgB,EAChB;EAAA,IAAA,IAAA83D,MAAA,GAAA,IAAA;EACA,IAAA,IAAMx4C,OAAO,GAAGthB,KAAK,CAACshB,OAAO;MAC7B,IAAI,CAACA,OAAO,EAAE;EACZ,MAAA,IAAI,CAAChpB,IAAI,CAAC,yBAAyB,CAAC;EACpC,MAAA;EACF,IAAA;EACA,IAAA,IAAMo4C,MAAM,GAAGh2C,MAAM,CAAChB,IAAI,CAACsF,IAAI,CAACR,iBAAiB,CAAC,CAACoQ,MAAM,CACvD,UAACtJ,MAAM,EAAEvM,IAAI,EAAK;EAChB,MAAA,IAAMR,IAAI,GAAGyG,IAAI,CAACR,iBAAiB,CAACzF,IAAI,CAAC;EACzC,MAAA,IAAIR,IAAI,EAAE;UACR,IAAMwhE,cAAc,GAAGxhE,IAAI,CAAC4H,MAAM,GAAG5H,IAAI,CAAC2H,QAAQ;UAClD,IAAI65D,cAAc,IAAI,CAAC,EAAE;EACvB;EACA;EACA;YACAD,MAAI,CAACxhE,IAAI,CAAA,2BAAA,GACqB0G,IAAI,CAACC,EAAE,GAAA,GAAA,GAAIlG,IAAI,GAAA,sBAAA,GAAuBghE,cAAc,GAAA,GAClF,CAAC;YACD,OAAOz0D,MAAM,IAAI,KAAK;EACxB,QAAA;EACA,QAAA,IAAMmhD,KAAK,GAAGzkD,OAAM,GAChB,CAAA,GACAqkD,gBAAgB,CACd/kC,OAAO,EACPtiB,IAAI,EACJzG,IAAI,CAAC2H,QAAQ,EACb3H,IAAI,CAAC4H,MAAM,EACX5H,IAAI,CAAC6H,QAAQ,EACb7H,IAAI,CAAC8H,MAAM,EACXy5D,MACF,CAAC;UACLA,MAAI,CAAC7vC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACwlE,iBAAiB,EAAE;EACzC14C,UAAAA,OAAO,EAAPA,OAAO;EACPthB,UAAAA,KAAK,EAALA,KAAK;EACLymD,UAAAA,KAAK,EAALA,KAAK;EACL1tD,UAAAA,IAAI,EAAJA,IAAI;EACJiG,UAAAA,IAAI,EAAJA,IAAI;YACJ9B,KAAK,EAAE3E,IAAI,CAAC2H,QAAQ;YACpB9C,GAAG,EAAE7E,IAAI,CAAC4H;EACZ,SAAC,CAAC;EACF,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,OAAOmF,MAAM;MACf,CAAC,EACD,KACF,CAAC;MACD,IAAI,CAACorC,MAAM,EAAE;EAAA,MAAA,IAAAupB,gBAAA;EACX,MAAA,IAAIj6D,KAAK,CAACqiB,aAAa,KAAK,CAAC,EAAE;EAC7B;EACA,QAAA,IAAI,CAAC42C,UAAU,CAACj6D,IAAI,EAAEgB,KAAK,CAAC;EAC9B,MAAA;QACA,IAAI,CAAA,CAAAi6D,gBAAA,GAAA,IAAI,CAAC9N,UAAU,KAAA,IAAA,GAAA,MAAA,GAAf8N,gBAAA,CAAiBpnE,KAAK,MAAK,IAAI,EAAE;EACnC,QAAA,IAAMA,KAAK,GAAG,IAAIgrB,KAAK,CAAA,6BAAA,GACS7e,IAAI,CAACC,EAAE,GAAA,MAAA,GAAO,IAAI,CAAC0wD,aAAa,EAAE,GAAA,GAAA,GAAI3wD,IAAI,CAACgB,KAAK,yDAChF,CAAC;EACD,QAAA,IAAI,CAAC1H,IAAI,CAACzF,KAAK,CAACsrC,OAAO,CAAC;UACxB,IAAI,CAAClU,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;YAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;YAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;EACxCvK,UAAAA,KAAK,EAAE,KAAK;EACZp9B,UAAAA,KAAK,EAALA,KAAK;EACLmM,UAAAA,IAAI,EAAJA,IAAI;EACJ+nB,UAAAA,MAAM,EAAA,wBAAA,GAA2B/nB,IAAI,CAACC,EAAE,GAAA,MAAA,GAAO,IAAI,CAAC0wD,aAAa,EAAE,GAAA,KAAA,GAAK3vD,KAAK,CAAClN,GAAG,GAAA;EACnF,SAAC,CAAC;EACF,QAAA,IAAI,CAAC,IAAI,CAACm3B,GAAG,EAAE;EACb,UAAA;EACF,QAAA;UACA,IAAI,CAACokC,eAAe,EAAE;EACxB,MAAA;EACA;EACF,IAAA;EACA,IAAA,IAAI,CAACpB,KAAK,GAAG7B,KAAK,CAACO,MAAM;EACzB,IAAA,IAAI,CAACj2D,GAAG,CAAA,SAAA,GACIsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQiG,IAAI,CAACC,EAAE,IAChC4iB,IAAI,GAAG,SAAS,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAC,CAAA,GAAA,MAAA,GAC5B,IAAI,CAACmsD,QAAQ,CAACxwD,IAAI,EAAE,KAAK,EAAE6iB,IAAI,CAAC,MACzC,CAAC;MACD,IAAI,CAACoI,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC0lE,WAAW,EAAE;EAAEl7D,MAAAA,IAAI,EAAJA,IAAI;EAAE6iB,MAAAA,IAAI,EAAJA;EAAK,KAAC,CAAC;IACtD,CAAA;EAAAlsB,EAAAA,MAAA,CAEQg6D,aAAa,GAArB,SAAQA,aAAaA,GAAG;MACtB,OAAO,IAAI,CAACjvB,YAAY,KAAK5rC,iBAAiB,CAACC,IAAI,GAAG,OAAO,GAAG,OAAO;IACzE,CAAA;IAAAY,MAAA,CAEQ65D,QAAQ,GAAhB,SAAQA,QAAQA,CACdxwD,IAAc,EACd2S,GAAY,EACZkQ,IAAkB,EACV;MAAA,IAAAkP,KAAA,EAAA0M,KAAA;EAAA,IAAA,IAFR9rB,GAAY,KAAA,MAAA,EAAA;EAAZA,MAAAA,GAAY,GAAG,IAAI;EAAA,IAAA;EAGnB,IAAA,OAAU,IAAI,CAACg+C,aAAa,EAAE,GAAA,GAAA,GAAI3wD,IAAI,CAACgB,KAAK,WAAK6hB,IAAI,GAAG,MAAM,GAAG,MAAM,WAAK,CAAA,CAAAkP,KAAA,GAAEpf,GAAG,IAAI,CAACkQ,IAAI,GAAG7iB,IAAI,CAACkB,QAAQ,GAAG,CAAC2hB,IAAI,IAAI7iB,IAAI,EAAE9B,KAAK,KAAA,IAAA,GAAA6zB,KAAA,GAAKjkB,GAAG,EAAE6gB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA,GAAI,CAAA,CAAA8P,KAAA,GACtJ9rB,GAAG,IAAI,CAACkQ,IAAI,GAAG7iB,IAAI,CAACmB,MAAM,GAAG,CAAC0hB,IAAI,IAAI7iB,IAAI,EAAE5B,GAAG,KAAA,IAAA,GAAAqgC,KAAA,GAAK3wB,GAAE,EACvD6gB,OAAO,CACP,CACF,CAAC,GAAA,GAAA,IAAI9L,IAAI,IAAI7iB,IAAI,CAACjG,IAAI,KAAK,MAAM,GAAG,cAAc,IAAI8oB,IAAI,CAACre,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;IAC7F,CAAA;IAAA7N,MAAA,CAEQsjE,UAAU,GAAlB,SAAQA,UAAUA,CAACj6D,IAAmB,EAAEgB,KAAa,EAAE;EACrD,IAAA,IAAIA,KAAK,EAAE;QACTA,KAAK,CAACqiB,aAAa,EAAE;EACvB,IAAA;MACArjB,IAAI,CAAC+B,GAAG,GAAG,IAAI;EACf,IAAA,IAAI,CAACkrD,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;MACzC,IAAI,CAACitD,eAAe,CAACpqB,YAAY,CAAC7iC,IAAI,EAAE,IAAI,CAAC;IAC/C,CAAA;EAAArJ,EAAAA,MAAA,CAEU04D,eAAe,GAAzB,SAAUA,eAAeA,GAAG;EAAA,IAAA,IAAA8L,iBAAA;MAC1B,CAAAA,iBAAA,OAAI,CAAChO,UAAU,aAAfgO,iBAAA,CAAiB1wB,KAAK,EAAE;IAC1B,CAAA;EAAA9zC,EAAAA,MAAA,CAEUykE,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAAC15D,IAAe,EAAE;EAC5C,IAAA,IAAIA,IAAI,CAACovB,KAAK,KAAK,eAAe,EAAE;EAClC,MAAA,IAAI,CAACm8B,eAAe,CAACxpB,kBAAkB,EAAE;QACzC,IAAI,IAAI,CAAC0pB,UAAU,EAAE;EACnB,QAAA,IAAI,CAACA,UAAU,CAACt0D,OAAO,EAAE;UACzB,IAAI,CAACs0D,UAAU,GAAG,IAAI;EACxB,MAAA;QACA,IAAI,CAACsH,uBAAuB,EAAE;QAC9B,IAAI,CAACpG,iBAAiB,EAAE;EAC1B,IAAA;IACF,CAAA;IAAA,OAAAv1D,YAAA,CAAAi0D,oBAAA,EAAA,CAAA;MAAAh0D,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAn/DA,SAAAA,GAAAA,GAAwC;EACtC,MAAA,IAAQu0D,gBAAgB,GAAoB,IAAI,CAAxCA,gBAAgB;UAAE/yB,aAAa,GAAK,IAAI,CAAtBA,aAAa;EACvC,MAAA,IAAIA,aAAa,KAAK,EAAE,IAAI+yB,gBAAgB,EAAE;EAC5C,QAAA,OAAOA,gBAAgB;EACzB,MAAA;EACA,MAAA,OAAO/yB,aAAa;EACtB,IAAA;EAAA,GAAA,EAAA;MAAAzhC,GAAA,EAAA,kBAAA;MAAAC,GAAA,EAEA,SAAAA,GAAAA,GAAuC;QACrC,OAAO,IAAI,CAACsF,SAAS;EACvB,IAAA;EAAA,GAAA,EAAA;MAAAvF,GAAA,EAAA,cAAA;MAAAC,GAAA,EAUA,SAAAA,GAAAA,GAAwC;QACtC,OAAO;UAAEgH,IAAI,EAAE,IAAI,CAAC4rB,WAAW;UAAEqiC,KAAK,EAAE,IAAI,CAACA;SAAO;EACtD,IAAA;EAAA,GAAA,EAAA;MAAAl1D,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAoEA,SAAAA,GAAAA,GAAuC;EACrC,MAAA,IAAMqiE,wBAAwB,GAAG,IAAI,CAACz5C,MAAM,CAAC8tC,cAAc;EAC3D,MAAA,IAAI2L,wBAAwB,EAAE;EAAA,QAAA,IAAAC,qBAAA;EAC5B,QAAA,OACE,CAAA,CAAAA,qBAAA,GAAA,IAAI,CAAC3M,eAAe,EAAE,KAAA,IAAA,GAAA,MAAA,GAAtB2M,qBAAA,CAAwBrjB,qBAAqB,KAC7CojB,wBAAuB;EAE3B,MAAA;EACA,MAAA,OAAO,CAAC;EACV,IAAA;EAAA,GAAA,EAAA;MAAAtiE,GAAA,EAAA,iBAAA;MAAAC,GAAA,EA4oCA,SAAAA,GAAAA,GAAyC;EACvC,MAAA,IAAI8+D,oBAAoB,CAAC,IAAI,CAACl2C,MAAM,CAAC,EAAE;EAAA,QAAA,IAAA25C,qBAAA;EACrC,QAAA,IAAMC,mBAAmB,GAAA,CAAAD,qBAAA,GACvB,IAAI,CAACtwC,GAAG,CAAC+sC,oBAAoB,KAAA,IAAA,IAAA,CAAAuD,qBAAA,GAA7BA,qBAAA,CAA+BE,WAAW,KAAA,IAAA,GAAA,MAAA,GAA1CF,qBAAA,CAA4CzqC,KAAK;EACnD,QAAA,IAAI0qC,mBAAmB,EAAE;EACvB,UAAA,OAAO,IAAI;EACb,QAAA;EACF,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAAA,GAAA,EAAA;MAAAziE,GAAA,EAAA,OAAA;MAAAC,GAAA,EAqwBA,SAAAA,GAAAA,GAAgD;QAC9C,OAAO,IAAI,CAACo0D,MAAM;MACpB,CAAA;EAAAztD,IAAAA,GAAA,EAVA,SAAAA,GAAAA,CAAU+7D,SAA6C,EAAE;EACvD,MAAA,IAAMC,aAAa,GAAG,IAAI,CAACvO,MAAM;QACjC,IAAIuO,aAAa,KAAKD,SAAS,EAAE;UAC/B,IAAI,CAACtO,MAAM,GAAGsO,SAAS;EACvB,QAAA,IAAI,CAAChlE,GAAG,CAAIilE,aAAa,GAAA,IAAA,GAAKD,SAAW,CAAC;EAC5C,MAAA;EACF,IAAA;EAAA,GAAA,CAAA,CAAA;EAAA,CAAA,CAxlEQxsB,QAAO,CAAA;EA+lEjB,SAAS4oB,oBAAoBA,CAACl2C,MAAiB,EAAW;EACxD,EAAA,OAEE,CAAC,CAACA,MAAM,CAACg6C,uBAAuB,IAChCh6C,MAAM,CAACi6C,0BAA0B,KAAK,KAAI;EAE9C;;MCpsEqBC,UAAU,gBAAA,YAAA;EAAA,EAAA,SAAAA,UAAAA,GAAA;MAAA,IAAA,CACrBC,MAAM,GAAmC,EAAE;MAAA,IAAA,CAC5CC,UAAU,GAAW,CAAC;EAAA,EAAA;EAAA,EAAA,IAAArlE,MAAA,GAAAmlE,UAAA,CAAAllE,SAAA;EAAAD,EAAAA,MAAA,CAE7B+O,IAAI,GAAJ,SAAAA,IAAIA,CAACu2D,KAA8B,EAAE;EACnC,IAAA,IAAI,CAACF,MAAM,CAACr2D,IAAI,CAACu2D,KAAK,CAAC;EACvB,IAAA,IAAI,CAACD,UAAU,IAAIC,KAAK,CAACpgE,MAAM;IACjC,CAAC;EAAAlF,EAAAA,MAAA,CAED6zC,KAAK,GAAL,SAAAA,KAAKA,GAA4B;EAC/B,IAAA,IAAQuxB,MAAM,GAAiB,IAAI,CAA3BA,MAAM;QAAEC,UAAU,GAAK,IAAI,CAAnBA,UAAU;EAC1B,IAAA,IAAI11D,MAA+B;EACnC,IAAA,IAAI,CAACy1D,MAAM,CAAClgE,MAAM,EAAE;EAClB,MAAA,OAAO,IAAIyB,UAAU,CAAC,CAAC,CAAC;EAC1B,IAAA,CAAC,MAAM,IAAIy+D,MAAM,CAAClgE,MAAM,KAAK,CAAC,EAAE;EAC9ByK,MAAAA,MAAM,GAAGy1D,MAAM,CAAC,CAAC,CAAC;EACpB,IAAA,CAAC,MAAM;EACLz1D,MAAAA,MAAM,GAAG41D,iBAAiB,CAACH,MAAM,EAAEC,UAAU,CAAC;EAChD,IAAA;MACA,IAAI,CAACvxB,KAAK,EAAE;EACZ,IAAA,OAAOnkC,MAAM;IACf,CAAC;EAAA3P,EAAAA,MAAA,CAED8zC,KAAK,GAAL,SAAAA,KAAKA,GAAG;EACN,IAAA,IAAI,CAACsxB,MAAM,CAAClgE,MAAM,GAAG,CAAC;MACtB,IAAI,CAACmgE,UAAU,GAAG,CAAC;IACrB,CAAC;EAAA,EAAA,OAAAF,UAAA;EAAA,CAAA,EAAA;EAGH,SAASI,iBAAiBA,CACxBH,MAAsC,EACtCC,UAAkB,EACO;EACzB,EAAA,IAAM11D,MAAM,GAAG,IAAIhJ,UAAU,CAAC0+D,UAAU,CAAC;IACzC,IAAI/1D,MAAM,GAAG,CAAC;EACd,EAAA,KAAK,IAAIlJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGg/D,MAAM,CAAClgE,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,IAAA,IAAMk/D,KAAK,GAAGF,MAAM,CAACh/D,CAAC,CAAC;EACvBuJ,IAAAA,MAAM,CAAC3G,GAAG,CAACs8D,KAAK,EAAEh2D,MAAM,CAAC;MACzBA,MAAM,IAAIg2D,KAAK,CAACpgE,MAAM;EACxB,EAAA;EACA,EAAA,OAAOyK,MAAM;EACf;;ECzCA;;;;;;;;;;;;EAYM,SAAU61D,WAAWA,CAACz6D,IAAgB,EAAEuE,MAAc,EAAA;EAC3D;;;EAGA,EAAA,IAAIA,MAAM,GAAG,EAAE,IAAIvE,IAAI,CAAC7F,MAAM,EAAE;EAC/B;MACA,IACC6F,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IACrBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,IACzBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EACxB;EACD;EACA,MAAA,IAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;EACvD;EACA,QAAA,IACCvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,EACtB;EACD,UAAA,OAAO,IAAI;EACZ,QAAA;EACD,MAAA;EACD,IAAA;EACD,EAAA;EAEA,EAAA,OAAO,KAAK;EACb;;ECvCA;;;;;;;;;;;;EAYM,SAAUm2D,WAAWA,CAAC16D,IAAgB,EAAEuE,MAAc,EAAA;EAC3D;;;;;;;;;;;;;EAaA,EAAA,IAAIA,MAAM,GAAG,EAAE,IAAIvE,IAAI,CAAC7F,MAAM,EAAE;EAC/B;MACA,IACC6F,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IACrBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,IACzBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EACxB;EACD;EACA,MAAA,IAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;EACvD;EACA,QAAA,IACCvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,IACvBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,EACtB;EACD,UAAA,OAAO,IAAI;EACZ,QAAA;EACD,MAAA;EACD,IAAA;EACD,EAAA;EACA,EAAA,OAAO,KAAK;EACb;;EChDA;;;;;;;;;;;;EAYM,SAAUo2D,WAAWA,CAAC36D,IAAgB,EAAEuE,MAAc,EAAA;IAC3D,IAAIO,IAAI,GAAG,CAAC;IACZA,IAAI,GAAG,CAAC9E,IAAI,CAACuE,MAAM,CAAC,GAAG,IAAI,KAAK,EAAE;IAClCO,IAAI,IAAI,CAAC9E,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE;IACvCO,IAAI,IAAI,CAAC9E,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;IACtCO,IAAI,IAAI9E,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EAC/B,EAAA,OAAOO,IAAI;EACZ;;ECfA;;;;;;;;;;;;;EAaM,SAAU81D,UAAUA,CACzB56D,IAAgB,EAChBuE,MAAc,EAAA;IAEd,IAAMs2D,KAAK,GAAGt2D,MAAM;IACpB,IAAIpK,MAAM,GAAG,CAAC;EAEd,EAAA,OAAOugE,WAAW,CAAC16D,IAAI,EAAEuE,MAAM,CAAC,EAAE;EACjC;EACApK,IAAAA,MAAM,IAAI,EAAE;MAEZ,IAAM2K,IAAI,GAAG61D,WAAW,CAAC36D,IAAI,EAAEuE,MAAM,GAAG,CAAC,CAAC;EAC1CpK,IAAAA,MAAM,IAAI2K,IAAI;MAEd,IAAI21D,WAAW,CAACz6D,IAAI,EAAEuE,MAAM,GAAG,EAAE,CAAC,EAAE;EACnC;EACApK,MAAAA,MAAM,IAAI,EAAE;EACb,IAAA;EAEAoK,IAAAA,MAAM,IAAIpK,MAAM;EACjB,EAAA;IAEA,IAAIA,MAAM,GAAG,CAAC,EAAE;MACf,OAAO6F,IAAI,CAACkF,QAAQ,CAAC21D,KAAK,EAAEA,KAAK,GAAG1gE,MAAM,CAAC;EAC5C,EAAA;EAEA,EAAA,OAAOd,SAAS;EACjB;;EChBO,SAASyhE,cAAcA,CAC5BC,QAAyB,EACzB/6D,IAAgB,EAChBuE,MAAc,EACdy2D,aAAiC,EACb;EACpB,EAAA,IAAMC,iBAAiB,GAAG,CACxB,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAC3E,IAAI,EAAE,IAAI,CACX;EACD,EAAA,IAAMC,KAAK,GAAGl7D,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC;EAC9B,EAAA,IAAM42D,iBAAiB,GAAID,KAAK,IAAI,CAAC,GAAI,GAAG;IAC5C,IAAIC,iBAAiB,GAAG,EAAE,EAAE;EAC1B,IAAA,IAAMhpE,KAAK,GAAG,IAAIgrB,KAAK,CAAA,8BAAA,GAAgCg+C,iBAAmB,CAAC;MAC3EJ,QAAQ,CAACK,IAAI,CAACtnE,MAAM,CAACk7B,KAAK,EAAEl7B,MAAM,CAACk7B,KAAK,EAAE;QACxC32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;QAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;EACxCvK,MAAAA,KAAK,EAAE,IAAI;EACXp9B,MAAAA,KAAK,EAALA,KAAK;QACLk0B,MAAM,EAAEl0B,KAAK,CAACsrC;EAChB,KAAC,CAAC;EACF,IAAA;EACF,EAAA;EACA;IACA,IAAM49B,cAAc,GAAG,CAAEH,KAAK,IAAI,CAAC,GAAI,GAAG,IAAI,CAAC;EAC/C,EAAA,IAAMI,YAAY,GAAKt7D,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,GAAG,GAAK,CAAC22D,KAAK,GAAG,CAAC,KAAK,CAAE;EACzE,EAAA,IAAM1zD,KAAK,GAAG,UAAU,GAAG6zD,cAAc;EACzC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE;EACA,EAAA,IAAME,UAAU,GAAGN,iBAAiB,CAACE,iBAAiB,CAAC;IACvD,IAAIK,cAAc,GAAGL,iBAAiB;EACtC,EAAA,IAAIE,cAAc,KAAK,CAAC,IAAIA,cAAc,KAAK,EAAE,EAAE;EACjD;EACA;EACA;EACAG,IAAAA,cAAc,IAAI,CAAC;EACrB,EAAA;IACA,IAAMt7C,MAAwB,GAAG,CAC9Bm7C,cAAc,IAAI,CAAC,GAAK,CAACG,cAAc,GAAG,IAAI,KAAK,CAAE,EACrD,CAACA,cAAc,GAAG,IAAI,KAAK,CAAC,GAAKF,YAAY,IAAI,CAAE,CACrD;EACD7jE,EAAAA,MAAM,CAACzC,GAAG,CAAA,iBAAA,GACUgmE,aAAa,uBAAkBxzD,KAAK,GAAA,aAAA,GAAc8zD,YAAY,GAAA,SAAA,GAAUC,UAAU,GAAA,qBAAA,GAAsBF,cAAc,GAAA,kBAAA,GAAmBF,iBAAiB,MAC9K,CAAC;IACD,OAAO;EACLj7C,IAAAA,MAAM,EAANA,MAAM;EACNq7C,IAAAA,UAAU,EAAVA,UAAU;EACVD,IAAAA,YAAY,EAAZA,YAAY;EACZ9zD,IAAAA,KAAK,EAALA,KAAK;EACLgT,IAAAA,WAAW,EAAEhT,KAAK;EAClBwzD,IAAAA,aAAa,EAAbA;KACD;EACH;EAEO,SAASS,iBAAeA,CAACz7D,IAAgB,EAAEuE,MAAc,EAAW;EACzE,EAAA,OAAOvE,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IAAI,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI;EACpE;EAEO,SAASm3D,eAAeA,CAAC17D,IAAgB,EAAEuE,MAAc,EAAU;IACxE,OAAOvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;EACxC;EAEO,SAASo3D,kBAAkBA,CAAC37D,IAAgB,EAAEuE,MAAc,EAAU;EAC3E,EAAA,OACG,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAC/BvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAE,GACtB,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,CAAE;EAErC;EAEO,SAASq3D,iBAAiBA,CAAC57D,IAAgB,EAAEuE,MAAc,EAAW;EAC3E,EAAA,OAAOA,MAAM,GAAG,CAAC,GAAGvE,IAAI,CAAC7F,MAAM;EACjC;EAEO,SAAS0hE,UAAQA,CAAC77D,IAAgB,EAAEuE,MAAc,EAAW;EAClE;EACA;EACA;EACA,EAAA,OAAOA,MAAM,GAAG,CAAC,GAAGvE,IAAI,CAAC7F,MAAM,IAAIshE,iBAAe,CAACz7D,IAAI,EAAEuE,MAAM,CAAC;EAClE;EAEO,SAASu3D,UAAQA,CAAC97D,IAAgB,EAAEuE,MAAc,EAAW;IAClE,OACEq3D,iBAAiB,CAAC57D,IAAI,EAAEuE,MAAM,CAAC,IAC/Bk3D,iBAAe,CAACz7D,IAAI,EAAEuE,MAAM,CAAC,IAC7Bo3D,kBAAkB,CAAC37D,IAAI,EAAEuE,MAAM,CAAC,IAAIvE,IAAI,CAAC7F,MAAM,GAAGoK,MAAM;EAE5D;EAEO,SAASw3D,OAAKA,CAAC/7D,IAAgB,EAAEuE,MAAc,EAAW;EAC/D;EACA;EACA,EAAA,IAAIs3D,UAAQ,CAAC77D,IAAI,EAAEuE,MAAM,CAAC,EAAE;EAC1B;EACA,IAAA,IAAMy3D,YAAY,GAAGN,eAAe,CAAC17D,IAAI,EAAEuE,MAAM,CAAC;EAClD,IAAA,IAAIA,MAAM,GAAGy3D,YAAY,IAAIh8D,IAAI,CAAC7F,MAAM,EAAE;EACxC,MAAA,OAAO,KAAK;EACd,IAAA;EACA;EACA,IAAA,IAAM8hE,WAAW,GAAGN,kBAAkB,CAAC37D,IAAI,EAAEuE,MAAM,CAAC;MACpD,IAAI03D,WAAW,IAAID,YAAY,EAAE;EAC/B,MAAA,OAAO,KAAK;EACd,IAAA;EAEA,IAAA,IAAME,SAAS,GAAG33D,MAAM,GAAG03D,WAAW;MACtC,OAAOC,SAAS,KAAKl8D,IAAI,CAAC7F,MAAM,IAAI0hE,UAAQ,CAAC77D,IAAI,EAAEk8D,SAAS,CAAC;EAC/D,EAAA;EACA,EAAA,OAAO,KAAK;EACd;EAEO,SAASC,eAAeA,CAC7Bj1D,KAAwB,EACxB6zD,QAAyB,EACzB/6D,IAAgB,EAChBuE,MAAc,EACdkY,UAA8B,EAC9B;EACA,EAAA,IAAI,CAACvV,KAAK,CAACq0D,UAAU,EAAE;MACrB,IAAMr7C,MAAM,GAAG46C,cAAc,CAACC,QAAQ,EAAE/6D,IAAI,EAAEuE,MAAM,EAAEkY,UAAU,CAAC;MACjE,IAAI,CAACyD,MAAM,EAAE;EACX,MAAA;EACF,IAAA;EACA/nB,IAAAA,QAAA,CAAc+O,KAAK,EAAEgZ,MAAM,CAAC;EAC9B,EAAA;EACF;EAEO,SAASk8C,gBAAgBA,CAACb,UAAkB,EAAU;EAC3D,EAAA,OAAQ,IAAI,GAAG,KAAK,GAAIA,UAAU;EACpC;EAEO,SAASc,gBAAgBA,CAC9Br8D,IAAgB,EAChBuE,MAAc,EACM;EACpB;EACA,EAAA,IAAMy3D,YAAY,GAAGN,eAAe,CAAC17D,IAAI,EAAEuE,MAAM,CAAC;EAClD,EAAA,IAAIA,MAAM,GAAGy3D,YAAY,IAAIh8D,IAAI,CAAC7F,MAAM,EAAE;EACxC;MACA,IAAM8hE,WAAW,GAAGN,kBAAkB,CAAC37D,IAAI,EAAEuE,MAAM,CAAC,GAAGy3D,YAAY;MACnE,IAAIC,WAAW,GAAG,CAAC,EAAE;EACnB;QACA,OAAO;EAAED,QAAAA,YAAY,EAAZA,YAAY;EAAEC,QAAAA,WAAW,EAAXA;SAAa;EACtC,IAAA;EACF,EAAA;EACF;EAEO,SAASK,aAAWA,CACzBp1D,KAAwB,EACxBlH,IAAgB,EAChBuE,MAAc,EACd0M,GAAW,EACXsrD,UAAkB,EACN;EACZ,EAAA,IAAMC,aAAa,GAAGJ,gBAAgB,CAACl1D,KAAK,CAACq0D,UAAoB,CAAC;EAClE,EAAA,IAAMkB,KAAK,GAAGxrD,GAAG,GAAGsrD,UAAU,GAAGC,aAAa;EAC9C,EAAA,IAAME,MAAM,GAAGL,gBAAgB,CAACr8D,IAAI,EAAEuE,MAAM,CAAC;EAC7C,EAAA,IAAIo4D,IAAgB;EACpB,EAAA,IAAID,MAAM,EAAE;EACV,IAAA,IAAQT,WAAW,GAAmBS,MAAM,CAApCT,WAAW;QAAED,YAAY,GAAKU,MAAM,CAAvBV,YAAY;EACjC,IAAA,IAAM7hE,OAAM,GAAG6hE,YAAY,GAAGC,WAAW;EACzC,IAAA,IAAMW,OAAO,GAAG1pE,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE+N,MAAM,GAAGpK,OAAM,GAAG6F,IAAI,CAAC7F,MAAM,CAAC;EAC1D;EACA,IAAA,IAAIyiE,OAAO,EAAE;EACXD,MAAAA,IAAI,GAAG,IAAI/gE,UAAU,CAACzB,OAAM,GAAG6hE,YAAY,CAAC;EAC5CW,MAAAA,IAAI,CAAC1+D,GAAG,CAAC+B,IAAI,CAACkF,QAAQ,CAACX,MAAM,GAAGy3D,YAAY,EAAEh8D,IAAI,CAAC7F,MAAM,CAAC,EAAE,CAAC,CAAC;EAChE,IAAA,CAAC,MAAM;EACLwiE,MAAAA,IAAI,GAAG38D,IAAI,CAACkF,QAAQ,CAACX,MAAM,GAAGy3D,YAAY,EAAEz3D,MAAM,GAAGpK,OAAM,CAAC;EAC9D,IAAA;EAEA,IAAA,IAAMhF,OAAmB,GAAG;EAC1BwnE,MAAAA,IAAI,EAAJA,IAAI;EACJ1rD,MAAAA,GAAG,EAAEwrD;OACN;MACD,IAAI,CAACG,OAAO,EAAE;EACZ11D,MAAAA,KAAK,CAACkI,OAAO,CAACpL,IAAI,CAAC7O,OAAqB,CAAC;EAC3C,IAAA;MAEA,OAAO;EAAEA,MAAAA,MAAM,EAANA,OAAM;EAAEgF,MAAAA,MAAM,EAANA,OAAM;EAAEyiE,MAAAA,OAAO,EAAPA;OAAS;EACpC,EAAA;EACA;EACA,EAAA,IAAMziE,MAAM,GAAG6F,IAAI,CAAC7F,MAAM,GAAGoK,MAAM;EACnCo4D,EAAAA,IAAI,GAAG,IAAI/gE,UAAU,CAACzB,MAAM,CAAC;EAC7BwiE,EAAAA,IAAI,CAAC1+D,GAAG,CAAC+B,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEvE,IAAI,CAAC7F,MAAM,CAAC,EAAE,CAAC,CAAC;EAC/C,EAAA,IAAMhF,MAAmB,GAAG;EAC1BwnE,IAAAA,IAAI,EAAJA,IAAI;EACJ1rD,IAAAA,GAAG,EAAEwrD;KACN;IACD,OAAO;EAAEtnE,IAAAA,MAAM,EAANA,MAAM;EAAEgF,IAAAA,MAAM,EAANA,MAAM;EAAEyiE,IAAAA,OAAO,EAAE;KAAI;EACxC;;ECrPA;;;;;;;;;;;;EAYM,SAAUC,WAAWA,CAAC78D,IAAgB,EAAEuE,MAAc,EAAA;IAC3D,OACCm2D,WAAW,CAAC16D,IAAI,EAAEuE,MAAM,CAAC,IACzBo2D,WAAW,CAAC36D,IAAI,EAAEuE,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,IAAIvE,IAAI,CAAC7F,MAAM,GAAGoK,MAAM;EAE5D;;ECTM,SAAUu4D,aAAaA,CAAC3oD,IAA8B,EAAA;IAC3D,IAAIA,IAAI,YAAYD,WAAW,EAAE;EAChC,IAAA,OAAOC,IAAI;EACZ,EAAA,CAAC,MACI;EACJ,IAAA,IAAIA,IAAI,CAACxF,UAAU,IAAI,CAAC,IAAIwF,IAAI,CAACxS,UAAU,IAAIwS,IAAI,CAACpY,MAAM,CAAC4F,UAAU,EAAE;EACtE;QACA,OAAOwS,IAAI,CAACpY,MAAqB;EAClC,IAAA;EACA;EACA;EACA;EACA,IAAA,OAAO,IAAIH,UAAU,CAACuY,IAAI,CAAC,CAACpY,MAAM;EACnC,EAAA;EACD;;ECzBM,SAAUghE,OAAOA,CACtB/8D,IAAkB,EAClBuE,MAAA,EACApK,MAAA,EAAyB;EAAA,EAAA,IADzBoK,MAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,MAAA,GAAiB,CAAC;EAAA,EAAA;EAAA,EAAA,IAClBpK,MAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,MAAA,GAAiB2T,QAAQ;EAAA,EAAA;IAEzB,OAAOqG,IAAI,CAACnU,IAAI,EAAEuE,MAAM,EAAEpK,MAAM,EAAEyB,UAAU,CAAC;EAC9C;EAEA,SAASuY,IAAIA,CACZnU,IAAkB,EAClBuE,MAAc,EACdpK,MAAc,EACd6iE,IAAyE,EAAA;EAEzE,EAAA,IAAMjhE,MAAM,GAAGkhE,oBAAoB,CAACj9D,IAAI,CAAC;IACzC,IAAIk9D,eAAe,GAAQ,CAAC;IAC5B,IAAI,mBAAmB,IAAIF,IAAI,EAAE;MAChCE,eAAe,GAAGF,IAAI,CAACG,iBAAiB;EACzC,EAAA;EACA;IACA,IAAMltD,UAAU,GAAGmtD,iBAAiB,CAACp9D,IAAI,CAAC,GAAGA,IAAI,CAAC2O,UAAU,GAAG,CAAC;IAChE,IAAM0uD,OAAO,GAAG,CAAEptD,UAAU,GAAIjQ,IAAI,CAAC2B,UAAU,IAAIu7D,eAAe;EAClE;EACA,EAAA,IAAMI,QAAQ,GAAG,CAAErtD,UAAU,GAAI1L,MAAM,IAAI24D,eAAe;IAC1D,IAAM1gE,KAAK,GAAGtJ,IAAI,CAACE,KAAK,CAACF,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEtD,IAAI,CAAC+D,GAAG,CAACqmE,QAAQ,EAAED,OAAO,CAAC,CAAC,CAAC;EAClE;IACA,IAAM3gE,GAAG,GAAGxJ,IAAI,CAACE,KAAK,CAACF,IAAI,CAAC+D,GAAG,CAACuF,KAAK,GAAGtJ,IAAI,CAACsD,GAAG,CAAC2D,MAAM,EAAE,CAAC,CAAC,EAAEkjE,OAAO,CAAC,CAAC;IACtE,OAAO,IAAIL,IAAI,CAACjhE,MAAqB,EAAES,KAAK,EAAEE,GAAG,GAAGF,KAAK,CAAC;EAC3D;EAEA,SAASygE,oBAAoBA,CAAC9oD,IAAkB,EAAA;IAC/C,IAAIA,IAAI,YAAYD,WAAW,EAAE;EAChC,IAAA,OAAOC,IAAI;EACZ,EAAA,CAAC,MACI;MACJ,OAAOA,IAAI,CAACpY,MAAM;EACnB,EAAA;EACD;EAEA,SAASqhE,iBAAiBA,CAACG,GAAQ,EAAA;EAClC,EAAA,OAAOA,GAAG,IAAIA,GAAG,CAACxhE,MAAM,YAAYmY,WAAW,IAAIqpD,GAAG,CAAC57D,UAAU,KAAKtI,SAAS,IAAIkkE,GAAG,CAAC5uD,UAAU,KAAKtV,SAAS;EAChH;;EC3BM,SAAUmkE,mBAAmBA,CAClCC,KAAkB,EAAA;EAElB,EAAA,IAAMC,aAAa,GAAkB;MACpCrmE,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EACfslE,IAAAA,WAAW,EAAE,EAAE;EACf39D,IAAAA,IAAI,EAAE,EAAE;EACRwb,IAAAA,QAAQ,EAAE,IAAI;EACdoiD,IAAAA,WAAW,EAAE;EACb,GAAA;IAED,IAAMC,YAAY,GAAG,IAAI;EAEzB,EAAA,IAAIJ,KAAK,CAAC34D,IAAI,GAAG,CAAC,EAAE;EACnB,IAAA,OAAOzL,SAAS;EACjB,EAAA;IACA,IAAIokE,KAAK,CAACz9D,IAAI,CAAC,CAAC,CAAC,KAAK69D,YAAY,EAAE;EACnCplE,IAAAA,OAAO,CAACzD,GAAG,CAAC,2CAA2C,GAAG,UAAU,CAAC;EACrE,IAAA,OAAOqE,SAAS;EACjB,EAAA;EAEA,EAAA,IAAMykE,gBAAgB,GAAGL,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAAC,CAAC,CAAC,CAAC3K,OAAO,CAAC,CAAC,CAAC;EAC1D,EAAA,IAAIujE,gBAAgB,KAAK,EAAE,EAAE;EAC5B,IAAA,OAAOzkE,SAAS;EACjB,EAAA;EACA,EAAA,IAAMmiB,QAAQ,GAAGhhB,cAAc,CAACuiE,OAAO,CAACU,KAAK,CAACz9D,IAAI,EAAE,CAAC,EAAE89D,gBAAgB,CAAC,CAAC;IACzE,IAAMF,WAAW,GAAGH,KAAK,CAACz9D,IAAI,CAAC,CAAC,GAAG89D,gBAAgB,CAAC;EACpD,EAAA,IAAMC,mBAAmB,GAAGN,KAAK,CAACz9D,IAAI,CACpCkF,QAAQ,CAAC,CAAC,GAAG44D,gBAAgB,CAAC,CAC9BvjE,OAAO,CAAC,CAAC,CAAC;EACZ,EAAA,IAAIwjE,mBAAmB,KAAK,EAAE,EAAE;EAC/B,IAAA,OAAO1kE,SAAS;EACjB,EAAA;EACA,EAAA,IAAMskE,WAAW,GAAGnjE,cAAc,CACjCuiE,OAAO,CAACU,KAAK,CAACz9D,IAAI,EAAE,CAAC,GAAG89D,gBAAgB,EAAEC,mBAAmB,CAAC,CAC9D;EAED,EAAA,IAAI/9D,IAAI;IACR,IAAIwb,QAAQ,KAAK,KAAK,EAAE;EACvBxb,IAAAA,IAAI,GAAGxF,cAAc,CACpBuiE,OAAO,CAACU,KAAK,CAACz9D,IAAI,EAAE,CAAC,GAAG89D,gBAAgB,GAAGC,mBAAmB,CAAC,CAC/D;EACF,EAAA,CAAC,MACI;EACJ/9D,IAAAA,IAAI,GAAG88D,aAAa,CACnBW,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAAC,CAAC,GAAG44D,gBAAgB,GAAGC,mBAAmB,CAAC,CAC/D;EACF,EAAA;IAEAL,aAAa,CAACliD,QAAQ,GAAGA,QAAQ;IACjCkiD,aAAa,CAACE,WAAW,GAAGA,WAAW;IACvCF,aAAa,CAACC,WAAW,GAAGA,WAAW;IACvCD,aAAa,CAAC19D,IAAI,GAAGA,IAAI;EACzB,EAAA,OAAO09D,aAAa;EACrB;;EChEA;;;;;;;;;;;EAWM,SAAUM,kBAAkBA,CACjCP,KAAkB,EAAA;EAElB;;;EAGA,EAAA,IAAIA,KAAK,CAAC34D,IAAI,GAAG,CAAC,EAAE;EACnB,IAAA,OAAOzL,SAAS;EACjB,EAAA;IAEA,IAAM4kE,KAAK,GAAGzjE,cAAc,CAACijE,KAAK,CAACz9D,IAAI,EAAE,IAAI,CAAC;EAC9C,EAAA,IAAMk+D,WAAW,GAAG,IAAItiE,UAAU,CAAC6hE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAAC+4D,KAAK,CAAC9jE,MAAM,GAAG,CAAC,CAAC,CAAC;IAEzE,OAAO;MAAE9C,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EAAER,IAAAA,IAAI,EAAEomE,KAAK;MAAEj+D,IAAI,EAAEk+D,WAAW,CAACniE;KAAQ;EAClE;;ECzBA;;;;;;;;;;;EAWM,SAAUoiE,kBAAkBA,CAACV,KAAkB,EAAA;EACpD,EAAA,IAAIA,KAAK,CAAC34D,IAAI,GAAG,CAAC,EAAE;EACnB,IAAA,OAAOzL,SAAS;EACjB,EAAA;EAEA,EAAA,IAAIokE,KAAK,CAACplE,IAAI,KAAK,MAAM,EAAE;EAC1B;;;;;MAKA,IAAIsK,KAAK,GAAG,CAAC;EACb,IAAA,IAAMg7D,WAAW,GAAGnjE,cAAc,CAACijE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAACvC,KAAK,CAAC,EAAE,IAAI,CAAC;EAEpEA,IAAAA,KAAK,IAAIg7D,WAAW,CAACxjE,MAAM,GAAG,CAAC;EAC/B,IAAA,IAAM3G,KAAK,GAAGgH,cAAc,CAACijE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAACvC,KAAK,CAAC,CAAC;MAExD,OAAO;QAAEtL,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EAAER,MAAAA,IAAI,EAAE8lE,WAAW;EAAE39D,MAAAA,IAAI,EAAExM;OAAO;EAC3D,EAAA;EACA;;;;;EAKA,EAAA,IAAM2Q,IAAI,GAAG3J,cAAc,CAACijE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnD,OAAO;MAAE7N,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EAAER,IAAAA,IAAI,EAAE,EAAE;EAAEmI,IAAAA,IAAI,EAAEmE;KAAM;EACjD;;ECrCA;;;;;;;;;;;EAWM,SAAUi6D,iBAAiBA,CAACX,KAAkB,EAAA;EACnD,EAAA,IAAIA,KAAK,CAACplE,IAAI,KAAK,MAAM,EAAE;EAC1B;;;;;EAKA,IAAA,IAAIolE,KAAK,CAAC34D,IAAI,GAAG,CAAC,EAAE;EACnB,MAAA,OAAOzL,SAAS;EACjB,IAAA;MAEA,IAAIsJ,KAAK,GAAG,CAAC;EACb,IAAA,IAAMg7D,WAAW,GAAWnjE,cAAc,CACzCijE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAACvC,KAAK,CAAC,EAC1B,IAAI,CACJ;EAEDA,IAAAA,KAAK,IAAIg7D,WAAW,CAACxjE,MAAM,GAAG,CAAC;EAC/B,IAAA,IAAM3G,KAAK,GAAWgH,cAAc,CAACijE,KAAK,CAACz9D,IAAI,CAACkF,QAAQ,CAACvC,KAAK,CAAC,CAAC;MAEhE,OAAO;QAAEtL,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EAAER,MAAAA,IAAI,EAAE8lE,WAAW;EAAE39D,MAAAA,IAAI,EAAExM;OAAO;EAC3D,EAAA;EACA;;;;EAIA,EAAA,IAAMpB,GAAG,GAAWoI,cAAc,CAACijE,KAAK,CAACz9D,IAAI,CAAC;IAC9C,OAAO;MAAE3I,GAAG,EAAEomE,KAAK,CAACplE,IAAI;EAAER,IAAAA,IAAI,EAAE,EAAE;EAAEmI,IAAAA,IAAI,EAAE5N;KAAK;EAChD;;ECpCA;;;;;;;;;;;EAWM,SAAUisE,cAAcA,CAACZ,KAAkB,EAAA;EAChD,EAAA,IAAIA,KAAK,CAACplE,IAAI,KAAK,MAAM,EAAE;MAC1B,OAAO2lE,kBAAkB,CAACP,KAAK,CAAC;IACjC,CAAC,MACI,IAAIA,KAAK,CAACplE,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC/B,OAAO+lE,iBAAiB,CAACX,KAAK,CAAC;EAChC,EAAA,CAAC,MAEI,IAAIA,KAAK,CAACplE,IAAI,KAAK,MAAM,EAAE;MAC/B,OAAOmlE,mBAAmB,CAACC,KAAK,CAAC;EAClC,EAAA;IAEA,OAAOU,kBAAkB,CAACV,KAAK,CAAC;EACjC;;EC5BA;;;;;;;;;;;EAWM,SAAUa,eAAeA,CAACt+D,IAAgB,EAAA;EAC/C;;;;;IAKA,IAAM3H,IAAI,GAAWiD,MAAM,CAACC,YAAY,CAACyE,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5E,EAAA,IAAM8E,IAAI,GAAW61D,WAAW,CAAC36D,IAAI,EAAE,CAAC,CAAC;EAEzC;IACA,IAAMuE,MAAM,GAAG,EAAE;IAEjB,OAAO;EAAElM,IAAAA,IAAI,EAAJA,IAAI;EAAEyM,IAAAA,IAAI,EAAJA,IAAI;MAAE9E,IAAI,EAAEA,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAGO,IAAI;KAAG;EAClE;;ECnBA,IAAMy5D,kBAAkB,GAAG,EAAE;EAC7B,IAAMC,UAAU,GAAG,EAAE;EAErB;;;;;;;;;;;EAWM,SAAUC,YAAYA,CAACC,OAAmB,EAAA;IAC/C,IAAIn6D,MAAM,GAAG,CAAC;IACd,IAAMo6D,MAAM,GAAe,EAAE;EAE7B,EAAA,OAAOjE,WAAW,CAACgE,OAAO,EAAEn6D,MAAM,CAAC,EAAE;MACpC,IAAMO,IAAI,GAAG61D,WAAW,CAAC+D,OAAO,EAAEn6D,MAAM,GAAG,CAAC,CAAC;MAE7C,IAAKm6D,OAAO,CAACn6D,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,CAAC,EAAE;EACnC;EACAA,MAAAA,MAAM,IAAIg6D,kBAAkB;EAC7B,IAAA;EACA;EACAh6D,IAAAA,MAAM,IAAIg6D,kBAAkB;EAC5B,IAAA,IAAM7hE,GAAG,GAAG6H,MAAM,GAAGO,IAAI;EACzB;EACA,IAAA,OAAOP,MAAM,GAAGi6D,UAAU,GAAG9hE,GAAG,EAAE;QACjC,IAAMkiE,SAAS,GAAgBN,eAAe,CAACI,OAAO,CAACx5D,QAAQ,CAACX,MAAM,CAAC,CAAC;EACxE,MAAA,IAAMk5D,KAAK,GAAyBY,cAAc,CAACO,SAAS,CAAC;EAC7D,MAAA,IAAInB,KAAK,EAAE;EACVkB,QAAAA,MAAM,CAAC36D,IAAI,CAACy5D,KAAK,CAAC;EACnB,MAAA;EAEA;EACAl5D,MAAAA,MAAM,IAAIq6D,SAAS,CAAC95D,IAAI,GAAGy5D,kBAAkB;EAC9C,IAAA;EAEA,IAAA,IAAI9D,WAAW,CAACiE,OAAO,EAAEn6D,MAAM,CAAC,EAAE;EACjCA,MAAAA,MAAM,IAAIg6D,kBAAkB;EAC7B,IAAA;EACD,EAAA;EAEA,EAAA,OAAOI,MAAM;EACd;;ECpDA;;;;;;;;;;;EAWM,SAAUE,mBAAmBA,CAACpB,KAAe,EAAA;EAClD,EAAA,OACCA,KAAK,IACLA,KAAK,CAACpmE,GAAG,KAAK,MAAM,IACpBomE,KAAK,CAAC5lE,IAAI,KAAK,8CAA8C;EAE/D;;ECjBA;;;;;;;;;;;EAWM,SAAUinE,gBAAgBA,CAC/BC,cAA4C,EAAA;EAE5C,EAAA,IAAIA,cAAc,CAAC/+D,IAAI,CAAC2B,UAAU,KAAK,CAAC,EAAE;MACzC,IAAM3B,IAAI,GAAG,IAAIpE,UAAU,CAACmjE,cAAc,CAAC/+D,IAAI,CAAC;EAChD;EACA;EACA,IAAA,IAAMg/D,QAAQ,GAAGh/D,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;EAC9B,IAAA,IAAIi/D,SAAS,GACZ,CAACj/D,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAKA,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;EAC7Di/D,IAAAA,SAAS,IAAI,EAAE;EAEf,IAAA,IAAID,QAAQ,EAAE;EACbC,MAAAA,SAAS,IAAI,WAAW;EACzB,IAAA,CAAC;EAED,IAAA,OAAO/rE,IAAI,CAAC24B,KAAK,CAACozC,SAAS,CAAC;EAC7B,EAAA;EAEA,EAAA,OAAO5lE,SAAS;EACjB;;EC3BA;;;;;;;;;;;EAWM,SAAU6lE,eAAeA,CAACl/D,IAAgB,EAAA;EAC/C,EAAA,IAAM2+D,MAAM,GAAeF,YAAY,CAACz+D,IAAI,CAAC;EAE7C,EAAA,KAAK,IAAI3E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsjE,MAAM,CAACxkE,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACvC,IAAA,IAAMoiE,KAAK,GAAGkB,MAAM,CAACtjE,CAAC,CAAC;EAEvB,IAAA,IAAIwjE,mBAAmB,CAACpB,KAAK,CAAC,EAAE;QAC/B,OAAOqB,gBAAgB,CAACrB,KAAqC,CAAC;EAC/D,IAAA;EACD,EAAA;EAEA,EAAA,OAAOpkE,SAAS;EACjB;;ECkHA,IAAY8lE,cAAc,0BAAdA,cAAc,EAAA;IAAdA,cAAc,CAAA,UAAA,CAAA,GAAA,SAAA;IAAdA,cAAc,CAAA,WAAA,CAAA,GAAA,yBAAA;IAAdA,cAAc,CAAA,MAAA,CAAA,GAAA,8BAAA;IAAdA,cAAc,CAAA,SAAA,CAAA,GAAA,yBAAA;EAAA,EAAA,OAAdA,cAAc;EAAA,CAAA,CAAA,EAAA,CAAA;;EC7InB,SAASC,UAAUA,CAAC/mE,IAAI,EAAOgnE,cAAc,EAAwB;EAAA,EAAA,IAAjDhnE,IAAI,KAAA,MAAA,EAAA;EAAJA,IAAAA,IAAI,GAAG,EAAE;EAAA,EAAA;EAAA,EAAA,IAAEgnE,cAAc,KAAA,MAAA,EAAA;EAAdA,IAAAA,cAAc,GAAG,KAAK;EAAA,EAAA;IAC1D,OAAO;EACLhnE,IAAAA,IAAI,EAAJA,IAAI;MACJC,EAAE,EAAE,EAAE;MACNgnE,GAAG,EAAE,EAAE;EACPD,IAAAA,cAAc,EAAdA,cAAc;MACdE,cAAc,EAAE,EAAE;EAClBnwD,IAAAA,OAAO,EAAE,EAAE;EACX4kD,IAAAA,OAAO,EAAE;KACV;EACH;;ECGoD,IAM9CwL,gBAAgB,gBAAA,YAAA;EAAA,EAAA,SAAAA,gBAAAA,GAAA;EAAA,IAAA,IAAA,CACVC,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,SAAS,GAAA,MAAA;MAAA,IAAA,CACTnD,UAAU,GAAW,CAAC;MAAA,IAAA,CACtBoD,UAAU,GAAsB,IAAI;MAAA,IAAA,CACpCC,OAAO,GAAkB,IAAI;MAAA,IAAA,CAC7BzT,OAAO,GAA2B,IAAI;MAAA,IAAA,CACtC0T,OAAO,GAAkB,IAAI;EAAA,EAAA;EAAA,EAAA,IAAA5qE,MAAA,GAAAuqE,gBAAA,CAAAtqE,SAAA;EAAAD,EAAAA,MAAA,CAEvC6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACd3/D,WAAmC,EACnCsc,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB;MACA,IAAI,CAACL,SAAS,GAAG;EACfrnE,MAAAA,IAAI,EAAE,KAAK;EACXC,MAAAA,EAAE,EAAE,CAAC;QACLgnE,GAAG,EAAE,EAAE;EACPD,MAAAA,cAAc,EAAE,KAAK;EACrBE,MAAAA,cAAc,EAAE,CAAC;EACjBnwD,MAAAA,OAAO,EAAE,EAAE;EACX4kD,MAAAA,OAAO,EAAE;OACV;IACH,CAAC;EAAA/+D,EAAAA,MAAA,CAED+qE,cAAc,GAAd,SAAAA,cAAcA,CAACC,eAAuC,EAAE;MACtD,IAAI,CAAC9T,OAAO,GAAG8T,eAAe;MAC9B,IAAI,CAACC,eAAe,EAAE;IACxB,CAAC;EAAAjrE,EAAAA,MAAA,CAEDirE,eAAe,GAAf,SAAAA,eAAeA,GAAS;MACtB,IAAI,CAACN,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB,IAAI,CAACtD,UAAU,GAAG,CAAC;IACrB,CAAC;IAAAtnE,MAAA,CAED6mE,QAAQ,GAAR,SAAAA,QAAQA,CAAC97D,IAAgB,EAAEuE,MAAc,EAAW;EAClD,IAAA,OAAO,KAAK;IACd,CAAC;EAAAtP,EAAAA,MAAA,CAEDqnE,WAAW,GAAX,SAAAA,WAAWA,CACTp1D,KAAwB,EACxBlH,IAAgB,EAChBuE,MAAc,EACK,CAAC;;EAEtB;EAAA;IAAAtP,MAAA,CACAkrE,KAAK,GAAL,SAAAA,KAAKA,CAACngE,IAAgB,EAAEiP,UAAkB,EAAiB;MACzD,IAAI,IAAI,CAAC0wD,UAAU,EAAE;QACnB3/D,IAAI,GAAG4O,gBAAgB,CAAC,IAAI,CAAC+wD,UAAU,EAAE3/D,IAAI,CAAC;QAC9C,IAAI,CAAC2/D,UAAU,GAAG,IAAI;EACxB,IAAA;EAEA,IAAA,IAAIjB,OAA+B,GAAG9D,UAAU,CAAC56D,IAAI,EAAE,CAAC,CAAC;MACzD,IAAIuE,MAAM,GAAGm6D,OAAO,GAAGA,OAAO,CAACvkE,MAAM,GAAG,CAAC;EACzC,IAAA,IAAIimE,aAAa;EACjB,IAAA,IAAMl5D,KAAK,GAAG,IAAI,CAACu4D,WAAgC;EACnD,IAAA,IAAMY,QAAQ,GAAG,IAAI,CAACX,SAAiC;MACvD,IAAMT,SAAS,GAAGP,OAAO,GAAGQ,eAAe,CAACR,OAAO,CAAC,GAAGrlE,SAAS;EAChE,IAAA,IAAMc,MAAM,GAAG6F,IAAI,CAAC7F,MAAM;EAE1B,IAAA,IACE,IAAI,CAACylE,OAAO,KAAK,IAAI,IACpB,IAAI,CAACrD,UAAU,KAAK,CAAC,IAAI96D,cAAA,CAAgBw9D,SAAS,CAAE,EACrD;EACA,MAAA,IAAI,CAACW,OAAO,GAAGU,SAAS,CAACrB,SAAS,EAAEhwD,UAAU,EAAE,IAAI,CAACk9C,OAAO,CAAC;EAC7D,MAAA,IAAI,CAAC0T,OAAO,GAAG,IAAI,CAACD,OAAO;EAC7B,IAAA;EAEA,IAAA,IAAI,IAAI,CAACC,OAAO,KAAK,IAAI,EAAE;EACzB,MAAA,IAAI,CAACA,OAAO,GAAG,IAAI,CAACD,OAAO;EAC7B,IAAA;;EAEA;EACA,IAAA,IAAIlB,OAAO,IAAIA,OAAO,CAACvkE,MAAM,GAAG,CAAC,EAAE;EACjCkmE,MAAAA,QAAQ,CAACjxD,OAAO,CAACpL,IAAI,CAAC;UACpBiN,GAAG,EAAE,IAAI,CAAC4uD,OAAO;UACjBU,GAAG,EAAE,IAAI,CAACV,OAAO;EACjB7/D,QAAAA,IAAI,EAAE0+D,OAAO;UACbrmE,IAAI,EAAE8mE,cAAc,CAACqB,QAAQ;UAC7BthE,QAAQ,EAAE5L,MAAM,CAACi5B;EACnB,OAAC,CAAC;EACJ,IAAA;MAEA,OAAOhoB,MAAM,GAAGpK,MAAM,EAAE;QACtB,IAAI,IAAI,CAAC2hE,QAAQ,CAAC97D,IAAI,EAAEuE,MAAM,CAAC,EAAE;UAC/B,IAAMk5D,KAAK,GAAG,IAAI,CAACnB,WAAW,CAACp1D,KAAK,EAAElH,IAAI,EAAEuE,MAAM,CAAC;EACnD,QAAA,IAAIk5D,KAAK,EAAE;YACT,IAAI,CAAClB,UAAU,EAAE;EACjB,UAAA,IAAI,CAACsD,OAAO,GAAGpC,KAAK,CAACtoE,MAAM,CAAC8b,GAAG;YAC/B1M,MAAM,IAAIk5D,KAAK,CAACtjE,MAAM;EACtBimE,UAAAA,aAAa,GAAG77D,MAAM;EACxB,QAAA,CAAC,MAAM;EACLA,UAAAA,MAAM,GAAGpK,MAAM;EACjB,QAAA;QACF,CAAC,MAAM,IAAI0iE,WAAW,CAAC78D,IAAI,EAAEuE,MAAM,CAAC,EAAE;EACpC;EACAm6D,QAAAA,OAAO,GAAG9D,UAAU,CAAC56D,IAAI,EAAEuE,MAAM,CAAE;EACnC87D,QAAAA,QAAQ,CAACjxD,OAAO,CAACpL,IAAI,CAAC;YACpBiN,GAAG,EAAE,IAAI,CAAC4uD,OAAO;YACjBU,GAAG,EAAE,IAAI,CAACV,OAAO;EACjB7/D,UAAAA,IAAI,EAAE0+D,OAAO;YACbrmE,IAAI,EAAE8mE,cAAc,CAACqB,QAAQ;YAC7BthE,QAAQ,EAAE5L,MAAM,CAACi5B;EACnB,SAAC,CAAC;UACFhoB,MAAM,IAAIm6D,OAAO,CAACvkE,MAAM;EACxBimE,QAAAA,aAAa,GAAG77D,MAAM;EACxB,MAAA,CAAC,MAAM;EACLA,QAAAA,MAAM,EAAE;EACV,MAAA;EACA,MAAA,IAAIA,MAAM,KAAKpK,MAAM,IAAIimE,aAAa,KAAKjmE,MAAM,EAAE;EACjD,QAAA,IAAMsmE,WAAW,GAAGzgE,IAAI,CAACtN,KAAK,CAAC0tE,aAAa,CAAC;UAC7C,IAAI,IAAI,CAACT,UAAU,EAAE;YACnB,IAAI,CAACA,UAAU,GAAG/wD,gBAAgB,CAAC,IAAI,CAAC+wD,UAAU,EAAEc,WAAW,CAAC;EAClE,QAAA,CAAC,MAAM;YACL,IAAI,CAACd,UAAU,GAAGc,WAAW;EAC/B,QAAA;EACF,MAAA;EACF,IAAA;MAEA,OAAO;EACL/gD,MAAAA,UAAU,EAAExY,KAAK;QACjBw5D,UAAU,EAAEtB,UAAU,EAA2B;EACjDiB,MAAAA,QAAQ,EAARA,QAAQ;QACRM,SAAS,EAAEvB,UAAU;OACtB;IACH,CAAC;IAAAnqE,MAAA,CAED2rE,cAAc,GAAd,SAAAA,cAAcA,CACZ5gE,IAAgB,EAChB87C,OAAgB,EAChB7sC,UAAkB,EACM;MACxB,OAAO2O,OAAO,CAACorB,MAAM,CACnB,IAAI7rB,KAAK,CAAA,GAAA,GACH,IAAI,GAAA,uDACV,CACF,CAAC;IACH,CAAC;EAAAloB,EAAAA,MAAA,CAED6zC,KAAK,GAAL,SAAAA,KAAKA,CAAC75B,UAAkB,EAAiB;EACvC;EACA,IAAA,IAAM0wD,UAAU,GAAG,IAAI,CAACA,UAAU;EAClC,IAAA,IAAIA,UAAU,EAAE;QACd,IAAI,CAACA,UAAU,GAAG,IAAI;EACtB,MAAA,IAAI,CAACQ,KAAK,CAACR,UAAU,EAAE,CAAC,CAAC;EAC3B,IAAA;MAEA,OAAO;QACLjgD,UAAU,EAAE,IAAI,CAAC+/C,WAAgC;QACjDiB,UAAU,EAAEtB,UAAU,EAA2B;QACjDiB,QAAQ,EAAE,IAAI,CAACX,SAAiC;QAChDiB,SAAS,EAAEvB,UAAU;OACtB;IACH,CAAC;EAAAnqE,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAACwoE,UAAU,GAAG,IAAI;EACtB;EACA,IAAA,IAAI,CAACF,WAAW,GAAG,IAAI,CAACC,SAAS,GAAGrmE,SAAS;IAC/C,CAAC;EAAA,EAAA,OAAAmmE,gBAAA;EAAA,CAAA,EAAA;EAGH;EACA;EACA;EACA;EACA;EACA;EACO,IAAMc,SAAS,GAAG,SAAZA,SAASA,CACpBrB,SAA6B,EAC7BhwD,UAAkB,EAClBk9C,OAAiC,EACtB;EACX,EAAA,IAAIzqD,cAAA,CAAgBu9D,SAAmB,CAAC,EAAE;MACxC,OAAOA,SAAS,GAAI,EAAE;EACxB,EAAA;EACA,EAAA,IAAM4B,SAAS,GAAG1U,OAAO,GACpBA,OAAO,CAAC3/C,QAAQ,GAAG,KAAK,GAAI2/C,OAAO,CAAC1mD,SAAS,GAC9C,CAAC;EACL,EAAA,OAAOwJ,UAAU,GAAG,KAAK,GAAG4xD,SAAS;EACvC,CAAC;;EC3MD;EACA;EACA;;EAGA,IAAIC,eAA4B,GAAG,IAAI;EAEvC,IAAMC,WAAW,GAAG,CAClB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC7E,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC1E,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC5E,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAC7E,GAAG,CACJ;EAED,IAAMC,eAAe,GAAG,CACtB,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAC7D;EAED,IAAMC,mBAAmB,GAAG;EAC1B;EACA,CACE,CAAC;EAAE;EACH,EAAE;EAAE;EACJ,GAAG;EAAE;EACL,EAAE;EAAE,CACL;EACD;EACA,CACE,CAAC;EAAE;EACH,CAAC;EAAE;EACH,CAAC;EAAE;EACH,CAAC;EAAE,CACJ;EACD;EACA,CACE,CAAC;EAAE;EACH,EAAE;EAAE;EACJ,GAAG;EAAE;EACL,EAAE;EAAE,CACL;EACD;EACA,CACE,CAAC;EAAE;EACH,GAAG;EAAE;EACL,GAAG;EAAE;EACL,EAAE;EAAE,CACL,CACF;EAED,IAAMC,WAAW,GAAG,CAClB,CAAC;EAAE;EACH,CAAC;EAAE;EACH,CAAC;EAAE;EACH,CAAC;EAAE,CACJ;EAEM,SAAS5E,WAAWA,CACzBp1D,KAAwB,EACxBlH,IAAgB,EAChBuE,MAAc,EACd0M,GAAW,EACXsrD,UAAkB,EAClB;EACA;EACA,EAAA,IAAIh4D,MAAM,GAAG,EAAE,GAAGvE,IAAI,CAAC7F,MAAM,EAAE;EAC7B,IAAA;EACF,EAAA;EAEA,EAAA,IAAMuiE,MAAM,GAAGyE,WAAW,CAACnhE,IAAI,EAAEuE,MAAM,CAAC;IACxC,IAAIm4D,MAAM,IAAIn4D,MAAM,GAAGm4D,MAAM,CAACT,WAAW,IAAIj8D,IAAI,CAAC7F,MAAM,EAAE;MACxD,IAAMqiE,aAAa,GAAIE,MAAM,CAAC0E,eAAe,GAAG,KAAK,GAAI1E,MAAM,CAAC2E,UAAU;EAC1E,IAAA,IAAM5E,KAAK,GAAGxrD,GAAG,GAAGsrD,UAAU,GAAGC,aAAa;EAC9C,IAAA,IAAMrnE,MAAM,GAAG;EACbwnE,MAAAA,IAAI,EAAE38D,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAEA,MAAM,GAAGm4D,MAAM,CAACT,WAAW,CAAC;EACxDhrD,MAAAA,GAAG,EAAEwrD,KAAK;EACV8D,MAAAA,GAAG,EAAE9D;OACN;MAEDv1D,KAAK,CAACgZ,MAAM,GAAG,EAAE;EACjBhZ,IAAAA,KAAK,CAACo0D,YAAY,GAAGoB,MAAM,CAACpB,YAAY;EACxCp0D,IAAAA,KAAK,CAACq0D,UAAU,GAAGmB,MAAM,CAAC2E,UAAU;EACpCn6D,IAAAA,KAAK,CAACkI,OAAO,CAACpL,IAAI,CAAC7O,MAAM,CAAC;MAE1B,OAAO;EAAEA,MAAAA,MAAM,EAANA,MAAM;QAAEgF,MAAM,EAAEuiE,MAAM,CAACT,WAAW;EAAEW,MAAAA,OAAO,EAAE;OAAG;EAC3D,EAAA;EACF;EAEO,SAASuE,WAAWA,CAACnhE,IAAgB,EAAEuE,MAAc,EAAE;IAC5D,IAAM+8D,WAAW,GAAIthE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,CAAC;IAC/C,IAAMg9D,SAAS,GAAIvhE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,CAAC;IAC7C,IAAMi9D,YAAY,GAAIxhE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,EAAE;IACjD,IAAMk9D,eAAe,GAAIzhE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,CAAC;EACnD,EAAA,IACE+8D,WAAW,KAAK,CAAC,IACjBE,YAAY,KAAK,CAAC,IAClBA,YAAY,KAAK,EAAE,IACnBC,eAAe,KAAK,CAAC,EACrB;MACA,IAAMC,UAAU,GAAI1hE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,GAAI,CAAC;MAC9C,IAAMo9D,WAAW,GAAG3hE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC;EACzC,IAAA,IAAMq9D,gBAAgB,GACpBN,WAAW,KAAK,CAAC,GAAG,CAAC,GAAGC,SAAS,GAAGA,SAAS,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;EAC7D,IAAA,IAAMM,OAAO,GACXd,WAAW,CAACa,gBAAgB,GAAG,EAAE,GAAGJ,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI;EAC9D,IAAA,IAAMM,mBAAmB,GACvBR,WAAW,KAAK,CAAC,GAAG,CAAC,GAAGA,WAAW,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MACnD,IAAMD,UAAU,GACdL,eAAe,CAACc,mBAAmB,GAAG,CAAC,GAAGL,eAAe,CAAC;MAC5D,IAAMnG,YAAY,GAAGqG,WAAW,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC/C,IAAMI,iBAAiB,GAAGd,mBAAmB,CAACK,WAAW,CAAC,CAACC,SAAS,CAAC;EACrE,IAAA,IAAMS,WAAW,GAAGd,WAAW,CAACK,SAAS,CAAC;EAC1C,IAAA,IAAMH,eAAe,GAAGW,iBAAiB,GAAG,CAAC,GAAGC,WAAW;EAC3D,IAAA,IAAM/F,WAAW,GACf/oE,IAAI,CAACE,KAAK,CAAE2uE,iBAAiB,GAAGF,OAAO,GAAIR,UAAU,GAAGK,UAAU,CAAC,GACnEM,WAAW;MAEb,IAAIlB,eAAa,KAAK,IAAI,EAAE;EAC1B,MAAA,IAAMjsD,SAAS,GAAGD,SAAS,CAACC,SAAS,IAAI,EAAE;EAC3C,MAAA,IAAMjQ,MAAM,GAAGiQ,SAAS,CAACq9B,KAAK,CAAC,gBAAgB,CAAC;QAChD4uB,eAAa,GAAGl8D,MAAM,GAAGhH,QAAQ,CAACgH,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EAClD,IAAA;MACA,IAAMq9D,aAAa,GAAG,CAAC,CAACnB,eAAa,IAAIA,eAAa,IAAI,EAAE;EAE5D,IAAA,IACEmB,aAAa,IACbV,SAAS,KAAK,CAAC,IACfM,OAAO,IAAI,MAAM,IACjBF,WAAW,KAAK,CAAC,EACjB;EACA;EACA3hE,MAAAA,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAGvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EAC5C,IAAA;MAEA,OAAO;EAAE88D,MAAAA,UAAU,EAAVA,UAAU;EAAE/F,MAAAA,YAAY,EAAZA,YAAY;EAAEW,MAAAA,WAAW,EAAXA,WAAW;EAAEmF,MAAAA,eAAe,EAAfA;OAAiB;EACnE,EAAA;EACF;EAEO,SAAS3F,eAAeA,CAACz7D,IAAgB,EAAEuE,MAAc,EAAW;EACzE,EAAA,OACEvE,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IACrB,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,IAClC,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI;EAEtC;EAEO,SAASs3D,QAAQA,CAAC77D,IAAgB,EAAEuE,MAAc,EAAW;EAClE;EACA;EACA;EACA,EAAA,OAAOA,MAAM,GAAG,CAAC,GAAGvE,IAAI,CAAC7F,MAAM,IAAIshE,eAAe,CAACz7D,IAAI,EAAEuE,MAAM,CAAC;EAClE;EAEO,SAASu3D,QAAQA,CAAC97D,IAAgB,EAAEuE,MAAc,EAAW;IAClE,IAAMyM,UAAU,GAAG,CAAC;EAEpB,EAAA,OAAOyqD,eAAe,CAACz7D,IAAI,EAAEuE,MAAM,CAAC,IAAIyM,UAAU,IAAIhR,IAAI,CAAC7F,MAAM,GAAGoK,MAAM;EAC5E;EAEO,SAASw3D,KAAKA,CAAC/7D,IAAgB,EAAEuE,MAAc,EAAW;EAC/D;EACA;EACA,EAAA,IAAIA,MAAM,GAAG,CAAC,GAAGvE,IAAI,CAAC7F,MAAM,IAAIshE,eAAe,CAACz7D,IAAI,EAAEuE,MAAM,CAAC,EAAE;EAC7D;MACA,IAAMy3D,YAAY,GAAG,CAAC;EACtB;EACA,IAAA,IAAMU,MAAM,GAAGyE,WAAW,CAACnhE,IAAI,EAAEuE,MAAM,CAAC;MACxC,IAAI03D,WAAW,GAAGD,YAAY;EAC9B,IAAA,IAAIU,MAAM,IAAA,IAAA,IAANA,MAAM,CAAET,WAAW,EAAE;QACvBA,WAAW,GAAGS,MAAM,CAACT,WAAW;EAClC,IAAA;EAEA,IAAA,IAAMC,SAAS,GAAG33D,MAAM,GAAG03D,WAAW;MACtC,OAAOC,SAAS,KAAKl8D,IAAI,CAAC7F,MAAM,IAAI0hE,QAAQ,CAAC77D,IAAI,EAAEk8D,SAAS,CAAC;EAC/D,EAAA;EACA,EAAA,OAAO,KAAK;EACd;;EC1KyC,IAMnCgG,UAAU,0BAAAC,iBAAA,EAAA;EAId,EAAA,SAAAD,UAAAA,CAAYnH,QAAyB,EAAE76C,MAAM,EAAE;EAAA,IAAA,IAAAxhB,KAAA;EAC7CA,IAAAA,KAAA,GAAAyjE,iBAAA,CAAAxjE,IAAA,KAAM,CAAC,IAAA,IAAA;EAACD,IAAAA,KAAA,CAJOq8D,QAAQ,GAAA,MAAA;EAAAr8D,IAAAA,KAAA,CACRwhB,MAAM,GAAA,MAAA;MAIrBxhB,KAAA,CAAKq8D,QAAQ,GAAGA,QAAQ;MACxBr8D,KAAA,CAAKwhB,MAAM,GAAGA,MAAM;EAAC,IAAA,OAAAxhB,KAAA;EACvB,EAAA;IAAC6B,cAAA,CAAA2hE,UAAA,EAAAC,iBAAA,CAAA;EAAA,EAAA,IAAAltE,MAAA,GAAAitE,UAAA,CAAAhtE,SAAA;EAAAD,EAAAA,MAAA,CAED6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACd3/D,WAAmC,EACnCsc,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB;EACAoC,IAAAA,iBAAA,CAAAjtE,SAAA,CAAM4qE,gBAAgB,CAAAnhE,IAAA,CAAA,IAAA,EAACwB,WAAW,EAAEsc,UAAU,EAAErD,UAAU,EAAE2mD,aAAa,CAAA;MACzE,IAAI,CAACN,WAAW,GAAG;EACjB2C,MAAAA,SAAS,EAAE,YAAY;EACvB/pE,MAAAA,IAAI,EAAE,OAAO;EACbC,MAAAA,EAAE,EAAE,CAAC;QACLgnE,GAAG,EAAE,EAAE;EACPC,MAAAA,cAAc,EAAE,CAAC;EACjB8C,MAAAA,YAAY,EAAE,KAAK;EACnBjzD,MAAAA,OAAO,EAAE,EAAE;EACX4rD,MAAAA,aAAa,EAAEv+C,UAAU;EACzBvd,MAAAA,QAAQ,EAAE6gE,aAAa;EACvBV,MAAAA,cAAc,EAAE,KAAK;EACrBrL,MAAAA,OAAO,EAAE;OACV;EACH,EAAA;;EAEA;EAAA;IAAAkO,UAAA,CACOnG,KAAK,GAAZ,SAAOA,OAAKA,CAAC/7D,IAA4B,EAAEvI,MAAe,EAAW;MACnE,IAAI,CAACuI,IAAI,EAAE;EACT,MAAA,OAAO,KAAK;EACd,IAAA;;EAEA;EACA;EACA;EACA;EACA,IAAA,IAAM0+D,OAAO,GAAG9D,UAAU,CAAC56D,IAAI,EAAE,CAAC,CAAC;MACnC,IAAIuE,MAAM,GAAG,CAAAm6D,OAAO,oBAAPA,OAAO,CAAEvkE,MAAM,KAAI,CAAC;MAEjC,IAAImoE,KAAe,CAACtiE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EACjC,MAAA,OAAO,KAAK;EACd,IAAA;EAEA,IAAA,KAAK,IAAIpK,MAAM,GAAG6F,IAAI,CAAC7F,MAAM,EAAEoK,MAAM,GAAGpK,MAAM,EAAEoK,MAAM,EAAE,EAAE;QACxD,IAAIg+D,OAAU,CAACviE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EAC5B9M,QAAAA,MAAM,CAACzC,GAAG,CAAC,wBAAwB,CAAC;EACpC,QAAA,OAAO,IAAI;EACb,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;IAAAC,MAAA,CAED6mE,QAAQ,GAAR,SAAAA,QAAQA,CAAC97D,IAAI,EAAEuE,MAAM,EAAE;EACrB,IAAA,OAAOg+D,UAAa,CAACviE,IAAI,EAAEuE,MAAM,CAAC;IACpC,CAAC;IAAAtP,MAAA,CAEDqnE,WAAW,GAAX,SAAAA,WAAWA,CAACp1D,KAAwB,EAAElH,IAAgB,EAAEuE,MAAc,EAAE;EACtEg+D,IAAAA,eAAoB,CAClBr7D,KAAK,EACL,IAAI,CAAC6zD,QAAQ,EACb/6D,IAAI,EACJuE,MAAM,EACN2C,KAAK,CAAC8zD,aACR,CAAC;EACD,IAAA,IAAMyC,KAAK,GAAG8E,aAAgB,CAC5Br7D,KAAK,EACLlH,IAAI,EACJuE,MAAM,EACN,IAAI,CAACq7D,OAAO,EACZ,IAAI,CAACrD,UACP,CAAC;EACD,IAAA,IAAIkB,KAAK,IAAIA,KAAK,CAACb,OAAO,KAAK,CAAC,EAAE;EAChC,MAAA,OAAOa,KAAK;EACd,IAAA;IACF,CAAC;EAAA,EAAA,OAAAyE,UAAA;EAAA,CAAA,CAhFsB1C,gBAAgB,CAAA;;ECZlC,IAAMgD,YAAY,GAAG,SAAfA,YAAYA,CAAIxiE,IAAgB,EAAEuE,MAAc,EAAa;EACxE;IACA,IAAIk+D,IAAI,GAAG,CAAC;IACZ,IAAIhsE,OAAO,GAAG,CAAC;EACf8N,EAAAA,MAAM,IAAI9N,OAAO;IACjB,IAAMsY,IAAI,GAAG,IAAIg1B,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,IAAM2+B,IAAI,GAAG,IAAI3+B,WAAW,CAAC,CAAC,CAAC,CAAC;IAChC,IAAMz6B,KAAI,GAAG,IAAI1N,UAAU,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAOnF,OAAO,GAAG,CAAC,EAAE;EAClB6S,IAAAA,KAAI,CAAC,CAAC,CAAC,GAAGtJ,IAAI,CAACuE,MAAM,CAAC;EACtB;MACA,IAAMo+D,IAAI,GAAGzvE,IAAI,CAAC+D,GAAG,CAACR,OAAO,EAAE,CAAC,CAAC;EACjC,IAAA,IAAM+b,KAAK,GAAG,CAAC,GAAGmwD,IAAI;MACtBD,IAAI,CAAC,CAAC,CAAC,GAAI,UAAU,KAAM,EAAE,GAAGlwD,KAAM,IAAKA,KAAK;EAChDzD,IAAAA,IAAI,CAAC,CAAC,CAAC,GAAG,CAACzF,KAAI,CAAC,CAAC,CAAC,GAAGo5D,IAAI,CAAC,CAAC,CAAC,KAAKlwD,KAAK;EACtCiwD,IAAAA,IAAI,GAAG,CAACA,IAAI,GAAG1zD,IAAI,CAAC,CAAC,CAAC,GAAI0zD,IAAI,IAAIE,IAAI,GAAI5zD,IAAI,CAAC,CAAC,CAAC;EACjDxK,IAAAA,MAAM,IAAI,CAAC;EACX9N,IAAAA,OAAO,IAAIksE,IAAI;EACjB,EAAA;EACA,EAAA,OAAOF,IAAI;EACb,CAAC;;ECbD,IAAaG,UAAU,0BAAAT,iBAAA,EAAA;IAGrB,SAAAS,UAAAA,CAAY7H,QAAyB,EAAE;EAAA,IAAA,IAAAr8D,KAAA;EACrCA,IAAAA,KAAA,GAAAyjE,iBAAA,CAAAxjE,IAAA,KAAM,CAAC,IAAA,IAAA;EAACD,IAAAA,KAAA,CAHOq8D,QAAQ,GAAA,MAAA;MAIvBr8D,KAAA,CAAKq8D,QAAQ,GAAGA,QAAQ;EAAC,IAAA,OAAAr8D,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAqiE,UAAA,EAAAT,iBAAA,CAAA;EAAA,EAAA,IAAAltE,MAAA,GAAA2tE,UAAA,CAAA1tE,SAAA;EAAAD,EAAAA,MAAA,CAED6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACd3/D,WAAmC,EACnCsc,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB;EACAoC,IAAAA,iBAAA,CAAAjtE,SAAA,CAAM4qE,gBAAgB,CAAAnhE,IAAA,CAAA,IAAA,EAACwB,WAAW,EAAEsc,UAAU,EAAErD,UAAU,EAAE2mD,aAAa,CAAA;MACzE,IAAI,CAACN,WAAW,GAAG;EACjB2C,MAAAA,SAAS,EAAE,YAAY;EACvB/pE,MAAAA,IAAI,EAAE,OAAO;EACbC,MAAAA,EAAE,EAAE,CAAC;QACLgnE,GAAG,EAAE,EAAE;EACPC,MAAAA,cAAc,EAAE,CAAC;EACjB8C,MAAAA,YAAY,EAAE,KAAK;EACnBjzD,MAAAA,OAAO,EAAE,EAAE;EACX4rD,MAAAA,aAAa,EAAEv+C,UAAU;EACzBvd,MAAAA,QAAQ,EAAE6gE,aAAa;EACvBV,MAAAA,cAAc,EAAE,KAAK;EACrBrL,MAAAA,OAAO,EAAE;OACV;IACH,CAAC;IAAA/+D,MAAA,CAED6mE,QAAQ,GAAR,SAAAA,QAAQA,CAAC97D,IAAgB,EAAEuE,MAAc,EAAW;EAClD,IAAA,OAAOA,MAAM,GAAG,EAAE,GAAGvE,IAAI,CAAC7F,MAAM;IAClC,CAAC;IAAAlF,MAAA,CAEDqnE,WAAW,GAAX,SAAAA,WAAWA,CACTp1D,KAAwB,EACxBlH,IAAgB,EAChBuE,MAAc,EACK;EACnB,IAAA,IAAM03D,WAAW,GAAGK,YAAW,CAC7Bp1D,KAAK,EACLlH,IAAI,EACJuE,MAAM,EACN,IAAI,CAACq7D,OAAO,EACZ,IAAI,CAACrD,UACP,CAAC;EACD,IAAA,IAAIN,WAAW,KAAK,EAAE,EAAE;EACtB,MAAA,IAAM9mE,MAAM,GAAG+R,KAAK,CAACkI,OAAO,CAAClI,KAAK,CAACkI,OAAO,CAACjV,MAAM,GAAG,CAAC,CAAC;QACtD,OAAO;EAAEhF,QAAAA,MAAM,EAANA,MAAM;EAAEgF,QAAAA,MAAM,EAAE8hE,WAAW;EAAEW,QAAAA,OAAO,EAAE;SAAG;EACpD,IAAA;IACF,CAAC;EAAAgG,EAAAA,UAAA,CAEM7G,KAAK,GAAZ,SAAOA,KAAKA,CAAC/7D,IAA4B,EAAW;MAClD,IAAI,CAACA,IAAI,EAAE;EACT,MAAA,OAAO,KAAK;EACd,IAAA;EAEA,IAAA,IAAM0+D,OAAO,GAAG9D,UAAU,CAAC56D,IAAI,EAAE,CAAC,CAAC;MACnC,IAAI,CAAC0+D,OAAO,EAAE;EACZ,MAAA,OAAO,KAAK;EACd,IAAA;;EAEA;EACA,IAAA,IAAMn6D,MAAM,GAAGm6D,OAAO,CAACvkE,MAAM;MAC7B,IACE6F,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IACrBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,IACzB26D,eAAe,CAACR,OAAO,CAAC,KAAKrlE,SAAS;EACtC;EACAmpE,IAAAA,YAAY,CAACxiE,IAAI,EAAEuE,MAAM,CAAC,GAAG,EAAE,EAC/B;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;EAAA,EAAA,OAAAq+D,UAAA;EAAA,CAAA,CA1E6BpD,gBAAgB,CAAA;EA6EzC,SAASlD,YAAWA,CACzBp1D,KAAwB,EACxBlH,IAAgB,EAChBxD,KAAa,EACbyU,GAAW,EACXsrD,UAAkB,EACV;EACR,EAAA,IAAI//D,KAAK,GAAG,CAAC,GAAGwD,IAAI,CAAC7F,MAAM,EAAE;MAC3B,OAAO,EAAE,CAAC;EACZ,EAAA;EAEA,EAAA,IAAI6F,IAAI,CAACxD,KAAK,CAAC,KAAK,IAAI,IAAIwD,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;MACpD,OAAO,EAAE,CAAC;EACZ,EAAA;;EAEA;IACA,IAAMqmE,gBAAgB,GAAG7iE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IAC7C,IAAIqmE,gBAAgB,IAAI,CAAC,EAAE;MACzB,OAAO,EAAE,CAAC;EACZ,EAAA;IAEA,IAAMC,eAAe,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EAC7C,EAAA,IAAMzB,UAAU,GAAGyB,eAAe,CAACD,gBAAgB,CAAC;;EAEpD;IACA,IAAME,aAAa,GAAG/iE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI;IAC5C,IAAMwmE,YAAY,GAAG,CACnB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EACvE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAC3E,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAC1E,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACrD;IAED,IAAM/G,WAAW,GAAG+G,YAAY,CAACD,aAAa,GAAG,CAAC,GAAGF,gBAAgB,CAAC,GAAG,CAAC;EAC1E,EAAA,IAAIrmE,KAAK,GAAGy/D,WAAW,GAAGj8D,IAAI,CAAC7F,MAAM,EAAE;EACrC,IAAA,OAAO,EAAE;EACX,EAAA;;EAEA;IACA,IAAMwnE,WAAW,GAAG3hE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IACxC,IAAIymE,SAAS,GAAG,CAAC;IACjB,IAAItB,WAAW,KAAK,CAAC,EAAE;EACrBsB,IAAAA,SAAS,IAAI,CAAC;EAChB,EAAA,CAAC,MAAM;EACL,IAAA,IAAItB,WAAW,GAAG,CAAC,IAAIA,WAAW,KAAK,CAAC,EAAE;EACxCsB,MAAAA,SAAS,IAAI,CAAC;EAChB,IAAA;MACA,IAAItB,WAAW,GAAG,CAAC,EAAE;EACnBsB,MAAAA,SAAS,IAAI,CAAC;EAChB,IAAA;EACF,EAAA;IAEA,IAAMC,KAAK,GACR,CAAEljE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,GAAIwD,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,KAAM,EAAE,GAAGymE,SAAU,GAAI,CAAC;EAEtE,EAAA,IAAME,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5C,EAAA,IAAM7H,YAAY,GAAG6H,WAAW,CAACxB,WAAW,CAAC,GAAGuB,KAAK;;EAErD;IACA,IAAMT,IAAI,GAAGziE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC;IACjC,IAAM4mE,KAAK,GAAGpjE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;EAEjC,EAAA,IAAM0jB,MAAM,GAAG,IAAItkB,UAAU,CAAC,CAC3BinE,gBAAgB,IAAI,CAAC,GAAKJ,IAAI,IAAI,CAAE,GAAIW,KAAK,IAAI,CAAE,EACnD,CAACA,KAAK,GAAG,CAAC,KAAK,CAAC,GACdzB,WAAW,IAAI,CAAE,GACjBuB,KAAK,IAAI,CAAE,GACXH,aAAa,IAAI,CAAE,EACrBA,aAAa,IAAI,CAAC,GAAI,IAAI,CAC5B,CAAC;EAEF,EAAA,IAAMvG,aAAa,GAAI,IAAI,GAAG6E,UAAU,GAAI,KAAK;EACjD,EAAA,IAAM5E,KAAK,GAAGxrD,GAAG,GAAGsrD,UAAU,GAAGC,aAAa;IAC9C,IAAMG,IAAI,GAAG38D,IAAI,CAACkF,QAAQ,CAAC1I,KAAK,EAAEA,KAAK,GAAGy/D,WAAW,CAAC;IAEtD/0D,KAAK,CAACgZ,MAAM,GAAGA,MAAM;IACrBhZ,KAAK,CAACo0D,YAAY,GAAGA,YAAY;IACjCp0D,KAAK,CAACq0D,UAAU,GAAG8F,UAAU;EAC7Bn6D,EAAAA,KAAK,CAACkI,OAAO,CAACpL,IAAI,CAAC;EAAE24D,IAAAA,IAAI,EAAJA,IAAI;EAAE1rD,IAAAA,GAAG,EAAEwrD;EAAM,GAAC,CAAC;EAExC,EAAA,OAAOR,WAAW;EACpB;;ECjK4C,IAEtCoH,UAAU,0BAAAlB,iBAAA,EAAA;EAAA,EAAA,SAAAkB,UAAAA,GAAA;EAAA,IAAA,OAAAlB,iBAAA,CAAA99D,KAAA,CAAA,IAAA,EAAAgP,SAAA,CAAA,IAAA,IAAA;EAAA,EAAA;IAAA9S,cAAA,CAAA8iE,UAAA,EAAAlB,iBAAA,CAAA;EAAA,EAAA,IAAAltE,MAAA,GAAAouE,UAAA,CAAAnuE,SAAA;EAAAD,EAAAA,MAAA,CACd6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACd3/D,WAAmC,EACnCsc,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB;EACAoC,IAAAA,iBAAA,CAAAjtE,SAAA,CAAM4qE,gBAAgB,CAAAnhE,IAAA,CAAA,IAAA,EAACwB,WAAW,EAAEsc,UAAU,EAAErD,UAAU,EAAE2mD,aAAa,CAAA;MACzE,IAAI,CAACN,WAAW,GAAG;EACjB2C,MAAAA,SAAS,EAAE,YAAY;EACvB/pE,MAAAA,IAAI,EAAE,OAAO;EACbC,MAAAA,EAAE,EAAE,CAAC;QACLgnE,GAAG,EAAE,EAAE;EACPC,MAAAA,cAAc,EAAE,CAAC;EACjB8C,MAAAA,YAAY,EAAE,KAAK;EACnBjzD,MAAAA,OAAO,EAAE,EAAE;EACX4rD,MAAAA,aAAa,EAAEv+C,UAAU;EACzBvd,MAAAA,QAAQ,EAAE6gE,aAAa;EACvBV,MAAAA,cAAc,EAAE,KAAK;EACrBrL,MAAAA,OAAO,EAAE;OACV;IACH,CAAC;EAAAqP,EAAAA,UAAA,CAEMtH,KAAK,GAAZ,SAAOA,OAAKA,CAAC/7D,IAA4B,EAAW;MAClD,IAAI,CAACA,IAAI,EAAE;EACT,MAAA,OAAO,KAAK;EACd,IAAA;;EAEA;EACA;EACA;EACA;EACA,IAAA,IAAM0+D,OAAO,GAAG9D,UAAU,CAAC56D,IAAI,EAAE,CAAC,CAAC;MACnC,IAAIuE,MAAM,GAAG,CAAAm6D,OAAO,oBAAPA,OAAO,CAAEvkE,MAAM,KAAI,CAAC;;EAEjC;MACA,IACEukE,OAAO,IACP1+D,IAAI,CAACuE,MAAM,CAAC,KAAK,IAAI,IACrBvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,IACzB26D,eAAe,CAACR,OAAO,CAAC,KAAKrlE,SAAS;EACtC;EACAmpE,IAAAA,YAAY,CAACxiE,IAAI,EAAEuE,MAAM,CAAC,IAAI,EAAE,EAChC;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAEA,IAAA,KAAK,IAAIpK,MAAM,GAAG6F,IAAI,CAAC7F,MAAM,EAAEoK,MAAM,GAAGpK,MAAM,EAAEoK,MAAM,EAAE,EAAE;QACxD,IAAI+9D,KAAe,CAACtiE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EACjC9M,QAAAA,MAAM,CAACzC,GAAG,CAAC,8BAA8B,CAAC;EAC1C,QAAA,OAAO,IAAI;EACb,MAAA;EACF,IAAA;EACA,IAAA,OAAO,KAAK;IACd,CAAC;IAAAC,MAAA,CAED6mE,QAAQ,GAAR,SAAAA,UAAQA,CAAC97D,IAAI,EAAEuE,MAAM,EAAE;EACrB,IAAA,OAAO+9D,QAAkB,CAACtiE,IAAI,EAAEuE,MAAM,CAAC;IACzC,CAAC;IAAAtP,MAAA,CAEDqnE,WAAW,GAAX,SAAAA,aAAWA,CAACp1D,KAAK,EAAElH,IAAI,EAAEuE,MAAM,EAAE;EAC/B,IAAA,IAAI,IAAI,CAACq7D,OAAO,KAAK,IAAI,EAAE;EACzB,MAAA;EACF,IAAA;EACA,IAAA,OAAO0C,WAAqB,CAC1Bp7D,KAAK,EACLlH,IAAI,EACJuE,MAAM,EACN,IAAI,CAACq7D,OAAO,EACZ,IAAI,CAACrD,UACP,CAAC;IACH,CAAC;EAAA,EAAA,OAAA8G,UAAA;EAAA,CAAA,CAvEsB7D,gBAAgB,CAAA;;ECkBzC,IAAM8D,iBAAiB,GAAG,gBAAgB;EAAC,IAErCC,UAAU,gBAAA,YAAA;EASd,EAAA,SAAAA,UAAAA,CAAYxI,QAAyB,EAAE76C,MAAiB,EAAE;MAAA,IAAA,CARlDooB,aAAa,GAAsB,IAAI;MAAA,IAAA,CACvCr5B,UAAU,GAAW,CAAC;EAAA,IAAA,IAAA,CACtBiR,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNwgD,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVhhD,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACV2gD,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACRmD,QAAQ,GAAA,MAAA;MAGd,IAAI,CAACtjD,MAAM,GAAGA,MAAM;EACtB,EAAA;EAAC,EAAA,IAAAjrB,MAAA,GAAAsuE,UAAA,CAAAruE,SAAA;IAAAD,MAAA,CAEM+qE,cAAc,GAArB,SAAOA,cAAcA,GAAG,CAAC,CAAC;EAAA/qE,EAAAA,MAAA,CAEnB6qE,gBAAgB,GAAvB,SAAOA,gBAAgBA,CACrB3/D,WAAmC,EACnCsc,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB;MACA,IAAMW,UAAU,GAAI,IAAI,CAACA,UAAU,GAAGtB,UAAU,CAC9C,OAAO,EACP,CACF,CAAsB;MACtB,IAAM1/C,UAAU,GAAI,IAAI,CAACA,UAAU,GAAG0/C,UAAU,CAC9C,OAAO,EACP,CACF,CAAuB;MACvB,IAAMqE,YAAY,GAAI,IAAI,CAACD,QAAQ,GAAGpE,UAAU,CAC9C,MAAM,EACN,CACF,CAA0B;MAE1B,IAAI,CAACiB,QAAQ,GAAGjB,UAAU,CAAC,KAAK,EAAE,CAAC,CAAyB;MAC5D,IAAI,CAACnwD,UAAU,GAAG,CAAC;EAEnB,IAAA,IAAI,EAAC9O,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEwB,UAAU,CAAA,EAAE;EAC5B,MAAA;EACF,IAAA;EACA,IAAA,IAAMoK,QAAQ,GAAG5F,gBAAgB,CAAChG,WAAW,CAAC;MAE9C,IAAI4L,QAAQ,CAAC3I,KAAK,EAAE;EAClB,MAAA,IAAAsgE,eAAA,GAA+C33D,QAAQ,CAAC3I,KAAK;UAArD9K,EAAE,GAAAorE,eAAA,CAAFprE,EAAE;UAAEmN,SAAS,GAAAi+D,eAAA,CAATj+D,SAAS;UAAE+B,KAAK,GAAAk8D,eAAA,CAALl8D,KAAK;UAAEC,YAAY,GAAAi8D,eAAA,CAAZj8D,YAAY;QAC1Ci5D,UAAU,CAACpoE,EAAE,GAAGA,EAAE;EAClBooE,MAAAA,UAAU,CAACj7D,SAAS,GAAGg+D,YAAY,CAACh+D,SAAS,GAAGA,SAAS;QACzDi7D,UAAU,CAACl5D,KAAK,GAAGA,KAAK;QACxBk5D,UAAU,CAACj5D,YAAY,GAAGA,YAAY;EACxC,IAAA;MAEA,IAAIsE,QAAQ,CAAC5I,KAAK,EAAE;EAClB,MAAA,IAAAwgE,eAAA,GAAiC53D,QAAQ,CAAC5I,KAAK;UAAvC7K,GAAE,GAAAqrE,eAAA,CAAFrrE,EAAE;UAAEmN,UAAS,GAAAk+D,eAAA,CAATl+D,SAAS;UAAE+B,MAAK,GAAAm8D,eAAA,CAALn8D,KAAK;QAC5BkY,UAAU,CAACpnB,EAAE,GAAGA,GAAE;QAClBonB,UAAU,CAACja,SAAS,GAAGA,UAAS;QAChCia,UAAU,CAAClY,KAAK,GAAGA,MAAK;EAC1B,IAAA;EAEAi8D,IAAAA,YAAY,CAACnrE,EAAE,GAAG2L,oBAAoB,CAACE,IAAI;MAC3Cu8D,UAAU,CAAC3zD,cAAc,GAAG,CAAC;EAC7B2zD,IAAAA,UAAU,CAACxhE,QAAQ,GAAGwgB,UAAU,CAACxgB,QAAQ,GAAG6gE,aAAa;IAC3D,CAAC;EAAA9qE,EAAAA,MAAA,CAEMirE,eAAe,GAAtB,SAAOA,eAAeA,GAAS;MAC7B,IAAI,CAAC53B,aAAa,GAAG,IAAI;IAC3B,CAAC;EAAAi7B,EAAAA,UAAA,CAEMxH,KAAK,GAAZ,SAAOA,KAAKA,CAAC/7D,IAAgB,EAAE;MAC7B,OAAO6E,WAAW,CAAC7E,IAAI,CAAC;IAC1B,CAAC;IAAA/K,MAAA,CAEMkrE,KAAK,GAAZ,SAAOA,KAAKA,CAACngE,IAAgB,EAAEiP,UAAkB,EAAiB;MAChE,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC5B;MACA,IAAI20D,YAAY,GAAG5jE,IAAI;EACvB,IAAA,IAAM0gE,UAAU,GAAG,IAAI,CAACA,UAA8B;EACtD,IAAA,IAAMC,SAAS,GAAG,IAAI,CAAC6C,QAAgC;EACvD,IAAA,IAAI,IAAI,CAACtjD,MAAM,CAACqyC,WAAW,EAAE;EAC3B;EACA;EACA;QACA,IAAI,IAAI,CAACjqB,aAAa,EAAE;UACtBs7B,YAAY,GAAGh1D,gBAAgB,CAAC,IAAI,CAAC05B,aAAa,EAAEtoC,IAAI,CAAC;EAC3D,MAAA;EACA,MAAA,IAAM6jE,aAAa,GAAGx1D,iBAAiB,CAACu1D,YAAY,CAAC;EACrD,MAAA,IAAI,CAACt7B,aAAa,GAAGu7B,aAAa,CAACr1D,SAAS;QAC5CkyD,UAAU,CAACtxD,OAAO,GAAGy0D,aAAa,CAACt1D,KAAK,IAAI,IAAI3S,UAAU,EAAE;EAC9D,IAAA,CAAC,MAAM;QACL8kE,UAAU,CAACtxD,OAAO,GAAGw0D,YAAY;EACnC,IAAA;MACA,IAAMvD,QAAQ,GAAG,IAAI,CAACyD,eAAe,CAACpD,UAAU,EAAEzxD,UAAU,CAAC;MAC7D0xD,SAAS,CAACvxD,OAAO,GAAGJ,YAAY,CAACC,UAAU,EAAEyxD,UAAU,CAAC;MAExD,OAAO;EACLA,MAAAA,UAAU,EAAVA,UAAU;QACVhhD,UAAU,EAAE,IAAI,CAACA,UAA+B;EAChD2gD,MAAAA,QAAQ,EAARA,QAAQ;QACRM,SAAS,EAAE,IAAI,CAAC6C;OACjB;IACH,CAAC;EAAAvuE,EAAAA,MAAA,CAEM6zC,KAAK,GAAZ,SAAOA,KAAKA,GAAG;EACb,IAAA,IAAM75B,UAAU,GAAG,IAAI,CAACA,UAAU;EAClC,IAAA,IAAMyxD,UAAU,GAAG,IAAI,CAACA,UAA8B;EACtD,IAAA,IAAMC,SAAS,GAAG,IAAI,CAAC6C,QAAgC;MACvD9C,UAAU,CAACtxD,OAAO,GAAG,IAAI,CAACk5B,aAAa,IAAI,IAAI1sC,UAAU,EAAE;MAC3D,IAAI,CAAC0sC,aAAa,GAAG,IAAI;MAEzB,IAAM+3B,QAAQ,GAAG,IAAI,CAACyD,eAAe,CAACpD,UAAU,EAAE,IAAI,CAACzxD,UAAU,CAAC;MAClE0xD,SAAS,CAACvxD,OAAO,GAAGJ,YAAY,CAACC,UAAU,EAAEyxD,UAAU,CAAC;MAExD,OAAO;EACLA,MAAAA,UAAU,EAAVA,UAAU;QACVhhD,UAAU,EAAE0/C,UAAU,EAAuB;EAC7CiB,MAAAA,QAAQ,EAARA,QAAQ;QACRM,SAAS,EAAEvB,UAAU;OACtB;IACH,CAAC;IAAAnqE,MAAA,CAEO6uE,eAAe,GAAvB,SAAQA,eAAeA,CACrBpD,UAA4B,EAC5BzxD,UAAkB,EACI;EAAA,IAAA,IAAAvQ,KAAA,GAAA,IAAA;EACtB,IAAA,IAAM2hE,QAAQ,GAAG,IAAI,CAACA,QAAgC;EACtD,IAAA,IAAIK,UAAU,CAACtxD,OAAO,CAACjV,MAAM,EAAE;QAC7B,IAAM4pE,KAAK,GAAGh/D,OAAO,CAAC27D,UAAU,CAACtxD,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC;EACnD,MAAA,IAAI20D,KAAK,EAAE;EACTA,QAAAA,KAAK,CAAC9qE,OAAO,CAAC,UAAC+G,IAAgB,EAAK;EAClC,UAAA,IAAMgkE,QAAQ,GAAGvxD,SAAS,CAACzS,IAAI,CAAC;YAChC,IAAIsjE,iBAAiB,CAAC3uD,IAAI,CAACqvD,QAAQ,CAACtxD,WAAW,CAAC,EAAE;EAChD,YAAA,IAAMzB,GAAG,GAAGgzD,gBAAgB,CAACD,QAAQ,EAAE/0D,UAAU,CAAC;EAClD,YAAA,IAAI/P,QAAQ,GACV8kE,QAAQ,CAAClxD,aAAa,KAAK,UAAU,GACjCxf,MAAM,CAACi5B,iBAAiB,GACxBy3C,QAAQ,CAAClxD,aAAa,GAAGkxD,QAAQ,CAACrxD,SAAS;EACjD;cACA,IAAIzT,QAAQ,IAAI,KAAK,EAAE;gBACrBA,QAAQ,GAAG5L,MAAM,CAACi5B,iBAAiB;EACrC,YAAA;EACA,YAAA,IAAMrZ,OAAO,GAAG8wD,QAAQ,CAAC9wD,OAAO;EAChCmtD,YAAAA,QAAQ,CAACjxD,OAAO,CAACpL,IAAI,CAAC;EACpBhE,cAAAA,IAAI,EAAEkT,OAAO;gBACbjY,GAAG,EAAEiY,OAAO,CAACvR,UAAU;EACvB4+D,cAAAA,GAAG,EAAEtvD,GAAG;EACRA,cAAAA,GAAG,EAAEA,GAAG;gBACR5Y,IAAI,EAAE8mE,cAAc,CAAC+E,IAAI;EACzBhlE,cAAAA,QAAQ,EAAEA;EACZ,aAAC,CAAC;EACJ,UAAA,CAAC,MAAM,IACLR,KAAI,CAACwhB,MAAM,CAACikD,qBAAqB,IACjCH,QAAQ,CAACtxD,WAAW,CAACsI,UAAU,CAAC,yBAAyB,CAAC,EAC1D;EACA,YAAA,IAAM/J,IAAG,GAAGgzD,gBAAgB,CAACD,QAAQ,EAAE/0D,UAAU,CAAC;EAClDoxD,YAAAA,QAAQ,CAACjxD,OAAO,CAACpL,IAAI,CAAC;gBACpBhE,IAAI,EAAEgkE,QAAQ,CAAC9wD,OAAO;EACtBjY,cAAAA,GAAG,EAAE+oE,QAAQ,CAAC9wD,OAAO,CAACvR,UAAU;EAChC4+D,cAAAA,GAAG,EAAEtvD,IAAG;EACRA,cAAAA,GAAG,EAAEA,IAAG;gBACR5Y,IAAI,EAAE8mE,cAAc,CAACiF,OAAO;gBAC5BllE,QAAQ,EAAE5L,MAAM,CAACi5B;EACnB,aAAC,CAAC;EACJ,UAAA;EACF,QAAA,CAAC,CAAC;EACJ,MAAA;EACF,IAAA;EACA,IAAA,OAAO8zC,QAAQ;IACjB,CAAC;IAAAprE,MAAA,CAED2rE,cAAc,GAAd,SAAAA,cAAcA,CACZ5gE,IAAgB,EAChB87C,OAAgB,EAChB7sC,UAAkB,EACM;MACxB,OAAO2O,OAAO,CAACorB,MAAM,CACnB,IAAI7rB,KAAK,CAAC,wDAAwD,CACpE,CAAC;IACH,CAAC;EAAAloB,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;EACR;MACA,IAAI,CAAC+oB,MAAM,GAAG,IAAI;MAClB,IAAI,CAACooB,aAAa,GAAG,IAAI;EACzB,IAAA,IAAI,CAACo4B,UAAU,GACb,IAAI,CAAChhD,UAAU,GACf,IAAI,CAAC2gD,QAAQ,GACb,IAAI,CAACmD,QAAQ,GACXnqE,SAAS;IACf,CAAC;EAAA,EAAA,OAAAkqE,UAAA;EAAA,CAAA,EAAA;EAGH,SAASU,gBAAgBA,CACvBD,QAA0B,EAC1B/0D,UAAkB,EACV;IACR,OAAOxN,cAAA,CAAgBuiE,QAAQ,CAACnxD,gBAAgB,CAAC,GAC5CmxD,QAAQ,CAACnxD,gBAAgB,GAAcmxD,QAAQ,CAACrxD,SAAS,GAC1D1D,UAAU,GACP+0D,QAAQ,CAACpxD,qBAAqB,GAAcoxD,QAAQ,CAACrxD,SAAS;EACvE;;ECnOA;EACA;EACA;;EAIgD,IAW1C0xD,kBAAkB,gBAAA,YAAA;EAItB,EAAA,SAAAA,mBAAYtJ,QAAyB,EAAE76C,MAAiB,EAAE47B,OAAgB,EAAE;EAAA,IAAA,IAAA,CAHpEA,OAAO,GAAA,MAAA;EAAA,IAAA,IAAA,CACPoQ,SAAS,GAAA,MAAA;MAGf,IAAI,CAACpQ,OAAO,GAAGA,OAAO;EACtB,IAAA,IAAI,CAACoQ,SAAS,GAAG,IAAInkB,SAAS,CAAC7nB,MAAM,EAAE;EACrCgoB,MAAAA,kBAAkB,EAAE;EACtB,KAAC,CAAC;EACJ,EAAA;EAAC,EAAA,IAAAjzC,MAAA,GAAAovE,kBAAA,CAAAnvE,SAAA;EAAAD,EAAAA,MAAA,CAEDqvE,aAAa,GAAb,SAAAA,aAAaA,CAACC,aAAuC,EAAwB;MAC3E,OAAO,IAAI,CAACrY,SAAS,CAAC5oB,OAAO,CAC3BihC,aAAa,EACb,IAAI,CAACzoB,OAAO,CAACzkD,GAAG,CAAC0E,MAAM,EACvB,IAAI,CAAC+/C,OAAO,CAAC3Y,EAAE,CAACpnC,MAAM,EACtB+mC,gBAAgB,CAACC,GACnB,CAAC;EACH,EAAA;;EAEA;EAAA;IAAA9tC,MAAA,CACQuvE,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBp1D,OAAyB,EACzBlC,WAAmB,EACnBu3D,QAAoB,EACpB;EAAA,IAAA,IAAA/lE,KAAA,GAAA,IAAA;EACA,IAAA,IAAMgmE,OAAO,GAAGt1D,OAAO,CAAClC,WAAW,CAAC,CAACyvD,IAAI;EACzC,IAAA,IAAI+H,OAAO,CAACvqE,MAAM,IAAI,EAAE,EAAE;EACxB;EACA;EACA,MAAA;EACF,IAAA;EACA,IAAA,IAAMoqE,aAAa,GAAGG,OAAO,CAACx/D,QAAQ,CACpC,EAAE,EACFw/D,OAAO,CAACvqE,MAAM,GAAIuqE,OAAO,CAACvqE,MAAM,GAAG,EACrC,CAAC;EACD,IAAA,IAAMwqE,eAAe,GAAGJ,aAAa,CAACxoE,MAAM,CAACrJ,KAAK,CAChD6xE,aAAa,CAAC51D,UAAU,EACxB41D,aAAa,CAAC51D,UAAU,GAAG41D,aAAa,CAACpqE,MAC3C,CAAC;MAED,IAAI,CAACmqE,aAAa,CAACK,eAAe,CAAC,CAChChmD,IAAI,CAAC,UAACimD,eAA4B,EAAK;EACtC,MAAA,IAAMpU,aAAa,GAAG,IAAI50D,UAAU,CAACgpE,eAAe,CAAC;EACrDF,MAAAA,OAAO,CAACzmE,GAAG,CAACuyD,aAAa,EAAE,EAAE,CAAC;QAE9B,IAAI,CAAC9xD,KAAI,CAACwtD,SAAS,CAACrjB,MAAM,EAAE,EAAE;UAC5BnqC,KAAI,CAACmmE,iBAAiB,CAACz1D,OAAO,EAAElC,WAAW,GAAG,CAAC,EAAEu3D,QAAQ,CAAC;EAC5D,MAAA;EACF,IAAA,CAAC,CAAC,CACD7lD,KAAK,CAAC6lD,QAAQ,CAAC;IACpB,CAAC;IAAAxvE,MAAA,CAED4vE,iBAAiB,GAAjB,SAAAA,iBAAiBA,CACfz1D,OAAyB,EACzBlC,WAAmB,EACnBu3D,QAAoB,EACpB;MACA,QAASv3D,WAAW,EAAE,EAAE;EACtB,MAAA,IAAIA,WAAW,IAAIkC,OAAO,CAACjV,MAAM,EAAE;EACjCsqE,QAAAA,QAAQ,EAAE;EACV,QAAA;EACF,MAAA;QAEA,IAAIr1D,OAAO,CAAClC,WAAW,CAAC,CAACyvD,IAAI,CAACxiE,MAAM,GAAG,EAAE,EAAE;EACzC,QAAA;EACF,MAAA;QAEA,IAAI,CAACqqE,gBAAgB,CAACp1D,OAAO,EAAElC,WAAW,EAAEu3D,QAAQ,CAAC;QAErD,IAAI,CAAC,IAAI,CAACvY,SAAS,CAACrjB,MAAM,EAAE,EAAE;EAC5B,QAAA;EACF,MAAA;EACF,IAAA;EACF,EAAA;;EAEA;EAAA;EAAA5zC,EAAAA,MAAA,CACA6vE,mBAAmB,GAAnB,SAAAA,mBAAmBA,CAACC,WAAuB,EAAE;EAC3C,IAAA,IAAMC,gBAAgB,GACpB9xE,IAAI,CAACE,KAAK,CAAC,CAAC2xE,WAAW,CAAC5qE,MAAM,GAAG,EAAE,IAAI,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE;EACvD,IAAA,IAAMoqE,aAAa,GAAG,IAAIU,SAAS,CAACD,gBAAgB,CAAC;MACrD,IAAIE,SAAS,GAAG,CAAC;MACjB,KACE,IAAIC,QAAQ,GAAG,EAAE,EACjBA,QAAQ,GAAGJ,WAAW,CAAC5qE,MAAM,GAAG,EAAE,EAClCgrE,QAAQ,IAAI,GAAG,EAAED,SAAS,IAAI,EAAE,EAChC;EACAX,MAAAA,aAAa,CAACtmE,GAAG,CACf8mE,WAAW,CAAC7/D,QAAQ,CAACigE,QAAQ,EAAEA,QAAQ,GAAG,EAAE,CAAC,EAC7CD,SACF,CAAC;EACH,IAAA;EAEA,IAAA,OAAOX,aAAa;IACtB,CAAC;IAAAtvE,MAAA,CAEDmwE,mBAAmB,GAAnB,SAAAA,mBAAmBA,CAACL,WAAuB,EAAEvU,aAA8B,EAAE;EAC3E,IAAA,IAAM6U,kBAAkB,GAAG,IAAIzpE,UAAU,CAAC40D,aAAa,CAAC;MACxD,IAAI2U,QAAQ,GAAG,CAAC;MAChB,KACE,IAAID,SAAS,GAAG,EAAE,EAClBA,SAAS,GAAGH,WAAW,CAAC5qE,MAAM,GAAG,EAAE,EACnC+qE,SAAS,IAAI,GAAG,EAAEC,QAAQ,IAAI,EAAE,EAChC;EACAJ,MAAAA,WAAW,CAAC9mE,GAAG,CACbonE,kBAAkB,CAACngE,QAAQ,CAACigE,QAAQ,EAAEA,QAAQ,GAAG,EAAE,CAAC,EACpDD,SACF,CAAC;EACH,IAAA;EAEA,IAAA,OAAOH,WAAW;IACpB,CAAC;EAAA9vE,EAAAA,MAAA,CAEDqwE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACdl2D,OAAsB,EACtBlC,WAAmB,EACnBq4D,SAAiB,EACjBd,QAAoB,EACpBC,OAAwB,EACxB;EAAA,IAAA,IAAA9hE,MAAA,GAAA,IAAA;EACA,IAAA,IAAMmiE,WAAW,GAAG7zD,UAAU,CAACwzD,OAAO,CAAC1kE,IAAI,CAAC;EAC5C,IAAA,IAAMukE,aAAa,GAAG,IAAI,CAACO,mBAAmB,CAACC,WAAW,CAAC;EAE3D,IAAA,IAAI,CAACT,aAAa,CAACC,aAAa,CAACxoE,MAAM,CAAC,CACrC4iB,IAAI,CAAC,UAACimD,eAAe,EAAK;QACzBF,OAAO,CAAC1kE,IAAI,GAAG4C,MAAI,CAACwiE,mBAAmB,CAACL,WAAW,EAAEH,eAAe,CAAC;QAErE,IAAI,CAAChiE,MAAI,CAACspD,SAAS,CAACrjB,MAAM,EAAE,EAAE;EAC5BjmC,QAAAA,MAAI,CAAC4iE,iBAAiB,CAACp2D,OAAO,EAAElC,WAAW,EAAEq4D,SAAS,GAAG,CAAC,EAAEd,QAAQ,CAAC;EACvE,MAAA;EACF,IAAA,CAAC,CAAC,CACD7lD,KAAK,CAAC6lD,QAAQ,CAAC;IACpB,CAAC;EAAAxvE,EAAAA,MAAA,CAEDuwE,iBAAiB,GAAjB,SAAAA,iBAAiBA,CACfp2D,OAAyC,EACzClC,WAAmB,EACnBq4D,SAAiB,EACjBd,QAAoB,EACpB;MACA,IAAIr1D,OAAO,YAAYxT,UAAU,EAAE;EACjC,MAAA,MAAM,IAAIuhB,KAAK,CAAC,2CAA2C,CAAC;EAC9D,IAAA;EAEA,IAAA,QAASjQ,WAAW,EAAE,EAAEq4D,SAAS,GAAG,CAAC,EAAE;EACrC,MAAA,IAAIr4D,WAAW,IAAIkC,OAAO,CAACjV,MAAM,EAAE;EACjCsqE,QAAAA,QAAQ,EAAE;EACV,QAAA;EACF,MAAA;EAEA,MAAA,IAAMgB,QAAQ,GAAGr2D,OAAO,CAAClC,WAAW,CAAC,CAACw4D,KAAK;QAC3C,QAASH,SAAS,EAAE,EAAE;EACpB,QAAA,IAAIA,SAAS,IAAIE,QAAQ,CAACtrE,MAAM,EAAE;EAChC,UAAA;EACF,QAAA;EAEA,QAAA,IAAMuqE,OAAO,GAAGe,QAAQ,CAACF,SAAS,CAAC;EACnC,QAAA,IACEb,OAAO,CAAC1kE,IAAI,CAAC7F,MAAM,IAAI,EAAE,IACxBuqE,OAAO,CAACrsE,IAAI,KAAK,CAAC,IAAIqsE,OAAO,CAACrsE,IAAI,KAAK,CAAE,EAC1C;EACA,UAAA;EACF,QAAA;EAEA,QAAA,IAAI,CAACitE,gBAAgB,CACnBl2D,OAAO,EACPlC,WAAW,EACXq4D,SAAS,EACTd,QAAQ,EACRC,OACF,CAAC;UAED,IAAI,CAAC,IAAI,CAACxY,SAAS,CAACrjB,MAAM,EAAE,EAAE;EAC5B,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;EAAA,EAAA,OAAAw7B,kBAAA;EAAA,CAAA,EAAA;;EClMsD,IAU1CsB,eAAe,gBAAA,YAAA;EAAA,EAAA,SAAAA,eAAAA,GAAA;MAAA,IAAA,CAClBC,WAAW,GAA6B,IAAI;EAAA,EAAA;EAAA,EAAA,IAAA3wE,MAAA,GAAA0wE,eAAA,CAAAzwE,SAAA;IAAAD,MAAA,CAE5C4wE,iBAAiB,GAA3B,SAAUA,iBAAiBA,CACzBxuE,GAAY,EACZ4Z,GAAuB,EACvBsvD,GAAuB,EACJ;MACnB,OAAO;EACLlpE,MAAAA,GAAG,EAAHA,GAAG;EACHomE,MAAAA,KAAK,EAAE,KAAK;EACZxsD,MAAAA,GAAG,EAAHA,GAAG;EACHsvD,MAAAA,GAAG,EAAHA,GAAG;EACHmF,MAAAA,KAAK,EAAE,EAAE;EACTvrE,MAAAA,MAAM,EAAE;OACT;IACH,CAAC;EAAAlF,EAAAA,MAAA,CAES6wE,cAAc,GAAxB,SAAUA,cAAcA,CACtB12D,OAAsB,EACO;EAAA,IAAA,IAAA22D,YAAA;EAC7B,IAAA,IAAIH,WAAW,GAAG,IAAI,CAACA,WAAW;EAClC,IAAA,IAAII,QAAqC;EACzC;MACA,IAAI,CAACJ,WAAW,IAAIA,WAAW,CAACF,KAAK,CAACvrE,MAAM,KAAK,CAAC,EAAE;QAClDyrE,WAAW,GAAGx2D,OAAO,CAACA,OAAO,CAACjV,MAAM,GAAG,CAAC,CAAC;EAC3C,IAAA;EACA,IAAA,IAAA,CAAA4rE,YAAA,GAAIH,WAAW,aAAXG,YAAA,CAAaL,KAAK,EAAE;EACtB,MAAA,IAAMA,KAAK,GAAGE,WAAW,CAACF,KAAK;QAC/BM,QAAQ,GAAGN,KAAK,CAACA,KAAK,CAACvrE,MAAM,GAAG,CAAC,CAAC;EACpC,IAAA;EACA,IAAA,OAAO6rE,QAAQ;IACjB,CAAC;IAAA/wE,MAAA,CAESgxE,cAAc,GAAxB,SAAUA,cAAcA,CACtBL,WAA8B,EAC9BlF,UAA6B,EAC7B;MACA,IAAIkF,WAAW,CAACF,KAAK,CAACvrE,MAAM,IAAIyrE,WAAW,CAACnI,KAAK,EAAE;EACjD;EACA,MAAA,IAAImI,WAAW,CAAC30D,GAAG,KAAK5X,SAAS,EAAE;EACjC,QAAA,IAAM+V,OAAO,GAAGsxD,UAAU,CAACtxD,OAAO;EAClC,QAAA,IAAM82D,SAAS,GAAG92D,OAAO,CAACjV,MAAM;EAChC,QAAA,IAAI+rE,SAAS,EAAE;EACb,UAAA,IAAMC,UAAU,GAAG/2D,OAAO,CAAC82D,SAAS,GAAG,CAAC,CAAC;EACzCN,UAAAA,WAAW,CAAC30D,GAAG,GAAGk1D,UAAU,CAACl1D,GAAG;EAChC20D,UAAAA,WAAW,CAACrF,GAAG,GAAG4F,UAAU,CAAC5F,GAAG;EAClC,QAAA,CAAC,MAAM;EACL;YACAG,UAAU,CAAC1M,OAAO,EAAE;EACpB,UAAA;EACF,QAAA;EACF,MAAA;EACA0M,MAAAA,UAAU,CAACtxD,OAAO,CAACpL,IAAI,CAAC4hE,WAA0B,CAAC;EACrD,IAAA;IACF,CAAC;IAAA3wE,MAAA,CAWSmxE,SAAS,GAAnB,SAAUA,SAASA,CACjBl/D,KAAwB,EACxBzM,KAAiB,EACjB4rE,YAAqB,EAKpB;EACD,IAAA,IAAMprE,GAAG,GAAGR,KAAK,CAACkH,UAAU;EAC5B,IAAA,IAAI4qD,KAAK,GAAGrlD,KAAK,CAACo/D,SAAS,IAAI,CAAC;MAChC,IAAMC,SAAS,GAAGha,KAAK;MACvB,IAAMmZ,KAAwB,GAAG,EAAE;MACnC,IAAIrqE,CAAC,GAAG,CAAC;EACT,IAAA,IAAI7H,KAAa;EACjB,IAAA,IAAIgzE,QAAgB;EACpB,IAAA,IAAIC,QAAgB;MACpB,IAAIC,aAAa,GAAG,EAAE;MACtB,IAAIC,YAAoB,GAAG,CAAC;EAC5B;;EAEA,IAAA,IAAIpa,KAAK,KAAK,EAAE,EAAE;EAChB;EACAma,MAAAA,aAAa,GAAG,CAAC;EACjB;QACAC,YAAY,GAAG,IAAI,CAACC,WAAW,CAACnsE,KAAK,EAAE,CAAC,CAAC;EACzC8xD,MAAAA,KAAK,GAAG,CAAC;EACTlxD,MAAAA,CAAC,GAAG,CAAC;EACP,IAAA;MAEA,OAAOA,CAAC,GAAGJ,GAAG,EAAE;EACdzH,MAAAA,KAAK,GAAGiH,KAAK,CAACY,CAAC,EAAE,CAAC;EAClB;QACA,IAAI,CAACkxD,KAAK,EAAE;EACVA,QAAAA,KAAK,GAAG/4D,KAAK,GAAG,CAAC,GAAG,CAAC;EACrB,QAAA;EACF,MAAA;QACA,IAAI+4D,KAAK,KAAK,CAAC,EAAE;EACfA,QAAAA,KAAK,GAAG/4D,KAAK,GAAG,CAAC,GAAG,CAAC;EACrB,QAAA;EACF,MAAA;EACA;QACA,IAAI,CAACA,KAAK,EAAE;EACV+4D,QAAAA,KAAK,GAAG,CAAC;EACX,MAAA,CAAC,MAAM,IAAI/4D,KAAK,KAAK,CAAC,EAAE;EACtBgzE,QAAAA,QAAQ,GAAGnrE,CAAC,GAAGkxD,KAAK,GAAG,CAAC;UACxB,IAAIma,aAAa,IAAI,CAAC,EAAE;EACtB,UAAA,IAAM/J,IAAqB,GAAG;cAC5B38D,IAAI,EAAEvF,KAAK,CAACyK,QAAQ,CAACwhE,aAAa,EAAEF,QAAQ,CAAC;EAC7CnuE,YAAAA,IAAI,EAAEsuE;aACP;EACD;EACAjB,UAAAA,KAAK,CAAC1hE,IAAI,CAAC24D,IAAI,CAAC;EAClB,QAAA,CAAC,MAAM;EACL;EACA;EACA;EACA;YACA,IAAMqJ,QAAQ,GAAG,IAAI,CAACF,cAAc,CAAC5+D,KAAK,CAACkI,OAAO,CAAC;EACnD,UAAA,IAAI42D,QAAQ,EAAE;EACZ,YAAA,IAAIO,SAAS,IAAIlrE,CAAC,IAAI,CAAC,GAAGkrE,SAAS,EAAE;EACnC;EACA;EACA;gBACA,IAAIP,QAAQ,CAACzZ,KAAK,EAAE;EAClB;EACAyZ,gBAAAA,QAAQ,CAAChmE,IAAI,GAAGgmE,QAAQ,CAAChmE,IAAI,CAACkF,QAAQ,CACpC,CAAC,EACD8gE,QAAQ,CAAChmE,IAAI,CAAC2B,UAAU,GAAG4kE,SAC7B,CAAC;EACH,cAAA;EACF,YAAA;EACA;;cAEA,IAAIC,QAAQ,GAAG,CAAC,EAAE;EAChB;EACAR,cAAAA,QAAQ,CAAChmE,IAAI,GAAG4O,gBAAgB,CAC9Bo3D,QAAQ,CAAChmE,IAAI,EACbvF,KAAK,CAACyK,QAAQ,CAAC,CAAC,EAAEshE,QAAQ,CAC5B,CAAC;gBACDR,QAAQ,CAACzZ,KAAK,GAAG,CAAC;EACpB,YAAA;EACF,UAAA;EACF,QAAA;EACA;UACA,IAAIlxD,CAAC,GAAGJ,GAAG,EAAE;YACXwrE,QAAQ,GAAG,IAAI,CAACG,WAAW,CAACnsE,KAAK,EAAEY,CAAC,CAAC;EACrC;EACAqrE,UAAAA,aAAa,GAAGrrE,CAAC;EACjBsrE,UAAAA,YAAY,GAAGF,QAAQ;EACvBla,UAAAA,KAAK,GAAG,CAAC;EACX,QAAA,CAAC,MAAM;EACL;YACAA,KAAK,GAAG,EAAE;EACZ,QAAA;EACF,MAAA,CAAC,MAAM;EACLA,QAAAA,KAAK,GAAG,CAAC;EACX,MAAA;EACF,IAAA;EACA,IAAA,IAAIma,aAAa,IAAI,CAAC,IAAIna,KAAK,IAAI,CAAC,EAAE;EACpC,MAAA,IAAMoQ,KAAqB,GAAG;UAC5B38D,IAAI,EAAEvF,KAAK,CAACyK,QAAQ,CAACwhE,aAAa,EAAEzrE,GAAG,CAAC;EACxC5C,QAAAA,IAAI,EAAEsuE,YAAY;EAClBpa,QAAAA,KAAK,EAAEA;SACR;EACDmZ,MAAAA,KAAK,CAAC1hE,IAAI,CAAC24D,KAAI,CAAC;EAChB;EACF,IAAA;EACA;EACA,IAAA,IAAI+I,KAAK,CAACvrE,MAAM,KAAK,CAAC,EAAE;EACtB;QACA,IAAM6rE,SAAQ,GAAG,IAAI,CAACF,cAAc,CAAC5+D,KAAK,CAACkI,OAAO,CAAC;EACnD,MAAA,IAAI42D,SAAQ,EAAE;UACZA,SAAQ,CAAChmE,IAAI,GAAG4O,gBAAgB,CAACo3D,SAAQ,CAAChmE,IAAI,EAAEvF,KAAK,CAAC;EACxD,MAAA;EACF,IAAA;MACAyM,KAAK,CAACo/D,SAAS,GAAG/Z,KAAK;EACvB,IAAA,OAAOmZ,KAAK;IACd,CAAC;EAAA,EAAA,OAAAC,eAAA;EAAA,CAAA,EAAA;;EClMH;EACA;EACA;;EAE4C,IAEtCkB,SAAS,gBAAA,YAAA;IAMb,SAAAA,SAAAA,CAAY7mE,IAAgB,EAAE;EAAA,IAAA,IAAA,CALtBA,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACL8mE,cAAc,GAAA,MAAA;EAAA,IAAA,IAAA,CACb7gC,IAAI,GAAA,MAAA;EAAA,IAAA,IAAA,CACJ8gC,aAAa,GAAA,MAAA;MAGnB,IAAI,CAAC/mE,IAAI,GAAGA,IAAI;EAChB;EACA,IAAA,IAAI,CAAC8mE,cAAc,GAAG9mE,IAAI,CAAC2B,UAAU;EACrC;EACA,IAAA,IAAI,CAACskC,IAAI,GAAG,CAAC,CAAC;EACd;EACA,IAAA,IAAI,CAAC8gC,aAAa,GAAG,CAAC,CAAC;EACzB,EAAA;;EAEA;EAAA,EAAA,IAAA9xE,MAAA,GAAA4xE,SAAA,CAAA3xE,SAAA;EAAAD,EAAAA,MAAA,CACA+xE,QAAQ,GAAR,SAAAA,QAAQA,GAAS;EACf,IAAA,IAAMhnE,IAAI,GAAG,IAAI,CAACA,IAAI;EACtB,IAAA,IAAM8mE,cAAc,GAAG,IAAI,CAACA,cAAc;EAC1C,IAAA,IAAM1nC,QAAQ,GAAGp/B,IAAI,CAAC2B,UAAU,GAAGmlE,cAAc;EACjD,IAAA,IAAMG,YAAY,GAAG,IAAIrrE,UAAU,CAAC,CAAC,CAAC;MACtC,IAAMsrE,cAAc,GAAGh0E,IAAI,CAAC+D,GAAG,CAAC,CAAC,EAAE6vE,cAAc,CAAC;MAClD,IAAII,cAAc,KAAK,CAAC,EAAE;EACxB,MAAA,MAAM,IAAI/pD,KAAK,CAAC,oBAAoB,CAAC;EACvC,IAAA;EAEA8pD,IAAAA,YAAY,CAAChpE,GAAG,CAAC+B,IAAI,CAACkF,QAAQ,CAACk6B,QAAQ,EAAEA,QAAQ,GAAG8nC,cAAc,CAAC,CAAC;EACpE,IAAA,IAAI,CAACjhC,IAAI,GAAG,IAAInyB,QAAQ,CAACmzD,YAAY,CAAClrE,MAAM,CAAC,CAACuY,SAAS,CAAC,CAAC,CAAC;EAC1D;EACA,IAAA,IAAI,CAACyyD,aAAa,GAAGG,cAAc,GAAG,CAAC;MACvC,IAAI,CAACJ,cAAc,IAAII,cAAc;EACvC,EAAA;;EAEA;EAAA;EAAAjyE,EAAAA,MAAA,CACAkyE,QAAQ,GAAR,SAAAA,QAAQA,CAACC,KAAa,EAAQ;MAC5B,IAAIC,SAAS,CAAC;EACdD,IAAAA,KAAK,GAAGl0E,IAAI,CAAC+D,GAAG,CAACmwE,KAAK,EAAE,IAAI,CAACN,cAAc,GAAG,CAAC,GAAG,IAAI,CAACC,aAAa,CAAC;EACrE,IAAA,IAAI,IAAI,CAACA,aAAa,GAAGK,KAAK,EAAE;QAC9B,IAAI,CAACnhC,IAAI,KAAKmhC,KAAK;QACnB,IAAI,CAACL,aAAa,IAAIK,KAAK;EAC7B,IAAA,CAAC,MAAM;QACLA,KAAK,IAAI,IAAI,CAACL,aAAa;QAC3BM,SAAS,GAAGD,KAAK,IAAI,CAAC;QACtBA,KAAK,IAAIC,SAAS,IAAI,CAAC;QACvB,IAAI,CAACP,cAAc,IAAIO,SAAS;QAChC,IAAI,CAACL,QAAQ,EAAE;QACf,IAAI,CAAC/gC,IAAI,KAAKmhC,KAAK;QACnB,IAAI,CAACL,aAAa,IAAIK,KAAK;EAC7B,IAAA;EACF,EAAA;;EAEA;EAAA;EAAAnyE,EAAAA,MAAA,CACAqyE,QAAQ,GAAR,SAAAA,QAAQA,CAACxiE,IAAY,EAAU;EAC7B,IAAA,IAAI69D,IAAI,GAAGzvE,IAAI,CAAC+D,GAAG,CAAC,IAAI,CAAC8vE,aAAa,EAAEjiE,IAAI,CAAC,CAAC;MAC9C,IAAMyiE,IAAI,GAAG,IAAI,CAACthC,IAAI,KAAM,EAAE,GAAG08B,IAAK,CAAC;MACvC,IAAI79D,IAAI,GAAG,EAAE,EAAE;EACbrN,MAAAA,MAAM,CAACtF,KAAK,CAAC,yCAAyC,CAAC;EACzD,IAAA;MAEA,IAAI,CAAC40E,aAAa,IAAIpE,IAAI;EAC1B,IAAA,IAAI,IAAI,CAACoE,aAAa,GAAG,CAAC,EAAE;QAC1B,IAAI,CAAC9gC,IAAI,KAAK08B,IAAI;EACpB,IAAA,CAAC,MAAM,IAAI,IAAI,CAACmE,cAAc,GAAG,CAAC,EAAE;QAClC,IAAI,CAACE,QAAQ,EAAE;EACjB,IAAA,CAAC,MAAM;EACL,MAAA,MAAM,IAAI7pD,KAAK,CAAC,mBAAmB,CAAC;EACtC,IAAA;MAEAwlD,IAAI,GAAG79D,IAAI,GAAG69D,IAAI;EAClB,IAAA,IAAIA,IAAI,GAAG,CAAC,IAAI,IAAI,CAACoE,aAAa,EAAE;QAClC,OAAQQ,IAAI,IAAI5E,IAAI,GAAI,IAAI,CAAC2E,QAAQ,CAAC3E,IAAI,CAAC;EAC7C,IAAA,CAAC,MAAM;EACL,MAAA,OAAO4E,IAAI;EACb,IAAA;EACF,EAAA;;EAEA;EAAA;EAAAtyE,EAAAA,MAAA,CACAuyE,MAAM,GAAN,SAAAA,MAAMA,GAAW;MACf,IAAIC,gBAAgB,CAAC;EACrB,IAAA,KACEA,gBAAgB,GAAG,CAAC,EACpBA,gBAAgB,GAAG,IAAI,CAACV,aAAa,EACrC,EAAEU,gBAAgB,EAClB;QACA,IAAI,CAAC,IAAI,CAACxhC,IAAI,GAAI,UAAU,KAAKwhC,gBAAiB,MAAM,CAAC,EAAE;EACzD;UACA,IAAI,CAACxhC,IAAI,KAAKwhC,gBAAgB;UAC9B,IAAI,CAACV,aAAa,IAAIU,gBAAgB;EACtC,QAAA,OAAOA,gBAAgB;EACzB,MAAA;EACF,IAAA;EACA;MACA,IAAI,CAACT,QAAQ,EAAE;EACf,IAAA,OAAOS,gBAAgB,GAAG,IAAI,CAACD,MAAM,EAAE;EACzC,EAAA;;EAEA;EAAA;EAAAvyE,EAAAA,MAAA,CACAyyE,OAAO,GAAP,SAAAA,OAAOA,GAAS;MACd,IAAI,CAACP,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACK,MAAM,EAAE,CAAC;EAClC,EAAA;;EAEA;EAAA;EAAAvyE,EAAAA,MAAA,CACA0yE,MAAM,GAAN,SAAAA,MAAMA,GAAS;MACb,IAAI,CAACR,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACK,MAAM,EAAE,CAAC;EAClC,EAAA;;EAEA;EAAA;EAAAvyE,EAAAA,MAAA,CACA2yE,OAAO,GAAP,SAAAA,OAAOA,GAAW;MAChB,IAAMC,GAAG,GAAG,IAAI,CAACL,MAAM,EAAE,CAAC;MAC1B,OAAO,IAAI,CAACF,QAAQ,CAACO,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;EACnC,EAAA;;EAEA;EAAA;EAAA5yE,EAAAA,MAAA,CACA6yE,MAAM,GAAN,SAAAA,MAAMA,GAAW;MACf,IAAMP,IAAI,GAAG,IAAI,CAACK,OAAO,EAAE,CAAC;MAC5B,IAAI,IAAI,GAAGL,IAAI,EAAE;EACf;EACA,MAAA,OAAQ,CAAC,GAAGA,IAAI,KAAM,CAAC,CAAC;EAC1B,IAAA,CAAC,MAAM;QACL,OAAO,EAAE,IAAIA,IAAI,KAAK,CAAC,CAAC,CAAC;EAC3B,IAAA;EACF,EAAA;;EAEA;EACA;EAAA;EAAAtyE,EAAAA,MAAA,CACA8yE,WAAW,GAAX,SAAAA,WAAWA,GAAY;EACrB,IAAA,OAAO,IAAI,CAACT,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;EAC/B,EAAA;;EAEA;EAAA;EAAAryE,EAAAA,MAAA,CACA+yE,SAAS,GAAT,SAAAA,SAASA,GAAW;EAClB,IAAA,OAAO,IAAI,CAACV,QAAQ,CAAC,CAAC,CAAC;EACzB,EAAA;;EAEA;EAAA;EAAAryE,EAAAA,MAAA,CACAgzE,UAAU,GAAV,SAAAA,UAAUA,GAAW;EACnB,IAAA,OAAO,IAAI,CAACX,QAAQ,CAAC,EAAE,CAAC;EAC1B,EAAA;;EAEA;EAAA;EAAAryE,EAAAA,MAAA,CACAizE,QAAQ,GAAR,SAAAA,QAAQA,GAAW;EACjB,IAAA,OAAO,IAAI,CAACZ,QAAQ,CAAC,EAAE,CAAC;IAC1B,CAAC;EAAA,EAAA,OAAAT,SAAA;EAAA,CAAA,EAAA;;ECnJ6D,IAO1DsB,cAAc,0BAAAC,gBAAA,EAAA;EAAA,EAAA,SAAAD,cAAAA,GAAA;EAAA,IAAA,OAAAC,gBAAA,CAAA/jE,KAAA,CAAA,IAAA,EAAAgP,SAAA,CAAA,IAAA,IAAA;EAAA,EAAA;IAAA9S,cAAA,CAAA4nE,cAAA,EAAAC,gBAAA,CAAA;EAAA,EAAA,IAAAnzE,MAAA,GAAAkzE,cAAA,CAAAjzE,SAAA;EAAAD,EAAAA,MAAA,CACXozE,QAAQ,GAAf,SAAOA,QAAQA,CACbnhE,KAAwB,EACxBy5D,SAA+B,EAC/B2H,GAAQ,EACRjC,YAAqB,EACrB;EAAA,IAAA,IAAA3nE,KAAA,GAAA,IAAA;EACA,IAAA,IAAMgnE,KAAK,GAAG,IAAI,CAACU,SAAS,CAACl/D,KAAK,EAAEohE,GAAG,CAACtoE,IAAI,EAAEqmE,YAAY,CAAC;EAC3D,IAAA,IAAIT,WAAW,GAAG,IAAI,CAACA,WAAW;EAClC,IAAA,IAAI5hE,IAAa;MACjB,IAAIukE,QAAQ,GAAG,KAAK;EACpB;MACCD,GAAG,CAAStoE,IAAI,GAAG,IAAI;;EAExB;EACA;MACA,IAAI4lE,WAAW,IAAIF,KAAK,CAACvrE,MAAM,IAAI,CAAC+M,KAAK,CAACshE,QAAQ,EAAE;EAClD,MAAA,IAAI,CAACvC,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,MAAAA,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACC,iBAAiB,CACrD,KAAK,EACLyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,IAAA;EAEAmF,IAAAA,KAAK,CAACzsE,OAAO,CAAC,UAAC0jE,IAAI,EAAK;QAAA,IAAA8L,aAAA,EAAAC,aAAA;QACtB,QAAQ/L,IAAI,CAACtkE,IAAI;EACf;EACA,QAAA,KAAK,CAAC;EAAE,UAAA;cACN,IAAIswE,KAAK,GAAG,KAAK;EACjB3kE,YAAAA,IAAI,GAAG,IAAI;EACX,YAAA,IAAMhE,IAAI,GAAG28D,IAAI,CAAC38D,IAAI;EACtB;EACA,YAAA,IAAIuoE,QAAQ,IAAIvoE,IAAI,CAAC7F,MAAM,GAAG,CAAC,EAAE;EAC/B;EACA,cAAA,IAAMyuE,SAAS,GAAGlqE,KAAI,CAACmqE,aAAa,CAAC7oE,IAAI,CAAC;EAC1C;EACA;EACA;EACA;EACA;EACA,cAAA,IACE4oE,SAAS,KAAK,CAAC,IACfA,SAAS,KAAK,CAAC,IACfA,SAAS,KAAK,CAAC,IACfA,SAAS,KAAK,CAAC,EACf;EACAD,gBAAAA,KAAK,GAAG,IAAI;EACd,cAAA;EACF,YAAA;EAEA,YAAA,IAAIA,KAAK,EAAE;EAAA,cAAA,IAAA5C,YAAA;EACT;EACA,cAAA,IAAI,CAAAA,YAAA,GAAAH,WAAW,KAAA,IAAA,IAAXG,YAAA,CAAatI,KAAK,IAAI,CAACmI,WAAW,CAACvuE,GAAG,EAAE;EAC1CqH,gBAAAA,KAAI,CAACunE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,gBAAAA,WAAW,GAAGlnE,KAAI,CAACknE,WAAW,GAAG,IAAI;EACvC,cAAA;EACF,YAAA;cAEA,IAAI,CAACA,WAAW,EAAE;EAChBA,cAAAA,WAAW,GAAGlnE,KAAI,CAACknE,WAAW,GAAGlnE,KAAI,CAACmnE,iBAAiB,CACrD,IAAI,EACJyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,YAAA;cACAqF,WAAW,CAACnI,KAAK,GAAG,IAAI;cACxBmI,WAAW,CAACvuE,GAAG,GAAGsxE,KAAK;EAEvB,YAAA;EACA;EACF,UAAA;EACA,QAAA,KAAK,CAAC;EACJ3kE,UAAAA,IAAI,GAAG,IAAI;EACX;EACA;EACA,UAAA,IAAI,CAAAykE,aAAA,GAAA7C,WAAW,KAAA,IAAA,IAAX6C,aAAA,CAAahL,KAAK,IAAI,CAACmI,WAAW,CAACvuE,GAAG,EAAE;EAC1CqH,YAAAA,KAAI,CAACunE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,YAAAA,WAAW,GAAGlnE,KAAI,CAACknE,WAAW,GAAG,IAAI;EACvC,UAAA;YACA,IAAI,CAACA,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGlnE,KAAI,CAACknE,WAAW,GAAGlnE,KAAI,CAACmnE,iBAAiB,CACrD,IAAI,EACJyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;YAEAqF,WAAW,CAACvuE,GAAG,GAAG,IAAI;YACtBuuE,WAAW,CAACnI,KAAK,GAAG,IAAI;EACxB,UAAA;EACF;EACA,QAAA,KAAK,CAAC;EAAE,UAAA;EACNz5D,YAAAA,IAAI,GAAG,IAAI;EACX2M,YAAAA,uBAAuB,CACrBgsD,IAAI,CAAC38D,IAAI,EACT,CAAC,EACDsoE,GAAG,CAACr3D,GAAG,EACP0vD,SAAS,CAACvxD,OACZ,CAAC;EACD,YAAA;EACA;EACF,UAAA;EACA,QAAA,KAAK,CAAC;EAAE,UAAA;cAAA,IAAA05D,iBAAA,EAAAC,kBAAA;EACN/kE,YAAAA,IAAI,GAAG,IAAI;EACXukE,YAAAA,QAAQ,GAAG,IAAI;EACf,YAAA,IAAMS,GAAG,GAAGrM,IAAI,CAAC38D,IAAI;EACrB,YAAA,IAAMkgB,MAAM,GAAGxhB,KAAI,CAACuqE,OAAO,CAACD,GAAG,CAAC;cAChC,IACE,CAAC9hE,KAAK,CAAC8hE,GAAG,IACV9hE,KAAK,CAACkW,KAAK,KAAK8C,MAAM,CAAC9C,KAAK,IAC5BlW,KAAK,CAACmW,MAAM,KAAK6C,MAAM,CAAC7C,MAAM,IAC9B,CAAA,CAAAyrD,iBAAA,GAAA5hE,KAAK,CAACgiE,UAAU,KAAA,IAAA,GAAA,MAAA,GAAhBJ,iBAAA,CAAmB,CAAC,CAAC,MAAK5oD,MAAM,CAACgpD,UAAU,CAAC,CAAC,CAAC,IAC9C,CAAA,CAAAH,kBAAA,GAAA7hE,KAAK,CAACgiE,UAAU,KAAA,IAAA,GAAA,MAAA,GAAhBH,kBAAA,CAAmB,CAAC,CAAC,MAAK7oD,MAAM,CAACgpD,UAAU,CAAC,CAAC,CAAC,EAC9C;EACAhiE,cAAAA,KAAK,CAACkW,KAAK,GAAG8C,MAAM,CAAC9C,KAAK;EAC1BlW,cAAAA,KAAK,CAACmW,MAAM,GAAG6C,MAAM,CAAC7C,MAAM;EAC5BnW,cAAAA,KAAK,CAACgiE,UAAU,GAAGhpD,MAAM,CAACgpD,UAAU;EACpChiE,cAAAA,KAAK,CAAC8hE,GAAG,GAAG,CAACA,GAAG,CAAC;gBACjB,IAAMG,UAAU,GAAGH,GAAG,CAAC9jE,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;gBACrC,IAAIkkE,WAAW,GAAG,OAAO;gBACzB,KAAK,IAAI/tE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;kBAC1B,IAAIK,CAAC,GAAGytE,UAAU,CAAC9tE,CAAC,CAAC,CAAC7I,QAAQ,CAAC,EAAE,CAAC;EAClC,gBAAA,IAAIkJ,CAAC,CAACvB,MAAM,GAAG,CAAC,EAAE;oBAChBuB,CAAC,GAAG,GAAG,GAAGA,CAAC;EACb,gBAAA;EAEA0tE,gBAAAA,WAAW,IAAI1tE,CAAC;EAClB,cAAA;gBACAwL,KAAK,CAACM,KAAK,GAAG4hE,WAAW;EAC3B,YAAA;EACA,YAAA;EACF,UAAA;EACA;EACA,QAAA,KAAK,CAAC;EACJplE,UAAAA,IAAI,GAAG,IAAI;EAEXkD,UAAAA,KAAK,CAACmiE,GAAG,GAAG,CAAC1M,IAAI,CAAC38D,IAAI,CAAC;EAEvB,UAAA;EACF;EACA,QAAA,KAAK,CAAC;EACJgE,UAAAA,IAAI,GAAG,IAAI;YACXkD,KAAK,CAACshE,QAAQ,GAAG,IAAI;EACrB,UAAA,IAAA,CAAAE,aAAA,GAAI9C,WAAW,aAAX8C,aAAA,CAAajL,KAAK,EAAE;EACtB/+D,YAAAA,KAAI,CAACunE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,YAAAA,WAAW,GAAG,IAAI;EACpB,UAAA;YACA,IAAI,CAACA,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGlnE,KAAI,CAACknE,WAAW,GAAGlnE,KAAI,CAACmnE,iBAAiB,CACrD,KAAK,EACLyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;EACA,UAAA;EACF;EACA,QAAA,KAAK,EAAE;EACLv8D,UAAAA,IAAI,GAAG,IAAI;EACX,UAAA;EACF,QAAA;EACEA,UAAAA,IAAI,GAAG,KAAK;EAEZ,UAAA;EACJ;QACA,IAAI4hE,WAAW,IAAI5hE,IAAI,EAAE;EACvB,QAAA,IAAM0hE,MAAK,GAAGE,WAAW,CAACF,KAAK;EAC/BA,QAAAA,MAAK,CAAC1hE,IAAI,CAAC24D,IAAI,CAAC;EAClB,MAAA;EACF,IAAA,CAAC,CAAC;EACF;MACA,IAAI0J,YAAY,IAAIT,WAAW,EAAE;EAC/B,MAAA,IAAI,CAACK,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;QACvC,IAAI,CAAC0+D,WAAW,GAAG,IAAI;EACzB,IAAA;IACF,CAAC;IAAA3wE,MAAA,CAES2xE,WAAW,GAArB,SAAUA,WAAWA,CAAC5mE,IAAgB,EAAEuE,MAAc,EAAU;EAC9D,IAAA,OAAOvE,IAAI,CAACuE,MAAM,CAAC,GAAG,IAAI;IAC5B,CAAC;EAAAtP,EAAAA,MAAA,CAED4zE,aAAa,GAAb,SAAAA,aAAaA,CAAC7oE,IAAgB,EAAE;EAC9B,IAAA,IAAMspE,EAAE,GAAG,IAAIzC,SAAS,CAAC7mE,IAAI,CAAC;EAC9B;MACAspE,EAAE,CAACtB,SAAS,EAAE;EACd;MACAsB,EAAE,CAAC1B,OAAO,EAAE;EACZ;EACA,IAAA,OAAO0B,EAAE,CAAC1B,OAAO,EAAE;EACrB,EAAA;;EAEA;EACF;EACA;EACA;EACA;EACA;IALE3yE,MAAA,CAMAs0E,eAAe,GAAf,SAAAA,eAAeA,CAACnC,KAAa,EAAEoC,MAAiB,EAAQ;MACtD,IAAIC,SAAS,GAAG,CAAC;MACjB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAA,IAAIC,UAAU;MACd,KAAK,IAAI38D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGo6D,KAAK,EAAEp6D,CAAC,EAAE,EAAE;QAC9B,IAAI08D,SAAS,KAAK,CAAC,EAAE;EACnBC,QAAAA,UAAU,GAAGH,MAAM,CAAC1B,MAAM,EAAE;UAC5B4B,SAAS,GAAG,CAACD,SAAS,GAAGE,UAAU,GAAG,GAAG,IAAI,GAAG;EAClD,MAAA;EACAF,MAAAA,SAAS,GAAGC,SAAS,KAAK,CAAC,GAAGD,SAAS,GAAGC,SAAS;EACrD,IAAA;EACF,EAAA;;EAEA;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EAPEz0E,EAAAA,MAAA,CAQAg0E,OAAO,GAAP,SAAAA,OAAOA,CAACD,GAAe,EAIrB;EACA,IAAA,IAAMM,EAAE,GAAG,IAAIzC,SAAS,CAACmC,GAAG,CAAC;MAC7B,IAAIY,mBAAmB,GAAG,CAAC;MAC3B,IAAIC,oBAAoB,GAAG,CAAC;MAC5B,IAAIC,kBAAkB,GAAG,CAAC;MAC1B,IAAIC,qBAAqB,GAAG,CAAC;EAC7B,IAAA,IAAIC,8BAA8B;EAClC,IAAA,IAAIC,gBAAgB;EACpB,IAAA,IAAI5uE,CAAC;MACL,IAAM2sE,SAAS,GAAGsB,EAAE,CAACtB,SAAS,CAAChwE,IAAI,CAACsxE,EAAE,CAAC;MACvC,IAAMhC,QAAQ,GAAGgC,EAAE,CAAChC,QAAQ,CAACtvE,IAAI,CAACsxE,EAAE,CAAC;MACrC,IAAM1B,OAAO,GAAG0B,EAAE,CAAC1B,OAAO,CAAC5vE,IAAI,CAACsxE,EAAE,CAAC;MACnC,IAAMvB,WAAW,GAAGuB,EAAE,CAACvB,WAAW,CAAC/vE,IAAI,CAACsxE,EAAE,CAAC;MAC3C,IAAMnC,QAAQ,GAAGmC,EAAE,CAACnC,QAAQ,CAACnvE,IAAI,CAACsxE,EAAE,CAAC;MACrC,IAAM3B,MAAM,GAAG2B,EAAE,CAAC3B,MAAM,CAAC3vE,IAAI,CAACsxE,EAAE,CAAC;MACjC,IAAM5B,OAAO,GAAG4B,EAAE,CAAC5B,OAAO,CAAC1vE,IAAI,CAACsxE,EAAE,CAAC;MACnC,IAAMC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACvxE,IAAI,CAAC,IAAI,CAAC;EAEvDgwE,IAAAA,SAAS,EAAE;EACX,IAAA,IAAMkC,UAAU,GAAGlC,SAAS,EAAE,CAAC;EAC/BV,IAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;EACZH,IAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZa,SAAS,EAAE,CAAC;MACZN,OAAO,EAAE,CAAC;EACV;EACA,IAAA,IACEwC,UAAU,KAAK,GAAG,IAClBA,UAAU,KAAK,GAAG,IAClBA,UAAU,KAAK,GAAG,IAClBA,UAAU,KAAK,GAAG,IAClBA,UAAU,KAAK,EAAE,IACjBA,UAAU,KAAK,EAAE,IACjBA,UAAU,KAAK,EAAE,IACjBA,UAAU,KAAK,GAAG,IAClBA,UAAU,KAAK,GAAG,EAClB;EACA,MAAA,IAAMC,eAAe,GAAGvC,OAAO,EAAE;QACjC,IAAIuC,eAAe,KAAK,CAAC,EAAE;UACzBhD,QAAQ,CAAC,CAAC,CAAC;EACb,MAAA,CAAC;;QAEDO,OAAO,EAAE,CAAC;QACVA,OAAO,EAAE,CAAC;EACVP,MAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;QACZ,IAAIY,WAAW,EAAE,EAAE;EACjB;EACAkC,QAAAA,gBAAgB,GAAGE,eAAe,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;UACjD,KAAK9uE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4uE,gBAAgB,EAAE5uE,CAAC,EAAE,EAAE;YACrC,IAAI0sE,WAAW,EAAE,EAAE;EACjB;cACA,IAAI1sE,CAAC,GAAG,CAAC,EAAE;EACTkuE,cAAAA,eAAe,CAAC,EAAE,EAAED,EAAE,CAAC;EACzB,YAAA,CAAC,MAAM;EACLC,cAAAA,eAAe,CAAC,EAAE,EAAED,EAAE,CAAC;EACzB,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;MACA5B,OAAO,EAAE,CAAC;EACV,IAAA,IAAM0C,eAAe,GAAGxC,OAAO,EAAE;MACjC,IAAIwC,eAAe,KAAK,CAAC,EAAE;QACzBxC,OAAO,EAAE,CAAC;EACZ,IAAA,CAAC,MAAM,IAAIwC,eAAe,KAAK,CAAC,EAAE;EAChCjD,MAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;QACZQ,MAAM,EAAE,CAAC;QACTA,MAAM,EAAE,CAAC;QACTqC,8BAA8B,GAAGpC,OAAO,EAAE;QAC1C,KAAKvsE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2uE,8BAA8B,EAAE3uE,CAAC,EAAE,EAAE;EACnDssE,QAAAA,MAAM,EAAE;EACV,MAAA,CAAC;EACH,IAAA;MACAD,OAAO,EAAE,CAAC;EACVP,IAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;EACZ,IAAA,IAAMkD,mBAAmB,GAAGzC,OAAO,EAAE;EACrC,IAAA,IAAM0C,yBAAyB,GAAG1C,OAAO,EAAE;EAC3C,IAAA,IAAM2C,gBAAgB,GAAGjD,QAAQ,CAAC,CAAC,CAAC;MACpC,IAAIiD,gBAAgB,KAAK,CAAC,EAAE;QAC1BpD,QAAQ,CAAC,CAAC,CAAC;EACb,IAAA,CAAC;;EAEDA,IAAAA,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZ,IAAIY,WAAW,EAAE,EAAE;EACjB;QACA6B,mBAAmB,GAAGhC,OAAO,EAAE;QAC/BiC,oBAAoB,GAAGjC,OAAO,EAAE;QAChCkC,kBAAkB,GAAGlC,OAAO,EAAE;QAC9BmC,qBAAqB,GAAGnC,OAAO,EAAE;EACnC,IAAA;EACA,IAAA,IAAIsB,UAA4B,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACzC,IAAInB,WAAW,EAAE,EAAE;EACjB;QACA,IAAIA,WAAW,EAAE,EAAE;EACjB;EACA,QAAA,IAAMyC,cAAc,GAAGxC,SAAS,EAAE;EAClC,QAAA,QAAQwC,cAAc;EACpB,UAAA,KAAK,CAAC;EACJtB,YAAAA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,CAAC;EACJA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;EACrB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC;EACtB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,YAAA;EACF,UAAA,KAAK,EAAE;EACLA,YAAAA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,YAAA;EACF,UAAA,KAAK,GAAG;EAAE,YAAA;gBACRA,UAAU,GAAG,CACVlB,SAAS,EAAE,IAAI,CAAC,GAAIA,SAAS,EAAE,EAC/BA,SAAS,EAAE,IAAI,CAAC,GAAIA,SAAS,EAAE,CACjC;EACD,cAAA;EACF,YAAA;EACF;EACF,MAAA;EACF,IAAA;MACA,OAAO;EACL5qD,MAAAA,KAAK,EAAElqB,IAAI,CAAC8sB,IAAI,CACd,CAACqqD,mBAAmB,GAAG,CAAC,IAAI,EAAE,GAC5BT,mBAAmB,GAAG,CAAC,GACvBC,oBAAoB,GAAG,CAC3B,CAAC;QACDxsD,MAAM,EACJ,CAAC,CAAC,GAAGktD,gBAAgB,KAAKD,yBAAyB,GAAG,CAAC,CAAC,GAAG,EAAE,GAC7D,CAACC,gBAAgB,GAAG,CAAC,GAAG,CAAC,KACtBT,kBAAkB,GAAGC,qBAAqB,CAAC;EAChDb,MAAAA,UAAU,EAAEA;OACb;IACH,CAAC;EAAA,EAAA,OAAAf,cAAA;EAAA,CAAA,CApY0BxC,eAAe,CAAA;;ECPoB,IAQ1D8E,eAAe,0BAAArC,gBAAA,EAAA;EAAA,EAAA,SAAAqC,eAAAA,GAAA;EAAA,IAAA,IAAA/rE,KAAA;EAAA,IAAA,KAAA,IAAA0U,IAAA,GAAAC,SAAA,CAAAlZ,MAAA,EAAAuwE,IAAA,GAAA,IAAAp3D,KAAA,CAAAF,IAAA,GAAAG,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA,EAAA,EAAA;EAAAm3D,MAAAA,IAAA,CAAAn3D,IAAA,CAAA,GAAAF,SAAA,CAAAE,IAAA,CAAA;EAAA,IAAA;MAAA7U,KAAA,GAAA0pE,gBAAA,CAAAzpE,IAAA,CAAA0F,KAAA,CAAA+jE,gBAAA,EAAA,CAAA,IAAA,CAAA,CAAApyC,MAAA,CAAA00C,IAAA,CAAA,CAAA,IAAA,IAAA;MAAAhsE,KAAA,CACTisE,OAAO,GAAsB,IAAI;EAAA,IAAA,OAAAjsE,KAAA;EAAA,EAAA;IAAA6B,cAAA,CAAAkqE,eAAA,EAAArC,gBAAA,CAAA;EAAA,EAAA,IAAAnzE,MAAA,GAAAw1E,eAAA,CAAAv1E,SAAA;EAAAD,EAAAA,MAAA,CAEpCozE,QAAQ,GAAf,SAAOA,QAAQA,CACbnhE,KAAwB,EACxBy5D,SAA+B,EAC/B2H,GAAQ,EACRjC,YAAqB,EACrB;EAAA,IAAA,IAAAzjE,MAAA,GAAA,IAAA;EACA,IAAA,IAAM8iE,KAAK,GAAG,IAAI,CAACU,SAAS,CAACl/D,KAAK,EAAEohE,GAAG,CAACtoE,IAAI,EAAEqmE,YAAY,CAAC;EAC3D,IAAA,IAAIT,WAAW,GAAG,IAAI,CAACA,WAAW;EAClC,IAAA,IAAI5hE,IAAa;MACjB,IAAIukE,QAAQ,GAAG,KAAK;EACpB;MACCD,GAAG,CAAStoE,IAAI,GAAG,IAAI;;EAExB;EACA;MACA,IAAI4lE,WAAW,IAAIF,KAAK,CAACvrE,MAAM,IAAI,CAAC+M,KAAK,CAACshE,QAAQ,EAAE;EAClD,MAAA,IAAI,CAACvC,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,MAAAA,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACC,iBAAiB,CACrD,KAAK,EACLyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,IAAA;EAEAmF,IAAAA,KAAK,CAACzsE,OAAO,CAAC,UAAC0jE,IAAI,EAAK;QAAA,IAAA8L,aAAA,EAAAC,aAAA;QACtB,QAAQ/L,IAAI,CAACtkE,IAAI;EACf;EACA,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;EACN,QAAA,KAAK,CAAC;YACJ,IAAI,CAACutE,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAGhjE,MAAI,CAACijE,iBAAiB,CACrD,KAAK,EACLyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;YACAqF,WAAW,CAACnI,KAAK,GAAG,IAAI;EACxBz5D,UAAAA,IAAI,GAAG,IAAI;EACX,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACP,QAAA,KAAK,EAAE;EACP,QAAA,KAAK,EAAE;EACP,QAAA,KAAK,EAAE;EACLA,UAAAA,IAAI,GAAG,IAAI;EACX,UAAA,IAAIukE,QAAQ,EAAE;EAAA,YAAA,IAAAxC,YAAA;EACZ;EACA;EACA,YAAA,IAAI,CAAAA,YAAA,GAAAH,WAAW,KAAA,IAAA,IAAXG,YAAA,CAAatI,KAAK,IAAI,CAACmI,WAAW,CAACvuE,GAAG,EAAE;EAC1CuL,cAAAA,MAAI,CAACqjE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,cAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAG,IAAI;EACvC,YAAA;EACF,UAAA;YACA,IAAI,CAACA,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAGhjE,MAAI,CAACijE,iBAAiB,CACrD,IAAI,EACJyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;YAEAqF,WAAW,CAACvuE,GAAG,GAAG,IAAI;YACtBuuE,WAAW,CAACnI,KAAK,GAAG,IAAI;EACxB,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACP,QAAA,KAAK,EAAE;EACLz5D,UAAAA,IAAI,GAAG,IAAI;EACX;EACA;EACA,UAAA,IAAI,CAAAykE,aAAA,GAAA7C,WAAW,KAAA,IAAA,IAAX6C,aAAA,CAAahL,KAAK,IAAI,CAACmI,WAAW,CAACvuE,GAAG,EAAE;EAC1CuL,YAAAA,MAAI,CAACqjE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAG,IAAI;EACvC,UAAA;YACA,IAAI,CAACA,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAGhjE,MAAI,CAACijE,iBAAiB,CACrD,IAAI,EACJyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;YAEAqF,WAAW,CAACvuE,GAAG,GAAG,IAAI;YACtBuuE,WAAW,CAACnI,KAAK,GAAG,IAAI;EACxB,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACLz5D,UAAAA,IAAI,GAAG,IAAI;EACX2M,UAAAA,uBAAuB,CACrBgsD,IAAI,CAAC38D,IAAI,EACT,CAAC;EAAE;EACHsoE,UAAAA,GAAG,CAACr3D,GAAG,EACP0vD,SAAS,CAACvxD,OACZ,CAAC;EACD,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACLpL,UAAAA,IAAI,GAAG,IAAI;EACX,UAAA,IAAI,CAACkD,KAAK,CAAC0jE,GAAG,EAAE;EACd,YAAA,IAAI,OAAO1jE,KAAK,CAACxJ,MAAM,KAAK,QAAQ,EAAE;EACpCwJ,cAAAA,KAAK,CAACxJ,MAAM,GAAG,EAAE;EACnB,YAAA;EACAwJ,YAAAA,KAAK,CAACxJ,MAAM,GAAGvF,QAAA,CAAc+O,KAAK,CAACxJ,MAAM,EAAEkF,MAAI,CAACioE,OAAO,CAAClO,IAAI,CAAC38D,IAAI,CAAC,CAAC;EACnE4C,YAAAA,MAAI,CAAC+nE,OAAO,GAAGhO,IAAI,CAAC38D,IAAI;EAC1B,UAAA;EACAkH,UAAAA,KAAK,CAAC0jE,GAAG,GAAG,CAACjO,IAAI,CAAC38D,IAAI,CAAC;EACvB,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACLgE,UAAAA,IAAI,GAAG,IAAI;EACXukE,UAAAA,QAAQ,GAAG,IAAI;EACf,UAAA,IACErhE,KAAK,CAAC0jE,GAAG,KAAKvxE,SAAS,IACvB6N,KAAK,CAAC0jE,GAAG,CAAC,CAAC,CAAC,KAAKhoE,MAAI,CAAC+nE,OAAO,IAC7BzjE,KAAK,CAAC8hE,GAAG,KAAK3vE,SAAS,IACvB,CAACuJ,MAAI,CAACkoE,QAAQ,CAAC5jE,KAAK,CAAC8hE,GAAG,CAAC,CAAC,CAAC,EAAErM,IAAI,CAAC38D,IAAI,CAAC,EACvC;cACA4C,MAAI,CAAC+nE,OAAO,GAAGzjE,KAAK,CAAC0jE,GAAG,CAAC,CAAC,CAAC;EAC3B1jE,YAAAA,KAAK,CAAC8hE,GAAG,GAAG9hE,KAAK,CAACmiE,GAAG,GAAGhwE,SAAS;EACnC,UAAA;EACA,UAAA,IAAI,CAAC6N,KAAK,CAAC8hE,GAAG,EAAE;cACd,IAAM9oD,MAAM,GAAGtd,MAAI,CAACqmE,OAAO,CAACtM,IAAI,CAAC38D,IAAI,CAAC;EACtCkH,YAAAA,KAAK,CAACkW,KAAK,GAAG8C,MAAM,CAAC9C,KAAK;EAC1BlW,YAAAA,KAAK,CAACmW,MAAM,GAAG6C,MAAM,CAAC7C,MAAM;EAC5BnW,YAAAA,KAAK,CAACgiE,UAAU,GAAGhpD,MAAM,CAACgpD,UAAU;EACpChiE,YAAAA,KAAK,CAACM,KAAK,GAAG0Y,MAAM,CAAC6qD,WAAW;cAChC7jE,KAAK,CAAC8hE,GAAG,GAAG,EAAE;EACd,YAAA,IAAI,OAAO9hE,KAAK,CAACxJ,MAAM,KAAK,QAAQ,EAAE;EACpCwJ,cAAAA,KAAK,CAACxJ,MAAM,GAAG,EAAE;EACnB,YAAA;EACA,YAAA,KAAK,IAAMstE,IAAI,IAAI9qD,MAAM,CAACxiB,MAAM,EAAE;gBAChCwJ,KAAK,CAACxJ,MAAM,CAACstE,IAAI,CAAC,GAAG9qD,MAAM,CAACxiB,MAAM,CAACstE,IAAI,CAAC;EAC1C,YAAA;EACF,UAAA;EACApoE,UAAAA,MAAI,CAACqoE,gBAAgB,CAAC/jE,KAAK,CAAC8hE,GAAG,EAAErM,IAAI,CAAC38D,IAAI,EAAEkH,KAAK,CAAC0jE,GAAG,CAAC;YACtD,IAAI,CAAChF,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAGhjE,MAAI,CAACijE,iBAAiB,CACrD,IAAI,EACJyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;YACAqF,WAAW,CAACvuE,GAAG,GAAG,IAAI;EACtB,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACL2M,UAAAA,IAAI,GAAG,IAAI;EACX,UAAA,IAAI,OAAOkD,KAAK,CAACxJ,MAAM,KAAK,QAAQ,EAAE;EACpC,YAAA,IAAI,CAACwJ,KAAK,CAACmiE,GAAG,EAAE;gBACdniE,KAAK,CAACmiE,GAAG,GAAG,EAAE;gBACd,IAAMnpD,OAAM,GAAGtd,MAAI,CAACsoE,OAAO,CAACvO,IAAI,CAAC38D,IAAI,CAAC;EACtC,cAAA,KAAK,IAAMgrE,KAAI,IAAI9qD,OAAM,EAAE;kBACzBhZ,KAAK,CAACxJ,MAAM,CAACstE,KAAI,CAAC,GAAG9qD,OAAM,CAAC8qD,KAAI,CAAC;EACnC,cAAA;EACF,YAAA;EACApoE,YAAAA,MAAI,CAACqoE,gBAAgB,CAAC/jE,KAAK,CAACmiE,GAAG,EAAE1M,IAAI,CAAC38D,IAAI,EAAEkH,KAAK,CAAC0jE,GAAG,CAAC;EACxD,UAAA;EACA,UAAA;;EAEF;EACA,QAAA,KAAK,EAAE;EACL5mE,UAAAA,IAAI,GAAG,IAAI;YACXkD,KAAK,CAACshE,QAAQ,GAAG,IAAI;EACrB,UAAA,IAAA,CAAAE,aAAA,GAAI9C,WAAW,aAAX8C,aAAA,CAAajL,KAAK,EAAE;EACtB76D,YAAAA,MAAI,CAACqjE,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;EACvC0+D,YAAAA,WAAW,GAAG,IAAI;EACpB,UAAA;YACA,IAAI,CAACA,WAAW,EAAE;EAChBA,YAAAA,WAAW,GAAGhjE,MAAI,CAACgjE,WAAW,GAAGhjE,MAAI,CAACijE,iBAAiB,CACrD,KAAK,EACLyC,GAAG,CAACr3D,GAAG,EACPq3D,GAAG,CAAC/H,GACN,CAAC;EACH,UAAA;EACA,UAAA;EAEF,QAAA;EACEv8D,UAAAA,IAAI,GAAG,KAAK;EACZ,UAAA;EACJ;QACA,IAAI4hE,WAAW,IAAI5hE,IAAI,EAAE;EACvB,QAAA,IAAM0hE,MAAK,GAAGE,WAAW,CAACF,KAAK;EAC/BA,QAAAA,MAAK,CAAC1hE,IAAI,CAAC24D,IAAI,CAAC;EAClB,MAAA;EACF,IAAA,CAAC,CAAC;EACF;MACA,IAAI0J,YAAY,IAAIT,WAAW,EAAE;EAC/B,MAAA,IAAI,CAACK,cAAc,CAACL,WAAW,EAAE1+D,KAAK,CAAC;QACvC,IAAI,CAAC0+D,WAAW,GAAG,IAAI;EACzB,IAAA;IACF,CAAC;IAAA3wE,MAAA,CAEOg2E,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBE,aAA2B,EAC3BnrE,IAAgB,EAChB4qE,GAA6B,EAC7B;EACA,IAAA,IAAKA,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAACD,OAAO,IAAM,CAACC,GAAG,IAAI,CAACO,aAAa,CAAChxE,MAAO,EAAE;EACvEgxE,MAAAA,aAAa,CAACnnE,IAAI,CAAChE,IAAI,CAAC;EAC1B,IAAA;IACF,CAAC;IAAA/K,MAAA,CAES2xE,WAAW,GAArB,SAAUA,WAAWA,CAAC5mE,IAAgB,EAAEuE,MAAc,EAAU;MAC9D,OAAO,CAACvE,IAAI,CAACuE,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC;IACpC,CAAC;EAAAtP,EAAAA,MAAA,CAESm2E,SAAS,GAAnB,SAAUA,SAASA,CAAChiD,GAAe,EAAc;MAC/C,IAAMiiD,GAAG,GAAG,IAAIzvE,UAAU,CAACwtB,GAAG,CAACznB,UAAU,CAAC;MAC1C,IAAI2pE,MAAM,GAAG,CAAC;EACd,IAAA,KAAK,IAAIjwE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+tB,GAAG,CAACznB,UAAU,EAAEtG,CAAC,EAAE,EAAE;QACvC,IAAIA,CAAC,IAAI,CAAC,EAAE;EACV;UACA,IAAI+tB,GAAG,CAAC/tB,CAAC,CAAC,KAAK,IAAI,IAAI+tB,GAAG,CAAC/tB,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IAAI+tB,GAAG,CAAC/tB,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;EACjE,UAAA;EACF,QAAA;EACF,MAAA;EACAgwE,MAAAA,GAAG,CAACC,MAAM,CAAC,GAAGliD,GAAG,CAAC/tB,CAAC,CAAC;EACpBiwE,MAAAA,MAAM,EAAE;EACV,IAAA;MACA,OAAO,IAAI1vE,UAAU,CAACyvE,GAAG,CAACtvE,MAAM,EAAE,CAAC,EAAEuvE,MAAM,CAAC;IAC9C,CAAC;IAAAr2E,MAAA,CAESgxE,cAAc,GAAxB,SAAUA,cAAcA,CACtBL,WAA8B,EAC9BlF,UAA6B,EAC7B;MACA0H,gBAAA,CAAAlzE,SAAA,CAAM+wE,cAAc,CAAAtnE,IAAA,CAAA,IAAA,EAACinE,WAAW,EAAElF,UAAU,CAAA;MAC5C,IAAI,IAAI,CAACiK,OAAO,EAAE;EAChB,MAAA,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC;EACtB,IAAA;IACF,CAAC;EAAA11E,EAAAA,MAAA,CAED41E,OAAO,GAAP,SAAAA,OAAOA,CAACD,GAAe,EAGrB;EACA,IAAA,IAAMtB,EAAE,GAAG,IAAIzC,SAAS,CAAC+D,GAAG,CAAC;EAC7B;MACAtB,EAAE,CAACtB,SAAS,EAAE;MACdsB,EAAE,CAACtB,SAAS,EAAE;EAEdsB,IAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACfgC,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC;EACdmC,IAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACf,IAAA,IAAMiE,qBAAqB,GAAGjC,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAC5C,IAAA,IAAMkE,wBAAwB,GAAGlC,EAAE,CAACvB,WAAW,EAAE;EACjD;;MAEA,OAAO;QACL0D,iBAAiB,EAAEF,qBAAqB,GAAG,CAAC;EAC5CG,MAAAA,gBAAgB,EAAEF;OACnB;IACH,CAAC;EAAAv2E,EAAAA,MAAA,CAEDg0E,OAAO,GAAP,SAAAA,OAAOA,CAACD,GAAe,EAMrB;MACA,IAAMM,EAAE,GAAG,IAAIzC,SAAS,CAAC,IAAI,CAACuE,SAAS,CAACpC,GAAG,CAAC,CAAC;MAC7CM,EAAE,CAACtB,SAAS,EAAE;MACdsB,EAAE,CAACtB,SAAS,EAAE;EAEdsB,IAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACf,IAAA,IAAMiE,qBAAqB,GAAGjC,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAC5CgC,IAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;;EAEjB;EACA,IAAA,IAAM4D,qBAAqB,GAAGrC,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAC5C,IAAA,IAAMsE,iBAAiB,GAAGtC,EAAE,CAACvB,WAAW,EAAE;EAC1C,IAAA,IAAM8D,mBAAmB,GAAGvC,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAC1C,IAAA,IAAMwE,qCAAqC,GAAGxC,EAAE,CAACtB,SAAS,EAAE;EAC5D,IAAA,IAAM+D,qCAAqC,GAAGzC,EAAE,CAACtB,SAAS,EAAE;EAC5D,IAAA,IAAMgE,qCAAqC,GAAG1C,EAAE,CAACtB,SAAS,EAAE;EAC5D,IAAA,IAAMiE,qCAAqC,GAAG3C,EAAE,CAACtB,SAAS,EAAE;EAC5D,IAAA,IAAMkE,oCAAoC,GAAG5C,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMmE,oCAAoC,GAAG7C,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMoE,oCAAoC,GAAG9C,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMqE,oCAAoC,GAAG/C,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMsE,oCAAoC,GAAGhD,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMuE,oCAAoC,GAAGjD,EAAE,CAACtB,SAAS,EAAE;EAC3D,IAAA,IAAMwE,iBAAiB,GAAGlD,EAAE,CAACtB,SAAS,EAAE;MACxC,IAAMyE,+BAA0C,GAAG,EAAE;MACrD,IAAMC,6BAAwC,GAAG,EAAE;MACnD,KAAK,IAAIrxE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkwE,qBAAqB,EAAElwE,CAAC,EAAE,EAAE;QAC9CoxE,+BAA+B,CAACzoE,IAAI,CAACslE,EAAE,CAACvB,WAAW,EAAE,CAAC;QACtD2E,6BAA6B,CAAC1oE,IAAI,CAACslE,EAAE,CAACvB,WAAW,EAAE,CAAC;EACtD,IAAA;MACA,IAAIwD,qBAAqB,GAAG,CAAC,EAAE;QAC7B,KAAK,IAAIlwE,EAAC,GAAGkwE,qBAAqB,EAAElwE,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;EAC9CiuE,QAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,MAAA;EACF,IAAA;MACA,KAAK,IAAIjsE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGkwE,qBAAqB,EAAElwE,GAAC,EAAE,EAAE;EAC9C,MAAA,IAAIoxE,+BAA+B,CAACpxE,GAAC,CAAC,EAAE;EACtCiuE,QAAAA,EAAE,CAACtB,SAAS,EAAE,CAAC;UACfsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;EACdsB,QAAAA,EAAE,CAACtB,SAAS,EAAE,CAAC;UACfsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;UACdsB,EAAE,CAACtB,SAAS,EAAE;EAChB,MAAA;EACA,MAAA,IAAI0E,6BAA6B,CAACrxE,GAAC,CAAC,EAAE;UACpCiuE,EAAE,CAACtB,SAAS,EAAE;EAChB,MAAA;EACF,IAAA;EAEAsB,IAAAA,EAAE,CAAC1B,OAAO,EAAE,CAAC;EACb,IAAA,IAAM+E,iBAAiB,GAAGrD,EAAE,CAAC1B,OAAO,EAAE;MACtC,IAAI+E,iBAAiB,IAAI,CAAC,EAAE;EAC1BrD,MAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjB,IAAA;EACA,IAAA,IAAMyF,yBAAyB,GAAGtD,EAAE,CAAC1B,OAAO,EAAE;EAC9C,IAAA,IAAMiF,0BAA0B,GAAGvD,EAAE,CAAC1B,OAAO,EAAE;EAC/C,IAAA,IAAMkF,uBAAuB,GAAGxD,EAAE,CAACvB,WAAW,EAAE;MAChD,IAAIgF,eAAe,GAAG,CAAC;EACrBC,MAAAA,gBAAgB,GAAG,CAAC;EACpBC,MAAAA,cAAc,GAAG,CAAC;EAClBC,MAAAA,iBAAiB,GAAG,CAAC;EACvB,IAAA,IAAIJ,uBAAuB,EAAE;EAC3BC,MAAAA,eAAe,IAAIzD,EAAE,CAAC1B,OAAO,EAAE;EAC/BoF,MAAAA,gBAAgB,IAAI1D,EAAE,CAAC1B,OAAO,EAAE;EAChCqF,MAAAA,cAAc,IAAI3D,EAAE,CAAC1B,OAAO,EAAE;EAC9BsF,MAAAA,iBAAiB,IAAI5D,EAAE,CAAC1B,OAAO,EAAE;EACnC,IAAA;EACA,IAAA,IAAMuF,qBAAqB,GAAG7D,EAAE,CAAC1B,OAAO,EAAE;EAC1C,IAAA,IAAMwF,uBAAuB,GAAG9D,EAAE,CAAC1B,OAAO,EAAE;EAC5C,IAAA,IAAMyF,iCAAiC,GAAG/D,EAAE,CAAC1B,OAAO,EAAE;EACtD,IAAA,IAAM0F,oCAAoC,GAAGhE,EAAE,CAACvB,WAAW,EAAE;EAC7D,IAAA,KACE,IAAI1sE,GAAC,GAAGiyE,oCAAoC,GAAG,CAAC,GAAG/B,qBAAqB,EACxElwE,GAAC,IAAIkwE,qBAAqB,EAC1BlwE,GAAC,EAAE,EACH;EACAiuE,MAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,MAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,MAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACf,IAAA;EACA4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb,IAAA,IAAM6F,yBAAyB,GAAGjE,EAAE,CAACvB,WAAW,EAAE;EAClD,IAAA,IAAIwF,yBAAyB,EAAE;EAC7B,MAAA,IAAMC,kCAAkC,GAAGlE,EAAE,CAACvB,WAAW,EAAE;EAC3D,MAAA,IAAIyF,kCAAkC,EAAE;UACtC,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,EAAEA,MAAM,EAAE,EAAE;EACzC,UAAA,KACE,IAAIC,QAAQ,GAAG,CAAC,EAChBA,QAAQ,IAAID,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EACjCC,QAAQ,EAAE,EACV;EACA,YAAA,IAAMC,2BAA2B,GAAGrE,EAAE,CAACvB,WAAW,EAAE;cACpD,IAAI,CAAC4F,2BAA2B,EAAE;EAChCrE,cAAAA,EAAE,CAAC1B,OAAO,EAAE,CAAC;EACf,YAAA,CAAC,MAAM;EACL,cAAA,IAAMgG,OAAO,GAAG16E,IAAI,CAAC+D,GAAG,CAAC,EAAE,EAAE,CAAC,IAAK,CAAC,IAAIw2E,MAAM,IAAI,CAAC,CAAE,CAAC;gBACtD,IAAIA,MAAM,GAAG,CAAC,EAAE;kBACdnE,EAAE,CAACxB,MAAM,EAAE;EACb,cAAA;gBACA,KAAK,IAAIzsE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGuyE,OAAO,EAAEvyE,GAAC,EAAE,EAAE;kBAChCiuE,EAAE,CAACxB,MAAM,EAAE;EACb,cAAA;EACF,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EAEAwB,IAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,IAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjB,IAAA,IAAM8F,gBAAgB,GAAGvE,EAAE,CAACvB,WAAW,EAAE;EACzC,IAAA,IAAI8F,gBAAgB,EAAE;QACpBvE,EAAE,CAACtB,SAAS,EAAE;QACdsB,EAAE,CAAC5B,OAAO,EAAE;QACZ4B,EAAE,CAAC5B,OAAO,EAAE;QACZ4B,EAAE,CAACvB,WAAW,EAAE;EAClB,IAAA;EACA,IAAA,IAAM+F,2BAA2B,GAAGxE,EAAE,CAAC1B,OAAO,EAAE;MAChD,IAAImG,cAAc,GAAG,CAAC;MACtB,KAAK,IAAI1yE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGyyE,2BAA2B,EAAEzyE,GAAC,EAAE,EAAE;QACpD,IAAI2yE,iCAAiC,GAAG,KAAK;QAC7C,IAAI3yE,GAAC,KAAK,CAAC,EAAE;EACX2yE,QAAAA,iCAAiC,GAAG1E,EAAE,CAACvB,WAAW,EAAE;EACtD,MAAA;EACA,MAAA,IAAIiG,iCAAiC,EAAE;UACrC,IAAI3yE,GAAC,KAAKyyE,2BAA2B,EAAE;YACrCxE,EAAE,CAAC1B,OAAO,EAAE;EACd,QAAA;UACA0B,EAAE,CAACvB,WAAW,EAAE;UAChBuB,EAAE,CAAC1B,OAAO,EAAE;UACZ,IAAIqG,mBAAmB,GAAG,CAAC;UAC3B,KAAK,IAAIjhE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI+gE,cAAc,EAAE/gE,CAAC,EAAE,EAAE;EACxC,UAAA,IAAMkhE,qBAAqB,GAAG5E,EAAE,CAACvB,WAAW,EAAE;YAC9C,IAAIoG,cAAc,GAAG,KAAK;YAC1B,IAAI,CAACD,qBAAqB,EAAE;EAC1BC,YAAAA,cAAc,GAAG7E,EAAE,CAACvB,WAAW,EAAE;EACnC,UAAA;YACA,IAAImG,qBAAqB,IAAIC,cAAc,EAAE;EAC3CF,YAAAA,mBAAmB,EAAE;EACvB,UAAA;EACF,QAAA;EACAF,QAAAA,cAAc,GAAGE,mBAAmB;EACtC,MAAA,CAAC,MAAM;EACL,QAAA,IAAMG,iBAAiB,GAAG9E,EAAE,CAAC1B,OAAO,EAAE;EACtC,QAAA,IAAMyG,iBAAiB,GAAG/E,EAAE,CAAC1B,OAAO,EAAE;UACtCmG,cAAc,GAAGK,iBAAiB,GAAGC,iBAAiB;UACtD,KAAK,IAAIrhE,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGohE,iBAAiB,EAAEphE,EAAC,EAAE,EAAE;YAC1Cs8D,EAAE,CAAC1B,OAAO,EAAE;YACZ0B,EAAE,CAACvB,WAAW,EAAE;EAClB,QAAA;UACA,KAAK,IAAI/6D,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGqhE,iBAAiB,EAAErhE,GAAC,EAAE,EAAE;YAC1Cs8D,EAAE,CAAC1B,OAAO,EAAE;YACZ0B,EAAE,CAACvB,WAAW,EAAE;EAClB,QAAA;EACF,MAAA;EACF,IAAA;EAEA,IAAA,IAAMuG,+BAA+B,GAAGhF,EAAE,CAACvB,WAAW,EAAE;EACxD,IAAA,IAAIuG,+BAA+B,EAAE;EACnC,MAAA,IAAMC,0BAA0B,GAAGjF,EAAE,CAAC1B,OAAO,EAAE;QAC/C,KAAK,IAAIvsE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGkzE,0BAA0B,EAAElzE,GAAC,EAAE,EAAE;EACnD,QAAA,KAAK,IAAI2R,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGqgE,iCAAiC,GAAG,CAAC,EAAErgE,GAAC,EAAE,EAAE;EAC9Ds8D,UAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,QAAA;EACAgC,QAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,MAAA;EACF,IAAA;MAEA,IAAIkH,4BAA4B,GAAG,CAAC;MACpC,IAAIC,SAAS,GAAG,CAAC;EACfC,MAAAA,UAAU,GAAG,CAAC;MAChB,IAAIC,SAAS,GAAG,IAAI;EAClBC,MAAAA,OAAO,GAAG,CAAC;EACXC,MAAAA,OAAO,GAAG,CAAC;EACbvF,IAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,IAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;MACjB,IAAI+G,2BAA2B,GAAG,KAAK;EACvC,IAAA,IAAMC,2BAA2B,GAAGzF,EAAE,CAACvB,WAAW,EAAE;EACpD,IAAA,IAAIgH,2BAA2B,EAAE;EAC/B,MAAA,IAAMC,8BAA8B,GAAG1F,EAAE,CAACvB,WAAW,EAAE;EACvD,MAAA,IAAIiH,8BAA8B,EAAE;EAClC,QAAA,IAAMC,gBAAgB,GAAG3F,EAAE,CAACtB,SAAS,EAAE;EACvC,QAAA,IAAMkH,eAAe,GAAG,CACtB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5D;EACD,QAAA,IAAMC,gBAAgB,GAAG,CACvB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAC3D;EACD,QAAA,IAAIF,gBAAgB,GAAG,CAAC,IAAIA,gBAAgB,GAAG,EAAE,EAAE;EACjDR,UAAAA,SAAS,GAAGS,eAAe,CAACD,gBAAgB,GAAG,CAAC,CAAC;EACjDP,UAAAA,UAAU,GAAGS,gBAAgB,CAACF,gBAAgB,GAAG,CAAC,CAAC;EACrD,QAAA,CAAC,MAAM,IAAIA,gBAAgB,KAAK,GAAG,EAAE;EACnCR,UAAAA,SAAS,GAAGnF,EAAE,CAAChC,QAAQ,CAAC,EAAE,CAAC;EAC3BoH,UAAAA,UAAU,GAAGpF,EAAE,CAAChC,QAAQ,CAAC,EAAE,CAAC;EAC9B,QAAA;EACF,MAAA;EACA,MAAA,IAAM8H,0BAA0B,GAAG9F,EAAE,CAACvB,WAAW,EAAE;EACnD,MAAA,IAAIqH,0BAA0B,EAAE;UAC9B9F,EAAE,CAACvB,WAAW,EAAE;EAClB,MAAA;EACA,MAAA,IAAMsH,8BAA8B,GAAG/F,EAAE,CAACvB,WAAW,EAAE;EACvD,MAAA,IAAIsH,8BAA8B,EAAE;EAClC/F,QAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;UACdgC,EAAE,CAACvB,WAAW,EAAE;EAChB,QAAA,IAAMuH,+BAA+B,GAAGhG,EAAE,CAACvB,WAAW,EAAE;EACxD,QAAA,IAAIuH,+BAA+B,EAAE;YACnChG,EAAE,CAACtB,SAAS,EAAE;YACdsB,EAAE,CAACtB,SAAS,EAAE;YACdsB,EAAE,CAACtB,SAAS,EAAE;EAChB,QAAA;EACF,MAAA;EACA,MAAA,IAAMuH,4BAA4B,GAAGjG,EAAE,CAACvB,WAAW,EAAE;EACrD,MAAA,IAAIwH,4BAA4B,EAAE;UAChCjG,EAAE,CAAC1B,OAAO,EAAE;UACZ0B,EAAE,CAAC1B,OAAO,EAAE;EACd,MAAA;EACA0B,MAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,MAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,MAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjB+G,MAAAA,2BAA2B,GAAGxF,EAAE,CAACvB,WAAW,EAAE;EAC9C,MAAA,IAAI+G,2BAA2B,EAAE;UAC/BxF,EAAE,CAAC5B,OAAO,EAAE;UACZ4B,EAAE,CAAC5B,OAAO,EAAE;UACZ4B,EAAE,CAAC5B,OAAO,EAAE;UACZ4B,EAAE,CAAC5B,OAAO,EAAE;EACd,MAAA;EACA,MAAA,IAAM8H,4BAA4B,GAAGlG,EAAE,CAACvB,WAAW,EAAE;EACrD,MAAA,IAAIyH,4BAA4B,EAAE;EAChCZ,QAAAA,OAAO,GAAGtF,EAAE,CAAChC,QAAQ,CAAC,EAAE,CAAC;EACzBuH,QAAAA,OAAO,GAAGvF,EAAE,CAAChC,QAAQ,CAAC,EAAE,CAAC;EACzB,QAAA,IAAMmI,mCAAmC,GAAGnG,EAAE,CAACvB,WAAW,EAAE;EAC5D,QAAA,IAAI0H,mCAAmC,EAAE;YACvCnG,EAAE,CAAC1B,OAAO,EAAE;EACd,QAAA;EACA,QAAA,IAAM8H,+BAA+B,GAAGpG,EAAE,CAACvB,WAAW,EAAE;EACxD,QAAA,IAAI2H,+BAA+B,EAAE;EACnC;EACA;EACA,UAAA,IAAMC,+BAA+B,GAAGrG,EAAE,CAACvB,WAAW,EAAE;EACxD,UAAA,IAAM6H,+BAA+B,GAAGtG,EAAE,CAACvB,WAAW,EAAE;YACxD,IAAI8H,+BAA+B,GAAG,KAAK;YAC3C,IACEF,+BAA+B,IAC/BC,+BAA+B,EAC/B;EACAC,YAAAA,+BAA+B,GAAGvG,EAAE,CAACvB,WAAW,EAAE;EAClD,YAAA,IAAI8H,+BAA+B,EAAE;gBACnCvG,EAAE,CAACtB,SAAS,EAAE;EACdsB,cAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;gBACdgC,EAAE,CAACvB,WAAW,EAAE;EAChBuB,cAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,YAAA;EACAgC,YAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACfgC,YAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACf,YAAA,IAAIuI,+BAA+B,EAAE;EACnCvG,cAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,YAAA;EACAgC,YAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EACdgC,YAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EACdgC,YAAAA,EAAE,CAAChC,QAAQ,CAAC,CAAC,CAAC;EAChB,UAAA;EACA;YACA,KAAK,IAAIjsE,GAAC,GAAG,CAAC,EAAEA,GAAC,IAAIkwE,qBAAqB,EAAElwE,GAAC,EAAE,EAAE;EAC/CszE,YAAAA,SAAS,GAAGrF,EAAE,CAACvB,WAAW,EAAE,CAAC;cAC7B,IAAM+H,8BAA8B,GAClCnB,SAAS,IAAIrF,EAAE,CAACvB,WAAW,EAAE;cAC/B,IAAIgI,kBAAkB,GAAG,KAAK;EAC9B,YAAA,IAAID,8BAA8B,EAAE;gBAClCxG,EAAE,CAACxB,MAAM,EAAE;EACb,YAAA,CAAC,MAAM;EACLiI,cAAAA,kBAAkB,GAAGzG,EAAE,CAACvB,WAAW,EAAE;EACvC,YAAA;EACA,YAAA,IAAMiI,OAAO,GAAGD,kBAAkB,GAAG,CAAC,GAAGzG,EAAE,CAAC1B,OAAO,EAAE,GAAG,CAAC;EACzD,YAAA,IAAI+H,+BAA+B,EAAE;gBACnC,KAAK,IAAI3iE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGgjE,OAAO,EAAEhjE,GAAC,EAAE,EAAE;kBAChCs8D,EAAE,CAAC1B,OAAO,EAAE;kBACZ0B,EAAE,CAAC1B,OAAO,EAAE;EACZ,gBAAA,IAAIiI,+BAA+B,EAAE;oBACnCvG,EAAE,CAAC1B,OAAO,EAAE;oBACZ0B,EAAE,CAAC1B,OAAO,EAAE;EACd,gBAAA;EACA0B,gBAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC;EAChB,cAAA;EACF,YAAA;EACA,YAAA,IAAIyI,+BAA+B,EAAE;gBACnC,KAAK,IAAI5iE,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGgjE,OAAO,EAAEhjE,GAAC,EAAE,EAAE;kBAChCs8D,EAAE,CAAC1B,OAAO,EAAE;kBACZ0B,EAAE,CAAC1B,OAAO,EAAE;EACZ,gBAAA,IAAIiI,+BAA+B,EAAE;oBACnCvG,EAAE,CAAC1B,OAAO,EAAE;oBACZ0B,EAAE,CAAC1B,OAAO,EAAE;EACd,gBAAA;EACA0B,gBAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC;EAChB,cAAA;EACF,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAM8I,0BAA0B,GAAG3G,EAAE,CAACvB,WAAW,EAAE;EACnD,MAAA,IAAIkI,0BAA0B,EAAE;EAC9B3G,QAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,QAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjBuB,QAAAA,EAAE,CAACvB,WAAW,EAAE,CAAC;EACjByG,QAAAA,4BAA4B,GAAGlF,EAAE,CAAC1B,OAAO,EAAE;EAC7C,MAAA;EACF,IAAA;MAEA,IAAIxqD,KAAK,GAAGwvD,yBAAyB;EACnCvvD,MAAAA,MAAM,GAAGwvD,0BAA0B;EACrC,IAAA,IAAIC,uBAAuB,EAAE;QAC3B,IAAIoD,cAAc,GAAG,CAAC;EACpBC,QAAAA,cAAc,GAAG,CAAC;QACpB,IAAIxD,iBAAiB,KAAK,CAAC,EAAE;EAC3B;UACAuD,cAAc,GAAGC,cAAc,GAAG,CAAC;EACrC,MAAA,CAAC,MAAM,IAAIxD,iBAAiB,IAAI,CAAC,EAAE;EACjC;EACAuD,QAAAA,cAAc,GAAG,CAAC;EACpB,MAAA;QACA9yD,KAAK,GACHwvD,yBAAyB,GACzBsD,cAAc,GAAGlD,gBAAgB,GACjCkD,cAAc,GAAGnD,eAAe;QAClC1vD,MAAM,GACJwvD,0BAA0B,GAC1BsD,cAAc,GAAGjD,iBAAiB,GAClCiD,cAAc,GAAGlD,cAAc;EACnC,IAAA;EAEA,IAAA,IAAMmD,oBAAoB,GAAGzE,qBAAqB,GAC9C,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACA,qBAAqB,CAAC,GACtC,EAAE;EACN,IAAA,IAAM0E,yBAAyB,GAC5BvE,qCAAqC,IAAI,EAAE,GAC3CC,qCAAqC,IAAI,EAAG,GAC5CC,qCAAqC,IAAI,CAAE,GAC5CC,qCAAqC;MACvC,IAAIqE,yBAAyB,GAAG,CAAC;MACjC,KAAK,IAAIj1E,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;EAC3Bi1E,MAAAA,yBAAyB,GACvB,CAACA,yBAAyB,GACvB,CAAED,yBAAyB,IAAIh1E,GAAC,GAAI,CAAC,KAAM,EAAE,GAAGA,GAAG,MACtD,CAAC,CAAC;EACN,IAAA;EACA,IAAA,IAAIk1E,kCAAkC,GACpCD,yBAAyB,CAAC99E,QAAQ,CAAC,EAAE,CAAC;EACxC,IAAA,IACEq5E,mBAAmB,KAAK,CAAC,IACzB0E,kCAAkC,KAAK,GAAG,EAC1C;EACAA,MAAAA,kCAAkC,GAAG,GAAG;EAC1C,IAAA;EACA,IAAA,IAAMC,gBAAgB,GAAG5E,iBAAiB,GAAG,GAAG,GAAG,GAAG;MAEtD,OAAO;QACLb,WAAW,EAAA,OAAA,GAAUqF,oBAAoB,GAAGvE,mBAAmB,GAAA,GAAA,GAAI0E,kCAAkC,GAAA,GAAA,GAAIC,gBAAgB,GAAGhE,iBAAiB,GAAA,KAAK;EAClJ9uE,MAAAA,MAAM,EAAE;EACNkuE,QAAAA,iBAAiB,EAAjBA,iBAAiB;EACjBC,QAAAA,mBAAmB,EAAnBA,mBAAmB;EACnBF,QAAAA,qBAAqB,EAArBA,qBAAqB;UACrB8E,mCAAmC,EAAE,CACnC3E,qCAAqC,EACrCC,qCAAqC,EACrCC,qCAAqC,EACrCC,qCAAqC,CACtC;EACDyE,QAAAA,kCAAkC,EAAE,CAClCxE,oCAAoC,EACpCC,oCAAoC,EACpCC,oCAAoC,EACpCC,oCAAoC,EACpCC,oCAAoC,EACpCC,oCAAoC,CACrC;EACDC,QAAAA,iBAAiB,EAAjBA,iBAAiB;UACjBmE,SAAS,EAAExD,qBAAqB,GAAG,CAAC;EACpCA,QAAAA,qBAAqB,EAArBA,qBAAqB;EACrBC,QAAAA,uBAAuB,EAAvBA,uBAAuB;EACvBoB,QAAAA,4BAA4B,EAA5BA,4BAA4B;EAC5B7B,QAAAA,iBAAiB,EAAEA,iBAAiB;EACpCiE,QAAAA,UAAU,EAAE;EACVC,UAAAA,KAAK,EAAElC,SAAS;YAChBmC,GAAG,EAAEjC,OAAO,GAAGD;EACjB;SACD;EACDxxD,MAAAA,KAAK,EAALA,KAAK;EACLC,MAAAA,MAAM,EAANA,MAAM;EACN6rD,MAAAA,UAAU,EAAE,CAACuF,SAAS,EAAEC,UAAU;OACnC;IACH,CAAC;EAAAz5E,EAAAA,MAAA,CAEDi2E,OAAO,GAAP,SAAAA,OAAOA,CAAC7B,GAAe,EAErB;MACA,IAAMC,EAAE,GAAG,IAAIzC,SAAS,CAAC,IAAI,CAACuE,SAAS,CAAC/B,GAAG,CAAC,CAAC;MAC7CC,EAAE,CAACtB,SAAS,EAAE;MACdsB,EAAE,CAACtB,SAAS,EAAE;EACdsB,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAAC5B,OAAO,EAAE,CAAC;EACb4B,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACfmC,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACfmC,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACfmC,EAAE,CAAC5B,OAAO,EAAE;MACZ4B,EAAE,CAAC5B,OAAO,EAAE;EACZ4B,IAAAA,EAAE,CAAC3B,MAAM,EAAE,CAAC;EACZ2B,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACf,IAAA,IAAM4J,wBAAwB,GAAGzH,EAAE,CAACvB,WAAW,EAAE;EACjD,IAAA,IAAIgJ,wBAAwB,EAAE;QAC5BzH,EAAE,CAAC5B,OAAO,EAAE;EACd,IAAA;EACA4B,IAAAA,EAAE,CAAC3B,MAAM,EAAE,CAAC;EACZ2B,IAAAA,EAAE,CAAC3B,MAAM,EAAE,CAAC;EACZ2B,IAAAA,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACf,IAAA,IAAM6J,kBAAkB,GAAG1H,EAAE,CAACvB,WAAW,EAAE;EAC3C,IAAA,IAAMkJ,gCAAgC,GAAG3H,EAAE,CAACvB,WAAW,EAAE;EACzD,IAAA,IAAImJ,eAAe,GAAG,CAAC,CAAC;MACxB,IAAID,gCAAgC,IAAID,kBAAkB,EAAE;QAC1DE,eAAe,GAAG,CAAC,CAAC;MACtB,CAAC,MAAM,IAAID,gCAAgC,EAAE;QAC3CC,eAAe,GAAG,CAAC,CAAC;MACtB,CAAC,MAAM,IAAIF,kBAAkB,EAAE;QAC7BE,eAAe,GAAG,CAAC,CAAC;EACtB,IAAA;MAEA,OAAO;EACLA,MAAAA,eAAe,EAAfA;OACD;IACH,CAAC;IAAAj8E,MAAA,CAED61E,QAAQ,GAAR,SAAAA,QAAQA,CAACqG,IAAgB,EAAEC,IAAgB,EAAW;EACpD;EACA,IAAA,OACE91E,MAAM,CAACC,YAAY,CAAC8I,KAAK,CAAC,IAAI,EAAE8sE,IAAI,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC,KAC/C/1E,MAAM,CAACC,YAAY,CAAC8I,KAAK,CAAC,IAAI,EAAE+sE,IAAI,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC;IAEnD,CAAC;EAAA,EAAA,OAAA5G,eAAA;EAAA,CAAA,CAltB2B9E,eAAe,CAAA;;EC2C7C,IAAM2L,aAAa,GAAG,GAAG;EAAA,IAEnBC,SAAS,gBAAA,YAAA;IAoBb,SAAAA,SAAAA,CACExW,QAAyB,EACzB76C,MAAiB,EACjBsxD,aAA4B,EAC5B/5E,MAAe,EACf;EAAA,IAAA,IAAA,CAxBeA,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNsjE,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACR76C,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNsxD,aAAa,GAAA,MAAA;MAAA,IAAA,CAEtBC,SAAS,GAA8B,IAAI;MAAA,IAAA,CAC3CC,SAAS,GAAY,KAAK;EAAA,IAAA,IAAA,CAC1Bj1D,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVrD,UAAU,GAAA,MAAA;MAAA,IAAA,CACVu4D,MAAM,GAAW,EAAE;EAAA,IAAA,IAAA,CAEnBC,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXnS,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACTmS,SAAS,GAAA,MAAA;MAAA,IAAA,CACTC,WAAW,GAAsB,IAAI;MAAA,IAAA,CACrCxpC,aAAa,GAAsB,IAAI;EAAA,IAAA,IAAA,CACvCypC,WAAW,GAAA,MAAA;MAQjB,IAAI,CAAChX,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAAC76C,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACsxD,aAAa,GAAGA,aAAa;MAClC,IAAI,CAAC/5E,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACs6E,WAAW,GAAG,IAAI;EACzB,EAAA;IAAAR,SAAA,CAEOxV,KAAK,GAAZ,SAAOA,KAAKA,CAAC/7D,IAAgB,EAAEvI,MAAe,EAAE;EAC9C,IAAA,IAAMu6E,UAAU,GAAGT,SAAS,CAACS,UAAU,CAAChyE,IAAI,CAAC;MAC7C,IAAIgyE,UAAU,GAAG,CAAC,EAAE;EAClBv6E,MAAAA,MAAM,CAACG,IAAI,CAAA,uDAAA,GAC+Co6E,UAC1D,CAAC;EACH,IAAA;MACA,OAAOA,UAAU,KAAK,EAAE;IAC1B,CAAA;EAAAT,EAAAA,SAAA,CAEOS,UAAU,GAAjB,SAAOA,UAAUA,CAAChyE,IAAgB,EAAU;EAC1C,IAAA,IAAM7F,MAAM,GAAG6F,IAAI,CAAC7F,MAAM;EAC1B,IAAA,IAAI83E,UAAU,GAAG/+E,IAAI,CAAC+D,GAAG,CAACq6E,aAAa,GAAG,CAAC,EAAEn3E,MAAM,GAAGm3E,aAAa,CAAC,GAAG,CAAC;MACxE,IAAIj2E,CAAC,GAAG,CAAC;MACT,OAAOA,CAAC,GAAG42E,UAAU,EAAE;EACrB;QACA,IAAIC,QAAQ,GAAG,KAAK;QACpB,IAAIC,WAAW,GAAG,EAAE;QACpB,IAAIC,SAAS,GAAG,CAAC;EACjB,MAAA,KAAK,IAAIplE,CAAC,GAAG3R,CAAC,EAAE2R,CAAC,GAAG7S,MAAM,EAAE6S,CAAC,IAAIskE,aAAa,EAAE;UAC9C,IACEtxE,IAAI,CAACgN,CAAC,CAAC,KAAK,IAAI,KACf7S,MAAM,GAAG6S,CAAC,KAAKskE,aAAa,IAAItxE,IAAI,CAACgN,CAAC,GAAGskE,aAAa,CAAC,KAAK,IAAI,CAAA,EACjE;EACAc,UAAAA,SAAS,EAAE;EACX,UAAA,IAAID,WAAW,KAAK,EAAE,EAAE;EACtBA,YAAAA,WAAW,GAAGnlE,CAAC;EACf;cACA,IAAImlE,WAAW,KAAK,CAAC,EAAE;EACrBF,cAAAA,UAAU,GACR/+E,IAAI,CAAC+D,GAAG,CACNk7E,WAAW,GAAGb,aAAa,GAAG,EAAE,EAChCtxE,IAAI,CAAC7F,MAAM,GAAGm3E,aAChB,CAAC,GAAG,CAAC;EACT,YAAA;EACF,UAAA;YACA,IAAI,CAACY,QAAQ,EAAE;cACbA,QAAQ,GAAGG,QAAQ,CAACryE,IAAI,EAAEgN,CAAC,CAAC,KAAK,CAAC;EACpC,UAAA;EACA;YACA,IACEklE,QAAQ,IACRE,SAAS,GAAG,CAAC,KACXD,WAAW,KAAK,CAAC,IAAIC,SAAS,GAAG,CAAC,IAClCplE,CAAC,GAAGskE,aAAa,GAAGW,UAAU,CAAA,EAChC;EACA,YAAA,OAAOE,WAAW;EACpB,UAAA;UACF,CAAC,MAAM,IAAIC,SAAS,EAAE;EACpB;EACA,UAAA,OAAO,EAAE;EACX,QAAA,CAAC,MAAM;EACL,UAAA;EACF,QAAA;EACF,MAAA;EACA/2E,MAAAA,CAAC,EAAE;EACL,IAAA;EACA,IAAA,OAAO,EAAE;EACX,EAAA;;EAEA;EACF;EACA;IAFEk2E,SAAA,CAGOe,WAAW,GAAlB,SAAOA,WAAWA,CAChBj6E,IAAwC,EACxC6G,QAAiB,EACH;MACd,OAAO;QACLkjE,SAAS,EACP/pE,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,GAAG,YAAY,GAAGgB,SAAS;EACjEhB,MAAAA,IAAI,EAAJA,IAAI;EACJC,MAAAA,EAAE,EAAE2L,oBAAoB,CAAC5L,IAAI,CAAC;QAC9BinE,GAAG,EAAE,EAAE;EACPD,MAAAA,cAAc,EAAE,KAAK;EACrBE,MAAAA,cAAc,EAAE,CAAC;EACjBnwD,MAAAA,OAAO,EAAE,EAAE;EACX4kD,MAAAA,OAAO,EAAE,CAAC;EACV90D,MAAAA,QAAQ,EAAE7G,IAAI,KAAK,OAAO,GAAG6G,QAAQ,GAAG7F;OACzC;EACH,EAAA;;EAEA;EACF;EACA;EACA;EAHE,EAAA,IAAApE,MAAA,GAAAs8E,SAAA,CAAAr8E,SAAA;EAAAD,EAAAA,MAAA,CAIO6qE,gBAAgB,GAAvB,SAAOA,gBAAgBA,CACrB3/D,WAAmC,EACnCsc,UAAkB,EAClBrD,UAAkB,EAClB2mD,aAAqB,EACrB;MACA,IAAI,CAAC2R,SAAS,GAAG,KAAK;EACtB,IAAA,IAAI,CAACC,MAAM,GAAG,EAAE;MAEhB,IAAI,CAACC,WAAW,GAAGL,SAAS,CAACe,WAAW,CAAC,OAAO,CAAsB;EACtE,IAAA,IAAI,CAACV,WAAW,CAAC1yE,QAAQ,GAAG6gE,aAAa;MACzC,IAAI,CAACN,WAAW,GAAG8R,SAAS,CAACe,WAAW,CACtC,OAAO,EACPvS,aACF,CAAsB;MACtB,IAAI,CAACL,SAAS,GAAG6R,SAAS,CAACe,WAAW,CAAC,KAAK,CAAyB;MACrE,IAAI,CAACT,SAAS,GAAGN,SAAS,CAACe,WAAW,CAAC,MAAM,CAAyB;EACtE,IAAA,IAAI,CAAC7S,WAAW,CAAC4C,YAAY,GAAG,KAAK;;EAErC;MACA,IAAI,CAAC0P,WAAW,GAAG,IAAI;MACvB,IAAI,CAACD,WAAW,GAAG,IAAI;MACvB,IAAI,CAACxpC,aAAa,GAAG,IAAI;MACzB,IAAI,CAAC7rB,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACrD,UAAU,GAAGA,UAAU;IAC9B,CAAA;IAAAnkB,MAAA,CAEO+qE,cAAc,GAArB,SAAOA,cAAcA,GAAG,CAAC,CAAA;EAAA/qE,EAAAA,MAAA,CAElBirE,eAAe,GAAtB,SAAOA,eAAeA,GAAS;EAC7B,IAAA,IAAQT,WAAW,GAA6B,IAAI,CAA5CA,WAAW;QAAEmS,WAAW,GAAgB,IAAI,CAA/BA,WAAW;QAAElS,SAAS,GAAK,IAAI,CAAlBA,SAAS;EAC3C,IAAA,IAAID,WAAW,EAAE;QACfA,WAAW,CAAC8S,OAAO,GAAG,IAAI;EAC5B,IAAA;EACA,IAAA,IAAIX,WAAW,EAAE;QACfA,WAAW,CAACW,OAAO,GAAG,IAAI;EAC5B,IAAA;EACA,IAAA,IAAI7S,SAAS,EAAE;QACbA,SAAS,CAAC6S,OAAO,GAAG,IAAI;EAC1B,IAAA;MACA,IAAI,CAACT,WAAW,GAAG,IAAI;MACvB,IAAI,CAACxpC,aAAa,GAAG,IAAI;IAC3B,CAAA;EAAArzC,EAAAA,MAAA,CAEOkrE,KAAK,GAAZ,SAAOA,KAAKA,CACVngE,IAAgB,EAChBiP,UAAkB,EAClBujE,WAAW,EACX1pC,KAAK,EACU;EAAA,IAAA,IAFf0pC,WAAW,KAAA,MAAA,EAAA;EAAXA,MAAAA,WAAW,GAAG,KAAK;EAAA,IAAA;EAAA,IAAA,IACnB1pC,KAAK,KAAA,MAAA,EAAA;EAALA,MAAAA,KAAK,GAAG,KAAK;EAAA,IAAA;MAEb,IAAI,CAAC0pC,WAAW,EAAE;QAChB,IAAI,CAACf,SAAS,GAAG,IAAI;EACvB,IAAA;EAEA,IAAA,IAAInJ,GAAe;EAEnB,IAAA,IAAM5H,UAAU,GAAG,IAAI,CAACkR,WAAgC;EACxD,IAAA,IAAMlyD,UAAU,GAAG,IAAI,CAAC+/C,WAAgC;EACxD,IAAA,IAAMY,QAAQ,GAAG,IAAI,CAACX,SAAiC;EACvD,IAAA,IAAMiB,SAAS,GAAG,IAAI,CAACkR,SAAiC;EAExD,IAAA,IAAIY,QAAQ,GAAG/R,UAAU,CAACpB,GAAG;EAC7B,IAAA,IAAInwD,SAAS,GAAGuxD,UAAU,CAAC6R,OAAO;EAClC,IAAA,IAAIG,QAAQ,GAAGhzD,UAAU,CAAC4/C,GAAG;EAC7B,IAAA,IAAIqT,MAAM,GAAGtS,QAAQ,CAACf,GAAG;EACzB,IAAA,IAAIsT,SAAS,GAAGlzD,UAAU,CAAC6yD,OAAO;EAClC,IAAA,IAAI7T,OAAO,GAAG2B,QAAQ,CAACkS,OAAO;MAC9B,IAAIM,UAAyB,GAAG,IAAI;EACpC,IAAA,IAAInB,SAAS,GAAG,IAAI,CAACA,SAAS;EAC9B,IAAA,IAAIoB,KAAK,GAAG,IAAI,CAACnB,MAAM;EAEvB,IAAA,IAAI12E,GAAG,GAAG+E,IAAI,CAAC7F,MAAM;MACrB,IAAI,IAAI,CAACmuC,aAAa,EAAE;QACtBtoC,IAAI,GAAG4O,gBAAgB,CAAC,IAAI,CAAC05B,aAAa,EAAEtoC,IAAI,CAAC;QACjD/E,GAAG,GAAG+E,IAAI,CAAC7F,MAAM;QACjB,IAAI,CAACmuC,aAAa,GAAG,IAAI;EAC3B,IAAA;EAEA,IAAA,IAAIrtC,GAAG,GAAGq2E,aAAa,IAAI,CAACxoC,KAAK,EAAE;QACjC,IAAI,CAACR,aAAa,GAAGtoC,IAAI;QACzB,OAAO;EACL0f,QAAAA,UAAU,EAAVA,UAAU;EACVghD,QAAAA,UAAU,EAAVA,UAAU;EACVL,QAAAA,QAAQ,EAARA,QAAQ;EACRM,QAAAA,SAAS,EAATA;SACD;EACH,IAAA;EAEA,IAAA,IAAMqR,UAAU,GAAG9+E,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE+6E,SAAS,CAACS,UAAU,CAAChyE,IAAI,CAAC,CAAC;EAC1D/E,IAAAA,GAAG,IAAI,CAACA,GAAG,GAAG+2E,UAAU,IAAIV,aAAa;MACzC,IAAIr2E,GAAG,GAAG+E,IAAI,CAAC2B,UAAU,IAAI,CAACmnC,KAAK,EAAE;EACnC,MAAA,IAAI,CAACR,aAAa,GAAG,IAAI1sC,UAAU,CACjCoE,IAAI,CAACjE,MAAM,EACXd,GAAG,EACH+E,IAAI,CAACjE,MAAM,CAAC4F,UAAU,GAAG1G,GAC3B,CAAC;EACH,IAAA;;EAEA;MACA,IAAI83E,cAAc,GAAG,CAAC;EACtB,IAAA,KAAK,IAAIv2E,KAAK,GAAGw1E,UAAU,EAAEx1E,KAAK,GAAGvB,GAAG,EAAEuB,KAAK,IAAI80E,aAAa,EAAE;EAChE,MAAA,IAAItxE,IAAI,CAACxD,KAAK,CAAC,KAAK,IAAI,EAAE;EACxB,QAAA,IAAMw2E,GAAG,GAAG,CAAC,EAAEhzE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;EACtC,QAAA,IAAM8iE,GAAG,GAAG+S,QAAQ,CAACryE,IAAI,EAAExD,KAAK,CAAC;EACjC,QAAA,IAAMy2E,GAAG,GAAG,CAACjzE,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC;;EAEzC;EACA,QAAA,IAAI+H,MAAc,GAAA,MAAA;UAClB,IAAI0uE,GAAG,GAAG,CAAC,EAAE;YACX1uE,MAAM,GAAG/H,KAAK,GAAG,CAAC,GAAGwD,IAAI,CAACxD,KAAK,GAAG,CAAC,CAAC;EACpC;EACA,UAAA,IAAI+H,MAAM,KAAK/H,KAAK,GAAG80E,aAAa,EAAE;EACpC,YAAA;EACF,UAAA;EACF,QAAA,CAAC,MAAM;YACL/sE,MAAM,GAAG/H,KAAK,GAAG,CAAC;EACpB,QAAA;EACA,QAAA,QAAQ8iE,GAAG;EACT,UAAA,KAAKmT,QAAQ;EACX,YAAA,IAAIO,GAAG,EAAE;EACP,cAAA,IAAI7jE,SAAS,KAAKm5D,GAAG,GAAGD,QAAQ,CAACl5D,SAAS,EAAE,IAAI,CAAC1X,MAAM,CAAC,CAAC,EAAE;EACzD,gBAAA,IAAI,CAACy7E,gBAAgB,CAACxS,UAAU,CAAC2B,YAAY,CAAC;EAC9C,gBAAA,IAAI,IAAI,CAAC0P,WAAW,KAAK,IAAI,EAAE;EAC7B,kBAAA,IAAI,CAACA,WAAW,CAAC1J,QAAQ,CAAC3H,UAAU,EAAEC,SAAS,EAAE2H,GAAG,EAAE,KAAK,CAAC;EAC9D,gBAAA;EACF,cAAA;EAEAn5D,cAAAA,SAAS,GAAG;EAAEnP,gBAAAA,IAAI,EAAE,EAAE;EAAE8E,gBAAAA,IAAI,EAAE;iBAAG;EACnC,YAAA;EACA,YAAA,IAAIqK,SAAS,EAAE;EACbA,cAAAA,SAAS,CAACnP,IAAI,CAACgE,IAAI,CAAChE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAE/H,KAAK,GAAG80E,aAAa,CAAC,CAAC;EACjEniE,cAAAA,SAAS,CAACrK,IAAI,IAAItI,KAAK,GAAG80E,aAAa,GAAG/sE,MAAM;EAClD,YAAA;EACA,YAAA;EACF,UAAA,KAAKmuE,QAAQ;EACX,YAAA,IAAIM,GAAG,EAAE;EACP,cAAA,IAAIJ,SAAS,KAAKtK,GAAG,GAAGD,QAAQ,CAACuK,SAAS,EAAE,IAAI,CAACn7E,MAAM,CAAC,CAAC,EAAE;kBACzD,QAAQioB,UAAU,CAAC2iD,YAAY;EAC7B,kBAAA,KAAK,KAAK;EACR,oBAAA,IAAI,CAAC8Q,WAAW,CAACzzD,UAAU,EAAE4oD,GAAG,CAAC;EACjC,oBAAA;EACF,kBAAA,KAAK,KAAK;EACR,oBAAA,IAAI,CAAC8K,YAAY,CAAC1zD,UAAU,EAAE4oD,GAAG,CAAC;EAClC,oBAAA;EACF,kBAAA,KAAK,KAAK;EACR,oBAAkC;EAChC,sBAAA,IAAI,CAAC+K,WAAW,CAAC3zD,UAAU,EAAE4oD,GAAG,CAAC;EACnC,oBAAA;EACA,oBAAA;EACJ;EACF,cAAA;EACAsK,cAAAA,SAAS,GAAG;EAAE5yE,gBAAAA,IAAI,EAAE,EAAE;EAAE8E,gBAAAA,IAAI,EAAE;iBAAG;EACnC,YAAA;EACA,YAAA,IAAI8tE,SAAS,EAAE;EACbA,cAAAA,SAAS,CAAC5yE,IAAI,CAACgE,IAAI,CAAChE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAE/H,KAAK,GAAG80E,aAAa,CAAC,CAAC;EACjEsB,cAAAA,SAAS,CAAC9tE,IAAI,IAAItI,KAAK,GAAG80E,aAAa,GAAG/sE,MAAM;EAClD,YAAA;EACA,YAAA;EACF,UAAA,KAAKouE,MAAM;EACT,YAAA,IAAIK,GAAG,EAAE;EACP,cAAA,IAAItU,OAAO,KAAK4J,GAAG,GAAGD,QAAQ,CAAC3J,OAAO,EAAE,IAAI,CAACjnE,MAAM,CAAC,CAAC,EAAE;EACrD,gBAAA,IAAI,CAAC67E,WAAW,CAACjT,QAAQ,EAAEiI,GAAG,CAAC;EACjC,cAAA;EAEA5J,cAAAA,OAAO,GAAG;EAAE1+D,gBAAAA,IAAI,EAAE,EAAE;EAAE8E,gBAAAA,IAAI,EAAE;iBAAG;EACjC,YAAA;EACA,YAAA,IAAI45D,OAAO,EAAE;EACXA,cAAAA,OAAO,CAAC1+D,IAAI,CAACgE,IAAI,CAAChE,IAAI,CAACkF,QAAQ,CAACX,MAAM,EAAE/H,KAAK,GAAG80E,aAAa,CAAC,CAAC;EAC/D5S,cAAAA,OAAO,CAAC55D,IAAI,IAAItI,KAAK,GAAG80E,aAAa,GAAG/sE,MAAM;EAChD,YAAA;EACA,YAAA;EACF,UAAA,KAAK,CAAC;EACJ,YAAA,IAAIyuE,GAAG,EAAE;EACPzuE,cAAAA,MAAM,IAAIvE,IAAI,CAACuE,MAAM,CAAC,GAAG,CAAC;EAC5B,YAAA;cAEAuuE,KAAK,GAAG,IAAI,CAACnB,MAAM,GAAG4B,QAAQ,CAACvzE,IAAI,EAAEuE,MAAM,CAAC;EAC5C;EACA,YAAA;EACF,UAAA,KAAKuuE,KAAK;EAAE,YAAA;EACV,cAAA,IAAIE,GAAG,EAAE;EACPzuE,gBAAAA,MAAM,IAAIvE,IAAI,CAACuE,MAAM,CAAC,GAAG,CAAC;EAC5B,cAAA;gBAEA,IAAMivE,UAAU,GAAGC,QAAQ,CACzBzzE,IAAI,EACJuE,MAAM,EACN,IAAI,CAACitE,aAAa,EAClBgB,WAAW,EACX,IAAI,CAACzX,QAAQ,EACb,IAAI,CAACtjE,MACP,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;gBACAg7E,QAAQ,GAAGe,UAAU,CAACf,QAAQ;gBAC9B,IAAIA,QAAQ,GAAG,CAAC,EAAE;kBAChB/R,UAAU,CAACpB,GAAG,GAAGmT,QAAQ;EACzB/R,gBAAAA,UAAU,CAAC2B,YAAY,GAAGmR,UAAU,CAACE,iBAAiB;EACxD,cAAA;gBAEAhB,QAAQ,GAAGc,UAAU,CAACd,QAAQ;gBAC9B,IAAIA,QAAQ,GAAG,CAAC,EAAE;kBAChBhzD,UAAU,CAAC4/C,GAAG,GAAGoT,QAAQ;EACzBhzD,gBAAAA,UAAU,CAAC2iD,YAAY,GAAGmR,UAAU,CAACG,iBAAiB;EACxD,cAAA;gBACAhB,MAAM,GAAGa,UAAU,CAACb,MAAM;gBAC1B,IAAIA,MAAM,GAAG,CAAC,EAAE;kBACdtS,QAAQ,CAACf,GAAG,GAAGqT,MAAM;EACvB,cAAA;EAEA,cAAA,IAAIE,UAAU,KAAK,IAAI,IAAI,CAACnB,SAAS,EAAE;kBACrC,IAAI,CAACj6E,MAAM,CAACG,IAAI,CAAA,uBAAA,GACU4E,KAAK,GAAA,sBAAA,GAAuBq2E,UAAU,GAAA,gCAAA,GAAiCb,UAAU,GAAA,2BAC3G,CAAC;EACDa,gBAAAA,UAAU,GAAG,IAAI;EACjB;kBACAr2E,KAAK,GAAGw1E,UAAU,GAAG,GAAG;EAC1B,cAAA;EACAN,cAAAA,SAAS,GAAG,IAAI,CAACA,SAAS,GAAG,IAAI;EACjC,cAAA;EACF,YAAA;EACA,UAAA,KAAK,IAAI;EACT,UAAA,KAAK,MAAM;EACT,YAAA;EACF,UAAA;EACEmB,YAAAA,UAAU,GAAGvT,GAAG;EAChB,YAAA;EACJ;EACF,MAAA,CAAC,MAAM;EACLyT,QAAAA,cAAc,EAAE;EAClB,MAAA;EACF,IAAA;MAEA,IAAIA,cAAc,GAAG,CAAC,EAAE;EACtBa,MAAAA,gBAAgB,CACd,IAAI,CAAC7Y,QAAQ,EACb,IAAI59C,KAAK,CAAA,QAAA,GACE41D,cAAc,GAAA,0CACzB,CAAC,EACD15E,SAAS,EACT,IAAI,CAAC5B,MACP,CAAC;EACH,IAAA;MAEAipE,UAAU,CAAC6R,OAAO,GAAGpjE,SAAS;MAC9BuQ,UAAU,CAAC6yD,OAAO,GAAGK,SAAS;MAC9BvS,QAAQ,CAACkS,OAAO,GAAG7T,OAAO;EAE1B,IAAA,IAAMmV,WAA0B,GAAG;EACjCn0D,MAAAA,UAAU,EAAVA,UAAU;EACVghD,MAAAA,UAAU,EAAVA,UAAU;EACVL,MAAAA,QAAQ,EAARA,QAAQ;EACRM,MAAAA,SAAS,EAATA;OACD;EAED,IAAA,IAAI73B,KAAK,EAAE;EACT,MAAA,IAAI,CAACgrC,uBAAuB,CAACD,WAAW,CAAC;EAC3C,IAAA;EAEA,IAAA,OAAOA,WAAW;IACpB,CAAA;EAAA5+E,EAAAA,MAAA,CAEO6zC,KAAK,GAAZ,SAAOA,KAAKA,GAA2C;EACrD,IAAA,IAAQR,aAAa,GAAK,IAAI,CAAtBA,aAAa;MACrB,IAAI,CAACA,aAAa,GAAG,IAAI;EACzB,IAAA,IAAI1jC,MAAqB;EACzB,IAAA,IAAI0jC,aAAa,EAAE;EACjB1jC,MAAAA,MAAM,GAAG,IAAI,CAACu7D,KAAK,CAAC73B,aAAa,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC;EACrD,IAAA,CAAC,MAAM;EACL1jC,MAAAA,MAAM,GAAG;UACP87D,UAAU,EAAE,IAAI,CAACkR,WAAgC;UACjDlyD,UAAU,EAAE,IAAI,CAAC+/C,WAAgC;UACjDY,QAAQ,EAAE,IAAI,CAACX,SAAiC;UAChDiB,SAAS,EAAE,IAAI,CAACkR;SACjB;EACH,IAAA;EACA,IAAA,IAAI,CAACiC,uBAAuB,CAAClvE,MAAM,CAAC;MACpC,IAAI,IAAI,CAAC6sE,SAAS,EAAE;QAClB,OAAO,IAAI,CAACnuC,OAAO,CAAC1+B,MAAM,EAAE,IAAI,CAAC6sE,SAAS,CAAC;EAC7C,IAAA;EACA,IAAA,OAAO7sE,MAAM;IACf,CAAA;EAAA3P,EAAAA,MAAA,CAEQ6+E,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAACD,WAA0B,EAAE;EAC1D,IAAA,IAAQn0D,UAAU,GAAsCm0D,WAAW,CAA3Dn0D,UAAU;QAAEghD,UAAU,GAA0BmT,WAAW,CAA/CnT,UAAU;QAAEL,QAAQ,GAAgBwT,WAAW,CAAnCxT,QAAQ;QAAEM,SAAS,GAAKkT,WAAW,CAAzBlT,SAAS;EACnD,IAAA,IAAMxxD,SAAS,GAAGuxD,UAAU,CAAC6R,OAAO;EACpC,IAAA,IAAMK,SAAS,GAAGlzD,UAAU,CAAC6yD,OAAO;EACpC,IAAA,IAAM7T,OAAO,GAAG2B,QAAQ,CAACkS,OAAO;EAChC;EACA,IAAA,IAAIjK,GAAe;EACnB,IAAA,IAAIn5D,SAAS,KAAKm5D,GAAG,GAAGD,QAAQ,CAACl5D,SAAS,EAAE,IAAI,CAAC1X,MAAM,CAAC,CAAC,EAAE;EACzD,MAAA,IAAI,CAACy7E,gBAAgB,CAACxS,UAAU,CAAC2B,YAAY,CAAC;EAC9C,MAAA,IAAI,IAAI,CAAC0P,WAAW,KAAK,IAAI,EAAE;EAC7B,QAAA,IAAI,CAACA,WAAW,CAAC1J,QAAQ,CACvB3H,UAAU,EACVC,SAAS,EACT2H,GAAG,EACH,IACF,CAAC;UACD5H,UAAU,CAAC6R,OAAO,GAAG,IAAI;EAC3B,MAAA;EACF,IAAA,CAAC,MAAM;EACL;QACA7R,UAAU,CAAC6R,OAAO,GAAGpjE,SAAS;EAChC,IAAA;EAEA,IAAA,IAAIyjE,SAAS,KAAKtK,GAAG,GAAGD,QAAQ,CAACuK,SAAS,EAAE,IAAI,CAACn7E,MAAM,CAAC,CAAC,EAAE;QACzD,QAAQioB,UAAU,CAAC2iD,YAAY;EAC7B,QAAA,KAAK,KAAK;EACR,UAAA,IAAI,CAAC8Q,WAAW,CAACzzD,UAAU,EAAE4oD,GAAG,CAAC;EACjC,UAAA;EACF,QAAA,KAAK,KAAK;EACR,UAAA,IAAI,CAAC8K,YAAY,CAAC1zD,UAAU,EAAE4oD,GAAG,CAAC;EAClC,UAAA;EACF,QAAA,KAAK,KAAK;EACR,UAAkC;EAChC,YAAA,IAAI,CAAC+K,WAAW,CAAC3zD,UAAU,EAAE4oD,GAAG,CAAC;EACnC,UAAA;EACA,UAAA;EACJ;QACA5oD,UAAU,CAAC6yD,OAAO,GAAG,IAAI;EAC3B,IAAA,CAAC,MAAM;EACL,MAAA,IAAIK,SAAS,IAAA,IAAA,IAATA,SAAS,CAAE9tE,IAAI,EAAE;EACnB,QAAA,IAAI,CAACrN,MAAM,CAACzC,GAAG,CACb,+DACF,CAAC;EACH,MAAA;;EAEA;QACA0qB,UAAU,CAAC6yD,OAAO,GAAGK,SAAS;EAChC,IAAA;EAEA,IAAA,IAAIlU,OAAO,KAAK4J,GAAG,GAAGD,QAAQ,CAAC3J,OAAO,EAAE,IAAI,CAACjnE,MAAM,CAAC,CAAC,EAAE;EACrD,MAAA,IAAI,CAAC67E,WAAW,CAACjT,QAAQ,EAAEiI,GAAG,CAAC;QAC/BjI,QAAQ,CAACkS,OAAO,GAAG,IAAI;EACzB,IAAA,CAAC,MAAM;EACL;QACAlS,QAAQ,CAACkS,OAAO,GAAG7T,OAAO;EAC5B,IAAA;IACF,CAAA;IAAAzpE,MAAA,CAEO2rE,cAAc,GAArB,SAAOA,cAAcA,CACnB5gE,IAAgB,EAChB87C,OAAgB,EAChB7sC,UAAkB,EACM;EACxB,IAAA,IAAM4kE,WAAW,GAAG,IAAI,CAAC1T,KAAK,CAC5BngE,IAAI,EACJiP,UAAU,EACV,IAAI,EACJ,CAAC,IAAI,CAACiR,MAAM,CAACqyC,WACf,CAAC;EACD,IAAA,IAAMkf,SAAS,GAAI,IAAI,CAACA,SAAS,GAAG,IAAIpN,kBAAkB,CACxD,IAAI,CAACtJ,QAAQ,EACb,IAAI,CAAC76C,MAAM,EACX47B,OACF,CAAE;EACF,IAAA,OAAO,IAAI,CAACxY,OAAO,CAACuwC,WAAW,EAAEpC,SAAS,CAAC;IAC7C,CAAA;EAAAx8E,EAAAA,MAAA,CAEQi+E,gBAAgB,GAAxB,SAAQA,gBAAgBA,CAAC1rE,KAAyB,EAAE;EAClD,IAAA,IAAI,IAAI,CAACuqE,WAAW,KAAK,IAAI,EAAE;QAC7B,IAAIvqE,KAAK,KAAK,KAAK,EAAE;EACnB,QAAA,IAAI,CAACuqE,WAAW,GAAG,IAAI5J,cAAc,EAAE;EACzC,MAAA,CAAC,MAAM,IAAoC3gE,KAAK,KAAK,MAAM,EAAE;EAC3D,QAAA,IAAI,CAACuqE,WAAW,GAAG,IAAItH,eAAe,EAAE;EAC1C,MAAA;EACF,IAAA;IACF,CAAA;IAAAx1E,MAAA,CAEQquC,OAAO,GAAf,SAAQA,OAAOA,CACbuwC,WAA0B,EAC1BpC,SAA6B,EACL;EACxB,IAAA,OAAO,IAAI7zD,OAAO,CAAC,UAACC,OAAO,EAAK;EAC9B,MAAA,IAAQ6B,UAAU,GAAiBm0D,WAAW,CAAtCn0D,UAAU;UAAEghD,UAAU,GAAKmT,WAAW,CAA1BnT,UAAU;QAC9B,IAAIhhD,UAAU,CAACtQ,OAAO,IAAIsQ,UAAU,CAAC2iD,YAAY,KAAK,KAAK,EAAE;UAC3DoP,SAAS,CAAC5M,iBAAiB,CACxBnlD,UAAU,CAAgBtQ,OAAO,EAClC,CAAC,EACD,YAAM;YACJ,IAAIsxD,UAAU,CAACtxD,OAAO,EAAE;cACtBqiE,SAAS,CAACjM,iBAAiB,CAAC9E,UAAU,CAACtxD,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,YAAM;gBAC1DyO,OAAO,CAACg2D,WAAW,CAAC;EACtB,YAAA,CAAC,CAAC;EACJ,UAAA,CAAC,MAAM;cACLh2D,OAAO,CAACg2D,WAAW,CAAC;EACtB,UAAA;EACF,QAAA,CACF,CAAC;EACH,MAAA,CAAC,MAAM,IAAInT,UAAU,CAACtxD,OAAO,EAAE;UAC7BqiE,SAAS,CAACjM,iBAAiB,CAAC9E,UAAU,CAACtxD,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,YAAM;YAC1DyO,OAAO,CAACg2D,WAAW,CAAC;EACtB,QAAA,CAAC,CAAC;EACJ,MAAA;EACF,IAAA,CAAC,CAAC;IACJ,CAAA;EAAA5+E,EAAAA,MAAA,CAEOkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,IAAI,CAAC4jE,QAAQ,EAAE;EACjB,MAAA,IAAI,CAACA,QAAQ,CAACgZ,kBAAkB,EAAE;EACpC,IAAA;EACA;MACA,IAAI,CAAC7zD,MAAM,GAAG,IAAI,CAACzoB,MAAM,GAAG,IAAI,CAACsjE,QAAQ,GAAG,IAAI;EAChD,IAAA,IAAI,CAAC+W,WAAW,GACd,IAAI,CAACC,WAAW,GAChB,IAAI,CAACzpC,aAAa,GAClB,IAAI,CAACmpC,SAAS,GACZ,IAAI;EACR,IAAA,IAAI,CAACG,WAAW,GACd,IAAI,CAACnS,WAAW,GAChB,IAAI,CAACC,SAAS,GACd,IAAI,CAACmS,SAAS,GACZx4E,SAAS;IACf,CAAA;IAAApE,MAAA,CAEQk+E,WAAW,GAAnB,SAAQA,WAAWA,CAACjsE,KAAwB,EAAEohE,GAAQ,EAAE;MACtD,IAAIrY,WAAW,GAAG,CAAC;EACnB,IAAA,IAAM6hB,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAI9xE,IAAI,GAAGsoE,GAAG,CAACtoE,IAAI;EACnB,IAAA,IAAI8xE,WAAW,EAAE;QACf,IAAI,CAACA,WAAW,GAAG,IAAI;EACvB,MAAA,IAAMkC,iBAAiB,GAAGlC,WAAW,CAAClV,OAAO;QAC7C,IAAMqX,YAAY,GAAGnC,WAAW,CAAC38E,MAAM,CAACwnE,IAAI,CAACh7D,UAAU;EACvD;EACA,MAAA,IAAIqyE,iBAAiB,KAAK,EAAE,EAAE;UAC5Bh0E,IAAI,GAAG4O,gBAAgB,CAACkjE,WAAW,CAAC38E,MAAM,CAACwnE,IAAI,EAAE38D,IAAI,CAAC;EACxD,MAAA,CAAC,MAAM;EACL,QAAA,IAAMk0E,kBAAkB,GAAGD,YAAY,GAAGD,iBAAiB;EAC3DlC,QAAAA,WAAW,CAAC38E,MAAM,CAACwnE,IAAI,CAAC1+D,GAAG,CACzB+B,IAAI,CAACkF,QAAQ,CAAC,CAAC,EAAE8uE,iBAAiB,CAAC,EACnCE,kBACF,CAAC;UACDhtE,KAAK,CAACkI,OAAO,CAACpL,IAAI,CAAC8tE,WAAW,CAAC38E,MAAM,CAAC;UACtC86D,WAAW,GAAG6hB,WAAW,CAAClV,OAAO;EACnC,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAIr4D,MAAc;EAClB,IAAA,IAAItJ,GAAW;EACf,IAAA,KAAKsJ,MAAM,GAAG0rD,WAAW,EAAEh1D,GAAG,GAAG+E,IAAI,CAAC7F,MAAM,EAAEoK,MAAM,GAAGtJ,GAAG,GAAG,CAAC,EAAEsJ,MAAM,EAAE,EAAE;QACxE,IAAIg+D,UAAa,CAACviE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EAC/B,QAAA;EACF,MAAA;EACF,IAAA;EACA;MACA,IAAIA,MAAM,KAAK0rD,WAAW,EAAE;EAC1B,MAAA,IAAI5pC,MAAc;EAClB,MAAA,IAAM8tD,WAAW,GAAG5vE,MAAM,GAAGtJ,GAAG,GAAG,CAAC;EACpC,MAAA,IAAIk5E,WAAW,EAAE;EACf9tD,QAAAA,MAAM,sDAAoD9hB,MAAQ;EACpE,MAAA,CAAC,MAAM;EACL8hB,QAAAA,MAAM,GAAG,iCAAiC;EAC5C,MAAA;EACAutD,MAAAA,gBAAgB,CACd,IAAI,CAAC7Y,QAAQ,EACb,IAAI59C,KAAK,CAACkJ,MAAM,CAAC,EACjB8tD,WAAW,EACX,IAAI,CAAC18E,MACP,CAAC;QACD,IAAI,CAAC08E,WAAW,EAAE;EAChB,QAAA;EACF,MAAA;EACF,IAAA;EAEA5R,IAAAA,eAAoB,CAACr7D,KAAK,EAAE,IAAI,CAAC6zD,QAAQ,EAAE/6D,IAAI,EAAEuE,MAAM,EAAE,IAAI,CAACkY,UAAU,CAAC;EAEzE,IAAA,IAAIxL,GAAW;EACf,IAAA,IAAIq3D,GAAG,CAACr3D,GAAG,KAAK5X,SAAS,EAAE;QACzB4X,GAAG,GAAGq3D,GAAG,CAACr3D,GAAG;MACf,CAAC,MAAM,IAAI6gE,WAAW,EAAE;EACtB;EACA;QACA,IAAMtV,aAAa,GAAG+F,gBAAqB,CAACr7D,KAAK,CAACq0D,UAAoB,CAAC;EACvEtqD,MAAAA,GAAG,GAAG6gE,WAAW,CAAC38E,MAAM,CAAC8b,GAAG,GAAGurD,aAAa;EAC9C,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC/kE,MAAM,CAACG,IAAI,CAAC,kCAAkC,CAAC;EACpD,MAAA;EACF,IAAA;;EAEA;MACA,IAAI2kE,UAAU,GAAG,CAAC;EAClB,IAAA,IAAIkB,KAAK;MACT,OAAOl5D,MAAM,GAAGtJ,GAAG,EAAE;EACnBwiE,MAAAA,KAAK,GAAG8E,aAAgB,CAACr7D,KAAK,EAAElH,IAAI,EAAEuE,MAAM,EAAE0M,GAAG,EAAEsrD,UAAU,CAAC;QAC9Dh4D,MAAM,IAAIk5D,KAAK,CAACtjE,MAAM;EACtB,MAAA,IAAI,CAACsjE,KAAK,CAACb,OAAO,EAAE;EAClBL,QAAAA,UAAU,EAAE;UACZ,OAAOh4D,MAAM,GAAGtJ,GAAG,GAAG,CAAC,EAAEsJ,MAAM,EAAE,EAAE;YACjC,IAAIg+D,UAAa,CAACviE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EAC/B,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA,CAAC,MAAM;UACL,IAAI,CAACutE,WAAW,GAAGrU,KAAK;EACxB,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAA;IAAAxoE,MAAA,CAEQm+E,YAAY,GAApB,SAAQA,YAAYA,CAAClsE,KAAwB,EAAEohE,GAAQ,EAAE;EACvD,IAAA,IAAMtoE,IAAI,GAAGsoE,GAAG,CAACtoE,IAAI;EACrB,IAAA,IAAM7F,MAAM,GAAG6F,IAAI,CAAC7F,MAAM;MAC1B,IAAIoiE,UAAU,GAAG,CAAC;MAClB,IAAIh4D,MAAM,GAAG,CAAC;EACd,IAAA,IAAM0M,GAAG,GAAGq3D,GAAG,CAACr3D,GAAG;MACnB,IAAIA,GAAG,KAAK5X,SAAS,EAAE;EACrB,MAAA,IAAI,CAAC5B,MAAM,CAACG,IAAI,CAAC,mCAAmC,CAAC;EACrD,MAAA;EACF,IAAA;MAEA,OAAO2M,MAAM,GAAGpK,MAAM,EAAE;QACtB,IAAImoE,QAAkB,CAACtiE,IAAI,EAAEuE,MAAM,CAAC,EAAE;EACpC,QAAA,IAAMk5D,KAAK,GAAG6E,WAAqB,CACjCp7D,KAAK,EACLlH,IAAI,EACJuE,MAAM,EACN0M,GAAG,EACHsrD,UACF,CAAC;EACD,QAAA,IAAIkB,KAAK,EAAE;YACTl5D,MAAM,IAAIk5D,KAAK,CAACtjE,MAAM;EACtBoiE,UAAAA,UAAU,EAAE;EACd,QAAA,CAAC,MAAM;EACL;EACA,UAAA;EACF,QAAA;EACF,MAAA,CAAC,MAAM;EACL;EACAh4D,QAAAA,MAAM,EAAE;EACV,MAAA;EACF,IAAA;IACF,CAAA;IAAAtP,MAAA,CAEQo+E,WAAW,GAAnB,SAAQA,WAAWA,CAACnsE,KAAwB,EAAEohE,GAAQ,EAAE;EACtD,IAAkC;EAChC,MAAA,IAAMtoE,IAAI,GAAGsoE,GAAG,CAACtoE,IAAI;EACrB,MAAA,IAAMiR,GAAG,GAAGq3D,GAAG,CAACr3D,GAAG;QACnB,IAAIA,GAAG,KAAK5X,SAAS,EAAE;EACrB,QAAA,IAAI,CAAC5B,MAAM,CAACG,IAAI,CAAC,kCAAkC,CAAC;EACpD,QAAA;EACF,MAAA;EACA,MAAA,IAAMuC,MAAM,GAAG6F,IAAI,CAAC7F,MAAM;QAC1B,IAAIoiE,UAAU,GAAG,CAAC;QAClB,IAAIh4D,MAAM,GAAG,CAAC;EACd,MAAA,IAAIyrC,MAAM;QAEV,OACEzrC,MAAM,GAAGpK,MAAM,IACf,CAAC61C,MAAM,GAAGokC,YAAe,CAACltE,KAAK,EAAElH,IAAI,EAAEuE,MAAM,EAAE0M,GAAG,EAAEsrD,UAAU,EAAE,CAAC,IAAI,CAAA,EACrE;EACAh4D,QAAAA,MAAM,IAAIyrC,MAAM;EAClB,MAAA;EACF,IAAA;IACF,CAAA;IAAA/6C,MAAA,CAEQq+E,WAAW,GAAnB,SAAQA,WAAWA,CAACjT,QAA8B,EAAEiI,GAAQ,EAAE;EAC5D,IAAA,IAAIA,GAAG,CAACr3D,GAAG,KAAK5X,SAAS,EAAE;EACzB,MAAA,IAAI,CAAC5B,MAAM,CAACG,IAAI,CAAC,kCAAkC,CAAC;EACpD,MAAA;EACF,IAAA;MACA,IAAMy8E,SAAS,GAAGl8E,QAAA,CAAc,EAAE,EAAEmwE,GAAG,EAAmB;QACxDjwE,IAAI,EAAE,IAAI,CAACu5E,WAAW,GAAGzS,cAAc,CAAC+E,IAAI,GAAG/E,cAAc,CAACqB,QAAQ;QACtEthE,QAAQ,EAAE5L,MAAM,CAACi5B;EACnB,KAAC,CAAC;EACF8zC,IAAAA,QAAQ,CAACjxD,OAAO,CAACpL,IAAI,CAACqwE,SAAS,CAAC;IAClC,CAAA;EAAA,EAAA,OAAA9C,SAAA;EAAA,CAAA,EAAA;EAGF,SAASc,QAAQA,CAACryE,IAAgB,EAAEuE,MAAc,EAAU;EAC1D;EACA,EAAA,OAAO,CAAC,CAACvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,IAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC;EAC5D;EAEA,SAASgvE,QAAQA,CAACvzE,IAAgB,EAAEuE,MAAc,EAAU;EAC1D;EACA,EAAA,OAAQ,CAACvE,IAAI,CAACuE,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GAAIvE,IAAI,CAACuE,MAAM,GAAG,EAAE,CAAC;EAC9D;EAEA,SAASkvE,QAAQA,CACfzzE,IAAgB,EAChBuE,MAAc,EACditE,aAA4B,EAC5BgB,WAAoB,EACpBzX,QAAyB,EACzBtjE,MAAe,EACf;EACA,EAAA,IAAMmN,MAAM,GAAG;MACb8tE,QAAQ,EAAE,EAAE;MACZD,QAAQ,EAAE,EAAE;MACZE,MAAM,EAAE,EAAE;EACVe,IAAAA,iBAAiB,EAAE,KAAuB;EAC1CC,IAAAA,iBAAiB,EAAE;KACpB;EACD,EAAA,IAAMW,aAAa,GAAI,CAACt0E,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC;IACzE,IAAMgwE,QAAQ,GAAGhwE,MAAM,GAAG,CAAC,GAAG+vE,aAAa,GAAG,CAAC;EAC/C;EACA;EACA,EAAA,IAAME,iBAAiB,GACpB,CAACx0E,IAAI,CAACuE,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GAAIvE,IAAI,CAACuE,MAAM,GAAG,EAAE,CAAC;EACvD;IACAA,MAAM,IAAI,EAAE,GAAGiwE,iBAAiB;IAChC,OAAOjwE,MAAM,GAAGgwE,QAAQ,EAAE;EACxB,IAAA,IAAMjV,GAAG,GAAG+S,QAAQ,CAACryE,IAAI,EAAEuE,MAAM,CAAC;EAClC,IAAA,IAAMkwE,YAAY,GAAI,CAACz0E,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAIvE,IAAI,CAACuE,MAAM,GAAG,CAAC,CAAC;MACxE,QAAQvE,IAAI,CAACuE,MAAM,CAAC;EAClB,MAAA,KAAK,IAAI;EAAE;UACT,IAAI,CAACiuE,WAAW,EAAE;EAChBkC,UAAAA,2CAA2C,CAAC,UAAU,EAAEj9E,MAAM,CAAC;EAC/D,UAAA;EACF,QAAA;EACF;EACA,MAAA,KAAK,IAAI;EAAE;EACT;EACA,QAAA,IAAImN,MAAM,CAAC8tE,QAAQ,KAAK,EAAE,EAAE;YAC1B9tE,MAAM,CAAC8tE,QAAQ,GAAGpT,GAAG;EACvB,QAAA;EAEA,QAAA;;EAEF;EACA,MAAA,KAAK,IAAI;EACP;EACA,QAAA,IAAI16D,MAAM,CAAC+tE,MAAM,KAAK,EAAE,EAAE;YACxB/tE,MAAM,CAAC+tE,MAAM,GAAGrT,GAAG;EACrB,QAAA;EAEA,QAAA;EAEF,MAAA,KAAK,IAAI;EAAE;UACT,IAAI,CAACkT,WAAW,EAAE;EAChBkC,UAAAA,2CAA2C,CAAC,OAAO,EAAEj9E,MAAM,CAAC;EAC5D,UAAA;EACF,QAAA;EACF;EACA,MAAA,KAAK,IAAI;EAAE;EACT;EACA,QAAA,IAAImN,MAAM,CAAC6tE,QAAQ,KAAK,EAAE,EAAE;YAC1B7tE,MAAM,CAAC6tE,QAAQ,GAAGnT,GAAG;EACvB,QAAA;EAEA,QAAA;;EAEF;EACA;EACA,MAAA,KAAK,IAAI;EACT,MAAA,KAAK,IAAI;EACP;UACA,IAAI,CAACkS,aAAa,CAACp2D,IAAI,IAAI,CAACo2D,aAAa,CAACn2D,GAAG,EAAE;EAC7C5jB,UAAAA,MAAM,CAACzC,GAAG,CAAC,iDAAiD,CAAC;UAC/D,CAAC,MAAM,IAAI4P,MAAM,CAAC8tE,QAAQ,KAAK,EAAE,EAAE;YACjC9tE,MAAM,CAAC8tE,QAAQ,GAAGpT,GAAG;YACrB16D,MAAM,CAAC+uE,iBAAiB,GAAG,KAAK;EAClC,QAAA;EACA,QAAA;EAEF,MAAA,KAAK,IAAI;EAAE;UACT,IAAI,CAACnB,WAAW,EAAE;EAChBkC,UAAAA,2CAA2C,CAAC,MAAM,EAAEj9E,MAAM,CAAC;EAC3D,UAAA;EACF,QAAA;EACF;EACA,MAAA,KAAK,IAAI;EACP,QAAkC;EAChC,UAAA,IAAI,CAAC+5E,aAAa,CAACl2D,GAAG,EAAE;EACtB7jB,YAAAA,MAAM,CAACzC,GAAG,CAAC,iDAAiD,CAAC;YAC/D,CAAC,MAAM,IAAI4P,MAAM,CAAC8tE,QAAQ,KAAK,EAAE,EAAE;cACjC9tE,MAAM,CAAC8tE,QAAQ,GAAGpT,GAAG;cACrB16D,MAAM,CAAC+uE,iBAAiB,GAAG,KAAK;EAClC,UAAA;EACF,QAAA;EAGA,QAAA;EAEF,MAAA,KAAK,IAAI;EACP;EACA;EACA;EACA;UACA,IAAI/uE,MAAM,CAAC8tE,QAAQ,KAAK,EAAE,IAAI+B,YAAY,GAAG,CAAC,EAAE;EAC9C,UAAA,IAAIE,QAAQ,GAAGpwE,MAAM,GAAG,CAAC;YACzB,IAAIkJ,SAAS,GAAGgnE,YAAY;YAE5B,OAAOhnE,SAAS,GAAG,CAAC,EAAE;EACpB,YAAA,IAAMmnE,YAAY,GAAG50E,IAAI,CAAC20E,QAAQ,CAAC;EAEnC,YAAA,QAAQC,YAAY;EAClB,cAAA,KAAK,IAAI;EAAE;EACT,gBAAkC;EAChC,kBAAA,IAAIpD,aAAa,CAACl2D,GAAG,KAAK,IAAI,EAAE;EAC9B7jB,oBAAAA,MAAM,CAACzC,GAAG,CACR,yDACF,CAAC;EACH,kBAAA,CAAC,MAAM;sBACL4P,MAAM,CAAC8tE,QAAQ,GAAGpT,GAAG;sBACrB16D,MAAM,CAAC+uE,iBAAiB,GAAG,KAAK;EAClC,kBAAA;EACF,gBAAA;EAGA,gBAAA;EACJ;cAEA,IAAMkB,aAAa,GAAG70E,IAAI,CAAC20E,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC;EAC5CA,YAAAA,QAAQ,IAAIE,aAAa;EACzBpnE,YAAAA,SAAS,IAAIonE,aAAa;EAC5B,UAAA;EACF,QAAA;EACA,QAAA;QAEF,KAAK,IAAI,CAAC;EACV;EACA,MAAA,KAAK,IAAI;EACPjB,QAAAA,gBAAgB,CACd7Y,QAAQ,EACR,IAAI59C,KAAK,CAAC,gCAAgC,CAAC,EAC3C9jB,SAAS,EACT5B,MACF,CAAC;EACD,QAAA,OAAOmN,MAAM;EAEf,MAAA,KAAK,IAAI;EAAE;EACT,QAAkC;EAChC,UAAA,IAAIA,MAAM,CAAC6tE,QAAQ,KAAK,EAAE,EAAE;cAC1B7tE,MAAM,CAAC6tE,QAAQ,GAAGnT,GAAG;cACrB16D,MAAM,CAAC8uE,iBAAiB,GAAG,MAAM;EACjCj8E,YAAAA,MAAM,CAACzC,GAAG,CAAC,oBAAoB,CAAC;EAClC,UAAA;EACF,QAAA;EASA,QAAA;EAKJ;EACA;EACA;MACAuP,MAAM,IAAIkwE,YAAY,GAAG,CAAC;EAC5B,EAAA;EACA,EAAA,OAAO7vE,MAAM;EACf;EAEA,SAASgvE,gBAAgBA,CACvB7Y,QAAyB,EACzB5oE,KAAY,EACZsoC,UAA+B,EAC/BhjC,MAAe,EACf;EACAA,EAAAA,MAAM,CAACG,IAAI,CAAA,iBAAA,GAAmBzF,KAAK,CAACsrC,OAAS,CAAC;IAC9Cs9B,QAAQ,CAACK,IAAI,CAACtnE,MAAM,CAACk7B,KAAK,EAAEl7B,MAAM,CAACk7B,KAAK,EAAE;MACxC32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;MAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;EACxCvK,IAAAA,KAAK,EAAE,KAAK;EACZkL,IAAAA,UAAU,EAAVA,UAAU;EACVtoC,IAAAA,KAAK,EAALA,KAAK;MACLk0B,MAAM,EAAEl0B,KAAK,CAACsrC;EAChB,GAAC,CAAC;EACJ;EAEA,SAASi3C,2CAA2CA,CAClDr8E,IAAY,EACZZ,MAAe,EACf;EACAA,EAAAA,MAAM,CAACzC,GAAG,CAAIqD,IAAI,6DAA0D,CAAC;EAC/E;EAEA,SAASgwE,QAAQA,CAACyM,MAA4B,EAAEr9E,MAAe,EAAc;IAC3E,IAAI4D,CAAC,GAAG,CAAC;EACT,EAAA,IAAIiD,IAAgB;EACpB,EAAA,IAAIy2E,MAAc;EAClB,EAAA,IAAIC,SAAiB;EACrB,EAAA,IAAIC,MAA0B;EAC9B,EAAA,IAAIC,MAA0B;EAC9B,EAAA,IAAMl1E,IAAI,GAAG80E,MAAM,CAAC90E,IAAI;EACxB;IACA,IAAI,CAAC80E,MAAM,IAAIA,MAAM,CAAChwE,IAAI,KAAK,CAAC,EAAE;EAChC,IAAA,OAAO,IAAI;EACb,EAAA;;EAEA;EACA;EACA;EACA,EAAA,OAAO9E,IAAI,CAAC,CAAC,CAAC,CAAC7F,MAAM,GAAG,EAAE,IAAI6F,IAAI,CAAC7F,MAAM,GAAG,CAAC,EAAE;EAC7C6F,IAAAA,IAAI,CAAC,CAAC,CAAC,GAAG4O,gBAAgB,CAAC5O,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5CA,IAAAA,IAAI,CAAC+4C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACnB,EAAA;EACA;EACAz6C,EAAAA,IAAI,GAAG0B,IAAI,CAAC,CAAC,CAAC;IACd,IAAMm1E,SAAS,GAAG,CAAC72E,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,KAAKA,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;IAC5D,IAAI62E,SAAS,KAAK,CAAC,EAAE;EACnBJ,IAAAA,MAAM,GAAG,CAACz2E,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC;EACjC;EACA;MACA,IAAIy2E,MAAM,IAAIA,MAAM,GAAGD,MAAM,CAAChwE,IAAI,GAAG,CAAC,EAAE;EACtC,MAAA,OAAO,IAAI;EACb,IAAA;EAEA,IAAA,IAAMswE,QAAQ,GAAG92E,IAAI,CAAC,CAAC,CAAC;MACxB,IAAI82E,QAAQ,GAAG,IAAI,EAAE;EACnB;EACN;EACA;QACMH,MAAM,GACJ,CAAC32E,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,SAAS;EAAG;EAC/B,MAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,OAAO;EAAG;EAC9B,MAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,KAAK;EAAG;EAC5B,MAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG;EAAG;EAC1B,MAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC;QAEvB,IAAI82E,QAAQ,GAAG,IAAI,EAAE;UACnBF,MAAM,GACJ,CAAC52E,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,SAAS;EAAG;EAChC,QAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,OAAO;EAAG;EAC9B,QAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,KAAK;EAAG;EAC5B,QAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,GAAG;EAAG;EAC1B,QAAA,CAACA,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC;EAEvB,QAAA,IAAI22E,MAAM,GAAGC,MAAM,GAAG,EAAE,GAAG,KAAK,EAAE;EAChCz9E,UAAAA,MAAM,CAACG,IAAI,CACN1E,IAAI,CAAC24B,KAAK,CACX,CAACopD,MAAM,GAAGC,MAAM,IAAI,KACtB,CAAC,4CACH,CAAC;EACDD,UAAAA,MAAM,GAAGC,MAAM;EACjB,QAAA;EACF,MAAA,CAAC,MAAM;EACLA,QAAAA,MAAM,GAAGD,MAAM;EACjB,MAAA;EACF,IAAA;EACAD,IAAAA,SAAS,GAAG12E,IAAI,CAAC,CAAC,CAAC;EACnB;EACA,IAAA,IAAI+2E,kBAAkB,GAAGL,SAAS,GAAG,CAAC;EACtC,IAAA,IAAIF,MAAM,CAAChwE,IAAI,IAAIuwE,kBAAkB,EAAE;EACrC,MAAA,OAAO,IAAI;EACb,IAAA;MACAP,MAAM,CAAChwE,IAAI,IAAIuwE,kBAAkB;EACjC;MACA,IAAM9C,OAAO,GAAG,IAAI32E,UAAU,CAACk5E,MAAM,CAAChwE,IAAI,CAAC;EAC3C,IAAA,KAAK,IAAIkI,CAAC,GAAG,CAAC,EAAEsoE,OAAO,GAAGt1E,IAAI,CAAC7F,MAAM,EAAE6S,CAAC,GAAGsoE,OAAO,EAAEtoE,CAAC,EAAE,EAAE;EACvD1O,MAAAA,IAAI,GAAG0B,IAAI,CAACgN,CAAC,CAAC;EACd,MAAA,IAAI/R,GAAG,GAAGqD,IAAI,CAACqD,UAAU;EACzB,MAAA,IAAI0zE,kBAAkB,EAAE;UACtB,IAAIA,kBAAkB,GAAGp6E,GAAG,EAAE;EAC5B;EACAo6E,UAAAA,kBAAkB,IAAIp6E,GAAG;EACzB,UAAA;EACF,QAAA,CAAC,MAAM;EACL;EACAqD,UAAAA,IAAI,GAAGA,IAAI,CAAC4G,QAAQ,CAACmwE,kBAAkB,CAAC;EACxCp6E,UAAAA,GAAG,IAAIo6E,kBAAkB;EACzBA,UAAAA,kBAAkB,GAAG,CAAC;EACxB,QAAA;EACF,MAAA;EACA9C,MAAAA,OAAO,CAACt0E,GAAG,CAACK,IAAI,EAAEjD,CAAC,CAAC;EACpBA,MAAAA,CAAC,IAAIJ,GAAG;EACV,IAAA;EACA,IAAA,IAAI85E,MAAM,EAAE;EACV;QACAA,MAAM,IAAIC,SAAS,GAAG,CAAC;EACzB,IAAA;MACA,OAAO;EAAEh1E,MAAAA,IAAI,EAAEuyE,OAAO;EAAEthE,MAAAA,GAAG,EAAEgkE,MAAM;EAAE1U,MAAAA,GAAG,EAAE2U,MAAM;EAAEj6E,MAAAA,GAAG,EAAE85E;OAAQ;EACjE,EAAA;EACA,EAAA,OAAO,IAAI;EACb;;EC1hCA;EACA;EACA;EAFA,IAIMQ,GAAG,gBAAA,YAAA;EAAA,EAAA,SAAAA,GAAAA,GAAA,CAAA;IAAAA,GAAA,CACAC,cAAc,GAArB,SAAOA,cAAcA,CACnBhuE,KAAc,EACd8zD,YAAqB,EACG;EACxB,IAAA,QAAQ9zD,KAAK;EACX,MAAA,KAAK,WAAW;UACd,IAAI8zD,YAAY,KAAK,CAAC,EAAE;EACtB,UAAA,OAAO,IAAI1/D,UAAU,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;EAC7D,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI1/D,UAAU,CAAC,CACpB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACrD,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;EAC7B,UAAA,OAAO,IAAI1/D,UAAU,CAAC,CACpB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,CACX,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;EAC7B,UAAA,OAAO,IAAI1/D,UAAU,CAAC,CACpB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACzC,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI1/D,UAAU,CAAC,CACpB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAC3D,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI1/D,UAAU,CAAC,CACpB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CACvB,CAAC;EACJ,QAAA;EAEA,QAAA;EACF;EACA,MAAA;UACE,IAAI0/D,YAAY,KAAK,CAAC,EAAE;EACtB;YACA,OAAO,IAAI1/D,UAAU,CAAC,CACpB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAClE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACnE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,CACX,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;EAC7B;YACA,OAAO,IAAI1/D,UAAU,CAAC,CACpB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAClE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACjE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,CACX,CAAC;EACJ,QAAA,CAAC,MAAM,IAAI0/D,YAAY,KAAK,CAAC,EAAE;EAC7B;YACA,OAAO,IAAI1/D,UAAU,CAAC,CACpB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAClE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACjE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAChE,IAAI,EAAE,IAAI,CACX,CAAC;EACJ,QAAA;EACA,QAAA;EACJ;EACA,IAAA,OAAOvC,SAAS;IAClB,CAAC;EAAA,EAAA,OAAAk8E,GAAA;EAAA,CAAA,EAAA;;EC7EH;EACA;EACA;;EAwBA,IAAMxxE,UAAU,GAAG7Q,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;EAAA,IAEhCogF,GAAG,gBAAA,YAAA;EAAA,EAAA,SAAAA,GAAAA,GAAA,CAAA;EAAAA,EAAAA,GAAA,CAaA1zB,IAAI,GAAX,SAAOA,IAAIA,GAAG;MACZ0zB,GAAG,CAACC,KAAK,GAAG;EACV7+D,MAAAA,IAAI,EAAE,EAAE;EAAE;EACV8+D,MAAAA,IAAI,EAAE,EAAE;EACRh+D,MAAAA,IAAI,EAAE,EAAE;EACRi+D,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRxvE,MAAAA,IAAI,EAAE,EAAE;EACRyvE,MAAAA,IAAI,EAAE,EAAE;EACR1vE,MAAAA,IAAI,EAAE,EAAE;EACR2vE,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACR9mE,MAAAA,IAAI,EAAE,EAAE;EACR+mE,MAAAA,IAAI,EAAE,EAAE;EACRpgE,MAAAA,IAAI,EAAE,EAAE;EACR,MAAA,MAAM,EAAE,EAAE;EACVqgE,MAAAA,IAAI,EAAE,EAAE;EACR,MAAA,MAAM,EAAE,EAAE;EACVC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRhwE,MAAAA,IAAI,EAAE,EAAE;EACRiwE,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE,EAAE;EACRzqE,MAAAA,IAAI,EAAE,EAAE;EACRJ,MAAAA,IAAI,EAAE,EAAE;EACRD,MAAAA,IAAI,EAAE,EAAE;EACR7F,MAAAA,IAAI,EAAE,EAAE;EACR4G,MAAAA,IAAI,EAAE,EAAE;EACRhG,MAAAA,IAAI,EAAE,EAAE;EACRX,MAAAA,IAAI,EAAE,EAAE;EACR2wE,MAAAA,IAAI,EAAE,EAAE;EACRC,MAAAA,IAAI,EAAE;OACP;EAED,IAAA,IAAI77E,CAAS;EACb,IAAA,KAAKA,CAAC,IAAIo6E,GAAG,CAACC,KAAK,EAAE;QACnB,IAAID,GAAG,CAACC,KAAK,CAACliC,cAAc,CAACn4C,CAAC,CAAC,EAAE;EAC/Bo6E,QAAAA,GAAG,CAACC,KAAK,CAACr6E,CAAC,CAAC,GAAG,CACbA,CAAC,CAACy8C,UAAU,CAAC,CAAC,CAAC,EACfz8C,CAAC,CAACy8C,UAAU,CAAC,CAAC,CAAC,EACfz8C,CAAC,CAACy8C,UAAU,CAAC,CAAC,CAAC,EACfz8C,CAAC,CAACy8C,UAAU,CAAC,CAAC,CAAC,CAChB;EACH,MAAA;EACF,IAAA;EAEA,IAAA,IAAMq/B,SAAS,GAAG,IAAIv7E,UAAU,CAAC,CAC/B,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;EAEF,IAAA,IAAMw7E,SAAS,GAAG,IAAIx7E,UAAU,CAAC,CAC/B,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;MAEF65E,GAAG,CAAC4B,UAAU,GAAG;EACfj0E,MAAAA,KAAK,EAAE+zE,SAAS;EAChBh0E,MAAAA,KAAK,EAAEi0E;OACR;EAED,IAAA,IAAMrB,IAAI,GAAG,IAAIn6E,UAAU,CAAC,CAC1B,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;EAEF,IAAA,IAAMi7E,IAAI,GAAG,IAAIj7E,UAAU,CAAC,CAC1B,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;MAEF65E,GAAG,CAAC6B,IAAI,GAAG7B,GAAG,CAAC8B,IAAI,GAAG9B,GAAG,CAAC+B,IAAI,GAAGX,IAAI;EAErCpB,IAAAA,GAAG,CAACgC,IAAI,GAAG,IAAI77E,UAAU,CAAC,CACxB,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;EACF65E,IAAAA,GAAG,CAACiC,IAAI,GAAG,IAAI97E,UAAU,CAAC,CACxB,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;EACF65E,IAAAA,GAAG,CAACkC,IAAI,GAAG,IAAI/7E,UAAU,CAAC,CACxB,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI;EAAE,KACP,CAAC;EAEF65E,IAAAA,GAAG,CAACmC,IAAI,GAAG,IAAIh8E,UAAU,CAAC,CACxB,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACL,CAAC,CAAC;;EAEH,IAAA,IAAMi8E,UAAU,GAAG,IAAIj8E,UAAU,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACxD,IAAA,IAAMk8E,SAAS,GAAG,IAAIl8E,UAAU,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;EACpD,IAAA,IAAMm8E,YAAY,GAAG,IAAIn8E,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;MAEjD65E,GAAG,CAACuC,IAAI,GAAGvC,GAAG,CAACwC,GAAG,CAChBxC,GAAG,CAACC,KAAK,CAACO,IAAI,EACd4B,UAAU,EACVE,YAAY,EACZF,UAAU,EACVC,SACF,CAAC;MACDrC,GAAG,CAACyC,IAAI,GAAGzC,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACI,IAAI,EAAEL,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACK,IAAI,EAAEA,IAAI,CAAC,CAAC;IACnE,CAAA;EAAAN,EAAAA,GAAA,CAEOwC,GAAG,GAAV,SAAOA,GAAGA,CAAC5/E,IAAc,EAA4B;MACnD,IAAIyM,IAAI,GAAG,CAAC;MAAA,KAAA,IAAAsO,IAAA,GAAAC,SAAA,CAAAlZ,MAAA,EADgB+Y,OAAO,OAAAI,KAAA,CAAAF,IAAA,GAAA,CAAA,GAAAA,IAAA,WAAAG,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA,EAAA,EAAA;EAAPL,MAAAA,OAAO,CAAAK,IAAA,GAAA,CAAA,CAAA,GAAAF,SAAA,CAAAE,IAAA,CAAA;EAAA,IAAA;EAEnC,IAAA,IAAIlY,CAAC,GAAG6X,OAAO,CAAC/Y,MAAM;MACtB,IAAMc,GAAG,GAAGI,CAAC;EACb;MACA,OAAOA,CAAC,EAAE,EAAE;EACVyJ,MAAAA,IAAI,IAAIoO,OAAO,CAAC7X,CAAC,CAAC,CAACsG,UAAU;EAC/B,IAAA;EAEA,IAAA,IAAMiD,MAAM,GAAG,IAAIhJ,UAAU,CAACkJ,IAAI,CAAC;MACnCF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,EAAE,GAAI,IAAI;MAC/BF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,EAAE,GAAI,IAAI;MAC/BF,MAAM,CAAC,CAAC,CAAC,GAAIE,IAAI,IAAI,CAAC,GAAI,IAAI;EAC9BF,IAAAA,MAAM,CAAC,CAAC,CAAC,GAAGE,IAAI,GAAG,IAAI;EACvBF,IAAAA,MAAM,CAAC3G,GAAG,CAAC5F,IAAI,EAAE,CAAC,CAAC;EACnB;EACA,IAAA,KAAKgD,CAAC,GAAG,CAAC,EAAEyJ,IAAI,GAAG,CAAC,EAAEzJ,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EAClC;QACAuJ,MAAM,CAAC3G,GAAG,CAACiV,OAAO,CAAC7X,CAAC,CAAC,EAAEyJ,IAAI,CAAC;EAC5BA,MAAAA,IAAI,IAAIoO,OAAO,CAAC7X,CAAC,CAAC,CAACsG,UAAU;EAC/B,IAAA;EACA,IAAA,OAAOiD,MAAM;IACf,CAAA;EAAA6wE,EAAAA,GAAA,CAEOhvE,IAAI,GAAX,SAAOA,IAAIA,CAACpO,IAAqB,EAAE;EACjC,IAAA,OAAOo9E,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACjvE,IAAI,EAAEgvE,GAAG,CAAC4B,UAAU,CAACh/E,IAAI,CAAC,CAAC;IACtD,CAAA;EAAAo9E,EAAAA,GAAA,CAEOS,IAAI,GAAX,SAAOA,IAAIA,CAACl2E,IAAgB,EAAE;MAC5B,OAAOy1E,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACQ,IAAI,EAAEl2E,IAAI,CAAC;IACtC,CAAA;IAAAy1E,GAAA,CAEOjvE,IAAI,GAAX,SAAOA,IAAIA,CAACf,SAAiB,EAAEvG,QAAgB,EAAE;EAC/CA,IAAAA,QAAQ,IAAIuG,SAAS;EACrB,IAAA,IAAM0yE,iBAAiB,GAAGjlF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,IAAMq0E,iBAAiB,GAAGllF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,OAAO0xE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAClvE,IAAI,EACd,IAAI5K,UAAU,CAAC,CACb,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACL6J,IAAAA,SAAS,IAAI,EAAE,GAAI,IAAI,EACvBA,SAAS,IAAI,EAAE,GAAI,IAAI,EACvBA,SAAS,IAAI,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAG,IAAI;EAAE;EAClB0yE,IAAAA,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxBC,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxB,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,CACL,CACH,CAAC;IACH,CAAA;EAAA3C,EAAAA,GAAA,CAEOU,IAAI,GAAX,SAAOA,IAAIA,CAACjvE,KAAqB,EAAE;EACjC,IAAA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACS,IAAI,EACdV,GAAG,CAACjvE,IAAI,CAACU,KAAK,CAACzB,SAAS,IAAI,CAAC,EAAEyB,KAAK,CAAChI,QAAQ,IAAI,CAAC,CAAC,EACnDu2E,GAAG,CAAChvE,IAAI,CAACS,KAAK,CAAC7O,IAAI,CAAC,EACpBo9E,GAAG,CAACY,IAAI,CAACnvE,KAAK,CAChB,CAAC;IACH,CAAA;EAAAuuE,EAAAA,GAAA,CAEOW,IAAI,GAAX,SAAOA,IAAIA,CAAC7W,cAAsB,EAAE;MAClC,OAAOkW,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACU,IAAI,EACd,IAAIx6E,UAAU,CAAC,CACb,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN2jE,IAAAA,cAAc,IAAI,EAAE,EACnBA,cAAc,IAAI,EAAE,GAAI,IAAI,EAC5BA,cAAc,IAAI,CAAC,GAAI,IAAI,EAC5BA,cAAc,GAAG,IAAI;EAAE,KACxB,CACH,CAAC;IACH,CAAA;EAAAkW,EAAAA,GAAA,CAEOY,IAAI,GAAX,SAAOA,IAAIA,CAACnvE,KAAqB,EAAE;EACjC,IAAA,IAAIA,KAAK,CAAC7O,IAAI,KAAK,OAAO,EAAE;EAC1B,MAAA,OAAOo9E,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACW,IAAI,EACdZ,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACwB,IAAI,EAAEzB,GAAG,CAACkC,IAAI,CAAC,EACjClC,GAAG,CAACyC,IAAI,EACRzC,GAAG,CAACmB,IAAI,CAAC1vE,KAAK,CAChB,CAAC;EACH,IAAA,CAAC,MAAM;EACL,MAAA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACW,IAAI,EACdZ,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACuB,IAAI,EAAExB,GAAG,CAACiC,IAAI,CAAC,EACjCjC,GAAG,CAACyC,IAAI,EACRzC,GAAG,CAACmB,IAAI,CAAC1vE,KAAK,CAChB,CAAC;EACH,IAAA;IACF,CAAA;IAAAuuE,GAAA,CAEOlmE,IAAI,GAAX,SAAOA,IAAIA,CACThR,EAAU,EACV85E,mBAA2B,EAC3BnxE,KAAuB,EACvB;MACA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACnmE,IAAI,EACdkmE,GAAG,CAACW,IAAI,CAAC73E,EAAE,CAAC,EACZk3E,GAAG,CAACvpE,IAAI,CAAChF,KAAK,EAAEmxE,mBAAmB,CACrC,CAAC;IACH,CAAA;EAAA5C,EAAAA,GAAA,CAEOa,IAAI,GAAX,SAAOA,IAAIA,CAACtqE,MAAwB,EAAE;EACpC,IAAA,IAAI3Q,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM;MACrB,IAAMm+E,KAAmB,GAAG,EAAE;MAE9B,OAAOj9E,CAAC,EAAE,EAAE;EACVi9E,MAAAA,KAAK,CAACj9E,CAAC,CAAC,GAAGo6E,GAAG,CAACpvE,IAAI,CAAC2F,MAAM,CAAC3Q,CAAC,CAAC,CAAC;EAChC,IAAA;MAEA,OAAOo6E,GAAG,CAACwC,GAAG,CAAC5zE,KAAK,CAClB,IAAI,EACJ,CACEoxE,GAAG,CAACC,KAAK,CAACY,IAAI,EACdb,GAAG,CAACgB,IAAI,CAACzqE,MAAM,CAAC,CAAC,CAAC,CAACvG,SAAS,IAAI,CAAC,EAAEuG,MAAM,CAAC,CAAC,CAAC,CAAC9M,QAAQ,IAAI,CAAC,CAAC,CAC7D,CACG82B,MAAM,CAACsiD,KAAK,CAAA,CACZtiD,MAAM,CAACy/C,GAAG,CAACe,IAAI,CAACxqE,MAAM,CAAC,CAC5B,CAAC;IACH,CAAA;EAAAypE,EAAAA,GAAA,CAEOe,IAAI,GAAX,SAAOA,IAAIA,CAACxqE,MAAwB,EAAE;EACpC,IAAA,IAAI3Q,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM;MACrB,IAAMm+E,KAAmB,GAAG,EAAE;MAE9B,OAAOj9E,CAAC,EAAE,EAAE;EACVi9E,MAAAA,KAAK,CAACj9E,CAAC,CAAC,GAAGo6E,GAAG,CAACxuE,IAAI,CAAC+E,MAAM,CAAC3Q,CAAC,CAAC,CAAC;EAChC,IAAA;EAEA,IAAA,OAAOo6E,GAAG,CAACwC,GAAG,CAAC5zE,KAAK,CAAC,IAAI,EAAA,CAAGoxE,GAAG,CAACC,KAAK,CAACc,IAAI,CAAA,CAAAxgD,MAAA,CAAKsiD,KAAK,CAAC,CAAC;IACxD,CAAA;IAAA7C,GAAA,CAEOgB,IAAI,GAAX,SAAOA,IAAIA,CAAChxE,SAAiB,EAAEvG,QAAgB,EAAE;EAC/CA,IAAAA,QAAQ,IAAIuG,SAAS;EACrB,IAAA,IAAM0yE,iBAAiB,GAAGjlF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,IAAMq0E,iBAAiB,GAAGllF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,IAAM4G,KAAK,GAAG,IAAI/O,UAAU,CAAC,CAC3B,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACL6J,IAAAA,SAAS,IAAI,EAAE,GAAI,IAAI,EACvBA,SAAS,IAAI,EAAE,GAAI,IAAI,EACvBA,SAAS,IAAI,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAG,IAAI;EAAE;MAClB0yE,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxBC,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACe,IAAI,EAAE9rE,KAAK,CAAC;IACvC,CAAA;EAAA8qE,EAAAA,GAAA,CAEOkB,IAAI,GAAX,SAAOA,IAAIA,CAACzvE,KAAuB,EAAE;EACnC,IAAA,IAAMkI,OAAO,GAAGlI,KAAK,CAACkI,OAAO,IAAI,EAAE;MACnC,IAAMzE,KAAK,GAAG,IAAI/O,UAAU,CAAC,CAAC,GAAGwT,OAAO,CAACjV,MAAM,CAAC;EAChD,IAAA,IAAIkB,CAAS;EACb,IAAA,IAAI+L,KAAqB;EACzB;EACA;EACA,IAAA,KAAK/L,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+T,OAAO,CAACjV,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACnC+L,MAAAA,KAAK,GAAGgI,OAAO,CAAC/T,CAAC,CAAC,CAAC+L,KAAK;QACxBuD,KAAK,CAACtP,CAAC,GAAG,CAAC,CAAC,GACT+L,KAAK,CAACmxE,SAAS,IAAI,CAAC,GACpBnxE,KAAK,CAACoxE,YAAY,IAAI,CAAE,GACzBpxE,KAAK,CAACqxE,aAAa;EACvB,IAAA;MAEA,OAAOhD,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACiB,IAAI,EAAEhsE,KAAK,CAAC;IACvC,CAAA;EAAA8qE,EAAAA,GAAA,CAEOmB,IAAI,GAAX,SAAOA,IAAIA,CAAC1vE,KAAqB,EAAE;EACjC,IAAA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACkB,IAAI,EACdnB,GAAG,CAAC3uE,IAAI,CAACI,KAAK,CAAC,EACfuuE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACsB,IAAI,EAAEvB,GAAG,CAAC6B,IAAI,CAAC,EACjC7B,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACoB,IAAI,EAAErB,GAAG,CAAC8B,IAAI,CAAC,EACjC9B,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACqB,IAAI,EAAEtB,GAAG,CAACgC,IAAI,CAAC,EACjChC,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACmB,IAAI,EAAEpB,GAAG,CAAC+B,IAAI,CAClC,CAAC;IACH,CAAA;EAAA/B,EAAAA,GAAA,CAEO5+D,IAAI,GAAX,SAAOA,IAAIA,CAAC3P,KAAkB,EAAE;MAC9B,IAAI8hE,GAAa,GAAG,EAAE;MACtB,IAAIK,GAAa,GAAG,EAAE;EACtB,IAAA,IAAIhuE,CAAC;EACL,IAAA,IAAI2E,IAAI;EACR,IAAA,IAAI/E,GAAG;EACP;;EAEA,IAAA,KAAKI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6L,KAAK,CAAC8hE,GAAG,CAAC7uE,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrC2E,MAAAA,IAAI,GAAGkH,KAAK,CAAC8hE,GAAG,CAAC3tE,CAAC,CAAC;QACnBJ,GAAG,GAAG+E,IAAI,CAAC2B,UAAU;QACrBqnE,GAAG,CAAChlE,IAAI,CAAE/I,GAAG,KAAK,CAAC,GAAI,IAAI,CAAC;EAC5B+tE,MAAAA,GAAG,CAAChlE,IAAI,CAAC/I,GAAG,GAAG,IAAI,CAAC;;EAEpB;EACA+tE,MAAAA,GAAG,GAAGA,GAAG,CAAChzC,MAAM,CAAC1iB,KAAK,CAACpe,SAAS,CAACxC,KAAK,CAACiM,IAAI,CAACqB,IAAI,CAAC,CAAC;EACpD,IAAA;;EAEA;EACA,IAAA,KAAK3E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6L,KAAK,CAACmiE,GAAG,CAAClvE,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrC2E,MAAAA,IAAI,GAAGkH,KAAK,CAACmiE,GAAG,CAAChuE,CAAC,CAAC;QACnBJ,GAAG,GAAG+E,IAAI,CAAC2B,UAAU;QACrB0nE,GAAG,CAACrlE,IAAI,CAAE/I,GAAG,KAAK,CAAC,GAAI,IAAI,CAAC;EAC5BouE,MAAAA,GAAG,CAACrlE,IAAI,CAAC/I,GAAG,GAAG,IAAI,CAAC;EAEpBouE,MAAAA,GAAG,GAAGA,GAAG,CAACrzC,MAAM,CAAC1iB,KAAK,CAACpe,SAAS,CAACxC,KAAK,CAACiM,IAAI,CAACqB,IAAI,CAAC,CAAC;EACpD,IAAA;EAEA,IAAA,IAAM04E,IAAI,GAAGjD,GAAG,CAACwC,GAAG,CAClBxC,GAAG,CAACC,KAAK,CAACC,IAAI,EACd,IAAI/5E,UAAU,CACZ,CACE,IAAI;EAAE;MACNotE,GAAG,CAAC,CAAC,CAAC;EAAE;MACRA,GAAG,CAAC,CAAC,CAAC;EAAE;MACRA,GAAG,CAAC,CAAC,CAAC;EAAE;EACR,IAAA,IAAI,GAAG,CAAC;EAAE;EACV,IAAA,IAAI,GAAG9hE,KAAK,CAAC8hE,GAAG,CAAC7uE,MAAM;EAAE,KAC3B,CACG67B,MAAM,CAACgzC,GAAG,CAAA,CACVhzC,MAAM,CAAC,CACN9uB,KAAK,CAACmiE,GAAG,CAAClvE,MAAM;OACjB,CAAA,CACA67B,MAAM,CAACqzC,GAAG,CACf,CACF,CAAC,CAAC;EACF,IAAA,IAAMjsD,KAAK,GAAGlW,KAAK,CAACkW,KAAK;EACzB,IAAA,IAAMC,MAAM,GAAGnW,KAAK,CAACmW,MAAM;EAC3B,IAAA,IAAMs7D,QAAQ,GAAGzxE,KAAK,CAACgiE,UAAU,CAAC,CAAC,CAAC;EACpC,IAAA,IAAM0P,QAAQ,GAAG1xE,KAAK,CAACgiE,UAAU,CAAC,CAAC,CAAC;EAEpC,IAAA,OAAOuM,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAC7+D,IAAI,EACd,IAAIjb,UAAU,CAAC,CACb,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACLwhB,IAAAA,KAAK,IAAI,CAAC,GAAI,IAAI,EACnBA,KAAK,GAAG,IAAI;EAAE;EACbC,IAAAA,MAAM,IAAI,CAAC,GAAI,IAAI,EACpBA,MAAM,GAAG,IAAI;EAAE;EACfq7D,IAAI,EACJjD,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACG,IAAI,EACd,IAAIj6E,UAAU,CAAC,CACb,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACL,CACH,CAAC;EAAE;EACH65E,IAAAA,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACgB,IAAI,EACd,IAAI96E,UAAU,CAAC,CACb+8E,QAAQ,IAAI,EAAE;EAAE;EACfA,IAAAA,QAAQ,IAAI,EAAE,GAAI,IAAI,EACtBA,QAAQ,IAAI,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAG,IAAI,EACfC,QAAQ,IAAI,EAAE;EAAE;EACfA,IAAAA,QAAQ,IAAI,EAAE,GAAI,IAAI,EACtBA,QAAQ,IAAI,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAG,IAAI,CAChB,CACH,CACF,CAAC;IACH,CAAA;EAAAnD,EAAAA,GAAA,CAEOO,IAAI,GAAX,SAAOA,IAAIA,CAAC9uE,KAAwB,EAAE;EACpC,IAAA,IAAMgZ,MAAM,GAAGhZ,KAAK,CAACgZ,MAA0B;MAC/C,OAAO,IAAItkB,UAAU,CAAA,CACnB,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;;MAEN,IAAI;EAAE;MACN,IAAI;EAAE;;EAEN,IAAA,IAAI,EACJ,IAAI;EAAE;;MAEN,IAAI;EAAE;;MAEN,IAAI;EAAE;MACN,IAAI;EAAE;MACN,IAAI;EAAE;MACN,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;;MAEN,IAAI;EAAE;MACN,IAAI,CAAA,CAAAo6B,MAAA,CACD9V,MAAM,EAAA,CACT,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KAAA,CACP,CAAC;IACJ,CAAA;EAAAu1D,EAAAA,GAAA,CAEOoD,SAAS,GAAhB,SAAOA,SAASA,CAAC3xE,KAAwB,EAAE;EACzC,IAAA,IAAMq0D,UAAU,GAAGr0D,KAAK,CAACq0D,UAAU,IAAI,CAAC;MACxC,OAAO,IAAI3/D,UAAU,CAAC,CACpB,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJsL,KAAK,CAACo0D,YAAY,IAAI,CAAC;EAAE;EACzB,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACLC,IAAAA,UAAU,IAAI,CAAC,GAAI,IAAI,EACxBA,UAAU,GAAG,IAAI;EAAE;MACnB,IAAI,EACJ,IAAI,CACL,CAAC;IACJ,CAAA;EAAAka,EAAAA,GAAA,CAEOv/D,IAAI,GAAX,SAAOA,IAAIA,CAAChP,KAAwB,EAAE;EACpC,IAAA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACx/D,IAAI,EACdu/D,GAAG,CAACoD,SAAS,CAAC3xE,KAAK,CAAC,EACpBuuE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACM,IAAI,EAAEP,GAAG,CAACO,IAAI,CAAC9uE,KAAK,CAAC,CACzC,CAAC;IACH,CAAA;EAAAuuE,EAAAA,GAAA,CAEOp6D,GAAG,GAAV,SAAOA,GAAGA,CAACnU,KAAwB,EAAE;EACnC,IAAA,OAAOuuE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAAC,MAAM,CAAC,EAAED,GAAG,CAACoD,SAAS,CAAC3xE,KAAK,CAAC,CAAC;IACzD,CAAA;EAAAuuE,EAAAA,GAAA,CAEOn6D,GAAG,GAAV,SAAOA,GAAGA,CAACpU,KAAwB,EAAE;EACnC,IAAA,OAAOuuE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAC,MAAM,CAAC,EACjBD,GAAG,CAACoD,SAAS,CAAC3xE,KAAK,CAAC,EACpBuuE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACa,IAAI,EAAErvE,KAAK,CAACgZ,MAAoB,CACpD,CAAC;IACH,CAAA;EAAAu1D,EAAAA,GAAA,CAEO3uE,IAAI,GAAX,SAAOA,IAAIA,CAACI,KAAkC,EAAc;EAC1D,IAAA,IAAQm7D,YAAY,GAAKn7D,KAAK,CAAtBm7D,YAAY;EACpB,IAAA,IAAIn7D,KAAK,CAAC7O,IAAI,KAAK,OAAO,EAAE;QAC1B,IAAIgqE,YAAY,KAAK,KAAK,EAAE;UAC1B,OAAOoT,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAAC5uE,IAAI,EAAE2uE,GAAG,CAACmC,IAAI,EAAEnC,GAAG,CAACv/D,IAAI,CAAChP,KAAK,CAAC,CAAC;EAC3D,MAAA;QACA,IAEEm7D,YAAY,KAAK,KAAK,IACtBn7D,KAAK,CAACgZ,MAAK,EACX;UACA,OAAOu1D,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAAC5uE,IAAI,EAAE2uE,GAAG,CAACmC,IAAI,EAAEnC,GAAG,CAACn6D,GAAG,CAACpU,KAAK,CAAC,CAAC;EAC1D,MAAA;QACA,IAAIm7D,YAAY,KAAK,KAAK,IAAIn7D,KAAK,CAACM,KAAK,KAAK,KAAK,EAAE;UACnD,OAAOiuE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAAC5uE,IAAI,EAAE2uE,GAAG,CAACmC,IAAI,EAAEnC,GAAG,CAACp6D,GAAG,CAACnU,KAAK,CAAC,CAAC;EAC1D,MAAA;EACF,IAAA,CAAC,MAAM;EACL,MAAA,IAAIA,KAAK,CAACmiE,GAAG,IAAIniE,KAAK,CAAC8hE,GAAG,EAAE;UAC1B,IAAI3G,YAAY,KAAK,KAAK,EAAE;YAC1B,OAAOoT,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAC5uE,IAAI,EACd2uE,GAAG,CAACmC,IAAI,EACRnC,GAAG,CAAC5+D,IAAI,CAAC3P,KAAoB,CAC/B,CAAC;EACH,QAAA;UACA,IAEEm7D,YAAY,KAAK,MAAM,IACvBn7D,KAAK,CAAC0jE,GAAE,EACR;YACA,OAAO6K,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAC5uE,IAAI,EACd2uE,GAAG,CAACmC,IAAI,EACRnC,GAAG,CAAC99D,IAAI,CAACzQ,KAAoB,CAC/B,CAAC;EACH,QAAA;EACF,MAAA,CAAC,MAAM;UACL,MAAM,IAAIiW,KAAK,CAAA,gCAAiC,CAAC;EACnD,MAAA;EACF,IAAA;EAEA,IAAA,MAAM,IAAIA,KAAK,CAAA,cAAA,GACEjW,KAAK,CAAC7O,IAAI,GAAA,kBAAA,GAAmBgqE,YAAY,GAAA,GAAA,GAAIn7D,KAAK,CAACM,KAAK,MACzE,CAAC;IACH,CAAA;EAAAiuE,EAAAA,GAAA,CAEOnvE,IAAI,GAAX,SAAOA,IAAIA,CAACY,KAAqB,EAAE;EACjC,IAAA,IAAM5O,EAAE,GAAG4O,KAAK,CAAC5O,EAAE;EACnB,IAAA,IAAM4G,QAAQ,GAAG,CAACgI,KAAK,CAAChI,QAAQ,IAAI,CAAC,KAAKgI,KAAK,CAACzB,SAAS,IAAI,CAAC,CAAC;EAC/D,IAAA,IAAM2X,KAAK,GAAIlW,KAAK,CAASkW,KAAK,IAAI,CAAC;EACvC,IAAA,IAAMC,MAAM,GAAInW,KAAK,CAASmW,MAAM,IAAI,CAAC;EACzC,IAAA,IAAM86D,iBAAiB,GAAGjlF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,IAAMq0E,iBAAiB,GAAGllF,IAAI,CAACE,KAAK,CAAC8L,QAAQ,IAAI6E,UAAU,GAAG,CAAC,CAAC,CAAC;EACjE,IAAA,OAAO0xE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACpvE,IAAI,EACd,IAAI1K,UAAU,CAAC,CACb,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACLtD,IAAAA,EAAE,IAAI,EAAE,GAAI,IAAI,EAChBA,EAAE,IAAI,EAAE,GAAI,IAAI,EAChBA,EAAE,IAAI,CAAC,GAAI,IAAI,EAChBA,EAAE,GAAG,IAAI;EAAE;EACX,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN6/E,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxBC,iBAAiB,IAAI,EAAE,EACtBA,iBAAiB,IAAI,EAAE,GAAI,IAAI,EAC/BA,iBAAiB,IAAI,CAAC,GAAI,IAAI,EAC/BA,iBAAiB,GAAG,IAAI,EACxh7D,KAAK,IAAI,CAAC,GAAI,IAAI,EACnBA,KAAK,GAAG,IAAI,EACZ,IAAI,EACJ,IAAI;EAAE;EACLC,IAAAA,MAAM,IAAI,CAAC,GAAI,IAAI,EACpBA,MAAM,GAAG,IAAI,EACb,IAAI,EACJ,IAAI;EAAE,KACP,CACH,CAAC;IACH,CAAA;IAAAo4D,GAAA,CAEOvpE,IAAI,GAAX,SAAOA,IAAIA,CAAChF,KAAuB,EAAEmxE,mBAA2B,EAAE;EAChE,IAAA,IAAMS,qBAAqB,GAAGrD,GAAG,CAACkB,IAAI,CAACzvE,KAAK,CAAC;EAC7C,IAAA,IAAM5O,EAAE,GAAG4O,KAAK,CAAC5O,EAAE;EACnB,IAAA,IAAMygF,4BAA4B,GAAG7lF,IAAI,CAACE,KAAK,CAC7CilF,mBAAmB,IAAIt0E,UAAU,GAAG,CAAC,CACvC,CAAC;EACD,IAAA,IAAMi1E,4BAA4B,GAAG9lF,IAAI,CAACE,KAAK,CAC7CilF,mBAAmB,IAAIt0E,UAAU,GAAG,CAAC,CACvC,CAAC;MACD,OAAO0xE,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACxpE,IAAI,EACdupE,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACvpE,IAAI,EACd,IAAIvQ,UAAU,CAAC,CACb,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACNtD,IAAAA,EAAE,IAAI,EAAE,EACPA,EAAE,IAAI,EAAE,GAAI,IAAI,EAChBA,EAAE,IAAI,CAAC,GAAI,IAAI,EAChBA,EAAE,GAAG,IAAI;EAAE,KACZ,CACH,CAAC,EACDm9E,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACnpE,IAAI,EACd,IAAI3Q,UAAU,CAAC,CACb,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACNm9E,4BAA4B,IAAI,EAAE,EACjCA,4BAA4B,IAAI,EAAE,GAAI,IAAI,EAC1CA,4BAA4B,IAAI,CAAC,GAAI,IAAI,EAC1CA,4BAA4B,GAAG,IAAI,EACnCC,4BAA4B,IAAI,EAAE,EACjCA,4BAA4B,IAAI,EAAE,GAAI,IAAI,EAC1CA,4BAA4B,IAAI,CAAC,GAAI,IAAI,EAC1CA,4BAA4B,GAAG,IAAI,CACpC,CACH,CAAC,EACDvD,GAAG,CAACxoE,IAAI,CACN/F,KAAK,EACL4xE,qBAAqB,CAAC3+E,MAAM,GAC1B,EAAE;EAAG;MACL,EAAE;EAAG;MACL,CAAC;EAAG;MACJ,EAAE;EAAG;MACL,CAAC;EAAG;EACJ,IAAA,CACJ,CAAC;EAAE;EACH2+E,IAAAA,qBACF,CAAC;EACH,EAAA;;EAEA;EACF;EACA;EACA;EAHErD,EAAAA,GAAA,CAIOpvE,IAAI,GAAX,SAAOA,IAAIA,CAACa,KAAqB,EAAE;EACjCA,IAAAA,KAAK,CAAChI,QAAQ,GAAGgI,KAAK,CAAChI,QAAQ,IAAI,UAAU;MAC7C,OAAOu2E,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACrvE,IAAI,EAAEovE,GAAG,CAACnvE,IAAI,CAACY,KAAK,CAAC,EAAEuuE,GAAG,CAACU,IAAI,CAACjvE,KAAK,CAAC,CAAC;IAClE,CAAA;EAAAuuE,EAAAA,GAAA,CAEOxuE,IAAI,GAAX,SAAOA,IAAIA,CAACC,KAAqB,EAAE;EACjC,IAAA,IAAM5O,EAAE,GAAG4O,KAAK,CAAC5O,EAAE;EACnB,IAAA,OAAOm9E,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAACzuE,IAAI,EACd,IAAIrL,UAAU,CAAC,CACb,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACNtD,IAAAA,EAAE,IAAI,EAAE,EACPA,EAAE,IAAI,EAAE,GAAI,IAAI,EAChBA,EAAE,IAAI,CAAC,GAAI,IAAI,EAChBA,EAAE,GAAG,IAAI;EAAE;EACX,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE,KACP,CACH,CAAC;IACH,CAAA;IAAAm9E,GAAA,CAEOxoE,IAAI,GAAX,SAAOA,IAAIA,CAAC/F,KAAqB,EAAE3C,MAAc,EAAE;EACjD,IAAA,IAAM6K,OAAO,GAAGlI,KAAK,CAACkI,OAAO,IAAI,EAAE;EACnC,IAAA,IAAMnU,GAAG,GAAGmU,OAAO,CAACjV,MAAM;EAC1B,IAAA,IAAM8+E,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAGh+E,GAAG;EAC9B,IAAA,IAAMR,KAAK,GAAG,IAAImB,UAAU,CAACq9E,QAAQ,CAAC;EACtC,IAAA,IAAI59E,CAAC;EACL,IAAA,IAAIlG,MAAM;EACV,IAAA,IAAI+J,QAAQ;EACZ,IAAA,IAAI4F,IAAI;EACR,IAAA,IAAIsC,KAAK;EACT,IAAA,IAAI8xE,GAAG;MACP30E,MAAM,IAAI,CAAC,GAAG00E,QAAQ;EACtBx+E,IAAAA,KAAK,CAACwD,GAAG,CACP,CACEiJ,KAAK,CAAC7O,IAAI,KAAK,OAAO,GAAG,IAAI,GAAG,IAAI;EAAE;MACtC,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACL4C,IAAAA,GAAG,KAAK,EAAE,GAAI,IAAI,EAClBA,GAAG,KAAK,EAAE,GAAI,IAAI,EAClBA,GAAG,KAAK,CAAC,GAAI,IAAI,EAClBA,GAAG,GAAG,IAAI;EAAE;MACXsJ,MAAM,KAAK,EAAE,GAAI,IAAI,EACrBA,MAAM,KAAK,EAAE,GAAI,IAAI,EACrBA,MAAM,KAAK,CAAC,GAAI,IAAI,EACrBA,MAAM,GAAG,IAAI;OACd,EACD,CACF,CAAC;MACD,KAAKlJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EACxBlG,MAAAA,MAAM,GAAGia,OAAO,CAAC/T,CAAC,CAAC;QACnB6D,QAAQ,GAAG/J,MAAM,CAAC+J,QAAQ;QAC1B4F,IAAI,GAAG3P,MAAM,CAAC2P,IAAI;QAClBsC,KAAK,GAAGjS,MAAM,CAACiS,KAAK;QACpB8xE,GAAG,GAAG/jF,MAAM,CAAC+jF,GAAG;QAChBz+E,KAAK,CAACwD,GAAG,CACP,CACGiB,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,CAAC,GAAI,IAAI,EACvBA,QAAQ,GAAG,IAAI;EAAE;EAChB4F,MAAAA,IAAI,KAAK,EAAE,GAAI,IAAI,EACnBA,IAAI,KAAK,EAAE,GAAI,IAAI,EACnBA,IAAI,KAAK,CAAC,GAAI,IAAI,EACnBA,IAAI,GAAG,IAAI;EAAE;EACZsC,MAAAA,KAAK,CAAC+xE,SAAS,IAAI,CAAC,GAAI/xE,KAAK,CAACmxE,SAAS,EACvCnxE,KAAK,CAACoxE,YAAY,IAAI,CAAC,GACrBpxE,KAAK,CAACqxE,aAAa,IAAI,CAAE,GACzBrxE,KAAK,CAACgyE,YAAY,IAAI,CAAE,GACzBhyE,KAAK,CAACiyE,SAAS,EACjBjyE,KAAK,CAACkyE,UAAU,GAAI,IAAI,IAAI,CAAE,EAC9BlyE,KAAK,CAACkyE,UAAU,GAAG,IAAI;EAAE;QACxBJ,GAAG,KAAK,EAAE,GAAI,IAAI,EAClBA,GAAG,KAAK,EAAE,GAAI,IAAI,EAClBA,GAAG,KAAK,CAAC,GAAI,IAAI,EAClBA,GAAG,GAAG,IAAI;EAAE,OACb,EACD,EAAE,GAAG,EAAE,GAAG79E,CACZ,CAAC;EACH,IAAA;MACA,OAAOo6E,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACzoE,IAAI,EAAExS,KAAK,CAAC;IACvC,CAAA;EAAAg7E,EAAAA,GAAA,CAEOt1E,WAAW,GAAlB,SAAOA,WAAWA,CAAC6L,MAAwB,EAAE;EAC3C,IAAA,IAAI,CAACypE,GAAG,CAACC,KAAK,EAAE;QACdD,GAAG,CAAC1zB,IAAI,EAAE;EACZ,IAAA;EAEA,IAAA,IAAMw3B,KAAK,GAAG9D,GAAG,CAACa,IAAI,CAACtqE,MAAM,CAAC;MAC9B,IAAMpH,MAAM,GAAGgK,gBAAgB,CAAC6mE,GAAG,CAACuC,IAAI,EAAEuB,KAAK,CAAC;EAChD,IAAA,OAAO30E,MAAM;IACf,CAAA;EAAA6wE,EAAAA,GAAA,CAEO99D,IAAI,GAAX,SAAOA,IAAIA,CAACzQ,KAAkB,EAAE;EAI9B,IAAA,IAAMsyE,EAAE,GAAGtyE,KAAK,CAACxJ,MAAM;EACvB,IAAA,IAAMgoE,KAAqB,GAAG,CAACx+D,KAAK,CAAC0jE,GAAG,EAAE1jE,KAAK,CAAC8hE,GAAG,EAAE9hE,KAAK,CAACmiE,GAAG,CAAC;MAC/D,IAAMoQ,cAAc,GAAG,CAAC;EACxB,IAAA,IAAMv5D,MAAM,GAAG,IAAItkB,UAAU,CAAC,CAC5B,IAAI,EACH49E,EAAE,CAAC7N,qBAAqB,IAAI,CAAC,IAC3B6N,EAAE,CAAC5N,iBAAiB,GAAG,EAAE,GAAG,CAAC,CAAC,GAC/B4N,EAAE,CAAC3N,mBAAmB,EACxB2N,EAAE,CAAC/I,mCAAmC,CAAC,CAAC,CAAC,EACzC+I,EAAE,CAAC/I,mCAAmC,CAAC,CAAC,CAAC,EACzC+I,EAAE,CAAC/I,mCAAmC,CAAC,CAAC,CAAC,EACzC+I,EAAE,CAAC/I,mCAAmC,CAAC,CAAC,CAAC,EACzC+I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAC9I,kCAAkC,CAAC,CAAC,CAAC,EACxC8I,EAAE,CAAChN,iBAAiB,EACpB,GAAG,GAAIgN,EAAE,CAAChL,4BAA4B,IAAI,CAAE,EAC5C,GAAG,GAAGgL,EAAE,CAAChL,4BAA4B,EACrC,GAAG,GAAGgL,EAAE,CAACtI,eAAe,EACxB,GAAG,GAAGsI,EAAE,CAAC7M,iBAAiB,EAC1B,GAAG,GAAG6M,EAAE,CAACrM,qBAAqB,EAC9B,GAAG,GAAGqM,EAAE,CAACpM,uBAAuB,EAChC,IAAI,EACJxvE,QAAQ,CAAC47E,EAAE,CAAC5I,UAAU,CAACE,GAAG,CAAC,EAC1B2I,cAAc,GAAG,CAAC,GAChBD,EAAE,CAACE,kBAAkB,IAAI,CAAE,GAC3BF,EAAE,CAACG,mBAAmB,IAAI,CAAE,IAC5BH,EAAE,CAAC5I,UAAU,CAACC,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC,EAChCnL,KAAK,CAACvrE,MAAM,CACb,CAAC;;EAEF;EACA,IAAA,IAAIA,MAAM,GAAG+lB,MAAM,CAAC/lB,MAAM;EAC1B,IAAA,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqqE,KAAK,CAACvrE,MAAM,EAAEkB,CAAC,IAAI,CAAC,EAAE;EACxClB,MAAAA,MAAM,IAAI,CAAC;EACX,MAAA,KAAK,IAAI6S,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG04D,KAAK,CAACrqE,CAAC,CAAC,CAAClB,MAAM,EAAE6S,CAAC,IAAI,CAAC,EAAE;UAC3C7S,MAAM,IAAI,CAAC,GAAGurE,KAAK,CAACrqE,CAAC,CAAC,CAAC2R,CAAC,CAAC,CAAC7S,MAAM;EAClC,MAAA;EACF,IAAA;EAEA,IAAA,IAAMy7E,IAAI,GAAG,IAAIh6E,UAAU,CAACzB,MAAM,CAAC;EACnCy7E,IAAAA,IAAI,CAAC33E,GAAG,CAACiiB,MAAM,EAAE,CAAC,CAAC;MACnB/lB,MAAM,GAAG+lB,MAAM,CAAC/lB,MAAM;EACtB;EACA,IAAA,IAAMy/E,IAAI,GAAGlU,KAAK,CAACvrE,MAAM,GAAG,CAAC;EAC7B,IAAA,KAAK,IAAIkB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGqqE,KAAK,CAACvrE,MAAM,EAAEkB,EAAC,IAAI,CAAC,EAAE;EACxCu6E,MAAAA,IAAI,CAAC33E,GAAG,CACN,IAAIrC,UAAU,CAAC,CACZ,EAAE,GAAGP,EAAC,IAAKA,EAAC,KAAKu+E,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,EACjC,IAAI,EACJlU,KAAK,CAACrqE,EAAC,CAAC,CAAClB,MAAM,CAChB,CAAC,EACFA,MACF,CAAC;EACDA,MAAAA,MAAM,IAAI,CAAC;EACX,MAAA,KAAK,IAAI6S,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG04D,KAAK,CAACrqE,EAAC,CAAC,CAAClB,MAAM,EAAE6S,EAAC,IAAI,CAAC,EAAE;EAC3C4oE,QAAAA,IAAI,CAAC33E,GAAG,CACN,IAAIrC,UAAU,CAAC,CAAC8pE,KAAK,CAACrqE,EAAC,CAAC,CAAC2R,EAAC,CAAC,CAAC7S,MAAM,IAAI,CAAC,EAAEurE,KAAK,CAACrqE,EAAC,CAAC,CAAC2R,EAAC,CAAC,CAAC7S,MAAM,GAAG,GAAG,CAAC,CAAC,EACnEA,MACF,CAAC;EACDA,QAAAA,MAAM,IAAI,CAAC;EACXy7E,QAAAA,IAAI,CAAC33E,GAAG,CAACynE,KAAK,CAACrqE,EAAC,CAAC,CAAC2R,EAAC,CAAC,EAAE7S,MAAM,CAAC;UAC7BA,MAAM,IAAIurE,KAAK,CAACrqE,EAAC,CAAC,CAAC2R,EAAC,CAAC,CAAC7S,MAAM;EAC9B,MAAA;EACF,IAAA;EACA,IAAA,IAAM0/E,IAAI,GAAGpE,GAAG,CAACwC,GAAG,CAACxC,GAAG,CAACC,KAAK,CAACE,IAAI,EAAEA,IAAI,CAAC;EAC1C,IAAA,IAAMx4D,KAAK,GAAGlW,KAAK,CAACkW,KAAK;EACzB,IAAA,IAAMC,MAAM,GAAGnW,KAAK,CAACmW,MAAM;EAC3B,IAAA,IAAMs7D,QAAQ,GAAGzxE,KAAK,CAACgiE,UAAU,CAAC,CAAC,CAAC;EACpC,IAAA,IAAM0P,QAAQ,GAAG1xE,KAAK,CAACgiE,UAAU,CAAC,CAAC,CAAC;EAEpC,IAAA,OAAOuM,GAAG,CAACwC,GAAG,CACZxC,GAAG,CAACC,KAAK,CAAC/9D,IAAI,EACd,IAAI/b,UAAU,CAAC,CACb,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACLwhB,IAAAA,KAAK,IAAI,CAAC,GAAI,IAAI,EACnBA,KAAK,GAAG,IAAI;EAAE;EACbC,IAAAA,MAAM,IAAI,CAAC,GAAI,IAAI,EACpBA,MAAM,GAAG,IAAI;EAAE;EACfw8D,IAAI,EACJpE,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACG,IAAI,EACd,IAAIj6E,UAAU,CAAC,CACb,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;EACN,IAAA,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI;EAAE;MACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACL,CACH,CAAC;EAAE;EACH65E,IAAAA,GAAG,CAACwC,GAAG,CACLxC,GAAG,CAACC,KAAK,CAACgB,IAAI,EACd,IAAI96E,UAAU,CAAC,CACb+8E,QAAQ,IAAI,EAAE;EAAE;EACfA,IAAAA,QAAQ,IAAI,EAAE,GAAI,IAAI,EACtBA,QAAQ,IAAI,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAG,IAAI,EACfC,QAAQ,IAAI,EAAE;EAAE;EACfA,IAAAA,QAAQ,IAAI,EAAE,GAAI,IAAI,EACtBA,QAAQ,IAAI,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAG,IAAI,CAChB,CACH,CACF,CAAC;IACH,CAAA;EAAA,EAAA,OAAAnD,GAAA;EAAA,CAAA,EAAA;EAp0CIA,GAAG,CACOC,KAAK,GAAA,MAAA;EADfD,GAAG,CAEQ4B,UAAU,GAAA,MAAA;EAFrB5B,GAAG,CAGQ6B,IAAI,GAAA,MAAA;EAHf7B,GAAG,CAIQ8B,IAAI,GAAA,MAAA;EAJf9B,GAAG,CAKQ+B,IAAI,GAAA,MAAA;EALf/B,GAAG,CAMQgC,IAAI,GAAA,MAAA;EANfhC,GAAG,CAOQiC,IAAI,GAAA,MAAA;EAPfjC,GAAG,CAQQkC,IAAI,GAAA,MAAA;EARflC,GAAG,CASQmC,IAAI,GAAA,MAAA;EATfnC,GAAG,CAUQuC,IAAI,GAAA,MAAA;EAVfvC,GAAG,CAWQyC,IAAI,GAAA,MAAA;;ECvCrB,IAAM4B,qBAAqB,GAAG,KAAK;EAS5B,SAASC,mBAAmBA,CACjCvtE,QAAgB,EAChBwtE,SAAiB,EACjBC,OAAe,EACfpuD,KAAc,EACN;EAAA,EAAA,IAFRouD,OAAe,KAAA,MAAA,EAAA;EAAfA,IAAAA,OAAe,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IACnBpuD,KAAc,KAAA,MAAA,EAAA;EAAdA,IAAAA,KAAc,GAAG,KAAK;EAAA,EAAA;IAEtB,IAAMjnB,MAAM,GAAG4H,QAAQ,GAAGwtE,SAAS,GAAGC,OAAO,CAAC;IAC9C,OAAOpuD,KAAK,GAAG34B,IAAI,CAAC24B,KAAK,CAACjnB,MAAM,CAAC,GAAGA,MAAM;EAC5C;EAEO,SAASs1E,oBAAoBA,CAClC1tE,QAAgB,EAChBwtE,SAAiB,EACjBG,QAAgB,EAChBtuD,KAAc,EACN;EAAA,EAAA,IAFRsuD,QAAgB,KAAA,MAAA,EAAA;EAAhBA,IAAAA,QAAgB,GAAG,CAAC;EAAA,EAAA;EAAA,EAAA,IACpBtuD,KAAc,KAAA,MAAA,EAAA;EAAdA,IAAAA,KAAc,GAAG,KAAK;EAAA,EAAA;IAEtB,OAAOkuD,mBAAmB,CAACvtE,QAAQ,EAAEwtE,SAAS,EAAE,CAAC,GAAGG,QAAQ,EAAEtuD,KAAK,CAAC;EACtE;EAEO,SAASuuD,mBAAmBA,CACjC5tE,QAAgB,EAChBqf,KAAc,EACN;IACR,OAAOkuD,mBAAmB,CAACvtE,QAAQ,EAAE,IAAI,EAAE,CAAC,GAAGstE,qBAAqB,EAAEjuD,KAAK,CAAC;EAC9E;EAEO,SAASwuD,0BAA0BA,CACxC7tE,QAAgB,EAChB2tE,QAAgB,EACR;EAAA,EAAA,IADRA,QAAgB,KAAA,MAAA,EAAA;EAAhBA,IAAAA,QAAgB,GAAG,CAAC;EAAA,EAAA;IAEpB,OAAOJ,mBAAmB,CAACvtE,QAAQ,EAAEstE,qBAAqB,EAAE,CAAC,GAAGK,QAAQ,CAAC;EAC3E;EAEO,SAASG,iBAAiBA,CAACrb,SAA0B,EAAU;EACpE,EAAA,IAAQzyD,QAAQ,GAAyByyD,SAAS,CAA1CzyD,QAAQ;MAAE/G,SAAS,GAAcw5D,SAAS,CAAhCx5D,SAAS;MAAEc,OAAO,GAAK04D,SAAS,CAArB14D,OAAO;IACpC,OAAUiG,QAAQ,GAAG/G,SAAS,GAAA,IAAA,GAAK+G,QAAQ,GAAA,GAAA,GAAI/G,SAAS,mBAAcc,OAAO;EAC/E;;ECRA,IAAMg0E,yBAAyB,GAAG,EAAE,GAAG,IAAI,CAAC;EAC5C,IAAMC,qBAAqB,GAAG,IAAI;EAClC,IAAMC,2BAA2B,GAAG,IAAI;EACxC,IAAMC,qBAAqB,GAAG,IAAI;EAElC,IAAI5Z,aAA4B,GAAG,IAAI;EACvC,IAAI6Z,mBAAkC,GAAG,IAAI;EAE7C,SAASC,eAAeA,CACtBC,UAAmB,EACnB37E,QAAgB,EAChB4F,IAAY,EACZo0E,GAAW,EACA;IACX,OAAO;EACLh6E,IAAAA,QAAQ,EAARA,QAAQ;EACR4F,IAAAA,IAAI,EAAJA,IAAI;EACJo0E,IAAAA,GAAG,EAAHA,GAAG;EACH9xE,IAAAA,KAAK,EAAE;EACL+xE,MAAAA,SAAS,EAAE,CAAC;EACZX,MAAAA,YAAY,EAAE,CAAC;EACfC,MAAAA,aAAa,EAAE,CAAC;EAChBa,MAAAA,UAAU,EAAE,CAAC;EACbf,MAAAA,SAAS,EAAEsC,UAAU,GAAG,CAAC,GAAG,CAAC;EAC7BxB,MAAAA,SAAS,EAAEwB,UAAU,GAAG,CAAC,GAAG;EAC9B;KACD;EACH;EAAC,IACoBC,UAAU,0BAAAnxD,OAAA,EAAA;IAkB7B,SAAAmxD,UAAAA,CACE/f,QAAyB,EACzB76C,MAAiB,EACjBsxD,aAA4B,EAC5B/5E,MAAe,EACf;EAAA,IAAA,IAAAiH,KAAA;MACAA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,OAAM,aAAa,EAAElH,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAvBdq8D,QAAQ,GAAA,MAAA;EAAAr8D,IAAAA,KAAA,CACRwhB,MAAM,GAAA,MAAA;EAAAxhB,IAAAA,KAAA,CACN8yE,aAAa,GAAA,MAAA;MAAA9yE,KAAA,CACtBq8E,WAAW,GAAY,KAAK;MAAAr8E,KAAA,CAC5Bs8E,QAAQ,GAA2B,IAAI;MAAAt8E,KAAA,CACvCu8E,QAAQ,GAA2B,IAAI;MAAAv8E,KAAA,CACvCw8E,WAAW,GAAkB,IAAI;MAAAx8E,KAAA,CACjCy8E,WAAW,GAAkB,IAAI;MAAAz8E,KAAA,CACjC08E,mBAAmB,GAAkB,IAAI;MAAA18E,KAAA,CACzC28E,iBAAiB,GAAY,KAAK;MAAA38E,KAAA,CAClC48E,iBAAiB,GAAY,KAAK;EAAA58E,IAAAA,KAAA,CAClC68E,gBAAgB,GAAA,MAAA;MAatB78E,KAAA,CAAKq8D,QAAQ,GAAGA,QAAQ;MACxBr8D,KAAA,CAAKwhB,MAAM,GAAGA,MAAM;MACpBxhB,KAAA,CAAK8yE,aAAa,GAAGA,aAAa;MAClC9yE,KAAA,CAAKq8E,WAAW,GAAG,KAAK;MAExB,IAAIja,aAAa,KAAK,IAAI,EAAE;EAC1B,MAAA,IAAMjsD,SAAS,GAAGD,SAAS,CAACC,SAAS,IAAI,EAAE;EAC3C,MAAA,IAAMjQ,MAAM,GAAGiQ,SAAS,CAACq9B,KAAK,CAAC,gBAAgB,CAAC;QAChD4uB,aAAa,GAAGl8D,MAAM,GAAGhH,QAAQ,CAACgH,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EAClD,IAAA;MACA,IAAI+1E,mBAAmB,KAAK,IAAI,EAAE;QAChC,IAAM/1E,OAAM,GAAGgQ,SAAS,CAACC,SAAS,CAACq9B,KAAK,CAAC,gBAAgB,CAAC;QAC1DyoC,mBAAmB,GAAG/1E,OAAM,GAAGhH,QAAQ,CAACgH,OAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACxD,IAAA;EAAC,IAAA,OAAAlG,KAAA;EACH,EAAA;IAAC6B,cAAA,CAAAu6E,UAAA,EAAAnxD,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAA6lF,UAAA,CAAA5lF,SAAA;EAAAD,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;EACR;EACA,IAAA,IAAI,CAAC+oB,MAAM,GAAG,IAAI,CAACq7D,gBAAgB,GAAG,IAAI,CAACP,QAAQ,GAAG,IAAI,CAACC,QAAQ,GAAG,IAAI;IAC5E,CAAC;EAAAhmF,EAAAA,MAAA,CAED+qE,cAAc,GAAd,SAAAA,cAAcA,CAACwb,gBAAwC,EAAE;EACvD,IAAA,IAAMrvB,OAAO,GAAG,IAAI,CAAC6uB,QAAQ;EAC7B,IAAA,IACE,CAAC7uB,OAAO,IACR,CAACqvB,gBAAgB,IACjBA,gBAAgB,CAACj1E,OAAO,KAAK4lD,OAAO,CAAC5lD,OAAO,IAC5Ci1E,gBAAgB,CAAChvE,QAAQ,KAAK2/C,OAAO,CAAC3/C,QAAQ,IAC9CgvE,gBAAgB,CAAC/1E,SAAS,KAAK0mD,OAAO,CAAC1mD,SAAS,EAChD;QACA,IAAI,CAACzQ,GAAG,CAAA,iBAAA,IACYm3D,OAAO,GAAGmuB,iBAAiB,CAACnuB,OAAO,CAAC,GAAGA,OAAO,CAAA,GAAA,KAAA,IAAMqvB,gBAAgB,GAAGlB,iBAAiB,CAACkB,gBAAgB,CAAC,GAAGA,gBAAgB,CACjJ,CAAC;EACH,IAAA;EAEA,IAAA,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACC,QAAQ,GAAGO,gBAAgB;IAClD,CAAC;EAAAvmF,EAAAA,MAAA,CAEDwmF,kBAAkB,GAAlB,SAAAA,kBAAkBA,GAAG;EACnB,IAAA,IAAI,CAACzmF,GAAG,CAAC,sBAAsB,CAAC;MAChC,IAAI,CAACsmF,iBAAiB,GAAG,KAAK;MAC9B,IAAI,CAACD,iBAAiB,GAAG,KAAK;IAChC,CAAC;EAAApmF,EAAAA,MAAA,CAED6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,GAAG;EACjB,IAAA,IAAI,CAAC9qE,GAAG,CAAC,wBAAwB,CAAC;MAClC,IAAI,CAAC+lF,WAAW,GAAG,KAAK;MACxB,IAAI,CAACQ,gBAAgB,GAAGliF,SAAS;IACnC,CAAC;EAAApE,EAAAA,MAAA,CAEDymF,gBAAgB,GAAhB,SAAAA,gBAAgBA,CAAC9X,YAA2B,EAAE;EAC5C;MACA,IAAI+X,gBAAgB,GAAG,KAAK;EAC5B,IAAA,IAAMC,QAAQ,GAAGhY,YAAY,CAAC,CAAC,CAAC,CAAC3yD,GAAG;MACpC,IAAMzR,QAAQ,GAAGokE,YAAY,CAAC11D,MAAM,CAAC,UAAC2tE,MAAM,EAAE1mF,MAAM,EAAK;EACvD,MAAA,IAAI8b,GAAG,GAAG9b,MAAM,CAAC8b,GAAG;EACpB,MAAA,IAAIi3C,KAAK,GAAGj3C,GAAG,GAAG4qE,MAAM;EACxB,MAAA,IAAI3zB,KAAK,GAAG,WAAW,EAAE;EACvB;EACAyzB,QAAAA,gBAAgB,GAAG,IAAI;EACvB1qE,QAAAA,GAAG,GAAG6qE,YAAY,CAAC7qE,GAAG,EAAE2qE,QAAQ,CAAC;UACjC1zB,KAAK,GAAGj3C,GAAG,GAAG4qE,MAAM;EACtB,MAAA;QACA,IAAI3zB,KAAK,GAAG,CAAC,EAAE;EACb,QAAA,OAAO2zB,MAAM;EACf,MAAA;EACA,MAAA,OAAO5qE,GAAG;MACZ,CAAC,EAAE2qE,QAAQ,CAAC;EACZ,IAAA,IAAID,gBAAgB,EAAE;EACpB,MAAA,IAAI,CAAChkF,KAAK,CAAC,uBAAuB,CAAC;EACrC,IAAA;EACA,IAAA,OAAO6H,QAAQ;IACjB,CAAC;IAAAvK,MAAA,CAED8mF,KAAK,GAAL,SAAAA,KAAKA,CACHr8D,UAA6B,EAC7BghD,UAA6B,EAC7BL,QAA8B,EAC9BM,SAA+B,EAC/B1xD,UAAkB,EAClB+sE,kBAA2B,EAC3BlzC,KAAc,EACd9I,YAA+B,EAChB;EACf,IAAA,IAAI58B,KAA+B;EACnC,IAAA,IAAID,KAA+B;EACnC,IAAA,IAAIhD,WAAwC;EAC5C,IAAA,IAAIgE,IAAiC;EACrC,IAAA,IAAID,GAAgC;EACpC,IAAA,IAAIpB,WAAgC;MACpC,IAAIm5E,eAAe,GAAGhtE,UAAU;MAChC,IAAIitE,eAAe,GAAGjtE,UAAU;;EAEhC;EACA;EACA;EACA;EACA;EACA,IAAA,IAAMktE,QAAQ,GAAGz8D,UAAU,CAAC4/C,GAAG,GAAG,EAAE;EACpC,IAAA,IAAMngD,QAAQ,GAAGuhD,UAAU,CAACpB,GAAG,GAAG,EAAE;EACpC,IAAA,IAAMnlE,MAAM,GAAGumE,UAAU,CAACtxD,OAAO,CAACjV,MAAM;MACxC,IAAMiiF,kBAAkB,GAAG18D,UAAU,CAACtQ,OAAO,CAACjV,MAAM,GAAG,CAAC;MACxD,IAAMkiF,kBAAkB,GAAIvzC,KAAK,IAAI3uC,MAAM,GAAG,CAAC,IAAKA,MAAM,GAAG,CAAC;EAC9D,IAAA,IAAMmiF,WAAW,GACd,CAAC,CAACH,QAAQ,IAAIC,kBAAkB,MAC9B,CAACj9D,QAAQ,IAAIk9D,kBAAkB,CAAC,IACnC,IAAI,CAACtB,WAAW,IAChBjyC,KAAK;EAEP,IAAA,IAAIwzC,WAAW,EAAE;QACf,IAAI,IAAI,CAACvB,WAAW,EAAE;EAAA,QAAA,IAAAwB,qBAAA,EAAAC,kBAAA,EAAAC,sBAAA,EAAAC,mBAAA;EACpB,QAAA,IAAMx8D,MAAM,GAAG,IAAI,CAACq7D,gBAAgB;EACpC,QAAA,IACGr7D,MAAM,KACJwgD,UAAU,CAACtjD,KAAK,KAAK8C,MAAM,CAAC9C,KAAK,IAChCsjD,UAAU,CAACrjD,MAAM,KAAK6C,MAAM,CAAC7C,MAAM,IACnC,CAAA,CAAAk/D,qBAAA,GAAA7b,UAAU,CAACwI,UAAU,KAAA,IAAA,GAAA,MAAA,GAArBqT,qBAAA,CAAwB,CAAC,CAAC,OAAA,CAAAC,kBAAA,GAAKt8D,MAAM,CAACgpD,UAAU,qBAAjBsT,kBAAA,CAAoB,CAAC,CAAC,KACrD,CAAA,CAAAC,sBAAA,GAAA/b,UAAU,CAACwI,UAAU,KAAA,IAAA,GAAA,MAAA,GAArBuT,sBAAA,CAAwB,CAAC,CAAC,OAAA,CAAAC,mBAAA,GAAKx8D,MAAM,CAACgpD,UAAU,KAAA,IAAA,GAAA,MAAA,GAAjBwT,mBAAA,CAAoB,CAAC,CAAC,CAAA,CAAC,IACzD,CAACx8D,MAAM,IAAIm8D,kBAAmB,IAC9B,IAAI,CAAClB,WAAW,KAAK,IAAI,IAAIiB,kBAAmB,EACjD;YACA,IAAI,CAACtc,gBAAgB,EAAE;EACzB,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAAC,IAAI,CAACib,WAAW,EAAE;EACrB56E,QAAAA,WAAW,GAAG,IAAI,CAACw8E,UAAU,CAC3Bj9D,UAAU,EACVghD,UAAU,EACVzxD,UAAU,EACV+sE,kBACF,CAAC;EACH,MAAA;EAEA,MAAA,IAAMV,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;QAChD,IAAIsB,kBAAkB,GAAG,EAAE;EAC3B,MAAA,IAAIC,gBAAgB;EAEpB,MAAA,IAAIR,kBAAkB,EAAE;EACtBO,QAAAA,kBAAkB,GAAGE,iBAAiB,CAACpc,UAAU,CAACtxD,OAAO,CAAC;UAC1D,IAAI,CAACksE,iBAAiB,IAAI,IAAI,CAACp7D,MAAM,CAAC68D,4BAA4B,EAAE;EAClEj6E,UAAAA,WAAW,GAAG,IAAI;YAClB,IAAI85E,kBAAkB,GAAG,CAAC,EAAE;EAC1B,YAAA,IAAI,CAAChlF,IAAI,CAAA,UAAA,GACIglF,kBAAkB,GAAA,UAAA,GAAWziF,MAAM,6CAChD,CAAC;cACD,IAAMqF,QAAQ,GAAG,IAAI,CAACk8E,gBAAgB,CAAChb,UAAU,CAACtxD,OAAO,CAAC;cAC1DsxD,UAAU,CAACtxD,OAAO,GAAGsxD,UAAU,CAACtxD,OAAO,CAAC1c,KAAK,CAACkqF,kBAAkB,CAAC;cACjElc,UAAU,CAAC1M,OAAO,IAAI4oB,kBAAkB;EACxCV,YAAAA,eAAe,IACb,CAACxb,UAAU,CAACtxD,OAAO,CAAC,CAAC,CAAC,CAAC6B,GAAG,GAAGzR,QAAQ,IACrCkhE,UAAU,CAACrB,cAAc;EAC3Bwd,YAAAA,gBAAgB,GAAGX,eAAe;EACpC,UAAA,CAAC,MAAM,IAAIU,kBAAkB,KAAK,EAAE,EAAE;EACpC,YAAA,IAAI,CAAChlF,IAAI,CAAA,2BAAA,GAA6BuC,MAAM,mBAAgB,CAAC;EAC7D2I,YAAAA,WAAW,GAAG,KAAK;EACrB,UAAA;EACF,QAAA;EACF,MAAA;QAEA,IAAI,IAAI,CAACi4E,WAAW,EAAE;UACpB,IAAIqB,kBAAkB,IAAIC,kBAAkB,EAAE;EAC5C;EACA;EACA;EACA;YACA,IAAM78E,SAAQ,GAAG,IAAI,CAACk8E,gBAAgB,CAAChb,UAAU,CAACtxD,OAAO,CAAC;EAC1D,UAAA,IAAM4tE,OAAO,GACXlB,YAAY,CAACp8D,UAAU,CAACtQ,OAAO,CAAC,CAAC,CAAC,CAAC6B,GAAG,EAAEzR,SAAQ,CAAC,GAAGA,SAAQ;EAC9D,UAAA,IAAMy9E,wBAAwB,GAAGD,OAAO,GAAGtc,UAAU,CAACrB,cAAc;YACpE4c,eAAe,IAAI/oF,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEymF,wBAAwB,CAAC;YACxDf,eAAe,IAAIhpF,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE,CAACymF,wBAAwB,CAAC;EAC3D,QAAA;;EAEA;EACA,QAAA,IAAIb,kBAAkB,EAAE;EACtB;EACA,UAAA,IAAI,CAAC18D,UAAU,CAAC67C,UAAU,EAAE;EAC1B,YAAA,IAAI,CAAC3jE,IAAI,CAAC,0CAA0C,CAAC;EACrDuI,YAAAA,WAAW,GAAG,IAAI,CAACw8E,UAAU,CAC3Bj9D,UAAU,EACVghD,UAAU,EACVzxD,UAAU,EACV+sE,kBACF,CAAC;EACH,UAAA;EACA74E,UAAAA,KAAK,GAAG,IAAI,CAAC+5E,UAAU,CACrBx9D,UAAU,EACVu8D,eAAe,EACf,IAAI,CAACZ,iBAAiB,EACtBW,kBAAkB,EAClB78D,QAAQ,IACNk9D,kBAAkB,IAClBr8C,YAAY,KAAK5rC,iBAAiB,CAACE,KAAK,GACtC4nF,eAAe,GACf7iF,SACN,CAAC;EACD,UAAA,IAAIgjF,kBAAkB,EAAE;EACtB,YAAA,IAAMc,gBAAgB,GAAGh6E,KAAK,GAAGA,KAAK,CAAC1D,MAAM,GAAG0D,KAAK,CAAC3D,QAAQ,GAAG,CAAC;EAClE;EACA,YAAA,IAAI,CAACkhE,UAAU,CAACrB,cAAc,EAAE;EAC9B,cAAA,IAAI,CAACznE,IAAI,CAAC,0CAA0C,CAAC;EACrDuI,cAAAA,WAAW,GAAG,IAAI,CAACw8E,UAAU,CAC3Bj9D,UAAU,EACVghD,UAAU,EACVzxD,UAAU,EACV+sE,kBACF,CAAC;EACH,YAAA;EACA54E,YAAAA,KAAK,GAAG,IAAI,CAACg6E,UAAU,CACrB1c,UAAU,EACVwb,eAAe,EACfZ,iBAAiB,EACjB6B,gBACF,CAAC;EACH,UAAA;UACF,CAAC,MAAM,IAAId,kBAAkB,EAAE;EAC7Bj5E,UAAAA,KAAK,GAAG,IAAI,CAACg6E,UAAU,CACrB1c,UAAU,EACVwb,eAAe,EACfZ,iBAAiB,EACjB,CACF,CAAC;EACH,QAAA;EACA,QAAA,IAAIl4E,KAAK,EAAE;YACTA,KAAK,CAACi6E,aAAa,GAAGT,kBAAkB;EACxCx5E,UAAAA,KAAK,CAACN,WAAW,GAAG85E,kBAAkB,KAAK,EAAE;YAC7Cx5E,KAAK,CAACy5E,gBAAgB,GAAGA,gBAAgB;EAC3C,QAAA;EACF,MAAA;EACF,IAAA;;EAEA;MACA,IAAI,IAAI,CAAC9B,WAAW,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE;EACtD,MAAA,IAAI5a,QAAQ,CAACjxD,OAAO,CAACjV,MAAM,EAAE;EAC3B+J,QAAAA,GAAG,GAAGo5E,gCAAgC,CACpCjd,QAAQ,EACRpxD,UAAU,EACV,IAAI,CAAC+rE,QAAQ,EACb,IAAI,CAACC,QACP,CAAC;EACH,MAAA;EAEA,MAAA,IAAIta,SAAS,CAACvxD,OAAO,CAACjV,MAAM,EAAE;UAC5BgK,IAAI,GAAGo5E,gCAAgC,CACrC5c,SAAS,EACT1xD,UAAU,EACV,IAAI,CAAC+rE,QACP,CAAC;EACH,MAAA;EACF,IAAA;MAEA,OAAO;EACL73E,MAAAA,KAAK,EAALA,KAAK;EACLC,MAAAA,KAAK,EAALA,KAAK;EACLjD,MAAAA,WAAW,EAAXA,WAAW;EACX2C,MAAAA,WAAW,EAAXA,WAAW;EACXqB,MAAAA,IAAI,EAAJA,IAAI;EACJD,MAAAA,GAAG,EAAHA;OACD;IACH,CAAC;EAAAjP,EAAAA,MAAA,CAEDuoF,cAAc,GAAd,SAAAA,cAAcA,CACZC,QAAgB,EAChBh4E,SAAiB,EACjBoN,gBAAwB,EACxBxa,IAAuB,EACf;MACR,IAAMkM,MAAM,GAAGrR,IAAI,CAAC24B,KAAK,CAAChZ,gBAAgB,GAAGpN,SAAS,CAAC;EACvD,IAAA,IAAIw5D,SAAS,GAAG6c,YAAY,CAAC2B,QAAQ,EAAEl5E,MAAM,CAAC;EAC9C,IAAA,IAAI06D,SAAS,GAAG16D,MAAM,GAAGkB,SAAS,EAAE;QAClC,IAAI,CAACzQ,GAAG,CAAA,8CAAA,GACyC,CAACuP,MAAM,GAAG06D,SAAS,IAAIx5D,SAAS,GAAA,GAAA,GAAIpN,IACrF,CAAC;EACD,MAAA,OAAO4mE,SAAS,GAAG16D,MAAM,GAAGkB,SAAS,EAAE;EACrCw5D,QAAAA,SAAS,IAAI,UAAU;EACzB,MAAA;EACF,IAAA;MACA,OAAOA,SAAS,GAAG16D,MAAM;IAC3B,CAAC;EAAAtP,EAAAA,MAAA,CAED0nF,UAAU,GAAV,SAAAA,UAAUA,CACRj9D,UAA6B,EAC7BghD,UAA6B,EAC7BzxD,UAAkB,EAClB+sE,kBAA2B,EACE;EAC7B,IAAA,IAAM0B,YAAY,GAAGh+D,UAAU,CAACtQ,OAAO;EACvC,IAAA,IAAMw0D,YAAY,GAAGlD,UAAU,CAACtxD,OAAO;EACvC,IAAA,IAAMoiE,aAAa,GAAG,IAAI,CAACA,aAAa;MACxC,IAAMxlE,MAAgB,GAAG,EAAE;EAC3B,IAAA,IAAMgvE,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAI2C,aAAa,GAAG,CAAC3C,QAAQ,IAAIgB,kBAAkB;MACnD,IAAI5Z,SAAS,GAAG,WAAW;EAC3B,IAAA,IAAIjW,OAA2B;EAC/B,IAAA,IAAIyxB,OAA2B;EAC/B,IAAA,IAAIn4E,SAA6B;MACjC,IAAIc,OAAe,GAAG,EAAE;EAExB,IAAA,IAAIo3E,aAAa,EAAE;QACjBxxB,OAAO,GAAGyxB,OAAO,GAAG9vE,QAAQ;EAC9B,IAAA;EAEA,IAAA,IAAI4R,UAAU,CAACQ,MAAM,IAAIw9D,YAAY,CAACvjF,MAAM,EAAE;EAC5C;EACA;EACA;EACA;EACAulB,MAAAA,UAAU,CAACja,SAAS,GAAGia,UAAU,CAAC67C,UAAU;QAC5C,QAAQ77C,UAAU,CAAC2iD,YAAY;EAC7B,QAAA,KAAK,KAAK;YACR,IAAImP,aAAa,CAACp2D,IAAI,EAAE;EACtB;EACAgnD,YAAAA,SAAS,GAAG,YAAY;cACxB1iD,UAAU,CAAClY,KAAK,GAAG,EAAE;EACvB,UAAA,CAAC,MAAM,IAAIgqE,aAAa,CAACn2D,GAAG,EAAE;EAC5B;cACAqE,UAAU,CAAClY,KAAK,GAAG,KAAK;EAC1B,UAAA;EACA,UAAA;EAEF,QAAA,KAAK,KAAK;YACRkY,UAAU,CAAClY,KAAK,GAAG,MAAM;EACzB,UAAA;EACJ;QACAwE,MAAM,CAAC7I,KAAK,GAAG;EACb7K,QAAAA,EAAE,EAAE,OAAO;EACX8pE,QAAAA,SAAS,EAAEA,SAAS;UACpB56D,KAAK,EAAEkY,UAAU,CAAClY,KAAK;UACvBrH,WAAW,EACTuf,UAAU,CAAC2iD,YAAY,KAAK,KAAK,IAAImP,aAAa,CAACp2D,IAAI,GACnD,IAAIxf,UAAU,CAAC,CAAC,CAAC,GACjB65E,GAAG,CAACt1E,WAAW,CAAC,CAACuf,UAAU,CAAC,CAAC;EACnCm+D,QAAAA,QAAQ,EAAE;YACRviB,YAAY,EAAE57C,UAAU,CAAC47C;EAC3B;SACD;EACD,MAAA,IAAIqiB,aAAa,EAAE;UACjBp3E,OAAO,GAAGmZ,UAAU,CAACpnB,EAAE;UACvBmN,SAAS,GAAGia,UAAU,CAAC2/C,cAAc;UACrC,IAAI,CAAC2b,QAAQ,IAAIv1E,SAAS,KAAKu1E,QAAQ,CAACv1E,SAAS,EAAE;EACjD;EACA0mD,UAAAA,OAAO,GAAGyxB,OAAO,GAAG,IAAI,CAACJ,cAAc,CACrCE,YAAY,CAAC,CAAC,CAAC,CAACzsE,GAAG,EACnBxL,SAAS,EACTwJ,UAAU,EACV,OACF,CAAC;EACH,QAAA,CAAC,MAAM;EACL0uE,UAAAA,aAAa,GAAG,KAAK;EACvB,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAIjd,UAAU,CAACsI,GAAG,IAAItI,UAAU,CAAC2I,GAAG,IAAIzF,YAAY,CAACzpE,MAAM,EAAE;EAC3D;EACA;EACAumE,MAAAA,UAAU,CAACj7D,SAAS,GAAGi7D,UAAU,CAACrB,cAAc;QAChDrzD,MAAM,CAAC5I,KAAK,GAAG;EACb9K,QAAAA,EAAE,EAAE,MAAM;EACV8pE,QAAAA,SAAS,EAAE,WAAW;UACtB56D,KAAK,EAAEk5D,UAAU,CAACl5D,KAAK;UACvBrH,WAAW,EAAEs1E,GAAG,CAACt1E,WAAW,CAAC,CAACugE,UAAU,CAAC,CAAC;EAC1Cmd,QAAAA,QAAQ,EAAE;YACRzgE,KAAK,EAAEsjD,UAAU,CAACtjD,KAAK;YACvBC,MAAM,EAAEqjD,UAAU,CAACrjD;EACrB;SACD;EACD,MAAA,IAAIsgE,aAAa,EAAE;UACjBp3E,OAAO,GAAGm6D,UAAU,CAACpoE,EAAE;UACvBmN,SAAS,GAAGi7D,UAAU,CAACrB,cAAc;UACrC,IAAI,CAAC2b,QAAQ,IAAIv1E,SAAS,KAAKu1E,QAAQ,CAACv1E,SAAS,EAAE;EACjD,UAAA,IAAMm6D,OAAO,GAAG,IAAI,CAAC8b,gBAAgB,CAAC9X,YAAY,CAAC;EACnD,UAAA,IAAMka,OAAO,GAAGhC,YAAY,CAAClY,YAAY,CAAC,CAAC,CAAC,CAACrD,GAAG,EAAEX,OAAO,CAAC;EAC1D,UAAA,IAAMme,YAAY,GAAG,IAAI,CAACP,cAAc,CACtCM,OAAO,EACPr4E,SAAS,EACTwJ,UAAU,EACV,OACF,CAAC;EACD,UAAA,IAAM+uE,YAAY,GAAG,IAAI,CAACR,cAAc,CACtC5d,OAAO,EACPn6D,SAAS,EACTwJ,UAAU,EACV,OACF,CAAC;YACD2uE,OAAO,GAAG1qF,IAAI,CAAC+D,GAAG,CAAC2mF,OAAO,EAAYG,YAAY,CAAC;YACnD5xB,OAAO,GAAGj5D,IAAI,CAAC+D,GAAG,CAACk1D,OAAO,EAAY6xB,YAAY,CAAC;EACrD,QAAA,CAAC,MAAM;EACLL,UAAAA,aAAa,GAAG,KAAK;EACvB,QAAA;EACF,MAAA;QACA,IAAI,CAACpC,gBAAgB,GAAG;UACtBn+D,KAAK,EAAEsjD,UAAU,CAACtjD,KAAK;UACvBC,MAAM,EAAEqjD,UAAU,CAACrjD,MAAM;UACzB6rD,UAAU,EAAExI,UAAU,CAACwI;SACxB;EACH,IAAA;MAEA,IAAIlvE,MAAM,CAAChB,IAAI,CAACgT,MAAM,CAAC,CAAC7R,MAAM,EAAE;QAC9B,IAAI,CAAC4gF,WAAW,GAAG,IAAI;EACvB,MAAA,IAAI4C,aAAa,EAAE;EACjB,QAAA,IAAI3C,QAAQ,EAAE;EACZ,UAAA,IAAI,CAACpjF,IAAI,CAAA,+BAAA,IACyBokF,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAA,GAAG/sE,UAAU,GAAA,GAAA,GAAIk9C,OAAO,GAAI1mD,SAAU,qBAAgBu1E,QAAQ,CAACxuE,QAAQ,GAAGwuE,QAAQ,CAACv1E,SAAS,GAAA,IAAA,GAAKu1E,QAAQ,CAACxuE,QAAQ,GAAA,GAAA,GAAIwuE,QAAQ,CAACv1E,SAAS,GAAA,aAAA,GAAcu1E,QAAQ,CAACz0E,OAC9N,CAAC;EACH,QAAA;EACA,QAAA,IAAI,CAACvR,GAAG,CAAA,kCAAA,GAC6Bia,UAAU,iBAAYk9C,OAAO,GAAI1mD,SAAU,GAAA,IAAA,GAAK0mD,OAAO,GAAA,GAAA,GAAI1mD,SAAS,GAAA,aAAA,GAAcc,OACvH,CAAC;UACD,IAAI,CAACy0E,QAAQ,GAAG;EACdxuE,UAAAA,QAAQ,EAAE2/C,OAAiB;EAC3B1mD,UAAAA,SAAS,EAAEA,SAAmB;EAC9Bc,UAAAA,OAAO,EAAEA;WACV;UACD,IAAI,CAAC00E,QAAQ,GAAG;EACdzuE,UAAAA,QAAQ,EAAEoxE,OAAiB;EAC3Bn4E,UAAAA,SAAS,EAAEA,SAAmB;EAC9Bc,UAAAA,OAAO,EAAEA;WACV;EACH,MAAA,CAAC,MAAM;UACL4lD,OAAO,GAAG1mD,SAAS,GAAGpM,SAAS;EACjC,MAAA;QAEA,OAAO;EACL2S,QAAAA,MAAM,EAANA,MAAM;EACNmgD,QAAAA,OAAO,EAAPA,OAAO;EACP1mD,QAAAA,SAAS,EAATA,SAAS;EACTc,QAAAA,OAAO,EAAPA;SACD;EACH,IAAA;IACF,CAAC;EAAAtR,EAAAA,MAAA,CAEDmoF,UAAU,GAAV,SAAAA,UAAUA,CACRl2E,KAAwB,EACxB+H,UAAkB,EAClBy2C,UAAmB,EACnBy3B,gBAAwB,EACE;EAC1B,IAAA,IAAMxqE,SAAiB,GAAGzL,KAAK,CAACm4D,cAAc;EAC9C,IAAA,IAAM4e,YAAgC,GAAG/2E,KAAK,CAACkI,OAAO;MACtD,IAAM8uE,aAA+B,GAAG,EAAE;EAC1C,IAAA,IAAMhY,SAAS,GAAG+X,YAAY,CAAC9jF,MAAM;EACrC,IAAA,IAAMgyD,OAAO,GAAG,IAAI,CAAC6uB,QAA6B;MAClD,IAAMmD,QAAQ,GAAIhyB,OAAO,CAAC3/C,QAAQ,GAAGmG,SAAS,GAAIw5C,OAAO,CAAC1mD,SAAS;EACnE,IAAA,IAAIy1E,WAAW,GAAG,IAAI,CAACA,WAAW;MAClC,IAAI32E,MAAM,GAAG,CAAC;EACd,IAAA,IAAI65E,iBAAiB,GAAG,IAAI,CAAChD,mBAAmB;EAChD,IAAA,IAAIiD,QAAQ;EACZ,IAAA,IAAIC,OAAO;EACX,IAAA,IAAIzC,MAAc,GAAGvoF,MAAM,CAACi5B,iBAAiB;EAC7C,IAAA,IAAIgyD,MAAc,GAAGjrF,MAAM,CAACkrF,iBAAiB;MAC7C,IAAIC,WAAW,GAAG,KAAK;;EAEvB;EACA,IAAA,IAAI,CAAC/4B,UAAU,IAAIw1B,WAAW,KAAK,IAAI,EAAE;EACvC,MAAA,IAAMjqE,GAAG,GAAGktE,QAAQ,GAAGlvE,UAAU,GAAG0D,SAAS;QAC7C,IAAMumE,GAAG,GACP+E,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,GACnB6qE,YAAY,CAACmC,YAAY,CAAC,CAAC,CAAC,CAAC1d,GAAG,EAAE0d,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,CAAC;QACxD,IACE6vD,aAAa,IACboa,WAAW,KAAK,IAAI,IACpBhoF,IAAI,CAACQ,GAAG,CAACud,GAAG,GAAGioE,GAAG,IAAIgC,WAAW,GAAGiD,QAAQ,CAAC,CAAC,GAAG,KAAK,EACtD;EACA;EACAz4B,QAAAA,UAAU,GAAG,IAAI;EACnB,MAAA,CAAC,MAAM;EACL;EACAw1B,QAAAA,WAAW,GAAGjqE,GAAG,GAAGioE,GAAG,GAAGiF,QAAQ;EACpC,MAAA;EACF,IAAA;;EAEA;EACA;EACA,IAAA,IAAMO,YAAY,GAAGxD,WAAW,GAAGiD,QAAQ;MAC3C,KAAK,IAAI9iF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6qE,SAAS,EAAE7qE,CAAC,EAAE,EAAE;EAClC,MAAA,IAAMlG,MAAM,GAAG8oF,YAAY,CAAC5iF,CAAC,CAAC;QAC9BlG,MAAM,CAAC8b,GAAG,GAAG6qE,YAAY,CAAC3mF,MAAM,CAAC8b,GAAG,EAAEytE,YAAY,CAAC;QACnDvpF,MAAM,CAACorE,GAAG,GAAGub,YAAY,CAAC3mF,MAAM,CAACorE,GAAG,EAAEme,YAAY,CAAC;EACnD,MAAA,IAAIvpF,MAAM,CAACorE,GAAG,GAAG0d,YAAY,CAAC5iF,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,CAAC,CAACklE,GAAG,EAAE;EACpDke,QAAAA,WAAW,GAAG,IAAI;EACpB,MAAA;EACF,IAAA;;EAEA;EACA,IAAA,IAAIA,WAAW,EAAE;EACfR,MAAAA,YAAY,CAAC5uC,IAAI,CAAC,UAAUC,CAAC,EAAEhkC,CAAC,EAAE;UAChC,IAAMqzE,QAAQ,GAAGrvC,CAAC,CAACixB,GAAG,GAAGj1D,CAAC,CAACi1D,GAAG;UAC9B,IAAMqe,QAAQ,GAAGtvC,CAAC,CAACr+B,GAAG,GAAG3F,CAAC,CAAC2F,GAAG;UAC9B,OAAO0tE,QAAQ,IAAIC,QAAQ;EAC7B,MAAA,CAAC,CAAC;EACJ,IAAA;;EAEA;EACAP,IAAAA,QAAQ,GAAGJ,YAAY,CAAC,CAAC,CAAC,CAAC1d,GAAG;MAC9B+d,OAAO,GAAGL,YAAY,CAACA,YAAY,CAAC9jF,MAAM,GAAG,CAAC,CAAC,CAAComE,GAAG;;EAEnD;EACA;EACA,IAAA,IAAMse,aAAa,GAAGP,OAAO,GAAGD,QAAQ;MACxC,IAAMS,qBAAqB,GAAGD,aAAa,GACvC3rF,IAAI,CAAC24B,KAAK,CAACgzD,aAAa,IAAI3Y,SAAS,GAAG,CAAC,CAAC,CAAC,GAC3CkY,iBAAiB,IAAIl3E,KAAK,CAACm4D,cAAc,GAAG,EAAE;;EAElD;EACA,IAAA,IAAI3Z,UAAU,EAAE;EACd;EACA,MAAA,IAAMwC,KAAK,GAAGm2B,QAAQ,GAAGK,YAAY;EACrC,MAAA,IAAMK,SAAS,GAAG72B,KAAK,GAAG42B,qBAAqB;EAC/C,MAAA,IAAME,YAAY,GAAG92B,KAAK,GAAG,EAAE;QAC/B,IAAI62B,SAAS,IAAIC,YAAY,EAAE;EAC7B,QAAA,IAAID,SAAS,EAAE;EACb,UAAA,IAAI,CAACnnF,IAAI,CACJ,CAACsP,KAAK,CAACm7D,YAAY,IAAI,EAAE,EAAEj5D,WAAW,EAAE,GAAA,IAAA,GAAKgxE,mBAAmB,CACjElyB,KAAK,EACL,IACF,CAAC,GAAA,OAAA,GAAQA,KAAK,GAAA,0CAAA,GAA2Cj5C,UAAU,CAACge,OAAO,CACzE,CACF,CACF,CAAC;EACH,QAAA,CAAC,MAAM;EACL,UAAA,IAAI,CAACr1B,IAAI,CACJ,CAACsP,KAAK,CAACm7D,YAAY,IAAI,EAAE,EAAEj5D,WAAW,EAAE,GAAA,IAAA,GAAKgxE,mBAAmB,CACjE,CAAClyB,KAAK,EACN,IACF,CAAC,GAAA,OAAA,GAAQA,KAAK,GAAA,iDAAA,GAAkDj5C,UAAU,CAACge,OAAO,CAChF,CACF,CACF,CAAC;EACH,QAAA;EACA,QAAA,IACE,CAAC+xD,YAAY,IACbN,YAAY,IAAIT,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,IACnC6vD,aAAa,EACb;EACAud,UAAAA,QAAQ,GAAGK,YAAY;YACvB,IAAMO,QAAQ,GAAGhB,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,GAAGi3C,KAAK;EAC5C,UAAA,IAAI62B,SAAS,EAAE;EACbd,YAAAA,YAAY,CAAC,CAAC,CAAC,CAAC1d,GAAG,GAAG8d,QAAQ;EAC9BJ,YAAAA,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,GAAGguE,QAAQ;EAChC,UAAA,CAAC,MAAM;cACL,IAAIC,kBAAkB,GAAG,IAAI;EAC7B,YAAA,KAAK,IAAI7jF,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG4iF,YAAY,CAAC9jF,MAAM,EAAEkB,EAAC,EAAE,EAAE;gBAC5C,IAAI4iF,YAAY,CAAC5iF,EAAC,CAAC,CAACklE,GAAG,GAAG0e,QAAQ,IAAIC,kBAAkB,EAAE;EACxD,gBAAA;EACF,cAAA;EAEA,cAAA,IAAMC,OAAO,GAAGlB,YAAY,CAAC5iF,EAAC,CAAC,CAAC4V,GAAG;EACnCgtE,cAAAA,YAAY,CAAC5iF,EAAC,CAAC,CAACklE,GAAG,IAAIrY,KAAK;EAC5B+1B,cAAAA,YAAY,CAAC5iF,EAAC,CAAC,CAAC4V,GAAG,IAAIi3C,KAAK;;EAE5B;EACA;EACA,cAAA,IAAI7sD,EAAC,GAAG4iF,YAAY,CAAC9jF,MAAM,GAAG,CAAC,EAAE;kBAC/B,IAAMilF,aAAa,GAAGnB,YAAY,CAAC5iF,EAAC,GAAG,CAAC,CAAC,CAAC4V,GAAG;EAC7C,gBAAA,IAAMouE,gBAAgB,GAAGpB,YAAY,CAAC5iF,EAAC,CAAC,CAAC4V,GAAG;EAE5C,gBAAA,IAAMquE,YAAY,GAAGF,aAAa,IAAIC,gBAAgB;EACtD,gBAAA,IAAME,SAAS,GAAGH,aAAa,IAAID,OAAO;kBAE1CD,kBAAkB,GAAGI,YAAY,IAAIC,SAAS;EAChD,cAAA;EACF,YAAA;EACF,UAAA;YACA,IAAI,CAACvqF,GAAG,CAAA,mCAAA,GAC8BolF,mBAAmB,CACrD6E,QAAQ,EACR,IACF,CAAC,GAAA,GAAA,GAAI7E,mBAAmB,CACtBiE,QAAQ,EACR,IACF,CAAC,GAAA,WAAA,GAAYjE,mBAAmB,CAAClyB,KAAK,EAAE,IAAI,CAAC,GAAA,KAC/C,CAAC;EACH,QAAA;EACF,MAAA;EACF,IAAA;MAEAm2B,QAAQ,GAAGnrF,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE6nF,QAAQ,CAAC;MAEhC,IAAImB,MAAM,GAAG,CAAC;MACd,IAAIC,OAAO,GAAG,CAAC;MACf,IAAIC,OAAO,GAAGrB,QAAQ;MACtB,KAAK,IAAIhjF,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG6qE,SAAS,EAAE7qE,GAAC,EAAE,EAAE;EAClC;EACA,MAAA,IAAMlG,OAAM,GAAG8oF,YAAY,CAAC5iF,GAAC,CAAC;EAC9B,MAAA,IAAMqqE,KAAK,GAAGvwE,OAAM,CAACuwE,KAAK;EAC1B,MAAA,IAAMia,OAAO,GAAGja,KAAK,CAACvrE,MAAM;QAC5B,IAAIylF,SAAS,GAAG,CAAC;QACjB,KAAK,IAAI5yE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2yE,OAAO,EAAE3yE,CAAC,EAAE,EAAE;UAChC4yE,SAAS,IAAIla,KAAK,CAAC14D,CAAC,CAAC,CAAChN,IAAI,CAAC7F,MAAM;EACnC,MAAA;EAEAslF,MAAAA,OAAO,IAAIG,SAAS;EACpBJ,MAAAA,MAAM,IAAIG,OAAO;QACjBxqF,OAAM,CAACgF,MAAM,GAAGylF,SAAS;;EAEzB;EACA,MAAA,IAAIzqF,OAAM,CAACorE,GAAG,GAAGmf,OAAO,EAAE;UACxBvqF,OAAM,CAACorE,GAAG,GAAGmf,OAAO;EACpBA,QAAAA,OAAO,IAAKZ,qBAAqB,GAAG,CAAC,GAAI,CAAC,IAAI,CAAC;EACjD,MAAA,CAAC,MAAM;UACLY,OAAO,GAAGvqF,OAAM,CAACorE,GAAG;EACtB,MAAA;QAEAsb,MAAM,GAAG3oF,IAAI,CAAC+D,GAAG,CAAC9B,OAAM,CAAC8b,GAAG,EAAE4qE,MAAM,CAAC;QACrC0C,MAAM,GAAGrrF,IAAI,CAACsD,GAAG,CAACrB,OAAM,CAAC8b,GAAG,EAAEstE,MAAM,CAAC;EACvC,IAAA;MACAD,OAAO,GAAGL,YAAY,CAAC/X,SAAS,GAAG,CAAC,CAAC,CAAC3F,GAAG;;EAEzC;EACJ;MACI,IAAMsf,QAAQ,GAAGJ,OAAO,GAAG,CAAC,GAAGD,MAAM,GAAG,CAAC;EACzC,IAAA,IAAItJ,IAAI;MACR,IAAI;EACFA,MAAAA,IAAI,GAAG,IAAIt6E,UAAU,CAACikF,QAAQ,CAAC;MACjC,CAAC,CAAC,OAAOl2C,GAAG,EAAE;EACZ,MAAA,IAAI,CAACoxB,QAAQ,CAACK,IAAI,CAACtnE,MAAM,CAACk7B,KAAK,EAAEl7B,MAAM,CAACk7B,KAAK,EAAE;UAC7C32B,IAAI,EAAEzE,UAAU,CAACksF,SAAS;UAC1Bl/D,OAAO,EAAE/sB,YAAY,CAACunC,iBAAiB;EACvC7L,QAAAA,KAAK,EAAE,KAAK;EACZp9B,QAAAA,KAAK,EAAEw3C,GAAG;EACVh/B,QAAAA,KAAK,EAAEk1E,QAAQ;EACfx5D,QAAAA,MAAM,EAAA,6BAAA,GAAgCw5D;EACxC,OAAC,CAAC;EACF,MAAA;EACF,IAAA;MACA,IAAM1rE,IAAI,GAAG,IAAIL,QAAQ,CAACoiE,IAAI,CAACn6E,MAAM,CAAC;EACtCoY,IAAAA,IAAI,CAACJ,SAAS,CAAC,CAAC,EAAE8rE,QAAQ,CAAC;MAC3B3J,IAAI,CAACj4E,GAAG,CAACw3E,GAAG,CAACC,KAAK,CAACQ,IAAI,EAAE,CAAC,CAAC;MAE3B,IAAI6J,kBAAkB,GAAG,KAAK;EAC9B,IAAA,IAAIC,WAAW,GAAG1sF,MAAM,CAACi5B,iBAAiB;EAC1C,IAAA,IAAI0zD,WAAW,GAAG3sF,MAAM,CAACi5B,iBAAiB;EAC1C,IAAA,IAAI2zD,WAAW,GAAG5sF,MAAM,CAACkrF,iBAAiB;EAC1C,IAAA,IAAI2B,WAAW,GAAG7sF,MAAM,CAACkrF,iBAAiB;MAC1C,KAAK,IAAInjF,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG6qE,SAAS,EAAE7qE,GAAC,EAAE,EAAE;EAClC,MAAA,IAAMuqE,WAAW,GAAGqY,YAAY,CAAC5iF,GAAC,CAAC;EACnC,MAAA,IAAM+kF,gBAAgB,GAAGxa,WAAW,CAACF,KAAK;QAC1C,IAAI2a,eAAe,GAAG,CAAC;EACvB;EACA,MAAA,KAAK,IAAIrzE,EAAC,GAAG,CAAC,EAAE2yE,QAAO,GAAGS,gBAAgB,CAACjmF,MAAM,EAAE6S,EAAC,GAAG2yE,QAAO,EAAE3yE,EAAC,EAAE,EAAE;EACnE,QAAA,IAAM2vD,IAAI,GAAGyjB,gBAAgB,CAACpzE,EAAC,CAAC;EAChC,QAAA,IAAMszE,QAAQ,GAAG3jB,IAAI,CAAC38D,IAAI;EAC1B,QAAA,IAAMugF,WAAW,GAAG5jB,IAAI,CAAC38D,IAAI,CAAC2B,UAAU;EACxCwS,QAAAA,IAAI,CAACJ,SAAS,CAACxP,MAAM,EAAEg8E,WAAW,CAAC;EACnCh8E,QAAAA,MAAM,IAAI,CAAC;EACX2xE,QAAAA,IAAI,CAACj4E,GAAG,CAACqiF,QAAQ,EAAE/7E,MAAM,CAAC;EAC1BA,QAAAA,MAAM,IAAIg8E,WAAW;UACrBF,eAAe,IAAI,CAAC,GAAGE,WAAW;EACpC,MAAA;;EAEA;EACA,MAAA,IAAIC,QAAQ,GAAA,MAAA;EACZ,MAAA,IAAInlF,GAAC,GAAG6qE,SAAS,GAAG,CAAC,EAAE;EACrBkY,QAAAA,iBAAiB,GAAGH,YAAY,CAAC5iF,GAAC,GAAG,CAAC,CAAC,CAACklE,GAAG,GAAGqF,WAAW,CAACrF,GAAG;EAC7DigB,QAAAA,QAAQ,GAAGvC,YAAY,CAAC5iF,GAAC,GAAG,CAAC,CAAC,CAAC4V,GAAG,GAAG20D,WAAW,CAAC30D,GAAG;EACtD,MAAA,CAAC,MAAM;EACL,QAAA,IAAMiP,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,QAAA,IAAMugE,iBAAiB,GACrBplF,GAAC,GAAG,CAAC,GACDuqE,WAAW,CAACrF,GAAG,GAAG0d,YAAY,CAAC5iF,GAAC,GAAG,CAAC,CAAC,CAACklE,GAAG,GACzCue,qBAAqB;EAC3B0B,QAAAA,QAAQ,GACNnlF,GAAC,GAAG,CAAC,GACDuqE,WAAW,CAAC30D,GAAG,GAAGgtE,YAAY,CAAC5iF,GAAC,GAAG,CAAC,CAAC,CAAC4V,GAAG,GACzC6tE,qBAAqB;UAC3B,IAAI5+D,MAAM,CAACwgE,sBAAsB,IAAI,IAAI,CAACvF,WAAW,KAAK,IAAI,EAAE;EAC9D;EACA;EACA;EACA;EACA;YACA,IAAMwF,YAAY,GAAGztF,IAAI,CAACE,KAAK,CAAC8sB,MAAM,CAACusC,aAAa,GAAG95C,SAAS,CAAC;EACjE,UAAA,IAAMiuE,eAAe,GACnB,CAACzD,gBAAgB,GACbtB,MAAM,GAAGsB,gBAAgB,GAAGxqE,SAAS,GACrC,IAAI,CAACwoE,WAAW,GAAGgD,QAAQ,IAAIvY,WAAW,CAAC30D,GAAG;YACpD,IAAI2vE,eAAe,GAAGD,YAAY,EAAE;EAClC;EACA;cACAvC,iBAAiB,GAAGwC,eAAe,GAAGH,iBAAiB;cACvD,IAAIrC,iBAAiB,GAAG,CAAC,EAAE;EACzBA,cAAAA,iBAAiB,GAAGqC,iBAAiB;EACvC,YAAA,CAAC,MAAM;EACLV,cAAAA,kBAAkB,GAAG,IAAI;EAC3B,YAAA;cACA,IAAI,CAAC/qF,GAAG,CAAA,sBAAA,GAEJ4rF,eAAe,GAAG,EAAE,GAAA,0CAAA,GAEpBxC,iBAAiB,GAAG,EAAE,GAAA,+BAE1B,CAAC;EACH,UAAA,CAAC,MAAM;EACLA,YAAAA,iBAAiB,GAAGqC,iBAAiB;EACvC,UAAA;EACF,QAAA,CAAC,MAAM;EACLrC,UAAAA,iBAAiB,GAAGqC,iBAAiB;EACvC,QAAA;EACF,MAAA;EACA,MAAA,IAAMI,qBAAqB,GAAG3tF,IAAI,CAAC24B,KAAK,CACtC+5C,WAAW,CAAC30D,GAAG,GAAG20D,WAAW,CAACrF,GAChC,CAAC;QACDyf,WAAW,GAAG9sF,IAAI,CAAC+D,GAAG,CAAC+oF,WAAW,EAAE5B,iBAAiB,CAAC;QACtD8B,WAAW,GAAGhtF,IAAI,CAACsD,GAAG,CAAC0pF,WAAW,EAAE9B,iBAAiB,CAAC;QACtD6B,WAAW,GAAG/sF,IAAI,CAAC+D,GAAG,CAACgpF,WAAW,EAAEO,QAAQ,CAAC;QAC7CL,WAAW,GAAGjtF,IAAI,CAACsD,GAAG,CAAC2pF,WAAW,EAAEK,QAAQ,CAAC;EAE7CtC,MAAAA,aAAa,CAACl6E,IAAI,CAChB42E,eAAe,CACbhV,WAAW,CAACvuE,GAAG,EACf+mF,iBAAiB,EACjBiC,eAAe,EACfQ,qBACF,CACF,CAAC;EACH,IAAA;MAEA,IAAI3C,aAAa,CAAC/jF,MAAM,EAAE;EACxB,MAAA,IAAI2mE,aAAa,EAAE;UACjB,IAAIA,aAAa,GAAG,EAAE,EAAE;EACtB;EACA;EACA,UAAA,IAAM15D,KAAK,GAAG82E,aAAa,CAAC,CAAC,CAAC,CAAC92E,KAAK;YACpCA,KAAK,CAACmxE,SAAS,GAAG,CAAC;YACnBnxE,KAAK,CAACiyE,SAAS,GAAG,CAAC;EACrB,QAAA;QACF,CAAC,MAAM,IAAIsB,mBAAmB,EAAE;EAC9B;EACA;UACA,IACEwF,WAAW,GAAGF,WAAW,GAAGC,WAAW,GAAGF,WAAW,IACrDlB,qBAAqB,GAAGoB,WAAW,GAAG,KAAK,IAC3ChC,aAAa,CAAC,CAAC,CAAC,CAAChF,GAAG,KAAK,CAAC,EAC1B;EACA,UAAA,IAAI,CAACthF,IAAI,CACP,qGACF,CAAC;YACD,IAAI2oE,GAAG,GAAG8d,QAAQ;EAClB,UAAA,KAAK,IAAIhjF,GAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGijF,aAAa,CAAC/jF,MAAM,EAAEkB,GAAC,GAAGJ,GAAG,EAAEI,GAAC,EAAE,EAAE;cACxD,IAAMylF,OAAO,GAAGvgB,GAAG,GAAG2d,aAAa,CAAC7iF,GAAC,CAAC,CAAC6D,QAAQ;cAC/C,IAAM+R,IAAG,GAAGsvD,GAAG,GAAG2d,aAAa,CAAC7iF,GAAC,CAAC,CAAC69E,GAAG;EACtC,YAAA,IAAI79E,GAAC,GAAGJ,GAAG,GAAG,CAAC,EAAE;gBACf,IAAM8lF,OAAO,GAAGD,OAAO,GAAG5C,aAAa,CAAC7iF,GAAC,GAAG,CAAC,CAAC,CAAC69E,GAAG;gBAClDgF,aAAa,CAAC7iF,GAAC,CAAC,CAAC6D,QAAQ,GAAG6hF,OAAO,GAAG9vE,IAAG;EAC3C,YAAA,CAAC,MAAM;EACLitE,cAAAA,aAAa,CAAC7iF,GAAC,CAAC,CAAC6D,QAAQ,GAAG7D,GAAC,GACzB6iF,aAAa,CAAC7iF,GAAC,GAAG,CAAC,CAAC,CAAC6D,QAAQ,GAC7B4/E,qBAAqB;EAC3B,YAAA;EACAZ,YAAAA,aAAa,CAAC7iF,GAAC,CAAC,CAAC69E,GAAG,GAAG,CAAC;EACxB3Y,YAAAA,GAAG,GAAGugB,OAAO;EACf,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA;MACA1C,iBAAiB,GACf2B,kBAAkB,IAAI,CAAC3B,iBAAiB,GACpCU,qBAAqB,GACrBV,iBAAiB;EACvB,IAAA,IAAMz+E,MAAM,GAAG2+E,OAAO,GAAGF,iBAAiB;EAC1C,IAAA,IAAI,CAAClD,WAAW,GAAGA,WAAW,GAAGv7E,MAAM,GAAGw+E,QAAQ;MAClD,IAAI,CAAC/C,mBAAmB,GAAGgD,iBAAiB;MAC5C,IAAI,CAAC9C,iBAAiB,GAAG,IAAI;EAC7B,IAAA,IAAM/rE,IAAI,GAAGkmE,GAAG,CAAClmE,IAAI,CACnBrI,KAAK,CAACq4D,cAAc,EAAE,EACtB8e,QAAQ,EACRlmF,QAAA,CAAc+O,KAAK,EAAE;EACnBkI,MAAAA,OAAO,EAAE8uE;EACX,KAAC,CACH,CAAC;MACD,IAAM7lF,IAAsB,GAAG,OAAO;EACtC,IAAA,IAAM2H,IAAI,GAAG;EACX6O,MAAAA,KAAK,EAAEU,IAAI;EACXT,MAAAA,KAAK,EAAEonE,IAAI;EACX12E,MAAAA,QAAQ,EAAE,CAACq8E,MAAM,GAAGsC,QAAQ,IAAIxrE,SAAS;QACzClT,MAAM,EAAE,CAAC8+E,MAAM,GAAGH,iBAAiB,GAAGD,QAAQ,IAAIxrE,SAAS;EAC3DjT,MAAAA,QAAQ,EAAE,CAAC2+E,QAAQ,GAAGF,QAAQ,IAAIxrE,SAAS;QAC3ChT,MAAM,EAAEu7E,WAAW,GAAGvoE,SAAS;EAC/Bta,MAAAA,IAAI,EAAJA,IAAI;EACJ8jF,MAAAA,QAAQ,EAAE,KAAK;EACfh9D,MAAAA,QAAQ,EAAE,IAAI;QACd6hE,EAAE,EAAE9C,aAAa,CAAC/jF,MAAM;QACxB65D,OAAO,EAAE9sD,KAAK,CAAC8sD;OAChB;MACD9sD,KAAK,CAACkI,OAAO,GAAG,EAAE;MAClBlI,KAAK,CAAC8sD,OAAO,GAAG,CAAC;EACjB,IAAA,OAAOh0D,IAAI;IACb,CAAC;EAAA/K,EAAAA,MAAA,CAEDgsF,kBAAkB,GAAlB,SAAAA,kBAAkBA,CAAC/5E,KAAwB,EAAE;MAC3C,QAAQA,KAAK,CAACm7D,YAAY;EACxB,MAAA,KAAK,KAAK;EACR,QAAA,OAAOoY,2BAA2B;EACpC,MAAA,KAAK,KAAK;EACR,QAAA,OAAOC,qBAAqB;EAC9B,MAAA;EACE,QAAA,OAAOF,qBAAqB;EAChC;IACF,CAAC;EAAAvlF,EAAAA,MAAA,CAEDioF,UAAU,GAAV,SAAAA,UAAUA,CACRh2E,KAAwB,EACxB+H,UAAkB,EAClBy2C,UAAmB,EACnBs2B,kBAA2B,EAC3BE,eAAwB,EACE;EAC1B,IAAA,IAAM7c,cAAsB,GAAGn4D,KAAK,CAACm4D,cAAc;MACnD,IAAM6hB,YAAoB,GAAGh6E,KAAK,CAACq0D,UAAU,GACzCr0D,KAAK,CAACq0D,UAAU,GAChB8D,cAAc;EAClB,IAAA,IAAM8hB,WAAmB,GAAG9hB,cAAc,GAAG6hB,YAAY;EACzD,IAAA,IAAM9C,iBAAyB,GAAG,IAAI,CAAC6C,kBAAkB,CAAC/5E,KAAK,CAAC;EAChE,IAAA,IAAMk6E,mBAA2B,GAAGhD,iBAAiB,GAAG+C,WAAW;EACnE,IAAA,IAAMh1B,OAAO,GAAG,IAAI,CAAC6uB,QAA6B;EAClD,IAAA,IAAMqG,OAAgB,GACpBn6E,KAAK,CAACm7D,YAAY,KAAK,KAAK,IAAI,IAAI,CAACmP,aAAa,CAACp2D,IAAI;MACzD,IAAM8iE,aAA+B,GAAG,EAAE;EAC1C,IAAA,IAAMoD,gBAAgB,GAAGpF,eAAe,KAAK7iF,SAAS;EAEtD,IAAA,IAAI4kF,YAAgC,GAAG/2E,KAAK,CAACkI,OAAO;EACpD,IAAA,IAAI7K,MAAc,GAAG88E,OAAO,GAAG,CAAC,GAAG,CAAC;EACpC,IAAA,IAAIlG,WAAmB,GAAG,IAAI,CAACA,WAAW,IAAI,EAAE;;EAEhD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;MACA,IAAMgD,QAAQ,GAAIhyB,OAAO,CAAC3/C,QAAQ,GAAG6yD,cAAc,GAAIlT,OAAO,CAAC1mD,SAAS;EACxE,IAAA,IAAM87E,gBAAgB,GAAGpD,QAAQ,GAAGlvE,UAAU,GAAGowD,cAAc;MAC/D,IAAI,CAACgc,iBAAiB,GAAG31B,UAAU,GACjCA,UAAU,IACRu4B,YAAY,CAAC9jF,MAAM,IACnBghF,WAAW,GAAG,CAAC,KACba,kBAAkB,IAClB9oF,IAAI,CAACQ,GAAG,CAAC6tF,gBAAgB,IAAIpG,WAAW,GAAGgD,QAAQ,CAAC,CAAC,GAAG,IAAI,IAC5DjrF,IAAI,CAACQ,GAAG,CACNooF,YAAY,CAACmC,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,EAAEswE,gBAAgB,CAAC,IAChDpG,WAAW,GAAGgD,QAAQ,CAC3B,CAAC,GACC,EAAE,GAAGiD,mBAAmB,CAAc;;EAE9C;EACAnD,IAAAA,YAAY,CAAChlF,OAAO,CAAC,UAAU9D,MAAM,EAAE;QACrCA,MAAM,CAAC8b,GAAG,GAAG6qE,YAAY,CAAC3mF,MAAM,CAAC8b,GAAG,EAAEswE,gBAAgB,CAAC;EACzD,IAAA,CAAC,CAAC;EAEF,IAAA,IAAI,CAAC77B,UAAU,IAAIy1B,WAAW,GAAG,CAAC,EAAE;EAClC,MAAA,IAAM9uE,WAAW,GAAG4xE,YAAY,CAAC9jF,MAAM;EACvC;EACA;EACA;EACA8jF,MAAAA,YAAY,GAAGA,YAAY,CAAC37D,MAAM,CAAC,UAACntB,MAAM,EAAA;EAAA,QAAA,OAAKA,MAAM,CAAC8b,GAAG,IAAI,CAAC;QAAA,CAAA,CAAC;EAE/D,MAAA,IAAI5E,WAAW,KAAK4xE,YAAY,CAAC9jF,MAAM,EAAE;EACvC,QAAA,IAAI,CAACvC,IAAI,CAAA,UAAA,IACIqmF,YAAY,CAAC9jF,MAAM,GAAGkS,WAAW,CAAA,GAAA,MAAA,GAAOA,WAAW,GAAA,oBAAA,GAAqB8xE,QAAQ,GAAA,KAAA,GAAM9e,cAAc,MACjH,CAAC;EACH,MAAA;;EAEA;EACA,MAAA,IAAI,CAAC4e,YAAY,CAAC9jF,MAAM,EAAE;EACxB,QAAA;EACF,MAAA;QAEA,IAAI+hF,eAAe,KAAK,CAAC,EAAE;EACzB;EACAf,QAAAA,WAAW,GAAG,CAAC;EACjB,MAAA,CAAC,MAAM,IAAIa,kBAAkB,IAAI,CAACsF,gBAAgB,EAAE;EAClD;UACAnG,WAAW,GAAGjoF,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE+qF,gBAAgB,GAAGpD,QAAQ,CAAC;EACxD,MAAA,CAAC,MAAM;EACL;UACAhD,WAAW,GAAG8C,YAAY,CAAC,CAAC,CAAC,CAAChtE,GAAG,GAAGktE,QAAQ;EAC9C,MAAA;EACF,IAAA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,IAAA,IAAIj3E,KAAK,CAACm7D,YAAY,KAAK,KAAK,EAAE;EAChC,MAAA,IAAMmf,mBAAmB,GAAG,IAAI,CAACthE,MAAM,CAACshE,mBAAmB;EAC3D,MAAA,KACE,IAAInmF,CAAC,GAAG,CAAC,EAAE0lF,OAAO,GAAG5F,WAAW,GAAGgD,QAAQ,EAC3C9iF,CAAC,GAAG4iF,YAAY,CAAC9jF,MAAM,EACvBkB,CAAC,EAAE,EACH;EACA;EACA,QAAA,IAAMlG,MAAM,GAAG8oF,YAAY,CAAC5iF,CAAC,CAAC;EAC9B,QAAA,IAAM4V,GAAG,GAAG9b,MAAM,CAAC8b,GAAG;EACtB,QAAA,IAAMi3C,KAAK,GAAGj3C,GAAG,GAAG8vE,OAAO;UAC3B,IAAM7hF,QAAQ,GAAGhM,IAAI,CAACQ,GAAG,CAAE,IAAI,GAAGw0D,KAAK,GAAImX,cAAc,CAAC;;EAE1D;UACA,IACEnX,KAAK,IAAI,CAACs5B,mBAAmB,GAAGJ,mBAAmB,IACnDE,gBAAgB,EAChB;YACA,IAAIjmF,CAAC,KAAK,CAAC,EAAE;cACX,IAAI,CAACzD,IAAI,CAAA,gBAAA,GACU,CAACqZ,GAAG,GAAGouD,cAAc,EAAEpyC,OAAO,CAC7C,CACF,CAAC,6BAAwB/5B,IAAI,CAAC24B,KAAK,CAChC,IAAI,GAAGq8B,KAAK,GAAImX,cACnB,CAAC,GAAA,MACH,CAAC;EACD,YAAA,IAAI,CAAC8b,WAAW,GAAGA,WAAW,GAAGlqE,GAAG,GAAGktE,QAAQ;EAC/C4C,YAAAA,OAAO,GAAG9vE,GAAG;EACf,UAAA;EACF,QAAA,CAAC;;EAED;EACA;EACA;EACA;EACA;EAAA,aACK,IACHi3C,KAAK,IAAIs5B,mBAAmB,GAAGJ,mBAAmB,IAClDliF,QAAQ,GAAGq7E,yBAAyB,IACpC+G,gBAAgB,EAChB;YACA,IAAI1kB,OAAO,GAAG1pE,IAAI,CAAC24B,KAAK,CAACq8B,KAAK,GAAGk5B,mBAAmB,CAAC;EACrD;EACA;EACAL,UAAAA,OAAO,GAAG9vE,GAAG,GAAG2rD,OAAO,GAAGwkB,mBAAmB;EAC7C,UAAA,OAAOL,OAAO,GAAG,CAAC,IAAInkB,OAAO,IAAIwkB,mBAAmB,EAAE;EACpDxkB,YAAAA,OAAO,EAAE;EACTmkB,YAAAA,OAAO,IAAIK,mBAAmB;EAChC,UAAA;YACA,IAAI/lF,CAAC,KAAK,CAAC,EAAE;EACX,YAAA,IAAI,CAAC8/E,WAAW,GAAGA,WAAW,GAAG4F,OAAO,GAAG5C,QAAQ;EACrD,UAAA;EACA,UAAA,IAAI,CAACvmF,IAAI,CAAA,YAAA,GACMglE,OAAO,GAAA,kBAAA,GAAmB,CACrC,CAACmkB,OAAO,GAAG5C,QAAQ,IACnB9e,cAAc,EACdpyC,OAAO,CAAC,CAAC,CAAC,GAAA,WAAA,GAAY/5B,IAAI,CAAC24B,KAAK,CAC/B,IAAI,GAAGq8B,KAAK,GAAImX,cACnB,CAAC,aACH,CAAC;YACD,KAAK,IAAIryD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4vD,OAAO,EAAE5vD,CAAC,EAAE,EAAE;cAChC,IAAIy0E,SAAS,GAAGlM,GAAG,CAACC,cAAc,CAChCtuE,KAAK,CAACsT,WAAW,IAAItT,KAAK,CAAC8zD,aAAa,IAAI9zD,KAAK,CAACM,KAAK,EACvDN,KAAK,CAACo0D,YACR,CAAC;cACD,IAAI,CAACmmB,SAAS,EAAE;EACd,cAAA,IAAI,CAACzsF,GAAG,CACN,mFACF,CAAC;EACDysF,cAAAA,SAAS,GAAGtsF,MAAM,CAACwnE,IAAI,CAACz3D,QAAQ,EAAE;EACpC,YAAA;EACA+4E,YAAAA,YAAY,CAACllC,MAAM,CAAC19C,CAAC,EAAE,CAAC,EAAE;EACxBshE,cAAAA,IAAI,EAAE8kB,SAAS;EACfxwE,cAAAA,GAAG,EAAE8vE;EACP,aAAC,CAAC;EACFA,YAAAA,OAAO,IAAIK,mBAAmB;EAC9B/lF,YAAAA,CAAC,EAAE;EACL,UAAA;EACF,QAAA;UACAlG,MAAM,CAAC8b,GAAG,GAAG8vE,OAAO;EACpBA,QAAAA,OAAO,IAAIK,mBAAmB;EAChC,MAAA;EACF,IAAA;MACA,IAAInC,QAAuB,GAAG,IAAI;MAClC,IAAIpf,OAAsB,GAAG,IAAI;EACjC,IAAA,IAAIqW,IAAS;MACb,IAAI2J,QAAgB,GAAG,CAAC;EACxB,IAAA,IAAI5L,YAAoB,GAAGgK,YAAY,CAAC9jF,MAAM;MAC9C,OAAO85E,YAAY,EAAE,EAAE;QACrB4L,QAAQ,IAAI5B,YAAY,CAAChK,YAAY,CAAC,CAACtX,IAAI,CAACh7D,UAAU;EACxD,IAAA;EACA,IAAA,KAAK,IAAIqL,GAAC,GAAG,CAAC,EAAEk5D,UAAS,GAAG+X,YAAY,CAAC9jF,MAAM,EAAE6S,GAAC,GAAGk5D,UAAS,EAAEl5D,GAAC,EAAE,EAAE;EACnE,MAAA,IAAM00E,WAAW,GAAGzD,YAAY,CAACjxE,GAAC,CAAC;EACnC,MAAA,IAAM2vD,IAAI,GAAG+kB,WAAW,CAAC/kB,IAAI;EAC7B,MAAA,IAAI1rD,KAAG,GAAGywE,WAAW,CAACzwE,GAAG;QACzB,IAAI4uD,OAAO,KAAK,IAAI,EAAE;EACpB;EACA;EACA,QAAA,IAAM8hB,UAAU,GAAGzD,aAAa,CAAClxE,GAAC,GAAG,CAAC,CAAC;EACvC20E,QAAAA,UAAU,CAACziF,QAAQ,GAAGhM,IAAI,CAAC24B,KAAK,CAAC,CAAC5a,KAAG,GAAG4uD,OAAO,IAAIshB,WAAW,CAAC;EACjE,MAAA,CAAC,MAAM;EACL,QAAA,IAAIz7B,UAAU,IAAIx+C,KAAK,CAACm7D,YAAY,KAAK,KAAK,EAAE;EAC9C;YACApxD,KAAG,GAAGkqE,WAAW,GAAGgD,QAAQ;EAC9B,QAAA;EACA;EACAc,QAAAA,QAAQ,GAAGhuE,KAAG;UACd,IAAI4uE,QAAQ,GAAG,CAAC,EAAE;EAChB;EACV;EACUA,UAAAA,QAAQ,IAAIt7E,MAAM;YAClB,IAAI;EACF2xE,YAAAA,IAAI,GAAG,IAAIt6E,UAAU,CAACikF,QAAQ,CAAC;YACjC,CAAC,CAAC,OAAOl2C,GAAG,EAAE;EACZ,YAAA,IAAI,CAACoxB,QAAQ,CAACK,IAAI,CAACtnE,MAAM,CAACk7B,KAAK,EAAEl7B,MAAM,CAACk7B,KAAK,EAAE;gBAC7C32B,IAAI,EAAEzE,UAAU,CAACksF,SAAS;gBAC1Bl/D,OAAO,EAAE/sB,YAAY,CAACunC,iBAAiB;EACvC7L,cAAAA,KAAK,EAAE,KAAK;EACZp9B,cAAAA,KAAK,EAAEw3C,GAAG;EACVh/B,cAAAA,KAAK,EAAEk1E,QAAQ;EACfx5D,cAAAA,MAAM,EAAA,6BAAA,GAAgCw5D;EACxC,aAAC,CAAC;EACF,YAAA;EACF,UAAA;YACA,IAAI,CAACwB,OAAO,EAAE;cACZ,IAAMltE,IAAI,GAAG,IAAIL,QAAQ,CAACoiE,IAAI,CAACn6E,MAAM,CAAC;EACtCoY,YAAAA,IAAI,CAACJ,SAAS,CAAC,CAAC,EAAE8rE,QAAQ,CAAC;cAC3B3J,IAAI,CAACj4E,GAAG,CAACw3E,GAAG,CAACC,KAAK,CAACQ,IAAI,EAAE,CAAC,CAAC;EAC7B,UAAA;EACF,QAAA,CAAC,MAAM;EACL;EACA,UAAA;EACF,QAAA;EACF,MAAA;EACAA,MAAAA,IAAI,CAACj4E,GAAG,CAAC0+D,IAAI,EAAEp4D,MAAM,CAAC;EACtB,MAAA,IAAMq9E,OAAO,GAAGjlB,IAAI,CAACh7D,UAAU;EAC/B4C,MAAAA,MAAM,IAAIq9E,OAAO;EACjB;EACA;EACA;EACA1D,MAAAA,aAAa,CAACl6E,IAAI,CAAC42E,eAAe,CAAC,IAAI,EAAEwD,iBAAiB,EAAEwD,OAAO,EAAE,CAAC,CAAC,CAAC;EACxE/hB,MAAAA,OAAO,GAAG5uD,KAAG;EACf,IAAA;;EAEA;EACA,IAAA,IAAMi1D,SAAS,GAAGgY,aAAa,CAAC/jF,MAAM;MACtC,IAAI,CAAC+rE,SAAS,EAAE;EACd,MAAA;EACF,IAAA;;EAEA;MACA,IAAMC,UAAU,GAAG+X,aAAa,CAACA,aAAa,CAAC/jF,MAAM,GAAG,CAAC,CAAC;MAC1DghF,WAAW,GAAItb,OAAO,GAAcse,QAAQ;MAC5C,IAAI,CAAChD,WAAW,GAAGA,WAAW,GAAGgG,WAAW,GAAGhb,UAAU,CAACjnE,QAAQ;;EAElE;EACA,IAAA,IAAMqQ,IAAI,GAAG8xE,OAAO,GAChB,IAAIzlF,UAAU,CAAC,CAAC,CAAC,GACjB65E,GAAG,CAAClmE,IAAI,CACNrI,KAAK,CAACq4D,cAAc,EAAE,EACtB0f,QAAQ,GAAIkC,WAAW,EACvBhpF,QAAA,CAAc,EAAE,EAAE+O,KAAK,EAAE;EAAEkI,MAAAA,OAAO,EAAE8uE;EAAc,KAAC,CACrD,CAAC;;EAEL;MACAh3E,KAAK,CAACkI,OAAO,GAAG,EAAE;EAClB,IAAA,IAAM5S,KAAK,GAAG,CAACyiF,QAAQ,GAAId,QAAQ,IAAI9e,cAAc;EACrD,IAAA,IAAM3iE,GAAG,GAAGy+E,WAAW,GAAG9b,cAAc;MACxC,IAAMhnE,IAAsB,GAAG,OAAO;EACtC,IAAA,IAAMu6E,SAAS,GAAG;EAChB/jE,MAAAA,KAAK,EAAEU,IAAI;EACXT,MAAAA,KAAK,EAAEonE,IAAI;EACX12E,MAAAA,QAAQ,EAAEhD,KAAK;EACfiD,MAAAA,MAAM,EAAE/C,GAAG;EACXgD,MAAAA,QAAQ,EAAElD,KAAK;EACfmD,MAAAA,MAAM,EAAEjD,GAAG;EACXrE,MAAAA,IAAI,EAAJA,IAAI;EACJ8jF,MAAAA,QAAQ,EAAE,IAAI;EACdh9D,MAAAA,QAAQ,EAAE,KAAK;EACf6hE,MAAAA,EAAE,EAAE9a;OACL;MAED,IAAI,CAACmV,iBAAiB,GAAG,IAAI;EAC7B,IAAA,OAAOzI,SAAS;IAClB,CAAC;EAAA,EAAA,OAAAkI,UAAA;EAAA,CAAA,CA5kCqCvjF,MAAM,CAAA;EA+kCvC,SAASukF,YAAYA,CAACtoF,KAAa,EAAEquF,SAAwB,EAAU;EAC5E,EAAA,IAAIt9E,MAAM;IACV,IAAIs9E,SAAS,KAAK,IAAI,EAAE;EACtB,IAAA,OAAOruF,KAAK;EACd,EAAA;IAEA,IAAIquF,SAAS,GAAGruF,KAAK,EAAE;EACrB;MACA+Q,MAAM,GAAG,WAAW;EACtB,EAAA,CAAC,MAAM;EACL;EACAA,IAAAA,MAAM,GAAG,UAAU;EACrB,EAAA;EACA;EACF;EACA;IACE,OAAOrR,IAAI,CAACQ,GAAG,CAACF,KAAK,GAAGquF,SAAS,CAAC,GAAG,UAAU,EAAE;EAC/CruF,IAAAA,KAAK,IAAI+Q,MAAM;EACjB,EAAA;EAEA,EAAA,OAAO/Q,KAAK;EACd;EAEA,SAASspF,iBAAiBA,CAAC1tE,OAA2B,EAAU;EAC9D,EAAA,KAAK,IAAI/T,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+T,OAAO,CAACjV,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACvC,IAAA,IAAI+T,OAAO,CAAC/T,CAAC,CAAC,CAAChE,GAAG,EAAE;EAClB,MAAA,OAAOgE,CAAC;EACV,IAAA;EACF,EAAA;EACA,EAAA,OAAO,EAAE;EACX;EAEO,SAASiiF,gCAAgCA,CAC9Cp2E,KAA2B,EAC3B+H,UAAkB,EAClBk9C,OAAwB,EACxByxB,OAAwB,EACK;EAC7B,EAAA,IAAMzjF,MAAM,GAAG+M,KAAK,CAACkI,OAAO,CAACjV,MAAM;IACnC,IAAI,CAACA,MAAM,EAAE;EACX,IAAA;EACF,EAAA;EACA,EAAA,IAAMklE,cAAc,GAAGn4D,KAAK,CAACm4D,cAAc;IAC3C,KAAK,IAAI18D,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGxI,MAAM,EAAEwI,KAAK,EAAE,EAAE;EAC3C,IAAA,IAAMxN,MAAM,GAAG+R,KAAK,CAACkI,OAAO,CAACzM,KAAK,CAAC;EACnC;EACA;MACAxN,MAAM,CAAC8b,GAAG,GACR6qE,YAAY,CACV3mF,MAAM,CAAC8b,GAAG,GAAIk7C,OAAO,CAAC3/C,QAAQ,GAAG6yD,cAAc,GAAIlT,OAAO,CAAC1mD,SAAS,EACpEwJ,UAAU,GAAGowD,cACf,CAAC,GAAGA,cAAc;MACpBlqE,MAAM,CAACorE,GAAG,GACRub,YAAY,CACV3mF,MAAM,CAACorE,GAAG,GAAIqd,OAAO,CAACpxE,QAAQ,GAAG6yD,cAAc,GAAIue,OAAO,CAACn4E,SAAS,EACpEwJ,UAAU,GAAGowD,cACf,CAAC,GAAGA,cAAc;EACtB,EAAA;EACA,EAAA,IAAMjwD,OAAO,GAAGlI,KAAK,CAACkI,OAAO;IAC7BlI,KAAK,CAACkI,OAAO,GAAG,EAAE;IAClB,OAAO;EACLA,IAAAA,OAAO,EAAPA;KACD;EACH;EAEO,SAASmuE,gCAAgCA,CAC9Cr2E,KAA2B,EAC3B+H,UAAkB,EAClBk9C,OAA0B,EACG;EAC7B,EAAA,IAAMhyD,MAAM,GAAG+M,KAAK,CAACkI,OAAO,CAACjV,MAAM;IACnC,IAAI,CAACA,MAAM,EAAE;EACX,IAAA;EACF,EAAA;EAEA,EAAA,IAAMklE,cAAc,GAAGn4D,KAAK,CAACm4D,cAAc;IAC3C,KAAK,IAAI18D,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGxI,MAAM,EAAEwI,KAAK,EAAE,EAAE;EAC3C,IAAA,IAAMxN,MAAM,GAAG+R,KAAK,CAACkI,OAAO,CAACzM,KAAK,CAAC;EACnC;EACA;MACAxN,MAAM,CAAC8b,GAAG,GACR6qE,YAAY,CACV3mF,MAAM,CAAC8b,GAAG,GAAIk7C,OAAO,CAAC3/C,QAAQ,GAAG6yD,cAAc,GAAIlT,OAAO,CAAC1mD,SAAS,EACpEwJ,UAAU,GAAGowD,cACf,CAAC,GAAGA,cAAc;EACtB,EAAA;IACAn4D,KAAK,CAACkI,OAAO,CAACigC,IAAI,CAAC,UAACC,CAAC,EAAEhkC,CAAC,EAAA;EAAA,IAAA,OAAKgkC,CAAC,CAACr+B,GAAG,GAAG3F,CAAC,CAAC2F,GAAG;IAAA,CAAA,CAAC;EAC3C,EAAA,IAAM7B,OAAO,GAAGlI,KAAK,CAACkI,OAAO;IAC7BlI,KAAK,CAACkI,OAAO,GAAG,EAAE;IAClB,OAAO;EACLA,IAAAA,OAAO,EAAPA;KACD;EACH;;ECpuCqE,IAqB/D0yE,kBAAkB,0BAAAn4D,OAAA,EAAA;IAUtB,SAAAm4D,kBAAAA,CACE/mB,QAAyB,EACzB76C,MAAiB,EACjBsxD,aAA4B,EAC5B/5E,MAAe,EACf;EAAA,IAAA,IAAAiH,KAAA;MACAA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,OAAM,qBAAqB,EAAElH,MAAM,CAAC,IAAA,IAAA;MAACiH,KAAA,CAf/BqjF,eAAe,GAAY,KAAK;EAAArjF,IAAAA,KAAA,CAChC+d,UAAU,GAAA,MAAA;EAAA/d,IAAAA,KAAA,CACV0a,UAAU,GAAA,MAAA;EAAA1a,IAAAA,KAAA,CACVqN,QAAQ,GAAA,MAAA;MAAArN,KAAA,CACRytD,OAAO,GAA2B,IAAI;EAAAztD,IAAAA,KAAA,CACtCsjF,UAAU,GAAA,MAAA;MAAAtjF,KAAA,CACVujF,WAAW,GAAkB,IAAI;MAAAvjF,KAAA,CACjC48E,iBAAiB,GAAY,KAAK;EAAA,IAAA,OAAA58E,KAAA;EAS1C,EAAA;IAAC6B,cAAA,CAAAuhF,kBAAA,EAAAn4D,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAA6sF,kBAAA,CAAA5sF,SAAA;IAAAD,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG,CAAC,CAAC;EAAAlC,EAAAA,MAAA,CAEZ+qE,cAAc,GAArB,SAAOA,cAAcA,CAACkiB,cAAsC,EAAE;MAC5D,IAAI,CAACD,WAAW,GAAG,IAAI;EACvB,IAAA,IAAM91B,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,IAAIA,OAAO,IAAI+1B,cAAc,EAAE;EAC7B,MAAA,IACE/1B,OAAO,CAAC3/C,QAAQ,KAAK01E,cAAc,CAAC11E,QAAQ,IAC5C2/C,OAAO,CAAC1mD,SAAS,KAAKy8E,cAAc,CAACz8E,SAAS,EAC9C;EACA,QAAA;EACF,MAAA;EACF,IAAA;MACA,IAAI,CAAC0mD,OAAO,GAAG+1B,cAAc;IAC/B,CAAC;EAAAjtF,EAAAA,MAAA,CAEMwmF,kBAAkB,GAAzB,SAAOA,kBAAkBA,GAAG;MAC1B,IAAI,CAACH,iBAAiB,GAAG,KAAK;MAC9B,IAAI,CAAC2G,WAAW,GAAG,IAAI;IACzB,CAAC;EAAAhtF,EAAAA,MAAA,CAEM6qE,gBAAgB,GAAvB,SAAOA,gBAAgBA,CACrB3/D,WAAgD,EAChDsc,UAA8B,EAC9BrD,UAA8B,EAC9BpO,WAA+B,EAC/B;MACA,IAAI,CAACyR,UAAU,GAAGA,UAAU;MAC5B,IAAI,CAACrD,UAAU,GAAGA,UAAU;EAC5B,IAAA,IAAI,CAAC+oE,mBAAmB,CAAChiF,WAAW,EAAE6K,WAAW,CAAC;MAClD,IAAI,CAAC+2E,eAAe,GAAG,IAAI;IAC7B,CAAC;IAAA9sF,MAAA,CAEOktF,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBhiF,WAAgD,EAChD6K,WAAgC,EAChC;EACA,IAAA,IAAMyR,UAAU,GAAiB,IAAI,CAA/BA,UAAU;QAAErD,UAAU,GAAK,IAAI,CAAnBA,UAAU;EAC5B,IAAA,IAAI,EAACjZ,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEwB,UAAU,CAAA,EAAE;QAC5B,IAAI,CAACqgF,UAAU,GAAG3oF,SAAS;QAC3B,IAAI,CAAC0S,QAAQ,GAAG1S,SAAS;EACzB,MAAA;EACF,IAAA;MACA,IAAA+oF,cAAA,GAA0B,IAAI,CAACr2E,QAAQ,GAAG5F,gBAAgB,CAAChG,WAAW,CAAC;QAA/DgD,KAAK,GAAAi/E,cAAA,CAALj/E,KAAK;QAAEC,KAAK,GAAAg/E,cAAA,CAALh/E,KAAK;EAEpB,IAAA,IAAI4H,WAAW,EAAE;EACfD,MAAAA,kBAAkB,CAAC5K,WAAW,EAAE6K,WAAW,CAAC;EAC9C,IAAA,CAAC,MAAM;EACL,MAAA,IAAMq3E,WAAW,GAAGl/E,KAAK,IAAIC,KAAK;EAClC,MAAA,IAAIi/E,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEjgF,SAAS,EAAE;EAC1B,QAAA,IAAI,CAACxK,IAAI,CAAA,uDAAA,GACgDyqF,WAAW,CAAC76E,KAAK,SAC1E,CAAC;EACH,MAAA;EACF,IAAA;;EAEA;EACA,IAAA,IAAIrE,KAAK,EAAE;QACTsZ,UAAU,GAAG6lE,mBAAmB,CAC9Bn/E,KAAK,EACLtG,qBAAqB,CAACvI,KAAK,EAC3B,IACF,CAAC;EACH,IAAA;EAEA,IAAA,IAAI8O,KAAK,EAAE;QACTgW,UAAU,GAAGkpE,mBAAmB,CAC9Bl/E,KAAK,EACLvG,qBAAqB,CAACC,KAAK,EAC3B,IACF,CAAC;EACH,IAAA;MAEA,IAAMkP,MAAgB,GAAG,EAAE;MAC3B,IAAI7I,KAAK,IAAIC,KAAK,EAAE;QAClB4I,MAAM,CAAC3I,UAAU,GAAG;EAClB++D,QAAAA,SAAS,EAAE,WAAW;EACtB56D,QAAAA,KAAK,EAAEiV,UAAU,GAAG,GAAG,GAAGrD,UAAU;UACpC3R,YAAY,EAAErE,KAAK,CAACqE,YAAY;UAChCrF,SAAS,EAAEgB,KAAK,CAAChB,SAAS;EAC1BjC,QAAAA,WAAW,EAAXA,WAAW;EACX7H,QAAAA,EAAE,EAAE;SACL;MACH,CAAC,MAAM,IAAI6K,KAAK,EAAE;QAChB6I,MAAM,CAAC7I,KAAK,GAAG;EACbi/D,QAAAA,SAAS,EAAE,WAAW;EACtB56D,QAAAA,KAAK,EAAEiV,UAAU;UACjBra,SAAS,EAAEe,KAAK,CAACf,SAAS;EAC1BjC,QAAAA,WAAW,EAAXA,WAAW;EACX7H,QAAAA,EAAE,EAAE;SACL;MACH,CAAC,MAAM,IAAI8K,KAAK,EAAE;QAChB4I,MAAM,CAAC5I,KAAK,GAAG;EACbg/D,QAAAA,SAAS,EAAE,WAAW;EACtB56D,QAAAA,KAAK,EAAE4R,UAAU;UACjB3R,YAAY,EAAErE,KAAK,CAACqE,YAAY;UAChCrF,SAAS,EAAEgB,KAAK,CAAChB,SAAS;EAC1BjC,QAAAA,WAAW,EAAXA,WAAW;EACX7H,QAAAA,EAAE,EAAE;SACL;EACH,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACV,IAAI,CAAC,kDAAkD,CAAC;EAC/D,IAAA;MACA,IAAI,CAACoqF,UAAU,GAAGh2E,MAAM;IAC1B,CAAC;EAAA/W,EAAAA,MAAA,CAEM8mF,KAAK,GAAZ,SAAOA,KAAKA,CACVr8D,UAA6B,EAC7BghD,UAA4B,EAC5BL,QAA8B,EAC9BM,SAA+B,EAC/B1xD,UAAkB,EAClB+sE,kBAA2B,EACZ;MAAA,IAAAuG,SAAA,EAAAC,UAAA;EACf,IAAA,IAAMr2B,OAAO,GAAkB,IAAI,CAA7BA,OAAO;QAAE81B,WAAW,GAAK,IAAI,CAApBA,WAAW;EAC1B,IAAA,IAAMr9E,MAAqB,GAAG;EAC5BzB,MAAAA,KAAK,EAAE9J,SAAS;EAChB+J,MAAAA,KAAK,EAAE/J,SAAS;EAChB8K,MAAAA,IAAI,EAAEw8D,SAAS;EACfz8D,MAAAA,GAAG,EAAEm8D,QAAQ;EACblgE,MAAAA,WAAW,EAAE9G;OACd;;EAED;EACA;EACA;EACA,IAAA,IAAI,CAACoI,cAAA,CAAgBwgF,WAAY,CAAC,EAAE;EAClCA,MAAAA,WAAW,GAAG,IAAI,CAACA,WAAW,GAAGhzE,UAAU,IAAI,CAAC;EAClD,IAAA;;EAEA;EACA;EACA,IAAA,IAAMjP,IAAI,GAAG0gE,UAAU,CAACtxD,OAAO;EAC/B,IAAA,IAAI,CAACpP,IAAI,CAAC7F,MAAM,EAAE;EAChB,MAAA,OAAOyK,MAAM;EACf,IAAA;EAEA,IAAA,IAAMzE,WAA4B,GAAG;EACnCgsD,MAAAA,OAAO,EAAE9yD,SAAS;EAClBoM,MAAAA,SAAS,EAAEpM,SAAS;EACpBkN,MAAAA,OAAO,EAAElN;OACV;EACD,IAAA,IAAI0S,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC5B,IAAI,EAAA,CAAAw2E,SAAA,GAACx2E,QAAQ,aAARw2E,SAAA,CAAUpoF,MAAM,CAAA,EAAE;EACrB,MAAA,IAAI,CAACgoF,mBAAmB,CAACniF,IAAI,CAAC;QAC9B+L,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC1B,IAAA;MACA,IAAI,EAAA,CAAAy2E,UAAA,GAACz2E,QAAQ,aAARy2E,UAAA,CAAUroF,MAAM,CAAA,EAAE;EACrB;EACA,MAAA,IAAI,CAACvC,IAAI,CAAC,iCAAiC,CAAC;EAC5C,MAAA,OAAOgN,MAAM;EACf,IAAA;MACA,IAAI,IAAI,CAACm9E,eAAe,EAAE;EACxB5hF,MAAAA,WAAW,CAAC6L,MAAM,GAAG,IAAI,CAACg2E,UAAU;QACpC,IAAI,CAACD,eAAe,GAAG,KAAK;EAC9B,IAAA;MAEA,IAAMU,eAAe,GAAG32E,aAAa,CAAC9L,IAAI,EAAE+L,QAAQ,EAAE,IAAI,CAAC;EAC3D,IAAA,IAAM22E,qBAAqB,GAAG32E,QAAQ,CAAC5I,KAAK,GACxCs/E,eAAe,CAAC12E,QAAQ,CAAC5I,KAAK,CAAC7K,EAAE,CAAC,GAClC,IAAI;EACR,IAAA,IAAMqqF,qBAAqB,GAAG52E,QAAQ,CAAC3I,KAAK,GACxCq/E,eAAe,CAAC12E,QAAQ,CAAC3I,KAAK,CAAC9K,EAAE,CAAC,GAClC,IAAI;EAER,IAAA,IAAMsqF,cAAc,GAAGC,mBAAmB,CAACF,qBAAqB,EAAE70E,QAAQ,CAAC;EAC3E,IAAA,IAAMg1E,cAAc,GAAGD,mBAAmB,CAACH,qBAAqB,EAAE50E,QAAQ,CAAC;MAC3E,IAAMi1E,YAAY,GAAGF,mBAAmB,CAACF,qBAAqB,EAAE,CAAC,EAAE,IAAI,CAAC;MACxE,IAAMK,YAAY,GAAGH,mBAAmB,CAACH,qBAAqB,EAAE,CAAC,EAAE,IAAI,CAAC;MAExE,IAAIO,UAAU,GAAGh0E,UAAU;MAC3B,IAAI/P,QAAQ,GAAG,CAAC;MAEhB,IAAMgkF,WAAW,GACfR,qBAAqB,KACpB,CAACC,qBAAqB,IACpB,CAACx2B,OAAO,IAAI22B,cAAc,GAAGF,cAAe,IAC5Cz2B,OAAO,IAAIA,OAAO,CAAC5lD,OAAO,KAAKwF,QAAQ,CAAC5I,KAAK,CAAE7K,EAAG,CAAC;EACxD,IAAA,IAAM6qF,iBAAiB,GAAGD,WAAW,GACjCR,qBAAqB,GACrBC,qBAAqB;EAEzB,IAAA,IAAIQ,iBAAiB,EAAE;EACrB,MAAA,IAAM19E,SAAS,GAAG09E,iBAAiB,CAAC19E,SAAS;QAC7C,IAAM+G,QAAQ,GAAG22E,iBAAiB,CAAC3mF,KAAK,GAAGyS,UAAU,GAAGxJ,SAAS;EACjE,MAAA,IAAMc,OAAO,GAAG28E,WAAW,GAAGn3E,QAAQ,CAAC5I,KAAK,CAAE7K,EAAE,GAAGyT,QAAQ,CAAC3I,KAAK,CAAE9K,EAAE;EAErE2qF,MAAAA,UAAU,GAAGE,iBAAiB,CAAC3mF,KAAK,GAAGiJ,SAAS;QAChDvG,QAAQ,GAAGgkF,WAAW,GAClBF,YAAY,GAAGF,cAAc,GAC7BC,YAAY,GAAGH,cAAc;QAEjC,IACE,CAAC5G,kBAAkB,IAAI,CAAC7vB,OAAO,MAC9Bi3B,gBAAgB,CAACj3B,OAAO,EAAE82B,UAAU,EAAEh0E,UAAU,EAAE/P,QAAQ,CAAC,IAC1DuG,SAAS,KAAK0mD,OAAO,CAAC1mD,SAAS,CAAC,EAClC;EACA,QAAA,IAAI0mD,OAAO,EAAE;EACX,UAAA,IAAI,CAACv0D,IAAI,CAAA,+BAAA,IACyBokF,kBAAkB,GAAG,EAAE,GAAG,GAAG,CAAA,GAAG/sE,UAAU,GAAA,GAAA,GAAIzC,QAAQ,GAAG/G,SAAS,qBAAgB0mD,OAAO,CAAC3/C,QAAQ,GAAG2/C,OAAO,CAAC1mD,SAAS,GAAA,IAAA,GAAK0mD,OAAO,CAAC3/C,QAAQ,GAAA,GAAA,GAAI2/C,OAAO,CAAC1mD,SAAS,GAAA,aAAA,GAAc0mD,OAAO,CAAC5lD,OACxN,CAAC;EACH,QAAA;EACA,QAAA,IAAI,CAACvR,GAAG,CAAA,kCAAA,GAC6Bia,UAAU,kBAAYg0E,UAAU,GAAGh0E,UAAU,CAAA,GAAA,IAAA,GAAKzC,QAAQ,GAAA,GAAA,GAAI/G,SAAS,GAAA,aAAA,GAAcc,OAC1H,CAAC;EACD4lD,QAAAA,OAAO,GAAG,IAAI;UACdhsD,WAAW,CAACgsD,OAAO,GAAG3/C,QAAQ;UAC9BrM,WAAW,CAACsF,SAAS,GAAGA,SAAS;UACjCtF,WAAW,CAACoG,OAAO,GAAGA,OAAO;EAC/B,MAAA;EACF,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC3O,IAAI,CAAA,gEAAA,GAC0DqX,UACnE,CAAC;EACH,IAAA;MACA,IAAI,CAACk9C,OAAO,EAAE;EACZ,MAAA,IACE,CAAChsD,WAAW,CAACsF,SAAS,IACtBtF,WAAW,CAACoG,OAAO,KAAKlN,SAAS,IACjC8G,WAAW,CAACgsD,OAAO,KAAK9yD,SAAS,EACjC;EACA,QAAA,IAAI,CAACzB,IAAI,CAAC,uBAAuB,CAAC;UAClCuI,WAAW,CAACgsD,OAAO,GAAG82B,UAAU;UAChC9iF,WAAW,CAACsF,SAAS,GAAG,CAAC;EACzBtF,QAAAA,WAAW,CAACoG,OAAO,GAAG,EAAE;EAC1B,MAAA;EACA,MAAA,IAAI,CAAC4lD,OAAO,GAAGA,OAAO,GAAG;UACvB3/C,QAAQ,EAAErM,WAAW,CAACgsD,OAAO;UAC7B1mD,SAAS,EAAEtF,WAAW,CAACsF,SAAS;UAChCc,OAAO,EAAEpG,WAAW,CAACoG;SACtB;EACH,IAAA,CAAC,MAAM;EACLpG,MAAAA,WAAW,CAACgsD,OAAO,GAAGA,OAAO,CAAC3/C,QAAQ;EACtCrM,MAAAA,WAAW,CAACsF,SAAS,GAAG0mD,OAAO,CAAC1mD,SAAS;EACzCtF,MAAAA,WAAW,CAACoG,OAAO,GAAG4lD,OAAO,CAAC5lD,OAAO;EACvC,IAAA;MAEA,IAAM+6B,SAAS,GAAG2hD,UAAU,GAAG92B,OAAO,CAAC3/C,QAAQ,GAAG2/C,OAAO,CAAC1mD,SAAS;EACnE,IAAA,IAAM87B,OAAO,GAAGD,SAAS,GAAGpiC,QAAQ;MAEpC,IAAIA,QAAQ,GAAG,CAAC,EAAE;QAChB,IAAI,CAAC+iF,WAAW,GAAG1gD,OAAO;EAC5B,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC3pC,IAAI,CAAC,sDAAsD,CAAC;QACjE,IAAI,CAAC6jF,kBAAkB,EAAE;EAC3B,IAAA;EAEA,IAAA,IAAMU,QAAQ,GAAG,CAAC,CAACpwE,QAAQ,CAAC5I,KAAK;EACjC,IAAA,IAAMgc,QAAQ,GAAG,CAAC,CAACpT,QAAQ,CAAC3I,KAAK;MAEjC,IAAI/K,IAAS,GAAG,EAAE;EAClB,IAAA,IAAI8jF,QAAQ,EAAE;EACZ9jF,MAAAA,IAAI,IAAI,OAAO;EACjB,IAAA;EAEA,IAAA,IAAI8mB,QAAQ,EAAE;EACZ9mB,MAAAA,IAAI,IAAI,OAAO;EACjB,IAAA;MAEA,IAAM+J,SAAS,GACb,CAAC2J,QAAQ,CAAC5I,KAAK,GAAG4I,QAAQ,CAAC5I,KAAK,CAACf,SAAS,GAAG,KAAK,MACjD2J,QAAQ,CAAC3I,KAAK,GAAG2I,QAAQ,CAAC3I,KAAK,CAAChB,SAAS,GAAG,KAAK,CAAC;EAErD,IAAA,IAAM8E,KAAmB,GAAG;EAC1B2H,MAAAA,KAAK,EAAE7O,IAAI;EACXR,MAAAA,QAAQ,EAAE8hC,SAAS;EACnB5hC,MAAAA,QAAQ,EAAE4hC,SAAS;EACnB7hC,MAAAA,MAAM,EAAE8hC,OAAO;EACf5hC,MAAAA,MAAM,EAAE4hC,OAAO;EACflpC,MAAAA,IAAI,EAAJA,IAAI;EACJ8jF,MAAAA,QAAQ,EAARA,QAAQ;EACRh9D,MAAAA,QAAQ,EAARA,QAAQ;EACR6hE,MAAAA,EAAE,EAAE,CAAC;EACLhtB,MAAAA,OAAO,EAAE,CAAC;EACV5xD,MAAAA,SAAS,EAATA;OACD;MAEDwC,MAAM,CAACzB,KAAK,GAAGg5E,QAAQ,IAAI,CAACh9D,QAAQ,GAAGjY,KAAK,GAAG7N,SAAS;EACxDuL,IAAAA,MAAM,CAACxB,KAAK,GAAG+b,QAAQ,GAAGjY,KAAK,GAAG7N,SAAS;EAC3C,IAAA,IAAMgqF,gBAAgB,GAAGV,qBAAqB,IAAA,IAAA,GAAA,MAAA,GAArBA,qBAAqB,CAAEt2E,WAAW;EAC3D,IAAA,IAAIg3E,gBAAgB,EAAE;EACpB,MAAA,IAAMhG,aAAa,GAAGsF,qBAAqB,CAACh1E,aAAa;EACzD,MAAA,IAAM7K,WAAW,GAAGu6E,aAAa,KAAK,EAAE;QACxCn2E,KAAK,CAAC85E,EAAE,GAAGqC,gBAAgB;EAC3Bn8E,MAAAA,KAAK,CAAC8sD,OAAO,GACXqpB,aAAa,KAAK,CAAC,IAAI,IAAI,CAAC/B,iBAAiB,GACzC,CAAC,GACDx4E,WAAW,GACTu6E,aAAa,GACbgG,gBAAgB;QACxBn8E,KAAK,CAACpE,WAAW,GAAGA,WAAW;QAC/BoE,KAAK,CAACm2E,aAAa,GAAGA,aAAa;EACnC,MAAA,IAAIv6E,WAAW,IAAI6/E,qBAAqB,CAAC/0E,aAAa,EAAE;EACtD1G,QAAAA,KAAK,CAAC21E,gBAAgB,GACpB,CAAC8F,qBAAqB,CAAC/0E,aAAa,GAAGu+C,OAAO,CAAC3/C,QAAQ,IACvD2/C,OAAO,CAAC1mD,SAAS;EACrB,MAAA;EACA,MAAA,IAAI,CAAC,IAAI,CAAC61E,iBAAiB,EAAE;UAC3B12E,MAAM,CAAC9B,WAAW,GAAGA,WAAW;EAClC,MAAA;EACA,MAAA,IAAI,CAACw4E,iBAAiB,KAAtB,IAAI,CAACA,iBAAiB,GAAKx4E,WAAW,CAAA;QACtC,IAAIoE,KAAK,CAAC8sD,OAAO,EAAE;EACjB,QAAA,IAAI,CAACp8D,IAAI,CAAA,yCAAA,GACmCylF,aAAa,GAAA,GAAA,GAAIgG,gBAAgB,GAAA,YAAA,GAAan8E,KAAK,CAAC8sD,OAAO,iBAAW9sD,KAAK,CAAC21E,gBAAgB,IAAI,IAAI,CAChJ,CAAC;EACH,MAAA;EACF,IAAA;MAEAj4E,MAAM,CAACzE,WAAW,GAAGA,WAAW;EAChCyE,IAAAA,MAAM,CAACV,GAAG,GAAGo5E,gCAAgC,CAC3Cjd,QAAQ,EACRpxD,UAAU,EACVk9C,OAAO,EACPA,OACF,CAAC;EAED,IAAA,IAAIwU,SAAS,CAACvxD,OAAO,CAACjV,MAAM,EAAE;QAC5ByK,MAAM,CAACT,IAAI,GAAGo5E,gCAAgC,CAC5C5c,SAAS,EACT1xD,UAAU,EACVk9C,OACF,CAAC;EACH,IAAA;EAEA,IAAA,OAAOvnD,MAAM;IACf,CAAC;EAAA,EAAA,OAAAk9E,kBAAA;EAAA,CAAA,CAxV8BvqF,MAAM,CAAA;EA2VvC,SAASsrF,mBAAmBA,CAC1Bv2E,UAA6B,EAC7BmlC,YAAoB,EACpB/0C,GAAY,EACJ;EAAA,EAAA,IADRA,GAAY,KAAA,MAAA,EAAA;EAAZA,IAAAA,GAAY,GAAG,KAAK;EAAA,EAAA;IAEpB,OAAO,CAAA4P,UAAU,IAAA,IAAA,GAAA,MAAA,GAAVA,UAAU,CAAE9P,KAAK,MAAKnD,SAAS,GAClC,CAACiT,UAAU,CAAC9P,KAAK,IAAIE,GAAG,GAAG4P,UAAU,CAACpN,QAAQ,GAAG,CAAC,CAAC,IACjDoN,UAAU,CAAC7G,SAAS,GACtBgsC,YAAY;EAClB;EAEA,SAAS2xC,gBAAgBA,CACvBj3B,OAA+B,EAC/BzsD,QAAgB,EAChBuP,UAAkB,EAClB/P,QAAgB,EACC;IACjB,IAAIitD,OAAO,KAAK,IAAI,EAAE;EACpB,IAAA,OAAO,IAAI;EACb,EAAA;EACA;IACA,IAAMm3B,WAAW,GAAGpwF,IAAI,CAACsD,GAAG,CAAC0I,QAAQ,EAAE,CAAC,CAAC;IACzC,IAAMoiC,SAAS,GAAG5hC,QAAQ,GAAGysD,OAAO,CAAC3/C,QAAQ,GAAG2/C,OAAO,CAAC1mD,SAAS;IACjE,OAAOvS,IAAI,CAACQ,GAAG,CAAC4tC,SAAS,GAAGryB,UAAU,CAAC,GAAGq0E,WAAW;EACvD;EAEA,SAAShB,mBAAmBA,CAC1Bp7E,KAAoB,EACpB7O,IAA+D,EAC/DZ,MAAe,EACP;EACR,EAAA,IAAM+iB,WAAW,GAAGtT,KAAK,CAACM,KAAK;EAC/B,EAAA,IAAIgT,WAAW,IAAIA,WAAW,CAACrgB,MAAM,GAAG,CAAC,EAAE;EACzC,IAAA,OAAOqgB,WAAW;EACpB,EAAA;EACA,EAAA,IAAIniB,IAAI,KAAKwE,qBAAqB,CAACvI,KAAK,EAAE;MACxC,IACEkmB,WAAW,KAAK,MAAM,IACtBA,WAAW,KAAK,MAAM,IACtBA,WAAW,KAAK,MAAM,EACtB;EACA,MAAA,OAAOA,WAAW;EACpB,IAAA;EACA,IAAA,IAAIA,WAAW,KAAK,MAAM,IAAIA,WAAW,KAAK,MAAM,EAAE;EACpD;QACA,IAAMphB,wBAAwB,GAAG,KAAK;EACtC,MAAA,OAAO4gB,sBAAsB,CAACQ,WAAW,EAAEphB,wBAAwB,CAAC;EACtE,IAAA;EAEA3B,IAAAA,MAAM,CAACG,IAAI,CAAA,0BAAA,GAA2B4iB,WAAW,kBAAc,CAAC;MAChE,OAAOA,WAAW,IAAI,MAAM;EAC9B,EAAA;EACA;EACA;EACA/iB,EAAAA,MAAM,CAACG,IAAI,CAAA,0BAAA,GAA2B4iB,WAAW,kBAAc,CAAC;IAChE,OAAOA,WAAW,IAAI,MAAM;EAC9B;;ECvZA,IAAImQ,GAAiB;EACrB;EACA,IAAI;EACFA,EAAAA,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,CAAC3yB,IAAI,CAACQ,IAAI,CAACoyB,WAAW,CAAC;EACnD,CAAC,CAAC,OAAO+e,GAAG,EAAE;IACZhf,GAAG,GAAG93B,IAAI,CAAC83B,GAAG;EAChB;EASA,IAAM44D,SAAsB,GAAG,CAC7B;EAAEpjB,EAAAA,KAAK,EAAEoD,UAAU;EAAEwY,EAAAA,KAAK,EAAE+F;EAAmB,CAAC,EAChD;EAAE3hB,EAAAA,KAAK,EAAEoR,SAAS;EAAEwK,EAAAA,KAAK,EAAEjB;EAAW,CAAC,EACvC;EAAE3a,EAAAA,KAAK,EAAE+B,UAAU;EAAE6Z,EAAAA,KAAK,EAAEjB;EAAW,CAAC,EACxC;EAAE3a,EAAAA,KAAK,EAAEkD,UAAU;EAAE0Y,EAAAA,KAAK,EAAEjB;EAAW,CAAC,CACzC;EAEiC;EAChCyI,EAAAA,SAAS,CAACxqC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;EAAEonB,IAAAA,KAAK,EAAEyC,UAAU;EAAEmZ,IAAAA,KAAK,EAAEjB;EAAW,GAAC,CAAC;EAClE;EAAA,IAEqB0I,UAAU,gBAAA,YAAA;EAe7B,EAAA,SAAAA,UAAAA,CACEzoB,QAAyB,EACzByW,aAA4B,EAC5BtxD,MAAiB,EACjBujE,MAAc,EACdnrF,EAAqB,EACrBb,MAAe,EACf;MAAA,IAAA,CArBMisF,WAAW,GAAY,KAAK;EAAA,IAAA,IAAA,CAC5BjsF,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNsjE,QAAQ,GAAA,MAAA;EAAA,IAAA,IAAA,CACRyW,aAAa,GAAA,MAAA;EAAA,IAAA,IAAA,CACbtxD,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACN5nB,EAAE,GAAA,MAAA;EAAA,IAAA,IAAA,CACFqrF,OAAO,GAAA,MAAA;EAAA,IAAA,IAAA,CACPC,OAAO,GAAA,MAAA;EAAA,IAAA,IAAA,CACP13B,SAAS,GAAA,MAAA;EAAA,IAAA,IAAA,CACT6P,KAAK,GAAA,MAAA;MAAA,IAAA,CACL8nB,iBAAiB,GAAqC,IAAI;EAAA,IAAA,IAAA,CAC1DC,cAAc,GAAA,MAAA;EAAA,IAAA,IAAA,CACdC,oBAAoB,GAAA,MAAA;MAU1B,IAAI,CAAChpB,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACyW,aAAa,GAAGA,aAAa;MAClC,IAAI,CAACtxD,MAAM,GAAGA,MAAM;MACpB,IAAI,CAAC5nB,EAAE,GAAGA,EAAE;MACZ,IAAI,CAACb,MAAM,GAAGA,MAAM;EACtB,EAAA;EAAA,EAAA,IAAAxC,MAAA,GAAAuuF,UAAA,CAAAtuF,SAAA;EAAAD,EAAAA,MAAA,CAEA+uF,SAAS,GAAT,SAAAA,SAASA,CAACF,cAA8B,EAAE;MACxC,IAAI,CAACA,cAAc,GAAGA,cAAc;MACpC,IAAI,IAAI,CAAC53B,SAAS,EAAE;EAClB,MAAA,IAAI,CAACA,SAAS,CAACnjB,KAAK,EAAE;EACxB,IAAA;IACF,CAAA;EAAA9zC,EAAAA,MAAA,CAEA+O,IAAI,GAAJ,SAAAA,IAAIA,CACFhE,IAAiB,EACjBgL,WAA+B,EAC/B0mD,SAAwB,EACxBnF,KAAqB,EACyB;EAAA,IAAA,IAAA7tD,KAAA,GAAA,IAAA;EAC9C,IAAA,IAAM8C,KAAK,GAAGkwD,SAAS,CAACljB,WAAW;EACnChtC,IAAAA,KAAK,CAACktC,YAAY,GAAG/jB,GAAG,EAAE;EAE1B,IAAA,IAAIs5D,QAAiC,GAAG,IAAIroF,UAAU,CAACoE,IAAI,CAAC;EAC5D,IAAA,IAAQ+jF,oBAAoB,GAAqB,IAAI,CAA7CA,oBAAoB;QAAED,cAAc,GAAK,IAAI,CAAvBA,cAAc;EAC5C,IAAA,IAAIv3B,KAAK,EAAE;QACT,IAAI,CAACw3B,oBAAoB,GAAGx3B,KAAK;EACnC,IAAA;EAEA,IAAA,IAAAztD,IAAA,GAOIytD,KAAK,IAAIw3B,oBAAoB;QAN/Br+B,UAAU,GAAA5mD,IAAA,CAAV4mD,UAAU;QACVw+B,aAAa,GAAAplF,IAAA,CAAbolF,aAAa;QACbC,WAAW,GAAArlF,IAAA,CAAXqlF,WAAW;QACXnI,kBAAkB,GAAAl9E,IAAA,CAAlBk9E,kBAAkB;QAClB/sE,UAAU,GAAAnQ,IAAA,CAAVmQ,UAAU;QACVm1E,iBAAiB,GAAAtlF,IAAA,CAAjBslF,iBAAiB;EAEnB,IAAA,IACE3nE,UAAU,GAKRqnE,cAAc,CALhBrnE,UAAU;QACVrD,UAAU,GAIR0qE,cAAc,CAJhB1qE,UAAU;QACVirE,cAAc,GAGZP,cAAc,CAHhBO,cAAc;QACdnlF,QAAQ,GAEN4kF,cAAc,CAFhB5kF,QAAQ;QACRolF,eAAe,GACbR,cAAc,CADhBQ,eAAe;EAGjB,IAAA,IAAMxoC,OAAO,GAAGyoC,iBAAiB,CAACN,QAAQ,EAAEj5E,WAAW,CAAC;MACxD,IAAI8wC,OAAO,IAAIrE,uBAAuB,CAACqE,OAAO,CAAC5O,MAAM,CAAC,EAAE;EACtD,MAAA,IAAMgf,SAAS,GAAG,IAAI,CAACs4B,YAAY,EAAE;EACrC,MAAA,IAAMphD,OAAO,GAAGsU,+BAA+B,CAACoE,OAAO,CAAC5O,MAAM,CAAC;;EAE/D;EACA,MAAA,IAAIgf,SAAS,CAACrjB,MAAM,EAAE,EAAE;EACtB;EACA;UACA,IAAI2nB,aAAa,GAAGtE,SAAS,CAAC/iB,eAAe,CAC3C86C,QAAQ,EACRnoC,OAAO,CAACzkD,GAAG,CAAC0E,MAAM,EAClB+/C,OAAO,CAAC3Y,EAAE,CAACpnC,MAAM,EACjBqnC,OACF,CAAC;EACD;EACA,QAAA,IAAMgpB,YAAY,GAAGsF,SAAS,CAACvwC,IAAI,GAAG,EAAE;EACxC,QAAA,IAAIirC,YAAY,EAAE;EAChB,UAAA,IAAMpsD,KAAI,GAAGksD,SAAS,CAACpjB,KAAK,EAAE;EAC9B0nB,UAAAA,aAAa,GAAGxwD,KAAI,GAAGA,KAAI,CAACjE,MAAM,GAAGiE,KAAI;EAC3C,QAAA;UACA,IAAI,CAACwwD,aAAa,EAAE;EAClBhvD,UAAAA,KAAK,CAACmtC,UAAU,GAAGhkB,GAAG,EAAE;YACxB,OAAO85D,WAAW,CAAC/yB,SAAS,CAAC;EAC/B,QAAA;EACAuyB,QAAAA,QAAQ,GAAG,IAAIroF,UAAU,CAAC40D,aAAa,CAAC;EAC1C,MAAA,CAAC,MAAM;UACL,IAAI,CAACkzB,WAAW,GAAG,IAAI;EACvB,QAAA,IAAI,CAACG,iBAAiB,GAAG33B,SAAQ,CAC9B7iB,gBAAgB,CACf46C,QAAQ,EACRnoC,OAAO,CAACzkD,GAAG,CAAC0E,MAAM,EAClB+/C,OAAO,CAAC3Y,EAAE,CAACpnC,MAAM,EACjBqnC,OACF,CAAA,CACCzkB,IAAI,CAAC,UAAC6xC,aAAa,EAAuB;EACzC;EACA;YACA,IAAM5rD,MAAM,GAAGlG,KAAI,CAACsF,IAAI,CACtBwsD,aAAa,EACb,IAAI,EACJkB,SACF,CAAqB;YACrBhzD,KAAI,CAACmlF,iBAAiB,GAAG,IAAI;EAC7B,UAAA,OAAOj/E,MAAM;EACf,QAAA,CAAC,CAAC;UACJ,OAAO,IAAI,CAACi/E,iBAAiB;EAC/B,MAAA;EACF,IAAA;MAEA,IAAMa,WAAW,GAAG,IAAI,CAACC,YAAY,CAACT,aAAa,EAAEC,WAAW,CAAC;EACjE,IAAA,IAAIO,WAAW,EAAE;EACf,MAAA,IAAMvyF,KAAK,GAAG,IAAI,CAACyyF,mBAAmB,CAACX,QAAQ,CAAC;EAChD,MAAA,IAAI9xF,KAAK,EAAE;UACT,IAAI,CAACsF,MAAM,CAACG,IAAI,mBAAiBzF,KAAK,CAACsrC,OAAS,CAAC;EACjD,QAAA,IAAI,CAACs9B,QAAQ,CAACK,IAAI,CAACtnE,MAAM,CAACk7B,KAAK,EAAEl7B,MAAM,CAACk7B,KAAK,EAAE;YAC7C32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;YAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;EACxCvK,UAAAA,KAAK,EAAE,KAAK;EACZp9B,UAAAA,KAAK,EAALA,KAAK;YACLk0B,MAAM,EAAEl0B,KAAK,CAACsrC;EAChB,SAAC,CAAC;EACFj8B,QAAAA,KAAK,CAACmtC,UAAU,GAAGhkB,GAAG,EAAE;UACxB,OAAO85D,WAAW,CAAC/yB,SAAS,CAAC;EAC/B,MAAA;EACF,IAAA;EAEA,IAAA,IAAIwyB,aAAa,IAAIC,WAAW,IAAIC,iBAAiB,IAAIM,WAAW,EAAE;EACpE,MAAA,IAAI,CAAC5kB,gBAAgB,CACnBwkB,eAAe,EACf7nE,UAAU,EACVrD,UAAU,EACVla,QAAQ,EACR8L,WACF,CAAC;EACH,IAAA;EAEA,IAAA,IAAIk5E,aAAa,IAAIE,iBAAiB,IAAIM,WAAW,EAAE;EACrD,MAAA,IAAI,CAACG,qBAAqB,CAACR,cAAc,CAAC;EAC5C,IAAA;MAEA,IAAI,CAAC3+B,UAAU,EAAE;QACf,IAAI,CAACwa,eAAe,EAAE;EACxB,IAAA;EAEA,IAAA,IAAMt7D,MAAM,GAAG,IAAI,CAACkgF,QAAQ,CAC1Bb,QAAQ,EACRnoC,OAAO,EACP7sC,UAAU,EACV+sE,kBAAkB,EAClBtqB,SACF,CAAC;EACD,IAAA,IAAI,CAACgyB,WAAW,GAAGqB,SAAS,CAACngF,MAAM,CAAC;EAEpC,IAAA,IAAMogF,YAAY,GAAG,IAAI,CAACjB,oBAAoB;MAE9CiB,YAAY,CAACt/B,UAAU,GAAG,IAAI;MAC9Bs/B,YAAY,CAACd,aAAa,GAAG,KAAK;MAClCc,YAAY,CAACb,WAAW,GAAG,KAAK;EAEhC3iF,IAAAA,KAAK,CAACmtC,UAAU,GAAGhkB,GAAG,EAAE;EACxB,IAAA,OAAO/lB,MAAM;EACf,EAAA;;EAEA;EAAA;EAAA3P,EAAAA,MAAA,CACA6zC,KAAK,GAAL,SAAAA,KAAKA,CACH4oB,SAAwB,EAC0B;EAAA,IAAA,IAAA9uD,MAAA,GAAA,IAAA;EAClD,IAAA,IAAMpB,KAAK,GAAGkwD,SAAS,CAACljB,WAAW;EACnChtC,IAAAA,KAAK,CAACktC,YAAY,GAAG/jB,GAAG,EAAE;EAE1B,IAAA,IAAQuhC,SAAS,GAA8C,IAAI,CAA3DA,SAAS;QAAE63B,oBAAoB,GAAwB,IAAI,CAAhDA,oBAAoB;QAAEF,iBAAiB,GAAK,IAAI,CAA1BA,iBAAiB;EAE1D,IAAA,IAAIA,iBAAiB,EAAE;QACrB,IAAI,CAACH,WAAW,GAAG,IAAI;EACvB;EACA;EACA,MAAA,OAAOG,iBAAiB,CAACllE,IAAI,CAAC,YAAM;EAClC,QAAA,OAAO/b,MAAI,CAACkmC,KAAK,CAAC4oB,SAAS,CAAC;EAC9B,MAAA,CAAC,CAAC;EACJ,IAAA;MAEA,IAAMuzB,eAAmC,GAAG,EAAE;EAC9C,IAAA,IAAQh2E,UAAU,GAAK80E,oBAAoB,CAAnC90E,UAAU;EAClB,IAAA,IAAIi9C,SAAS,EAAE;EACb;EACA;EACA;EACA,MAAA,IAAMsE,aAAa,GAAGtE,SAAS,CAACpjB,KAAK,EAAE;EACvC,MAAA,IAAI0nB,aAAa,EAAE;EACjB;EACAy0B,QAAAA,eAAe,CAACjhF,IAAI,CAClB,IAAI,CAACA,IAAI,CAACwsD,aAAa,CAACz0D,MAAM,EAAE,IAAI,EAAE21D,SAAS,CACjD,CAAC;EACH,MAAA;EACF,IAAA;EAEA,IAAA,IAAQiyB,OAAO,GAAc,IAAI,CAAzBA,OAAO;QAAEC,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACxB,IAAA,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;EACxB;EACApiF,MAAAA,KAAK,CAACmtC,UAAU,GAAGhkB,GAAG,EAAE;EACxB,MAAA,IAAMu6D,YAAY,GAAG,CAACT,WAAW,CAAC/yB,SAAS,CAAC,CAAC;QAC7C,IAAI,IAAI,CAACgyB,WAAW,EAAE;EACpB,QAAA,OAAO9lE,OAAO,CAACC,OAAO,CAACqnE,YAAY,CAAC;EACtC,MAAA;EACA,MAAA,OAAOA,YAAY;EACrB,IAAA;EAEA,IAAA,IAAMC,oBAAoB,GAAGxB,OAAO,CAAC76C,KAAK,CAAC75B,UAAU,CAAC;EACtD,IAAA,IAAI81E,SAAS,CAACI,oBAAoB,CAAC,EAAE;QACnC,IAAI,CAACzB,WAAW,GAAG,IAAI;EACvB;EACA,MAAA,OAAOyB,oBAAoB,CAACxmE,IAAI,CAAC,UAACk1D,WAAW,EAAK;UAChDjxE,MAAI,CAACwiF,UAAU,CAACH,eAAe,EAAEpR,WAAW,EAAEniB,SAAS,CAAC;EACxD,QAAA,OAAOuzB,eAAe;EACxB,MAAA,CAAC,CAAC;EACJ,IAAA;MAEA,IAAI,CAACG,UAAU,CAACH,eAAe,EAAEE,oBAAoB,EAAEzzB,SAAS,CAAC;MACjE,IAAI,IAAI,CAACgyB,WAAW,EAAE;EACpB,MAAA,OAAO9lE,OAAO,CAACC,OAAO,CAAConE,eAAe,CAAC;EACzC,IAAA;EACA,IAAA,OAAOA,eAAe;IACxB,CAAA;IAAAhwF,MAAA,CAEQmwF,UAAU,GAAlB,SAAQA,UAAUA,CAChBH,eAAmC,EACnCpR,WAA0B,EAC1BniB,SAAwB,EACxB;EACA,IAAA,IAAQhyC,UAAU,GAAsCm0D,WAAW,CAA3Dn0D,UAAU;QAAEghD,UAAU,GAA0BmT,WAAW,CAA/CnT,UAAU;QAAEL,QAAQ,GAAgBwT,WAAW,CAAnCxT,QAAQ;QAAEM,SAAS,GAAKkT,WAAW,CAAzBlT,SAAS;EACnD,IAAA,IAAA0kB,qBAAA,GAA2C,IAAI,CAACtB,oBAAoB;QAA5D/H,kBAAkB,GAAAqJ,qBAAA,CAAlBrJ,kBAAkB;QAAE/sE,UAAU,GAAAo2E,qBAAA,CAAVp2E,UAAU;EACtC,IAAA,IAAI,CAACxX,MAAM,CAACzC,GAAG,CAAA,2BAAA,GACe,IAAI,CAACsD,EAAE,GAAA,OAAA,GAAQo5D,SAAS,CAACnzD,EAAE,IACrDmzD,SAAS,CAACvwC,IAAI,GAAG,EAAE,GAAG,SAAS,GAAGuwC,SAAS,CAACvwC,IAAI,GAAG,EAAC,cAC/C,IAAI,CAAC7oB,EAAE,KAAKlE,iBAAiB,CAACC,IAAI,GAAG,OAAO,GAAG,OAAO,UAAIq9D,SAAS,CAACpyD,KAC7E,CAAC;MACD,IAAMgmF,WAAW,GAAG,IAAI,CAAC1B,OAAO,CAAE7H,KAAK,CACrCr8D,UAAU,EACVghD,UAAU,EACVL,QAAQ,EACRM,SAAS,EACT1xD,UAAU,EACV+sE,kBAAkB,EAClB,IAAI,EACJ,IAAI,CAAC1jF,EACP,CAAC;MACD2sF,eAAe,CAACjhF,IAAI,CAAC;EACnBshF,MAAAA,WAAW,EAAXA,WAAW;EACX5zB,MAAAA,SAAS,EAATA;EACF,KAAC,CAAC;EAEFA,IAAAA,SAAS,CAACljB,WAAW,CAACG,UAAU,GAAGhkB,GAAG,EAAE;IAC1C,CAAA;EAAA11B,EAAAA,MAAA,CAEA4vF,qBAAqB,GAArB,SAAAA,qBAAqBA,CAACR,cAAsC,EAAE;EAC5D,IAAA,IAAQV,OAAO,GAAc,IAAI,CAAzBA,OAAO;QAAEC,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACxB,IAAA,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;EACxB,MAAA;EACF,IAAA;EACAD,IAAAA,OAAO,CAAC3jB,cAAc,CAACqkB,cAAc,CAAC;EACtCT,IAAAA,OAAO,CAAC5jB,cAAc,CAACqkB,cAAc,CAAC;IACxC,CAAA;EAAApvF,EAAAA,MAAA,CAEAirE,eAAe,GAAf,SAAAA,eAAeA,GAAG;EAChB,IAAA,IAAQyjB,OAAO,GAAc,IAAI,CAAzBA,OAAO;QAAEC,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACxB,IAAA,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;EACxB,MAAA;EACF,IAAA;MACAD,OAAO,CAACzjB,eAAe,EAAE;MACzB0jB,OAAO,CAACnI,kBAAkB,EAAE;IAC9B,CAAA;EAAAxmF,EAAAA,MAAA,CAEA6qE,gBAAgB,GAAhB,SAAAA,gBAAgBA,CACdwkB,eAAuC,EACvC7nE,UAA8B,EAC9BrD,UAA8B,EAC9B2mD,aAAqB,EACrB/0D,WAA+B,EAC/B;EACA,IAAA,IAAQ24E,OAAO,GAAc,IAAI,CAAzBA,OAAO;QAAEC,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACxB,IAAA,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE;EACxB,MAAA;EACF,IAAA;MACAD,OAAO,CAAC7jB,gBAAgB,CACtBwkB,eAAe,EACf7nE,UAAU,EACVrD,UAAU,EACV2mD,aACF,CAAC;MACD6jB,OAAO,CAAC9jB,gBAAgB,CACtBwkB,eAAe,EACf7nE,UAAU,EACVrD,UAAU,EACVpO,WACF,CAAC;IACH,CAAA;EAAA/V,EAAAA,MAAA,CAEAkC,OAAO,GAAP,SAAAA,OAAOA,GAAS;MACd,IAAI,IAAI,CAACwsF,OAAO,EAAE;EAChB,MAAA,IAAI,CAACA,OAAO,CAACxsF,OAAO,EAAE;QACtB,IAAI,CAACwsF,OAAO,GAAGtqF,SAAS;EAC1B,IAAA;MACA,IAAI,IAAI,CAACuqF,OAAO,EAAE;EAChB,MAAA,IAAI,CAACA,OAAO,CAACzsF,OAAO,EAAE;QACtB,IAAI,CAACysF,OAAO,GAAGvqF,SAAS;EAC1B,IAAA;IACF,CAAA;EAAApE,EAAAA,MAAA,CAEQ6vF,QAAQ,GAAhB,SAAQA,QAAQA,CACd9kF,IAAgB,EAChB87C,OAAuB,EACvB7sC,UAAkB,EAClB+sE,kBAA2B,EAC3BtqB,SAAwB,EACsB;EAC9C,IAAA,IAAI9sD,MAAoD;EACxD,IAAA,IAAIk3C,OAAO,IAAIA,OAAO,CAAC5O,MAAM,KAAK,YAAY,EAAE;EAC9CtoC,MAAAA,MAAM,GAAG,IAAI,CAAC2gF,iBAAiB,CAC7BvlF,IAAI,EACJ87C,OAAO,EACP7sC,UAAU,EACV+sE,kBAAkB,EAClBtqB,SACF,CAAC;EACH,IAAA,CAAC,MAAM;EACL9sD,MAAAA,MAAM,GAAG,IAAI,CAAC4gF,mBAAmB,CAC/BxlF,IAAI,EACJiP,UAAU,EACV+sE,kBAAkB,EAClBtqB,SACF,CAAC;EACH,IAAA;EACA,IAAA,OAAO9sD,MAAM;IACf,CAAA;EAAA3P,EAAAA,MAAA,CAEQuwF,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBxlF,IAAgB,EAChBiP,UAAkB,EAClB+sE,kBAA2B,EAC3BtqB,SAAwB,EACN;MAClB,IAAA+zB,MAAA,GACE,IAAI,CAAC9B,OAAO,CACZxjB,KAAK,CAACngE,IAAI,EAAEiP,UAAU,EAAE,KAAK,EAAE,CAAC,IAAI,CAACiR,MAAM,CAACqyC,WAAW,CAAC;QAFlD7yC,UAAU,GAAA+lE,MAAA,CAAV/lE,UAAU;QAAEghD,UAAU,GAAA+kB,MAAA,CAAV/kB,UAAU;QAAEL,QAAQ,GAAAolB,MAAA,CAARplB,QAAQ;QAAEM,SAAS,GAAA8kB,MAAA,CAAT9kB,SAAS;MAGnD,IAAM2kB,WAAW,GAAG,IAAI,CAAC1B,OAAO,CAAE7H,KAAK,CACrCr8D,UAAU,EACVghD,UAAU,EACVL,QAAQ,EACRM,SAAS,EACT1xD,UAAU,EACV+sE,kBAAkB,EAClB,KAAK,EACL,IAAI,CAAC1jF,EACP,CAAC;MACD,OAAO;EACLgtF,MAAAA,WAAW,EAAXA,WAAW;EACX5zB,MAAAA,SAAS,EAATA;OACD;IACH,CAAA;EAAAz8D,EAAAA,MAAA,CAEQswF,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvBvlF,IAAgB,EAChBuwD,WAAoB,EACpBthD,UAAkB,EAClB+sE,kBAA2B,EAC3BtqB,SAAwB,EACG;EAAA,IAAA,IAAAjgC,MAAA,GAAA,IAAA;EAC3B,IAAA,OAAQ,IAAI,CAACkyD,OAAO,CACjB/iB,cAAc,CAAC5gE,IAAI,EAAEuwD,WAAW,EAAEthD,UAAU,CAAA,CAC5C0P,IAAI,CAAC,UAACk1D,WAAW,EAAK;EACrB,MAAA,IAAMyR,WAAW,GAAG7zD,MAAI,CAACmyD,OAAO,CAAE7H,KAAK,CACrClI,WAAW,CAACn0D,UAAU,EACtBm0D,WAAW,CAACnT,UAAU,EACtBmT,WAAW,CAACxT,QAAQ,EACpBwT,WAAW,CAAClT,SAAS,EACrB1xD,UAAU,EACV+sE,kBAAkB,EAClB,KAAK,EACLvqD,MAAI,CAACn5B,EACP,CAAC;QACD,OAAO;EACLgtF,QAAAA,WAAW,EAAXA,WAAW;EACX5zB,QAAAA,SAAS,EAATA;SACD;EACH,IAAA,CAAC,CAAC;IACN,CAAA;EAAAz8D,EAAAA,MAAA,CAEQ2vF,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAAC5kF,IAAgB,EAAgB;EAC1D,IAAA,IAAQkgB,MAAM,GAA8B,IAAI,CAAxCA,MAAM;QAAE66C,QAAQ,GAAoB,IAAI,CAAhCA,QAAQ;QAAEyW,aAAa,GAAK,IAAI,CAAtBA,aAAa;EACvC;EACA,IAAA,IAAIkU,GAAG;EACP,IAAA,KAAK,IAAIrqF,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGsoF,SAAS,CAACppF,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EAAA,MAAA,IAAAsqF,kBAAA;EACpD,MAAA,IAAA,CAAAA,kBAAA,GAAIpC,SAAS,CAACloF,CAAC,CAAC,CAAC8kE,KAAK,KAAA,IAAA,IAAlBwlB,kBAAA,CAAoB5pB,KAAK,CAAC/7D,IAAI,EAAE,IAAI,CAACvI,MAAM,CAAC,EAAE;EAChDiuF,QAAAA,GAAG,GAAGnC,SAAS,CAACloF,CAAC,CAAC;EAClB,QAAA;EACF,MAAA;EACF,IAAA;MACA,IAAI,CAACqqF,GAAG,EAAE;EACR,MAAA,OAAO,IAAIvoE,KAAK,CAAC,iDAAiD,CAAC;EACrE,IAAA;EACA;EACA,IAAA,IAAMwmE,OAAO,GAAG,IAAI,CAACA,OAAO;EAC5B,IAAA,IAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;EAC5B,IAAA,IAAMgC,OAA2B,GAAGF,GAAG,CAAC3J,KAAK;EAC7C,IAAA,IAAM8J,OAA2B,GAAGH,GAAG,CAACvlB,KAAK;MAC7C,IAAI,CAACyjB,OAAO,IAAI,EAAEA,OAAO,YAAYgC,OAAO,CAAC,EAAE;EAC7C,MAAA,IAAI,CAAChC,OAAO,GAAG,IAAIgC,OAAO,CAAC7qB,QAAQ,EAAE76C,MAAM,EAAEsxD,aAAa,EAAE,IAAI,CAAC/5E,MAAM,CAAC;EAC1E,IAAA;MACA,IAAI,CAACksF,OAAO,IAAI,EAAEA,OAAO,YAAYkC,OAAO,CAAC,EAAE;EAC7C,MAAA,IAAI,CAAClC,OAAO,GAAG,IAAIkC,OAAO,CAAC9qB,QAAQ,EAAE76C,MAAM,EAAEsxD,aAAa,EAAE,IAAI,CAAC/5E,MAAM,CAAC;EACxE,MAAA,IAAI,CAACskE,KAAK,GAAG8pB,OAAO,CAAC9pB,KAAK;EAC5B,IAAA;IACF,CAAA;IAAA9mE,MAAA,CAEQ0vF,YAAY,GAApB,SAAQA,YAAYA,CAACT,aAAsB,EAAEC,WAAoB,EAAW;EAC1E;EACA;EACA,IAAA,OAAO,CAAC,IAAI,CAACR,OAAO,IAAI,CAAC,IAAI,CAACC,OAAO,IAAIM,aAAa,IAAIC,WAAW;IACvE,CAAA;EAAAlvF,EAAAA,MAAA,CAEQuvF,YAAY,GAApB,SAAQA,YAAYA,GAAc;EAChC,IAAA,IAAIt4B,SAAS,GAAG,IAAI,CAACA,SAAS;MAC9B,IAAI,CAACA,SAAS,EAAE;QACdA,SAAS,GAAG,IAAI,CAACA,SAAS,GAAG,IAAInkB,SAAS,CAAC,IAAI,CAAC7nB,MAAM,CAAC;EACzD,IAAA;EACA,IAAA,OAAOgsC,SAAS;IAClB,CAAA;EAAA,EAAA,OAAAs3B,UAAA;EAAA,CAAA,EAAA;EAGF,SAASe,iBAAiBA,CACxBvkF,IAAgB,EAChBuwD,WAA+B,EACf;IAChB,IAAIu1B,cAA8B,GAAG,IAAI;IACzC,IACE9lF,IAAI,CAAC2B,UAAU,GAAG,CAAC,IACnB,CAAA4uD,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEl5D,GAAG,KAAI,IAAI,IACxBk5D,WAAW,CAACptB,EAAE,KAAK,IAAI,IACvBotB,WAAW,CAACrjB,MAAM,IAAI,IAAG,EACzB;EACA44C,IAAAA,cAAc,GAAGv1B,WAAsB;EACzC,EAAA;EACA,EAAA,OAAOu1B,cAAc;EACvB;EAEA,IAAMrB,WAAW,GAAG,SAAdA,WAAWA,CAAI/yB,SAAS,EAAA;IAAA,OAAwB;MACpD4zB,WAAW,EAAE,EAAE;EACf5zB,IAAAA,SAAS,EAATA;KACD;EAAA,CAAC;EAEK,SAASqzB,SAASA,CAAI1yB,CAAmB,EAAmB;IACjE,OAAO,MAAM,IAAIA,CAAC,IAAIA,CAAC,CAAC1zC,IAAI,YAAYonE,QAAQ;EAClD;EAEA,IAAaC,cAAc,GAOzB,SAAAA,cAAAA,CACEvpE,UAA8B,EAC9BrD,UAA8B,EAC9BkrE,eAAuC,EACvCplF,QAAgB,EAChBmlF,cAAgC,EAChC;EAAA,EAAA,IAAA,CAZK5nE,UAAU,GAAA,MAAA;EAAA,EAAA,IAAA,CACVrD,UAAU,GAAA,MAAA;EAAA,EAAA,IAAA,CACVkrE,eAAe,GAAA,MAAA;EAAA,EAAA,IAAA,CACfplF,QAAQ,GAAA,MAAA;EAAA,EAAA,IAAA,CACRmlF,cAAc,GAAA,MAAA;IASnB,IAAI,CAAC5nE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACrD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACkrE,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACplF,QAAQ,GAAGA,QAAQ;EACxB,EAAA,IAAI,CAACmlF,cAAc,GAAGA,cAAc,IAAI,IAAI;EAC9C,CAAA;EAGF,IAAa4B,aAAa,GAQxB,SAAAA,aAAAA,CACE/B,aAAsB,EACtBx+B,UAAmB,EACnBs2B,kBAA2B,EAC3BmI,WAAoB,EACpBl1E,UAAkB,EAClBm1E,iBAA0B,EAC1B;EAAA,EAAA,IAAA,CAdKF,aAAa,GAAA,MAAA;EAAA,EAAA,IAAA,CACbx+B,UAAU,GAAA,MAAA;EAAA,EAAA,IAAA,CACVs2B,kBAAkB,GAAA,MAAA;EAAA,EAAA,IAAA,CAClBmI,WAAW,GAAA,MAAA;EAAA,EAAA,IAAA,CACXl1E,UAAU,GAAA,MAAA;EAAA,EAAA,IAAA,CACVm1E,iBAAiB,GAAA,MAAA;IAUtB,IAAI,CAACF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACx+B,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACs2B,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACmI,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACl1E,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACm1E,iBAAiB,GAAGA,iBAAiB;EAC5C,CAAA;;ECtiBF,IAAM8B,WAAuC,GAAG,EAAE;EAElD,IAAI,OAAOC,aAAa,KAAK,WAAW,IAAIA,aAAa,EAAE;EACzDC,EAAAA,WAAW,EAAE;EACf;EAEA,SAASA,WAAWA,GAAG;EACrB5tF,EAAAA,IAAI,CAAC8xD,gBAAgB,CAAC,SAAS,EAAE,UAAC+7B,EAAE,EAAK;EACvC,IAAA,IAAMrmF,IAAI,GAAGqmF,EAAE,CAACrmF,IAAI;EACpB,IAAA,IAAMsmF,UAAU,GAAGtmF,IAAI,CAACsmF,UAAU;MAClC,IAAIA,UAAU,KAAKjtF,SAAS,EAAE;EAC5B,MAAA;EACF,IAAA;EACA,IAAA,IAAMoyD,UAAU,GAAGy6B,WAAW,CAACI,UAAU,CAAC;EAC1C,IAAA,IAAItmF,IAAI,CAACumF,GAAG,KAAK,OAAO,EAAE;EACxB,MAAA,OAAOL,WAAW,CAAClmF,IAAI,CAACwmF,OAAO,CAAC;EAChC,MAAA,IAAI/6B,UAAU,EAAE;UACdA,UAAU,CAACt0D,OAAO,EAAE;EACtB,MAAA;QACA6I,IAAI,CAACumF,GAAG,GAAG,MAAM;EACnB,IAAA;EACA,IAAA,IAAIvmF,IAAI,CAACumF,GAAG,KAAK,MAAM,EAAE;QACvB,IAAMrmE,MAAM,GAAGsE,IAAI,CAACliB,KAAK,CAACtC,IAAI,CAACkgB,MAAM,CAAC;EACtC,MAAA,IAAM66C,QAAQ,GAAG,IAAI0rB,YAAY,EAAE;QACnC1rB,QAAQ,CAAChtC,EAAE,CAACj6B,MAAM,CAAC28D,cAAc,EAAEi2B,cAAc,CAAC;QAClD3rB,QAAQ,CAAChtC,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE03D,cAAc,CAAC;QACzC,IAAMjvF,MAAM,GAAGoB,UAAU,CAACqnB,MAAM,CAACvoB,KAAK,EAAEqI,IAAI,CAAC1H,EAAE,CAAC;EAChDquF,MAAAA,iBAAiB,CAAClvF,MAAM,EAAE6uF,UAAU,CAAC;QACrCJ,WAAW,CAACI,UAAU,CAAC,GAAG,IAAI9C,UAAU,CACtCzoB,QAAQ,EACR/6D,IAAI,CAACwxE,aAAa,EAClBtxD,MAAM,EACN,EAAE,EACFlgB,IAAI,CAAC1H,EAAE,EACPb,MACF,CAAC;EACDivF,MAAAA,cAAc,CAAC,MAAM,EAAE,IAAI,EAAEJ,UAAU,CAAC;EACxC,MAAA;EACF,IAAA;MACA,IAAI,CAAC76B,UAAU,EAAE;EACf,MAAA;EACF,IAAA;MACA,QAAQzrD,IAAI,CAACumF,GAAG;EACd,MAAA,KAAK,WAAW;EAAE,QAAA;EAChB96B,UAAAA,UAAU,CAACu4B,SAAS,CAAChkF,IAAI,CAACkgB,MAAM,CAAC;EACjC,UAAA;EACF,QAAA;EACA,MAAA,KAAK,OAAO;EAAE,QAAA;YACZ,IAAM0mE,cAA4D,GAChEn7B,UAAU,CAACznD,IAAI,CACbhE,IAAI,CAACA,IAAI,EACTA,IAAI,CAACgL,WAAW,EAChBhL,IAAI,CAAC0xD,SAAS,EACd1xD,IAAI,CAACusD,KACP,CAAC;EACH,UAAA,IAAIw4B,SAAS,CAAC6B,cAAc,CAAC,EAAE;EAC7BA,YAAAA,cAAc,CACXjoE,IAAI,CAAC,UAAC3e,IAAI,EAAK;EACd6mF,cAAAA,oBAAoB,CAACruF,IAAI,EAAEwH,IAAI,EAAEsmF,UAAU,CAAC;EAC9C,YAAA,CAAC,CAAC,CACD1nE,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChBu0F,cAAAA,cAAc,CACZ5yF,MAAM,CAACk7B,KAAK,EACZ;EACEs3D,gBAAAA,UAAU,EAAVA,UAAU;kBACVjuF,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;kBAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;kBACxC43B,SAAS,EAAE1xD,IAAI,CAAC0xD,SAAS;EACzBniC,gBAAAA,KAAK,EAAE,KAAK;EACZp9B,gBAAAA,KAAK,EAALA,KAAK;EACLw3C,gBAAAA,GAAG,EAAEx3C,KAAK;kBACVk0B,MAAM,EAAA;iBACP,EACDigE,UACF,CAAC;EACH,YAAA,CAAC,CAAC;EACN,UAAA,CAAC,MAAM;EACLO,YAAAA,oBAAoB,CAACruF,IAAI,EAAEouF,cAAc,EAAEN,UAAU,CAAC;EACxD,UAAA;EACA,UAAA;EACF,QAAA;EACA,MAAA,KAAK,OAAO;EAAE,QAAA;EACZ,UAAA,IAAM50B,SAAS,GAAG1xD,IAAI,CAAC0xD,SAA0B;EACjD,UAAA,IAAMk1B,eAAc,GAAGn7B,UAAU,CAAC3iB,KAAK,CAAC4oB,SAAS,CAAC;EAClD,UAAA,IAAIqzB,SAAS,CAAC6B,eAAc,CAAC,EAAE;EAC7BA,YAAAA,eAAc,CACXjoE,IAAI,CAAC,UAAC1Z,OAAgC,EAAK;gBAC1C6hF,iBAAiB,CACftuF,IAAI,EACJyM,OAAO,EACPysD,SAAS,EACT40B,UACF,CAAC;EACH,YAAA,CAAC,CAAC,CACD1nE,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChBu0F,cAAAA,cAAc,CACZ5yF,MAAM,CAACk7B,KAAK,EACZ;kBACE32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;kBAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;kBACxC43B,SAAS,EAAE1xD,IAAI,CAAC0xD,SAAS;EACzBniC,gBAAAA,KAAK,EAAE,KAAK;EACZp9B,gBAAAA,KAAK,EAALA,KAAK;EACLw3C,gBAAAA,GAAG,EAAEx3C,KAAK;kBACVk0B,MAAM,EAAA;iBACP,EACDigE,UACF,CAAC;EACH,YAAA,CAAC,CAAC;EACN,UAAA,CAAC,MAAM;cACLQ,iBAAiB,CACftuF,IAAI,EACJouF,eAAc,EACdl1B,SAAS,EACT40B,UACF,CAAC;EACH,UAAA;EACA,UAAA;EACF,QAAA;EAGF;EACF,EAAA,CAAC,CAAC;EACJ;EAEA,SAASO,oBAAoBA,CAC3BruF,IAAS,EACTouF,cAAgC,EAChCN,UAAkB,EACT;EACT,EAAA,IAAIS,aAAa,CAACH,cAAc,CAACtB,WAAW,CAAC,EAAE;EAC7C,IAAA,OAAO,KAAK;EACd,EAAA;IACA,IAAM0B,YAAgC,GAAG,EAAE;EAC3C,EAAA,IAAAC,qBAAA,GAAyBL,cAAc,CAACtB,WAAW;MAA3CniF,KAAK,GAAA8jF,qBAAA,CAAL9jF,KAAK;MAAEC,KAAK,GAAA6jF,qBAAA,CAAL7jF,KAAK;EACpB,EAAA,IAAID,KAAK,EAAE;EACT+jF,IAAAA,iBAAiB,CAACF,YAAY,EAAE7jF,KAAK,CAAC;EACxC,EAAA;EACA,EAAA,IAAIC,KAAK,EAAE;EACT8jF,IAAAA,iBAAiB,CAACF,YAAY,EAAE5jF,KAAK,CAAC;EACxC,EAAA;IACA5K,IAAI,CAAC2uF,WAAW,CACd;EAAE/3D,IAAAA,KAAK,EAAE,kBAAkB;EAAEpvB,IAAAA,IAAI,EAAE4mF,cAAc;EAAEN,IAAAA,UAAU,EAAVA;KAAY,EAC/DU,YACF,CAAC;EACD,EAAA,OAAO,IAAI;EACb;;EAEA;EACA;EACA,SAASE,iBAAiBA,CACxBF,YAAgC,EAChC9/E,KAAmB,EACnB;IACA,IAAIA,KAAK,CAAC2H,KAAK,EAAE;MACfm4E,YAAY,CAAChjF,IAAI,CAACkD,KAAK,CAAC2H,KAAK,CAAC9S,MAAM,CAAC;EACvC,EAAA;IACA,IAAImL,KAAK,CAAC4H,KAAK,EAAE;MACfk4E,YAAY,CAAChjF,IAAI,CAACkD,KAAK,CAAC4H,KAAK,CAAC/S,MAAM,CAAC;EACvC,EAAA;EACF;EAEA,SAAS+qF,iBAAiBA,CACxBtuF,IAAS,EACTyM,OAAgC,EAChCysD,SAAwB,EACxB40B,UAAkB,EAClB;IACA,IAAMt2C,MAAM,GAAG/qC,OAAO,CAACiJ,MAAM,CAC3B,UAAC8hC,MAAM,EAAEprC,MAAM,EAAA;MAAA,OACbiiF,oBAAoB,CAACruF,IAAI,EAAEoM,MAAM,EAAE0hF,UAAU,CAAC,IAAIt2C,MAAM;EAAA,EAAA,CAAA,EAC1D,KACF,CAAC;IACD,IAAI,CAACA,MAAM,EAAE;EACX;MACAx3C,IAAI,CAAC2uF,WAAW,CAAC;EACf/3D,MAAAA,KAAK,EAAE,kBAAkB;EACzBpvB,MAAAA,IAAI,EAAEiF,OAAO,CAAC,CAAC,CAAC;EAChBqhF,MAAAA,UAAU,EAAVA;EACF,KAAC,CAAC;EACJ,EAAA;IACA9tF,IAAI,CAAC2uF,WAAW,CAAC;EAAE/3D,IAAAA,KAAK,EAAE,OAAO;EAAEpvB,IAAAA,IAAI,EAAE0xD,SAAS;EAAE40B,IAAAA,UAAU,EAAVA;EAAW,GAAC,CAAC;EACnE;EAEA,SAASI,cAAcA,CAACt3D,KAAK,EAAEpvB,IAAI,EAAEsmF,UAAU,EAAE;IAC/C9tF,IAAI,CAAC2uF,WAAW,CAAC;EAAE/3D,IAAAA,KAAK,EAALA,KAAK;EAAEpvB,IAAAA,IAAI,EAAJA,IAAI;EAAEsmF,IAAAA,UAAU,EAAVA;EAAW,GAAC,CAAC;EAC/C;EAEA,SAASK,iBAAiBA,CAAClvF,MAAe,EAAE6uF,UAAkB,EAAE;EAAA,EAAA,IAAA/gE,KAAA,GAAA,SAAAA,KAAAA,CAAA6hE,KAAA,EAClC;EAC1B3vF,IAAAA,MAAM,CAAC2vF,KAAK,CAAC,GAAG,YAAY;EAC1B,MAAA,IAAM3pD,OAAO,GAAGnqB,KAAK,CAACpe,SAAS,CAACgd,IAAI,CAACvT,IAAI,CAAC0U,SAAS,EAAE,GAAG,CAAC;QACzDqzE,cAAc,CACZ,WAAW,EACX;EACEW,QAAAA,OAAO,EAAED,KAAK;EACd3pD,QAAAA,OAAO,EAAPA;SACD,EACD6oD,UACF,CAAC;MACH,CAAC;IACH,CAAC;IAZD,KAAK,IAAMc,KAAK,IAAI3vF,MAAM,EAAA;EAAA8tB,IAAAA,KAAA,CAAA6hE,KAAA,CAAA;EAAA,EAAA;EAa5B;EAEA,SAASL,aAAaA,CAACzB,WAA0B,EAAE;IACjD,OACE,CAACA,WAAW,CAACniF,KAAK,IAClB,CAACmiF,WAAW,CAACliF,KAAK,IAClB,CAACkiF,WAAW,CAACnhF,IAAI,IACjB,CAACmhF,WAAW,CAACphF,GAAG,IAChB,CAACohF,WAAW,CAACnlF,WAAW;EAE5B;;EC5NO,IAAMqF,OAAO,GAAG,QAAW;;ECAlC;EACA;EAIA,IAAM8hF,WAA0C,GAAG,EAAE;EAE9C,SAASC,YAAYA,GAAY;IACtC,OAAO,OAAOC,qBAAqB,KAAK,UAAU;EACpD;EASO,SAASC,YAAYA,GAAkB;EAC5C,EAAA,IAAMC,aAAa,GAAGJ,WAAW,CAAC9hF,OAAO,CAAC;EAC1C,EAAA,IAAIkiF,aAAa,EAAE;MACjBA,aAAa,CAACC,WAAW,EAAE;EAC3B,IAAA,OAAOD,aAAa;EACtB,EAAA;EACA,EAAA,IAAME,IAAI,GAAG,IAAIpvF,IAAI,CAACjG,IAAI,CACxB,CAAA,uFAAA,GAC0Fi1F,qBAAqB,CAACh1F,QAAQ,EAAE,cACzH,EACD;EACE6F,IAAAA,IAAI,EAAE;EACR,GACF,CAAC;IACD,IAAMwvF,SAAS,GAAGrvF,IAAI,CAACnG,GAAG,CAACC,eAAe,CAACs1F,IAAI,CAAC;IAChD,IAAME,MAAM,GAAG,IAAItvF,IAAI,CAACuvF,MAAM,CAACF,SAAS,CAAC;EACzC,EAAA,IAAMjjF,MAAM,GAAG;EACbkjF,IAAAA,MAAM,EAANA,MAAM;EACND,IAAAA,SAAS,EAATA,SAAS;EACTF,IAAAA,WAAW,EAAE;KACd;EACDL,EAAAA,WAAW,CAAC9hF,OAAO,CAAC,GAAGZ,MAAM;EAC7B,EAAA,OAAOA,MAAM;EACf;EAEO,SAASojF,UAAUA,CAAChjF,IAAY,EAAiB;EACtD,EAAA,IAAM0iF,aAAa,GAAGJ,WAAW,CAACtiF,IAAI,CAAC;EACvC,EAAA,IAAI0iF,aAAa,EAAE;MACjBA,aAAa,CAACC,WAAW,EAAE;EAC3B,IAAA,OAAOD,aAAa;EACtB,EAAA;EACA,EAAA,IAAMO,SAAS,GAAG,IAAIzvF,IAAI,CAACnG,GAAG,CAAC2S,IAAI,EAAExM,IAAI,CAAC0vF,QAAQ,CAAC1mE,IAAI,CAAC,CAACA,IAAI;IAC7D,IAAMsmE,MAAM,GAAG,IAAItvF,IAAI,CAACuvF,MAAM,CAACE,SAAS,CAAC;EACzC,EAAA,IAAMrjF,MAAM,GAAG;EACbkjF,IAAAA,MAAM,EAANA,MAAM;EACNG,IAAAA,SAAS,EAATA,SAAS;EACTN,IAAAA,WAAW,EAAE;KACd;EACDL,EAAAA,WAAW,CAACtiF,IAAI,CAAC,GAAGJ,MAAM;EAC1B,EAAA,OAAOA,MAAM;EACf;EAEO,SAASujF,qBAAqBA,CAACnjF,IAAoB,EAAE;EAC1D,EAAA,IAAM0iF,aAAa,GAAGJ,WAAW,CAACtiF,IAAI,IAAIQ,OAAO,CAAC;EAClD,EAAA,IAAIkiF,aAAa,EAAE;EACjB,IAAA,IAAMC,WAAW,GAAGD,aAAa,CAACC,WAAW,EAAE;MAC/C,IAAIA,WAAW,KAAK,CAAC,EAAE;EACrB,MAAA,IAAQG,MAAM,GAAgBJ,aAAa,CAAnCI,MAAM;UAAED,SAAS,GAAKH,aAAa,CAA3BG,SAAS;EACzB,MAAA,OAAOP,WAAW,CAACtiF,IAAI,IAAIQ,OAAO,CAAC;EACnC,MAAA,IAAIqiF,SAAS,EAAE;EACb;EACArvF,QAAAA,IAAI,CAACnG,GAAG,CAACI,eAAe,CAACo1F,SAAS,CAAC;EACrC,MAAA;QACAC,MAAM,CAACM,SAAS,EAAE;EACpB,IAAA;EACF,EAAA;EACF;;ECjDA,IAAIC,uBAA+B,GAAG,CAAC;EAAC,IAEnBC,mBAAmB,gBAAA,YAAA;IActC,SAAAA,mBAAAA,CACE/+D,IAAQ,EACRjxB,EAAqB,EACrBiwF,kBAA8D,EAC9DC,OAA2C,EAC3C;EAAA,IAAA,IAAA9pF,KAAA,GAAA,IAAA;MAAA,IAAA,CAlBKvM,KAAK,GAAiB,IAAI;EAAA,IAAA,IAAA,CACzBo3B,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHjxB,EAAE,GAAA,MAAA;MAAA,IAAA,CACFguF,UAAU,GAAW+B,uBAAuB,EAAE;EAAA,IAAA,IAAA,CAC9CttB,QAAQ,GAAA,MAAA;MAAA,IAAA,CACRz8D,IAAI,GAAyB,IAAI;MAAA,IAAA,CACjC6iB,IAAI,GAAgB,IAAI;EAAA,IAAA,IAAA,CACxBsnE,SAAS,GAAA,MAAA;MAAA,IAAA,CACTf,aAAa,GAAyB,IAAI;MAAA,IAAA,CAC1Cj8B,UAAU,GAAsB,IAAI;EAAA,IAAA,IAAA,CACpC88B,kBAAkB,GAAA,MAAA;EAAA,IAAA,IAAA,CAClBC,OAAO,GAAA,MAAA;EAAA,IAAA,IAAA,CAiUPE,eAAe,GAAG,UACxBt5D,KAIS,EACN;EACH,MAAA,IAAMpvB,IAAI,GAAGovB,KAAK,CAACpvB,IAAI;EACvB,MAAA,IAAMupB,GAAG,GAAG7qB,KAAI,CAAC6qB,GAAG;EACpB,MAAA,IAAI,CAACA,GAAG,IAAI,EAACvpB,IAAI,YAAJA,IAAI,CAAEovB,KAAK,CAAA,IAAIpvB,IAAI,CAACsmF,UAAU,KAAK5nF,KAAI,CAAC4nF,UAAU,EAAE;EAC/D,QAAA;EACF,MAAA;QACA,QAAQtmF,IAAI,CAACovB,KAAK;EAChB,QAAA,KAAK,MAAM;EAAE,UAAA;EAAA,YAAA,IAAAu5D,mBAAA;cACX,IAAMd,SAAS,GAAA,CAAAc,mBAAA,GAAGjqF,KAAI,CAACgpF,aAAa,KAAA,IAAA,GAAA,MAAA,GAAlBiB,mBAAA,CAAoBd,SAAS;EAC/C,YAAA,IAAIA,SAAS,EAAE;EACb;EACArvF,cAAAA,IAAI,CAACnG,GAAG,CAACI,eAAe,CAACo1F,SAAS,CAAC;EACrC,YAAA;EACA,YAAA;EACF,UAAA;EAEA,QAAA,KAAK,kBAAkB;EAAE,UAAA;EACvBnpF,YAAAA,KAAI,CAACkqF,sBAAsB,CAAC5oF,IAAI,CAACA,IAAI,CAAC;EACtC,YAAA;EACF,UAAA;EAEA,QAAA,KAAK,OAAO;EAAE,UAAA;EACZtB,YAAAA,KAAI,CAAC8pF,OAAO,CAACxoF,IAAI,CAACA,IAAI,CAAC;EACvB,YAAA;EACF,UAAA;;EAEA;EACA,QAAA,KAAK,WAAW;EAAE,UAAA;cAChB,IAAIupB,GAAG,CAAC9xB,MAAM,CAACuI,IAAI,CAACA,IAAI,CAACqnF,OAAO,CAAC,EAAE;EACjC99D,cAAAA,GAAG,CAAC9xB,MAAM,CAACuI,IAAI,CAACA,IAAI,CAACqnF,OAAO,CAAC,CAACrnF,IAAI,CAACA,IAAI,CAACy9B,OAAO,CAAC;EAClD,YAAA;EACA,YAAA;EACF,UAAA;EAEA,QAAA;EAAS,UAAA;cACPz9B,IAAI,CAACA,IAAI,GAAGA,IAAI,CAACA,IAAI,IAAI,EAAE;EAC3BA,YAAAA,IAAI,CAACA,IAAI,CAAC1B,IAAI,GAAGI,KAAI,CAACJ,IAAI;EAC1B0B,YAAAA,IAAI,CAACA,IAAI,CAACmhB,IAAI,GAAGziB,KAAI,CAACyiB,IAAI;EAC1BnhB,YAAAA,IAAI,CAACA,IAAI,CAAC1H,EAAE,GAAGoG,KAAI,CAACpG,EAAE;cACtBixB,GAAG,CAACiE,OAAO,CAACxtB,IAAI,CAACovB,KAAK,EAAwBpvB,IAAI,CAACA,IAAI,CAAC;EACxD,YAAA;EACF,UAAA;EACF;MACF,CAAC;EAAA,IAAA,IAAA,CAEO6oF,aAAa,GAAG,UAACz5D,KAAK,EAAK;EACjC,MAAA,IAAI,CAAC1wB,KAAI,CAAC6qB,GAAG,EAAE;EACb,QAAA;EACF,MAAA;EACA,MAAA,IAAMp3B,KAAK,GAAG,IAAIgrB,KAAK,CAClBiS,KAAK,CAACqO,OAAO,GAAA,KAAA,GAAMrO,KAAK,CAAC05D,QAAQ,GAAA,GAAA,GAAI15D,KAAK,CAAC25D,MAAM,MACtD,CAAC;EACDrqF,MAAAA,KAAI,CAAC6qB,GAAG,CAACrJ,MAAM,CAAC8oE,YAAY,GAAG,KAAK;QACpCtqF,KAAI,CAAC6qB,GAAG,CAAC9xB,MAAM,CAACG,IAAI,CAAA,aAAA,GACL8G,KAAI,CAACpG,EAAE,GAAA,mCACtB,CAAC;QACDoG,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;UAC5BpyC,OAAO,EAAE/sB,YAAY,CAACynC,kBAAkB;EACxC/L,QAAAA,KAAK,EAAE,KAAK;EACZH,QAAAA,KAAK,EAAE,eAAe;EACtBj9B,QAAAA,KAAK,EAALA;EACF,OAAC,CAAC;MACJ,CAAC;EA9XC,IAAA,IAAM+tB,MAAM,GAAGqJ,IAAG,CAACrJ,MAAM;MACzB,IAAI,CAACqJ,GAAG,GAAGA,IAAG;MACd,IAAI,CAACjxB,EAAE,GAAGA,EAAE;EACZ,IAAA,IAAI,CAACmwF,SAAS,GAAG,CAAC,CAACvoE,MAAM,CAAC8oE,YAAY;MACtC,IAAI,CAACT,kBAAkB,GAAGA,kBAAkB;MAC5C,IAAI,CAACC,OAAO,GAAGA,OAAO;MAEtB,IAAM9B,cAAc,GAAG,SAAjBA,cAAcA,CAClBL,EAAwC,EACxCrmF,IAAmC,EAChC;EACHA,MAAAA,IAAI,GAAGA,IAAI,IAAI,EAAE;EACjBA,MAAAA,IAAI,CAAC1B,IAAI,GAAGI,KAAI,CAACJ,IAAI,IAAIjF,SAAS;EAClC,MAAA,IAAIgtF,EAAE,KAAKvyF,MAAM,CAACk7B,KAAK,EAAE;EACvBhvB,QAAAA,IAAI,GAAGA,IAAiB;EACxBA,QAAAA,IAAI,CAACu6B,MAAM,GAAG77B,KAAI,CAACpG,EAAE;EACrB0H,QAAAA,IAAI,CAACmhB,IAAI,GAAGziB,KAAI,CAACyiB,IAAI;EACrBziB,QAAAA,KAAI,CAACvM,KAAK,GAAG6N,IAAI,CAAC7N,KAAK;EACzB,MAAA;QACAuM,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC64D,EAAE,EAAErmF,IAAI,CAAC;MAC5B,CAAC;;EAED;EACA,IAAA,IAAI,CAAC+6D,QAAQ,GAAG,IAAI0rB,YAAY,EAAqB;MACrD,IAAI,CAAC1rB,QAAQ,CAAChtC,EAAE,CAACj6B,MAAM,CAAC28D,cAAc,EAAEi2B,cAAc,CAAC;MACvD,IAAI,CAAC3rB,QAAQ,CAAChtC,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE03D,cAAc,CAAC;EAE9C,IAAA,IAAMuC,iBAAiB,GAAG9tE,0BAA0B,CAClD+E,MAAM,CAAC9mB,wBACT,CAAC;MAED,IAAI,IAAI,CAACqvF,SAAS,IAAI,OAAOV,MAAM,KAAK,WAAW,EAAE;EACnD,MAAA,IAAMtwF,MAAM,GAAG,IAAI,CAAC8xB,GAAG,CAAC9xB,MAAM;QAC9B,IAAMyxF,eAAe,GAAGhpE,MAAM,CAACipE,UAAU,IAAI5B,YAAY,EAAE;EAC3D,MAAA,IAAI2B,eAAe,EAAE;UACnB,IAAI;YACF,IAAIhpE,MAAM,CAACipE,UAAU,EAAE;cACrB1xF,MAAM,CAACzC,GAAG,CAAA,qBAAA,GAAuBkrB,MAAM,CAACipE,UAAU,GAAA,SAAA,GAAS7wF,EAAE,GAAA,IAAG,CAAC;cACjE,IAAI,CAACovF,aAAa,GAAGM,UAAU,CAAC9nE,MAAM,CAACipE,UAAU,CAAC;EACpD,UAAA,CAAC,MAAM;EACL1xF,YAAAA,MAAM,CAACzC,GAAG,CAAA,6BAAA,GAA8BsD,EAAE,OAAG,CAAC;EAC9C,YAAA,IAAI,CAACovF,aAAa,GAAGD,YAAY,EAAE;EACrC,UAAA;EACA,UAAA,IAAQK,MAAM,GAAK,IAAI,CAACJ,aAAa,CAA7BI,MAAM;YACdA,MAAM,CAACx9B,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACo+B,eAAe,CAAC;YACxDZ,MAAM,CAACx9B,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACu+B,aAAa,CAAC;YACpDf,MAAM,CAACX,WAAW,CAAC;cACjBb,UAAU,EAAE,IAAI,CAACA,UAAU;EAC3BC,YAAAA,GAAG,EAAE,MAAM;EACX/U,YAAAA,aAAa,EAAEyX,iBAAiB;EAChC3wF,YAAAA,EAAE,EAAFA,EAAE;cACF4nB,MAAM,EAAEqE,SAAS,CAACrE,MAAM;EAC1B,WAAC,CAAC;UACJ,CAAC,CAAC,OAAOypB,GAAG,EAAE;EACZlyC,UAAAA,MAAM,CAACG,IAAI,CAAA,qBAAA,GACYU,EAAE,GAAA,mCAAA,EACvBqxC,GACF,CAAC;YACD,IAAI,CAACy/C,eAAe,EAAE;YACtB,IAAI,CAACj3F,KAAK,GAAG,IAAI;YACjB,IAAI,CAACs5D,UAAU,GAAG,IAAI+3B,UAAU,CAC9B,IAAI,CAACzoB,QAAQ,EACbkuB,iBAAiB,EACjB/oE,MAAM,EACN,EAAE,EACF5nB,EAAE,EACFixB,IAAG,CAAC9xB,MACN,CAAC;EACH,QAAA;EACA,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAI,CAACg0D,UAAU,GAAG,IAAI+3B,UAAU,CAC9B,IAAI,CAACzoB,QAAQ,EACbkuB,iBAAiB,EACjB/oE,MAAM,EACN,EAAE,EACF5nB,EAAE,EACFixB,IAAG,CAAC9xB,MACN,CAAC;EACH,EAAA;EAAC,EAAA,IAAAxC,MAAA,GAAAqzF,mBAAA,CAAApzF,SAAA;EAAAD,EAAAA,MAAA,CAED8zC,KAAK,GAAL,SAAAA,KAAKA,GAAG;MACN,IAAI,CAACzqC,IAAI,GAAG,IAAI;MAChB,IAAI,CAAC6iB,IAAI,GAAG,IAAI;MAChB,IAAI,IAAI,CAACumE,aAAa,EAAE;EACtB,MAAA,IAAMpB,UAAU,GAAG,IAAI,CAACA,UAAU;EAClC,MAAA,IAAI,CAACA,UAAU,GAAG+B,uBAAuB,EAAE;EAC3C,MAAA,IAAMnoE,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;EAC9B,MAAA,IAAM+oE,iBAAiB,GAAG9tE,0BAA0B,CAClD+E,MAAM,CAAC9mB,wBACT,CAAC;EACD,MAAA,IAAI,CAACsuF,aAAa,CAACI,MAAM,CAACX,WAAW,CAAC;UACpCb,UAAU,EAAE,IAAI,CAACA,UAAU;EAC3BC,QAAAA,GAAG,EAAE,OAAO;EACZC,QAAAA,OAAO,EAAEF,UAAU;EACnB9U,QAAAA,aAAa,EAAEyX,iBAAiB;UAChC3wF,EAAE,EAAE,IAAI,CAACA,EAAE;UACX4nB,MAAM,EAAEqE,SAAS,CAACrE,MAAM;EAC1B,OAAC,CAAC;EACJ,IAAA;IACF,CAAC;EAAAjrB,EAAAA,MAAA,CAEOm0F,eAAe,GAAvB,SAAQA,eAAeA,GAAG;MACxB,IAAI,IAAI,CAAC1B,aAAa,EAAE;EACtB,MAAA,IAAQI,MAAM,GAAK,IAAI,CAACJ,aAAa,CAA7BI,MAAM;QACd,IAAI,CAACJ,aAAa,GAAG,IAAI;QACzBI,MAAM,CAACt9B,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACk+B,eAAe,CAAC;QAC3DZ,MAAM,CAACt9B,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAACq+B,aAAa,CAAC;QACvDQ,qBAAkB,CAAC,IAAI,CAAC9/D,GAAG,CAACrJ,MAAM,CAACipE,UAAU,CAAC;EAChD,IAAA;IACF,CAAC;EAAAl0F,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,IAAI,CAACuwF,aAAa,EAAE;QACtB,IAAI,CAAC0B,eAAe,EAAE;EACtB;EACA,MAAA,IAAI,CAACV,eAAe,GAAG,IAAI,CAACG,aAAa,GAAG,IAAI;EAClD,IAAA,CAAC,MAAM;EACL,MAAA,IAAMp9B,UAAU,GAAG,IAAI,CAACA,UAAU;EAClC,MAAA,IAAIA,UAAU,EAAE;UACdA,UAAU,CAACt0D,OAAO,EAAE;UACpB,IAAI,CAACs0D,UAAU,GAAG,IAAI;EACxB,MAAA;EACF,IAAA;EACA,IAAA,IAAMsP,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAIA,QAAQ,EAAE;QACZA,QAAQ,CAACgZ,kBAAkB,EAAE;EAC/B,IAAA;MACA,IAAI,CAACz1E,IAAI,GAAG,IAAI;MAChB,IAAI,CAAC6iB,IAAI,GAAG,IAAI;EAChB;MACA,IAAI,CAAC45C,QAAQ,GAAG,IAAI;EACpB;MACA,IAAI,CAACxxC,GAAG,GAAG,IAAI;IACjB,CAAC;IAAAt0B,MAAA,CAED+O,IAAI,GAAJ,SAAAA,IAAIA,CACFhE,IAAiB,EACjBskF,eAAuC,EACvC7nE,UAA8B,EAC9BrD,UAA8B,EAC9B9a,IAAmB,EACnB6iB,IAAiB,EACjBjiB,QAAgB,EAChB88E,kBAA2B,EAC3BtqB,SAAwB,EACxBwwB,cAAgC,EAChC;EAAA,IAAA,IAAAoH,iBAAA;QAAAC,qBAAA;QAAA3mF,MAAA,GAAA,IAAA;MACA8uD,SAAS,CAACljB,WAAW,CAAChyC,KAAK,GAAGhE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACpD,IAAA,IAAQ27D,UAAU,GAAiB,IAAI,CAA/BA,UAAU;QAAE76B,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAC9B,IAAMx8C,UAAU,GAAGkS,IAAI,GAAGA,IAAI,CAAC3kB,KAAK,GAAG8B,IAAI,CAAC9B,KAAK;EACjD;EACA,IAAA,IAAMwO,WAAW,GAAG1M,IAAI,CAAC0M,WAAW;EACpC,IAAA,IAAMw+E,QAAQ,GAAG,IAAI,CAAClrF,IAAI;EAE1B,IAAA,IAAM4lF,aAAa,GAAG,EAAEsF,QAAQ,IAAIlrF,IAAI,CAACiB,EAAE,KAAKiqF,QAAQ,CAACjqF,EAAE,CAAC;EAC5D,IAAA,IAAM4kF,WAAW,GAAG,EAAEqF,QAAQ,IAAI93B,SAAS,CAACpyD,KAAK,KAAKkqF,QAAQ,CAAClqF,KAAK,CAAC;EACrE,IAAA,IAAMmqF,MAAM,GAAGD,QAAQ,GAAG93B,SAAS,CAACnzD,EAAE,GAAGirF,QAAQ,CAACjrF,EAAE,GAAG,EAAE;EACzD,IAAA,IAAMmrF,QAAQ,GAAG,IAAI,CAACvoE,IAAI,GAAGuwC,SAAS,CAACvwC,IAAI,GAAG,IAAI,CAACA,IAAI,CAACxe,KAAK,GAAG,EAAE;MAClE,IAAM4vD,WAAW,GACfk3B,MAAM,KAAK,CAAC,IACZ/3B,SAAS,CAACp5D,EAAE,GAAG,CAAC,IAChBo5D,SAAS,CAACp5D,EAAE,MAAKkxF,QAAQ,oBAARA,QAAQ,CAAEhoF,KAAK,CAACnF,UAAU,CAAA;MAC7C,IAAMqpD,UAAU,GACd,CAACy+B,WAAW,KACXsF,MAAM,KAAK,CAAC,IACVA,MAAM,KAAK,CAAC,KAAKC,QAAQ,KAAK,CAAC,IAAKn3B,WAAW,IAAIm3B,QAAQ,IAAI,CAAE,CAAE,CAAC;MACzE,IAAM/+D,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAElC,IAAA,IAAIw5D,WAAW,IAAIsF,MAAM,IAAInrF,IAAI,CAACkD,KAAK,CAAC7E,OAAO,CAACH,KAAK,KAAK,CAAC,EAAE;EAC3D8B,MAAAA,IAAI,CAACkD,KAAK,CAAC7E,OAAO,CAACH,KAAK,GAAGmuB,GAAG;EAChC,IAAA;EACA,IAAA,IAAIxJ,IAAI,KAAKuoE,QAAQ,IAAI,CAAChkC,UAAU,CAAC,EAAE;EACrCvkC,MAAAA,IAAI,CAAC3f,KAAK,CAAC7E,OAAO,CAACH,KAAK,GAAGmuB,GAAG;EAChC,IAAA;MACA,IAAMy5D,iBAAiB,GAAG,EACxBoF,QAAQ,IAAI,EAAAF,iBAAA,GAAAhrF,IAAI,CAAC6B,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhBmpF,iBAAA,CAAkBl3F,GAAG,OAAA,CAAAm3F,qBAAA,GAAKC,QAAQ,CAACrpF,WAAW,KAAA,IAAA,GAAA,MAAA,GAApBopF,qBAAA,CAAsBn3F,GAAG,CAAA,CAChE;EACD,IAAA,IAAMm6D,KAAK,GAAG,IAAI05B,aAAa,CAC7B/B,aAAa,EACbx+B,UAAU,EACVs2B,kBAAkB,EAClBmI,WAAW,EACXl1E,UAAU,EACVm1E,iBACF,CAAC;EACD,IAAA,IAAI,CAAC1+B,UAAU,IAAIw+B,aAAa,IAAIE,iBAAiB,EAAE;EACrD,MAAA,IAAI,CAAC76D,GAAG,CAAC9xB,MAAM,CACZzC,GAAG,CAAA,4DAAA,GAA8DsJ,IAAI,CAACjG,IAAI,GAAA,OAAA,GAAQq5D,SAAS,CAACnzD,EAAE,IAC/FmzD,SAAS,CAACvwC,IAAI,GAAG,EAAE,GAAG,SAAS,GAAGuwC,SAAS,CAACvwC,IAAI,GAAG,EAAE,CAAA,GAAA,GAAA,IACnD,IAAI,CAAC7oB,EAAE,KAAKlE,iBAAiB,CAACC,IAAI,GAAG,OAAO,GAAG,OAAO,CAAA,GAAA,IAAA,GAAKq9D,SAAS,CAACpyD,KAAK,GAAA,OAAA,GAAQoyD,SAAS,CAACp5D,EAAE,GAAA,2BAAA,GAC/E4rF,aAAa,GAAA,yBAAA,GACfC,WAAW,GAAA,wBAAA,GACZz+B,UAAU,GAAA,gCAAA,GACFs2B,kBAAkB,GAAA,wBAAA,GAC1B/sE,UAAU,GAAA,+BAAA,GACHm1E,iBAAmB,CAAC;EAC3C,MAAA,IAAMlkE,MAAM,GAAG,IAAI8lE,cAAc,CAC/BvpE,UAAU,EACVrD,UAAU,EACVkrE,eAAe,EACfplF,QAAQ,EACRgjF,cACF,CAAC;EACD,MAAA,IAAI,CAAC0C,mBAAmB,CAAC1kE,MAAM,CAAC;EAClC,IAAA;MAEA,IAAI,CAAC5hB,IAAI,GAAGA,IAAI;MAChB,IAAI,CAAC6iB,IAAI,GAAGA,IAAI;;EAEhB;MACA,IAAI,IAAI,CAACumE,aAAa,EAAE;EACtB;EACA,MAAA,IAAI,CAACA,aAAa,CAACI,MAAM,CAACX,WAAW,CACnC;EACEb,QAAAA,UAAU,EAAVA,UAAU;EACVC,QAAAA,GAAG,EAAE,OAAO;EACZvmF,QAAAA,IAAI,EAAJA,IAAI;EACJgL,QAAAA,WAAW,EAAXA,WAAW;EACX0mD,QAAAA,SAAS,EAATA,SAAS;EACTnF,QAAAA,KAAK,EAALA;SACD,EACDvsD,IAAI,YAAYkU,WAAW,GAAG,CAAClU,IAAI,CAAC,GAAG,EACzC,CAAC;MACH,CAAC,MAAM,IAAIyrD,UAAU,EAAE;EACrB,MAAA,IAAMm7B,cAAc,GAAGn7B,UAAU,CAACznD,IAAI,CACpChE,IAAI,EACJgL,WAAW,EACX0mD,SAAS,EACTnF,KACF,CAAC;EACD,MAAA,IAAIw4B,SAAS,CAAC6B,cAAc,CAAC,EAAE;EAC7BA,QAAAA,cAAc,CACXjoE,IAAI,CAAC,UAAC3e,IAAI,EAAK;EACd4C,UAAAA,MAAI,CAACgmF,sBAAsB,CAAC5oF,IAAI,CAAC;EACnC,QAAA,CAAC,CAAC,CACD4e,KAAK,CAAC,UAACzsB,KAAK,EAAK;YAChByQ,MAAI,CAAC+mF,eAAe,CAClBx3F,KAAK,EACLu/D,SAAS,EACT,iCACF,CAAC;EACH,QAAA,CAAC,CAAC;EACN,MAAA,CAAC,MAAM;EACL,QAAA,IAAI,CAACk3B,sBAAsB,CAAChC,cAAkC,CAAC;EACjE,MAAA;EACF,IAAA;IACF,CAAC;EAAA3xF,EAAAA,MAAA,CAED6zC,KAAK,GAAL,SAAAA,KAAKA,CAAC4oB,SAAwB,EAAE;EAAA,IAAA,IAAAjgC,MAAA,GAAA,IAAA;MAC9BigC,SAAS,CAACljB,WAAW,CAAChyC,KAAK,GAAGhE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACpD,IAAA,IAAQ27D,UAAU,GAAiB,IAAI,CAA/BA,UAAU;QAAE76B,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAC9B,IAAI,IAAI,CAACi8B,aAAa,EAAE;EAEtB,MAAA,IAAI,CAACA,aAAa,CAACI,MAAM,CAACX,WAAW,CAAC;EACpCb,QAAAA,UAAU,EAAVA,UAAU;EACVC,QAAAA,GAAG,EAAE,OAAO;EACZ70B,QAAAA,SAAS,EAATA;EACF,OAAC,CAAC;MACJ,CAAC,MAAM,IAAIjG,UAAU,EAAE;EACrB,MAAA,IAAMm7B,cAAc,GAAGn7B,UAAU,CAAC3iB,KAAK,CAAC4oB,SAAS,CAAC;EAClD,MAAA,IAAIqzB,SAAS,CAAC6B,cAAc,CAAC,EAAE;EAC7BA,QAAAA,cAAc,CACXjoE,IAAI,CAAC,UAAC3e,IAAI,EAAK;EACdyxB,UAAAA,MAAI,CAACq1D,iBAAiB,CAAC9mF,IAAI,EAAE0xD,SAAS,CAAC;EACzC,QAAA,CAAC,CAAC,CACD9yC,KAAK,CAAC,UAACzsB,KAAK,EAAK;YAChBs/B,MAAI,CAACk4D,eAAe,CAClBx3F,KAAK,EACLu/D,SAAS,EACT,kCACF,CAAC;EACH,QAAA,CAAC,CAAC;EACN,MAAA,CAAC,MAAM;EACL,QAAA,IAAI,CAACo1B,iBAAiB,CAACF,cAAc,EAAEl1B,SAAS,CAAC;EACnD,MAAA;EACF,IAAA;IACF,CAAC;IAAAz8D,MAAA,CAEO00F,eAAe,GAAvB,SAAQA,eAAeA,CACrBx3F,KAAY,EACZu/D,SAAwB,EACxBrrC,MAAc,EACd;EACA,IAAA,IAAI,CAAC,IAAI,CAACkD,GAAG,EAAE;EACb,MAAA;EACF,IAAA;MACA,IAAI,CAACp3B,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACo3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;QAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;QAC5BzsB,OAAO,EAAE/sB,YAAY,CAACimC,kBAAkB;EACxC43B,MAAAA,SAAS,EAATA,SAAS;EACTpzD,MAAAA,IAAI,EAAE,IAAI,CAACA,IAAI,IAAIjF,SAAS;EAC5B8nB,MAAAA,IAAI,EAAE,IAAI,CAACA,IAAI,IAAI9nB,SAAS;EAC5Bk2B,MAAAA,KAAK,EAAE,KAAK;EACZp9B,MAAAA,KAAK,EAALA,KAAK;EACLw3C,MAAAA,GAAG,EAAEx3C,KAAK;EACVk0B,MAAAA,MAAM,EAANA;EACF,KAAC,CAAC;IACJ,CAAC;IAAApxB,MAAA,CAEO6xF,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvB7hF,OAAgC,EAChCysD,SAAwB,EACxB;EAAA,IAAA,IAAApB,MAAA,GAAA,IAAA;EACArrD,IAAAA,OAAO,CAAChM,OAAO,CAAC,UAAC2L,MAAM,EAAK;EAC1B0rD,MAAAA,MAAI,CAACs4B,sBAAsB,CAAChkF,MAAM,CAAC;EACrC,IAAA,CAAC,CAAC;EACF,IAAA,IAAI,CAAC4jF,OAAO,CAAC92B,SAAS,CAAC;IACzB,CAAC;EAAAz8D,EAAAA,MAAA,CAyEO2vF,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAAC1kE,MAAsB,EAAE;EAClD,IAAA,IAAQomE,UAAU,GAAiB,IAAI,CAA/BA,UAAU;QAAE76B,UAAU,GAAK,IAAI,CAAnBA,UAAU;MAC9B,IAAI,IAAI,CAACi8B,aAAa,EAAE;EACtB,MAAA,IAAI,CAACA,aAAa,CAACI,MAAM,CAACX,WAAW,CAAC;EACpCb,QAAAA,UAAU,EAAVA,UAAU;EACVC,QAAAA,GAAG,EAAE,WAAW;EAChBrmE,QAAAA,MAAM,EAANA;EACF,OAAC,CAAC;MACJ,CAAC,MAAM,IAAIurC,UAAU,EAAE;EACrBA,MAAAA,UAAU,CAACu4B,SAAS,CAAC9jE,MAAM,CAAC;EAC9B,IAAA;IACF,CAAC;EAAAjrB,EAAAA,MAAA,CAEO2zF,sBAAsB,GAA9B,SAAQA,sBAAsBA,CAAChkF,MAAwB,EAAE;EACvDA,IAAAA,MAAM,CAAC8sD,SAAS,CAACljB,WAAW,CAAC9xC,GAAG,GAAGlE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EACzD,IAAA,IAAI,CAAC49D,kBAAkB,CAAC3jF,MAAM,CAAC;IACjC,CAAC;EAAA,EAAA,OAAA0jF,mBAAA;EAAA,CAAA,EAAA;;EC9YH,IAAMsB,eAAa,GAAG,GAAG,CAAC;EAAC,IASrBC,qBAAqB,0BAAAC,qBAAA,EAAA;EAgBzB,EAAA,SAAAD,sBACEtgE,GAAQ,EACRgiC,eAAgC,EAChClsD,SAAoB,EACpB;EAAA,IAAA,IAAAX,KAAA;EACAA,IAAAA,KAAA,GAAAorF,qBAAA,CAAAnrF,IAAA,CAAA,IAAA,EACE4qB,GAAG,EACHgiC,eAAe,EACflsD,SAAS,EACT,yBAAyB,EACzBjL,iBAAiB,CAACE,KACpB,CAAC,IAAA,IAAA;MAACoK,KAAA,CAvBIqrF,UAAU,GAAyB,IAAI;MAAArrF,KAAA,CACvCsrF,eAAe,GAA2B,IAAI;MAAAtrF,KAAA,CAC9CurF,SAAS,GAAY,KAAK;MAAAvrF,KAAA,CAC1BwrF,aAAa,GAAyB,IAAI;MAAAxrF,KAAA,CAC1CyrF,cAAc,GAAyB,IAAI;EAAAzrF,IAAAA,KAAA,CAC3C6H,OAAO,GAAW,EAAE;MAAA7H,KAAA,CACpB0rF,WAAW,GAA6B,IAAI;MAAA1rF,KAAA,CAC5C2rF,WAAW,GAAwB,IAAI;MAAA3rF,KAAA,CACvC4rF,QAAQ,GAAY,KAAK;MAAA5rF,KAAA,CACzB6rF,aAAa,GAAY,KAAK;MAAA7rF,KAAA,CAC9B8rF,qBAAqB,GAA2B,IAAI;MAc1D9rF,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAspF,qBAAA,EAAAC,qBAAA,CAAA;EAAA,EAAA,IAAA70F,MAAA,GAAA40F,qBAAA,CAAA30F,SAAA;EAAAD,EAAAA,MAAA,CAES64C,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;MAC9B,IAAI,CAAC5e,mBAAmB,EAAE;EAC1B46D,IAAAA,qBAAA,CAAA50F,SAAA,CAAM44C,mBAAmB,CAAAnvC,IAAA,CAAA,IAAA,CAAA;MACzB,IAAI,CAAC8rF,SAAS,EAAE;IAClB,CAAC;EAAAx1F,EAAAA,MAAA,CAEOw1F,SAAS,GAAjB,SAAQA,SAASA,GAAG;MAClB,IAAI,CAACJ,WAAW,GACd,IAAI,CAACN,UAAU,GACf,IAAI,CAACC,eAAe,GACpB,IAAI,CAACE,aAAa,GAClB,IAAI,CAACC,cAAc,GACnB,IAAI,CAACC,WAAW,GAChB,IAAI,CAACI,qBAAqB,GACxB,IAAI;IACV,CAAC;EAAAv1F,EAAAA,MAAA,CAES04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5Bm8D,IAAAA,qBAAA,CAAA50F,SAAA,CAAMy4B,iBAAiB,CAAAhvB,IAAA,CAAA,IAAA,CAAA;EACvB,IAAA,IAAQ4qB,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrDpF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC42F,oBAAoB,EAAE,IAAI,CAACC,oBAAoB,EAAE,IAAI,CAAC;EACpEphE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC82F,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACtEthE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACg3F,kBAAkB,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAAC;EAChExhE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk3F,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrD1hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACo3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD5hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;EAC3D7hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACu3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD/hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy3F,cAAc,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDjiE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACo6B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrD5E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;IACzD,CAAC;EAAAt5B,EAAAA,MAAA,CAESi6B,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;MACX,IAAI,CAACA,GAAG,EAAE;EACR,MAAA;EACF,IAAA;EACAugE,IAAAA,qBAAA,CAAA50F,SAAA,CAAMg6B,mBAAmB,CAAAvwB,IAAA,CAAA,IAAA,CAAA;EACzB4qB,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtDpF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC42F,oBAAoB,EAAE,IAAI,CAACC,oBAAoB,EAAE,IAAI,CAAC;EACrEphE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC82F,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvEthE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACg3F,kBAAkB,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAAC;EACjExhE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk3F,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtD1hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACo3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D5hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;EAC5D7hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACu3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D/hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy3F,cAAc,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACzDjiE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACo6B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtD5E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw6B,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EAC1D,EAAA;;EAEA;EAAA;IAAAt5B,MAAA,CACAu2F,cAAc,GAAd,SAAAA,cAAcA,CACZp8D,KAA4B,EAAAtwB,IAAA,EAE5B;EAAA,IAAA,IADER,IAAI,GAAAQ,IAAA,CAAJR,IAAI;QAAEhG,EAAE,GAAAwG,IAAA,CAAFxG,EAAE;QAAE6zD,OAAO,GAAArtD,IAAA,CAAPqtD,OAAO;QAAE1mD,SAAS,GAAA3G,IAAA,CAAT2G,SAAS;QAAEc,OAAO,GAAAzH,IAAA,CAAPyH,OAAO;EAEvC;EACA;EACA,IAAA,IAAIjO,EAAE,KAAKlE,iBAAiB,CAACC,IAAI,EAAE;EACjC,MAAA,IAAMkL,EAAE,GAAGjB,IAAI,CAACiB,EAAE;EAClB,MAAA,IAAMksF,YAAY,GAAG,IAAI,CAACvhE,WAAW;EACrC,MAAA,IAAI,CAACiiC,OAAO,CAAC5sD,EAAE,CAAC,GAAG;EAAEiN,QAAAA,QAAQ,EAAE2/C,OAAO;EAAE1mD,QAAAA,SAAS,EAATA,SAAS;EAAEc,QAAAA,OAAO,EAAPA;SAAS;EAC5D,MAAA,IAAI,CAACvR,GAAG,CAAA,kBAAA,GACauK,EAAE,0BAAqB4sD,OAAO,GAAG1mD,SAAS,GAAA,IAAA,GAAK0mD,OAAO,GAAA,GAAA,GAAI1mD,SAAS,GAAA,aAAA,GAAcc,OACtG,CAAC;QACD,IAAI,CAACwjF,UAAU,GAAGzrF,IAAI;EACtB;EACA,MAAA,IAAI,IAAI,CAACiuD,KAAK,KAAK7B,KAAK,CAACS,gBAAgB,EAAE;EACzC,QAAA,IAAMi/B,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,QAAA,IACG,CAACA,WAAW,IAAI,CAAC,IAAI,CAACh+B,YAAY,IAClCg+B,WAAW,IAAIA,WAAW,CAAC9rF,IAAI,CAACiB,EAAE,KAAKA,EAAG,EAC3C;YACA,IAAI,CAACmsF,cAAc,CAACptF,IAAI,EAAE8rF,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAE9rF,IAAI,CAAC;EAC9C,QAAA;EACF,MAAA,CAAC,MAAM,IACL,CAAC,IAAI,CAACirB,GAAG,CAAC2jC,gBAAgB,IAC1Bu+B,YAAY,IACZA,YAAY,CAAClsF,EAAE,KAAKA,EAAE,EACtB;UACAksF,YAAY,CAACxqF,aAAa,EAAE;EAC5B,QAAA,IAAI,CAACyqF,cAAc,CAACptF,IAAI,EAAEmtF,YAAY,CAAC;QACzC,CAAC,MAAM,IAAI,IAAI,CAACl/B,KAAK,KAAK7B,KAAK,CAACE,IAAI,EAAE;UACpC,IAAI,CAAC/c,IAAI,EAAE;EACb,MAAA;EACF,IAAA;IACF,CAAC;EAAA54C,EAAAA,MAAA,CAES0+D,eAAe,GAAzB,SAAUA,eAAeA,GAAW;MAClC,IAAI,CAAC,IAAI,CAAC1H,kBAAkB,IAAI,IAAI,CAACJ,gBAAgB,IAAI,CAAC,EAAE;QAC1D,OAAO,IAAI,CAACA,gBAAgB;EAC9B,IAAA;EACA,IAAA,OAAAi+B,qBAAA,CAAA50F,SAAA,CAAay+D,eAAe,CAAAh1D,IAAA,CAAA,IAAA,CAAA;IAC9B,CAAC;IAAA1J,MAAA,CAEOy2F,cAAc,GAAtB,SAAQA,cAAcA,CACpB3B,UAAyB,EACzB4B,eAAqC,EACrC;EAAA,IAAA,IAAAC,qBAAA;EACA;EACA,IAAA,IAAM5B,eAAe,GAAG,CAAA,CAAA4B,qBAAA,GAAA,IAAI,CAAC5B,eAAe,KAAA,IAAA,GAAA,MAAA,GAApB4B,qBAAA,CAAsBttF,IAAI,KAAI,IAAI;EAC1D,IAAA,IAAIqtF,eAAe,EAAE;QACnB,IAAI,CAAA3B,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEzqF,EAAE,MAAKosF,eAAe,CAACpsF,EAAE,EAAE;EAC9C;EACA,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,IAAMssF,mBAAmB,GAAG,CAAC7B,eAAe,IAAID,UAAU,EAAExqF,EAAE;EAC9D,IAAA,IAAMusF,YAAY,GAAG,IAAI,CAAC7+B,eAAe,EAAE;EAC3C,IAAA,IAAMr3B,GAAG,GAAG,IAAI,CAAC+9B,eAAe,EAAE;MAClC,IAAMo4B,QAAQ,GAAGp2D,iBAAiB,CAACm2D,YAAY,EAAED,mBAAmB,EAAEj2D,GAAG,CAAC;EAC1E;EACA,IAAA,IAAIm2D,QAAQ,EAAE;QACZ,IAAI,CAAC/2F,GAAG,CAAA,4BAAA,GAA8B+2F,QAAQ,CAACvvF,KAAK,GAAA,MAAA,GAAOuvF,QAAQ,CAACxsF,EAAI,CAAC;QACzE,IAAI,CAAC0sD,kBAAkB,GAAG,KAAK;EAC/B,MAAA,IAAI,CAACJ,gBAAgB,GAAGkgC,QAAQ,CAACvvF,KAAK;QACtC,IAAI,CAACmwD,iBAAiB,EAAE;EACxB,MAAA,IAAI,IAAI,CAACJ,KAAK,KAAK7B,KAAK,CAACE,IAAI,EAAE;UAC7B,IAAI,CAACohC,UAAU,EAAE;EACnB,MAAA;EACF,IAAA;IACF,CAAC;IAAA/2F,MAAA,CAED4jC,SAAS,GAAT,SAAAA,SAASA,CAACC,aAAqB,EAAEmzD,uBAAiC,EAAE;EAClE,IAAA,IAAI,CAAC,IAAI,CAACllE,MAAM,EAAE;QAChB,IAAI,CAAC+R,aAAa,GAAGA,aAAa;EAClC,MAAA,IAAI,CAACyzB,KAAK,GAAG7B,KAAK,CAACC,OAAO;EAC1B,MAAA;EACF,IAAA;EACA,IAAA,IAAMiB,eAAe,GAAG,IAAI,CAACA,eAAe;MAC5C,IAAI,CAAC7yB,QAAQ,EAAE;EACf,IAAA,IAAI,CAACxL,WAAW,CAACq8D,eAAa,CAAC;MAC/B,IAAIh+B,eAAe,GAAG,CAAC,IAAI9yB,aAAa,KAAK,EAAE,EAAE;QAC/C,IAAI,CAAC9jC,GAAG,CAAA,+CAAA,GAC0C42D,eAAe,CAAC3+B,OAAO,CACrE,CACF,CACF,CAAC;EACD6L,MAAAA,aAAa,GAAG8yB,eAAe;EAC/B,MAAA,IAAI,CAACW,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC2B,KAAK,GAAG7B,KAAK,CAACK,aAAa;EAClC,IAAA;MACA,IAAI,CAACc,gBAAgB,GAAG,IAAI,CAACD,eAAe,GAC1C9yB,aAAa,GAAG,IAAI,CAACk1B,cAAc;MACrC,IAAI,CAACl1B,aAAa,GAAGmzD,uBAAuB,GAAG,EAAE,GAAGnzD,aAAa;MACjE,IAAI,CAAC+U,IAAI,EAAE;IACb,CAAC;EAAA54C,EAAAA,MAAA,CAEDm5C,MAAM,GAAN,SAAAA,MAAMA,GAAG;MACP,QAAQ,IAAI,CAACme,KAAK;QAChB,KAAK7B,KAAK,CAACE,IAAI;UACb,IAAI,CAACohC,UAAU,EAAE;EACjB,QAAA;QACF,KAAKthC,KAAK,CAACK,aAAa;EAAE,QAAA;EACxB,UAAA,IAAQhkC,MAAM,GAAc,IAAI,CAAxBA,MAAM;cAAExgB,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACvB,UAAA,IAAM2lF,WAAW,GAAGnlE,MAAM,oBAANA,MAAM,CAAGxgB,OAAO,CAAC;EACrC,UAAA,IAAMqa,OAAO,GAAGsrE,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEtrE,OAAO;YACpC,IAAIA,OAAO,IAAI,CAAC,IAAI,CAACkvC,WAAW,CAACo8B,WAAW,CAAC,EAAE;EAC7C,YAAA,IAAI,IAAI,CAACv0B,gBAAgB,CAAC/2C,OAAO,CAAC,EAAE;EAClC,cAAA;EACF,YAAA;EACA,YAAA,IAAI,CAAC2rC,KAAK,GAAG7B,KAAK,CAACS,gBAAgB;EACrC,UAAA;EACA,UAAA;EACF,QAAA;QACA,KAAKT,KAAK,CAACI,0BAA0B;EAAE,QAAA;YACrC,IAAI,CAAC6N,cAAc,EAAE;EACrB,UAAA;EACF,QAAA;QACA,KAAKjO,KAAK,CAACS,gBAAgB;EAAE,QAAA;EAC3B;EACA,UAAA,IAAMi/B,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,UAAA,IAAIA,WAAW,EAAE;EACf,YAAA,IAAQ9rF,IAAI,GAA4B8rF,WAAW,CAA3C9rF,IAAI;gBAAE6iB,IAAI,GAAsBipE,WAAW,CAArCjpE,IAAI;gBAAExD,KAAK,GAAeysE,WAAW,CAA/BzsE,KAAK;gBAAE6zC,QAAQ,GAAK44B,WAAW,CAAxB54B,QAAQ;EACnC,YAAA,IAAMu4B,UAAU,GAAG,IAAI,CAACA,UAAU;cAClC,IAAI,IAAI,CAAC59B,OAAO,CAAC7tD,IAAI,CAACiB,EAAE,CAAC,KAAKlG,SAAS,EAAE;gBACvC,IAAI,CAAC+wF,WAAW,GAAG,IAAI;EACvB,cAAA,IAAI,CAAC79B,KAAK,GAAG7B,KAAK,CAACx8B,YAAY;gBAC/B,IAAMhb,OAAO,GAAGyK,KAAK,CAACmrB,KAAK,EAAE,CAAC/sC,MAAM;EACpC,cAAA,IAAMiE,IAAoB,GAAG;EAC3B1B,gBAAAA,IAAI,EAAJA,IAAI;EACJ6iB,gBAAAA,IAAI,EAAJA,IAAI;EACJjO,gBAAAA,OAAO,EAAPA,OAAO;EACPm3B,gBAAAA,cAAc,EAAE;iBACjB;EACD,cAAA,IAAI,CAAC0kB,2BAA2B,CAAC/uD,IAAI,CAAC;EACtC,cAAA,IAAIwxD,QAAQ,EAAE;EACZs4B,gBAAAA,qBAAA,CAAA50F,SAAA,CAAMg6D,2BAA2B,CAAAvwD,IAAA,OAACqB,IAAI,CAAA;EACxC,cAAA;EACF,YAAA,CAAC,MAAM,IAAI+pF,UAAU,IAAIA,UAAU,CAACxqF,EAAE,KAAK6qF,WAAW,CAAC9rF,IAAI,CAACiB,EAAE,EAAE;gBAC9D,IAAI,CAACmsF,cAAc,CAAC3B,UAAU,EAAEK,WAAW,CAAC9rF,IAAI,CAAC;EACnD,YAAA;EACF,UAAA,CAAC,MAAM;EACL,YAAA,IAAI,CAACiuD,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,UAAA;EACF,QAAA;EACF;MAEA,IAAI,CAAC8C,SAAS,EAAE;IAClB,CAAC;EAAAz4D,EAAAA,MAAA,CAES03D,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAMy9B,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAIA,WAAW,EAAE;QACf,IAAI,CAAC7+B,eAAe,CAACnrB,cAAc,CAACgqD,WAAW,CAAC9rF,IAAI,CAAC;QACrD,IAAI,CAAC8rF,WAAW,GAAG,IAAI;EACzB,IAAA;EACAN,IAAAA,qBAAA,CAAA50F,SAAA,CAAMy3D,iBAAiB,CAAAhuD,IAAA,CAAA,IAAA,CAAA;IACzB,CAAC;EAAA1J,EAAAA,MAAA,CAESy4D,SAAS,GAAnB,SAAUA,SAASA,GAAG;EACpB,IAAA,IAAQjqC,KAAK,GAAK,IAAI,CAAdA,KAAK;EACb,IAAA,IAAI,EAACA,KAAK,IAAA,IAAA,IAALA,KAAK,CAAE4H,UAAU,CAAA,EAAE;EACtB;EACA,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,CAACugC,eAAe,GAAGnoC,KAAK,CAAC+oC,WAAW;IAC1C,CAAC;EAAAv3D,EAAAA,MAAA,CAEO+2F,UAAU,GAAlB,SAAQA,UAAUA,GAAG;EAAA,IAAA,IAAAG,sBAAA;EACnB,IAAA,IAAQ5iE,GAAG,GAA6B,IAAI,CAApCA,GAAG;QAAExC,MAAM,GAAqB,IAAI,CAA/BA,MAAM;QAAEtD,KAAK,GAAc,IAAI,CAAvBA,KAAK;QAAEld,OAAO,GAAK,IAAI,CAAhBA,OAAO;EACnC,IAAA,IAAM2Z,MAAM,GAAGqJ,GAAG,CAACrJ,MAAM;;EAEzB;EACA;EACA;EACA;EACA;EACA;EACA,IAAA,IACE,CAAC,IAAI,CAACtjB,SAAS,IACd,CAAC6mB,KAAK,IACL,CAAC,IAAI,CAAC2oE,eAAe,KACpB,IAAI,CAACngC,kBAAkB,IAAI,CAAC/rC,MAAM,CAACmsE,iBAAiB,CAAE,IACzD,EAACtlE,MAAM,IAAA,IAAA,IAANA,MAAM,CAAGxgB,OAAO,CAAC,CAAA,EAClB;EACA,MAAA;EACF,IAAA;EAEA,IAAA,IAAM6pB,SAAS,GAAGrJ,MAAM,CAACxgB,OAAO,CAAC;EAEjC,IAAA,IAAMulF,YAAY,GAAG17D,SAAS,CAACxP,OAAO;EACtC,IAAA,IACE,CAACkrE,YAAY,IACb,IAAI,CAACh8B,WAAW,CAAC1/B,SAAS,CAAC,IAC3B,IAAI,CAACunC,gBAAgB,CAACm0B,YAAY,CAAC,EACnC;EACA,MAAA,IAAI,CAACv/B,KAAK,GAAG7B,KAAK,CAACK,aAAa;QAChC,IAAI,CAACkB,kBAAkB,GAAG,KAAK;EAC/B,MAAA;EACF,IAAA;EAEA,IAAA,IAAMmI,UAAU,GAAG,IAAI,CAACzI,WAAW,GAAG,IAAI,CAACA,WAAW,GAAG,IAAI,CAACloC,KAAK;EACnE,IAAA,IAAI,IAAI,CAAC8mE,aAAa,IAAIn2B,UAAU,EAAE;QACpC,IAAI,CAACm2B,aAAa,GAAG,KAAK;EAC1B,MAAA,IAAI,CAACxxB,kBAAkB,CACrB3E,UAAU,EACVv3D,qBAAqB,CAACvI,KAAK,EAC3BF,iBAAiB,CAACE,KACpB,CAAC;EACH,IAAA;MAEA,IAAMg3B,UAAU,GAAG,IAAI,CAACikC,gBAAgB,CACtC6E,UAAU,EACVhgE,iBAAiB,CAACE,KACpB,CAAC;MACD,IAAIg3B,UAAU,KAAK,IAAI,EAAE;EACvB,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,CAAC,IAAI,CAAC6+D,cAAc,IAAI,IAAI,CAACr8B,YAAY,CAACxiC,UAAU,EAAEwgE,YAAY,CAAC,EAAE;EACvEviE,MAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACw4F,UAAU,EAAE;EAAEj0F,QAAAA,IAAI,EAAE;EAAQ,OAAC,CAAC;EACjD,MAAA,IAAI,CAACk0D,KAAK,GAAG7B,KAAK,CAACQ,KAAK;EACxB,MAAA;EACF,IAAA;EAEA,IAAA,IAAMxb,SAAS,GAAGpkB,UAAU,CAACrwB,GAAG;EAChC,IAAA,IAAM05D,SAAS,GAAGprC,GAAG,CAACkmC,eAAe;EAErC,IAAA,IAAMp7B,SAAS,GAAGy3D,YAAY,CAACz3D,SAAS;EACxC,IAAA,IAAM73B,KAAK,GAAG63B,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK;EAChC,IAAA,IAAM+vF,YAAY,GAAG,IAAI,CAAC54B,eAAe,EAAE;MAC3C,IAAMjF,gBAAgB,GAAG,IAAI,CAAC47B,QAAQ,GAAGiC,YAAY,GAAGjhE,UAAU,CAAC5uB,GAAG;EAEtE,IAAA,IAAI,IAAI,CAACytF,cAAc,IAAI1mE,KAAK,EAAE;QAChC,IAAMmS,GAAG,GAAG22D,YAAY;EACxB;EACA,MAAA,IAAIT,YAAY,CAACr3C,QAAQ,IAAI7e,GAAG,GAAGp5B,KAAK,EAAE;EACxC;UACA,IAAI8uB,UAAU,CAAC5uB,GAAG,GAAGF,KAAK,IAAI8uB,UAAU,CAACqkB,SAAS,EAAE;EAClD,UAAA,IAAI,CAAC36C,GAAG,CACN,uEACF,CAAC;EACDyuB,UAAAA,KAAK,CAAC+oC,WAAW,GAAGhwD,KAAK,GAAG,IAAI;EAClC,QAAA;EACF,MAAA;EACF,IAAA;;EAEA;MACA,IACEkzC,SAAS,IAAIilB,SAAS,IACtB,CAAC,IAAI,CAACw1B,cAAc,IACpBz7B,gBAAgB,GAAGr6B,SAAS,CAACA,SAAS,CAACl6B,MAAM,GAAG,CAAC,CAAC,CAACqC,KAAK,EACxD;EACA,MAAA;EACF,IAAA;MAEA,IAAI8B,IAAI,GAAG,IAAI,CAAC42D,eAAe,CAACxG,gBAAgB,EAAEo9B,YAAY,CAAC;EAC/D;MACA,IAAIxtF,IAAI,IAAI,IAAI,CAACy3D,aAAa,CAACz3D,IAAI,EAAEowD,gBAAgB,CAAC,EAAE;EACtDpwD,MAAAA,IAAI,GAAG,IAAI,CAAC23D,0BAA0B,CACpC33D,IAAI,EACJwtF,YAAY,EACZxgE,UAAU,EACVl3B,iBAAiB,CAACC,IAAI,EACtBsgE,SACF,CAAC;EACH,IAAA;MACA,IAAI,CAACr2D,IAAI,EAAE;QACT,IAAI,CAACisF,aAAa,GAAG,IAAI;EACzB,MAAA;EACF,IAAA;;EAEA;EACA,IAAA,IAAIP,eAAe,GAAG,CAAA,CAAAmC,sBAAA,GAAA,IAAI,CAACnC,eAAe,KAAA,IAAA,GAAA,MAAA,GAApBmC,sBAAA,CAAsB7tF,IAAI,KAAI,IAAI;EACxD,IAAA,IACE,CAAC,IAAI,CAAC2rF,SAAS,IACf,IAAI,CAACh+B,kBAAkB,IACvB+9B,eAAe,IACf3rF,eAAe,CAACC,IAAI,CAAC,IACrB,CAACA,IAAI,CAAC8B,OAAO,KACZ,CAAC0rF,YAAY,CAAC3/D,IAAI,IAChB,CAAC,IAAI,CAACigC,YAAY,IAAIsC,gBAAgB,GAAG,IAAI,CAACnlC,GAAG,CAACksC,gBAAkB,CAAC,EACxE;EACA,MAAA,IAAI,IAAI,CAAClK,eAAe,CAACzpB,QAAQ,CAACkoD,eAAe,CAAC,KAAK7rD,aAAa,CAACI,EAAE,EAAE;EACvE,QAAA,IAAI,CAACyrD,eAAe,GAAGA,eAAe,GAAG,IAAI;EAC/C,MAAA;EACA,MAAA,IAAIA,eAAe,IAAI3rF,eAAe,CAAC2rF,eAAe,CAAC,EAAE;EACvD,QAAA,IAAI1rF,IAAI,CAAC9B,KAAK,GAAGwtF,eAAe,CAACttF,GAAG,EAAE;EACpC;EACA,UAAA,IAAM8vF,aAAa,GAAG,IAAI,CAACjhC,eAAe,CAAC9rB,YAAY,CACrDivB,gBAAgB,EAChBt6D,iBAAiB,CAACC,IACpB,CAAC;YACD,IAAIm4F,aAAa,IAAIA,aAAa,CAAC9vF,GAAG,GAAGstF,eAAe,CAACttF,GAAG,EAAE;EAC5DstF,YAAAA,eAAe,GAAGwC,aAAa;cAC/B,IAAI,CAACxC,eAAe,GAAG;EACrB1rF,cAAAA,IAAI,EAAEkuF,aAAa;EACnB99B,cAAAA,gBAAgB,EAAE;eACnB;EACH,UAAA;EACF,QAAA;UACA,IAAM+9B,iBAAiB,GAAGnuF,IAAI,CAAC9B,KAAK,GAAGwtF,eAAe,CAACttF,GAAG;EAC1D,QAAA,IAAI+vF,iBAAiB,EAAE;EACrB,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAI,CAACh+B,YAAY,CAACnwD,IAAI,EAAE8xB,SAAS,EAAEs+B,gBAAgB,CAAC;IACtD,CAAC;IAAAz5D,MAAA,CAESs4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAI,CAACuqF,aAAa,GAAG,IAAI,CAACD,QAAQ,GAAG,KAAK;MAC1CR,qBAAA,CAAA50F,SAAA,CAAMq4D,gBAAgB,CAAA5uD,IAAA,CAAA,IAAA,EAACywB,KAAK,EAAEpvB,IAAI,CAAA;IACpC,CAAC;IAAA/K,MAAA,CAEO01F,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1Bv7D,KAAkC,EAAAiB,KAAA,EAElC;EAAA,IAAA,IADEkJ,WAAW,GAAAlJ,KAAA,CAAXkJ,WAAW;EAEb;MACA,IAAI,CAACo0B,eAAe,EAAE;MACtB,IAAI,CAAC5mC,MAAM,GAAGwS,WAAW,CAACjqB,GAAG,CAAC,UAACo9E,aAAa,EAAA;EAAA,MAAA,OAAK,IAAIjrE,KAAK,CAACirE,aAAa,CAAC;MAAA,CAAA,CAAC;IAC5E,CAAC;IAAAz3F,MAAA,CAEO41F,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3Bz7D,KAAmC,EACnCpvB,IAA6B,EAC7B;EACA;EACA,IAAA,IAAM2sF,QAAQ,GAAG,CAAC,CAAC3sF,IAAI,CAAC5N,GAAG;EAC3B,IAAA,IAAI,CAACmU,OAAO,GAAGvG,IAAI,CAAC1H,EAAE;EACtB,IAAA,IAAQ4xB,WAAW,GAAK,IAAI,CAApBA,WAAW;EAEnB,IAAA,IAAIA,WAAW,EAAE;QACfA,WAAW,CAACjpB,aAAa,EAAE;EAC3B,MAAA,IAAI,CAACk4D,qBAAqB,CAACjvC,WAAW,CAAC1tB,KAAK,CAAC;EAC/C,IAAA;MACA,IAAI,CAACmwD,iBAAiB,EAAE;;EAExB;EACA,IAAA,IAAIggC,QAAQ,EAAE;QACZ,IAAI,CAACxC,cAAc,GAAGnqF,IAAI;EAC1B;EACA,MAAA,IAAI,CAAC4sF,kBAAkB,CAAC5sF,IAAI,CAAC;EAC7B,MAAA,IAAI,IAAI,CAACusD,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC;EACA,QAAA,IAAI,CAACp9B,WAAW,CAACq8D,eAAa,CAAC;EAC/B,QAAA,IAAI,CAACr9B,KAAK,GAAG7B,KAAK,CAACE,IAAI;UACvB,IAAI,CAAC/c,IAAI,EAAE;EACb,MAAA;EACF,IAAA,CAAC,MAAM;EACL;QACA,IAAI,CAAC8f,eAAe,EAAE;QACtB,IAAI,CAACw8B,cAAc,GAAG,IAAI;QAC1B,IAAI,CAACD,aAAa,GAAGlqF,IAAI;QACzB,IAAI,CAAC2wB,aAAa,EAAE;EACtB,IAAA;IACF,CAAC;EAAA17B,EAAAA,MAAA,CAESg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B67D,IAAAA,qBAAA,CAAA50F,SAAA,CAAM+4B,iBAAiB,CAAAtvB,IAAA,CAAA,IAAA,CAAA;MACvB,IAAI,CAAC4rF,aAAa,GAAG,IAAI,CAACD,QAAQ,GAAG,IAAI,CAACL,SAAS,GAAG,KAAK;MAC3D,IAAI,CAACQ,SAAS,EAAE;EAChB,IAAA,IAAI,CAAClkF,OAAO,GAAG,EAAE;IACnB,CAAC;IAAAtR,MAAA,CAEO05B,aAAa,GAArB,SAAQA,aAAaA,CAACS,KAA0B,EAAEpvB,IAAqB,EAAE;EACvE,IAAA,IAAI,CAACqqF,WAAW,GAAGrqF,IAAI,CAAC4gB,OAAO;EAC/B,IAAA,IAAM4pE,qBAAqB,GAAG,IAAI,CAACA,qBAAqB;EACxD,IAAA,IAAIA,qBAAqB,EAAE;QACzB,IAAI,CAACA,qBAAqB,GAAG,IAAI;QACjC,IAAI,CAACO,kBAAkB,CAACj3F,MAAM,CAACg3F,kBAAkB,EAAEN,qBAAqB,CAAC;EAC3E,IAAA;IACF,CAAC;IAAAv1F,MAAA,CAEO81F,kBAAkB,GAA1B,SAAQA,kBAAkBA,CACxB37D,KAAgC,EAChCpvB,IAAqB,EACrB;EAAA,IAAA,IAAA6sF,mBAAA;EACA,IAAA,IAAQ9lE,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,IAAA,IAAiBo/B,UAAU,GAAkCnmD,IAAI,CAAzD4gB,OAAO;QAAkBra,OAAO,GAAqBvG,IAAI,CAApC1H,EAAE;QAAW2kB,OAAO,GAAYjd,IAAI,CAAvBid,OAAO;QAAE/V,KAAK,GAAKlH,IAAI,CAAdkH,KAAK;MACxD,IAAI,CAAC6f,MAAM,EAAE;QACX,IAAI,CAACnvB,IAAI,CAAA,yCAAA,GACmC2O,OAAO,GAAA,KAAA,GAAKW,KAAK,CAAC5M,IAAI,GAAA,UAAA,GAAS2iB,OAAO,GAAA,IAClF,CAAC;EACD,MAAA;EACF,IAAA;EACA,IAAA,IAAMotE,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IACE,CAACA,WAAW,IACZlkC,UAAU,CAACrwB,KAAK,GAAGu0D,WAAW,CAACv0D,KAAK,IACpCu0D,WAAW,CAACt6B,OAAO,EACnB;QACA,IAAI,CAACy6B,qBAAqB,GAAGxqF,IAAI;EACjC,MAAA,IAAI,IAAI,CAACusD,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,QAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACK,aAAa;EAClC,MAAA;EACA,MAAA;EACF,IAAA;MACA,IAAI,CAACy/B,qBAAqB,GAAG,IAAI;EACjC,IAAA,IAAI,CAACx1F,GAAG,CAAA,cAAA,GACSuR,OAAO,GAAA,KAAA,GAAKW,KAAK,CAAC5M,IAAI,GAAA,UAAA,GAAS2iB,OAAO,mBAAakpC,UAAU,CAAC/Q,OAAO,GAAA,GAAA,GAClF+Q,UAAU,CAACxR,KAAK,GAAA,GAAA,IAEhBwR,UAAU,CAACzP,UAAU,GAAA,QAAA,GACRyP,UAAU,CAACzP,UAAU,GAAA,GAAA,GAAIyP,UAAU,CAACvP,aAAa,SAC1D,EAAE,CAAA,GAAA,YAAA,GACKuP,UAAU,CAAC5Q,aAC1B,CAAC;EAED,IAAA,IAAMu3C,UAAU,GAAG/lE,MAAM,CAACxgB,OAAO,CAAC;MAClC,IAAIoiD,OAAO,GAAG,CAAC;EACf,IAAA,IAAIxC,UAAU,CAACh6B,IAAI,IAAA,CAAA0gE,mBAAA,GAAIC,UAAU,CAAClsE,OAAO,KAAA,IAAA,IAAlBisE,mBAAA,CAAoB1gE,IAAI,EAAE;EAC/C,MAAA,IAAI,CAAC0jC,eAAe,CAAC1J,UAAU,CAAC;QAChC,IAAIA,UAAU,CAAClQ,iBAAiB,EAAE;EAChC,QAAA;EACF,MAAA;QAEA,IAAI62C,UAAU,CAAClsE,OAAO,EAAE;EAAA,QAAA,IAAAmsE,qBAAA;UACtBpkC,OAAO,GAAG,IAAI,CAAC0O,cAAc,CAC3BlR,UAAU,EACV2mC,UAAU,CAAClsE,OAAO,GAAAmsE,qBAAA,GAClB,IAAI,CAAC/gC,eAAe,qBAApB+gC,qBAAA,CAAsBnsE,OACxB,CAAC;EACH,MAAA;EACA,MAAA,IAAI,CAACulC,UAAU,CAACzR,cAAc,EAAE;EAC9B;EACA;EACAqV,QAAAA,oBAAoB,CAAC5D,UAAU,EAAEkkC,WAAW,CAAC;EAC7C,QAAA,IAAI,CAAClkC,UAAU,CAACzR,cAAc,EAAE;EAC9BsV,UAAAA,uBAAuB,CAAC7D,UAAU,EAAEkkC,WAAW,CAAC;EAClD,QAAA;UACA1hC,OAAO,GAAGxC,UAAU,CAAC9O,aAAa;EACpC,MAAA;EACF,IAAA;MACAy1C,UAAU,CAAClsE,OAAO,GAAGulC,UAAU;MAC/B,IAAI,CAAC6F,eAAe,GAAG8gC,UAAU;;EAEjC;EACA,IAAA,IAAI,CAAC,IAAI,CAAC7gC,kBAAkB,EAAE;EAC5B,MAAA,IAAI,CAAC4L,gBAAgB,CAACwyB,WAAW,EAAE1hC,OAAO,CAAC;EAC7C,IAAA;MAEA,IAAI,CAACp/B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk5F,mBAAmB,EAAE;EAC3CpsE,MAAAA,OAAO,EAAEulC,UAAU;EACnB7tD,MAAAA,EAAE,EAAEiO,OAAO;QACX0W,OAAO,EAAEjd,IAAI,CAACid;EAChB,KAAC,CAAC;;EAEF;EACA,IAAA,IACE,IAAI,CAACsvC,KAAK,KAAK7B,KAAK,CAACK,aAAa,IAClC,CAAC,IAAI,CAAC4M,gBAAgB,CAACxR,UAAU,CAAC,EAClC;EACA,MAAA,IAAI,CAACoG,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;;EAEA;MACA,IAAI,CAAC/c,IAAI,EAAE;IACb,CAAC;EAAA54C,EAAAA,MAAA,CAED85D,2BAA2B,GAA3B,SAAAA,2BAA2BA,CAAC/uD,IAAoB,EAAE;EAAA,IAAA,IAAAspF,iBAAA;EAChD,IAAA,IAAMhrF,IAAI,GAAG0B,IAAI,CAAC1B,IAAqB;EACvC,IAAA,IAAQ6iB,IAAI,GAAcnhB,IAAI,CAAtBmhB,IAAI;QAAEjO,OAAO,GAAKlT,IAAI,CAAhBkT,OAAO;EACrB,IAAA,IAAQgN,MAAM,GAAsB,IAAI,CAAhCA,MAAM;QAAE3Z,OAAO,GAAa,IAAI,CAAxBA,OAAO;QAAEwgB,MAAM,GAAK,IAAI,CAAfA,MAAM;MAC/B,IAAI,CAACA,MAAM,EAAE;QACX,IAAI,CAACnvB,IAAI,CAAA,wEAAA,GACkE0G,IAAI,CAACC,EAAE,GAAA,YAAA,GAAaD,IAAI,CAACgB,KAAK,GAAA,uBACzG,CAAC;EACD,MAAA;EACF,IAAA;EAEA,IAAA,IAAM4H,KAAK,GAAG6f,MAAM,CAACxgB,OAAO,CAAU;MACtC,IAAI,CAACW,KAAK,EAAE;EACV,MAAA,IAAI,CAACtP,IAAI,CAAC,oDAAoD,CAAC;EAC/D,MAAA;EACF,IAAA;EACA,IAAA,IAAMgpB,OAAO,GAAG1Z,KAAK,CAAC0Z,OAAuB;MAC7C,IAAI,CAACA,OAAO,EAAE;EACZ,MAAA,IAAI,CAAChpB,IAAI,CAAC,yDAAyD,CAAC;EACpE,MAAA,IAAI,CAACuhE,qBAAqB,CAAC76D,IAAI,CAAC9B,KAAK,CAAC;EACtC,MAAA;EACF,IAAA;MACA,IAAMigB,UAAU,GACdyD,MAAM,CAAC+sE,iBAAiB,IAAI/lF,KAAK,CAACuV,UAAU,IAAI,WAAW;EAE7D,IAAA,IAAIgvC,UAAU,GAAG,IAAI,CAACA,UAAU;MAChC,IAAI,CAACA,UAAU,EAAE;EACfA,MAAAA,UAAU,GAAG,IAAI,CAACA,UAAU,GAAG,IAAI68B,mBAAmB,CACpD,IAAI,CAAC/+D,GAAG,EACRn1B,iBAAiB,CAACE,KAAK,EACvB,IAAI,CAAC44F,uBAAuB,CAACl1F,IAAI,CAAC,IAAI,CAAC,EACvC,IAAI,CAACi7D,sBAAsB,CAACj7D,IAAI,CAAC,IAAI,CACvC,CAAC;EACH,IAAA;;EAEA;EACA;MACA,IAAMm0D,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC7tD,IAAI,CAACiB,EAAE,CAAC;MACrC,IAAM+kF,eAAe,GAAA,CAAAgF,iBAAA,GAAGhrF,IAAI,CAAC6B,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhBmpF,iBAAA,CAAkBtpF,IAAI;MAC9C,IAAImsD,OAAO,KAAK9yD,SAAS,EAAE;EACzB;EACA;EACA,MAAA,IAAM2iF,kBAAkB,GAAG,KAAK,CAAC;QACjC,IAAM7yB,SAAS,GAAGhoC,IAAI,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAE;EACxC,MAAA,IAAMrB,OAAO,GAAG6nD,SAAS,KAAK,EAAE;QAChC,IAAMuI,SAAS,GAAG,IAAInjB,aAAa,CACjCjwC,IAAI,CAACgB,KAAK,EACVhB,IAAI,CAACC,EAAE,EACPD,IAAI,CAACkD,KAAK,CAACnF,UAAU,EACrB6W,OAAO,CAACvR,UAAU,EAClBwnD,SAAS,EACT7nD,OACF,CAAC;QACDmqD,UAAU,CAACznD,IAAI,CACbkP,OAAO,EACPoxE,eAAe,EACf7nE,UAAU,EACV,EAAE,EACFne,IAAI,EACJ6iB,IAAI,EACJP,OAAO,CAAC20B,aAAa,EACrBymC,kBAAkB,EAClBtqB,SAAS,EACTvF,OACF,CAAC;EACH,IAAA,CAAC,MAAM;QACL,IAAI,CAACn3D,GAAG,CAAA,2BAAA,GACsBsJ,IAAI,CAACiB,EAAE,GAAA,qDAAA,GAAsDjB,IAAI,CAACC,EAAE,aAAQqiB,OAAO,CAACw0B,OAAO,GAAA,IAAA,GAAKx0B,OAAO,CAAC+zB,KAAK,GAAA,UAAA,GAAWpuC,OACtJ,CAAC;QACD,IAAA4mF,iBAAA,GAAmB,IAAI,CAAC/C,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI;EACxD9rF,UAAAA,IAAI,EAAJA,IAAI;EACJ6iB,UAAAA,IAAI,EAAJA,IAAI;EACJxD,UAAAA,KAAK,EAAE,IAAIy8C,UAAU,EAAE;EACvB5I,UAAAA,QAAQ,EAAE;WACX;UALO7zC,KAAK,GAAAwvE,iBAAA,CAALxvE,KAAK;QAMbA,KAAK,CAAC3Z,IAAI,CAAC,IAAIpI,UAAU,CAACsX,OAAO,CAAC,CAAC;EACnC,MAAA,IAAI,IAAI,CAACq5C,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,QAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACS,gBAAgB;EACrC,MAAA;EACF,IAAA;IACF,CAAC;EAAAl2D,EAAAA,MAAA,CAESi6D,2BAA2B,GAArC,SAAUA,2BAA2BA,CAACsD,cAA8B,EAAE;MACpE,IAAI,IAAI,CAAC43B,WAAW,EAAE;EACpB,MAAA,IAAI,CAACA,WAAW,CAAC54B,QAAQ,GAAG,IAAI;EAChC,MAAA;EACF,IAAA;EACAs4B,IAAAA,qBAAA,CAAA50F,SAAA,CAAMg6D,2BAA2B,CAAAvwD,IAAA,OAAC6zD,cAAc,CAAA;IAClD,CAAC;EAAAv9D,EAAAA,MAAA,CAEOg2F,aAAa,GAArB,SAAQA,aAAaA;MAAmC;EACtD;MACA,IAAI,CAACt/B,WAAW,GAAG,IAAI;IACzB,CAAC;IAAA12D,MAAA,CAEOk2F,eAAe,GAAvB,SAAQA,eAAeA,CACrB/7D,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAI,CAACuqF,aAAa,GAAG,IAAI,CAACD,QAAQ,GAAG,KAAK;EAC1C,IAAA,IAAM5qE,UAAU,GAAG1f,IAAI,CAACgM,MAAM,CAAC7I,KAAK;EACpC,IAAA,IAAIuc,UAAU,EAAE;EACd,MAAA,IAAI,CAACisC,WAAW,GAAGjsC,UAAU,CAAC3jB,MAAM,IAAI,IAAI;EAC9C,IAAA;IACF,CAAC;IAAA9G,MAAA,CAEOk5B,aAAa,GAArB,SAAQA,aAAaA,CAACiB,KAA0B,EAAEpvB,IAAqB,EAAE;MACvE,IACE,CAAC,IAAI,CAACiqF,SAAS,IACfjqF,IAAI,CAAC1B,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,IACzCgK,eAAe,CAAC2B,IAAI,CAAC1B,IAAI,CAAC,EAC1B;QACA,IAAI,CAAC0rF,eAAe,GAAGhqF,IAAI;EAC3B,MAAA,IAAI,IAAI,CAACusD,KAAK,KAAK7B,KAAK,CAACE,IAAI,EAAE;UAC7B,IAAI,CAAC/c,IAAI,EAAE;EACb,MAAA;EACF,IAAA;IACF,CAAC;IAAA54C,MAAA,CAEOs5B,cAAc,GAAtB,SAAQA,cAAcA,CAACa,KAA2B,EAAEpvB,IAAsB,EAAE;EAC1E,IAAA,IAAQ1B,IAAI,GAAW0B,IAAI,CAAnB1B,IAAI;QAAE6iB,IAAI,GAAKnhB,IAAI,CAAbmhB,IAAI;EAClB,IAAA,IAAI7iB,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACE,KAAK,EAAE;QACzC,IACE,CAAC,IAAI,CAAC21F,SAAS,IACf3rF,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,IACpC,CAACiK,IAAI,CAACR,iBAAiB,CAACsF,KAAK,IAC7B,CAAC9E,IAAI,CAACR,iBAAiB,CAACuF,UAAU,EAClC;UACA,IAAI,CAAC4mF,SAAS,GAAG,IAAI;UACrB,IAAI,CAACD,eAAe,GAAG,IAAI;EAC7B,MAAA;EACA,MAAA;EACF,IAAA;EACA,IAAA,IAAI,IAAI,CAACn7B,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EACjC;EACA;EACA,MAAA,IAAI,CAAC1G,IAAI,CAAA,WAAA,GACK0G,IAAI,CAACC,EAAE,IAAG4iB,IAAI,GAAG,MAAM,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAE,CAAA,GAAA,YAAA,GACnDrE,IAAI,CAACgB,KAAK,qDAEV,IAAI,CAACitD,KAAK,GAAA,iBAAA,IAEV,IAAI,CAAC49B,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC7vF,IAAI,GAAG,OAAO,CAE5D,CAAC;EACD,MAAA;EACF,IAAA;EACA,IAAA,IAAI+D,eAAe,CAACC,IAAI,CAAC,EAAE;QACzB,IAAI,CAACy2B,YAAY,GAAGz2B,IAAI;EACxB,MAAA,IAAM4I,KAAK,GAAG,IAAI,CAACijF,cAAc;EACjC,MAAA,IAAIjjF,KAAK,EAAE;UACT,IAAI,CAACgjF,aAAa,GAAGhjF,KAAK;UAC1B,IAAI,CAACijF,cAAc,GAAG,IAAI;EAC1B,QAAA,IAAI,CAAC5gE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs5F,oBAAoB,EAAApmF,cAAA,CAAA,EAAA,EAAOE,KAAK,CAAE,CAAC;EAC7D,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACkqD,oBAAoB,CAAC9yD,IAAI,EAAE6iB,IAAI,CAAC;MACrC,IAAI,IAAI,CAACsC,KAAK,EAAE;QACd,IAAI,CAACoqB,IAAI,EAAE;EACb,IAAA;IACF,CAAC;IAAA54C,MAAA,CAESg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;EAAA,IAAA,IAAAq6B,aAAA;MACtD,IAAIr6B,IAAI,CAACuvB,KAAK,EAAE;EACd,MAAA,IAAI,CAACg9B,KAAK,GAAG7B,KAAK,CAAC17B,KAAK;EACxB,MAAA;EACF,IAAA;MACA,QAAQhvB,IAAI,CAAC4gB,OAAO;QAClB,KAAK/sB,YAAY,CAACmmC,QAAQ;QAC1B,KAAKnmC,YAAY,CAACimC,kBAAkB;QACpC,KAAKjmC,YAAY,CAAComC,kBAAkB;QACpC,KAAKpmC,YAAY,CAAC6lC,eAAe;QACjC,KAAK7lC,YAAY,CAAC67B,iBAAiB;QACnC,KAAK77B,YAAY,CAAC8lC,cAAc;QAChC,KAAK9lC,YAAY,CAACsiC,gBAAgB;UAChC,IAAI,CAAC4hC,wBAAwB,CAAC3jE,iBAAiB,CAACE,KAAK,EAAE0L,IAAI,CAAC;EAC5D,QAAA;QACF,KAAKnM,YAAY,CAAC+mC,sBAAsB;QACxC,KAAK/mC,YAAY,CAACgnC,wBAAwB;QAC1C,KAAKhnC,YAAY,CAACumC,mBAAmB;EACnC;UACA,IACE,CAACp6B,IAAI,CAACy6B,UAAU,IAChB,IAAI,CAAC8xB,KAAK,KAAK7B,KAAK,CAACK,aAAa,IAClC,CAAA,CAAA1wB,aAAA,GAAAr6B,IAAI,CAAClH,OAAO,KAAA,IAAA,GAAA,MAAA,GAAZuhC,aAAA,CAAchiC,IAAI,MAAKtE,mBAAmB,CAACG,WAAW,EACtD;EACA,UAAA,IAAI,CAACq4D,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,QAAA;EACA,QAAA;QACF,KAAK/2D,YAAY,CAAC27B,sBAAsB;QACxC,KAAK37B,YAAY,CAAC47B,mBAAmB;EACnC,QAAA,IAAIzvB,IAAI,CAACu6B,MAAM,KAAK,OAAO,EAAE;EAC3B,UAAA;EACF,QAAA;EACA,QAAA,IAAI,CAAC,IAAI,CAACs+B,0BAA0B,CAAC74D,IAAI,CAAC,EAAE;YAC1C,IAAI,CAAC2sD,iBAAiB,EAAE;EAC1B,QAAA;EACA,QAAA;QACF,KAAK94D,YAAY,CAAC2nC,iBAAiB;EACjC,QAAA,IAAIx7B,IAAI,CAACu6B,MAAM,KAAK,OAAO,EAAE;EAC3B,UAAA;EACF,QAAA;EACA,QAAA,IAAI,IAAI,CAACs+B,0BAA0B,CAAC74D,IAAI,CAAC,EAAE;YACzC,IAAI,CAACkqF,aAAa,GAAG,IAAI;EACzBJ,UAAAA,qBAAA,CAAA50F,SAAA,CAAM86D,eAAe,CAAArxD,IAAA,CAAA,IAAA,EAAC,CAAC,EAAErL,MAAM,CAACi5B,iBAAiB,EAAE,OAAO,CAAA;EAC5D,QAAA;EACA,QAAA;QACF,KAAK14B,YAAY,CAACynC,kBAAkB;EAClC,QAAA,IAAI,CAACo+B,kBAAkB,CAAC15D,IAAI,CAAC;EAC7B,QAAA;EAGJ;IACF,CAAC;IAAA/K,MAAA,CAEOm2F,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBh8D,KAA6B,EAAA2N,KAAA,EAE7B;EAAA,IAAA,IADE1kC,IAAI,GAAA0kC,KAAA,CAAJ1kC,IAAI;EAEN,IAAA,IAAIA,IAAI,KAAKwE,qBAAqB,CAACC,KAAK,EAAE;QACxC,IAAI,CAACwtF,QAAQ,GAAG,IAAI;EACtB,IAAA;IACF,CAAC;IAAAr1F,MAAA,CAEOq2F,eAAe,GAAvB,SAAQA,eAAeA,CACrBl8D,KAA4B,EAAAi+D,KAAA,EAE5B;EAAA,IAAA,IADEh1F,IAAI,GAAAg1F,KAAA,CAAJh1F,IAAI;EAEN,IAAA,IAAIA,IAAI,KAAKwE,qBAAqB,CAACC,KAAK,EAAE;QACxC,IAAI,CAACwtF,QAAQ,GAAG,KAAK;QACrB,IAAI,CAACC,aAAa,GAAG,IAAI;EACzB,MAAA,IAAI,IAAI,CAACh+B,KAAK,KAAK7B,KAAK,CAACQ,KAAK,EAAE;EAC9B,QAAA,IAAI,CAACqB,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,MAAA;QACA,IAAMe,WAAW,GAAG,IAAI,CAACA,WAAW,IAAI,IAAI,CAACloC,KAAK;EAClD,MAAA,IAAIkoC,WAAW,EAAE;UACf,IAAI,CAACoN,kBAAkB,CAACpN,WAAW,EAAEtzD,IAAI,EAAEjE,iBAAiB,CAACE,KAAK,CAAC;UACnE,IAAI,CAACu5C,IAAI,EAAE;EACb,MAAA;EACF,IAAA;IACF,CAAC;EAAA54C,EAAAA,MAAA,CAEOi4F,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAACtG,cAAgC,EAAE;EAAA,IAAA,IAAA0G,YAAA;MAChE,IAAMh1F,EAAE,GAAG,OAAO;EAClB,IAAA,IAAQixB,GAAG,GAAK,IAAI,CAAZA,GAAG;EACX,IAAA,IAAQ+7D,WAAW,GAAgBsB,cAAc,CAAzCtB,WAAW;QAAE5zB,SAAS,GAAKk1B,cAAc,CAA5Bl1B,SAAS;EAE9B,IAAA,IAAM54D,OAAO,GAAG,IAAI,CAACo6D,iBAAiB,CAACxB,SAAS,CAAC;MACjD,IAAI,CAAC54D,OAAO,EAAE;EACZ,MAAA,IAAI,CAACogE,uBAAuB,CAACxH,SAAS,CAAC;EACvC,MAAA;EACF,IAAA;EACA,IAAA,IAAQpzD,IAAI,GAAkBxF,OAAO,CAA7BwF,IAAI;QAAE6iB,IAAI,GAAYroB,OAAO,CAAvBqoB,IAAI;QAAE7hB,KAAK,GAAKxG,OAAO,CAAjBwG,KAAK;EACzB,IAAA,IAAQshB,OAAO,GAAKthB,KAAK,CAAjBshB,OAAO;EACf,IAAA,IAAQzd,KAAK,GAA6BmiF,WAAW,CAA7CniF,KAAK;QAAEgB,IAAI,GAAuBmhF,WAAW,CAAtCnhF,IAAI;QAAED,GAAG,GAAkBohF,WAAW,CAAhCphF,GAAG;QAAE/D,WAAW,GAAKmlF,WAAW,CAA3BnlF,WAAW;;EAErC;EACA;MACA,IAAI,IAAI,CAAC0uD,kBAAkB,CAACvwD,IAAI,CAAC,IAAI,CAACsiB,OAAO,EAAE;EAC7C,MAAA,IAAI,CAAC2qC,eAAe,CAACnrB,cAAc,CAAC9hC,IAAI,CAAC;EACzC,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,CAACiuD,KAAK,GAAG7B,KAAK,CAACM,OAAO;EAC1B,IAAA,IAAI,IAAI,CAACm/B,cAAc,IAAIhnF,KAAK,EAAE;EAChC,MAAA,IAAI,CAACoqF,mBAAmB,CAAC,IAAI,CAACpD,cAAc,CAAC;EAC/C,IAAA;EAEA,IAAA,IAAIhqF,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAE6L,MAAM,EAAE;EACvB,MAAA,IAAMwhF,WAAW,GAAGlvF,IAAI,CAAC6B,WAAW,IAAI7B,IAAI;QAC5C,IAAI,IAAI,CAACuyD,wBAAwB,CAAC1wD,WAAW,EAAE7B,IAAI,CAAC,EAAE;EACpD,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAACmvF,kBAAkB,CACrBnuF,KAAK,EACLa,WAAW,CAAC6L,MAAM,EAClBwhF,WAAW,EACX97B,SACF,CAAC;EACDnoC,MAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC45F,yBAAyB,EAAE;EAC5CpvF,QAAAA,IAAI,EAAEkvF,WAAW;EACjBl1F,QAAAA,EAAE,EAAFA,EAAE;UACF0T,MAAM,EAAE7L,WAAW,CAAC6L;EACtB,OAAC,CAAC;EACF;EACF,IAAA;EACA,IAAA,IAAI7I,KAAK,EAAE;EACT,MAAA,IAAQ3D,QAAQ,GAA+B2D,KAAK,CAA5C3D,QAAQ;UAAEC,MAAM,GAAuB0D,KAAK,CAAlC1D,MAAM;UAAEC,QAAQ,GAAayD,KAAK,CAA1BzD,QAAQ;UAAEC,MAAM,GAAKwD,KAAK,CAAhBxD,MAAM;EAC1C,MAAA,IAAIwhB,IAAI,EAAE;EACRA,QAAAA,IAAI,CAACrjB,iBAAiB,CAACjB,qBAAqB,CAACvI,KAAK,CAAC,GAAG;EACpDkL,UAAAA,QAAQ,EAARA,QAAQ;EACRC,UAAAA,MAAM,EAANA,MAAM;EACNC,UAAAA,QAAQ,EAARA,QAAQ;EACRC,UAAAA,MAAM,EAANA;WACD;EACH,MAAA;EACArB,MAAAA,IAAI,CAAC+C,uBAAuB,CAC1BxE,qBAAqB,CAACvI,KAAK,EAC3BkL,QAAQ,EACRC,MAAM,EACNC,QAAQ,EACRC,MACF,CAAC;QACD,IAAI,CAACi0D,kBAAkB,CAACzwD,KAAK,EAAE7E,IAAI,EAAE6iB,IAAI,EAAEuwC,SAAS,CAAC;EACvD,IAAA;MAEA,IAAIxtD,GAAG,IAAA,IAAA,IAAA,CAAAopF,YAAA,GAAHppF,GAAG,CAAEkL,OAAO,KAAA,IAAA,IAAZk+E,YAAA,CAAcnzF,MAAM,EAAE;QACxB,IAAMwzF,UAAmC,GAAGx1F,QAAA,CAC1C;EACEG,QAAAA,EAAE,EAAFA,EAAE;EACFgG,QAAAA,IAAI,EAAJA,IAAI;EACJsiB,QAAAA,OAAO,EAAPA;SACD,EACD1c,GACF,CAAC;QACDqlB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC85F,qBAAqB,EAAED,UAAU,CAAC;EACvD,IAAA;EACA,IAAA,IAAIxpF,IAAI,EAAE;QACR,IAAM0pF,WAAoC,GAAG11F,QAAA,CAC3C;EACEG,QAAAA,EAAE,EAAFA,EAAE;EACFgG,QAAAA,IAAI,EAAJA,IAAI;EACJsiB,QAAAA,OAAO,EAAPA;SACD,EACDzc,IACF,CAAC;QACDolB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACg6F,qBAAqB,EAAED,WAAW,CAAC;EACxD,IAAA;IACF,CAAC;EAAA54F,EAAAA,MAAA,CAEOw4F,kBAAkB,GAA1B,SAAQA,kBAAkBA,CACxB5kE,YAAmB,EACnB7c,MAAgB,EAChB1N,IAAc,EACdozD,SAAwB,EACxB;EACA,IAAA,IAAI,IAAI,CAACnF,KAAK,KAAK7B,KAAK,CAACM,OAAO,EAAE;EAChC,MAAA;EACF,IAAA;EACA;MACA,IAAIh/C,MAAM,CAAC5I,KAAK,EAAE;QAChB,OAAO4I,MAAM,CAAC5I,KAAK;EACrB,IAAA;MACA,IAAI4I,MAAM,CAAC3I,UAAU,EAAE;QACrB,OAAO2I,MAAM,CAAC3I,UAAU;EAC1B,IAAA;;EAEA;EACA,IAAA,IAAI,CAAC2I,MAAM,CAAC7I,KAAK,EAAE;EACjB,MAAA;EACF,IAAA;EACA,IAAA,IAAM+D,KAAK,GAAG8E,MAAM,CAAC7I,KAAK;EAE1B+D,IAAAA,KAAK,CAAC5O,EAAE,GAAGlE,iBAAiB,CAACE,KAAK;EAElC,IAAA,IAAMy5F,kBAAkB,GAAGllE,YAAY,CAACpM,UAAU;EAClD,IAAA,IAAI,CAACznB,GAAG,CAAA,+BAAA,GAC0BkS,KAAK,CAACk7D,SAAS,GAAA,0BAAA,GAA2B2rB,kBAAkB,GAAA,GAAA,GAAI7mF,KAAK,CAACM,KAAK,MAC7G,CAAC;EACD;EACA,IAAA,IAAIumF,kBAAkB,IAAIA,kBAAkB,CAACjyF,KAAK,CAAC,GAAG,CAAC,CAAC3B,MAAM,KAAK,CAAC,EAAE;QACpE+M,KAAK,CAACuT,UAAU,GAAGszE,kBAAkB;EACvC,IAAA;MACA,IAAI,CAACxkE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk6F,aAAa,EAAEhiF,MAA0B,CAAC;EAClE,IAAA,IAAM7L,WAAW,GAAG+G,KAAK,CAAC/G,WAAW;EACrC,IAAA,IAAIA,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEwB,UAAU,EAAE;EAC3B,MAAA,IAAM6qC,OAA4B,GAAG;EACnCn0C,QAAAA,IAAI,EAAE,OAAO;EACbiG,QAAAA,IAAI,EAAJA,IAAI;EACJ6iB,QAAAA,IAAI,EAAE,IAAI;EACVuwC,QAAAA,SAAS,EAATA,SAAS;UACTn3B,MAAM,EAAEj8B,IAAI,CAACjG,IAAI;EACjB2H,QAAAA,IAAI,EAAEG;SACP;QACD,IAAI,CAACopB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACigE,gBAAgB,EAAEvnB,OAAO,CAAC;EACpD,IAAA;EACA;MACA,IAAI,CAAC6B,aAAa,EAAE;IACtB,CAAC;IAAAp5C,MAAA,CAESw5D,YAAY,GAAtB,SAAUA,YAAYA,CACpBnwD,IAAc,EACd4I,KAAY,EACZwnD,gBAAwB,EACxB;EACA;MACA,IAAMY,SAAS,GAAG,IAAI,CAAC/D,eAAe,CAACzpB,QAAQ,CAACxjC,IAAI,CAAC;;EAErD;EACA,IAAA,IACE,IAAI,CAAC6rF,cAAc,IACnB76B,SAAS,KAAKnxB,aAAa,CAACC,UAAU,IACtCkxB,SAAS,KAAKnxB,aAAa,CAACG,OAAO,EACnC;EAAA,MAAA,IAAA9E,cAAA;EACA,MAAA,IAAI,CAACn7B,eAAe,CAACC,IAAI,CAAC,EAAE;EAC1B,QAAA,IAAI,CAAC+xD,gBAAgB,CAAC/xD,IAAI,EAAE4I,KAAK,CAAC;QACpC,CAAC,MAAM,IAAI,CAAAsyB,cAAA,GAAAtyB,KAAK,CAAC0Z,OAAO,KAAA,IAAA,IAAb4Y,cAAA,CAAerN,IAAI,IAAI,CAAC,IAAI,CAACggC,OAAO,CAAC7tD,IAAI,CAACiB,EAAE,CAAC,EAAE;EACxD,QAAA,IAAI,CAACvK,GAAG,CAAA,8CAAA,GACyCsJ,IAAI,CAACiB,EAAE,GAAA,gDAAA,GAAiDjB,IAAI,CAACC,EAAE,GAAA,YAAA,GAAa,IAAI,CAACgI,OAClI,CAAC;EACD,QAAA,IAAI,CAACgmD,KAAK,GAAG7B,KAAK,CAACS,gBAAgB;EACnC,QAAA,IAAMk/B,WAAW,GAAG,IAAI,CAACA,WAAW;UACpC,IACEA,WAAW,IACXA,WAAW,CAAChzC,aAAa,KAAKnwC,KAAK,CAAC0Z,OAAO,CAACy2B,aAAa,EACzD;EACA2S,UAAAA,uBAAuB,CAAC9iD,KAAK,CAAC0Z,OAAO,EAAEypE,WAAW,CAAC;EACrD,QAAA;EACF,MAAA,CAAC,MAAM;UACLP,qBAAA,CAAA50F,SAAA,CAAMu5D,YAAY,CAAA9vD,IAAA,CAAA,IAAA,EAACL,IAAI,EAAE4I,KAAK,EAAEwnD,gBAAgB,CAAA;EAClD,MAAA;EACF,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACU,oBAAoB,CAAC9wD,IAAI,CAAC;EACjC,IAAA;IACF,CAAC;EAAArJ,EAAAA,MAAA,CAEO23F,kBAAkB,GAA1B,SAAQA,kBAAkBA,CAACzC,cAA6B,EAAE;EACxD,IAAA,IAAI,IAAI,CAAC1mE,KAAK,IAAI,IAAI,CAACymE,aAAa,EAAE;EACpC,MAAA,IAAA+D,mBAAA,GACE,IAAI,CAAC/D,aAAa;UADZ5vF,IAAI,GAAA2zF,mBAAA,CAAJ3zF,IAAI;UAAEmtB,IAAI,GAAAwmE,mBAAA,CAAJxmE,IAAI;UAAEC,SAAS,GAAAumE,mBAAA,CAATvmE,SAAS;UAAEC,eAAe,GAAAsmE,mBAAA,CAAftmE,eAAe;UAAElL,UAAU,GAAAwxE,mBAAA,CAAVxxE,UAAU;UAAEG,QAAQ,GAAAqxE,mBAAA,CAARrxE,QAAQ;QAEpE,IACE,CAACkL,aAAa,CACZ;EAAExtB,QAAAA,IAAI,EAAJA,IAAI;EAAEmtB,QAAAA,IAAI,EAAJA,IAAI;EAAEC,QAAAA,SAAS,EAATA,SAAS;EAAEC,QAAAA,eAAe,EAAfA,eAAe;EAAElL,QAAAA,UAAU,EAAVA,UAAU;EAAEG,QAAAA,QAAQ,EAARA;EAAS,OAAC,EAChEutE,cAAc,EACdzhE,mBACF,CAAC,EACD;UACA,IAAIW,iBAAiB,CAAC8gE,cAAc,CAAC/3F,GAAG,EAAE,IAAI,CAACm3B,GAAG,CAAC,EAAE;EACnD,UAAA,IAAI,CAACv0B,GAAG,CAAC,4CAA4C,CAAC;EACtD80F,UAAAA,qBAAA,CAAA50F,SAAA,CAAM86D,eAAe,CAAArxD,IAAA,CAAA,IAAA,EAAC,CAAC,EAAErL,MAAM,CAACi5B,iBAAiB,EAAE,OAAO,CAAA;YAC1D,IAAI,CAAC29D,aAAa,GAAG,IAAI;EAC3B,QAAA,CAAC,MAAM;EACL;YACA,IAAI,CAACA,aAAa,GAAGC,cAAc;EACrC,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;EAAAl1F,EAAAA,MAAA,CAEOs4F,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAACpD,cAA6B,EAAE;EACzD,IAAA,IAAQ5gE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACX,IAAA,IAAI,CAACqjE,kBAAkB,CAACzC,cAAc,CAAC;MACvC,IAAI,CAACD,aAAa,GAAGC,cAAc;MACnC,IAAI,CAACA,cAAc,GAAG,IAAI;MAC1B5gE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs5F,oBAAoB,EAAApmF,cAAA,CAAA,EAAA,EAAOmjF,cAAc,CAAE,CAAC;IACjE,CAAC;EAAA,EAAA,OAAAN,qBAAA;EAAA,CAAA,CAl+BOx+B,oBAAoB,CAAA;;EChDW,IAYpB6iC,sBAAsB,0BAAAvkE,OAAA,EAAA;EAQzC,EAAA,SAAAukE,sBAAAA,CAAY3kE,GAAQ,EAAEiiC,SAAiB,EAAE;EAAA,IAAA,IAAA9sD,KAAA;MACvCA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM6sD,SAAS,EAAEjiC,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CALrB6qB,GAAG,GAAA,MAAA;MAAA7qB,KAAA,CACHyvF,OAAO,GAAY,KAAK;EAAAzvF,IAAAA,KAAA,CAC1BurB,KAAK,GAAW,EAAE;MAIxBvrB,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;EAAC,IAAA,OAAA7qB,KAAA;EACjB,EAAA;IAAC6B,cAAA,CAAA2tF,sBAAA,EAAAvkE,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAi5F,sBAAA,CAAAh5F,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC6zB,UAAU,EAAE;EACjB;MACA,IAAI,CAACzB,GAAG,GAAG,IAAI,CAACv0B,GAAG,GAAG,IAAI,CAAC4C,IAAI,GAAG,IAAI;IACxC,CAAC;EAAA3C,EAAAA,MAAA,CAEO+1B,UAAU,GAAlB,SAAQA,UAAUA,GAAG;EACnB,IAAA,IAAI,IAAI,CAACf,KAAK,KAAK,EAAE,EAAE;EACrBzxB,MAAAA,IAAI,CAAC+zC,YAAY,CAAC,IAAI,CAACtiB,KAAK,CAAC;EAC7B,MAAA,IAAI,CAACA,KAAK,GAAG,EAAE;EACjB,IAAA;IACF,CAAC;EAAAh1B,EAAAA,MAAA,CAEM4jC,SAAS,GAAhB,SAAOA,SAASA,GAAG;MACjB,IAAI,CAACs1D,OAAO,GAAG,IAAI;MACnB,IAAI,CAACC,YAAY,EAAE;IACrB,CAAC;EAAAn5F,EAAAA,MAAA,CAEM8jC,QAAQ,GAAf,SAAOA,QAAQA,GAAG;MAChB,IAAI,CAACo1D,OAAO,GAAG,KAAK;MACpB,IAAI,CAACnjE,UAAU,EAAE;IACnB,CAAC;IAAA/1B,MAAA,CAESo5F,YAAY,GAAtB,SAAUA,YAAYA,CACpBC,WAAmB,EACnB7wF,QAAkC,EAClC8wF,OAAiC,EACH;EAC9B,IAAA,IAAMx4C,gBAAgB,GAAGt4C,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEs4C,gBAAgB;EACnD,IAAA,IAAIA,gBAAgB,EAAE;QACpB,IAAIy4C,UAAU,GAAG,EAAE;EACnB,MAAA,KAAK,IAAInzF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG06C,gBAAgB,CAAC57C,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAChD,QAAA,IAAMm1C,IAAI,GAAGuF,gBAAgB,CAAC16C,CAAC,CAAC;EAChC,QAAA,IAAIimB,GAAW,GAAA,MAAA;UACf,IAAI;EACFA,UAAAA,GAAG,GAAG,IAAI9oB,IAAI,CAACnG,GAAG,CAACm+C,IAAI,CAAC0P,GAAG,EAAEziD,QAAQ,CAACrL,GAAG,CAAC,CAACovB,IAAI;UACjD,CAAC,CAAC,OAAOrvB,KAAK,EAAE;EACd,UAAA,IAAI,CAACyF,IAAI,CAAA,oDAAA,GAC8CzF,KACvD,CAAC;EACDmvB,UAAAA,GAAG,GAAGkvB,IAAI,CAAC0P,GAAG,IAAI,EAAE;EACtB,QAAA;EACA;EACA;UACA,IAAI5+B,GAAG,KAAKgtE,WAAW,EAAE;EACvBE,UAAAA,UAAU,GAAGnzF,CAAC;EACd,UAAA;EACF,QAAA,CAAC,MAAM,IAAIimB,GAAG,KAAKgtE,WAAW,CAACtzF,SAAS,CAAC,CAAC,EAAEsmB,GAAG,CAACnnB,MAAM,CAAC,EAAE;EACvDq0F,UAAAA,UAAU,GAAGnzF,CAAC;EAChB,QAAA;EACF,MAAA;EACA,MAAA,IAAImzF,UAAU,KAAK,EAAE,EAAE;EACrB,QAAA,IAAMh+C,KAAI,GAAGuF,gBAAgB,CAACy4C,UAAU,CAAC;EACzC,QAAA,IAAMttE,GAAG,GAAGtjB,QAAQ,CAAC4yC,KAAI,CAAC,UAAU,CAAC,CAAC,IAAI/yC,QAAQ,CAACi5C,UAAU;EAC7D,QAAA,IAAIv1B,IAAI,GAAGvjB,QAAQ,CAAC4yC,KAAI,CAAC,WAAW,CAAC,CAAC,IAAI/yC,QAAQ,CAACm5C,aAAa;EAChE,QAAA,IAAI,IAAI,CAACrtB,GAAG,CAACrJ,MAAM,CAACmzC,cAAc,EAAE;EAClC,UAAA,IAAMo7B,WAAW,GAAGv7F,IAAI,CAAC+D,GAAG,CAC1BwG,QAAQ,CAACsjB,GAAG,GAAGtjB,QAAQ,CAACg1B,UAAU,EAClCh1B,QAAQ,CAAC63C,cACX,CAAC;YACD,IAAIn0B,IAAI,IAAI,CAAC,IAAIstE,WAAW,GAAGhxF,QAAQ,CAACg1B,UAAU,EAAE;EAClDtR,YAAAA,IAAI,IAAI,CAAC;EACX,UAAA;EACF,QAAA;EACA,QAAA,IAAMC,IAAI,GAAGmtE,OAAO,IAAI5tE,YAAY,CAAC4tE,OAAO,CAAC;EAC7C,QAAA,OAAO,IAAIttE,gBAAgB,CAACC,GAAG,EAAEC,IAAI,IAAI,CAAC,GAAGA,IAAI,GAAG9nB,SAAS,EAAE+nB,IAAI,CAAC;EACtE,MAAA;EACF,IAAA;IACF,CAAC;EAAAnsB,EAAAA,MAAA,CAESm5F,YAAY,GAAtB,SAAUA,YAAYA,CAACM,gBAAmC,EAAE;EAC1D;MACA,IAAI,CAAC1jE,UAAU,EAAE;IACnB,CAAC;IAAA/1B,MAAA,CAES05F,eAAe,GAAzB,SAAUA,eAAeA,CACvBC,QAA+B,EAC/BF,gBAAmC,EACnC;EACA;MACA,IAAI,CAAC1jE,UAAU,EAAE;IACnB,CAAC;EAAA/1B,EAAAA,MAAA,CAES45F,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAC1BD,QAAkD,EACf;MACnC,OACE,IAAI,CAACT,OAAO,IACZ,CAAC,CAACS,QAAQ,IACV,CAAC,CAACA,QAAQ,CAACx8F,GAAG,KACb,CAACw8F,QAAQ,CAAChuE,OAAO,IAAIguE,QAAQ,CAAChuE,OAAO,CAACuL,IAAI,CAAC;IAEhD,CAAC;IAAAl3B,MAAA,CAES65F,oBAAoB,GAA9B,SAAUA,oBAAoBA,CAC5BxtE,GAAW,EACXotE,gBAA8C,EACtC;EACR,IAAA,IAAIA,gBAAgB,EAAE;QACpB,IAAI;EACF,QAAA,OAAOA,gBAAgB,CAACrtE,aAAa,CAACC,GAAG,CAAC;QAC5C,CAAC,CAAC,OAAOnvB,KAAK,EAAE;EACd,QAAA,IAAI,CAACyF,IAAI,CAAA,4DAAA,GACsDzF,KAC/D,CAAC;EACH,MAAA;EACF,IAAA;EACA,IAAA,OAAOmvB,GAAG;IACZ,CAAC;IAAArsB,MAAA,CAES85F,cAAc,GAAxB,SAAUA,cAAcA,CACtBpsF,KAAa,EACb3C,IAA8D,EAC9Ds3D,eAA8B,EAC9B;EACA,IAAA,IAAQ12C,OAAO,GAAY5gB,IAAI,CAAvB4gB,OAAO;QAAEpf,KAAK,GAAKxB,IAAI,CAAdwB,KAAK;;EAEtB;MACA,IAAMmpB,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;MAClC,IAAMqkE,OAAO,GAAGxtF,KAAK,CAACjF,OAAO,CAACE,KAAK,GAC/BvJ,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEm0B,GAAG,GAAGnpB,KAAK,CAACjF,OAAO,CAACE,KAAK,CAAC,GACtC,CAAC;MACLmkB,OAAO,CAACo0B,gBAAgB,GAAGniD,IAAI,CAAC83B,GAAG,EAAE,GAAGqkE,OAAO;;EAE/C;MACA,IAAMhhC,cAAc,GAAG,IAAI,CAACzkC,GAAG,CAACrJ,MAAM,CAAC8tC,cAAc;EACrD,IAAA,IAAIA,cAAc,KAAKptC,OAAO,CAAC21B,qBAAqB,EAAE;QACpD,IAAMhyC,MAAM,GAAGrR,IAAI,CAACsD,GAAG,CAACw3D,cAAc,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/CptC,OAAO,CAAC21B,qBAAqB,GAAGhyC,MAAM;EACtCqc,MAAAA,OAAO,CAACyT,SAAS,CAACp7B,OAAO,CAAC,UAACqF,IAAI,EAAK;UAClCA,IAAI,CAACoC,QAAQ,CAACpC,IAAI,CAACsB,cAAc,GAAG2E,MAAM,CAAC;EAC7C,MAAA,CAAC,CAAC;EACJ,IAAA;;EAEA;MACA,IAAIqc,OAAO,CAACuL,IAAI,IAAImrC,eAAe,IAAA,IAAA,IAAfA,eAAe,CAAEnrC,IAAI,EAAE;EACzC,MAAA,IAAM8iE,YAAY,GAAG,WAAW,IAAIjvF,IAAI,GAAGA,IAAI,CAACowB,SAAS,GAAGpwB,IAAI,CAACkH,KAAK;EACtE0Z,MAAAA,OAAO,CAAC41B,QAAQ,CAAC8gB,eAAe,CAAC;EACjC;QACA,IAAIA,eAAe,IAAI12C,OAAO,CAACyT,SAAS,CAACl6B,MAAM,GAAG,CAAC,EAAE;EACnD8rD,QAAAA,YAAY,CAACqR,eAAe,EAAE12C,OAAO,EAAE,IAAI,CAAC;EAC5C,QAAA,IAAMzuB,KAAK,GAAGyuB,OAAO,CAAC0vB,oBAAoB;EAC1C,QAAA,IAAIn+C,KAAK,EAAE;EACT,UAAA,IAAI,CAACyF,IAAI,CAACzF,KAAK,CAAC;EAChB,UAAA,IAAMo3B,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,UAAA,IAAI,CAACA,GAAG,CAACrJ,MAAM,CAACgvE,2BAA2B,EAAE;EAAA,YAAA,IAAAC,mBAAA;EAC3C,YAAA,IAAQ9kD,cAAc,GAAKrqC,IAAI,CAAvBqqC,cAAc;EACtB9gB,YAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;gBACxB32B,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;gBAC9BxpB,OAAO,EAAE/sB,YAAY,CAACumC,mBAAmB;EACzC7K,cAAAA,KAAK,EAAE,KAAK;gBACZn9B,GAAG,EAAEwuB,OAAO,CAACxuB,GAAG;EAChBD,cAAAA,KAAK,EAALA,KAAK;gBACLk0B,MAAM,EAAEl0B,KAAK,CAACsrC,OAAO;EACrBn+B,cAAAA,KAAK,EAAGU,IAAI,CAASV,KAAK,IAAIjG,SAAS;EACvCkhC,cAAAA,MAAM,EAAA,CAAA40D,mBAAA,GAAEvuE,OAAO,CAACyT,SAAS,CAAC,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAApB86D,mBAAA,CAAsB92F,IAAI;EAClCgyC,cAAAA,cAAc,EAAdA,cAAc;EACd7oC,cAAAA,KAAK,EAALA;EACF,aAAC,CAAC;EACF,YAAA;EACF,UAAA;YACAof,OAAO,CAAC0vB,oBAAoB,GAAG,IAAI;EACrC,QAAA;EACF,MAAA;EACA,MAAA,IAAI1vB,OAAO,CAACk0B,gBAAgB,KAAK,EAAE,EAAE;EACnCl0B,QAAAA,OAAO,CAACk0B,gBAAgB,GAAGtzC,KAAK,CAACjF,OAAO,CAACC,KAAK;EAChD,MAAA;EACA,MAAA,IAAM8uB,UAAU,GAAG,IAAI,CAAC/B,GAAG,CAACgC,qBAAqB;EACjD,MAAA,IAAM6T,QAAQ,GAAG9T,UAAU,GAAGA,UAAU,CAAC5uB,GAAG,GAAG4uB,UAAU,CAACrwB,GAAG,GAAG,CAAC;QACjE,IAAM6tD,oBAAoB,GAAG,CAACloC,OAAO,CAAC6mC,IAAI,GAAGroB,QAAQ,IAAI,IAAI;EAC7D,MAAA,IAAM2pB,cAAc,GAAGF,qBAAqB,CAC1CjoC,OAAO,EACPkoC,oBACF,CAAC;EACD,MAAA,IAAIloC,OAAO,CAACk0B,gBAAgB,GAAGiU,cAAc,GAAGp+B,GAAG,EAAE;UACnD/J,OAAO,CAACk0B,gBAAgB,GAAGnqB,GAAG;EAChC,MAAA,CAAC,MAAM;UACL/J,OAAO,CAACk0B,gBAAgB,IAAIiU,cAAc;EAC5C,MAAA;EACA,MAAA,IAAI,CAAC/zD,GAAG,CAAA,gBAAA,GACW2N,KAAK,GAAA,GAAA,IACpBie,OAAO,CAACs0B,QAAQ,GACZ,YAAY,GAAGt0B,OAAO,CAAC81B,UAAU,GAAG,GAAG,GAAG91B,OAAO,CAACg2B,aAAa,GAC/Dh2B,OAAO,CAACq0B,OAAO,GACb,SAAS,GACT,QAAQ,CAElB,CAAC;QACD,IAAI,CAAC,IAAI,CAACk5C,OAAO,IAAI,CAACvtE,OAAO,CAACuL,IAAI,EAAE;EAClC,QAAA;EACF,MAAA;EACA,MAAA,IAAIijE,kBAAgD;QACpD,IAAIluE,GAAuB,GAAG7nB,SAAS;QACvC,IAAI8nB,IAAwB,GAAG9nB,SAAS;QACxC,IAAIunB,OAAO,CAAC60B,cAAc,IAAI70B,OAAO,CAAC+zB,KAAK,IAAI/zB,OAAO,CAACs0B,QAAQ,EAAE;EAC/D;UACA,IAAMme,cAAc,GAAG,IAAI,CAAC9pC,GAAG,CAACrJ,MAAM,CAACmzC,cAAc;EACrD,QAAA,IAAM3c,UAAU,GAAG91B,OAAO,CAAC81B,UAAU;EACrC,QAAA,IAAM24C,KAAK,GAAGzuE,OAAO,CAAC+zB,KAAK;EAC3B,QAAA,IAAMiC,aAAa,GAAGh2B,OAAO,CAACg2B,aAAa;EAC3C,QAAA,IAAM1U,QAAQ,GAAG0U,aAAa,KAAK,EAAE;EACrC,QAAA,IAAM04C,mBAAmB,GAAG54C,UAAU,KAAK24C,KAAK;EAChD,QAAA,IAAIntD,QAAQ,EAAE;EACZ;EACA,UAAA,IAAIotD,mBAAmB,EAAE;cACvBpuE,GAAG,GAAGmuE,KAAK,GAAG,CAAC;EACfluE,YAAAA,IAAI,GAAGkyC,cAAc,GAAG,CAAC,GAAGzc,aAAa;EAC3C,UAAA,CAAC,MAAM;EACL11B,YAAAA,GAAG,GAAGw1B,UAAU;cAChBv1B,IAAI,GAAGkyC,cAAc,GAAGzc,aAAa,GAAG,CAAC,GAAGh2B,OAAO,CAAC2uE,YAAY;EAClE,UAAA;EACF,QAAA,CAAC,MAAM;YACLruE,GAAG,GAAGmuE,KAAK,GAAG,CAAC;EACjB,QAAA;EACA;EACA;EACA,QAAA,IAAMG,YAAY,GAAG5uE,OAAO,CAACG,GAAG;EAChC,QAAA,IAAM0uE,MAAM,GAAGD,YAAY,GAAG5uE,OAAO,CAACm0B,SAAS;EAC/C,QAAA,IAAI05C,WAAW,GAAGv7F,IAAI,CAAC+D,GAAG,CACxBw4F,MAAM,GAAG7uE,OAAO,CAAC6R,UAAU,EAC3B7R,OAAO,CAAC00B,cAAc,GAAG,GAC3B,CAAC;UACD,IAAIm5C,WAAW,GAAG,CAAC,EAAE;EACnB,UAAA,IAAIgB,MAAM,GAAG7uE,OAAO,CAAC00B,cAAc,GAAG,CAAC,EAAE;EACvC;cACA,IAAI,CAACtgD,GAAG,CAAA,yBAAA,GACoBw6F,YAAY,CAACviE,OAAO,CAC5C,CACF,CAAC,GAAA,8CACH,CAAC;EACD/L,YAAAA,GAAG,GAAG7nB,SAAS;EACf8nB,YAAAA,IAAI,GAAG9nB,SAAS;EAClB,UAAA,CAAC,MAAM,IACLi+D,eAAe,IAAA,IAAA,IAAfA,eAAe,CAAEthB,UAAU,IAC3By5C,MAAM,GAAG7uE,OAAO,CAAC6R,UAAU,GAAG6kC,eAAe,CAACthB,UAAU,EACxD;EACA;EACA;EACA,YAAA,IAAI,CAACp+C,IAAI,CAAA,mCAAA,GAC6B0/D,eAAe,CAACthB,UAAU,GAAA,OAAA,GAAQy4C,WAAW,GAAA,sBAAA,GAAuB7tE,OAAO,CAACG,GAClH,CAAC;EACD0tE,YAAAA,WAAW,GAAG,CAAC;EACjB,UAAA,CAAC,MAAM;cACL,IAAMiB,QAAQ,GAAGx8F,IAAI,CAACE,KAAK,CAACq7F,WAAW,GAAG7tE,OAAO,CAAC00B,cAAc,CAAC;EACjEp0B,YAAAA,GAAG,IAAIwuE,QAAQ;cACf,IAAIvuE,IAAI,KAAK9nB,SAAS,EAAE;EACtB,cAAA,IAAMs2F,KAAK,GAAGz8F,IAAI,CAAC24B,KAAK,CACrB4iE,WAAW,GAAG7tE,OAAO,CAAC00B,cAAc,GAAI10B,OAAO,CAAC6R,UACnD,CAAC;EACDtR,cAAAA,IAAI,IAAIwuE,KAAK;EACf,YAAA;EACA,YAAA,IAAI,CAAC36F,GAAG,CAAA,mBAAA,GAEJ4rB,OAAO,CAACm0B,SAAS,wBACAy6C,YAAY,CAACviE,OAAO,CACrC,CACF,CAAC,GAAA,UAAA,GAAWwhE,WAAW,iBAAYiB,QAAQ,GAAA,WAAA,GAAYvuE,IACzD,CAAC;EACH,UAAA;YACAP,OAAO,CAACo1B,UAAU,GAAGy4C,WAAW;EAClC,QAAA;EACAW,QAAAA,kBAAkB,GAAG,IAAI,CAACQ,qBAAqB,CAC7ChvE,OAAO,EACP5gB,IAAI,CAACovF,kBAAkB,EACvBluE,GAAG,EACHC,IACF,CAAC;EACD,QAAA,IAAIkyC,cAAc,IAAI,CAACi8B,mBAAmB,EAAE;YAC1C1uE,OAAO,CAACk0B,gBAAgB,GAAGnqB,GAAG;EAC9B,UAAA,IAAI,CAACgkE,eAAe,CAACM,YAAY,EAAEG,kBAAkB,CAAC;EACtD,UAAA;EACF,QAAA;QACF,CAAC,MAAM,IAAIxuE,OAAO,CAAC60B,cAAc,IAAI70B,OAAO,CAACC,YAAY,EAAE;EACzDuuE,QAAAA,kBAAkB,GAAG,IAAI,CAACQ,qBAAqB,CAC7ChvE,OAAO,EACP5gB,IAAI,CAACovF,kBAAkB,EACvBluE,GAAG,EACHC,IACF,CAAC;EACH,MAAA;QACA,IAAIiuE,kBAAkB,IAAIluE,GAAG,KAAK7nB,SAAS,IAAIunB,OAAO,CAAC60B,cAAc,EAAE;UACrE70B,OAAO,CAACk0B,gBAAgB,GACtBtzC,KAAK,CAACjF,OAAO,CAACE,KAAK,GACnBvJ,IAAI,CAACsD,GAAG,CAACuyD,cAAc,GAAGimC,OAAO,GAAG,CAAC,EAAEjmC,cAAc,GAAG,CAAC,CAAC;EAC9D,MAAA;QACA,IAAI,CAAC8mC,eAAe,CAACZ,YAAY,EAAEG,kBAAkB,EAAExuE,OAAO,CAAC;EACjE,IAAA,CAAC,MAAM;QACL,IAAI,CAACoK,UAAU,EAAE;EACnB,IAAA;IACF,CAAC;IAAA/1B,MAAA,CAES46F,eAAe,GAAzB,SAAUA,eAAeA,CACvBZ,YAAmC,EACnCG,kBAAqC,EACrCU,cAA6B,EAC7B;EAAA,IAAA,IAAAltF,MAAA,GAAA,IAAA;EACA,IAAA,IAAMge,OAAO,GAAGkvE,cAAc,IAAIb,YAAY,CAACruE,OAAO;MACtD,IAAI,CAACA,OAAO,EAAE;EACZ,MAAA,IAAI,CAAC+tE,eAAe,CAACM,YAAY,EAAEG,kBAAkB,CAAC;EACtD,MAAA;EACF,IAAA;MACA,IAAMzkE,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAClC,IAAA,IAAMmqB,gBAAgB,GAAGl0B,OAAO,CAACk0B,gBAAgB;MACjD,IAAInqB,GAAG,IAAImqB,gBAAgB,EAAE;EAC3B,MAAA,IAAI,CAAC65C,eAAe,CAACM,YAAY,EAAEG,kBAAkB,CAAC;EACtD,MAAA;EACF,IAAA;EAEA,IAAA,IAAMW,wBAAwB,GAAGj7C,gBAAgB,GAAGnqB,GAAG;MACvD,IAAI,CAAC31B,GAAG,CAAA,uBAAA,IACkBi6F,YAAY,CAAC30F,IAAI,IAAI20F,YAAY,CAACzxE,OAAO,GAAG,KAAK,CAAA,GAAA,MAAA,GAAOtqB,IAAI,CAAC24B,KAAK,CACxFkkE,wBACF,CAAC,QACH,CAAC;MAED,IAAI,CAAC/kE,UAAU,EAAE;EACjB,IAAA,IAAI,CAACf,KAAK,GAAGzxB,IAAI,CAAC81C,UAAU,CAC1B,YAAA;EAAA,MAAA,OAAM1rC,MAAI,CAAC+rF,eAAe,CAACM,YAAY,EAAEG,kBAAkB,CAAC;EAAA,IAAA,CAAA,EAC5DW,wBACF,CAAC;IACH,CAAC;EAAA96F,EAAAA,MAAA,CAEO26F,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3BhvE,OAAqB,EACrBovE,0BAAmD,EACnD9uE,GAAY,EACZC,IAAa,EACK;EAClB,IAAA,IAAIC,IAAI,GAAGT,YAAY,CAACC,OAAO,CAAC;MAChC,IAAIovE,0BAA0B,YAA1BA,0BAA0B,CAAE5uE,IAAI,IAAIR,OAAO,CAACq1B,iBAAiB,EAAE;QACjE/0B,GAAG,GAAG8uE,0BAA0B,CAAC9uE,GAAG;QACpCC,IAAI,GAAG6uE,0BAA0B,CAAC7uE,IAAI;QACtCC,IAAI,GAAGb,OAAO,CAACC,EAAE;EACnB,IAAA;MACA,OAAO,IAAIS,gBAAgB,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAC9C,CAAC;EAAAnsB,EAAAA,MAAA,CAESg7F,UAAU,GAApB,SAAUA,UAAUA,CAACC,UAAqB,EAAW;EAAA,IAAA,IAAAz+D,MAAA,GAAA,IAAA;EACnD,IAAA,IAAM8K,YAAY,GAAG2zD,UAAU,CAACtvE,OAAO;EACvC,IAAA,IAAM8V,SAAS,GAAGR,cAAc,CAACg6D,UAAU,CAAC;EAC5C,IAAA,IAAMt2D,WAAW,GAAGs2D,UAAU,CAACt2D,WAAW;EAC1C,IAAA,IAAA96B,IAAA,GAAgD86B,WAAW,IAAI,EAAE;QAAzDM,MAAM,GAAAp7B,IAAA,CAANo7B,MAAM;QAAAi2D,eAAA,GAAArxF,IAAA,CAAE+3B,UAAU;EAAVA,MAAAA,UAAU,GAAAs5D,eAAA,KAAA,MAAA,GAAG,CAAC,GAAAA,eAAA;QAAEv5D,WAAW,GAAA93B,IAAA,CAAX83B,WAAW;MAC3C,IAAMz6B,KAAK,GACT,CAAC,CAACy9B,WAAW,IACb,CAAC,CAAChD,WAAW,KACZsD,MAAM,KAAKpC,kBAAkB,CAACI,YAAY,IACxC,CAAC0B,WAAW,CAAC4D,QAAQ,IACpBtD,MAAM,KAAKpC,kBAAkB,CAACE,yBAA0B,CAAC;EAC/D,IAAA,IAAI77B,KAAK,EAAE;EAAA,MAAA,IAAAi0F,mBAAA;EACT,MAAA,IAAIv5D,UAAU,IAAID,WAAW,CAACc,WAAW,EAAE;EACzC,QAAA,OAAO,KAAK;EACd,MAAA;QACA,IAAIhB,SAAS,IAAA,CAAA05D,mBAAA,GAAIF,UAAU,CAACp3F,OAAO,KAAA,IAAA,IAAlBs3F,mBAAA,CAAoBhB,kBAAkB,EAAE;EACvD;EACA,QAAA,IAAI,CAACx3F,IAAI,CAAA,4BAAA,IACsBi/B,UAAU,GAAG,CAAC,CAAA,GAAA,GAAA,GACzCD,WAAW,CAACc,WAAW,GAAA,WAAA,GACd6E,YAAY,mCACzB,CAAC;UACD,IAAI,CAAC6xD,YAAY,EAAE;EACrB,MAAA,CAAC,MAAM;EACL,QAAA,IAAM11B,KAAK,GAAG/hC,aAAa,CAACC,WAAW,EAAEC,UAAU,CAAC;EACpD;UACA,IAAI,CAAC7L,UAAU,EAAE;EACjB,QAAA,IAAI,CAACf,KAAK,GAAGzxB,IAAI,CAAC81C,UAAU,CAAC,YAAA;EAAA,UAAA,OAAM7c,MAAI,CAAC28D,YAAY,EAAE;EAAA,QAAA,CAAA,EAAE11B,KAAK,CAAC;EAC9D,QAAA,IAAI,CAAC9gE,IAAI,CAAA,4BAAA,IACsBi/B,UAAU,GAAG,CAAC,CAAA,GAAA,GAAA,GACzCD,WAAW,CAACc,WAAW,GAAA,WAAA,GACd6E,YAAY,GAAA,QAAA,GAAQm8B,KAAK,OACtC,CAAC;EACH,MAAA;EACA;QACAw3B,UAAU,CAACz1D,UAAU,GAAG,IAAI;QAC5Bb,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,IAAA;EACA,IAAA,OAAOrhC,KAAK;IACd,CAAC;EAAA,EAAA,OAAA+xF,sBAAA;EAAA,CAAA,CApYO32F,MAAM,CAAA;;ECrBT,SAAS84F,wBAAwBA,CACtCC,UAAqC,EACrCC,UAA2B,EAClB;EACT,EAAA,IAAID,UAAU,CAACn2F,MAAM,KAAKo2F,UAAU,CAACp2F,MAAM,EAAE;EAC3C,IAAA,OAAO,KAAK;EACd,EAAA;EACA,EAAA,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGi1F,UAAU,CAACn2F,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC1C,IAAA,IACE,CAACm1F,wBAAwB,CACvBF,UAAU,CAACj1F,CAAC,CAAC,CAAC8mB,KAAK,EACnBouE,UAAU,CAACl1F,CAAC,CAAC,CAAC8mB,KAChB,CAAC,EACD;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EACF,EAAA;EACA,EAAA,OAAO,IAAI;EACb;EAEO,SAASquE,wBAAwBA,CACtCC,MAAuB,EACvBC,MAAuB,EACvBC,gBAA2B,EAClB;EACT;EACA,EAAA,IAAMC,iBAAiB,GAAGH,MAAM,CAAC,qBAAqB,CAAC;EACvD,EAAA,IAAIG,iBAAiB,IAAI,CAACD,gBAAgB,EAAE;EAC1C,IAAA,OAAOC,iBAAiB,KAAKF,MAAM,CAAC,qBAAqB,CAAC;EAC5D,EAAA;EACA;IACA,OAAO,CAAC,CACNC,gBAAgB,IAAI,CAClB,UAAU,EACV,MAAM,EACN,iBAAiB,EACjB,YAAY,EACZ,SAAS,EACT,QAAQ,EACR,gBAAgB,CACjB,EACDt2F,IAAI,CACJ,UAACw2F,iBAAiB,EAAA;MAAA,OAChBJ,MAAM,CAACI,iBAAiB,CAAC,KAAKH,MAAM,CAACG,iBAAiB,CAAC;EAAA,EAAA,CAC3D,CAAC;EACH;EAEO,SAASC,6BAA6BA,CAC3CC,aAA6D,EAC7DpwB,SAAoB,EACpB;EACA,EAAA,OACEA,SAAS,CAACnpE,KAAK,CAAC0iB,WAAW,EAAE,KAAK62E,aAAa,CAACz2F,IAAI,CAAC4f,WAAW,EAAE,KACjE,CAACymD,SAAS,CAACqwB,QAAQ,IAClBrwB,SAAS,CAACqwB,QAAQ,CAAC92E,WAAW,EAAE,KAC9B,CAAC62E,aAAa,CAACtpE,IAAI,IAAI,EAAE,EAAEvN,WAAW,EAAE,CAAC;EAEjD;;ECjDmC,IAgB7B+2E,oBAAoB,0BAAAC,qBAAA,EAAA;IAQxB,SAAAD,oBAAAA,CAAY1nE,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAwyF,qBAAA,CAAAvyF,IAAA,OAAM4qB,GAAG,EAAE,wBAAwB,CAAC,IAAA,IAAA;MAAC7qB,KAAA,CAR/BsN,MAAM,GAAoB,EAAE;MAAAtN,KAAA,CAC5ByyF,QAAQ,GAAkC,IAAI;MAAAzyF,KAAA,CAC9C0yF,aAAa,GAAoB,EAAE;EAAA1yF,IAAAA,KAAA,CACnC6H,OAAO,GAAW,EAAE;MAAA7H,KAAA,CACpB2yF,YAAY,GAAyB,IAAI;MAAA3yF,KAAA,CACzC4yF,kBAAkB,GAAY,IAAI;MAIxC5yF,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAA0wF,oBAAA,EAAAC,qBAAA,CAAA;EAAA,EAAA,IAAAj8F,MAAA,GAAAg8F,oBAAA,CAAA/7F,SAAA;EAAAD,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DjoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC29F,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDnoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DlF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACg3F,kBAAkB,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAAC;EAChExhE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAC;EAAAh6B,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DjoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC29F,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDnoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DlF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACg3F,kBAAkB,EAAE,IAAI,CAACC,kBAAkB,EAAE,IAAI,CAAC;EACjExhE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3C,CAAC;EAAAh6B,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC+3B,mBAAmB,EAAE;EAC1B,IAAA,IAAI,CAACljB,MAAM,CAAC7R,MAAM,GAAG,CAAC;EACtB,IAAA,IAAI,CAACi3F,aAAa,CAACj3F,MAAM,GAAG,CAAC;MAC7B,IAAI,CAACk3F,YAAY,GAAG,IAAI;EACxBH,IAAAA,qBAAA,CAAAh8F,SAAA,CAAMiC,OAAO,CAAAwH,IAAA,CAAA,IAAA,CAAA;IACf,CAAC;EAAA1J,EAAAA,MAAA,CAESg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAS;MAClC,IAAI,CAACjiB,MAAM,GAAG,EAAE;MAChB,IAAI,CAAColF,aAAa,GAAG,EAAE;MACvB,IAAI,CAACD,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACE,YAAY,GAAG,IAAI;EACxB,IAAA,IAAI,CAAC9qF,OAAO,GAAG,EAAE;MACjB,IAAI,CAAC+qF,kBAAkB,GAAG,IAAI;IAChC,CAAC;IAAAr8F,MAAA,CAESu8F,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBpiE,KAA6B,EAC7BpvB,IAAwB,EAClB;EACN,IAAA,IAAI,CAACgM,MAAM,GAAGhM,IAAI,CAACu5B,WAAW,IAAI,EAAE;IACtC,CAAC;IAAAtkC,MAAA,CAES81F,kBAAkB,GAA5B,SAAUA,kBAAkBA,CAC1B37D,KAAgC,EAChCpvB,IAA0B,EACpB;EACN,IAAA,IAAQ1H,EAAE,GAAuB0H,IAAI,CAA7B1H,EAAE;QAAE2kB,OAAO,GAAcjd,IAAI,CAAzBid,OAAO;QAAE2D,OAAO,GAAK5gB,IAAI,CAAhB4gB,OAAO;EAC5B,IAAA,IAAM+wE,kBAAkB,GAAG,IAAI,CAACP,aAAa,CAAC94F,EAAE,CAAC;MAEjD,IAAI,CAACq5F,kBAAkB,IAAIA,kBAAkB,CAAC10E,OAAO,KAAKA,OAAO,EAAE;EACjE,MAAA,IAAI,CAACrlB,IAAI,CAAA,sBAAA,GACgBU,EAAE,GAAA,aAAA,GAAc2kB,OAAO,GAAA,6BAAA,IAA8B00E,kBAAkB,IAAA,IAAA,GAAA,MAAA,GAAlBA,kBAAkB,CAAE10E,OAAO,CACzG,CAAC;EACD,MAAA;EACF,IAAA;EAEA,IAAA,IAAM20E,UAAU,GAAGD,kBAAkB,CAAC/wE,OAAO;EAC7C+wE,IAAAA,kBAAkB,CAAC/wE,OAAO,GAAG5gB,IAAI,CAAC4gB,OAAO;MACzC,IAAI,CAAC5rB,GAAG,CAAA,cAAA,GACSsD,EAAE,WAAKq5F,kBAAkB,CAACr3F,IAAI,GAAA,UAAA,GAAUq3F,kBAAkB,CAAClqE,IAAI,GAAA,SAAA,GAAUxK,OAAO,GAAA,WAAA,GAAY2D,OAAO,CAACw0B,OAAO,SAAIx0B,OAAO,CAAC+zB,KAAK,GAAA,GAC7I,CAAC;EAED,IAAA,IAAIr8C,EAAE,KAAK,IAAI,CAACiO,OAAO,EAAE;QACvB,IAAI,CAACwoF,cAAc,CAACz2F,EAAE,EAAE0H,IAAI,EAAE4xF,UAAU,CAAC;EAC3C,IAAA;IACF,CAAC;IAAA38F,MAAA,CAESy8F,cAAc,GAAxB,SAAUA,cAAcA,CACtBtiE,KAA2B,EAC3BpvB,IAAsB,EAChB;EACN,IAAA,IAAI,CAAC29B,WAAW,CAAC39B,IAAI,CAACV,KAAK,CAAC;IAC9B,CAAC;IAAArK,MAAA,CAESw5B,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBW,KAA6B,EAC7BpvB,IAAwB,EAClB;EACN,IAAA,IAAI,CAAC29B,WAAW,CAAC39B,IAAI,CAACV,KAAK,CAAC;IAC9B,CAAC;EAAArK,EAAAA,MAAA,CAEO0oC,WAAW,GAAnB,SAAQA,WAAWA,CAACrD,UAAkB,EAAE;MACtC,IAAMlK,SAAS,GAAG,IAAI,CAAC7G,GAAG,CAACxC,MAAM,CAACuT,UAAU,CAAC;MAC7C,IAAI,CAAClK,SAAS,EAAE;EACd,MAAA;EACF,IAAA;EACA,IAAA,IAAM5T,WAAW,GAAG4T,SAAS,CAAC5T,WAAW,IAAI,IAAI;EACjD,IAAA,IAAMq1E,aAAa,GAAG,IAAI,CAACV,QAAQ;EACnC,IAAA,IAAIE,YAAY,GAAG,IAAI,CAACA,YAAY;MACpC,IACE,CAAC70E,WAAW,IACZ,CAAAq1E,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAE13F,MAAM,OAAKqiB,WAAW,oBAAXA,WAAW,CAAEriB,MAAM,CAAA,IAC7CqiB,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEniB,IAAI,CAAC,UAAC4iB,OAAO,EAAA;QAAA,OAAK,CAAA40E,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAEt3F,OAAO,CAAC0iB,OAAO,CAAC,MAAK,EAAE;EAAA,IAAA,CAAA,CAAC,EACtE;QACA,IAAI,CAACk0E,QAAQ,GAAG30E,WAAW;EAC3B,MAAA,IAAI,CAACjW,OAAO,GAAG,EAAE;QACjB,IAAI,CAAC8qF,YAAY,GAAG,IAAI;QAExB,IAAM93D,WAAW,GAAG,IAAI,CAACvtB,MAAM,CAACsW,MAAM,CACpC,UAACpb,KAAK,EAAA;EAAA,QAAA,OACJ,CAACsV,WAAW,IAAIA,WAAW,CAACjiB,OAAO,CAAC2M,KAAK,CAAC+V,OAAO,CAAC,KAAK,EAAE;EAAA,MAAA,CAC7D,CAAC;QACD,IAAIsc,WAAW,CAACp/B,MAAM,EAAE;EACtB;UACA,IACE,IAAI,CAACm3F,kBAAkB,IACvB,CAAC/3D,WAAW,CAACl/B,IAAI,CAAC,UAAC6M,KAAK,EAAA;YAAA,OAAKA,KAAK,CAACC,OAAO;EAAA,QAAA,CAAA,CAAC,EAC3C;YACA,IAAI,CAACmqF,kBAAkB,GAAG,KAAK;EACjC,QAAA;EACA;EACA/3D,QAAAA,WAAW,CAACtgC,OAAO,CAAC,UAACiO,KAAK,EAAE7L,CAAC,EAAK;YAChC6L,KAAK,CAAC5O,EAAE,GAAG+C,CAAC;EACd,QAAA,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,CAACg2F,YAAY,IAAI,CAAC,IAAI,CAACD,aAAa,CAACj3F,MAAM,EAAE;EACtD;EACA,QAAA;EACF,MAAA;QACA,IAAI,CAACi3F,aAAa,GAAG73D,WAAW;;EAEhC;QACA,IAAMhd,eAAe,GAAG,IAAI,CAACgN,GAAG,CAACrJ,MAAM,CAAC3D,eAAe;EACvD,MAAA,IAAI,CAAC80E,YAAY,IAAI90E,eAAe,EAAE;UACpC,IAAMu1E,UAAU,GAAGlqE,kBAAkB,CACnCrL,eAAe,EACfgd,WAAW,EACX7Q,mBACF,CAAC;EACD,QAAA,IAAIopE,UAAU,GAAG,EAAE,EAAE;EACnBT,UAAAA,YAAY,GAAG93D,WAAW,CAACu4D,UAAU,CAAC;EACxC,QAAA,CAAC,MAAM;YACL,IAAMC,QAAQ,GAAGnqE,kBAAkB,CAACrL,eAAe,EAAE,IAAI,CAACvQ,MAAM,CAAC;EACjEqlF,UAAAA,YAAY,GAAG,IAAI,CAACrlF,MAAM,CAAC+lF,QAAQ,CAAC;EACtC,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAIxrF,OAAO,GAAG,IAAI,CAACyrF,WAAW,CAACX,YAAY,CAAC;EAC5C,MAAA,IAAI9qF,OAAO,KAAK,EAAE,IAAI8qF,YAAY,EAAE;EAClC9qF,QAAAA,OAAO,GAAG,IAAI,CAACyrF,WAAW,CAAC,IAAI,CAAC;EAClC,MAAA;;EAEA;EACA,MAAA,IAAMC,kBAA0C,GAAG;EAAE14D,QAAAA,WAAW,EAAXA;SAAa;EAClE,MAAA,IAAI,CAACvkC,GAAG,CAAA,yBAAA,GAEJukC,WAAW,CAACp/B,MAAM,GAAA,+BAAA,IACYqiB,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEtK,IAAI,CAAC,GAAG,CAAC,CACxD,CAAC;QACD,IAAI,CAACqX,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC42F,oBAAoB,EAAEuH,kBAAkB,CAAC;EAEjE,MAAA,IAAMC,eAAe,GAAG,IAAI,CAAC3rF,OAAO;QACpC,IAAIA,OAAO,KAAK,EAAE,IAAI2rF,eAAe,KAAK,EAAE,EAAE;EAC5C,QAAA,IAAI,CAACC,aAAa,CAAC5rF,OAAO,CAAC;QAC7B,CAAC,MAAM,IAAIgzB,WAAW,CAACp/B,MAAM,IAAI+3F,eAAe,KAAK,EAAE,EAAE;EAAA,QAAA,IAAAE,cAAA;UACvD,IAAMjgG,KAAK,GAAG,IAAIgrB,KAAK,+DAAAi1E,cAAA,GACqC,IAAI,CAACjB,QAAQ,qBAAbiB,cAAA,CAAelgF,IAAI,CAC3E,GACF,CAAC,CAAA,GAAA,gBAAA,GAAiBqnB,WAAW,CAACp/B,MAChC,CAAC;EACD,QAAA,IAAI,CAACvC,IAAI,CAACzF,KAAK,CAACsrC,OAAO,CAAC;UAExB,IAAI,CAAClU,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;YAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;YAC5BzsB,OAAO,EAAE/sB,YAAY,CAAC+mC,sBAAsB;EAC5CrL,UAAAA,KAAK,EAAE,IAAI;EACXp9B,UAAAA,KAAK,EAALA;EACF,SAAC,CAAC;EACJ,MAAA;EACF,IAAA;IACF,CAAC;IAAA8C,MAAA,CAESg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAQ;MAC5D,IAAIA,IAAI,CAACuvB,KAAK,IAAI,CAACvvB,IAAI,CAAClH,OAAO,EAAE;EAC/B,MAAA;EACF,IAAA;EAEA,IAAA,IACEkH,IAAI,CAAClH,OAAO,CAACT,IAAI,KAAKtE,mBAAmB,CAACG,WAAW,IACrD8L,IAAI,CAAClH,OAAO,CAACR,EAAE,KAAK,IAAI,CAACiO,OAAO,KAC/B,CAAC,IAAI,CAAC4qF,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC52F,OAAO,CAACyF,IAAI,CAAClH,OAAO,CAACmkB,OAAO,CAAC,KAAK,EAAE,CAAC,EACtE;EACA,MAAA,IAAI,CAACgzE,UAAU,CAACjwF,IAAI,CAAC;EACvB,IAAA;IACF,CAAC;EAAA/K,EAAAA,MAAA,CAoBMo9F,cAAc,GAArB,SAAOA,cAAcA,CACnBC,WAA6D,EACvC;EACtB,IAAA,IAAM/oE,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,IAAAA,GAAG,CAACrJ,MAAM,CAAC3D,eAAe,GAAG+1E,WAAW;EACxC,IAAA,IAAIA,WAAW,EAAE;EACf,MAAA,IAAM/rE,cAAc,GAAG,IAAI,CAACA,cAAc;QAC1C,IAAI,CAAC+qE,kBAAkB,GAAG,KAAK;QAC/B,IAAI/qE,cAAc,CAACpsB,MAAM,EAAE;EACzB;EACA,QAAA,IAAMk3F,YAAY,GAAG,IAAI,CAACA,YAAY;UACtC,IACEA,YAAY,IACZvpE,aAAa,CAACwqE,WAAW,EAAEjB,YAAY,EAAE3oE,mBAAmB,CAAC,EAC7D;EACA,UAAA,OAAO2oE,YAAY;EACrB,QAAA;EACA;UACA,IAAMS,UAAU,GAAGlqE,kBAAkB,CACnC0qE,WAAW,EACX,IAAI,CAAClB,aAAa,EAClB1oE,mBACF,CAAC;EACD,QAAA,IAAIopE,UAAU,GAAG,EAAE,EAAE;EACnB,UAAA,IAAM5qF,KAAK,GAAG,IAAI,CAACkqF,aAAa,CAACU,UAAU,CAAC;EAC5C,UAAA,IAAI,CAACK,aAAa,CAACL,UAAU,CAAC;EAC9B,UAAA,OAAO5qF,KAAK;UACd,CAAC,MAAM,IAAImqF,YAAY,EAAE;EACvB;EACA,UAAA,IAAIzoE,WAAW,GAAGW,GAAG,CAAC6D,SAAS;EAC/B,UAAA,IAAIxE,WAAW,KAAK,EAAE,EAAE;cACtBA,WAAW,GAAGW,GAAG,CAACoK,cAAc;EAClC,UAAA;EACA,UAAA,IAAM4+D,WAAW,GAAG5pE,8BAA8B,CAChD2pE,WAAW,EACX/oE,GAAG,CAACxC,MAAM,EACVR,cAAc,EACdqC,WAAW,EACXF,mBACF,CAAC;EACD,UAAA,IAAI6pE,WAAW,KAAK,EAAE,EAAE;EACtB;EACA,YAAA,OAAO,IAAI;EACb,UAAA;EACA;YACAhpE,GAAG,CAACiD,aAAa,GAAG+lE,WAAW;EACjC,QAAA;EACA,QAAA,IAAID,WAAW,CAAC11E,QAAQ,IAAI01E,WAAW,CAAC71E,UAAU,EAAE;EAClD;EACA;EACA,UAAA,IAAM+1E,4BAA4B,GAAG5qE,kBAAkB,CACrD0qE,WAAW,EACX/rE,cACF,CAAC;EACD,UAAA,IAAIisE,4BAA4B,GAAG,EAAE,EAAE;cACrC,OAAOjsE,cAAc,CAACisE,4BAA4B,CAAC;EACrD,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAAv9F,EAAAA,MAAA,CAEOk9F,aAAa,GAArB,SAAQA,aAAaA,CAACM,KAAa,EAAQ;EACzC,IAAA,IAAMzmF,MAAM,GAAG,IAAI,CAAColF,aAAa;;EAEjC;MACA,IAAIqB,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIzmF,MAAM,CAAC7R,MAAM,EAAE;EACvC,MAAA,IAAI,CAACvC,IAAI,CAAA,0BAAA,GAA4B66F,KAAO,CAAC;EAC7C,MAAA;EACF,IAAA;MAEA,IAAI,CAACnB,kBAAkB,GAAG,KAAK;EAC/B,IAAA,IAAMoB,SAAS,GAAG,IAAI,CAACrB,YAAY;EACnC,IAAA,IAAMnqF,KAAK,GAAG8E,MAAM,CAACymF,KAAK,CAAC;MAC3B,IAAME,WAAW,GAAGzrF,KAAK,CAAC0Z,OAAO,IAAI,CAAC1Z,KAAK,CAAC0Z,OAAO,CAACuL,IAAI;MACxD,IAAIsmE,KAAK,KAAK,IAAI,CAAClsF,OAAO,IAAIW,KAAK,KAAKwrF,SAAS,IAAIC,WAAW,EAAE;EAChE,MAAA;EACF,IAAA;MACA,IAAI,CAAC39F,GAAG,CAAA,2BAAA,GACsBy9F,KAAK,WAAKvrF,KAAK,CAAC5M,IAAI,GAAA,UAAA,GAAU4M,KAAK,CAACugB,IAAI,GAAA,SAAA,GAAUvgB,KAAK,CAAC+V,OAAO,kBAAa/V,KAAK,CAAC0V,QAChH,CAAC;MACD,IAAI,CAACrW,OAAO,GAAGksF,KAAK;MACpB,IAAI,CAACpB,YAAY,GAAGnqF,KAAK;EACzB,IAAA,IAAI,CAACqiB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC82F,qBAAqB,EAAA5jF,cAAA,CAAA,EAAA,EAAOE,KAAK,CAAE,CAAC;EAC5D;EACA,IAAA,IAAIyrF,WAAW,EAAE;EACf,MAAA;EACF,IAAA;EACA,IAAA,IAAMjE,gBAAgB,GAAG,IAAI,CAACL,YAAY,CACxCnnF,KAAK,CAAC9U,GAAG,EACTsgG,SAAS,IAAA,IAAA,GAAA,MAAA,GAATA,SAAS,CAAE9xE,OAAO,EAClB1Z,KAAK,CAAC0Z,OACR,CAAC;EACD,IAAA,IAAI,CAACwtE,YAAY,CAACM,gBAAgB,CAAC;IACrC,CAAC;EAAAz5F,EAAAA,MAAA,CAEO+8F,WAAW,GAAnB,SAAQA,WAAWA,CAACX,YAAkC,EAAU;EAC9D,IAAA,IAAM93D,WAAW,GAAG,IAAI,CAAC63D,aAAa;EACtC,IAAA,KAAK,IAAI/1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGk+B,WAAW,CAACp/B,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC3C,MAAA,IAAM6L,KAAK,GAAGqyB,WAAW,CAACl+B,CAAC,CAAC;QAC5B,IAAI,IAAI,CAACi2F,kBAAkB,IAAI,CAACpqF,KAAK,CAACC,OAAO,EAAE;EAC7C,QAAA;EACF,MAAA;QACA,IACE,CAACkqF,YAAY,IACbvpE,aAAa,CAACupE,YAAY,EAAEnqF,KAAK,EAAEwhB,mBAAmB,CAAC,EACvD;EACA,QAAA,OAAOrtB,CAAC;EACV,MAAA;EACF,IAAA;EACA,IAAA,IAAIg2F,YAAY,EAAE;EAChB,MAAA,IAAQ/2F,IAAI,GACV+2F,YAAY,CADN/2F,IAAI;UAAEmtB,IAAI,GAChB4pE,YAAY,CADA5pE,IAAI;UAAEC,SAAS,GAC3B2pE,YAAY,CADM3pE,SAAS;UAAEC,eAAe,GAC5C0pE,YAAY,CADiB1pE,eAAe;UAAElL,UAAU,GACxD40E,YAAY,CADkC50E,UAAU;UAAEG,QAAQ,GAClEy0E,YAAY,CAD8Cz0E,QAAQ;EAEpE,MAAA,KAAK,IAAIvhB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGk+B,WAAW,CAACp/B,MAAM,EAAEkB,EAAC,EAAE,EAAE;EAC3C,QAAA,IAAM6L,MAAK,GAAGqyB,WAAW,CAACl+B,EAAC,CAAC;EAC5B,QAAA,IACEysB,aAAa,CACX;EAAExtB,UAAAA,IAAI,EAAJA,IAAI;EAAEmtB,UAAAA,IAAI,EAAJA,IAAI;EAAEC,UAAAA,SAAS,EAATA,SAAS;EAAEC,UAAAA,eAAe,EAAfA,eAAe;EAAElL,UAAAA,UAAU,EAAVA,UAAU;EAAEG,UAAAA,QAAQ,EAARA;EAAS,SAAC,EAChE1V,MAAK,EACLwhB,mBACF,CAAC,EACD;EACA,UAAA,OAAOrtB,EAAC;EACV,QAAA;EACF,MAAA;EACA,MAAA,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGk+B,WAAW,CAACp/B,MAAM,EAAEkB,GAAC,EAAE,EAAE;EAC3C,QAAA,IAAM6L,OAAK,GAAGqyB,WAAW,CAACl+B,GAAC,CAAC;EAC5B,QAAA,IACEm1F,wBAAwB,CAACa,YAAY,CAAClvE,KAAK,EAAEjb,OAAK,CAACib,KAAK,EAAE,CACxD,UAAU,EACV,gBAAgB,EAChB,iBAAiB,CAClB,CAAC,EACF;EACA,UAAA,OAAO9mB,GAAC;EACV,QAAA;EACF,MAAA;EACA,MAAA,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAGk+B,WAAW,CAACp/B,MAAM,EAAEkB,GAAC,EAAE,EAAE;EAC3C,QAAA,IAAM6L,OAAK,GAAGqyB,WAAW,CAACl+B,GAAC,CAAC;EAC5B,QAAA,IACEm1F,wBAAwB,CAACa,YAAY,CAAClvE,KAAK,EAAEjb,OAAK,CAACib,KAAK,EAAE,CACxD,UAAU,CACX,CAAC,EACF;EACA,UAAA,OAAO9mB,GAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;EAAApG,EAAAA,MAAA,CAESm5F,YAAY,GAAtB,SAAUA,YAAYA,CAACM,gBAAmC,EAAQ;EAChEwC,IAAAA,qBAAA,CAAAh8F,SAAA,CAAMk5F,YAAY,CAAAzvF,IAAA,CAAA,IAAA,CAAA;EAClB,IAAA,IAAM+gB,UAAU,GAAG,IAAI,CAAC2xE,YAAY;EACpC,IAAA,IAAI,CAAC,IAAI,CAACxC,kBAAkB,CAACnvE,UAAU,CAAC,EAAE;EACxC,MAAA;EACF,IAAA;EACA;MACA,IAAI2J,iBAAiB,CAAC3J,UAAU,CAACttB,GAAG,EAAE,IAAI,CAACm3B,GAAG,CAAC,EAAE;EAC/C,MAAA,IAAI,CAACsmE,eAAe,CAACnwE,UAAU,EAAEgvE,gBAAgB,CAAC;EACpD,IAAA;IACF,CAAC;IAAAz5F,MAAA,CAES05F,eAAe,GAAzB,SAAUA,eAAeA,CACvBjvE,UAAyB,EACzBgvE,gBAA8C,EAC9C;MACAwC,qBAAA,CAAAh8F,SAAA,CAAMy5F,eAAe,CAAAhwF,IAAA,CAAA,IAAA,EAAC+gB,UAAU,EAAEgvE,gBAAgB,CAAA;EAClD,IAAA,IAAMp2F,EAAE,GAAGonB,UAAU,CAACpnB,EAAE;EACxB,IAAA,IAAM2kB,OAAO,GAAGyC,UAAU,CAACzC,OAAiB;MAC5C,IAAM7qB,GAAG,GAAG,IAAI,CAAC08F,oBAAoB,CAACpvE,UAAU,CAACttB,GAAG,EAAEs8F,gBAAgB,CAAC;EACvE,IAAA,IAAM9tE,OAAO,GAAGlB,UAAU,CAACkB,OAAO;EAClC,IAAA,IAAMG,GAAG,GAAGH,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEG,GAAG;EACxB,IAAA,IAAI,CAAC/rB,GAAG,CAAA,sBAAA,GACiBsD,EAAE,WAAKonB,UAAU,CAACplB,IAAI,GAAA,UAAA,GAAUolB,UAAU,CAAC+H,IAAI,GAAA,SAAA,GAAUxK,OAAO,IACrF,CAAAyxE,gBAAgB,IAAA,IAAA,GAAA,MAAA,GAAhBA,gBAAgB,CAAExtE,GAAG,MAAK7nB,SAAS,GAC/B,SAAS,GAAGq1F,gBAAgB,CAACxtE,GAAG,GAAG,QAAQ,GAAGwtE,gBAAgB,CAACvtE,IAAI,GACnE,EAAE,CAAA,IACLJ,GAAG,IAAIH,OAAO,CAACuL,IAAI,GAAG,OAAO,GAAGpL,GAAG,CAACkM,OAAO,CAAC,CAAC,CAAC,IAAIrM,OAAO,CAACvoB,IAAI,GAAG,GAAG,GAAGuoB,OAAO,CAACvoB,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAA,GAAA,GAAA,GAAIjG,GAC7G,CAAC;MACD,IAAI,CAACm3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC8+F,mBAAmB,EAAE;EAC3CxgG,MAAAA,GAAG,EAAHA,GAAG;EACHkG,MAAAA,EAAE,EAAFA,EAAE;EACF2kB,MAAAA,OAAO,EAAPA,OAAO;QACPmyE,kBAAkB,EAAEV,gBAAgB,IAAI,IAAI;EAC5CxnF,MAAAA,KAAK,EAAEwY;EACT,KAAC,CAAC;IACJ,CAAC;IAAA,OAAAtoB,YAAA,CAAA65F,oBAAA,EAAA,CAAA;MAAA55F,GAAA,EAAA,gBAAA;MAAAC,GAAA,EA9MD,SAAAA,GAAAA,GAAsC;QACpC,OAAO,IAAI,CAAC0U,MAAM;EACpB,IAAA;EAAC,GAAA,EAAA;MAAA3U,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;QACjC,OAAO,IAAI,CAAC85F,aAAa;EAC3B,IAAA;EAAC,GAAA,EAAA;MAAA/5F,GAAA,EAAA,YAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyB;QACvB,OAAO,IAAI,CAACiP,OAAO;MACrB,CAAC;EAAAtI,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAew0F,KAAa,EAAE;EAC5B;QACA,IAAI,CAACnB,kBAAkB,GAAG,KAAK;EAC/B,MAAA,IAAI,CAACa,aAAa,CAACM,KAAK,CAAC;EAC3B,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CAzNgCvE,sBAAsB,CAAA;;MCpBpC2E,oBAAoB,gBAAA,YAAA;IAQvC,SAAAA,oBAAAA,CAAYC,qBAA2C,EAAE;EAAA,IAAA,IAAA,CAPjD9mF,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACN+mF,MAAM,GAAiC;EAC7C3vF,MAAAA,KAAK,EAAE,EAAE;EACTD,MAAAA,KAAK,EAAE,EAAE;EACTE,MAAAA,UAAU,EAAE;OACb;MAGC,IAAI,CAAC2I,MAAM,GAAG8mF,qBAAqB;EACrC,EAAA;EAAC,EAAA,IAAA79F,MAAA,GAAA49F,oBAAA,CAAA39F,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;EACf,IAAA,IAAI,CAAC6U,MAAM,GAAG,IAAI,CAAC+mF,MAAM,GAAG,IAAI;IAClC,CAAC;IAAA99F,MAAA,CAEM+9F,MAAM,GAAb,SAAOA,MAAMA,CACXC,SAA0B,EAC1B56F,IAAsB,EACtB66F,OAA6B,EAC7B;MACA,IAAI,IAAI,CAACH,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC/mF,MAAM,KAAK,IAAI,EAAE;EAChD,MAAA;EACF,IAAA;EACA,IAAA,IAAMmnF,KAAK,GAAG,IAAI,CAACJ,MAAM,CAAC16F,IAAI,CAAC;EAC/B86F,IAAAA,KAAK,CAACnvF,IAAI,CAACivF,SAAS,CAAC;MACrB,IAAIE,KAAK,CAACh5F,MAAM,KAAK,CAAC,IAAI,CAAC+4F,OAAO,EAAE;EAClC,MAAA,IAAI,CAACE,WAAW,CAAC/6F,IAAI,CAAC;EACxB,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CAEMo+F,aAAa,GAApB,SAAOA,aAAaA,CAACh7F,IAAsB,EAAiB;EAAA,IAAA,IAAAqG,KAAA,GAAA,IAAA;EAC1D,IAAA,OAAO,IAAIkf,OAAO,CAAC,UAACC,OAAO,EAAK;EAC9B,MAAA,IAAMo1E,SAA0B,GAAG;EACjCz7F,QAAAA,KAAK,EAAE,eAAe;EACtB87F,QAAAA,OAAO,EAAEz1E,OAAO;EAChB01E,QAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC,CAAC;EACjBC,QAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ,CAAC,CAAC;EACpBvkE,QAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC;SACjB;EACDvwB,MAAAA,KAAI,CAACs0F,MAAM,CAACC,SAAS,EAAE56F,IAAI,CAAC;EAC9B,IAAA,CAAC,CAAC;IACJ,CAAC;EAAApD,EAAAA,MAAA,CAEMw+F,cAAc,GAArB,SAAOA,cAAcA,CAACp7F,IAAsB,EAAiB;EAAA,IAAA,IAAAuK,MAAA,GAAA,IAAA;EAC3D,IAAA,OAAO,IAAIgb,OAAO,CAAC,UAACC,OAAO,EAAK;QAC9B,IAAIjb,MAAI,CAACmwF,MAAM,EAAE;EACf,QAAA,IAAME,SAA0B,GAAG;EACjCz7F,UAAAA,KAAK,EAAE,uBAAuB;EAC9B87F,UAAAA,OAAO,EAAEz1E,OAAO;EAChB01E,UAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC,CAAC;EACjBC,UAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ,CAAC,CAAC;EACpBvkE,UAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC;WACjB;UACDrsB,MAAI,CAACmwF,MAAM,CAAC16F,IAAI,CAAC,CAACsqD,OAAO,CAACswC,SAAS,CAAC;EACtC,MAAA;EACF,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAh+F,EAAAA,MAAA,CAEMy+F,cAAc,GAArB,SAAOA,cAAcA,GAAG;EACtB,IAAA,IAAI,IAAI,CAACX,MAAM,KAAK,IAAI,EAAE;EACxB,MAAA;EACF,IAAA;MACA,CAAC,IAAI,CAACA,MAAM,CAAC3vF,KAAK,EAAE,IAAI,CAAC2vF,MAAM,CAAC5vF,KAAK,EAAE,IAAI,CAAC4vF,MAAM,CAAC1vF,UAAU,CAAC,CAACpK,OAAO,CACpE,UAACk6F,KAAK,EAAK;EAAA,MAAA,IAAAQ,OAAA;QACT,IAAMn8F,KAAK,GAAA,CAAAm8F,OAAA,GAAGR,KAAK,CAAC,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAARQ,OAAA,CAAUn8F,KAAK;EAC7B,MAAA,IAAIA,KAAK,KAAK,eAAe,IAAIA,KAAK,KAAK,uBAAuB,EAAE;EAClE27F,QAAAA,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO,EAAE;EAClBH,QAAAA,KAAK,CAACp6C,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;EACpB,MAAA;EACF,IAAA,CACF,CAAC;IACH,CAAC;EAAA9jD,EAAAA,MAAA,CAEM2+F,YAAY,GAAnB,SAAOA,YAAYA,CAACC,EAAmB,EAAE;EACvC,IAAA,IAAI,IAAI,CAACd,MAAM,KAAK,IAAI,EAAE;EACxB,MAAA;EACF,IAAA;EACA,IAAA,IAAMI,KAAK,GAAG,IAAI,CAACJ,MAAM,CAAC5vF,KAAK;EAC/B,IAAA,IAAIgwF,KAAK,CAAC,CAAC,CAAC,KAAKU,EAAE,EAAE;EACnB,MAAA,IAAI,CAACC,mBAAmB,CAAC,OAAO,CAAC;EACnC,IAAA;IACF,CAAC;EAAA7+F,EAAAA,MAAA,CAEMm+F,WAAW,GAAlB,SAAOA,WAAWA,CAAC/6F,IAAsB,EAAE;MACzC,IAAI,IAAI,CAAC06F,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC/mF,MAAM,KAAK,IAAI,EAAE;EAChD,MAAA;EACF,IAAA;EACA,IAAA,IAAMmnF,KAAK,GAAG,IAAI,CAACJ,MAAM,CAAC16F,IAAI,CAAC;MAC/B,IAAI86F,KAAK,CAACh5F,MAAM,EAAE;EAChB,MAAA,IAAM84F,SAA0B,GAAGE,KAAK,CAAC,CAAC,CAAC;QAC3C,IAAI;EACF;EACA;UACAF,SAAS,CAACK,OAAO,EAAE;QACrB,CAAC,CAAC,OAAOnhG,KAAK,EAAE;EAAA,QAAA,IAAA4hG,iBAAA;EACdd,QAAAA,SAAS,CAAChkE,OAAO,CAAC98B,KAAK,CAAC;UACxB,IAAI,IAAI,CAAC4gG,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC/mF,MAAM,KAAK,IAAI,EAAE;EAChD,UAAA;EACF,QAAA;;EAEA;EACA,QAAA,IAAMgoF,EAAE,GAAA,CAAAD,iBAAA,GAAG,IAAI,CAAC/nF,MAAM,CAAC3T,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAAjB07F,iBAAA,CAAmBh4F,MAAM;EACpC,QAAA,IAAI,EAACi4F,EAAE,IAAA,IAAA,IAAFA,EAAE,CAAEC,QAAQ,CAAA,EAAE;EACjB,UAAA,IAAI,CAACH,mBAAmB,CAACz7F,IAAI,CAAC;EAChC,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CAEM6+F,mBAAmB,GAA1B,SAAOA,mBAAmBA,CAACz7F,IAAsB,EAAE;EACjD,IAAA,IAAI,IAAI,CAAC06F,MAAM,KAAK,IAAI,EAAE;EACxB,MAAA;EACF,IAAA;MACA,IAAI,CAACA,MAAM,CAAC16F,IAAI,CAAC,CAACma,KAAK,EAAE;EACzB,IAAA,IAAI,CAAC4gF,WAAW,CAAC/6F,IAAI,CAAC;IACxB,CAAC;EAAApD,EAAAA,MAAA,CAEMs5F,OAAO,GAAd,SAAOA,OAAOA,CAACl2F,IAAsB,EAA0B;EAAA,IAAA,IAAA67F,YAAA;EAC7D,IAAA,OAAO,CAAA,CAAAA,YAAA,GAAA,IAAI,CAACnB,MAAM,KAAA,IAAA,GAAA,MAAA,GAAXmB,YAAA,CAAc77F,IAAI,CAAC,CAAC,CAAC,CAAC,KAAI,IAAI;IACvC,CAAC;EAAApD,EAAAA,MAAA,CAEMzC,QAAQ,GAAf,SAAOA,QAAQA,GAAW;EACxB,IAAA,IAAQugG,MAAM,GAAa,IAAI,CAAvBA,MAAM;QAAE/mF,MAAM,GAAK,IAAI,CAAfA,MAAM;EACtB,IAAA,IAAI+mF,MAAM,KAAK,IAAI,IAAI/mF,MAAM,KAAK,IAAI,EAAE;EACtC,MAAA,OAAA,aAAA;EACF,IAAA;EACA,IAAA,OAAA,IAAA,GACF,IAAI,CAAC8nB,IAAI,CAAC,OAAO,CAAC,UAClB,IAAI,CAACA,IAAI,CAAC,OAAO,CAAC,GAAA,IAAA,GAClB,IAAI,CAACA,IAAI,CAAC,YAAY,CAAC,GAAA,GAAA;IACvB,CAAC;EAAA7+B,EAAAA,MAAA,CAEM6+B,IAAI,GAAX,SAAOA,IAAIA,CAACz7B,IAAsB,EAAU;MAAA,IAAA87F,aAAA,EAAAC,YAAA;EAC1C,IAAA,OAAO,CAAAD,aAAA,GAAA,IAAI,CAACpB,MAAM,aAAXoB,aAAA,CAAc97F,IAAI,CAAC,KAAA+7F,YAAA,GAAI,IAAI,CAACpoF,MAAM,aAAXooF,YAAA,CAAc/7F,IAAI,CAAC,GAC1CA,IAAI,GAAA,KAAA,GAAM,IAAI,CAACg8F,UAAU,CAACh8F,IAAI,CAAC,GAAA,IAAA,GAAK,IAAI,CAACi8F,OAAO,CAACj8F,IAAI,CAAC,GACzD,EAAE;IACR,CAAC;EAAApD,EAAAA,MAAA,CAEOo/F,UAAU,GAAlB,SAAQA,UAAUA,CAACh8F,IAAsB,EAAU;EAAA,IAAA,IAAAk8F,aAAA;MACjD,IAAMrtF,KAAK,GAAA,CAAAqtF,aAAA,GAAG,IAAI,CAACvoF,MAAM,KAAA,IAAA,GAAA,MAAA,GAAXuoF,aAAA,CAAcl8F,IAAI,CAAC;EACjC,IAAA,IAAM27F,EAAE,GAAG9sF,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEnL,MAAM;MACxB,IAAI,CAACi4F,EAAE,EAAE;EACP,MAAA,OAAO,MAAM;EACf,IAAA;MACA,OAAA,cAAA,IAAsBA,EAAE,CAACC,QAAQ,GAAG,WAAW,GAAG,EAAE,CAAA,IAAG/sF,KAAK,CAACqnD,KAAK,GAAG,QAAQ,GAAG,EAAE,CAAA,IAAGrnD,KAAK,CAACstF,MAAM,GAAG,SAAS,GAAG,EAAE,CAAA;IACpH,CAAC;EAAAv/F,EAAAA,MAAA,CAEOq/F,OAAO,GAAf,SAAQA,OAAOA,CAACj8F,IAAsB,EAAU;EAAA,IAAA,IAAAo8F,aAAA;EAC9C,IAAA,OAAO,CAAA,CAAAA,aAAA,GAAA,IAAI,CAAC1B,MAAM,KAAA,IAAA,GAAA,MAAA,GAAX0B,aAAA,CAAcp8F,IAAI,CAAC,CAACiX,GAAG,CAAC,UAACukF,EAAE,EAAA;QAAA,OAAKA,EAAE,CAACr8F,KAAK;EAAA,IAAA,CAAA,CAAC,CAAC0a,IAAI,CAAC,IAAI,CAAC,KAAI,EAAE;IACnE,CAAC;EAAA,EAAA,OAAA2gF,oBAAA;EAAA,CAAA,EAAA;;EChGH,IAAM6B,2BAA2B,GAC/B,sDAAsD;EAExD,IAAMC,wBAAwB,GAAG,wBAAwB;EAAC,IAEpDC,sBAAsB,0BAAAtnD,MAAA,EAAA;IAC1B,SAAAsnD,sBAAAA,CAAYn3D,OAAO,EAAE;EAAA,IAAA,IAAA/+B,KAAA;EACnBA,IAAAA,KAAA,GAAA4uC,MAAA,CAAA3uC,IAAA,CAAA,IAAA,EAAM8+B,OAAO,CAAC,IAAA,IAAA;MACd/+B,KAAA,CAAKpE,IAAI,GAAGq6F,wBAAwB;EAAC,IAAA,OAAAj2F,KAAA;EACvC,EAAA;IAAC6B,cAAA,CAAAq0F,sBAAA,EAAAtnD,MAAA,CAAA;EAAA,EAAA,OAAAsnD,sBAAA;EAAA,CAAA,cAAArnD,gBAAA,CAJkCpwB,KAAK,CAAA,CAAA;EAAA,IAOrB03E,gBAAgB,0BAAAlrE,OAAA,EAAA;EAiDnC,EAAA,SAAAkrE,gBAAAA,CAAYtrE,GAAQ,EAAEgiC,eAAgC,EAAE;EAAA,IAAA,IAAA3oD,MAAA;MACtDA,MAAA,GAAA+mB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,mBAAmB,EAAE4qB,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACmL,IAAAA,MAAA,CAjDjC2mB,GAAG,GAAA,MAAA;EAAA3mB,IAAAA,MAAA,CACH2oD,eAAe,GAAA,MAAA;EACvB;MAAA3oD,MAAA,CACQge,OAAO,GAAwB,IAAI;EAC3C;MAAAhe,MAAA,CACQkyF,UAAU,GAAkB,IAAI;EACxC;MAAAlyF,MAAA,CACQmyF,cAAc,GAAgC,IAAI;EAE1D;MAAAnyF,MAAA,CACQoyF,sBAAsB,GAAW,CAAC;EAE1C;MAAApyF,MAAA,CACQ6gB,KAAK,GAA4B,IAAI;EAE7C;MAAA7gB,MAAA,CACQqyF,WAAW,GAAuB,IAAI;EAE9C;MAAAryF,MAAA,CACQsyF,kBAAkB,GAAyB,IAAI;EAEvD;MAAAtyF,MAAA,CACQuyF,kBAAkB,GAGf,IAAI;EACf;MAAAvyF,MAAA,CACQwyF,kBAAkB,GAAW,CAAC;EACtC;EAAAxyF,IAAAA,MAAA,CACQyyF,YAAY,GAAA,MAAA;EACpB;EAAAzyF,IAAAA,MAAA,CACQ0yF,YAAY,GAAA,MAAA;EACpB;EAAA1yF,IAAAA,MAAA,CACQ2yF,SAAS,GAAA,MAAA;EACjB;MAAA3yF,MAAA,CACQ4yF,YAAY,GAAG;EACrBryF,MAAAA,KAAK,EAAE,CAAC;EACRC,MAAAA,KAAK,EAAE,CAAC;EACRC,MAAAA,UAAU,EAAE;OACb;EACD;EAAAT,IAAAA,MAAA,CACQoJ,MAAM,GAAyB,EAAE;EACzC;EAAApJ,IAAAA,MAAA,CACQ6yF,aAAa,GAAuB,CAC1C,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,IAAI,EAAE,IAAI,CAAC,CACb;EAAA7yF,IAAAA,MAAA,CAgUO8yF,eAAe,GAAG,UAACtmE,KAAK,EAAK;EAAA,MAAA,IAAAumE,kBAAA;EACnC,MAAA,IAAI,CAAC/yF,MAAA,CAAK2mB,GAAG,EAAS;EACpB,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAAA,CAAAosE,kBAAA,GAAA/yF,MAAA,CAAKqyF,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhBU,kBAAA,CAAkBtqE,UAAU,MAAK,MAAM,EAAE;EAC3C,QAAA;EACF,MAAA;EACAzoB,MAAAA,MAAA,CAAK2mB,GAAG,CAACqkC,cAAc,EAAE;MAC3B,CAAC;EAAAhrD,IAAAA,MAAA,CAEOgzF,iBAAiB,GAAG,UAACxmE,KAAK,EAAK;EACrC,MAAA,IAAI,CAACxsB,MAAA,CAAK2mB,GAAG,EAAS;EACpB,QAAA;EACF,MAAA;EACA3mB,MAAAA,MAAA,CAAK2mB,GAAG,CAACskC,eAAe,EAAE;MAC5B,CAAC;EA8jCD;EAAAjrD,IAAAA,MAAA,CACQizF,kBAAkB,GAAG,UAAC38F,CAAS,EAAK;QAC1C,IAAAu4B,MAAA,GAAA7uB,MAAA;UAAQ6gB,KAAK,GAAAgO,MAAA,CAALhO,KAAK;UAAEwxE,WAAW,GAAAxjE,MAAA,CAAXwjE,WAAW;EAC1B,MAAA,IAAI/7F,CAAC,EAAE;EACL0J,QAAAA,MAAA,CAAK5N,GAAG,CAAC,qBAAqB,CAAC;EACjC,MAAA;EACA,MAAA,IAAI,CAACyuB,KAAK,IAAI,CAACwxE,WAAW,EAAE;EAC1B,QAAA;EACF,MAAA;EACA;QACAA,WAAW,CAACzqC,mBAAmB,CAAC,YAAY,EAAE5nD,MAAA,CAAKizF,kBAAkB,CAAC;QACtEpyE,KAAK,CAAC+mC,mBAAmB,CAAC,SAAS,EAAE5nD,MAAA,CAAKkzF,eAAe,CAAC;QAC1DlzF,MAAA,CAAKmzF,cAAc,EAAE;QACrBnzF,MAAA,CAAK2mB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs5D,cAAc,EAAE;EACtC3pC,QAAAA,KAAK,EAALA,KAAK;EACLwxE,QAAAA,WAAW,EAAEA;EACf,OAAC,CAAC;EAEF,MAAA,IAAIryF,MAAA,CAAKqyF,WAAW,KAAK,IAAI,EAAE;UAC7BryF,MAAA,CAAKozF,kBAAkB,EAAE;EAC3B,MAAA;MACF,CAAC;MAAApzF,MAAA,CAEOqzF,mBAAmB,GAAG,YAAM;EAClCrzF,MAAAA,MAAA,CAAK5N,GAAG,CAAC,qBAAqB,CAAC;MACjC,CAAC;MAAA4N,MAAA,CAEOszF,mBAAmB,GAAG,YAAM;EAClCtzF,MAAAA,MAAA,CAAK5N,GAAG,CAAC,oBAAoB,CAAC;MAChC,CAAC;MAAA4N,MAAA,CAEOkzF,eAAe,GAAG,YAAM;QAC9B,IAAAxlC,MAAA,GAAA1tD,MAAA;UAAQuzF,QAAQ,GAAA7lC,MAAA,CAAR6lC,QAAQ;UAAErB,UAAU,GAAAxkC,MAAA,CAAVwkC,UAAU;QAC5B,IAAIqB,QAAQ,KAAKrB,UAAU,EAAE;EAC3BlyF,QAAAA,MAAA,CAAKzQ,KAAK,CAAA,yDAAA,GACkD2iG,UAAU,GAAA,KAAA,GAAMqB,QAAQ,MACpF,CAAC;EACH,MAAA;MACF,CAAC;MA/6CCvzF,MAAA,CAAK2mB,GAAG,GAAGA,GAAG;MACd3mB,MAAA,CAAK2oD,eAAe,GAAGA,eAAe;EACtC3oD,IAAAA,MAAA,CAAKyyF,YAAY,GAAG37F,oBAAoB,CACtCP,cAAc,CAACowB,GAAG,CAACrJ,MAAM,CAAC9mB,wBAAwB,CACpD,CAAC;MAEDwJ,MAAA,CAAKo/E,UAAU,EAAE;MACjBp/E,MAAA,CAAK+qB,iBAAiB,EAAE;EAAC,IAAA,OAAA/qB,MAAA;EAC3B,EAAA;IAACrC,cAAA,CAAAs0F,gBAAA,EAAAlrE,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAA4/F,gBAAA,CAAA3/F,SAAA;EAAAD,EAAAA,MAAA,CAEMmhG,cAAc,GAArB,SAAOA,cAAcA,GAAY;MAC/B,OAAOp8F,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACgT,MAAM,CAAC,CAAC7R,MAAM,GAAG,CAAC;IAC5C,CAAC;EAAAlF,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC+3B,mBAAmB,EAAE;MAC1B,IAAI,CAACtO,OAAO,GAAG,IAAI;EACnB,IAAA,IAAI,CAACs0E,kBAAkB,GAAG,IAAI,CAACC,kBAAkB,GAAG,IAAI;EACxD,IAAA,IAAI,CAACG,YAAY,GAAG,IAAI,CAACC,SAAS,GAAGl8F,SAAS;MAC9C,IAAI,IAAI,CAAC07F,cAAc,EAAE;EACvB,MAAA,IAAI,CAACA,cAAc,CAAC59F,OAAO,EAAE;QAC7B,IAAI,CAAC49F,cAAc,GAAG,IAAI;EAC5B,IAAA;EACA;EACA,IAAA,IAAI,CAACxrE,GAAG,GAAG,IAAI,CAACgiC,eAAe,GAAG,IAAI;EACtC;EACA,IAAA,IAAI,CAACsqC,kBAAkB,GAAG,IAAI,CAACI,mBAAmB,GAAG,IAAI;EACzD;MACA,IAAI,CAACC,mBAAmB,GAAG,IAAI;EAC/B;EACA,IAAA,IAAI,CAACN,iBAAiB,GAAG,IAAI,CAACF,eAAe,GAAG,IAAI;IACtD,CAAC;EAAAzgG,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3D/sE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DhkC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DjoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk3F,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrD1hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACigE,gBAAgB,EAAE,IAAI,CAACwiC,iBAAiB,EAAE,IAAI,CAAC;EAC7DhtE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EACvDjtE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw4F,UAAU,EAAE,IAAI,CAACmK,WAAW,EAAE,IAAI,CAAC;EACjDltE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;EAC3D7hE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDpP,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC0lE,WAAW,EAAE,IAAI,CAACk9B,YAAY,EAAE,IAAI,CAAC;EACnDntE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC6iG,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrDrtE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAC;EAAAh6B,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5D/sE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DhkC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DjoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk3F,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtD1hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACigE,gBAAgB,EAAE,IAAI,CAACwiC,iBAAiB,EAAE,IAAI,CAAC;EAC9DhtE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EACxDjtE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw4F,UAAU,EAAE,IAAI,CAACmK,WAAW,EAAE,IAAI,CAAC;EAClDltE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;EAC5D7hE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDpP,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC0lE,WAAW,EAAE,IAAI,CAACk9B,YAAY,EAAE,IAAI,CAAC;EACpDntE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC6iG,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtDrtE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3C,CAAC;EAAAh6B,EAAAA,MAAA,CAEMq5D,aAAa,GAApB,SAAOA,aAAaA,GAAiC;EAAA,IAAA,IAAAqD,MAAA,GAAA,IAAA;EACnD,IAAA,IAAQluC,KAAK,GAAkB,IAAI,CAA3BA,KAAK;QAAEwxE,WAAW,GAAK,IAAI,CAApBA,WAAW;MAC1B,IAAI,CAACxxE,KAAK,EAAE;EACV,MAAA,OAAO,IAAI;EACb,IAAA;MACA,IAAMzX,MAAM,GAAG,EAAE;MACjB,IAAI,IAAI,CAAC+oF,cAAc,EAAE;EACvB,MAAA,IAAMd,QAAQ,GAAG,IAAI,CAAC4C,UAAU,EAAE;QAClC,IAAI,CAAC5C,QAAQ,EAAE;EACb,QAAA,IAAI,CAACc,cAAc,CAACrB,cAAc,EAAE;EACtC,MAAA;EACA,MAAA,IAAMoD,MAAM,GAAG,IAAI,CAACC,QAAQ,EAAE;QAC9B,IAAI9C,QAAQ,IAAI6C,MAAM,EAAE;EACtB,QAAA,IAAI,CAACl/F,IAAI,CAAA,8BAAA,IACwBk/F,MAAM,GAAG,sBAAsB,GAAG,EAAE,CAAA,IAAG7C,QAAQ,GAAG,2BAA2B,GAAG,EAAE,UAAI,IAAI,CAACc,cAC5H,CAAC;EACH,MAAA;EACA,MAAA,IAAI,CAACA,cAAc,CAAC59F,OAAO,EAAE;EAC/B,IAAA;EACA,IAAA,IAAMm+F,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,IAAA,IACE,CAAC,IAAI,CAAC0B,iBAAiB,IACvB1B,YAAY,IACZA,YAAY,CAACL,WAAW,KAAKA,WAAW,EACxC;EACA98F,MAAAA,QAAA,CAAc6T,MAAM,EAAEspF,YAAY,CAACtpF,MAAM,CAAC;EAC5C,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACypF,aAAa,CAACx8F,OAAO,CAAC,UAACg+F,KAAK,EAAK;UACpC,IAAO5+F,IAAI,GAAI4+F,KAAK,CAAA,CAAA,CAAA;EACpB,QAAA,IAAI5+F,IAAI,EAAE;EACR2T,UAAAA,MAAM,CAAC3T,IAAI,CAAC,GAAGF,QAAA,CAAc,EAAE,EAAEw5D,MAAI,CAAC3lD,MAAM,CAAC3T,IAAI,CAAC,CAAC;EACnDs5D,UAAAA,MAAI,CAACulC,YAAY,CAAC7+F,IAAI,CAAC;EACzB,QAAA;UACA4+F,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;EAC5B,MAAA,CAAC,CAAC;EACJ,IAAA;MACA,OAAO;EACLxzE,MAAAA,KAAK,EAALA,KAAK;EACLwxE,MAAAA,WAAW,EAAXA,WAAW;EACXjpF,MAAAA,MAAM,EAANA;OACD;IACH,CAAC;EAAA/W,EAAAA,MAAA,CAEO+sF,UAAU,GAAlB,SAAQA,UAAUA,GAAG;MACnB,IAAMh2E,MAAM,GAAG,EAAE;EACjB,IAAA,IAAI,CAACypF,aAAa,GAAG,CACnB,CAAC,IAAI,EAAE,IAAI,CAAC,EACZ,CAAC,IAAI,EAAE,IAAI,CAAC,CACb;MACD,IAAI,CAACzpF,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACmrF,UAAU,EAAE;MACjB,IAAI,CAACC,iBAAiB,EAAE;EACxB,IAAA,IAAI,CAAClC,kBAAkB,GAAG,IAAI,CAACC,kBAAkB,GAAG,IAAI;MACxD,IAAI,CAACC,kBAAkB,GAAG,CAAC;IAC7B,CAAC;EAAAngG,EAAAA,MAAA,CAEOg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAAC+mE,sBAAsB,GAAG,CAAC;MAC/B,IAAI,CAACp0E,OAAO,GAAG,IAAI;IACrB,CAAC;IAAA3rB,MAAA,CAEOu8F,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBpiE,KAA6B,EAC7BpvB,IAAwB,EACxB;EAAA,IAAA,IAAAq3F,kBAAA;EACA;EACA;EACA;EACA;MACA,IAAIC,WAAmB,GAAG,CAAC;EAC3B,IAAA,IAAKt3F,IAAI,CAACmD,KAAK,IAAI,CAACnD,IAAI,CAACoD,KAAK,IAAK,CAACpD,IAAI,CAAC2sF,QAAQ,EAAE;EACjD2K,MAAAA,WAAW,GAAG,CAAC;EACjB,IAAA;MACA,IAAI,CAACtC,sBAAsB,GAAGsC,WAAW;EACzC,IAAA,IAAI,CAACtiG,GAAG,CAAIsiG,WAAW,oCAAiC,CAAC;EACzD,IAAA,IACE,CAAAD,kBAAA,GAAA,IAAI,CAAC/B,YAAY,KAAA,IAAA,IAAjB+B,kBAAA,CAAmBpC,WAAW,IAC9B,IAAI,CAAC+B,iBAAiB,IACtBM,WAAW,EACX;QACA,IAAI,CAACC,aAAa,EAAE;EACtB,IAAA;IACF,CAAC;IAAAtiG,MAAA,CAEOqhG,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBlnE,KAA6B,EAC7BpvB,IAAwB,EACxB;MACA,IAAMyjB,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGzjB,IAAI,CAACyjB,KAAM;EACvC,IAAA,IAAI,CAAC6xE,YAAY,GAAG,IAAI,CAACC,SAAS,GAAGl8F,SAAS;EAC9C,IAAA,IAAME,WAAW,GAAGJ,cAAc,CAAC,IAAI,CAACk8F,YAAY,CAAC;EACrD,IAAA,IAAI97F,WAAW,EAAE;EACf,MAAA,IAAM80D,iBAAiB,GAAG,CAAC,CAACruD,IAAI,CAACi1F,WAAW;EAC5C,MAAA,IAAI5mC,iBAAiB,IAAIruD,IAAI,CAACu1F,SAAS,EAAE;UACvC,IAAI,CAACD,YAAY,GAAGt1F,IAAI;EACxB,QAAA,IAAI,CAACu1F,SAAS,GAAGv1F,IAAI,CAACu1F,SAAS;EACjC,MAAA;EACA,MAAA,IAAMiC,EAAE,GAAI,IAAI,CAACvC,WAAW,GAAGj1F,IAAI,CAACi1F,WAAW,IAAI,IAAI17F,WAAW,EAAG;EACrE,MAAA,IAAI,CAACk+F,iBAAiB,CAACD,EAAE,CAAC;EAC1B,MAAA,IAAInpC,iBAAiB,EAAE;EACrB,QAAA,IAAI,CAACymC,UAAU,GAAGrxE,KAAK,CAACi0E,GAAG;UAC3B,IAAI,CAACC,iBAAiB,EAAE;EAC1B,MAAA,CAAC,MAAM;EACL;EACA,QAAA,IAAMC,SAAS,GAAI,IAAI,CAAC9C,UAAU,GAAGt8F,IAAI,CAACnG,GAAG,CAACC,eAAe,CAACklG,EAAE,CAAE;EAClE;UACA,IAAI,IAAI,CAACnC,YAAY,EAAE;YACrB,IAAI;EACF5xE,YAAAA,KAAK,CAACo0E,eAAe,CAAC,KAAK,CAAC;EAC5B;EACA,YAAA,IAAMC,GAAG,GAAIt/F,IAAI,CAASgB,kBAAkB;cAC5CiqB,KAAK,CAACs0E,qBAAqB,GACzBt0E,KAAK,CAACs0E,qBAAqB,IAAKD,GAAG,IAAIN,EAAE,YAAYM,GAAI;cAC3DE,oBAAoB,CAACv0E,KAAK,CAAC;EAC3Bw0E,YAAAA,SAAS,CAACx0E,KAAK,EAAEm0E,SAAS,CAAC;cAC3Bn0E,KAAK,CAACwmB,IAAI,EAAE;YACd,CAAC,CAAC,OAAO93C,KAAK,EAAE;cACdsxB,KAAK,CAACi0E,GAAG,GAAGE,SAAS;EACvB,UAAA;EACF,QAAA,CAAC,MAAM;YACLn0E,KAAK,CAACi0E,GAAG,GAAGE,SAAS;EACvB,QAAA;EACF,MAAA;QACAn0E,KAAK,CAAC6mC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACwrC,eAAe,CAAC;EACzD,IAAA;IACF,CAAC;EAAA7gG,EAAAA,MAAA,CAEOwiG,iBAAiB,GAAzB,SAAQA,iBAAiBA,CAACD,EAAe,EAAE;MAAA,IAAAU,mBAAA,EAAAC,eAAA;EACzC,IAAA,IAAI,CAACnjG,GAAG,CAAA,CACH,CAAA,CAAAkjG,mBAAA,GAAA,IAAI,CAAC5C,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjB4C,mBAAA,CAAmBjD,WAAW,MAAKuC,EAAE,GAAG,aAAa,GAAG,SAAS,IAAA,iBAAA,IAAA,CAAAW,eAAA,GAAmBX,EAAE,CAACY,WAAW,KAAA,IAAA,GAAA,MAAA,GAAfD,eAAA,CAAyB79F,IAAI,CACrH,CAAC;EACD;MACAk9F,EAAE,CAACltC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAACurC,kBAAkB,CAAC;MAC1D2B,EAAE,CAACltC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC4rC,mBAAmB,CAAC;MAC5DsB,EAAE,CAACltC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC2rC,mBAAmB,CAAC;MAC5D,IAAI,IAAI,CAACZ,YAAY,EAAE;QACrBmC,EAAE,CAACltC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAACsrC,iBAAiB,CAAC;QAC7D4B,EAAE,CAACltC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAACorC,eAAe,CAAC;EAC3D,IAAA;IACF,CAAC;EAAAzgG,EAAAA,MAAA,CAEO0iG,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAAA,IAAA,IAAAjlC,MAAA,GAAA,IAAA;EAC1B,IAAA,IAAMjvC,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAMzjB,IAAI,GAAG,IAAI,CAACs1F,YAAY;EAC9B,IAAA,IAAI,CAACt1F,IAAI,IAAI,CAACyjB,KAAK,EAAE;EACnB,MAAA;EACF,IAAA;EACA,IAAA,IAAM3pB,cAAc,GAAG,IAAI,CAACkS,MAAM;EAClC,IAAA,IAAMqsF,iBAAiB,GAAGr4F,IAAI,CAACgM,MAAM;MACrC,IAAMjS,UAAU,GAAGs+F,iBAAiB,GAChCr+F,MAAM,CAAChB,IAAI,CAACq/F,iBAAiB,CAAC,GAC9B,IAAI;MACR,IAAMn+F,UAAU,GAAGH,UAAU,GAAGA,UAAU,CAACI,MAAM,GAAG,CAAC;EACrD,IAAA,IAAMm+F,uBAAuB,GAAG,SAA1BA,uBAAuBA,GAAS;EACpC;EACA16E,MAAAA,OAAO,CAACC,OAAO,EAAE,CAACc,IAAI,CAAC,YAAM;EAC3B,QAAA,IAAI+zC,MAAI,CAACjvC,KAAK,IAAIivC,MAAI,CAAC6lC,sBAAsB,EAAE;YAC7C7lC,MAAI,CAACmjC,kBAAkB,EAAE;EAC3B,QAAA;EACF,MAAA,CAAC,CAAC;MACJ,CAAC;EACD,IAAA,IAAIwC,iBAAiB,IAAIt+F,UAAU,IAAIG,UAAU,EAAE;EACjD,MAAA,IAAI,CAAC,IAAI,CAACs+F,WAAW,EAAE;EACrB;EACA,QAAA,IAAI,CAACjvE,GAAG,CAACrJ,MAAM,CAACmsE,iBAAiB,GAAG,IAAI;UACxC,IAAI,CAACr3F,GAAG,CAAA,wDAAyD,CAAC;EAClE,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CACDA,GAAG,CAAA,6CAAA,GAA+C,IAAI,CAACggG,sBAAsB,GAAA,sBAAA,GACnEzwE,SAAS,CAACzqB,cAAc,EAAE,UAACzC,GAAG,EAAE7D,KAAK,EAAA;EAAA,QAAA,OAAM6D,GAAG,KAAK,aAAa,GAAGgC,SAAS,GAAG7F,KAAK;QAAA,CAAC,CAAC,4BACtF+wB,SAAS,CAAC8zE,iBAAiB,EAAE,UAAChhG,GAAG,EAAE7D,KAAK,EAAA;EAAA,QAAA,OAAM6D,GAAG,KAAK,aAAa,GAAGgC,SAAS,GAAG7F,KAAK;QAAA,CAAC,CAAC,MAAG,CAAC;EAC1G,MAAA,IAAI,CAACoG,uBAAuB,CAACy+F,iBAAiB,EAAEv+F,cAAc,CAAC,EAAE;EAC/D;UACAkG,IAAI,CAACi1F,WAAW,GAAG,IAAI;UACvBj1F,IAAI,CAACgM,MAAM,GAAG3S,SAAS;EAEvB,QAAA,IAAMmzD,WAAW,GAAG/oC,KAAK,CAAC+oC,WAAW;EAErC,QAAA,IAAM5rC,OAAO,GAAG,IAAI,CAACA,OAAO;UAC5B,IAAM0gB,SAAS,GAAGpuC,IAAI,CAACsD,GAAG,CACxBg2D,WAAW,EACX,CAAA5rC,OAAO,oBAAPA,OAAO,CAAEyT,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK,KAAI,CACjC,CAAC;EACD,QAAA,IAAI8kC,SAAS,GAAGkrB,WAAW,GAAG,CAAC,EAAE;EAC/B,UAAA,IAAI,CAACx3D,GAAG,CAAA,yEAAA,GACoEw3D,WAAW,GAAA,MAAA,GAAOlrB,SAC9F,CAAC;EACD,UAAA;EACF,QAAA;UACA,IAAI,CAAC1pC,IAAI,CAAA,sEAAA,GAC+DoC,MAAM,CAAChB,IAAI,CAACq/F,iBAAiB,CAAC,GAAA,QAAA,GAAOr+F,MAAM,CAAChB,IAAI,CAACc,cAAc,CAAC,wBAAkBwnC,SAAS,GAAA,gBAAA,GAAiBkrB,WACpL,CAAC;UACD,IAAI,CAACe,gBAAgB,CAACz5D,MAAM,CAACw5D,eAAe,EAAE,EAAE,CAAC;UACjD,IAAI,CAACgpC,gBAAgB,CAACxiG,MAAM,CAACuiG,eAAe,EAAEr2F,IAAI,CAAC;UACnDyjB,KAAK,CAAC+oC,WAAW,GAAGlrB,SAAS;EAC7B,QAAA;EACF,MAAA;QACA,IAAI,CAACg0D,YAAY,GAAGj8F,SAAS;EAC7BU,MAAAA,UAAU,CAACd,OAAO,CAAC,UAACw/F,SAAS,EAAK;UAChC,IAAMpgG,IAAI,GAAGogG,SAA6B;EAC1C,QAAA,IAAMvxF,KAAK,GAAGmxF,iBAAiB,CAAChgG,IAAI,CAAC;EACrC,QAAA,IAAI6O,KAAK,EAAE;EACT,UAAA,IAAM8sF,EAAE,GAAG9sF,KAAK,CAACnL,MAAM;EACvB,UAAA,IAAIi4F,EAAE,EAAE;EACN;EACA,YAAA,IAAMzoC,eAAe,GAAGmH,MAAI,CAACnH,eAAe;EAC5C,YAAA,IAAMvrB,YAAY,GAAG94B,KAAK,CAAC5O,EAAuB;EAClD,YAAA,IACEizD,eAAe,CAACtpB,YAAY,CAACjC,YAAY,CAAC,IAC1CurB,eAAe,CAACrpB,QAAQ,CAAClC,YAAY,CAAC,EACtC;EACA,cAAA,IAAMi5B,kBAAkB,GAAGpqB,YAAY,CAACE,WAAW,CAACilD,EAAE,CAAC;EACvDzoC,cAAAA,eAAe,CAAC1rB,sBAAsB,CACpCxnC,IAAI,EACJ4gE,kBAAkB,EAClBj5B,YAAY,EACZ,IAAI,EACJ,IACF,CAAC;EACH,YAAA;EACA;EACA,YAAA,IAAM04D,OAAO,GAAGC,uBAAuB,CAACtgG,IAAI,CAAC;EAC7C,YAAA,IAAMugG,OAAO,GAAG,CAACvgG,IAAI,EAAE27F,EAAE,CAGxB;EACDthC,YAAAA,MAAI,CAAC+iC,aAAa,CAACiD,OAAO,CAAC,GAAGE,OAAc;EAC5C,YAAA,IAAI5E,EAAE,CAACC,QAAQ,IAAIvhC,MAAI,CAACqiC,cAAc,EAAE;EACtC;EACAriC,cAAAA,MAAI,CAACqiC,cAAc,CAACtB,cAAc,CAACp7F,IAAI,CAAC;EAC1C,YAAA;EACAq6D,YAAAA,MAAI,CAACmmC,iBAAiB,CAACxgG,IAAI,EAAE6O,KAAK,CAAC;EACrC,UAAA;EACF,QAAA;EACF,MAAA,CAAC,CAAC;EACFoxF,MAAAA,uBAAuB,EAAE;QACzB,IAAI,CAACf,aAAa,EAAE;EACtB,IAAA,CAAC,MAAM;QACL,IAAI,CAACviG,GAAG,CAAA,kDAAmD,CAAC;EAC5DsjG,MAAAA,uBAAuB,EAAE;EAC3B,IAAA;IACF,CAAC;IAAArjG,MAAA,CAwBOs4D,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EAAA,IAAA,IAAAo5D,MAAA,GAAA,IAAA;EACA,IAAA,IAAM/K,iBAAiB,GAAG,CAAC,CAACruD,IAAI,CAACsuD,aAAa;EAC9C,IAAA,IAAI,CAACgnC,YAAY,GAAG,IAAI,CAACC,SAAS,GAAGl8F,SAAS;EAC9C,IAAA,IAAQoqB,KAAK,GAA8B,IAAI,CAAvCA,KAAK;QAAEwxE,WAAW,GAAiB,IAAI,CAAhCA,WAAW;QAAEH,UAAU,GAAK,IAAI,CAAnBA,UAAU;EACtC,IAAA,IAAIG,WAAW,EAAE;QACf,IAAI,CAACjgG,GAAG,CAAA,eAAA,IACUq5D,iBAAiB,GAAG,cAAc,GAAG,WAAW,CAClE,CAAC;EACD,MAAA,IAAIA,iBAAiB,EAAE;EACrB;EACA;EACA,QAAA,IAAI,CAAConC,aAAa,CAACx8F,OAAO,CAAC,UAAA6F,IAAA,EAAY;YAAA,IAAVzG,IAAI,GAAAyG,IAAA,CAAA,CAAA,CAAA;EAC/B,UAAA,IAAIzG,IAAI,EAAE;EACR+gE,YAAAA,MAAI,CAAC89B,YAAY,CAAC7+F,IAAI,CAAC;EACzB,UAAA;EACF,QAAA,CAAC,CAAC;UACF,IAAI,CAAC8+F,UAAU,EAAE;EACnB,MAAA,CAAC,MAAM;UACL,IAAI,IAAI,CAACoB,sBAAsB,EAAE;EAC/B,UAAA,IAAMO,IAAI,GAAG7D,WAAW,CAAC5pE,UAAU,KAAK,MAAM;YAC9C,IAAI;EACF,YAAA,IAAMoqE,aAAa,GAAGR,WAAW,CAACQ,aAAa;cAC/C,KAAK,IAAIp6F,CAAC,GAAGo6F,aAAa,CAACt7F,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACxC,cAAA,IAAIy9F,IAAI,EAAE;EACRrD,gBAAAA,aAAa,CAACp6F,CAAC,CAAC,CAAC+F,KAAK,EAAE;EAC1B,cAAA;EACA6zF,cAAAA,WAAW,CAAC8D,kBAAkB,CAACtD,aAAa,CAACp6F,CAAC,CAAC,CAAC;EAClD,YAAA;EACA,YAAA,IAAIy9F,IAAI,EAAE;EACR;EACA;EACA;EACA;gBACA7D,WAAW,CAAC+D,WAAW,EAAE;EAC3B,YAAA;YACF,CAAC,CAAC,OAAOrvD,GAAG,EAAE;EACZ,YAAA,IAAI,CAAC/xC,IAAI,CAAA,oBAAA,GACc+xC,GAAG,CAAClM,OAAO,+BAClC,CAAC;EACH,UAAA;EACF,QAAA;EACA;UACA,IAAI,IAAI,CAACu5D,iBAAiB,EAAE;YAC1B,IAAI,CAAC/L,aAAa,EAAE;EACtB,QAAA;EACF,MAAA;QACAgK,WAAW,CAACzqC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAACqrC,kBAAkB,CAAC;QACtEZ,WAAW,CAACzqC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC0rC,mBAAmB,CAAC;QACxEjB,WAAW,CAACzqC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAACyrC,mBAAmB,CAAC;QACxE,IAAI,IAAI,CAACZ,YAAY,EAAE;UACrBJ,WAAW,CAACzqC,mBAAmB,CAC7B,gBAAgB,EAChB,IAAI,CAACorC,iBACP,CAAC;UACDX,WAAW,CAACzqC,mBAAmB,CAAC,cAAc,EAAE,IAAI,CAACkrC,eAAe,CAAC;EACvE,MAAA;QAEA,IAAI,CAACT,WAAW,GAAG,IAAI;QACvB,IAAI,CAACH,UAAU,GAAG,IAAI;EACxB,IAAA;;EAEA;EACA;EACA,IAAA,IAAIrxE,KAAK,EAAE;QACTA,KAAK,CAAC+mC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACsrC,eAAe,CAAC;QAC1D,IAAI,CAACznC,iBAAiB,EAAE;EACtB,QAAA,IAAIymC,UAAU,EAAE;EACdt8F,UAAAA,IAAI,CAACnG,GAAG,CAACI,eAAe,CAACqiG,UAAU,CAAC;EACtC,QAAA;;EAEA;EACA;EACA,QAAA,IAAI,IAAI,CAACqB,QAAQ,KAAKrB,UAAU,EAAE;EAChCrxE,UAAAA,KAAK,CAACo0E,eAAe,CAAC,KAAK,CAAC;YAC5B,IAAI,IAAI,CAACxC,YAAY,EAAE;cACrB2C,oBAAoB,CAACv0E,KAAK,CAAC;EAC7B,UAAA;YACAA,KAAK,CAACwmB,IAAI,EAAE;EACd,QAAA,CAAC,MAAM;EACL,UAAA,IAAI,CAACryC,IAAI,CACP,8DACF,CAAC;EACH,QAAA;EACF,MAAA;QACA,IAAI,CAAC6rB,KAAK,GAAG,IAAI;EACnB,IAAA;MAEA,IAAI,CAAC8F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACmlG,cAAc,EAAEj5F,IAAI,CAAC;IAC/C,CAAC;EAAA/K,EAAAA,MAAA,CAEOg2F,aAAa,GAArB,SAAQA,aAAaA,GAAG;EAAA,IAAA,IAAAiO,MAAA,GAAA,IAAA;EACtB,IAAA,IAAI,CAACzD,aAAa,CAACx8F,OAAO,CAAC,UAAAo3B,KAAA,EAAY;QAAA,IAAVh4B,IAAI,GAAAg4B,KAAA,CAAA,CAAA,CAAA;EAC/B,MAAA,IAAIh4B,IAAI,EAAE;EACR6gG,QAAAA,MAAI,CAACC,WAAW,CAAC9gG,IAAI,CAAC;EACxB,MAAA;EACF,IAAA,CAAC,CAAC;MACF,IAAI,CAAC2pF,UAAU,EAAE;IACnB,CAAC;EAAA/sF,EAAAA,MAAA,CAEOkkG,WAAW,GAAnB,SAAQA,WAAWA,CAAC9gG,IAAsB,EAAE;EAAA,IAAA,IAAA07F,iBAAA;EAC1C,IAAA,IAAMC,EAAE,GAAA,CAAAD,iBAAA,GAAG,IAAI,CAAC/nF,MAAM,CAAC3T,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAAjB07F,iBAAA,CAAmBh4F,MAAM;EACpC,IAAA,IAAI,CAACm7F,YAAY,CAAC7+F,IAAI,CAAC;EACvB,IAAA,IAAI27F,EAAE,EAAE;QACN,IAAI;EAAA,QAAA,IAAAoF,iBAAA;UACF,IAAA,CAAAA,iBAAA,GAAI,IAAI,CAACnE,WAAW,KAAA,IAAA,IAAhBmE,iBAAA,CAAkB3D,aAAa,CAACt7F,MAAM,EAAE;EAC1C,UAAA,IAAI,CAAC86F,WAAW,CAAC8D,kBAAkB,CAAC/E,EAAE,CAAC;EACzC,QAAA;QACF,CAAC,CAAC,OAAOrqD,GAAG,EAAE;EACZ,QAAA,IAAI,CAAC/xC,IAAI,CAAA,gBAAA,GAAkBS,IAAI,EAAIsxC,GAAG,CAAC;EACzC,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI,CAAC39B,MAAM,CAAC3T,IAAI,CAAC;IAC1B,CAAC;EAAApD,EAAAA,MAAA,CAEOiiG,YAAY,GAApB,SAAQA,YAAYA,CAAC7+F,IAAsB,EAAE;EAC3C,IAAA,IAAI,CAACghG,qBAAqB,CAAChhG,IAAI,CAAC;EAChC,IAAA,IAAI,CAACo9F,aAAa,CAACkD,uBAAuB,CAACtgG,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC;EAChE,IAAA,IAAM6O,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC3T,IAAI,CAAC;EAC/B,IAAA,IAAI6O,KAAK,EAAE;QACTA,KAAK,CAACnL,MAAM,GAAG1C,SAAS;EAC1B,IAAA;IACF,CAAC;EAAApE,EAAAA,MAAA,CAEOkiG,UAAU,GAAlB,SAAQA,UAAUA,GAAG;MACnB,IAAI,IAAI,CAACpC,cAAc,EAAE;EACvB,MAAA,IAAI,CAACA,cAAc,CAAC59F,OAAO,EAAE;EAC/B,IAAA;MACA,IAAI,CAAC49F,cAAc,GAAG,IAAIlC,oBAAoB,CAAC,IAAI,CAAC7mF,MAAM,CAAC;IAC7D,CAAC;IAAA/W,MAAA,CAEOuhG,cAAc,GAAtB,SAAQA,cAAcA,CAACpnE,KAA2B,EAAEpvB,IAAsB,EAAE;EAAA,IAAA,IAAAs5F,MAAA,GAAA,IAAA;QAAAC,WAAA;EAC1E,IAAA,IAAMvtF,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAMjS,UAAU,GAAGC,MAAM,CAAChB,IAAI,CAACgH,IAAI,CAAC;MACpC,IAAI,CAAChL,GAAG,CAAA,mBAAA,GACa+E,UAAU,6BAAuB,IAAI,CAACi9F,iBAAiB,GAAA,GAC5E,CAAC;MACD,IAAMwC,cAAc,GACjB,YAAY,IAAIx5F,IAAI,KAAKgM,MAAM,CAAC7I,KAAK,IAAI6I,MAAM,CAAC5I,KAAK,CAAC,IACtD4I,MAAM,CAAC3I,UAAU,KAAK,OAAO,IAAIrD,IAAI,IAAI,OAAO,IAAIA,IAAI,CAAE;EAC7D,IAAA,IAAMy5F,cAAc,GAClB,CAACD,cAAc,IACf,IAAI,CAACxC,iBAAiB,IACtB,IAAI,CAACvzE,KAAK,IACV1pB,UAAU,CAACM,IAAI,CAAC,UAACq/F,MAAM,EAAA;EAAA,MAAA,OAAK,CAAC1tF,MAAM,CAAC0tF,MAAM,CAAC;MAAA,CAAA,CAAC;MAC9C,IAAIF,cAAc,IAAIC,cAAc,EAAE;EACpC,MAAA,IAAI,CAAC7hG,IAAI,CAAA,mCAAA,GAC4BoC,MAAM,CAAChB,IAAI,CAACgT,MAAM,CAAC,GAAA,WAAA,GAAUjS,UAAU,GAAA,kBAC5E,CAAC;EACD;EACA;EACA;EACA,MAAA;EACF,IAAA;EACAA,IAAAA,UAAU,CAACd,OAAO,CAAC,UAACw/F,SAA2B,EAAK;QAAA,IAAAkB,mBAAA,EAAAC,WAAA;EAClD,MAAA,IAAMC,WAAW,GAAG75F,IAAI,CAACy4F,SAAS,CAAgB;EAClD,MAAA,IAAQngG,EAAE,GACRuhG,WAAW,CADLvhG,EAAE;UAAEkP,KAAK,GACfqyF,WAAW,CADDryF,KAAK;UAAEiT,UAAU,GAC3Bo/E,WAAW,CADMp/E,UAAU;UAAE2nD,SAAS,GACtCy3B,WAAW,CADkBz3B,SAAS;UAAEyb,QAAQ,GAChDgc,WAAW,CAD6Bhc,QAAQ;UAAEp2E,YAAY,GAC9DoyF,WAAW,CADuCpyF,YAAY;EAEhE,MAAA,IAAIP,KAAK,GAAG8E,MAAM,CAACysF,SAAS,CAAC;EAC7B,MAAA,IAAMqB,gBAAgB,GAAA,CAAAH,mBAAA,GAAGL,MAAI,CAAChE,YAAY,KAAA,IAAA,IAAA,CAAAqE,mBAAA,GAAjBA,mBAAA,CAAmB3tF,MAAM,qBAAzB2tF,mBAAA,CAA4BlB,SAAS,CAAC;QAC/D,IAAMsB,OAAO,GAAGD,gBAAgB,IAAA,IAAA,IAAhBA,gBAAgB,CAAE/9F,MAAM,GAAG+9F,gBAAgB,GAAG5yF,KAAK;EACnE,MAAA,IAAM8yF,OAAO,GAAG,CAAAD,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEE,YAAY,MAAIF,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEvyF,KAAK,CAAA;EACvD,MAAA,IAAM0yF,eAAe,GAAGH,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEt/E,UAAU;QAC3C,IAAI,CAACvT,KAAK,EAAE;EACVA,QAAAA,KAAK,GAAG8E,MAAM,CAACysF,SAAS,CAAC,GAAG;EAC1B18F,UAAAA,MAAM,EAAE1C,SAAS;EACjB8gG,UAAAA,SAAS,EAAE,EAAE;EACb3yF,UAAAA,KAAK,EAALA,KAAK;EACLC,UAAAA,YAAY,EAAZA,YAAY;EACZ26D,UAAAA,SAAS,EAATA,SAAS;EACT3nD,UAAAA,UAAU,EAAVA,UAAU;EACVojE,UAAAA,QAAQ,EAARA,QAAQ;EACRvlF,UAAAA,EAAE,EAAFA;WACD;EACH,MAAA;EACA;EACA,MAAA,IAAM8hG,gBAAgB,GAAG7/E,yBAAyB,CAChDy/E,OAAO,EACPE,eACF,CAAC;QACD,IAAMG,YAAY,GAAGD,gBAAgB,IAAA,IAAA,GAAA,MAAA,GAAhBA,gBAAgB,CAAErnG,OAAO,CAC5C2hG,2BAA2B,EAC3B,IACF,CAAC;EACD,MAAA,IAAI4F,UAAU,GAAG//E,yBAAyB,CAAC/S,KAAK,EAAEiT,UAAU,CAAC;EAC7D,MAAA,IAAM8/E,SAAS,GAAA,CAAAX,WAAA,GAAGU,UAAU,KAAA,IAAA,GAAA,MAAA,GAAVV,WAAA,CAAY7mG,OAAO,CAAC2hG,2BAA2B,EAAE,IAAI,CAAC;EACxE,MAAA,IAAI4F,UAAU,IAAIF,gBAAgB,IAAIC,YAAY,KAAKE,SAAS,EAAE;UAChE,IAAI9B,SAAS,CAAC/lG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;YACrC4nG,UAAU,GAAGtgF,sBAAsB,CAACsgF,UAAU,EAAEhB,MAAI,CAACjE,YAAY,CAAC;EACpE,QAAA;EACAiE,QAAAA,MAAI,CAACtkG,GAAG,CAAA,kBAAA,GAAoBglG,OAAO,GAAA,MAAA,GAAOM,UAAY,CAAC;UACvD,IAAIA,UAAU,MAAMpzF,KAAK,CAAC+yF,YAAY,IAAI/yF,KAAK,CAACM,KAAK,CAAC,EAAE;YACtDN,KAAK,CAAC+yF,YAAY,GAAGK,UAAU;EACjC,QAAA;UACApzF,KAAK,CAACk7D,SAAS,GAAGA,SAAS;UAC3Bk3B,MAAI,CAACkB,gBAAgB,CAAC/B,SAAS,EAAEr2B,SAAS,EAAEk4B,UAAU,CAAC;EACzD,MAAA;EACF,IAAA,CAAC,CAAC;EAEF,IAAA,IAAI,IAAI,CAAC9B,WAAW,IAAI,IAAI,CAACxB,iBAAiB,EAAE;EAC9Ch3F,MAAAA,IAAI,CAACgM,MAAM,GAAG,IAAI,CAACyuF,kBAAkB;EACvC,IAAA;;EAEA;MACA,IAAI,IAAI,CAACzD,iBAAiB,EAAE;EAC1B,MAAA;EACF,IAAA;EAEA,IAAA,IACE,IAAI,CAAChC,sBAAsB,GAAG,CAAC,IAC/B,CAAC,IAAI,CAAChpF,MAAM,CAAC5I,KAAK,IAClB,CAACpD,IAAI,CAACoD,KAAK,IACX,CAAA,CAAAm2F,WAAA,GAAAv5F,IAAI,CAACmD,KAAK,KAAA,IAAA,GAAA,MAAA,GAAVo2F,WAAA,CAAYjhG,EAAE,MAAK,MAAM,EACzB;EACA;QACA,IAAI,CAACtD,GAAG,CAAA,iBAAkB,CAAC;QAC3B,IAAI,CAACggG,sBAAsB,GAAG,CAAC;EACjC,IAAA;MAEA,IAAI,IAAI,CAACuD,sBAAsB,EAAE;QAC/B,IAAI,CAACvC,kBAAkB,EAAE;EAC3B,IAAA;IACF,CAAC;IAAA/gG,MAAA,CAeOulG,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBniG,IAAsB,EACtB+pE,SAAiB,EACjB56D,KAAa,EACb;EAAA,IAAA,IAAAkzF,MAAA,GAAA,IAAA;EACA,IAAA,IAAMl/E,QAAQ,GAAM4mD,SAAS,GAAA,UAAA,GAAW56D,KAAO;EAC/C,IAAA,IAAMyrF,SAA0B,GAAG;EACjCz7F,MAAAA,KAAK,mBAAiBgkB,QAAU;EAChC83E,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;EACb,QAAA,IAAMpsF,KAAK,GAAGwzF,MAAI,CAAC1uF,MAAM,CAAC3T,IAAI,CAAC;EAC/B,QAAA,IAAI6O,KAAK,EAAE;EACT,UAAA,IAAM8sF,EAAE,GAAG9sF,KAAK,CAACnL,MAAM;EACvB,UAAA,IAAIi4F,EAAE,IAAA,IAAA,IAAFA,EAAE,CAAE2G,UAAU,EAAE;EAClBD,YAAAA,MAAI,CAAC1lG,GAAG,CAAA,WAAA,GAAaqD,IAAI,GAAA,wBAAA,GAAyBmjB,QAAU,CAAC;EAC7Dw4E,YAAAA,EAAE,CAAC2G,UAAU,CAACn/E,QAAQ,CAAC;cACvBtU,KAAK,CAACM,KAAK,GAAGA,KAAK;cACnBN,KAAK,CAACk7D,SAAS,GAAGA,SAAS;EAC7B,UAAA;EACF,QAAA;EACAs4B,QAAAA,MAAI,CAAC5G,mBAAmB,CAACz7F,IAAI,CAAC;QAChC,CAAC;EACDk7F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC,CAAC;EACjBC,MAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ,CAAC,CAAC;EACpBvkE,MAAAA,OAAO,EAAE,SAATA,OAAOA,CAAG98B,KAAY,EAAK;EACzBuoG,QAAAA,MAAI,CAAC9iG,IAAI,CAAA,mBAAA,GAAqBS,IAAI,GAAA,oBAAA,EAAsBlG,KAAK,CAAC;EAChE,MAAA;OACD;EACD,IAAA,IAAI,CAAC6gG,MAAM,CAACC,SAAS,EAAE56F,IAAI,EAAE,IAAI,CAACuiG,SAAS,CAAC,IAAI,CAAC5uF,MAAM,CAAC3T,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;EAAApD,EAAAA,MAAA,CAEO4lG,UAAU,GAAlB,SAAQA,UAAUA,CAACC,UAAgC,EAAE;EAAA,IAAA,IAAAC,qBAAA;QAAAC,MAAA,GAAA,IAAA;EACnD,IAAA,IAAMC,MAAM,GAAGH,UAAU,CAACt+F,KAAK;MAC/B,IAAM0+F,KAAK,GAAGD,MAAM,GAAGH,UAAU,CAAC57F,QAAQ,GAAG,IAAI;MACjD,IAAMi8F,KAAK,GACT,CAAA,CAAAJ,qBAAA,OAAI,CAACxvC,eAAe,CAACpsB,eAAe,CAAC87D,MAAM,EAAE7mG,iBAAiB,CAACC,IAAI,CAAC,qBAApE0mG,qBAAA,CACI16F,GAAG,MAAK,IAAI;EAClB,IAAA,IAAI86F,KAAK,EAAE;EACT,MAAA;EACF,IAAA;EACA,IAAA,IAAMtH,EAAmB,GAAG;EAC1Br8F,MAAAA,KAAK,EAAE,aAAa;EACpB87F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;EAAA,QAAA,IAAA8H,qBAAA;EACb,QAAA,IAAM16B,UAAU,GAAGs6B,MAAI,CAAChvF,MAAM,CAAC5I,KAAK;UACpC,IACE43F,MAAI,CAAC5F,kBAAkB,GAAG8F,KAAK,IAC9Bx6B,UAAU,YAAVA,UAAU,CAAE3kE,MAAM,IACjB8yC,YAAY,CAACC,UAAU,CAAC4xB,UAAU,CAAC3kE,MAAM,EAAEm/F,KAAK,CAAE,IACpD,CAAA,CAAAE,qBAAA,GAAAJ,MAAI,CAACzvC,eAAe,CAACpsB,eAAe,CAAC+7D,KAAK,EAAE9mG,iBAAiB,CAACC,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAAnE+mG,qBAAA,CACI/6F,GAAG,MAAK,IAAI,EAChB;YACA26F,MAAI,CAAC7F,kBAAkB,GAAG,IAAI;EAC9B6F,UAAAA,MAAI,CAAClH,mBAAmB,CAAC,OAAO,CAAC;EACnC,QAAA;QACF,CAAC;EACDP,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ,CAAC,CAAC;EACjBC,MAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ,CAAC,CAAC;EACpBvkE,MAAAA,OAAO,EAAE,SAATA,OAAOA,CAAG98B,KAAK,EAAK;EAClB6oG,QAAAA,MAAI,CAACpjG,IAAI,CAAC,uCAAuC,EAAEzF,KAAK,CAAC;EAC3D,MAAA;OACD;MACD,IAAI,CAACgjG,kBAAkB,GAAG;EAAEtB,MAAAA,EAAE,EAAFA,EAAE;EAAEv1F,MAAAA,IAAI,EAAEw8F;OAAY;MAClD,IAAI,CAAC9H,MAAM,CAACa,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;IAChC,CAAC;EAAA5+F,EAAAA,MAAA,CAEO2+F,YAAY,GAApB,SAAQA,YAAYA,GAAG;EACrB,IAAA,IAAQuB,kBAAkB,GAAqB,IAAI,CAA3CA,kBAAkB;QAAEJ,cAAc,GAAK,IAAI,CAAvBA,cAAc;MAC1C,IAAII,kBAAkB,IAAIJ,cAAc,EAAE;QACxC,IAAI,CAACI,kBAAkB,GAAG,IAAI;EAC9BJ,MAAAA,cAAc,CAACnB,YAAY,CAACuB,kBAAkB,CAACtB,EAAE,CAAC;EACpD,IAAA;IACF,CAAC;IAAA5+F,MAAA,CAEOshG,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvBnnE,KAA8B,EAC9BisE,SAA8B,EAC9B;EAAA,IAAA,IAAAC,OAAA,GAAA,IAAA;EACA,IAAA,IAAQtvF,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,IAAA,IAAQhM,IAAI,GAAkDq7F,SAAS,CAA/Dr7F,IAAI;QAAE3H,IAAI,GAA4CgjG,SAAS,CAAzDhjG,IAAI;QAAEkiC,MAAM,GAAoC8gE,SAAS,CAAnD9gE,MAAM;QAAEj8B,IAAI,GAA8B+8F,SAAS,CAA3C/8F,IAAI;QAAE6iB,IAAI,GAAwBk6E,SAAS,CAArCl6E,IAAI;QAAEuwC,SAAS,GAAa2pC,SAAS,CAA/B3pC,SAAS;QAAEntD,MAAM,GAAK82F,SAAS,CAApB92F,MAAM;EACzD,IAAA,IAAMg3F,UAAU,GAAG7pC,SAAS,CAAC90D,SAAS,CAACvE,IAAI,CAAC;EAC5C,IAAA,IAAQkG,EAAE,GAASD,IAAI,CAAfC,EAAE;QAAEgB,EAAE,GAAKjB,IAAI,CAAXiB,EAAE;MACd,IAAMi8F,oBAAoB,GAAGhjG,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;MACnD4wE,UAAU,CAAC/+F,KAAK,GAAGg/F,oBAAoB;EACvC,IAAA,IAAMC,aAAa,GAAGn9F,IAAI,CAACkD,KAAK,CAAC5E,SAAS;MAC1C,IAAM8+F,aAAa,GAAGv6E,IAAI,GAAGA,IAAI,CAAC3f,KAAK,CAAC5E,SAAS,GAAG,IAAI;EACxD,IAAA,IAAI6+F,aAAa,CAACj/F,KAAK,KAAK,CAAC,EAAE;QAC7Bi/F,aAAa,CAACj/F,KAAK,GAAGg/F,oBAAoB;EAC5C,IAAA;EACA,IAAA,IAAIE,aAAa,IAAIA,aAAa,CAACl/F,KAAK,KAAK,CAAC,EAAE;QAC9Ck/F,aAAa,CAACl/F,KAAK,GAAGg/F,oBAAoB;EAC5C,IAAA;;EAEA;EACA;EACA;EACA;EACA;EACA,IAAA,IAAM97E,UAAU,GAAG1T,MAAM,CAAC7I,KAAK;MAC/B,IAAIw4F,oBAAoB,GAAG,KAAK;EAChC,IAAA,IAAItjG,IAAI,KAAK,OAAO,IAAI,CAAAqnB,UAAU,IAAA,IAAA,GAAA,MAAA,GAAVA,UAAU,CAAE0iD,SAAS,MAAK,YAAY,EAAE;QAC9Du5B,oBAAoB,GAClB,CAAC,IAAI,CAACzG,kBAAkB,IACxBxjC,SAAS,CAACp5D,EAAE,KAAK,CAAC,IAClB,IAAI,CAAC48F,kBAAkB,CAAC32F,EAAE,KAAKmzD,SAAS,CAACnzD,EAAE;QAC7C,IAAI,CAAC22F,kBAAkB,GAAGxjC,SAAS;EACrC,IAAA;;EAEA;EACA,IAAA,IAAMgP,UAAU,GAAG10D,MAAM,CAAC5I,KAAK;EAC/B,IAAA,IAAMw4F,OAAO,GAAGl7B,UAAU,IAAA,IAAA,GAAA,MAAA,GAAVA,UAAU,CAAE3kE,MAAM;EAClC,IAAA,IAAI6/F,OAAO,IAAIr9F,EAAE,KAAK,aAAa,EAAE;EACnC,MAAA,IAAMu8F,UAAU,GAAG35E,IAAI,IAAK7iB,IAAsB;EAClD,MAAA,IAAM62F,kBAAkB,GAAG,IAAI,CAACA,kBAAkB;QAClD,IACE98F,IAAI,KAAK,OAAO,IAChBkiC,MAAM,KAAK,MAAM,IACjB,CAAC,IAAI,CAAC46D,kBAAkB,IACxB,EAAEz0B,UAAU,CAAC8zB,MAAM,IAAI9zB,UAAU,CAACnS,KAAK,CAAC,EACxC;EACA,QAAA,IAAM0sC,MAAM,GAAGH,UAAU,CAACt+F,KAAK;UAC/B,IAAM0+F,KAAK,GAAGD,MAAM,GAAGH,UAAU,CAAC57F,QAAQ,GAAG,IAAI;EACjD,QAAA,IAAM28F,SAAS,GAAGD,OAAO,CAACl8D,QAAQ;EAClC,QAAA,IAAMo8D,UAAU,GAAG,IAAI,CAACC,SAAS,CAAC,OAAO,CAAC;EAC1C,QAAA,IAAI,CAACF,SAAS,CAAC1hG,MAAM,IAAI,CAAC2hG,UAAU,EAAE;EACpC;EACA,UAAA,IAAI,CAACjB,UAAU,CAACC,UAAU,CAAC;UAC7B,CAAC,MAAM,IACL,CAACgB,UAAU,IACX,CAACjtD,YAAY,CAACC,UAAU,CAAC8sD,OAAO,EAAEV,KAAK,CAAC,IACxC,IAAI,CAAC9F,kBAAkB,GAAG8F,KAAK,EAC/B;EACA;EACA,UAAA,IAAI,CAACL,UAAU,CAACC,UAAU,CAAC;EAC7B,QAAA;EACF,MAAA,CAAC,MAAM,IAAIziG,IAAI,KAAK,OAAO,EAAE;EAC3B,QAAA,IAAM2jG,cAAc,GAAGlB,UAAU,CAACp+F,GAAG;EACrC,QAAA,IAAIy4F,kBAAkB,EAAE;EACtB,UAAA,IAAM8G,UAAU,GAAG9G,kBAAkB,CAAC72F,IAAI,CAAC9B,KAAK;EAChD,UAAA,IACEw/F,cAAc,GAAGC,UAAU,IAC3BD,cAAc,GAAG,IAAI,CAAC5G,kBAAkB,IACxCvmD,YAAY,CAACC,UAAU,CAAC8sD,OAAO,EAAEK,UAAU,CAAC,EAC5C;cACA,IAAI,CAACrI,YAAY,EAAE;EACrB,UAAA;EACF,QAAA;UACA,IAAI,CAACwB,kBAAkB,GAAG4G,cAAc;EAC1C,MAAA;EACF,IAAA;EAEA,IAAA,IAAME,SAAS,GAAG,CAAC/6E,IAAI,IAAI7iB,IAAI,EAAE9B,KAAK;EACtC,IAAA,IAAMy2F,SAA0B,GAAG;EACjCz7F,MAAAA,KAAK,cAAYa,IAAM;EACvBi7F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;EAAA,QAAA,IAAA6I,mBAAA;UACbZ,UAAU,CAAC7sD,YAAY,GAAGl2C,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAEhD,QAAA,IAAMqpE,EAAE,GAAA,CAAAmI,mBAAA,GAAGb,OAAI,CAACtvF,MAAM,CAAC3T,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAAjB8jG,mBAAA,CAAmBpgG,MAAM;EACpC,QAAA,IAAIi4F,EAAE,EAAE;EACN,UAAA,IAAI2H,oBAAoB,EAAE;EACxBL,YAAAA,OAAI,CAACc,qBAAqB,CAACpI,EAAE,EAAEkI,SAAS,EAAE,GAAG,EAAE7jG,IAAI,EAAEkG,EAAE,EAAEgB,EAAE,CAAC;YAC9D,CAAC,MAAM,IAAIgF,MAAM,KAAKlL,SAAS,IAAIoI,cAAA,CAAgB8C,MAAM,CAAC,EAAE;EAC1D+2F,YAAAA,OAAI,CAACc,qBAAqB,CAACpI,EAAE,EAAEzvF,MAAM,EAAE,QAAQ,EAAElM,IAAI,EAAEkG,EAAE,EAAEgB,EAAE,CAAC;EAChE,UAAA;EACF,QAAA;EACA+7F,QAAAA,OAAI,CAACe,cAAc,CAACr8F,IAAI,EAAE3H,IAAI,CAAC;QACjC,CAAC;EACDk7F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;EACb;QAAA,CACD;EACDC,MAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ;EAChB;UACA,IAAM92F,GAAG,GAAGlE,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAClC4wE,QAAAA,UAAU,CAAC5sD,UAAU,GAAG4sD,UAAU,CAAC7+F,GAAG,GAAGA,GAAG;EAC5C,QAAA,IAAI++F,aAAa,CAACh/F,KAAK,KAAK,CAAC,EAAE;YAC7Bg/F,aAAa,CAACh/F,KAAK,GAAGC,GAAG;EAC3B,QAAA;EACA,QAAA,IAAIg/F,aAAa,IAAIA,aAAa,CAACj/F,KAAK,KAAK,CAAC,EAAE;YAC9Ci/F,aAAa,CAACj/F,KAAK,GAAGC,GAAG;EAC3B,QAAA;UAEA,IAAMkiC,UAAU,GAAG,EAAE;EACrB08D,QAAAA,OAAI,CAAC7F,aAAa,CAACx8F,OAAO,CAAC,UAAA8jC,KAAA,EAAgB;YAAA,IAAd1kC,IAAI,GAAA0kC,KAAA,CAAA,CAAA,CAAA;EAAEi3D,YAAAA,EAAE,GAAAj3D,KAAA,CAAA,CAAA,CAAA;EACnC,UAAA,IAAI1kC,IAAI,EAAE;cACRumC,UAAU,CAACvmC,IAAI,CAAC,GAAGw2C,YAAY,CAACE,WAAW,CAACilD,EAAE,CAAC;EACjD,UAAA;EACF,QAAA,CAAC,CAAC;EACFsH,QAAAA,OAAI,CAAC9F,YAAY,CAACn9F,IAAI,CAAC,GAAG,CAAC;EAC3B,QAAA,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,OAAO,EAAE;EACxCijG,UAAAA,OAAI,CAAC9F,YAAY,CAACnyF,UAAU,GAAG,CAAC;EAClC,QAAA,CAAC,MAAM;EACLi4F,UAAAA,OAAI,CAAC9F,YAAY,CAACryF,KAAK,GAAG,CAAC;EAC3Bm4F,UAAAA,OAAI,CAAC9F,YAAY,CAACpyF,KAAK,GAAG,CAAC;EAC7B,QAAA;UACAk4F,OAAI,CAAC/xE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACkrC,eAAe,EAAE;EACvC3mC,UAAAA,IAAI,EAAJA,IAAI;EACJiG,UAAAA,IAAI,EAAJA,IAAI;EACJ6iB,UAAAA,IAAI,EAAJA,IAAI;EACJuwC,UAAAA,SAAS,EAATA,SAAS;YACTn3B,MAAM,EAAEj8B,IAAI,CAACjG,IAAI;EACjBumC,UAAAA,UAAU,EAAVA;EACF,SAAC,CAAC;QACJ,CAAC;EACD3P,MAAAA,OAAO,EAAE,SAATA,OAAOA,CAAG98B,KAAY,EAAK;EAAA,QAAA,IAAAmqG,aAAA;EACzB;EACA,QAAA,IAAMltE,KAAgB,GAAG;YACvB/2B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;YAC5B9S,MAAM,EAAEj8B,IAAI,CAACjG,IAAI;YACjBuoB,OAAO,EAAE/sB,YAAY,CAAC47B,mBAAmB;EACzCkN,UAAAA,gBAAgB,EAAEtkC,IAAI;EACtBiG,UAAAA,IAAI,EAAJA,IAAI;EACJ6iB,UAAAA,IAAI,EAAJA,IAAI;EACJuwC,UAAAA,SAAS,EAATA,SAAS;EACTv/D,UAAAA,KAAK,EAALA,KAAK;EACLw3C,UAAAA,GAAG,EAAEx3C,KAAK;EACVo9B,UAAAA,KAAK,EAAE;WACR;UACD,IAAMgtE,UAAU,GAAA,CAAAD,aAAA,GAAGhB,OAAI,CAAC73E,KAAK,KAAA,IAAA,GAAA,MAAA,GAAV64E,aAAA,CAAYnqG,KAAK;EACpC,QAAA,IACGA,KAAK,CAAkBslC,IAAI,KAAK+kE,YAAY,CAACC,kBAAkB,IAChEtqG,KAAK,CAACmI,IAAI,IAAI,oBAAoB,IAClC,OAAA,IAAWnI,KAAK,EAChB;EACA;EACA;EACAi9B,UAAAA,KAAK,CAACxO,OAAO,GAAG/sB,YAAY,CAAC2nC,iBAAiB;EAChD,QAAA,CAAC,MAAM,IACJrpC,KAAK,CAAkBslC,IAAI,KAAK+kE,YAAY,CAACE,iBAAiB,IAC/DpB,OAAI,CAAC/C,sBAAsB,IAC3B,CAACgE,UAAU,EACX;EACA;EACAntE,UAAAA,KAAK,CAACwK,WAAW,GAAGG,0BAA0B,CAAC,IAAI,CAAC;EACtD,QAAA,CAAC,MAAM,IACL5nC,KAAK,CAACmI,IAAI,KAAKq6F,wBAAwB,IACvC2G,OAAI,CAACtE,iBAAiB,KAAK,CAAC,EAC5B;EACA;EACA5nE,UAAAA,KAAK,CAACwK,WAAW,GAAGG,0BAA0B,CAAC,IAAI,CAAC;EACtD,QAAA,CAAC,MAAM;YACL,IAAM4iE,gBAAgB,GAAG,EAAErB,OAAI,CAAC9F,YAAY,CAACn9F,IAAI,CAAC;EAClD;EACV;EACA;YACUijG,OAAI,CAAC1jG,IAAI,CAAA,SAAA,GACG+kG,gBAAgB,SAAIrB,OAAI,CAAC/xE,GAAG,CAACrJ,MAAM,CAAC08E,mBAAmB,GAAA,gCAAA,GAAgCvkG,IAAI,GAAA,mBAAA,IAAmBkkG,UAAU,GAAGA,UAAU,GAAG,gBAAgB,CAAA,GAAA,GACpK,CAAC;EACD,UAAA,IACEI,gBAAgB,IAAIrB,OAAI,CAAC/xE,GAAG,CAACrJ,MAAM,CAAC08E,mBAAmB,IACvD,CAAC,CAACL,UAAU,EACZ;cACAntE,KAAK,CAACG,KAAK,GAAG,IAAI;EACpB,UAAA;EACF,QAAA;UACA+rE,OAAI,CAAC/xE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEI,KAAK,CAAC;EACvC,MAAA;OACD;EACD,IAAA,IAAI,CAACp6B,GAAG,CAAA,YAAA,GACMqD,IAAI,sBAAgBkG,EAAE,IAAG4iB,IAAI,GAAG,MAAM,GAAGA,IAAI,CAACxe,KAAK,GAAG,EAAE,CAAA,GAAA,MAAA,IAAOrE,IAAI,CAACjG,IAAI,KAAKjE,iBAAiB,CAACC,IAAI,GAAG,OAAO,GAAG,OAAO,UAAIiK,IAAI,CAACgB,KAAK,GAAA,OAAA,GAAQC,EAC3J,CAAC;EACD,IAAA,IAAI,CAACyzF,MAAM,CAACC,SAAS,EAAE56F,IAAI,EAAE,IAAI,CAACuiG,SAAS,CAAC,IAAI,CAAC5uF,MAAM,CAAC3T,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;IAAApD,MAAA,CAEO4nG,UAAU,GAAlB,SAAQA,UAAUA,CAChBxkG,IAAsB,EACtBmE,KAAa,EACbE,GAAW,EACM;EAAA,IAAA,IAAAogG,OAAA,GAAA,IAAA;MACjB,IAAI,CAAC9nG,GAAG,CAAA,YAAA,GAAaqD,IAAI,kBAAYmE,KAAK,GAAA,GAAA,GAAIE,GAAK,CAAC;MACpD,OAAO;EACLlF,MAAAA,KAAK,EAAE,QAAQ;EACf87F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;UACbwJ,OAAI,CAACC,cAAc,CAAC1kG,IAAI,EAAEmE,KAAK,EAAEE,GAAG,CAAC;QACvC,CAAC;EACD62F,MAAAA,OAAO,EAAE,SAATA,OAAOA,GAAQ;EACb;QAAA,CACD;EACDC,MAAAA,UAAU,EAAE,SAAZA,UAAUA,GAAQ;EAChB;UACAsJ,OAAI,CAACvzE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACu3F,cAAc,EAAE;EAAEhzF,UAAAA,IAAI,EAAJA;EAAK,SAAC,CAAC;QACnD,CAAC;EACD42B,MAAAA,OAAO,EAAE,SAATA,OAAOA,CAAG98B,KAAY,EAAK;UACzB2qG,OAAI,CAACllG,IAAI,CAAA,mBAAA,GACa4E,KAAK,GAAA,GAAA,GAAIE,GAAG,GAAA,UAAA,GAAUrE,IAAI,GAAA,iBAAA,EAC9ClG,KACF,CAAC;EACH,MAAA;OACD;IACH,CAAC;IAAA8C,MAAA,CAEOm2F,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBh8D,KAA6B,EAC7BpvB,IAAwB,EACxB;EAAA,IAAA,IAAAg9F,OAAA,GAAA,IAAA;EACA,IAAA,IAAQ3kG,IAAI,GAA6B2H,IAAI,CAArC3H,IAAI;QAAE43D,WAAW,GAAgBjwD,IAAI,CAA/BiwD,WAAW;QAAEC,SAAS,GAAKlwD,IAAI,CAAlBkwD,SAAS;EACpC,IAAA,IAAI73D,IAAI,EAAE;EACR,MAAA,IAAI,CAAC26F,MAAM,CAAC,IAAI,CAAC6J,UAAU,CAACxkG,IAAI,EAAE43D,WAAW,EAAEC,SAAS,CAAC,EAAE73D,IAAI,CAAC;EAClE,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACo9F,aAAa,CAACx8F,OAAO,CAAC,UAAAo0F,KAAA,EAAY;UAAA,IAAVh1F,IAAI,GAAAg1F,KAAA,CAAA,CAAA,CAAA;EAC/B,QAAA,IAAIh1F,IAAI,EAAE;EACR2kG,UAAAA,OAAI,CAAChK,MAAM,CAACgK,OAAI,CAACH,UAAU,CAACxkG,IAAI,EAAE43D,WAAW,EAAEC,SAAS,CAAC,EAAE73D,IAAI,CAAC;EAClE,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA;IACF,CAAC;IAAApD,MAAA,CAEOyhG,YAAY,GAApB,SAAQA,YAAYA,CAACtnE,KAAyB,EAAEpvB,IAAoB,EAAE;EAAA,IAAA,IAAAi9F,OAAA,GAAA,IAAA;EACpE,IAAA,IAAQ3+F,IAAI,GAAW0B,IAAI,CAAnB1B,IAAI;QAAE6iB,IAAI,GAAKnhB,IAAI,CAAbmhB,IAAI;MAClB,IAAM+7E,iBAAqC,GAAG,EAAE;MAChD,IAAMp/F,iBAAiB,GAAGqjB,IAAI,GAC1BA,IAAI,CAACrjB,iBAAiB,GACtBQ,IAAI,CAACR,iBAAiB;EAC1B,IAAA,IAAIA,iBAAiB,CAACjB,qBAAqB,CAACE,UAAU,CAAC,EAAE;EACvDmgG,MAAAA,iBAAiB,CAACl5F,IAAI,CAAC,YAAY,CAAC;EACtC,IAAA,CAAC,MAAM;EACL,MAAA,IAAIlG,iBAAiB,CAACjB,qBAAqB,CAACvI,KAAK,CAAC,EAAE;EAClD4oG,QAAAA,iBAAiB,CAACl5F,IAAI,CAAC,OAAO,CAAC;EACjC,MAAA;EACA,MAAA,IAAIlG,iBAAiB,CAACjB,qBAAqB,CAACC,KAAK,CAAC,EAAE;EAClDogG,QAAAA,iBAAiB,CAACl5F,IAAI,CAAC,OAAO,CAAC;EACjC,MAAA;EACF,IAAA;EAEA,IAAA,IAAMm5F,WAAW,GAAG,SAAdA,WAAWA,GAAS;QACxB,IAAMxyE,GAAG,GAAGnyB,IAAI,CAACoyB,WAAW,CAACD,GAAG,EAAE;EAClCrsB,MAAAA,IAAI,CAACkD,KAAK,CAAC5E,SAAS,CAACF,GAAG,GAAGiuB,GAAG;EAC9B,MAAA,IAAIxJ,IAAI,EAAE;EACRA,QAAAA,IAAI,CAAC3f,KAAK,CAAC5E,SAAS,CAACF,GAAG,GAAGiuB,GAAG;EAChC,MAAA;QACA,IAAMnpB,KAAK,GAAG2f,IAAI,GAAGA,IAAI,CAAC3f,KAAK,GAAGlD,IAAI,CAACkD,KAAK;QAC5Cy7F,OAAI,CAAC1zE,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACw6B,aAAa,EAAE;EACrChwB,QAAAA,IAAI,EAAJA,IAAI;EACJ6iB,QAAAA,IAAI,EAAJA,IAAI;EACJ3f,QAAAA,KAAK,EAALA,KAAK;UACLlJ,EAAE,EAAEgG,IAAI,CAACjG;EACX,OAAC,CAAC;MACJ,CAAC;EAED,IAAA,IAAI6kG,iBAAiB,CAAC/iG,MAAM,KAAK,CAAC,EAAE;EAClC,MAAA,IAAI,CAACvC,IAAI,CAAA,mEAAA,GAC6D0G,IAAI,CAACjG,IAAI,GAAA,UAAA,GAAWiG,IAAI,CAACgB,KAAK,GAAA,OAAA,GAAQhB,IAAI,CAACC,EACjH,CAAC;EACH,IAAA;EAEA,IAAA,IAAI,CAAC6+F,YAAY,CAACD,WAAW,EAAED,iBAAiB,CAAC,CAACt+E,KAAK,CAAC,UAACzsB,KAAK,EAAK;EACjE8qG,MAAAA,OAAI,CAACrlG,IAAI,CAAA,6BAAA,GAA+BzF,KAAO,CAAC;EAChD8qG,MAAAA,OAAI,CAACI,kBAAkB,CAACJ,OAAI,CAACK,iBAAiB,CAAC;EACjD,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAroG,MAAA,CAEO2hG,aAAa,GAArB,SAAQA,aAAaA,CAACxnE,KAA0B,EAAEpvB,IAAqB,EAAE;MACvE,IAAI,CAACu9F,WAAW,EAAE;IACpB,CAAC;EAiBD;EACA;IAAAtoG,MAAA,CACQwhG,WAAW,GAAnB,SAAQA,WAAWA,CAACrnE,KAAwB,EAAEpvB,IAAmB,EAAE;EAAA,IAAA,IAAAw9F,OAAA,GAAA,IAAA;QAAAC,eAAA;EACjE,IAAA,IAAI,CAAChI,aAAa,CAACx8F,OAAO,CAAC,UAAAykG,KAAA,EAAY;QAAA,IAAVrlG,IAAI,GAAAqlG,KAAA,CAAA,CAAA,CAAA;EAC/B,MAAA,IAAIrlG,IAAI,EAAE;EACR,QAAA,IAAM6O,KAAK,GAAGs2F,OAAI,CAACxxF,MAAM,CAAC3T,IAAI,CAAsB;UACpD,IAAI,CAAC2H,IAAI,CAAC3H,IAAI,IAAI2H,IAAI,CAAC3H,IAAI,KAAKA,IAAI,EAAE;YACpC6O,KAAK,CAACstF,MAAM,GAAG,IAAI;EACnB,UAAA,IAAI,CAACttF,KAAK,CAACqnD,KAAK,EAAE;cAChBrnD,KAAK,CAACqnD,KAAK,GAAG,IAAI;EAClBivC,YAAAA,OAAI,CAACxoG,GAAG,CAAIqD,IAAI,wBAAqB,CAAC;EACxC,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;EAEF,IAAA,IAAMslG,gBAAgB,GAAG,CAAA,CAAAF,eAAA,GAAA,IAAI,CAAClI,SAAS,KAAA,IAAA,GAAA,MAAA,GAAdkI,eAAA,CAAgBzE,WAAW,MAAK,KAAK;EAC9D,IAAA,IAAM4E,eAAe,GACnB,IAAI,CAAC5G,iBAAiB,GAAG,CAAC,IAC1B,CAAC,IAAI,CAACvB,aAAa,CAACp7F,IAAI,CAAC,UAAAwjG,KAAA,EAAA;EAAA,MAAA,IAAAC,mBAAA;QAAA,IAAEzlG,IAAI,GAAAwlG,KAAA,CAAA,CAAA,CAAA;EAAA,MAAA,OAAMxlG,IAAI,IAAI,EAAA,CAAAylG,mBAAA,GAACN,OAAI,CAACxxF,MAAM,CAAC3T,IAAI,CAAC,KAAA,IAAA,IAAjBylG,mBAAA,CAAmBvvC,KAAK,CAAA;MAAA,CAAA,CAAC;EAEzE,IAAA,IAAIqvC,eAAe,EAAE;EACnB,MAAA,IAAID,gBAAgB,EAAE;UACpB,IAAI,CAAC3oG,GAAG,CAAA,cAAe,CAAC;UACxB,IAAI,CAAC+oG,cAAc,CAAC,YAAM;YACxBP,OAAI,CAACQ,WAAW,EAAE;EAClB,UAAA,IAAQ/I,WAAW,GAAKuI,OAAI,CAApBvI,WAAW;YACnB,IAAI,CAACA,WAAW,IAAIA,WAAW,CAAC5pE,UAAU,KAAK,MAAM,EAAE;EACrD,YAAA,IAAI4pE,WAAW,EAAE;EACfuI,cAAAA,OAAI,CAACxoG,GAAG,CAAA,oEAAA,GAC+DigG,WAAW,CAAC5pE,UACnF,CAAC;EACH,YAAA;EACA,YAAA;EACF,UAAA;YACAmyE,OAAI,CAACxoG,GAAG,CAAA,mCAAoC,CAAC;EAC7C;YACAigG,WAAW,CAAC+D,WAAW,EAAE;YAEzBwE,OAAI,CAACj0E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACmqG,eAAe,EAAE5kG,SAAS,CAAC;EACrD,QAAA,CAAC,CAAC;EACJ,MAAA,CAAC,MAAM;UACL,IAAI,CAAC2kG,WAAW,EAAE;UAClB,IAAI,CAACz0E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACmqG,eAAe,EAAE5kG,SAAS,CAAC;EACrD,MAAA;EACF,IAAA,CAAC,MAAM,IAAI2G,IAAI,CAAC3H,IAAI,KAAK,OAAO,EAAE;EAChC;QACA,IAAI,CAACu7F,YAAY,EAAE;EACrB,IAAA;IACF,CAAC;EAAA3+F,EAAAA,MAAA,CAEO+oG,WAAW,GAAnB,SAAQA,WAAWA,GAAG;EAAA,IAAA,IAAAE,OAAA,GAAA,IAAA;EACpB,IAAA,IAAI,CAACzI,aAAa,CAACx8F,OAAO,CAAC,UAAAklG,KAAA,EAAY;QAAA,IAAV9lG,IAAI,GAAA8lG,KAAA,CAAA,CAAA,CAAA;QAC/B,IAAI9lG,IAAI,KAAK,IAAI,EAAE;EACjB,QAAA,IAAM6O,KAAK,GAAGg3F,OAAI,CAAClyF,MAAM,CAAC3T,IAAI,CAAC;EAC/B,QAAA,IAAI6O,KAAK,EAAE;YACTA,KAAK,CAACstF,MAAM,GAAG,KAAK;EACtB,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAv/F,MAAA,CAEO0jC,cAAc,GAAtB,SAAQA,cAAcA,CACpBvJ,KAA2B,EAAAgvE,KAAA,EAE3B;EAAA,IAAA,IADEx9E,OAAO,GAAAw9E,KAAA,CAAPx9E,OAAO;EAET,IAAA,IAAI,CAACA,OAAO,CAACyT,SAAS,CAACl6B,MAAM,EAAE;EAC7B,MAAA;EACF,IAAA;MACA,IAAI,CAACymB,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACm1E,cAAc,EAAE;IACvB,CAAC;EAAA9gG,EAAAA,MAAA,CAEO8gG,cAAc,GAAtB,SAAQA,cAAcA,GAAG;EAAA,IAAA,IAAAsI,OAAA,GAAA,IAAA;MACvB,IAAI,CAACN,cAAc,CAAC,YAAM;EACxB,MAAA,IAAMO,gBAAgB,GAAGD,OAAI,CAACE,mBAAmB,EAAE;QACnD,IAAI,CAACD,gBAAgB,EAAE;EACrB,QAAA;EACF,MAAA;EACAD,MAAAA,OAAI,CAACG,iBAAiB,CAACF,gBAAgB,CAAC;EAC1C,IAAA,CAAC,CAAC;IACJ,CAAC;IAAArpG,MAAA,CAEOg6B,OAAO,GAAf,SAAQA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;MACpD,IAAIA,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC47B,mBAAmB,IAAIzvB,IAAI,CAAC1B,IAAI,EAAE;EAAA,MAAA,IAAAg/B,iBAAA;QAClE,IAAMpQ,aAAa,GAAA,CAAAoQ,iBAAA,GAAGt9B,IAAI,CAAC45B,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB0D,iBAAA,CAAkBpQ,aAAa;EACrD,MAAA,IAAIxrB,cAAA,CAAgBwrB,aAAa,CAAC,IAAIA,aAAa,KAAKltB,IAAI,CAAC1B,IAAI,CAACgB,KAAK,EAAE;UACvE,IAAI,CAAC83F,iBAAiB,EAAE;EAC1B,MAAA;EACF,IAAA;IACF,CAAC;EAAAniG,EAAAA,MAAA,CAEOmiG,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAAC5B,YAAY,GAAG;EAClBryF,MAAAA,KAAK,EAAE,CAAC;EACRC,MAAAA,KAAK,EAAE,CAAC;EACRC,MAAAA,UAAU,EAAE;OACb;IACH,CAAC;EAAApO,EAAAA,MAAA,CAEOsoG,WAAW,GAAnB,SAAQA,WAAWA,GAAG;EACpB,IAAA,IAAQh0E,GAAG,GAAqB,IAAI,CAA5BA,GAAG;QAAE3I,OAAO,GAAY,IAAI,CAAvBA,OAAO;QAAE6C,KAAK,GAAK,IAAI,CAAdA,KAAK;EAC3B,IAAA,IAAI,CAACA,KAAK,IAAI7C,OAAO,KAAK,IAAI,EAAE;EAC9B,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,CAAC,IAAI,CAACo2E,iBAAiB,EAAE;EAC3B,MAAA;EACF,IAAA;EAEA,IAAA,IAAM92E,MAA2B,GAAGqJ,GAAG,CAACrJ,MAAM;EAC9C,IAAA,IAAMssC,WAAW,GAAG/oC,KAAK,CAAC+oC,WAAW;EACrC,IAAA,IAAMiyC,cAAc,GAAG79E,OAAO,CAAC02B,mBAAmB;;EAElD;EACA,IAAA,IAAMonD,gBAAgB,GACpB99E,OAAO,CAACuL,IAAI,IAAIjM,MAAM,CAACy+E,oBAAoB,KAAK,IAAI,GAChDz+E,MAAM,CAACy+E,oBAAoB,GAC3Bz+E,MAAM,CAACw+E,gBAAgB;MAE7B,IAAIx8F,cAAA,CAAgBw8F,gBAAgB,CAAC,IAAIA,gBAAgB,IAAI,CAAC,EAAE;QAC9D,IAAME,mBAAmB,GAAG1rG,IAAI,CAACsD,GAAG,CAACkoG,gBAAgB,EAAED,cAAc,CAAC;EACtE,MAAA,IAAMI,wBAAwB,GAC5B3rG,IAAI,CAACE,KAAK,CAACo5D,WAAW,GAAGiyC,cAAc,CAAC,GAAGA,cAAc,GACzDG,mBAAmB;QAErB,IAAI,CAACE,eAAe,CAClBtyC,WAAW,EACXiyC,cAAc,EACdI,wBACF,CAAC;EACH,IAAA;EAEA,IAAA,IAAME,yBAAyB,GAAG7+E,MAAM,CAAC6+E,yBAAyB;MAClE,IACEx8F,cAAA,CAAgBw8F,yBAAyB,CAAC,IAC1CA,yBAAyB,GAAG,CAAC,EAC7B;QACA,IAAMC,iBAAiB,GAAG9rG,IAAI,CAACsD,GAAG,CAChC0pB,MAAM,CAACuvC,eAAe,EACtBsvC,yBACF,CAAC;QAED,IAAME,oBAAoB,GAAG/rG,IAAI,CAACsD,GAAG,CAACwoG,iBAAiB,EAAEP,cAAc,CAAC;EACxE,MAAA,IAAMS,yBAAyB,GAC7BhsG,IAAI,CAACE,KAAK,CAACo5D,WAAW,GAAGiyC,cAAc,CAAC,GAAGA,cAAc,GACzDQ,oBAAoB;QAEtB,IAAI,CAACE,gBAAgB,CACnB3yC,WAAW,EACXiyC,cAAc,EACdS,yBACF,CAAC;EACH,IAAA;IACF,CAAC;IAAAjqG,MAAA,CAEO6pG,eAAe,GAAvB,SAAQA,eAAeA,CACrBtyC,WAAmB,EACnBiyC,cAAsB,EACtBI,wBAAgC,EAChC;EAAA,IAAA,IAAAO,OAAA,GAAA,IAAA;EACA,IAAA,IAAI,CAAC3J,aAAa,CAACx8F,OAAO,CAAC,UAAAomG,KAAA,EAAgB;QAAA,IAAdhnG,IAAI,GAAAgnG,KAAA,CAAA,CAAA,CAAA;EAAErL,QAAAA,EAAE,GAAAqL,KAAA,CAAA,CAAA,CAAA;EACnC,MAAA,IAAIrL,EAAE,EAAE;EACN,QAAA,IAAMt0D,QAAQ,GAAGmP,YAAY,CAACE,WAAW,CAACilD,EAAE,CAAC;EAC7C;EACA,QAAA,IACEt0D,QAAQ,CAACvlC,MAAM,GAAG,CAAC,IACnB0kG,wBAAwB,GAAGn/D,QAAQ,CAACljC,KAAK,CAAC,CAAC,CAAC,EAC5C;EAAA,UAAA,IAAA8iG,eAAA;YACAF,OAAI,CAAC71E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACyrG,mBAAmB,EAAE;EAC3CvqE,YAAAA,SAAS,EAAE6pE;EACb,WAAC,CAAC;;EAEF;EACA,UAAA,IAAM33F,KAAK,GAAGk4F,OAAI,CAACpzF,MAAM,CAAC3T,IAAI,CAAC;YAC/B,IAAA,CAAAinG,eAAA,GAAIF,OAAI,CAACx+E,OAAO,KAAA,IAAA,IAAZ0+E,eAAA,CAAcnzE,IAAI,EAAE;cACtBizE,OAAI,CAAC71E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC0rG,wBAAwB,EAAE;EAChDxqE,cAAAA,SAAS,EAAE6pE;EACb,aAAC,CAAC;EACJ,UAAA,CAAC,MAAM,IAAI33F,KAAK,YAALA,KAAK,CAAEqnD,KAAK,EAAE;EACvB6wC,YAAAA,OAAI,CAACpqG,GAAG,CAAA,eAAA,GACUqD,IAAI,sDACtB,CAAC;EACD,YAAA;EACF,UAAA;YAEA+mG,OAAI,CAAC71E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs8D,eAAe,EAAE;EACvCH,YAAAA,WAAW,EAAE,CAAC;EACdC,YAAAA,SAAS,EAAE2uC,wBAAwB;EACnCxmG,YAAAA,IAAI,EAAJA;EACF,WAAC,CAAC;EACJ,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;IACJ,CAAC;IAAApD,MAAA,CAEOkqG,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtB3yC,WAAmB,EACnBiyC,cAAsB,EACtBS,yBAAiC,EACjC;EAAA,IAAA,IAAAO,OAAA,GAAA,IAAA;EACA,IAAA,IAAI,CAAChK,aAAa,CAACx8F,OAAO,CAAC,UAAAymG,KAAA,EAAgB;QAAA,IAAdrnG,IAAI,GAAAqnG,KAAA,CAAA,CAAA,CAAA;EAAE1L,QAAAA,EAAE,GAAA0L,KAAA,CAAA,CAAA,CAAA;EACnC,MAAA,IAAI1L,EAAE,EAAE;EACN,QAAA,IAAMt0D,QAAQ,GAAGmP,YAAY,CAACE,WAAW,CAACilD,EAAE,CAAC;EAC7C,QAAA,IAAM2L,iBAAiB,GAAGjgE,QAAQ,CAACvlC,MAAM;EACzC;UACA,IAAIwlG,iBAAiB,GAAG,CAAC,EAAE;EACzB,UAAA;EACF,QAAA;UACA,IAAM/vD,WAAW,GAAGlQ,QAAQ,CAACljC,KAAK,CAACmjG,iBAAiB,GAAG,CAAC,CAAC;UACzD,IAAM3qE,SAAS,GAAG0K,QAAQ,CAAChjC,GAAG,CAACijG,iBAAiB,GAAG,CAAC,CAAC;EACrD;UACA,IACET,yBAAyB,GAAGtvD,WAAW,IACtC4c,WAAW,IAAI5c,WAAW,IAAI4c,WAAW,IAAIx3B,SAAU,EACxD;EACA,UAAA;EACF,QAAA;UAEAyqE,OAAI,CAACl2E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs8D,eAAe,EAAE;EACvCH,UAAAA,WAAW,EAAErgB,WAAW;EACxBsgB,UAAAA,SAAS,EAAEpiD,QAAQ;EACnBzV,UAAAA,IAAI,EAAJA;EACF,SAAC,CAAC;EACJ,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA;;EAEA;EACF;EACA;EACA;EACA;EAJEpD,EAAAA,MAAA,CAKQspG,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAIlB;EAAA,IAAA,IAAAqB,gBAAA;EACP,IAAA,IAAQh/E,OAAO,GAAkB,IAAI,CAA7BA,OAAO;QAAEq0E,WAAW,GAAK,IAAI,CAApBA,WAAW;EAC5B,IAAA,IAAI,CAACr0E,OAAO,IAAI,CAAC,IAAI,CAAC6C,KAAK,IAAI,CAAAwxE,WAAW,oBAAXA,WAAW,CAAE5pE,UAAU,MAAK,MAAM,EAAE;EACjE,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAM23B,WAAW,GAAGpiC,OAAO,CAAC6mC,IAAI;MAChC,IAAI7mC,OAAO,CAACuL,IAAI,IAAI,IAAI,CAAC5C,GAAG,CAACrJ,MAAM,CAAC2/E,oBAAoB,EAAE;EACxD,MAAA,IAAM5kG,GAAG,GAAG2lB,OAAO,CAACyT,SAAS,CAACl6B,MAAM;EACpC,MAAA,IAAIc,GAAG,IAAI,CAAC,CAAEg6F,WAAW,CAAS6K,oBAAoB,EAAE;UACtD,IAAMtjG,KAAK,GAAGtJ,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEoqB,OAAO,CAACy2B,aAAa,CAAC;UAChD,IAAM36C,GAAG,GAAGxJ,IAAI,CAACsD,GAAG,CAACgG,KAAK,EAAEwmD,WAAW,CAAC;UAExC,OAAO;EAAE9jD,UAAAA,QAAQ,EAAE4O,QAAQ;EAAEtR,UAAAA,KAAK,EAALA,KAAK;EAAEE,UAAAA,GAAG,EAAHA;WAAK;EAC3C,MAAA;QACA,OAAO;EAAEwC,QAAAA,QAAQ,EAAE4O;SAAU;EAC/B,IAAA;MACA,IAAMiyF,gBAAgB,GAAA,CAAAH,gBAAA,GAAG,IAAI,CAACrK,SAAS,KAAA,IAAA,GAAA,MAAA,GAAdqK,gBAAA,CAAgB1gG,QAAQ;EACjD,IAAA,IAAI6gG,gBAAgB,EAAE;EACpB,MAAA,IAAI,CAACl5C,cAAA,CAAgBk5C,gBAAgB,CAAC,EAAE;EACtC,QAAA,OAAO,IAAI;EACb,MAAA;QACA,OAAO;EAAE7gG,QAAAA,QAAQ,EAAE6gG;SAAkB;EACvC,IAAA;EACA,IAAA,IAAMC,aAAa,GAAG,IAAI,CAACv8E,KAAK,CAACvkB,QAAQ;EACzC,IAAA,IAAM+gG,UAAU,GAAGC,cAAA,CAAgBjL,WAAW,CAAC/1F,QAAQ,CAAC,GACpD+1F,WAAW,CAAC/1F,QAAQ,GACpB,CAAC;EACL,IAAA,IACG8jD,WAAW,GAAGi9C,UAAU,IAAIj9C,WAAW,GAAGg9C,aAAa,IACxD,CAACG,cAAA,CAAgBH,aAAa,CAAC,EAC/B;QACA,OAAO;EAAE9gG,QAAAA,QAAQ,EAAE8jD;SAAa;EAClC,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAA/tD,EAAAA,MAAA,CAEOupG,iBAAiB,GAAzB,SAAQA,iBAAiBA,CAAA4B,KAAA,EAQtB;EAAA,IAAA,IAPDlhG,QAAQ,GAAAkhG,KAAA,CAARlhG,QAAQ;QACR1C,KAAK,GAAA4jG,KAAA,CAAL5jG,KAAK;QACLE,GAAG,GAAA0jG,KAAA,CAAH1jG,GAAG;EAMH,IAAA,IAAMu4F,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAI,CAAC,IAAI,CAACxxE,KAAK,IAAI,CAACwxE,WAAW,IAAIA,WAAW,CAAC5pE,UAAU,KAAK,MAAM,EAAE;EACpE,MAAA;EACF,IAAA;EACA,IAAA,IAAI4pE,WAAW,CAAC/1F,QAAQ,KAAKA,QAAQ,EAAE;EACrC,MAAA,IAAImhG,cAAA,CAAgBnhG,QAAQ,CAAC,EAAE;UAC7B,IAAI,CAAClK,GAAG,CAAA,mCAAA,GAAqCkK,QAAQ,CAAC+tB,OAAO,CAAC,CAAC,CAAG,CAAC;EACrE,MAAA;QACAgoE,WAAW,CAAC/1F,QAAQ,GAAGA,QAAQ;EACjC,IAAA;EACA,IAAA,IAAI1C,KAAK,KAAKnD,SAAS,IAAIqD,GAAG,KAAKrD,SAAS,EAAE;QAC5C,IAAI,CAACrE,GAAG,CAAA,iCAAA,GAC4BigG,WAAW,CAAC/1F,QAAQ,GAAA,8BAAA,GAA+B1C,KAAK,GAAA,GAAA,GAAIE,GAAG,GAAA,GACnG,CAAC;EACDu4F,MAAAA,WAAW,CAAC6K,oBAAoB,CAACtjG,KAAK,EAAEE,GAAG,CAAC;EAC9C,IAAA;IACF,CAAC;EAAAzH,EAAAA,MAAA,CAWO+gG,kBAAkB,GAA1B,SAAQA,kBAAkBA,GAAG;EAC3B,IAAA,IAAQhB,sBAAsB,GAAgC,IAAI,CAA1DA,sBAAsB;QAAEsL,iBAAiB,GAAa,IAAI,CAAlCA,iBAAiB;QAAEt0F,MAAM,GAAK,IAAI,CAAfA,MAAM;MACzD,IAAI,CAAChX,GAAG,CAAA,+BAAA,GAC0BsrG,iBAAiB,GAAA,0BAAA,GAA2BtL,sBAAsB,GAAA,IAAA,GAAKzwE,SAAS,CAACvY,MAAM,CACzH,CAAC;EACD;EACA;EACA;EACA;MACA,IAAI,IAAI,CAACwsF,WAAW,EAAE;EAAA,MAAA,IAAA+H,mBAAA;QACpB,IAAMlI,iBAAiB,GAAA,CAAAkI,mBAAA,GAAG,IAAI,CAACjL,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjBiL,mBAAA,CAAmBv0F,MAAM;QACnD,IAAIqsF,iBAAiB,IAAIr+F,MAAM,CAAChB,IAAI,CAACq/F,iBAAiB,CAAC,CAACl+F,MAAM,EAAE;UAC9D,IAAI,CAACw9F,iBAAiB,EAAE;EAC1B,MAAA,CAAC,MAAM;EACL;UACA,IAAI,CAAC6I,mBAAmB,EAAE;EAC5B,MAAA;EACF,IAAA;IACF,CAAC;EAAAvrG,EAAAA,MAAA,CAEOsiG,aAAa,GAArB,SAAQA,aAAaA,GAAG;EAAA,IAAA,IAAAkJ,OAAA,GAAA,IAAA;MACtB,IAAI,IAAI,CAACzJ,iBAAiB,EAAE;QAC1B,IAAMhrF,MAA6B,GAAG,EAAE;EACxC,MAAA,IAAI,CAACypF,aAAa,CAACx8F,OAAO,CAAC,UAAAynG,MAAA,EAAoB;UAAA,IAAlBroG,IAAI,GAAAqoG,MAAA,CAAA,CAAA,CAAA;EAAE3kG,UAAAA,MAAM,GAAA2kG,MAAA,CAAA,CAAA,CAAA;EACvC,QAAA,IAAIroG,IAAI,EAAE;EACR,UAAA,IAAM6O,KAAK,GAAGu5F,OAAI,CAACz0F,MAAM,CAAC3T,IAAI,CAAsB;YACpD2T,MAAM,CAAC3T,IAAI,CAAC,GAAG;EACb0D,YAAAA,MAAM,EAANA,MAAM;cACNqmE,SAAS,EAAEl7D,KAAK,CAACk7D,SAAS;cAC1B56D,KAAK,EAAEN,KAAK,CAACM,KAAK;cAClBC,YAAY,EAAEP,KAAK,CAACO,YAAY;cAChCgT,UAAU,EAAEvT,KAAK,CAACuT,UAAU;cAC5BniB,EAAE,EAAE4O,KAAK,CAAC5O,EAAE;cACZulF,QAAQ,EAAE32E,KAAK,CAAC22E;aACjB;EACH,QAAA;EACF,MAAA,CAAC,CAAC;QACF,IAAI,CAACt0D,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACo3F,cAAc,EAAE;EACtCl/E,QAAAA,MAAM,EAANA;EACF,OAAC,CAAC;EACF,MAAA,IAAI,CAAChX,GAAG,CAAA,wCAAA,GAA0C,IAAI,CAAC+/F,cAAgB,CAAC;EACxE,MAAA,IAAI,CAACU,aAAa,CAACx8F,OAAO,CAAC,UAAA0nG,MAAA,EAAY;UAAA,IAAVtoG,IAAI,GAAAsoG,MAAA,CAAA,CAAA,CAAA;EAC/BF,QAAAA,OAAI,CAACrN,WAAW,CAAC/6F,IAAI,CAAC;EACxB,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,MAAM;EACL,MAAA,IAAMlG,KAAK,GAAG,IAAIgrB,KAAK,CACrB,mDACF,CAAC;QACD,IAAI,CAACoM,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;UAC5BzsB,OAAO,EAAE/sB,YAAY,CAAC+sG,gCAAgC;EACtDrxE,QAAAA,KAAK,EAAE,IAAI;EACXp9B,QAAAA,KAAK,EAALA,KAAK;UACLk0B,MAAM,EAAEl0B,KAAK,CAACsrC;EAChB,OAAC,CAAC;EACJ,IAAA;IACF,CAAC;EAAAxoC,EAAAA,MAAA,CAEOurG,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAQx0F,MAAM,GAAiC,IAAI,CAA3CA,MAAM;QAAEypF,aAAa,GAAkB,IAAI,CAAnCA,aAAa;QAAER,WAAW,GAAK,IAAI,CAApBA,WAAW;MAC1C,IAAI,CAACA,WAAW,EAAE;EAChB,MAAA,MAAM,IAAI93E,KAAK,CAAC,sDAAsD,CAAC;EACzE,IAAA;EAEA,IAAA,KAAK,IAAMs7E,SAAS,IAAIzsF,MAAM,EAAE;QAC9B,IAAM3T,IAAI,GAAGogG,SAA6B;EAC1C,MAAA,IAAMvxF,KAAK,GAAG8E,MAAM,CAAC3T,IAAI,CAAC;EAC1B,MAAA,IAAI,IAAI,CAACuiG,SAAS,CAAC1zF,KAAK,CAAC,EAAE;UACzB,IAAMM,KAAK,GAAG,IAAI,CAACq5F,aAAa,CAAC35F,KAAK,EAAE7O,IAAI,CAAC;EAC7C,QAAA,IAAMmjB,QAAQ,GAAMtU,KAAK,CAACk7D,SAAS,gBAAW56D,KAAO;UACrDN,KAAK,CAACM,KAAK,GAAGA,KAAK;UACnB,IAAI,CAACxS,GAAG,CAAA,wBAAA,GACmBwmB,QAAQ,UAAI,IAAI,CAACugF,SAAS,CAAC1jG,IAAI,CAAC,GAAG,SAAS,GAAG,EAAE,CAAA,GAAA,GAAA,GAAIksB,SAAS,CAACrd,KAAK,CAC/F,CAAC;UACD,IAAI;EACF,UAAA,IAAM8sF,EAAE,GAAGiB,WAAW,CAAC6L,eAAe,CACpCtlF,QACF,CAAyB;EACzB,UAAA,IAAMk9E,OAAO,GAAGC,uBAAuB,CAACtgG,IAAI,CAAC;EAC7C,UAAA,IAAMugG,OAAO,GAAG,CAACvgG,IAAI,EAAE27F,EAAE,CAGxB;EACDyB,UAAAA,aAAa,CAACiD,OAAO,CAAC,GAAGE,OAAc;YACvC1xF,KAAK,CAACnL,MAAM,GAAGi4F,EAAE;UACnB,CAAC,CAAC,OAAO7hG,KAAK,EAAE;EAAA,UAAA,IAAA4uG,oBAAA;EACd,UAAA,IAAI,CAAC5uG,KAAK,CAAA,0CAAA,GACmCA,KAAK,CAACsrC,OACnD,CAAC;EACD;EACA,UAAA,IAAI,CAACq2D,mBAAmB,CAACz7F,IAAI,CAAC;YAC9B,CAAA0oG,oBAAA,OAAI,CAAChM,cAAc,aAAnBgM,oBAAA,CAAqBrN,cAAc,EAAE;EACrC,UAAA,OAAO,IAAI,CAAC1nF,MAAM,CAAC3T,IAAI,CAAC;YACxB,IAAI,CAACkxB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;cAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;cAC5BzsB,OAAO,EAAE/sB,YAAY,CAAC27B,sBAAsB;EAC5CD,YAAAA,KAAK,EAAE,KAAK;EACZp9B,YAAAA,KAAK,EAALA,KAAK;EACLwqC,YAAAA,gBAAgB,EAAEtkC,IAAI;EACtBmjB,YAAAA,QAAQ,EAAEA,QAAQ;cAClB+e,MAAM,EAAErzB,KAAK,CAAC5O;EAChB,WAAC,CAAC;EACF,UAAA;EACF,QAAA;EACA,QAAA,IAAI,CAACugG,iBAAiB,CAACxgG,IAAI,EAAE6O,KAAK,CAAC;EACrC,MAAA;EACF,IAAA;MACA,IAAI,CAACqwF,aAAa,EAAE;IACtB,CAAC;IAAAtiG,MAAA,CAEO4rG,aAAa,GAArB,SAAQA,aAAaA,CAAC35F,KAAgB,EAAEuxF,SAA2B,EAAU;EAC3E;EACA,IAAA,IAAMuI,iBAAiB,GAAG95F,KAAK,CAACO,YAAY;EAC5C,IAAA,IAAI6yF,UAAU,GAAGpzF,KAAK,CAACM,KAAK;EAC5B,IAAA,IACEw5F,iBAAiB,KAChBvI,SAAS,KAAK,OAAO,IAAIA,SAAS,KAAK,YAAY,CAAC,IACrD5/E,6BAA6B,CAACmoF,iBAAiB,EAAE,OAAO,CAAC,EACzD;EACA1G,MAAAA,UAAU,GAAGngF,iBAAiB,CAACmgF,UAAU,EAAE0G,iBAAiB,CAAC;EAC/D,IAAA;MACA,IAAMx5F,KAAK,GAAG+S,yBAAyB,CAAC+/E,UAAU,EAAEpzF,KAAK,CAACuT,UAAU,CAAC;EACrE,IAAA,IAAIjT,KAAK,EAAE;QACT,IAAIixF,SAAS,CAAC/lG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;EACrC,QAAA,OAAOsnB,sBAAsB,CAACxS,KAAK,EAAE,IAAI,CAAC6tF,YAAY,CAAC;EACzD,MAAA;EACA,MAAA,OAAO7tF,KAAK;EACd,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;IAAAvS,MAAA,CAEO4jG,iBAAiB,GAAzB,SAAQA,iBAAiBA,CAACxgG,IAAsB,EAAE6O,KAAwB,EAAE;EAAA,IAAA,IAAA+5F,OAAA,GAAA,IAAA;EAC1E,IAAA,IAAMllG,MAAM,GAAGmL,KAAK,CAACnL,MAAM;MAC3B,IAAI,CAACA,MAAM,EAAE;EACX,MAAA;EACF,IAAA;MACA,IAAMyL,KAAK,GAAG,IAAI,CAACq5F,aAAa,CAAC35F,KAAK,EAAE7O,IAAI,CAAC;EAC7C,IAAA,IAAI,CAAC2T,MAAM,CAAC3T,IAAI,CAAC,GAAG;EAClB0D,MAAAA,MAAM,EAANA,MAAM;EACNyL,MAAAA,KAAK,EAALA,KAAK;QACL46D,SAAS,EAAEl7D,KAAK,CAACk7D,SAAS;QAC1B3nD,UAAU,EAAEvT,KAAK,CAACuT,UAAU;QAC5BhT,YAAY,EAAEP,KAAK,CAACO,YAAY;QAChCo2E,QAAQ,EAAE32E,KAAK,CAAC22E,QAAQ;QACxBvlF,EAAE,EAAE4O,KAAK,CAAC5O,EAAE;EACZ6hG,MAAAA,SAAS,EAAE;OACZ;EACD,IAAA,IAAI,CAACd,qBAAqB,CAAChhG,IAAI,CAAC;MAChC,IAAI,CAAC6oG,iBAAiB,CAAC7oG,IAAI,EAAE,aAAa,EAAE,IAAI,CAAC8oG,eAAe,CAAC;MACjE,IAAI,CAACD,iBAAiB,CAAC7oG,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC+oG,aAAa,CAAC;MAC7D,IAAI,CAACF,iBAAiB,CAAC7oG,IAAI,EAAE,OAAO,EAAE,IAAI,CAACgpG,eAAe,CAAC;EAC3D;MACA,IAAI,IAAI,CAAChM,YAAY,EAAE;QACrB,IAAI,CAAC6L,iBAAiB,CACpB7oG,IAAI,EACJ,gBAAgB,EAChB,UAACA,IAAsB,EAAE+2B,KAA0B,EAAK;EACtD;EACA,QAAA,IAAMkyE,aAAa,GAAGlyE,KAAK,CAACkyE,aAAa;EACzC,QAAA,IAAIA,aAAa,IAAA,IAAA,IAAbA,aAAa,CAAEnnG,MAAM,EAAE;YACzB8mG,OAAI,CAAC13E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACu3F,cAAc,EAAE;EACtChzF,YAAAA,IAAI,EAAEA;EACR,WAAC,CAAC;EACJ,QAAA;EACF,MAAA,CACF,CAAC;EACH,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CA+COksG,eAAe,GAAvB,SAAQA,eAAeA,CAAC9oG,IAAsB,EAAE;EAC9C,IAAA,IAAM46F,SAAS,GAAG,IAAI,CAAC8I,SAAS,CAAC1jG,IAAI,CAAC;MACtC,IAAI,CAAC46F,SAAS,EAAE;EACd,MAAA;EACF,IAAA;MACAA,SAAS,CAACM,OAAO,EAAE;IACrB,CAAC;EAAAt+F,EAAAA,MAAA,CAEOmsG,aAAa,GAArB,SAAQA,aAAaA,CAAC/oG,IAAsB,EAAE;EAAA,IAAA,IAAAkpG,kBAAA;MAC5C,IAAI,CAAA,CAAAA,kBAAA,GAAA,IAAI,CAACtM,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhBsM,kBAAA,CAAkBl2E,UAAU,MAAK,QAAQ,EAAE;EAC7C,MAAA,IAAI,CAAC8tE,WAAW,CAAC9gG,IAAI,CAAC;EACtB,MAAA;EACF,IAAA;EACA,IAAA,IAAM46F,SAAS,GAAG,IAAI,CAAC8I,SAAS,CAAC1jG,IAAI,CAAC;MACtC,IAAI,CAAC46F,SAAS,EAAE;EACd,MAAA;EACF,IAAA;MACAA,SAAS,CAACO,UAAU,EAAE;EACtB,IAAA,IAAI,CAACM,mBAAmB,CAACz7F,IAAI,CAAC;IAChC,CAAC;IAAApD,MAAA,CAEOosG,eAAe,GAAvB,SAAQA,eAAeA,CAAChpG,IAAsB,EAAE+2B,KAAY,EAAE;EAAA,IAAA,IAAAoyE,kBAAA;EAC5D,IAAA,IAAMrvG,KAAK,GAAG,IAAIgrB,KAAK,CAClB9kB,IAAI,GAAA,+CAAA,IAAA,CAAAmpG,kBAAA,GAAgD,IAAI,CAACvM,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhBuM,kBAAA,CAAkBn2E,UAAU,CACrF,CAAC;EACD,IAAA,IAAI,CAACl5B,KAAK,CAAA,EAAA,GAAIA,KAAK,EAAIi9B,KAAK,CAAC;EAC7B;EACA;MACA,IAAI,CAAC7F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;QAC7B32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;QAC5BzsB,OAAO,EAAE/sB,YAAY,CAAC0nC,sBAAsB;EAC5CoB,MAAAA,gBAAgB,EAAEtkC,IAAI;EACtBlG,MAAAA,KAAK,EAALA,KAAK;EACLo9B,MAAAA,KAAK,EAAE;EACT,KAAC,CAAC;EACF;EACA,IAAA,IAAM0jE,SAAS,GAAG,IAAI,CAAC8I,SAAS,CAAC1jG,IAAI,CAAC;EACtC,IAAA,IAAI46F,SAAS,EAAE;EACbA,MAAAA,SAAS,CAAChkE,OAAO,CAAC98B,KAAK,CAAC;EAC1B,IAAA;IACF,CAAC;EAAA8C,EAAAA,MAAA,CAEOmnG,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3BpI,EAAwB,EACxByN,eAAuB,EACvB70C,SAAiB,EACjBv0D,IAAsB,EACtBkG,EAA0B,EAC1BgB,EAAU,EACV;EACA,IAAA,IAAM2oD,KAAK,GAAGu5C,eAAe,GAAGzN,EAAE,CAACyN,eAAe;MAClD,IAAIvuG,IAAI,CAACQ,GAAG,CAACw0D,KAAK,CAAC,IAAI0E,SAAS,EAAE;QAChC,IAAI,CAAC53D,GAAG,CAAA,WAAA,GACMqD,IAAI,GAAA,mCAAA,GAAoCopG,eAAe,GAAA,QAAA,GAASljG,EAAE,GAAA,OAAA,GAAQgB,EAAE,GAAA,GAC1F,CAAC;QACDy0F,EAAE,CAACyN,eAAe,GAAGA,eAAe;EACtC,IAAA;EACF,EAAA;;EAEA;EAAA;IAAAxsG,MAAA,CACQ8nG,cAAc,GAAtB,SAAQA,cAAcA,CACpB1kG,IAAsB,EACtB43D,WAAmB,EACnBC,SAAiB,EACjB;EACA,IAAA,IAAQzsC,KAAK,GAAkB,IAAI,CAA3BA,KAAK;QAAEwxE,WAAW,GAAK,IAAI,CAApBA,WAAW;EAC1B,IAAA,IAAM/tF,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC3T,IAAI,CAAC;EAC/B,IAAA,IAAM27F,EAAE,GAAG9sF,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEnL,MAAM;MACxB,IAAI,CAAC0nB,KAAK,IAAI,CAACwxE,WAAW,IAAI,CAACjB,EAAE,EAAE;EACjC,MAAA,IAAI,CAACp8F,IAAI,CAAA,gCAAA,GAC0BS,IAAI,yCACvC,CAAC;EACD,MAAA,IAAI,CAACy7F,mBAAmB,CAACz7F,IAAI,CAAC;EAC9B,MAAA;EACF,IAAA;EACA,IAAA,IAAM2nG,aAAa,GAAG0B,cAAA,CAAgBj+E,KAAK,CAACvkB,QAAQ,CAAC,GACjDukB,KAAK,CAACvkB,QAAQ,GACd4O,QAAQ;EACZ,IAAA,IAAMmyF,UAAU,GAAG0B,cAAA,CAAgB1M,WAAW,CAAC/1F,QAAQ,CAAC,GACpD+1F,WAAW,CAAC/1F,QAAQ,GACpB4O,QAAQ;MACZ,IAAM8zF,WAAW,GAAG1uG,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEy5D,WAAW,CAAC;MAC5C,IAAM4xC,SAAS,GAAG3uG,IAAI,CAAC+D,GAAG,CAACi5D,SAAS,EAAE8vC,aAAa,EAAEC,UAAU,CAAC;EAChE,IAAA,IAAI4B,SAAS,GAAGD,WAAW,KAAK,CAAC16F,KAAK,CAACstF,MAAM,IAAIttF,KAAK,CAACqnD,KAAK,CAAC,EAAE;QAC7DrnD,KAAK,CAACqnD,KAAK,GAAG,KAAK;QACnB,IAAI,CAACv5D,GAAG,CAAA,YAAA,GACO4sG,WAAW,SAAIC,SAAS,GAAA,aAAA,GAAcxpG,IAAI,GAAA,eACzD,CAAC;EACD27F,MAAAA,EAAE,CAAC8N,MAAM,CAACF,WAAW,EAAEC,SAAS,CAAC;EACnC,IAAA,CAAC,MAAM;EACL;EACA,MAAA,IAAI,CAAC/N,mBAAmB,CAACz7F,IAAI,CAAC;EAChC,IAAA;EACF,EAAA;;EAEA;EAAA;IAAApD,MAAA,CACQonG,cAAc,GAAtB,SAAQA,cAAcA,CACpBr8F,IAA6B,EAC7B3H,IAAsB,EACtB;EACA,IAAA,IAAM6O,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC3T,IAAI,CAAC;EAC/B,IAAA,IAAM27F,EAAE,GAAG9sF,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEnL,MAAM;MACxB,IAAI,CAACi4F,EAAE,EAAE;EACP,MAAA,MAAM,IAAIY,sBAAsB,CAAA,8BAAA,GACCv8F,IAAI,yCACrC,CAAC;EACH,IAAA;MACA6O,KAAK,CAACstF,MAAM,GAAG,KAAK;MACpBttF,KAAK,CAACqnD,KAAK,GAAG,KAAK;EACnBylC,IAAAA,EAAE,CAAC+N,YAAY,CAAC/hG,IAAI,CAAC;IACvB,CAAC;EAAA/K,EAAAA,MAAA,CAEO8oG,cAAc,GAAtB,SAAQA,cAAcA,CAACt5B,QAAoB,EAAE;EAAA,IAAA,IAAAu9B,OAAA,GAAA,IAAA;MAC3C,IAAI,IAAI,CAACnL,UAAU,EAAE,IAAI,IAAI,CAACE,QAAQ,EAAE,EAAE;QACxC,IAAI,CAACqG,YAAY,CAAC34B,QAAQ,CAAC,CAAC7lD,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAC3C6vG,QAAAA,OAAI,CAACpqG,IAAI,CAAA,gCAAA,GAAkCzF,KAAO,CAAC;EACnD6vG,QAAAA,OAAI,CAAC3E,kBAAkB,CAAC2E,OAAI,CAAC1E,iBAAiB,CAAC;EACjD,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,MAAM;QACL,IAAI;EACF74B,QAAAA,QAAQ,EAAE;QACZ,CAAC,CAAC,OAAOtyE,KAAK,EAAE;UACd,IAAI,CAACyF,IAAI,CAAA,gCAAA,GAC0B,IAAI,CAACm9F,cAAc,GAAA,GAAA,GAAI5iG,KAC1D,CAAC;EACH,MAAA;EACF,IAAA;IACF,CAAC;EAAA8C,EAAAA,MAAA,CAEO4hG,UAAU,GAAlB,SAAQA,UAAUA,GAAY;EAC5B,IAAA,OAAO,IAAI,CAACpB,aAAa,CAACp7F,IAAI,CAAC,UAAA4nG,MAAA,EAAA;QAAA,IAAE5pG,IAAI,GAAA4pG,MAAA,CAAA,CAAA,CAAA;EAAEjO,QAAAA,EAAE,GAAAiO,MAAA,CAAA,CAAA,CAAA;EAAA,MAAA,OAAM5pG,IAAI,IAAI27F,EAAE,CAACC,QAAQ;MAAA,CAAA,CAAC;IACrE,CAAC;EAAAh/F,EAAAA,MAAA,CAEO8hG,QAAQ,GAAhB,SAAQA,QAAQA,GAAY;EAAA,IAAA,IAAAmL,OAAA,GAAA,IAAA;EAC1B,IAAA,OAAO,IAAI,CAACzM,aAAa,CAACp7F,IAAI,CAAC,UAAA8nG,MAAA,EAAA;QAAA,IAAE9pG,IAAI,GAAA8pG,MAAA,CAAA,CAAA,CAAA;QAAA,OAAM9pG,IAAI,IAAI,CAAC,CAAC6pG,OAAI,CAACnG,SAAS,CAAC1jG,IAAI,CAAC;MAAA,CAAA,CAAC;IAC5E,CAAC;EAAApD,EAAAA,MAAA,CAEO2lG,SAAS,GAAjB,SAAQA,SAASA,CACf1zF,KAAoC,EACR;EAC5B,IAAA,OAAO,CAAC,CAACA,KAAK,IAAI,CAACA,KAAK,CAACnL,MAAM;EACjC,EAAA;;EAEA;EACA;EACA;EAAA;IAAA9G,MAAA,CACQmoG,YAAY,GAApB,SAAQA,YAAYA,CAClBD,WAAuB,EACvBiF,WAA+B,EAChB;EAAA,IAAA,IAAAC,OAAA,GAAA,IAAA;EAAA,IAAA,IADfD,WAA+B,KAAA,MAAA,EAAA;QAA/BA,WAA+B,GAAG,IAAI,CAAC9E,iBAAiB;EAAA,IAAA;EAExD,IAAA,IAAI,CAAC8E,WAAW,CAACjoG,MAAM,EAAE;EACvB,MAAA,IAAI,CAACnF,GAAG,CAAC,0DAA0D,CAAC;QACpE,OAAO4oB,OAAO,CAACC,OAAO,EAAE,CAACc,IAAI,CAACw+E,WAAW,CAAC;EAC5C,IAAA;EACA,IAAA,IAAQpI,cAAc,GAAK,IAAI,CAAvBA,cAAc;;EAEtB;EACA,IAAA,IAAMuN,kBAAkB,GAAGF,WAAW,CAAC9yF,GAAG,CAAC,UAACjX,IAAI,EAAA;EAAA,MAAA,OAC9CgqG,OAAI,CAAChP,aAAa,CAACh7F,IAAI,CAAC;EAAA,IAAA,CAC1B,CAAC;EACD,IAAA,IAAMkqG,YAAY,GAAGH,WAAW,CAACjoG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAACg7F,kBAAkB;EACxE,IAAA,IAAIoN,YAAY,EAAE;QAChB,IAAI,CAAC3O,YAAY,EAAE;EACrB,IAAA;MACA,OAAOh2E,OAAO,CAACW,GAAG,CAAC+jF,kBAAkB,CAAC,CAAC3jF,IAAI,CAAC,UAAC/Z,MAAM,EAAK;EACtD,MAAA,IAAImwF,cAAc,KAAKsN,OAAI,CAACtN,cAAc,EAAE;EAC1C,QAAA;EACF,MAAA;EACA;EACAoI,MAAAA,WAAW,EAAE;EACbkF,MAAAA,OAAI,CAAChF,kBAAkB,CAACgF,OAAI,CAAC/E,iBAAiB,CAAC;EACjD,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAroG,EAAAA,MAAA,CAEOooG,kBAAkB,GAA1B,SAAQA,kBAAkBA,CAAC+E,WAA+B,EAAE;EAAA,IAAA,IAAAI,OAAA,GAAA,IAAA;EAC1DJ,IAAAA,WAAW,CAACnpG,OAAO,CAAC,UAACZ,IAAI,EAAK;EAAA,MAAA,IAAAoqG,mBAAA;EAC5B,MAAA,IAAMzO,EAAE,GAAA,CAAAyO,mBAAA,GAAGD,OAAI,CAACx2F,MAAM,CAAC3T,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAAjBoqG,mBAAA,CAAmB1mG,MAAM;EACpC;EACA;EACA;EACA,MAAA,IAAI,CAACi4F,EAAE,IAAIA,EAAE,CAACC,QAAQ,EAAE;EACtB,QAAA;EACF,MAAA;EACAuO,MAAAA,OAAI,CAAC1O,mBAAmB,CAACz7F,IAAI,CAAC;EAChC,IAAA,CAAC,CAAC;IACJ,CAAC;IAAApD,MAAA,CAEO+9F,MAAM,GAAd,SAAQA,MAAMA,CACZC,SAA0B,EAC1B56F,IAAsB,EACtB66F,OAAiB,EACjB;MACA,IAAI,IAAI,CAAC6B,cAAc,EAAE;QACvB,IAAI,CAACA,cAAc,CAAC/B,MAAM,CAACC,SAAS,EAAE56F,IAAI,EAAE66F,OAAO,CAAC;EACtD,IAAA;IACF,CAAC;EAAAj+F,EAAAA,MAAA,CAEOo+F,aAAa,GAArB,SAAQA,aAAaA,CAACh7F,IAAsB,EAA6B;MACvE,IAAI,IAAI,CAAC08F,cAAc,EAAE;EACvB,MAAA,OAAO,IAAI,CAACA,cAAc,CAAC1B,aAAa,CAACh7F,IAAI,CAAC;EAChD,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CAEO8mG,SAAS,GAAjB,SAAQA,SAASA,CAAC1jG,IAAsB,EAA0B;MAChE,IAAI,IAAI,CAAC08F,cAAc,EAAE;EACvB,MAAA,OAAO,IAAI,CAACA,cAAc,CAACxG,OAAO,CAACl2F,IAAI,CAAC;EAC1C,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAApD,EAAAA,MAAA,CAEOm+F,WAAW,GAAnB,SAAQA,WAAWA,CAAC/6F,IAA6B,EAAE;EACjD,IAAA,IAAIA,IAAI,IAAI,IAAI,CAAC08F,cAAc,EAAE;EAC/B,MAAA,IAAI,CAACA,cAAc,CAAC3B,WAAW,CAAC/6F,IAAI,CAAC;EACvC,IAAA;IACF,CAAC;EAAApD,EAAAA,MAAA,CAEO6+F,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAACz7F,IAAsB,EAAE;MAClD,IAAI,IAAI,CAAC08F,cAAc,EAAE;EACvB,MAAA,IAAI,CAACA,cAAc,CAACjB,mBAAmB,CAACz7F,IAAI,CAAC;EAC/C,IAAA;IACF,CAAC;IAAApD,MAAA,CAoBOisG,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvB7oG,IAAsB,EACtB+2B,KAAa,EACbszE,EAGQ,EACR;EACA,IAAA,IAAMx7F,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC3T,IAAI,CAAC;MAC/B,IAAI,CAAC6O,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA,IAAA,IAAMnL,MAAM,GAAGmL,KAAK,CAACnL,MAAM;MAC3B,IAAI,CAACA,MAAM,EAAE;EACX,MAAA;EACF,IAAA;MACA,IAAMwuD,QAAQ,GAAGm4C,EAAE,CAAC1qG,IAAI,CAAC,IAAI,EAAEK,IAAI,CAAC;EACpC6O,IAAAA,KAAK,CAACizF,SAAS,CAACn2F,IAAI,CAAC;EAAEorB,MAAAA,KAAK,EAALA,KAAK;EAAEm7B,MAAAA,QAAQ,EAARA;EAAS,KAAC,CAAC;EACzCxuD,IAAAA,MAAM,CAACuuD,gBAAgB,CAACl7B,KAAK,EAAEm7B,QAAQ,CAAC;IAC1C,CAAC;EAAAt1D,EAAAA,MAAA,CAEOokG,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAAChhG,IAAsB,EAAE;EACpD,IAAA,IAAM6O,KAAK,GAAG,IAAI,CAAC8E,MAAM,CAAC3T,IAAI,CAAC;MAC/B,IAAI,CAAC6O,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA,IAAA,IAAMnL,MAAM,GAAGmL,KAAK,CAACnL,MAAM;MAC3B,IAAI,CAACA,MAAM,EAAE;EACX,MAAA;EACF,IAAA;EACAmL,IAAAA,KAAK,CAACizF,SAAS,CAAClhG,OAAO,CAAC,UAAC0pG,CAAC,EAAK;QAC7B5mG,MAAM,CAACyuD,mBAAmB,CAACm4C,CAAC,CAACvzE,KAAK,EAAEuzE,CAAC,CAACp4C,QAAQ,CAAC;EACjD,IAAA,CAAC,CAAC;EACFrjD,IAAAA,KAAK,CAACizF,SAAS,CAAChgG,MAAM,GAAG,CAAC;IAC5B,CAAC;IAAA,OAAA/C,YAAA,CAAAy9F,gBAAA,EAAA,CAAA;MAAAx9F,GAAA,EAAA,wBAAA;MAAAC,GAAA,EAj5CD,SAAAA,GAAAA,GAA8C;EAAA,MAAA,IAAAsrG,kBAAA;QAC5C,IAAMv3E,UAAU,GAAA,CAAAu3E,kBAAA,GAAG,IAAI,CAAC3N,WAAW,KAAA,IAAA,GAAA,MAAA,GAAhB2N,kBAAA,CAAkBv3E,UAAU;EAC/C,MAAA,OAAOA,UAAU,KAAK,MAAM,IAAIA,UAAU,KAAK,OAAO;EACxD,IAAA;EAAC,GAAA,EAAA;MAAAh0B,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAqPD,SAAAA,GAAAA,GAA8C;EAAA,MAAA,IAAAurG,OAAA,GAAA,IAAA;EAC5C,MAAA,OAAO7oG,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACgT,MAAM,CAAC,CAACkC,MAAM,CAAC,UAAC40F,UAAwB,EAAEzqG,IAAI,EAAK;EACzE,QAAA,IAAM6O,KAAK,GAAG27F,OAAI,CAAC72F,MAAM,CAAC3T,IAAI,CAAsB;UACpDyqG,UAAU,CAACzqG,IAAI,CAAC,GAAG;YACjBC,EAAE,EAAE4O,KAAK,CAAC5O,EAAE;YACZ8pE,SAAS,EAAEl7D,KAAK,CAACk7D,SAAS;YAC1B56D,KAAK,EAAEN,KAAK,CAACM,KAAK;YAClBiT,UAAU,EAAEvT,KAAK,CAACuT;WACnB;EACD,QAAA,OAAOqoF,UAAU;QACnB,CAAC,EAAE,EAAE,CAAC;EACR,IAAA;EAAC,GAAA,EAAA;MAAAzrG,GAAA,EAAA,eAAA;MAAAC,GAAA,EAkWD,SAAAA,GAAAA,GAAoC;EAAA,MAAA,IAAAyrG,OAAA,GAAA,IAAA;EAClC,MAAA,OACE,IAAI,CAAC/L,iBAAiB,GAAG,CAAC,IAC1B,CAAC,IAAI,CAACvB,aAAa,CAACp7F,IAAI,CAAC,UAAA2oG,MAAA,EAAY;UAAA,IAAV3qG,IAAI,GAAA2qG,MAAA,CAAA,CAAA,CAAA;EAC7B,QAAA,IAAI3qG,IAAI,EAAE;EACR,UAAA,IAAM6O,KAAK,GAAG67F,OAAI,CAAC/2F,MAAM,CAAC3T,IAAI,CAAC;EAC/B,UAAA,IAAI6O,KAAK,EAAE;EACT,YAAA,OAAO,CAACA,KAAK,CAACqnD,KAAK,IAAIrnD,KAAK,CAACstF,MAAM;EACrC,UAAA;EACF,QAAA;EACA,QAAA,OAAO,KAAK;EACd,MAAA,CAAC,CAAC;EAEN,IAAA;EAAC,GAAA,EAAA;MAAAn9F,GAAA,EAAA,aAAA;MAAAC,GAAA,EA8SD,SAAAA,GAAAA,GAAmC;EACjC,MAAA,IAAMgpG,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;QAChD,OACEA,iBAAiB,GAAG,CAAC,KACpBA,iBAAiB,IAAI,IAAI,CAACtL,sBAAsB,IAC/C,IAAI,CAAC4F,SAAS,CAAC,IAAI,CAAC5uF,MAAM,CAAC3I,UAAU,CAAC,CAAC;EAE7C,IAAA;EAAC,GAAA,EAAA;MAAAhM,GAAA,EAAA,UAAA;MAAAC,GAAA,EAmND,SAAAA,GAAAA,GAA2C;QAAA,IAAAm8D,WAAA,EAAAwvC,qBAAA;QACzC,IAAMx/E,KAAK,GAAG,CAAA,CAAAgwC,WAAA,GAAC,IAAI,CAAChwC,KAAK,KAAA,IAAA,IAAA,CAAAw/E,qBAAA,GAAVxvC,WAAA,CAAYyvC,aAAa,KAAA,IAAA,GAAA,MAAA,GAA1BD,qBAAA,CAAAtkG,IAAA,CAAA80D,WAAA,EAAqC,QAAQ,CAAC,KAAI,IAAI,CAAChwC,KAAK;EAC1E,MAAA,OAAOA,KAAK,IAAA,IAAA,GAAA,MAAA,GAALA,KAAK,CAAEi0E,GAAG;EACnB,IAAA;EAAC,GAAA,EAAA;MAAArgG,GAAA,EAAA,mBAAA;MAAAC,GAAA,EAgOD,SAAAA,GAAAA,GAAwC;EAAA,MAAA,IAAA6rG,OAAA,GAAA,IAAA;EACtC,MAAA,OAAOnpG,MAAM,CAAChB,IAAI,CAAC,IAAI,CAACgT,MAAM,CAAC,CAACkC,MAAM,CACpC,UAAC8O,GAAG,EAAE3kB,IAAI,EAAA;EAAA,QAAA,OACR2kB,GAAG,IAAImmF,OAAI,CAACvI,SAAS,CAACuI,OAAI,CAACn3F,MAAM,CAAC3T,IAAI,CAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAAA,MAAA,CAAA,EACvE,CACF,CAAC;EACH,IAAA;EAAC,GAAA,EAAA;MAAAhB,GAAA,EAAA,mBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwC;QACtC,OAAO,IAAI,CAACm+F,aAAa,CAACvnF,MAAM,CAAC,UAAC8O,GAAG,EAAAomF,MAAA,EAAA;UAAA,IAAG/qG,IAAI,GAAA+qG,MAAA,CAAA,CAAA,CAAA;EAAA,QAAA,OAAMpmF,GAAG,IAAI3kB,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;EAAA,MAAA,CAAA,EAAE,CAAC,CAAC;EAC5E,IAAA;EAAC,GAAA,EAAA;MAAAhB,GAAA,EAAA,mBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoD;EAClD,MAAA,OAAO,IAAI,CAACm+F,aAAa,CACtBnmF,GAAG,CAAC,UAAA+zF,MAAA,EAAA;UAAA,IAAEhrG,IAAI,GAAAgrG,MAAA,CAAA,CAAA,CAAA;EAAA,QAAA,OAAMhrG,IAAI;EAAA,MAAA,CAAA,CAAC,CACrBiqB,MAAM,CAAC,UAACjqB,IAAI,EAAA;UAAA,OAAK,CAAC,CAACA,IAAI;QAAA,CAAA,CAAC;EAC7B,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CAvtD2Cd,MAAM,CAAA;EA8vDpD,SAASygG,oBAAoBA,CAACsL,IAAiB,EAAE;EAC/C,EAAA,IAAMC,cAAc,GAAGD,IAAI,CAACE,gBAAgB,CAAC,QAAQ,CAAC;EACtD,EAAA,EAAE,CAAC9wG,KAAK,CAACiM,IAAI,CAAC4kG,cAAc,CAAC,CAACtqG,OAAO,CAAC,UAACU,MAAM,EAAK;EAChD2pG,IAAAA,IAAI,CAACG,WAAW,CAAC9pG,MAAM,CAAC;EAC1B,EAAA,CAAC,CAAC;EACJ;EAEA,SAASs+F,SAASA,CAACx0E,KAAuB,EAAErxB,GAAW,EAAE;IACvD,IAAMuH,MAAM,GAAGnB,IAAI,CAACkrG,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACpDhqG,MAAM,CAACtB,IAAI,GAAG,WAAW;IACzBsB,MAAM,CAAC+9F,GAAG,GAAGtlG,GAAG;EAChBqxB,EAAAA,KAAK,CAACmgF,WAAW,CAACjqG,MAAM,CAAC;EAC3B;EAEA,SAASg/F,uBAAuBA,CAACtgG,IAAsB,EAAE;EACvD,EAAA,OAAOA,IAAI,KAAK,OAAO,GAAG,CAAC,GAAG,CAAC;EACjC;;ECn1DmC,IAc7BwrG,kBAAkB,gBAAA,YAAA;IAUtB,SAAAA,kBAAAA,CAAYt6E,GAAQ,EAAE;EAAA,IAAA,IAAA,CATdA,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHu6E,gBAAgB,GAAA,MAAA;EAAA,IAAA,IAAA,CAChBlyE,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVnO,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACLsgF,gBAAgB,GAAA,MAAA;EAAA,IAAA,IAAA,CAChB95E,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACL+5E,UAAU,GAAA,MAAA;EAAA,IAAA,IAAA,CACVC,gBAAgB,GAAA,MAAA;MAGtB,IAAI,CAAC16E,GAAG,GAAGA,GAAG;EACd,IAAA,IAAI,CAACu6E,gBAAgB,GAAGxwG,MAAM,CAACi5B,iBAAiB;EAChD,IAAA,IAAI,CAACqF,UAAU,GAAG,EAAE;MACpB,IAAI,CAACnO,KAAK,GAAG,IAAI;MACjB,IAAI,CAACsgF,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAAC95E,KAAK,GAAG5wB,SAAS;MACtB,IAAI,CAAC2qG,UAAU,GAAG,IAAI;MAEtB,IAAI,CAACr2E,iBAAiB,EAAE;EAC1B,EAAA;EAAC,EAAA,IAAA14B,MAAA,GAAA4uG,kBAAA,CAAA3uG,SAAA;EAAAD,EAAAA,MAAA,CAEMivG,mBAAmB,GAA1B,SAAOA,mBAAmBA,CAACD,gBAAkC,EAAE;MAC7D,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;IAC1C,CAAC;EAAAhvG,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,IAAI,CAACoyB,GAAG,EAAE;QACZ,IAAI,CAAC46E,kBAAkB,EAAE;EAC3B,IAAA;MACA,IAAI,IAAI,CAACl6E,KAAK,EAAE;QACd,IAAI,CAACm6E,WAAW,EAAE;EACpB,IAAA;MACA,IAAI,CAAC3gF,KAAK,GAAG,IAAI;MACjB,IAAI,CAACugF,UAAU,GAAG,IAAI;EACtB;EACA,IAAA,IAAI,CAACz6E,GAAG,GAAG,IAAI,CAAC06E,gBAAgB,GAAG,IAAI;IACzC,CAAC;EAAAhvG,EAAAA,MAAA,CAES04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuwG,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvE/6E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3D/sE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DjoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC86B,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzDtF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EACvDjtE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;IAC7D,CAAC;EAAAt4D,EAAAA,MAAA,CAESkvG,kBAAkB,GAA5B,SAAUA,kBAAkBA,GAAG;EAC7B,IAAA,IAAQ56E,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACuwG,sBAAsB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACxE/6E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5D/sE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DjoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC86B,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1DtF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EACxDjtE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;IAC9D,CAAC;IAAAt4D,MAAA,CAESqvG,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAC7Bl1E,KAAoC,EACpCpvB,IAA6B,EAC7B;EACA;MACA,IAAMV,KAAK,GAAG,IAAI,CAACiqB,GAAG,CAACxC,MAAM,CAAC/mB,IAAI,CAACukG,YAAY,CAAC;EAChD,IAAA,IAAI,IAAI,CAACC,cAAc,CAACllG,KAAK,CAAC,EAAE;EAC9B,MAAA,IAAI,CAACykG,gBAAgB,CAAC//F,IAAI,CAAC;UACzBwZ,OAAO,EAAEle,KAAK,CAACke,OAAO;UACtBH,MAAM,EAAE/d,KAAK,CAAC+d,MAAM;UACpBD,KAAK,EAAE9d,KAAK,CAAC8d;EACf,OAAC,CAAC;EACJ,IAAA;IACF,CAAC;IAAAnoB,MAAA,CAESqhG,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBlnE,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAI,CAACyjB,KAAK,GAAGzjB,IAAI,CAACyjB,KAAK,YAAYghF,gBAAgB,GAAGzkG,IAAI,CAACyjB,KAAK,GAAG,IAAI;MACvE,IAAI,CAACugF,UAAU,GAAG,IAAI;MACtB,IAAI,IAAI,CAAC/5E,KAAK,IAAI,IAAI,CAACV,GAAG,CAACxC,MAAM,CAAC5sB,MAAM,EAAE;QACxC,IAAI,CAACuqG,gBAAgB,EAAE;EACzB,IAAA;IACF,CAAC;IAAAzvG,MAAA,CAESu8F,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBpiE,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAMupB,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACw6E,gBAAgB,GAAG,EAAE;EAC1B,IAAA,IAAI,CAACnyE,UAAU,GAAG5xB,IAAI,CAAC4xB,UAAU;MACjC,IAAIrI,GAAG,CAACrJ,MAAM,CAACykF,oBAAoB,IAAI3kG,IAAI,CAACoD,KAAK,EAAE;EACjD;QACA,IAAI,CAACwhG,YAAY,EAAE;EACrB,IAAA;IACF,CAAC;IAAA3vG,MAAA,CAEO45B,eAAe,GAAvB,SAAQA,eAAeA,CACrBO,KAA4B,EAC5BpvB,IAAuB,EACvB;MACA,IAAI,IAAI,CAACiqB,KAAK,IAAIxoB,cAAA,CAAgB,IAAI,CAACqiG,gBAAgB,CAAC,EAAE;QACxD,IAAI,CAACY,gBAAgB,EAAE;EACzB,IAAA;EACF,EAAA;;EAEA;EACA;EAAA;IAAAzvG,MAAA,CACUuhG,cAAc,GAAxB,SAAUA,cAAcA,CACtBpnE,KAA2B,EAC3BpvB,IAAsB,EACtB;EACA,IAAA,IAAMupB,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAIA,GAAG,CAACrJ,MAAM,CAACykF,oBAAoB,IAAI3kG,IAAI,CAACoD,KAAK,EAAE;EACjD;QACA,IAAI,CAACwhG,YAAY,EAAE;EACrB,IAAA;IACF,CAAC;EAAA3vG,EAAAA,MAAA,CAESs4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,GAAG;MAC3B,IAAI,CAAC62C,WAAW,EAAE;MAClB,IAAI,CAAC3gF,KAAK,GAAG,IAAI;IACnB,CAAC;EAAAxuB,EAAAA,MAAA,CAEDyvG,gBAAgB,GAAhB,SAAAA,gBAAgBA,GAAG;MACjB,IAAI,IAAI,CAACjhF,KAAK,EAAE;QACd,IAAI,IAAI,CAACohF,WAAW,IAAI,CAAC,IAAI,IAAI,CAACC,UAAU,IAAI,CAAC,EAAE;UACjD,IAAI,CAACd,UAAU,GAAG,IAAI;EACtB,QAAA;EACF,MAAA;EACA,MAAA,IAAMj9E,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;QAC9B,IAAIA,MAAM,CAAC5sB,MAAM,EAAE;EACjB,QAAA,IAAMovB,GAAG,GAAG,IAAI,CAACA,GAAG;UACpB,IAAMw7E,QAAQ,GAAG,IAAI,CAACC,WAAW,CAACj+E,MAAM,CAAC5sB,MAAM,GAAG,CAAC,CAAC;EACpD,QAAA,IAAI4qG,QAAQ,KAAK,IAAI,CAACjB,gBAAgB,EAAE;EACtCv6E,UAAAA,GAAG,CAAC9xB,MAAM,CAACzC,GAAG,CAAA,8BAAA,GACmB+vG,QAAQ,GAAA,IAAA,GAAKh+E,MAAM,CAACg+E,QAAQ,CAAC,CAAC1nF,MAAM,GAAA,IAAA,GAAK0J,MAAM,CAACg+E,QAAQ,CAAC,CAACvnF,OAAO,GAAA,aAAA,GAAc,IAAI,CAACsnF,UAAU,GAAA,GAAA,GAAI,IAAI,CAACD,WACxI,CAAC;EACH,QAAA;UACAt7E,GAAG,CAACu6E,gBAAgB,GAAGiB,QAAQ;EAC/B,QAAA,IACEx7E,GAAG,CAACmB,gBAAgB,IACpBnB,GAAG,CAACu6E,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,IAC5C,IAAI,CAACG,gBAAgB,EACrB;EACA;EACA;EACA,UAAA,IAAI,CAACA,gBAAgB,CAACgB,eAAe,EAAE;EACzC,QAAA;EACA,QAAA,IAAI,CAACnB,gBAAgB,GAAGv6E,GAAG,CAACu6E,gBAAgB;EAC9C,MAAA;EACF,IAAA;EACF,EAAA;;EAEA;EACF;EACA;EAFE7uG,EAAAA,MAAA,CAGA+vG,WAAW,GAAX,SAAAA,WAAWA,CAACE,aAAqB,EAAU;EAAA,IAAA,IAAAxmG,KAAA,GAAA,IAAA;EACzC,IAAA,IAAMqoB,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;EAC9B,IAAA,IAAI,CAACA,MAAM,CAAC5sB,MAAM,EAAE;EAClB,MAAA,OAAO,EAAE;EACX,IAAA;MAEA,IAAMgrG,WAAW,GAAGp+E,MAAM,CAACzE,MAAM,CAC/B,UAAChjB,KAAK,EAAEqD,KAAK,EAAA;QAAA,OAAKjE,KAAI,CAAC8lG,cAAc,CAACllG,KAAK,CAAC,IAAIqD,KAAK,IAAIuiG,aAAa;EAAA,IAAA,CACxE,CAAC;MAED,IAAI,CAAClB,UAAU,GAAG,IAAI;EACtB,IAAA,OAAOH,kBAAkB,CAACuB,sBAAsB,CAC9CD,WAAW,EACX,IAAI,CAACL,UAAU,EACf,IAAI,CAACD,WACP,CAAC;IACH,CAAC;EAAA5vG,EAAAA,MAAA,CAED2vG,YAAY,GAAZ,SAAAA,YAAYA,GAAG;MACb,IAAI,IAAI,CAAC36E,KAAK,EAAE;EACd;EACA,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAC65E,gBAAgB,GAAGxwG,MAAM,CAACi5B,iBAAiB;EAChD/zB,IAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAAC1G,KAAK,CAAC;EAC9B,IAAA,IAAI,CAACA,KAAK,GAAGzxB,IAAI,CAAC+0B,WAAW,CAAC,IAAI,CAACm3E,gBAAgB,CAAC1sG,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MACrE,IAAI,CAAC0sG,gBAAgB,EAAE;IACzB,CAAC;EAAAzvG,EAAAA,MAAA,CAEDmvG,WAAW,GAAX,SAAAA,WAAWA,GAAG;MACZ,IAAI,CAACL,gBAAgB,GAAG,EAAE;EAC1B,IAAA,IAAI,CAACnyE,UAAU,GAAG,EAAE;EACpB,IAAA,IAAI,CAACkyE,gBAAgB,GAAGxwG,MAAM,CAACi5B,iBAAiB;MAChD,IAAI,IAAI,CAACtC,KAAK,EAAE;EACdzxB,MAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAAC1G,KAAK,CAAC;QAC9B,IAAI,CAACA,KAAK,GAAG5wB,SAAS;EACxB,IAAA;IACF,CAAC;EAAApE,EAAAA,MAAA,CAEDowG,aAAa,GAAb,SAAAA,aAAaA,GAAsC;MACjD,IAAI,IAAI,CAACrB,UAAU,EAAE;QACnB,OAAO,IAAI,CAACA,UAAU;EACxB,IAAA;EACA,IAAA,IAAMvgF,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAM6hF,UAAU,GAAG;EACjBloF,MAAAA,KAAK,EAAE,CAAC;EACRC,MAAAA,MAAM,EAAE;OACT;EAED,IAAA,IAAIoG,KAAK,EAAE;EACT,MAAA,IAAMugF,UAAU,GAAGvgF,KAAK,CAAC8hF,qBAAqB,EAAE;EAChDD,MAAAA,UAAU,CAACloF,KAAK,GAAG4mF,UAAU,CAAC5mF,KAAK;EACnCkoF,MAAAA,UAAU,CAACjoF,MAAM,GAAG2mF,UAAU,CAAC3mF,MAAM;QACrC,IAAI,CAACioF,UAAU,CAACloF,KAAK,IAAI,CAACkoF,UAAU,CAACjoF,MAAM,EAAE;EAC3C;EACA;EACAioF,QAAAA,UAAU,CAACloF,KAAK,GACd4mF,UAAU,CAACwB,KAAK,GAAGxB,UAAU,CAACyB,IAAI,IAAIhiF,KAAK,CAACrG,KAAK,IAAI,CAAC;EACxDkoF,QAAAA,UAAU,CAACjoF,MAAM,GACf2mF,UAAU,CAAC0B,MAAM,GAAG1B,UAAU,CAAC2B,GAAG,IAAIliF,KAAK,CAACpG,MAAM,IAAI,CAAC;EAC3D,MAAA;EACF,IAAA;MACA,IAAI,CAAC2mF,UAAU,GAAGsB,UAAU;EAC5B,IAAA,OAAOA,UAAU;IACnB,CAAC;EAAArwG,EAAAA,MAAA,CAuBOuvG,cAAc,GAAtB,SAAQA,cAAcA,CAACllG,KAAY,EAAW;EAC5C,IAAA,IAAMykG,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;EAC9C,IAAA,OAAO,CAACA,gBAAgB,CAAC1pG,IAAI,CAAC,UAACurG,eAAe,EAAK;QACjD,OACEtmG,KAAK,CAACke,OAAO,KAAKooF,eAAe,CAACpoF,OAAO,IACzCle,KAAK,CAAC8d,KAAK,KAAKwoF,eAAe,CAACxoF,KAAK,IACrC9d,KAAK,CAAC+d,MAAM,KAAKuoF,eAAe,CAACvoF,MAAM;EAE3C,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAwmF,kBAAA,CAEMuB,sBAAsB,GAA7B,SAAOA,sBAAsBA,CAC3Br+E,MAAoB,EACpB3J,KAAa,EACbC,MAAc,EACN;EACR,IAAA,IAAI,EAAC0J,MAAM,IAAA,IAAA,IAANA,MAAM,CAAE5sB,MAAM,CAAA,EAAE;EACnB,MAAA,OAAO,EAAE;EACX,IAAA;;EAEA;EACA;MACA,IAAM0rG,mBAAmB,GAAG,SAAtBA,mBAAmBA,CACvBC,QAAe,EACf5yE,SAA4B,EACzB;QACH,IAAI,CAACA,SAAS,EAAE;EACd,QAAA,OAAO,IAAI;EACb,MAAA;EAEA,MAAA,OACE4yE,QAAQ,CAAC1oF,KAAK,KAAK8V,SAAS,CAAC9V,KAAK,IAClC0oF,QAAQ,CAACzoF,MAAM,KAAK6V,SAAS,CAAC7V,MAAM;MAExC,CAAC;;EAED;EACA;EACA,IAAA,IAAI0oF,aAAa,GAAGh/E,MAAM,CAAC5sB,MAAM,GAAG,CAAC;EACrC;MACA,IAAM6rG,UAAU,GAAG9yG,IAAI,CAACsD,GAAG,CAAC4mB,KAAK,EAAEC,MAAM,CAAC;EAC1C,IAAA,KAAK,IAAIhiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0rB,MAAM,CAAC5sB,MAAM,EAAEkB,CAAC,IAAI,CAAC,EAAE;EACzC,MAAA,IAAMiE,KAAK,GAAGynB,MAAM,CAAC1rB,CAAC,CAAC;QACvB,IACE,CAACiE,KAAK,CAAC8d,KAAK,IAAI4oF,UAAU,IAAI1mG,KAAK,CAAC+d,MAAM,IAAI2oF,UAAU,KACxDH,mBAAmB,CAACvmG,KAAK,EAAEynB,MAAM,CAAC1rB,CAAC,GAAG,CAAC,CAAC,CAAC,EACzC;EACA0qG,QAAAA,aAAa,GAAG1qG,CAAC;EACjB,QAAA;EACF,MAAA;EACF,IAAA;EAEA,IAAA,OAAO0qG,aAAa;IACtB,CAAC;IAAA,OAAA3uG,YAAA,CAAAysG,kBAAA,EAAA,CAAA;MAAAxsG,GAAA,EAAA,YAAA;MAAAC,GAAA,EA1ED,SAAAA,GAAAA,GAAyB;QACvB,OAAO,IAAI,CAAC+tG,aAAa,EAAE,CAACjoF,KAAK,GAAG,IAAI,CAAC6oF,kBAAkB;EAC7D,IAAA;EAAC,GAAA,EAAA;MAAA5uG,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;QACxB,OAAO,IAAI,CAAC+tG,aAAa,EAAE,CAAChoF,MAAM,GAAG,IAAI,CAAC4oF,kBAAkB;EAC9D,IAAA;EAAC,GAAA,EAAA;MAAA5uG,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAiC;QAC/B,IAAI4xE,UAAU,GAAG,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC3/C,GAAG,CAACrJ,MAAM,CAACgmF,sBAAsB,EAAE;UAC3C,IAAI;YACFh9B,UAAU,GAAG1wE,IAAI,CAAC2tG,gBAAgB;UACpC,CAAC,CAAC,OAAOjtG,CAAC,EAAE;EACV;EAAA,QAAA;EAEJ,MAAA;EAEA,MAAA,OAAOhG,IAAI,CAAC+D,GAAG,CAACiyE,UAAU,EAAE,IAAI,CAAC3/C,GAAG,CAACrJ,MAAM,CAACkmF,mBAAmB,CAAC;EAClE,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;ECnQH;;;;;EAKO,IAAMC,YAAY,GAAG;EAC3B;;;EAGAryG,EAAAA,QAAQ,EAAE,GAAG;EAEb;;;EAGAM,EAAAA,KAAK,EAAE,GAAG;EAEV;;;EAGAwI,EAAAA,KAAK,EAAE,GAAG;EAEV;;;EAGAwpG,EAAAA,KAAK,EAAE,IAAI;EAEX;;;EAGAC,EAAAA,IAAI,EAAE,GAAG;EAET;;;EAGAC,EAAAA,OAAO,EAAE,GAAG;EAEZ;;;EAGAC,EAAAA,UAAU,EAAE,IAAI;EAEhB;;;EAGAC,EAAAA,GAAG,EAAE,GAAG;EAER;;;EAGAC,EAAAA,KAAK,EAAE;EACE,CAAA;;EClDV;;;;;;;;;EASO,IAAMC,cAAc,GAAGP,YAAmC;;ECTjE;;;;;EAKO,IAAMQ,iBAAiB,GAAG;EAChC,EAKA;;;EAGAC,EAAAA,GAAG,EAAE,GAWI,CAAA;;ECzBV;;;;;;;;;EASO,IAAMC,mBAAmB,GAAGF,iBAA6C;;ECRhF;;;;;;;EAOA,IAAaG,MAAM,GAMlB,SAAAA,MAAAA,CAAYxzG,KAAU,EAAEkK,MAAqB,EAAA;EAC5C,EAAA,IAAI4V,KAAK,CAACkhB,OAAO,CAAChhC,KAAK,CAAC,EAAE;EACzBA,IAAAA,KAAK,GAAGA,KAAK,CAAC8b,GAAG,CAAC,UAACyjB,CAAC,EAAA;QAAA,OAAMA,CAAC,YAAYi0E,MAAM,GAAIj0E,CAAC,GAAG,IAAIi0E,MAAM,CAACj0E,CAAC,CAAC;MAAA,CAAA,CAAC;EACpE,EAAA;IAEA,IAAI,CAACv/B,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACkK,MAAM,GAAGA,MAAM;EACrB,CAAC;;ECvBK,IAAMupG,IAAI,GAAG,MAAM;;ECA1B,SAASztD,MAAMA,CAAChmD,KAAU,EAAA;EACzB,EAAA,IAAI8f,KAAK,CAACkhB,OAAO,CAAChhC,KAAK,CAAC,EAAE;EACzB,IAAA,OAAOgxB,IAAI,CAACD,SAAS,CAAC/wB,KAAK,CAAC;EAC7B,EAAA;IACA,IAAIA,KAAK,YAAY0zG,GAAG,EAAE;EACzB,IAAA,OAAO,OAAO;EACf,EAAA;IACA,IAAI1zG,KAAK,YAAY2zG,GAAG,EAAE;EACzB,IAAA,OAAO,OAAO;EACf,EAAA;EACA,EAAA,IAAI,OAAO3zG,KAAK,KAAK,QAAQ,EAAE;EAC9B,IAAA,OAAOgxB,IAAI,CAACD,SAAS,CAAC/wB,KAAK,CAAC;EAC7B,EAAA;IACA,OAAO8H,MAAM,CAAC9H,KAAK,CAAC;EACrB;EAEM,SAAU4zG,UAAUA,CAACltE,MAAc,EAAEw9D,GAAQ,EAAEr/F,IAAY,EAAEgvG,KAAW,EAAA;IAC7E,OAAO,IAAIlqF,KAAK,CAAA,YAAA,GAAc+c,MAAM,GAAA,KAAA,GAAKsf,MAAM,CAACk+C,GAAG,CAAC,GAAA,QAAA,GAAQr/F,IAAI,EAAI;EAAEgvG,IAAAA,KAAK,EAALA;EAAK,GAAE,CAAC;EAC/E;;EChBM,SAAUC,cAAcA,CAAC5P,GAAQ,EAAEr/F,IAAY,EAAEgvG,KAAW,EAAA;IACjE,OAAOD,UAAU,CAAC,WAAW,EAAE1P,GAAG,EAAEr/F,IAAI,EAAEgvG,KAAK,CAAC;EACjD;;ECJA;;;;;;;EAOA,IAAaE,OAAO,GAGnB,SAAAA,OAAAA,CAAY5pC,WAAmB,EAAA;IAC9B,IAAI,CAACA,WAAW,GAAGA,WAAW;EAC/B,CAAC;;ECZK,IAAM6pC,SAAS,GAAG,WAAW;;ECA7B,IAAMC,OAAO,GAAG,SAAS;;ECGhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUC,gBAAgBA,CAACl0G,KAAc,EAAA;EAC9C,EAAA,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;EAC/B,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEi0G,OAAO,CAAC;EACrC,EAAA;EACA,EAAA,OAAOj0G,KAAK,GAAG,IAAI,GAAG,IAAI;EAC3B;;ECxBA;;;;;;;;;;EAUM,SAAUm0G,YAAYA,CAACC,MAAkB,EAAA;EAC9C,EAAA,OAAOC,IAAI,CAACvsG,MAAM,CAACC,YAAY,CAAA8I,KAAA,CAAnB/I,MAAM,EAAiBssG,MAAM,CAAC,CAAC;EAC5C;;ECZO,IAAME,KAAK,GAAG,eAAe;;ECIpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUC,qBAAqBA,CAACv0G,KAAiB,EAAA;IACtD,IAAI0gB,WAAW,CAACg1B,MAAM,CAAC11C,KAAK,CAAC,KAAK,KAAK,EAAE;EACxC,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEs0G,KAAK,CAAC;EACnC,EAAA;IACA,OAAA,GAAA,GAAWH,YAAY,CAACn0G,KAAK,CAAC,GAAA,GAAA;EAC/B;;ECjCO,IAAMw0G,OAAO,GAAW,SAAS;;ECAlC,SAAUC,YAAYA,CAACz0G,KAAa,EAAA;EACzC,EAAA,OAAOA,KAAK,GAAG,gBAAgB,IAAI,eAAe,GAAGA,KAAK;EAC3D;;ECEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAU00G,gBAAgBA,CAAC10G,KAAa,EAAA;EAC7C,EAAA,IAAIy0G,YAAY,CAACz0G,KAAK,CAAC,EAAE;EACxB,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEw0G,OAAO,CAAC;EACrC,EAAA;IAEA,OAAOx0G,KAAK,CAAChB,QAAQ,EAAE;EACxB;;EC1BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAU21G,aAAaA,CAAC30G,KAAW,EAAA;IACxC,OAAA,GAAA,GAAW00G,gBAAgB,CAAC10G,KAAK,CAACV,OAAO,EAAE,GAAG,IAAI,CAAC;EACpD;;ECZA;;;;;;;;;;;;EAYM,SAAUs1G,WAAWA,CAAC50G,KAAa,EAAE60G,SAAiB,EAAA;IAC3D,IAAI70G,KAAK,GAAG,CAAC,EAAE;EACd,IAAA,OAAO,CAAC40G,WAAW,CAAC,CAAC50G,KAAK,EAAE60G,SAAS,CAAC;EACvC,EAAA;IAEA,IAAMC,YAAY,GAAGp1G,IAAI,CAACmC,GAAG,CAAC,EAAE,EAAEgzG,SAAS,CAAC;EAC5C,EAAA,IAAME,aAAa,GAAGr1G,IAAI,CAACQ,GAAG,CAAGF,KAAK,GAAG80G,YAAY,GAAI,CAAC,GAAI,GAAG,CAAC,GAAGh1G,MAAM,CAACk1G,OAAO;EAEnF,EAAA,IAAID,aAAa,EAAE;EAClB;MACA,IAAME,YAAY,GAAGv1G,IAAI,CAACE,KAAK,CAACI,KAAK,GAAG80G,YAAY,CAAC;EACrD,IAAA,OAAO,CAACG,YAAY,GAAG,CAAC,KAAK,CAAC,GAAGA,YAAY,GAAGA,YAAY,GAAG,CAAC,IAAIH,YAAY;EACjF,EAAA,CAAC,MACI;EACJ;MACA,OAAOp1G,IAAI,CAAC24B,KAAK,CAACr4B,KAAK,GAAG80G,YAAY,CAAC,GAAGA,YAAY;EACvD,EAAA;EACD;;EC7BO,IAAMI,OAAO,GAAW,SAAS;;ECIxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUC,gBAAgBA,CAACn1G,KAAa,EAAA;IAC7C,IAAMo1G,YAAY,GAAGR,WAAW,CAAC50G,KAAK,EAAE,CAAC,CAAC,CAAC;EAC3C,EAAA,IAAIN,IAAI,CAACE,KAAK,CAACF,IAAI,CAACQ,GAAG,CAACk1G,YAAY,CAAC,CAAC,CAACp2G,QAAQ,EAAE,CAAC2H,MAAM,GAAG,EAAE,EAAE;EAC9D,IAAA,MAAMmtG,cAAc,CAAC9zG,KAAK,EAAEk1G,OAAO,CAAC;EACrC,EAAA;EACA,EAAA,IAAMn3D,WAAW,GAAGq3D,YAAY,CAACp2G,QAAQ,EAAE;IAC3C,OAAO++C,WAAW,CAACs3D,QAAQ,CAAC,GAAG,CAAC,GAAGt3D,WAAW,GAAMA,WAAW,GAAA,IAAI;EACpE;;EC7CO,IAAMu3D,MAAM,GAAG,QAAQ;;ECAvB,IAAMC,YAAY,GAAW,kBAAkB;;ECItD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUC,eAAeA,CAACx1G,KAAa,EAAA;EAC5C,EAAA,IAAIu1G,YAAY,CAACp0F,IAAI,CAACnhB,KAAK,CAAC,EAAE;EAC7B,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEs1G,MAAM,CAAC;EACpC,EAAA;EAEA,EAAA,OAAA,IAAA,GAAWt1G,KAAK,CAACT,OAAO,CAAC,KAAK,EAAA,MAAQ,CAAC,CAACA,OAAO,CAAC,IAAI,EAAA,MAAO,CAAC,GAAA,IAAA;EAC7D;;EChCA;;;;;;;;;EASM,SAAUk2G,WAAWA,CAACC,MAAwB,EAAA;EACnD,EAAA,OAAOA,MAAM,CAACvrC,WAAW,IAAIurC,MAAM,CAAC12G,QAAQ,EAAE,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5D;;ECbO,IAAMy2G,KAAK,GAAG,OAAO;;ECwBtB,SAAUC,cAAcA,CAACC,KAAuB,EAAA;EACrD,EAAA,IAAM71G,KAAK,GAAGy1G,WAAW,CAACI,KAAK,CAAC;IAChC,IAAI,wCAAwC,CAAC10F,IAAI,CAACnhB,KAAK,CAAC,KAAK,KAAK,EAAE;EACnE,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAE21G,KAAK,CAAC;EACnC,EAAA;EACA,EAAA,OAAO31G,KAAK;EACb;;ECnBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAU81G,iBAAiBA,CAAC91G,KAAU,EAAA;EAC3C,EAAA,QAAQ,OAAOA,KAAK;EACnB,IAAA,KAAK,QAAQ;EACZ,MAAA,IAAI,CAACiO,cAAA,CAAgBjO,KAAK,CAAC,EAAE;EAC5B,QAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEg0G,SAAS,CAAC;EACvC,MAAA;EAEA,MAAA,IAAIl0G,MAAM,CAACi2G,SAAS,CAAC/1G,KAAK,CAAC,EAAE;UAC5B,OAAO00G,gBAAgB,CAAC10G,KAAK,CAAC;EAC/B,MAAA;QACA,OAAOm1G,gBAAgB,CAACn1G,KAAK,CAAC;EAC/B,IAAA,KAAK,QAAQ;QACZ,OAAOw1G,eAAe,CAACx1G,KAAK,CAAC;EAC9B,IAAA,KAAK,QAAQ;QACZ,OAAO41G,cAAc,CAAC51G,KAAK,CAAC;EAC7B,IAAA,KAAK,SAAS;QACb,OAAOk0G,gBAAgB,CAACl0G,KAAK,CAAC;EAC/B,IAAA,KAAK,QAAQ;QACZ,IAAIA,KAAK,YAAYX,IAAI,EAAE;UAC1B,OAAOs1G,aAAa,CAAC30G,KAAK,CAAC;EAC5B,MAAA;QACA,IAAIA,KAAK,YAAYoI,UAAU,EAAE;UAChC,OAAOmsG,qBAAqB,CAACv0G,KAAK,CAAC;EACpC,MAAA;QACA,IAAIA,KAAK,YAAY+zG,OAAO,EAAE;UAC7B,OAAO6B,cAAc,CAAC51G,KAAK,CAAC;EAC7B,MAAA;EACD,IAAA;EACC;EACA,MAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEg0G,SAAS,CAAC;EACxC;EACD;;ECrEO,IAAMd,GAAG,GAAG,KAAK;;ECGxB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAU8C,YAAYA,CAACh2G,KAAa,EAAA;IACzC,IAAI,wBAAwB,CAACmhB,IAAI,CAACnhB,KAAK,CAAC,KAAK,KAAK,EAAE;EACnD,IAAA,MAAM8zG,cAAc,CAAC9zG,KAAK,EAAEkzG,GAAG,CAAC;EACjC,EAAA;EACA,EAAA,OAAOlzG,KAAK;EACb;;ECxBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUi2G,eAAeA,CAAC/rG,MAA4B,EAAA;IAC3D,IAAIA,MAAM,IAAI,IAAI,EAAE;EACnB,IAAA,OAAO,EAAE;EACV,EAAA;IAEA,OAAO1D,MAAM,CAAC0vG,OAAO,CAAChsG,MAAM,CAAC,CAC3B4R,GAAG,CAAC,UAAAxQ,IAAA,EAAiB;MAAA,IAAfzH,GAAG,GAAAyH,IAAA,CAAA,CAAA,CAAA;EAAEtL,MAAAA,KAAK,GAAAsL,IAAA,CAAA,CAAA,CAAA;MAChB,IAAItL,KAAK,KAAK,IAAI,EAAE;EACnB,MAAA,OAAA,GAAA,GAAWg2G,YAAY,CAACnyG,GAAG,CAAC,CAAG;EAChC,IAAA;MAEA,OAAA,GAAA,GAAWmyG,YAAY,CAACnyG,GAAG,CAAC,SAAIiyG,iBAAiB,CAAC91G,KAAK,CAAC;EACzD,EAAA,CAAC,CAAC,CACD0e,IAAI,CAAC,EAAE,CAAC;EACX;;ECpCA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUy3F,aAAaA,CAACn2G,KAA0B,EAAA;IACvD,IAAIA,KAAK,YAAYwzG,MAAM,EAAE;EAC5B,IAAA,OAAA,EAAA,GAAUsC,iBAAiB,CAAC91G,KAAK,CAACA,KAAK,CAAC,GAAGi2G,eAAe,CAACj2G,KAAK,CAACkK,MAAM,CAAC;EACzE,EAAA,CAAC,MACI;MACJ,OAAO4rG,iBAAiB,CAAC91G,KAAK,CAAC;EAChC,EAAA;EACD;;ECtBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUo2G,kBAAkBA,CAACp2G,KAAkB,EAAA;EACpD,EAAA,OAAA,GAAA,GAAWA,KAAK,CAACA,KAAK,CAAC8b,GAAG,CAACq6F,aAAa,CAAC,CAACz3F,IAAI,CAAC,GAAG,CAAC,GAAA,GAAA,GAAIu3F,eAAe,CAACj2G,KAAK,CAACkK,MAAM,CAAC;EACrF;;ECnBA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACM,SAAUmsG,aAAaA,CAACl4D,IAA4C,EAAEm4D,OAAA,EAA+C;EAAA,EAAA,IAA/CA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA2B;EAAEC,MAAAA,UAAU,EAAE;OAAM;EAAA,EAAA;IAC1H,IAAI,OAAOp4D,IAAI,KAAK,QAAQ,IAAIA,IAAI,IAAI,IAAI,EAAE;EAC7C,IAAA,MAAM21D,cAAc,CAAC31D,IAAI,EAAEs1D,IAAI,CAAC;EACjC,EAAA;EAEA,EAAA,IAAMyC,OAAO,GAAG/3D,IAAI,YAAYu1D,GAAG,GAAGv1D,IAAI,CAAC+3D,OAAO,EAAE,GAAG1vG,MAAM,CAAC0vG,OAAO,CAAC/3D,IAAI,CAAC;EAC3E,EAAA,IAAMq4D,kBAAkB,GAAG,CAAAF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,MAAA,GAAA,MAAA,GAAPA,OAAO,CAAEC,UAAU,IAAG,GAAG,GAAG,EAAE;IAEzD,OAAOz2F,KAAK,CAACzX,IAAI,CAAC6tG,OAAO,CAAC,CACxBp6F,GAAG,CAAC,UAAAxQ,IAAA,EAAgB;MAAA,IAAdzH,GAAG,GAAAyH,IAAA,CAAA,CAAA,CAAA;EAAEmrG,MAAAA,IAAI,GAAAnrG,IAAA,CAAA,CAAA,CAAA;EACf,IAAA,IAAImrG,IAAI,YAAYjD,MAAM,KAAK,KAAK,EAAE;EACrCiD,MAAAA,IAAI,GAAG,IAAIjD,MAAM,CAACiD,IAAI,CAAC;EACxB,IAAA;EACA,IAAA,IAAIC,MAAM,GAAGV,YAAY,CAACnyG,GAAG,CAAC;EAC9B,IAAA,IAAI4yG,IAAI,CAACz2G,KAAK,KAAK,IAAI,EAAE;EACxB02G,MAAAA,MAAM,IAAIT,eAAe,CAACQ,IAAI,CAACvsG,MAAM,CAAC;EACvC,IAAA,CAAC,MACI;EACJwsG,MAAAA,MAAM,IAAI,GAAG;QACb,IAAI52F,KAAK,CAACkhB,OAAO,CAACy1E,IAAI,CAACz2G,KAAK,CAAC,EAAE;EAC9B02G,QAAAA,MAAM,IAAIN,kBAAkB,CAACK,IAAI,CAAC;EACnC,MAAA,CAAC,MACI;EACJC,QAAAA,MAAM,IAAIP,aAAa,CAACM,IAAI,CAAC;EAC9B,MAAA;EACD,IAAA;EACA,IAAA,OAAOC,MAAM;EACd,EAAA,CAAC,CAAC,CACDh4F,IAAI,CAAA,GAAA,GAAK83F,kBAAoB,CAAC;EACjC;;ECzEA;;;;;;;;;;;;EAYM,SAAUG,YAAYA,CAAC32G,KAA6C,EAAEs2G,OAAyB,EAAA;EACpG,EAAA,OAAOD,aAAa,CAACr2G,KAAK,EAAEs2G,OAAO,CAAC;EACrC;;ECjBA;;;;;;;EAOO,IAAMM,WAAW,GAAG,aAAa;;ECPxC;;;;;;;EAOO,IAAMC,YAAY,GAAG,cAAc;;ECP1C;;;;;;;EAOO,IAAMC,YAAY,GAAG,cAAc;;ECP1C;;;;;;;EAOO,IAAMC,WAAW,GAAG,aAAa;;ECAxC;;;;;;;EAOO,IAAMC,eAAe,GAAqC;EAChE;EACAC,EAAAA,EAAE,EAAEL,WAAW;EACfM,EAAAA,EAAE,EAAEN,WAAW;EACfxmG,EAAAA,CAAC,EAAEwmG,WAAW;EACdO,EAAAA,EAAE,EAAEP,WAAW;EACfQ,EAAAA,EAAE,EAAER,WAAW;EACfS,EAAAA,GAAG,EAAET,WAAW;EAChBtyG,EAAAA,EAAE,EAAEsyG,WAAW;EACfU,EAAAA,GAAG,EAAEV,WAAW;EAChBW,EAAAA,GAAG,EAAEX,WAAW;EAChBh4G,EAAAA,GAAG,EAAEg4G,WAAW;EAEhB;EACAY,EAAAA,EAAE,EAAEX,YAAY;EAChBY,EAAAA,EAAE,EAAEZ,YAAY;EAChBa,EAAAA,GAAG,EAAEb,YAAY;EACjBc,EAAAA,EAAE,EAAEd,YAAY;EAChBe,EAAAA,GAAG,EAAEf,YAAY;EACjBgB,EAAAA,GAAG,EAAEhB,YAAY;EACjBiB,EAAAA,GAAG,EAAEjB,YAAY;EACjBkB,EAAAA,GAAG,EAAElB,YAAY;EACjBmB,EAAAA,EAAE,EAAEnB,YAAY;EAChB9rG,EAAAA,EAAE,EAAE8rG,YAAY;EAChBoB,EAAAA,GAAG,EAAEpB,YAAY;EACjBqB,EAAAA,EAAE,EAAErB,YAAY;EAChBxzG,EAAAA,IAAI,EAAEwzG,YAAY;EAClBsB,EAAAA,KAAK,EAAEtB,YAAY;EACnBuB,EAAAA,IAAI,EAAEvB,YAAY;EAClBwB,EAAAA,KAAK,EAAExB,YAAY;EACnByB,EAAAA,KAAK,EAAEzB,YAAY;EACnB0B,EAAAA,IAAI,EAAE1B,YAAY;EAClB2B,EAAAA,EAAE,EAAE3B,YAAY;EAChB4B,EAAAA,EAAE,EAAE5B,YAAY;EAEhB;EACA6B,EAAAA,EAAE,EAAE7B,YAAY;EAEhB;EACA8B,EAAAA,GAAG,EAAE7B,YAAY;EACjB8B,EAAAA,EAAE,EAAE9B,YAAY;EAChB+B,EAAAA,EAAE,EAAE/B,YAAY;EAChBgC,EAAAA,GAAG,EAAEhC,YAAY;EACjBiC,EAAAA,EAAE,EAAEjC,YAAY;EAChBv3E,EAAAA,CAAC,EAAEu3E,YAAY;EACfkC,EAAAA,GAAG,EAAElC,YAAY;EAEjB;EACAmC,EAAAA,EAAE,EAAElC,WAAW;EACfmC,EAAAA,GAAG,EAAEnC,WAAW;EAChBoC,EAAAA,GAAG,EAAEpC,WAAW;EAChBqC,EAAAA,GAAG,EAAErC,WAAW;EAChBsC,EAAAA,EAAE,EAAEtC,WAAW;EACfuC,EAAAA,EAAE,EAAEvC,WAAW;EACfwC,EAAAA,EAAE,EAAExC,WAAW;EACfrxG,EAAAA,CAAC,EAAEqxG;EACH,CAAA;;EChED;;;;;;;;;EASO,IAAMyC,eAAe,GAAG;EAC9B,EAKA;;;EAGAC,EAAAA,OAAO,EAAE5C,YAWA,CAAA;;EC7BV,SAAS6C,eAAeA,CAACC,SAAiC,EAAA;EACzD,EAAA,OAAOnzG,MAAM,CAAChB,IAAI,CAACm0G,SAAS,CAAC,CAC3Bj/F,MAAM,CAAC,UAAC8O,GAAG,EAAEowF,KAAK,EAAI;;EACtB,IAAA,CAAAC,EAAA,GAAAF,SAAS,CAACC,KAAwB,CAAC,MAAA,IAAA,IAAAC,EAAA,KAAA,MAAA,GAAA,MAAA,GAAAA,EAAA,CAAEp0G,OAAO,CAAC,UAAA5B,GAAG,EAAA;EAAA,MAAA,OAAI2lB,GAAG,CAAC3lB,GAAG,CAAC,GAAG+1G,KAAwB;MAAA,CAAA,CAAC;EACxF,IAAA,OAAOpwF,GAAG;IACX,CAAC,EAAE,EAAsC,CAAC;EAC5C;EAEA;;;;;;;;;;;;EAYM,SAAUswF,gBAAgBA,CAACC,IAAc,EAAEC,eAAwC,EAAA;IACxF,IAAM5oG,MAAM,GAAG,EAAuC;IAEtD,IAAI,CAAC2oG,IAAI,EAAE;EACV,IAAA,OAAO3oG,MAAM;EACd,EAAA;EAEA,EAAA,IAAM5L,IAAI,GAAGgB,MAAM,CAAChB,IAAI,CAACu0G,IAAI,CAAc;IAC3C,IAAME,MAAM,GAAGD,eAAe,GAAGN,eAAe,CAACM,eAAe,CAAC,GAAG,EAAsC;IAE1G,OAAOx0G,IAAI,CAACkV,MAAM,CAAC,UAAC8O,GAAsC,EAAE3lB,GAAY,EAAI;;EAC3E,IAAA,IAAM+1G,KAAK,GAAG5C,eAAe,CAACnzG,GAAG,CAAC,IAAIo2G,MAAM,CAACp2G,GAAG,CAAC,IAAI21G,eAAe,CAACC,OAAO;EAC5E,IAAA,IAAMjtG,IAAI,GAAA,CAAAqtG,EAAA,GAAGrwF,GAAG,CAACowF,KAAK,CAAA,MAAA,IAAA,IAAAC,EAAA,KAAA,MAAA,GAAAA,EAAA,GAATrwF,GAAG,CAACowF,KAAK,IAAM,EAAE;EAC7BptG,IAAAA,IAAY,CAAC3I,GAAG,CAAC,GAAGk2G,IAAI,CAACl2G,GAAG,CAAC;EAC9B,IAAA,OAAO2lB,GAAG;IACX,CAAC,EAAEpY,MAAM,CAAC;EACX;;EC1CA;;;;;;;;;EASM,SAAU8oG,YAAYA,CAACr2G,GAAW,EAAA;EACvC,EAAA,OAAO,CACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,KAAK,CACL,CAACwxG,QAAQ,CAACxxG,GAAU,CAAC;EACvB;;ECfA;;;;;;;;;EASM,SAAUuqD,OAAOA,CAACpuD,KAAc,EAAA;EACrC,EAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC9B,OAAOiO,cAAA,CAAgBjO,KAAK,CAAC;EAC9B,EAAA;IAEA,OAAOA,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,KAAK;EACxD;;ECjBA;;;;;;;EAOO,IAAMm6G,eAAe,GAAG,OAAO;;ECPtC;;;;;;;;;;;EAWM,SAAUC,iBAAiBA,CAACx7G,GAAW,EAAE6K,IAAY,EAAA;EAC1D,EAAA,IAAMs7C,EAAE,GAAG,IAAIlmD,GAAG,CAACD,GAAG,CAAC;EACvB,EAAA,IAAMyJ,IAAI,GAAG,IAAIxJ,GAAG,CAAC4K,IAAI,CAAC;EAE1B,EAAA,IAAIs7C,EAAE,CAACs1D,MAAM,KAAKhyG,IAAI,CAACgyG,MAAM,EAAE;EAC9B,IAAA,OAAOz7G,GAAG;EACX,EAAA;EAEA,EAAA,IAAM07G,MAAM,GAAGv1D,EAAE,CAACw1D,QAAQ,CAACjyG,KAAK,CAAC,GAAG,CAAC,CAACpJ,KAAK,CAAC,CAAC,CAAC;EAC9C,EAAA,IAAMs7G,QAAQ,GAAGnyG,IAAI,CAACkyG,QAAQ,CAACjyG,KAAK,CAAC,GAAG,CAAC,CAACpJ,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEtD;IACA,OAAOo7G,MAAM,CAAC,CAAC,CAAC,KAAKE,QAAQ,CAAC,CAAC,CAAC,EAAE;MACjCF,MAAM,CAACt7F,KAAK,EAAE;MACdw7F,QAAQ,CAACx7F,KAAK,EAAE;EACjB,EAAA;EAEA;IACA,OAAOw7F,QAAQ,CAAC7zG,MAAM,EAAE;MACvB6zG,QAAQ,CAACx7F,KAAK,EAAE;EAChBs7F,IAAAA,MAAM,CAACnrD,OAAO,CAAC,IAAI,CAAC;EACrB,EAAA;EAEA,EAAA,IAAMsrD,YAAY,GAAGH,MAAM,CAAC57F,IAAI,CAAC,GAAG,CAAC;EAErC;IACA,OAAO+7F,YAAY,GAAG11D,EAAE,CAAC1kB,MAAM,GAAG0kB,EAAE,CAAC21D,IAAI;EAC1C;;EC/BA,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAI36G,KAAgB,EAAA;EAAA,EAAA,OAAKN,IAAI,CAAC24B,KAAK,CAACr4B,KAAe,CAAC;EAAA,CAAA;EAEnE,IAAM46G,UAAS,GAAG,SAAZA,SAASA,CAAI56G,KAAgB,EAAEs2G,OAA6B,EAAiD;EAClH,EAAA,IAAIx2F,KAAK,CAACkhB,OAAO,CAAChhC,KAAK,CAAC,EAAE;EACzB,IAAA,OAAOA,KAAK,CAAC8b,GAAG,CAAC,UAAA26F,IAAI,EAAA;EAAA,MAAA,OAAImE,UAAS,CAACnE,IAAI,EAAEH,OAAO,CAAW;MAAA,CAAA,CAAC;EAC7D,EAAA;IAEA,IAAIt2G,KAAK,YAAYwzG,MAAM,IAAI,OAAOxzG,KAAK,CAACA,KAAK,KAAK,QAAQ,EAAE;EAC/D,IAAA,OAAO,IAAIwzG,MAAM,CAACoH,UAAS,CAAC56G,KAAK,CAACA,KAAK,EAAEs2G,OAAO,CAAC,EAAEt2G,KAAK,CAACkK,MAAM,CAAC;EACjE,EAAA,CAAC,MACI;MACJ,IAAIosG,OAAO,CAACt1D,OAAO,EAAE;QACpBhhD,KAAK,GAAGo6G,iBAAiB,CAACp6G,KAAe,EAAEs2G,OAAO,CAACt1D,OAAO,CAAC;EAC5D,IAAA;MACA,OAAOs1D,OAAO,CAACtkG,OAAO,KAAK,CAAC,GAAGyyC,kBAAkB,CAACzkD,KAAe,CAAC,GAAIA,KAAgB;EACvF,EAAA;EACD,CAAC;EAED,IAAM66G,SAAS,GAAG,SAAZA,SAASA,CAAI76G,KAAgB,EAAA;EAAA,EAAA,OAAK26G,SAAS,CAAC36G,KAAe,GAAG,GAAG,CAAC,GAAG,GAAG;EAAA,CAAA;EAE9E,IAAM83G,GAAG,GAAG,SAANA,GAAGA,CAAI93G,KAAgB,EAAEs2G,OAA6B,EAAI;IAC/D,IAAIwE,QAAQ,GAAG96G,KAAK;EAEpB,EAAA,IAAIs2G,OAAO,CAACtkG,OAAO,IAAI,CAAC,EAAE;MACzB,IAAIhS,KAAK,YAAYwzG,MAAM,IAAI,OAAOxzG,KAAK,CAACA,KAAK,KAAK,QAAQ,EAAE;EAC/D86G,MAAAA,QAAQ,GAAG,IAAItH,MAAM,CAAC,CAACxzG,KAAK,CAAC,CAAC;EAC/B,IAAA,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACnC86G,QAAQ,GAAG,CAAC96G,KAAK,CAAC;EACnB,IAAA;EACD,EAAA;EAEA,EAAA,OAAO46G,UAAS,CAACE,QAAQ,EAAExE,OAAO,CAAC;EACpC,CAAC;EAED;;;;;;;EAOO,IAAMyE,kBAAkB,GAAkC;EAChE;;;EAGA9D,EAAAA,EAAE,EAAE0D,SAAS;EAEb;;;EAGAvqG,EAAAA,CAAC,EAAEuqG,SAAS;EAEZ;;;EAGAlD,EAAAA,EAAE,EAAEoD,SAAS;EAEb;;;EAGAlD,EAAAA,EAAE,EAAEkD,SAAS;EAEb;;;EAGAhD,EAAAA,GAAG,EAAEgD,SAAS;EAEd;;;EAGA/C,EAAAA,GAAG,EAAHA,GAAG;EAEH;;;EAGAsB,EAAAA,GAAG,EAAEyB,SAAS;EAEd;;;EAGAzD,EAAAA,EAAE,EAAEuD;EACK,CAAA;;ECzFV;;;;;;;EAOO,IAAMK,iBAAiB,GAAG,SAAS;;ECP1C;;;;;;;EAOO,IAAMC,kBAAkB,GAAG,UAAU;;ECP5C;;;;;;;EAOO,IAAMC,gBAAgB,GAAG,CAC/B,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,GAAG,CACM;;ECtCV;;;;;;;EAOO,IAAMC,eAAe,GAAG,CAC9B,GAAG,CACM;;ECPV,IAAMC,gBAAgB,GAAG,iCAAiC;EAE1D;;;;;;;;;;;EAWM,SAAUC,eAAeA,CAACx3G,GAAY,EAAA;EAC3C,EAAA,OAAOu3G,gBAAgB,CAACj6F,IAAI,CAACtd,GAAG,CAAC;EAClC;;ECZA;;;;;;;;;;;;;;EAcM,SAAUy3G,cAAcA,CAACz3G,GAAW,EAAA;EACzC,EAAA,OAAOq3G,gBAAgB,CAAC7F,QAAQ,CAACxxG,GAAU,CAAC,IAC3Cs3G,eAAe,CAAC9F,QAAQ,CAACxxG,GAAU,CAAC,IACpCw3G,eAAe,CAACx3G,GAAU,CAAC;EAC7B;;ECvBA;;;;;;;EAOO,IAAM03G,iBAAiB,GAAG,CAChC,GAAG,EACH,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,IAAI,CACK;;ECTV;;;;;;;;;;;;;;EAcM,SAAUC,gBAAgBA,CAAC33G,GAAW,EAAA;EAC3C,EAAA,OAAOq3G,gBAAgB,CAAC7F,QAAQ,CAACxxG,GAAU,CAAC,IAC3C03G,iBAAiB,CAAClG,QAAQ,CAACxxG,GAAU,CAAC,IACtCw3G,eAAe,CAACx3G,GAAU,CAAC;EAC7B;;ECvBA;;;;;;;EAOO,IAAM43G,kBAAkB,GAAG,CACjC,OAAO,EACP,OAAO,EACP,IAAI,EACJ,MAAM,EACN,MAAM,EACN,OAAO,EACP,MAAM,EACN,KAAK,CACI;;ECVV;;;;;;;;;;;;;;EAcM,SAAUC,iBAAiBA,CAAC73G,GAAW,EAAA;IAC5C,OAAOq3G,gBAAgB,CAAC7F,QAAQ,CAACxxG,GAAU,CAAC,IAC3C03G,iBAAiB,CAAClG,QAAQ,CAACxxG,GAAU,CAAC,IACtC43G,kBAAkB,CAACpG,QAAQ,CAACxxG,GAAU,CAAC,IACvCw3G,eAAe,CAACx3G,GAAU,CAAC;EAC7B;;ECzBA;;;;;;;EAOO,IAAM83G,YAAY,GAAG,CAC3B,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,GAAG,EACH,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,GAAG,CACM;;ECtBV;;;;;;;;;;;;;;EAcM,SAAUC,WAAWA,CAAC/3G,GAAW,EAAA;IACtC,OAAO83G,YAAY,CAACtG,QAAQ,CAACxxG,GAAU,CAAC,IAAIw3G,eAAe,CAACx3G,GAAU,CAAC;EACxE;;;ECJA,IAAMg4G,SAAS,IAAAC,UAAA,GAAA,EAAA,EAAAA,UAAA,CACbb,kBAAkB,CAAA,GAAGS,iBAAiB,EAAAI,UAAA,CACtC3B,eAAe,CAAA,GAAGmB,cAAc,EAAAQ,UAAA,CAChCd,iBAAiB,CAAA,GAAGQ,gBAAgB,EAAAM,UAAA,CACrC;EAED;;;;;;;;;;EAUM,SAAUC,eAAeA,CAAChyC,GAAwB,EAAEusC,OAAA,EAA+B;EAAA,EAAA,IAA/BA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA6B,EAAE;EAAA,EAAA;IACxF,IAAM7kG,OAAO,GAAa,EAAE;IAE5B,IAAIs4D,GAAG,IAAI,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;EAC3C,IAAA,OAAOt4D,OAAO;EACf,EAAA;IAEA,IAAMO,OAAO,GAAGskG,OAAO,CAACtkG,OAAO,IAAK+3D,GAAG,CAAC,GAAG,CAAY,IAAI,CAAC;EAC5D,EAAA,IAAMiyC,aAAa,GAAG1F,OAAO,CAAC0F,aAAa,IAAIhB,iBAAiB;IAChE,IAAMiB,SAAS,GAAGjqG,OAAO,KAAK,CAAC,GAAG4pG,WAAW,GAAGC,SAAS,CAACG,aAAa,CAAC;EAExE;EACA,EAAA,IAAIx2G,IAAI,GAAGgB,MAAM,CAAChB,IAAI,CAACukE,GAAG,CAAC,CAACj7C,MAAM,CAACmtF,SAAS,CAAC;EAE7C,EAAA,IAAMntF,MAAM,GAAGwnF,OAAO,CAACxnF,MAAM;EAC7B,EAAA,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;EACjCtpB,IAAAA,IAAI,GAAGA,IAAI,CAACspB,MAAM,CAACA,MAAM,CAAC;EAC3B,EAAA;EAEA;IACA,IAAMotF,cAAc,GAAGF,aAAa,KAAKf,kBAAkB,IAAIe,aAAa,KAAK7B,eAAe;IAChG,IAAI+B,cAAc,IAAI,CAAC12G,IAAI,CAAC6vG,QAAQ,CAAC,IAAI,CAAC,EAAE;EAC3C7vG,IAAAA,IAAI,CAACgL,IAAI,CAAC,IAAI,CAAC;EAChB,EAAA;IAEA,IAAIwB,OAAO,GAAG,CAAC,IAAI,CAACxM,IAAI,CAAC6vG,QAAQ,CAAC,GAAG,CAAC,EAAE;EACvC7vG,IAAAA,IAAI,CAACgL,IAAI,CAAC,GAAG,CAAC;EACf,EAAA;IAEA,IAAM2rG,UAAU,GAAGx3G,QAAA,CAAc,EAAE,EAAEo2G,kBAAkB,EAAEzE,OAAO,CAAC6F,UAAU,CAAC;EAC5E,EAAA,IAAMC,gBAAgB,GAAyB;EAC9CpqG,IAAAA,OAAO,EAAPA,OAAO;EACPgqG,IAAAA,aAAa,EAAbA,aAAa;MACbh7D,OAAO,EAAEs1D,OAAO,CAACt1D;EACjB,GAAA;IAEDx7C,IAAI,CAACq2C,IAAI,EAAE,CAACp2C,OAAO,CAAC,UAAA5B,GAAG,EAAG;EACzB,IAAA,IAAI7D,KAAK,GAAG+pE,GAAG,CAAClmE,GAAG,CAAc;EAEjC,IAAA,IAAMw4G,SAAS,GAAGF,UAAU,CAACt4G,GAAG,CAAC;EACjC,IAAA,IAAI,OAAOw4G,SAAS,KAAK,UAAU,EAAE;EACpCr8G,MAAAA,KAAK,GAAGq8G,SAAS,CAACr8G,KAAK,EAAEo8G,gBAAgB,CAAC;EAC3C,IAAA;EAEA;MACA,IAAIv4G,GAAG,KAAK,GAAG,EAAE;QAChB,IAAImO,OAAO,KAAK,CAAC,EAAE;EAClB,QAAA;EACD,MAAA,CAAC,MACI;EACJhS,QAAAA,KAAK,GAAGgS,OAAO;EAChB,MAAA;EACD,IAAA;EAEA;EACA,IAAA,IAAInO,GAAG,IAAI,IAAI,IAAI7D,KAAK,KAAK,CAAC,EAAE;EAC/B,MAAA;EACD,IAAA;EAEA;MACA,IAAIk8G,cAAc,IAAIr4G,GAAG,KAAK,IAAI,IAAI,CAACoK,cAAA,CAAgBjO,KAAK,CAAC,EAAE;EAC9DA,MAAAA,KAAK,GAAGX,IAAI,CAAC83B,GAAG,EAAE;EACnB,IAAA;EAEA;EACA,IAAA,IAAI,CAACi3B,OAAO,CAACpuD,KAAK,CAAC,EAAE;EACpB,MAAA;EACD,IAAA;MAEA,IAAIk6G,YAAY,CAACr2G,GAAG,CAAC,IAAI,OAAO7D,KAAK,KAAK,QAAQ,EAAE;EACnDA,MAAAA,KAAK,GAAG,IAAI+zG,OAAO,CAAC/zG,KAAK,CAAC;EAC3B,IAAA;EAECyR,IAAAA,OAAe,CAAC5N,GAAG,CAAC,GAAG7D,KAAK;EAC9B,EAAA,CAAC,CAAC;EAEF,EAAA,OAAOyR,OAAO;EACf;;ECtGA;;;;;;;;;;;;;;;EAeM,SAAU6qG,aAAaA,CAACvC,IAAc,EAAEzD,OAAA,EAA+B;EAAA,EAAA,IAA/BA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA6B,EAAE;EAAA,EAAA;IAC5E,IAAMllG,MAAM,GAAG,EAAqC;IAEpD,IAAI,CAAC2oG,IAAI,EAAE;EACV,IAAA,OAAO3oG,MAAM;EACd,EAAA;EAEA,EAAA,IAAM5E,IAAI,GAAGuvG,eAAe,CAAChC,IAAI,EAAEzD,OAAO,CAAC;EAC3C,EAAA,IAAMiG,MAAM,GAAGzC,gBAAgB,CAACttG,IAAI,EAAE8pG,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,MAAA,GAAA,MAAA,GAAPA,OAAO,CAAE0D,eAAe,CAAC;EAE/D,EAAA,OAAOxzG,MAAM,CAAC0vG,OAAO,CAACqG,MAAM,CAAC,CAC3B7hG,MAAM,CAAC,UAAC8O,GAAG,EAAAle,IAAA,EAAoB;MAAA,IAAjBsuG,KAAK,GAAAtuG,IAAA,CAAA,CAAA,CAAA;EAAEtL,MAAAA,KAAK,GAAAsL,IAAA,CAAA,CAAA,CAAA;EAC1B,IAAA,IAAMkxG,KAAK,GAAG7F,YAAY,CAAC32G,KAAK,EAAE;EAAEu2G,MAAAA,UAAU,EAAE;EAAK,KAAE,CAAC;EACxD,IAAA,IAAIiG,KAAK,EAAE;EACVhzF,MAAAA,GAAG,CAACowF,KAAwB,CAAC,GAAG4C,KAAK;EACtC,IAAA;EACA,IAAA,OAAOhzF,GAAG;IACX,CAAC,EAAEpY,MAAM,CAAC;EACZ;;ECpCA;;;;;;;;;;;;;;;;EAgBM,SAAUqrG,iBAAiBA,CAACvjE,OAA+B,EAAE6gE,IAAU,EAAEzD,OAA2B,EAAA;IACzG,OAAO3xG,QAAA,CAAcu0C,OAAO,EAAEojE,aAAa,CAACvC,IAAI,EAAEzD,OAAO,CAAC,CAAC;EAC5D;;ECtBA;;;;;;;EAOO,IAAMoG,UAAU,GAAG,MAAM;;ECFhC;;;;;;;;;;;;;;;EAeM,SAAUC,UAAUA,CAAC5C,IAAc,EAAEzD,OAAA,EAA+B;EAAA,EAAA,IAA/BA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA6B,EAAE;EAAA,EAAA;IACzE,IAAI,CAACyD,IAAI,EAAE;EACV,IAAA,OAAO,EAAE;EACV,EAAA;IAEA,OAAOpD,YAAY,CAACoF,eAAe,CAAChC,IAAI,EAAEzD,OAAO,CAAC,EAAE;EAAEC,IAAAA,UAAU,EAAE;EAAK,GAAE,CAAC;EAC3E;;ECtBA;;;;;;;;;;;;EAYM,SAAUqG,SAASA,CAAC7C,IAAU,EAAEzD,OAAA,EAA+B;EAAA,EAAA,IAA/BA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA6B,EAAE;EAAA,EAAA;IACpE,IAAI,CAACyD,IAAI,EAAE;EACV,IAAA,OAAO,EAAE;EACV,EAAA;EAEA,EAAA,IAAM7vG,MAAM,GAAGyyG,UAAU,CAAC5C,IAAI,EAAEzD,OAAO,CAAC;IAExC,OAAO7xD,kBAAkB,CAACv6C,MAAM,CAAC;EAClC;;ECnBA;;;;;;;;;;;;;;;EAeM,SAAU2yG,WAAWA,CAAC9C,IAAU,EAAEzD,OAAA,EAA+B;EAAA,EAAA,IAA/BA,OAAA,KAAA,MAAA,EAAA;EAAAA,IAAAA,OAAA,GAA6B,EAAE;EAAA,EAAA;IACtE,IAAI,CAACyD,IAAI,EAAE;EACV,IAAA,OAAO,EAAE;EACV,EAAA;EAEA,EAAA,IAAM/5G,KAAK,GAAG48G,SAAS,CAAC7C,IAAI,EAAEzD,OAAO,CAAC;IAEtC,OAAUoG,UAAU,SAAI18G,KAAK;EAC9B;;ECxBA,IAAM88G,KAAK,GAAG,aAAa;EAE3B;;;;;;;;;;;;;;;;EAgBM,SAAUC,eAAeA,CAACn+G,GAAW,EAAEm7G,IAAU,EAAEzD,OAA2B,EAAA;EACnF;EACA;EAEA,EAAA,IAAM0G,KAAK,GAAGH,WAAW,CAAC9C,IAAI,EAAEzD,OAAO,CAAC;IACxC,IAAI,CAAC0G,KAAK,EAAE;EACX,IAAA,OAAOp+G,GAAG;EACX,EAAA;EAEA,EAAA,IAAIk+G,KAAK,CAAC37F,IAAI,CAACviB,GAAG,CAAC,EAAE;EACpB,IAAA,OAAOA,GAAG,CAACW,OAAO,CAACu9G,KAAK,EAAEE,KAAK,CAAC;EACjC,EAAA;IAEA,IAAMC,SAAS,GAAGr+G,GAAG,CAACy2G,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;EAC/C,EAAA,OAAA,EAAA,GAAUz2G,GAAG,GAAGq+G,SAAS,GAAGD,KAAK;EAClC;;ECVA;EACA;EACA;EACA;EAHA,IAIqBE,cAAc,gBAAA,YAAA;IAcjC,SAAAA,cAAAA,CAAYnnF,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA,GAAA,IAAA;EAAA,IAAA,IAAA,CAbd6qB,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHrJ,MAAM,GAAA,MAAA;EAAA,IAAA,IAAA,CACNuD,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACL6oF,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHH,GAAG,GAAA,MAAA;MAAA,IAAA,CACHwE,UAAU,GAAY,KAAK;EAAA,IAAA,IAAA,CAC3BC,WAAW,GAAA,MAAA;MAAA,IAAA,CACXC,WAAW,GAAY,KAAK;MAAA,IAAA,CAC5BC,OAAO,GAAY,KAAK;MAAA,IAAA,CACxBl0G,SAAS,GAAY,IAAI;EAAA,IAAA,IAAA,CACzBm0G,WAAW,GAAA,MAAA;EAAA,IAAA,IAAA,CACXC,WAAW,GAAA,MAAA;MAAA,IAAA,CAwEXC,SAAS,GAAG,YAAM;QACxB,IAAIvyG,KAAI,CAACmyG,WAAW,EAAE;UACpBnyG,KAAI,CAACoyG,OAAO,GAAG,IAAI;EACrB,MAAA;QAEApyG,KAAI,CAAC9B,SAAS,GAAG,IAAI;MACvB,CAAC;MAAA,IAAA,CAEOs0G,SAAS,GAAG,YAAM;EACxB,MAAA,IAAI,CAACxyG,KAAI,CAACmyG,WAAW,EAAE;UACrBnyG,KAAI,CAACmyG,WAAW,GAAG,IAAI;EACzB,MAAA;QAEAnyG,KAAI,CAAC9B,SAAS,GAAG,KAAK;MACxB,CAAC;EA6DD;EACF;EACA;EAFE,IAAA,IAAA,CAGQu0G,iBAAiB,GAAG,UAACr4G,OAA8B,EAAK;QAC9D,IAAI;EACF4F,QAAAA,KAAI,CAAC2F,KAAK,CAACvL,OAAO,EAAE;YAClB6xG,EAAE,EAAE/D,cAAc,CAAC5yG,QAAQ;YAC3B03G,EAAE,EAAE,CAAChtG,KAAI,CAACmyG;EACZ,SAAC,CAAC;QACJ,CAAC,CAAC,OAAO1+G,KAAK,EAAE;UACduM,KAAI,CAAC6qB,GAAG,CAAC9xB,MAAM,CAACG,IAAI,CAAC,wCAAwC,EAAEzF,KAAK,CAAC;EACvE,MAAA;MACF,CAAC;EAED;EACF;EACA;EAFE,IAAA,IAAA,CAGQi/G,iBAAiB,GAAG,UAACt4G,OAA8B,EAAK;QAC9D,IAAI;EACF,QAAA,IAAQwF,IAAI,GAAWxF,OAAO,CAAtBwF,IAAI;YAAE6iB,IAAI,GAAKroB,OAAO,CAAhBqoB,IAAI;UAClB,IAAM7hB,KAAK,GAAGZ,KAAI,CAAC6qB,GAAG,CAACxC,MAAM,CAACzoB,IAAI,CAACgB,KAAK,CAAC;EACzC,QAAA,IAAMqrG,EAAE,GAAGjsG,KAAI,CAAC2yG,aAAa,CAAC/yG,IAAI,CAAC;EACnC,QAAA,IAAM0B,IAAU,GAAG;YAAE4D,CAAC,EAAE,CAACud,IAAI,IAAI7iB,IAAI,EAAEY,QAAQ,GAAG,IAAI;EAAEyrG,UAAAA,EAAE,EAAFA;WAAI;EAE5D,QAAA,IACEA,EAAE,KAAK/D,cAAc,CAAC9pG,KAAK,IAC3B6tG,EAAE,KAAK/D,cAAc,CAACtyG,KAAK,IAC3Bq2G,EAAE,IAAI/D,cAAc,CAACN,KAAK,EAC1B;EACAtmG,UAAAA,IAAI,CAACyqG,EAAE,GAAGnrG,KAAK,CAACke,OAAO,GAAG,IAAI;YAC9Bxd,IAAI,CAAC4qG,EAAE,GAAGlsG,KAAI,CAAC4yG,eAAe,CAAC3G,EAAE,CAAC,GAAG,IAAI;YACzC3qG,IAAI,CAACirG,EAAE,GAAGvsG,KAAI,CAAC6yG,eAAe,CAAC5G,EAAE,CAAC;EACpC,QAAA;EAEA,QAAA,IAAM6G,IAAI,GAAGrwF,IAAI,GAAGziB,KAAI,CAACszD,WAAW,CAAC7wC,IAAI,CAAC,GAAGziB,KAAI,CAAC+yG,WAAW,CAACnzG,IAAI,CAAC;EAEnE,QAAA,IAAIkzG,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAEp/G,GAAG,IAAIo/G,IAAI,CAACp/G,GAAG,KAAKkM,IAAI,CAAClM,GAAG,EAAE;EACtC4N,UAAAA,IAAI,CAACsrG,GAAG,GAAGkG,IAAI,CAACp/G,GAAG;EACrB,QAAA;EAEAsM,QAAAA,KAAI,CAAC2F,KAAK,CAACvL,OAAO,EAAEkH,IAAI,CAAC;QAC3B,CAAC,CAAC,OAAO7N,KAAK,EAAE;UACduM,KAAI,CAAC6qB,GAAG,CAAC9xB,MAAM,CAACG,IAAI,CAAC,uCAAuC,EAAEzF,KAAK,CAAC;EACtE,MAAA;MACF,CAAC;MA5LC,IAAI,CAACo3B,GAAG,GAAGA,GAAG;MACd,IAAMrJ,MAAM,GAAI,IAAI,CAACA,MAAM,GAAGqJ,GAAG,CAACrJ,MAAO;EACzC,IAAA,IAAQqtF,IAAI,GAAKrtF,MAAM,CAAfqtF,IAAI;MAEZ,IAAIA,IAAI,IAAI,IAAI,EAAE;EAChBrtF,MAAAA,MAAM,CAACwxF,OAAO,GAAG,IAAI,CAACC,oBAAoB,EAAE;EAC5CzxF,MAAAA,MAAM,CAACqqB,OAAO,GAAG,IAAI,CAACqnE,oBAAoB,EAAE;QAE5C,IAAI,CAACtF,GAAG,GAAGiB,IAAI,CAACsE,SAAS,IAAItoF,GAAG,CAACsoF,SAAS;EAC1C,MAAA,IAAI,CAAC1F,GAAG,GAAGoB,IAAI,CAACuE,SAAS;EACzB,MAAA,IAAI,CAACnB,UAAU,GAAGpD,IAAI,CAACoD,UAAU,KAAK,IAAI;EAC1C,MAAA,IAAI,CAACC,WAAW,GAAGrD,IAAI,CAACqD,WAAW;QACnC,IAAI,CAACjjF,iBAAiB,EAAE;EAC1B,IAAA;EACF,EAAA;EAAC,EAAA,IAAA14B,MAAA,GAAAy7G,cAAA,CAAAx7G,SAAA;EAAAD,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAMpE,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD9jC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACmlG,cAAc,EAAE,IAAI,CAAC8Y,eAAe,EAAE,IAAI,CAAC;EACzDxoF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACo3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;IAC3D,CAAC;EAAAl2F,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAM3F,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D9jC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACmlG,cAAc,EAAE,IAAI,CAAC8Y,eAAe,EAAE,IAAI,CAAC;EAC1DxoF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACo3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;IAC5D,CAAC;EAAAl2F,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAAC+3B,mBAAmB,EAAE;MAC1B,IAAI,CAAC6iF,eAAe,EAAE;;EAEtB;EACA,IAAA,IAAI,CAACxoF,GAAG,GAAG,IAAI,CAACrJ,MAAM,GAAG,IAAI,CAAC6wF,WAAW,GAAG,IAAI,CAACC,WAAW,GAAG,IAAI;EACnE;MACA,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,SAAS,GAAG,IAAI,CAACztF,KAAK,GAAG,IAAI;IACrD,CAAC;IAAAxuB,MAAA,CAEOo4D,eAAe,GAAvB,SAAQA,eAAeA,CACrBj+B,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAI,CAACyjB,KAAK,GAAGzjB,IAAI,CAACyjB,KAAK;MACvB,IAAI,CAACA,KAAK,CAAC6mC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC2mD,SAAS,CAAC;MACtD,IAAI,CAACxtF,KAAK,CAAC6mC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC4mD,SAAS,CAAC;IACxD,CAAC;EAAAj8G,EAAAA,MAAA,CAEO88G,eAAe,GAAvB,SAAQA,eAAeA,GAAG;EACxB,IAAA,IAAI,CAAC,IAAI,CAACtuF,KAAK,EAAE;EACf,MAAA;EACF,IAAA;MAEA,IAAI,CAACA,KAAK,CAAC+mC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACymD,SAAS,CAAC;MACzD,IAAI,CAACxtF,KAAK,CAAC+mC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC0mD,SAAS,CAAC;;EAEzD;MACA,IAAI,CAACztF,KAAK,GAAG,IAAI;IACnB,CAAC;IAAAxuB,MAAA,CAEOk2F,eAAe,GAAvB,SAAQA,eAAeA,CACrB/7D,KAA4B,EAC5BpvB,IAAuB,EACvB;MAAA,IAAAgyG,kBAAA,EAAAC,kBAAA;EACA,IAAA,IAAI,CAAClB,WAAW,GAAA,CAAAiB,kBAAA,GAAGhyG,IAAI,CAACgM,MAAM,CAAC7I,KAAK,KAAA,IAAA,GAAA,MAAA,GAAjB6uG,kBAAA,CAAmBj2G,MAAM;EAC5C,IAAA,IAAI,CAACi1G,WAAW,GAAA,CAAAiB,kBAAA,GAAGjyG,IAAI,CAACgM,MAAM,CAAC5I,KAAK,KAAA,IAAA,GAAA,MAAA,GAAjB6uG,kBAAA,CAAmBl2G,MAAM;IAC9C,CAAC;EAkBD;EACF;EACA;EAFE9G,EAAAA,MAAA,CAGQi9G,UAAU,GAAlB,SAAQA,UAAUA,GAAS;EAAA,IAAA,IAAAz+C,WAAA;MACzB,OAAO;EACL1gC,MAAAA,CAAC,EAAE,CAAC;QACJs5E,EAAE,EAAEtF,mBAAmB,CAACD,GAAG;QAC3BwF,GAAG,EAAE,IAAI,CAACA,GAAG;QACbH,GAAG,EAAE,IAAI,CAACA,GAAG;QACbC,EAAE,EAAA,CAAA34C,WAAA,GAAE,IAAI,CAAChwC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAVgwC,WAAA,CAAYroC,YAAY;EAC5BigF,MAAAA,GAAG,EAAE,IAAI,CAAC9hF,GAAG,CAAC4oF,iBAAiB,GAAG;OACnC;EACH,EAAA;;EAEA;EACF;EACA;IAFEl9G,MAAA,CAGQoP,KAAK,GAAb,SAAQA,KAAKA,CAACvL,OAAsB,EAAEkH,IAAU,EAAO;EAAA,IAAA,IAAjBA,IAAU,KAAA,MAAA,EAAA;QAAVA,IAAU,GAAG,EAAE;EAAA,IAAA;EACnD;MACA7H,QAAA,CAAc6H,IAAI,EAAE,IAAI,CAACkyG,UAAU,EAAE,CAAC;MAEtC,IAAME,OAAO,GACXpyG,IAAI,CAAC2qG,EAAE,KAAK/D,cAAc,CAACL,IAAI,IAC/BvmG,IAAI,CAAC2qG,EAAE,KAAK/D,cAAc,CAAC9pG,KAAK,IAChCkD,IAAI,CAAC2qG,EAAE,KAAK/D,cAAc,CAACN,KAAK;EAElC,IAAA,IAAI,IAAI,CAACwK,OAAO,IAAIsB,OAAO,EAAE;QAC3BpyG,IAAI,CAACysG,EAAE,GAAG,IAAI;QACdzsG,IAAI,CAAC0rG,EAAE,GAAG,IAAI;QACd,IAAI,CAACoF,OAAO,GAAG,KAAK;EACtB,IAAA;EAEA,IAAA,IAAI9wG,IAAI,CAAC0rG,EAAE,IAAI,IAAI,EAAE;EACnB1rG,MAAAA,IAAI,CAAC0rG,EAAE,GAAG,IAAI,CAAC9uG,SAAS;EAC1B,IAAA;;EAEA;;EAEA,IAAA,IAAQg0G,WAAW,GAAK,IAAI,CAApBA,WAAW;EACnB,IAAA,IAAIA,WAAW,EAAE;EACf5wG,MAAAA,IAAI,GAAGhG,MAAM,CAAChB,IAAI,CAACgH,IAAI,CAAC,CAACkO,MAAM,CAAC,UAAC8O,GAAG,EAAE3lB,GAAG,EAAK;EAC5Cu5G,QAAAA,WAAW,CAAC/H,QAAQ,CAACxxG,GAAG,CAAC,KAAK2lB,GAAG,CAAC3lB,GAAG,CAAC,GAAG2I,IAAI,CAAC3I,GAAG,CAAC,CAAC;EACnD,QAAA,OAAO2lB,GAAG;QACZ,CAAC,EAAE,EAAE,CAAC;EACR,IAAA;EAEA,IAAA,IAAM8sF,OAA0B,GAAG;QAAEt1D,OAAO,EAAE17C,OAAO,CAAC1G;OAAK;MAE3D,IAAI,IAAI,CAACu+G,UAAU,EAAE;EACnB,MAAA,IAAI,CAAC73G,OAAO,CAAC4zC,OAAO,EAAE;EACpB5zC,QAAAA,OAAO,CAAC4zC,OAAO,GAAG,EAAE;EACtB,MAAA;QAEAujE,iBAAiB,CAACn3G,OAAO,CAAC4zC,OAAO,EAAE1sC,IAAI,EAAE8pG,OAAO,CAAC;EACnD,IAAA,CAAC,MAAM;EACLhxG,MAAAA,OAAO,CAAC1G,GAAG,GAAGm+G,eAAe,CAACz3G,OAAO,CAAC1G,GAAG,EAAE4N,IAAI,EAAE8pG,OAAO,CAAC;EAC3D,IAAA;IACF,CAAC;EAAA70G,EAAAA,MAAA,CAgDOw8G,WAAW,GAAnB,SAAQA,WAAWA,CAAC1uG,QAAkB,EAAwB;EAAA,IAAA,IAAAsvG,qBAAA;EAC5D,IAAA,IAAM9/E,YAAY,GAAA,CAAA8/E,qBAAA,GAAG,IAAI,CAAC9oF,GAAG,CAACxC,MAAM,CAAChkB,QAAQ,CAACzD,KAAK,CAAC,KAAA,IAAA,GAAA,MAAA,GAA/B+yG,qBAAA,CAAiCzxF,OAAO;EAC7D,IAAA,IAAI2R,YAAY,EAAE;QAChB,IAAM5vB,KAAK,GAAII,QAAQ,CAACxE,EAAE,GAAcg0B,YAAY,CAAC6iB,OAAO;EAC5D,MAAA,OAAO7iB,YAAY,CAAC8B,SAAS,CAAC1xB,KAAK,GAAG,CAAC,CAAC;EAC1C,IAAA;EAEA,IAAA,OAAOtJ,SAAS;IAClB,CAAC;EAAApE,EAAAA,MAAA,CAEO+8D,WAAW,GAAnB,SAAQA,WAAWA,CAAC7wC,IAAU,EAAoB;EAAA,IAAA,IAAAmxF,sBAAA;EAChD,IAAA,IAAQ3vG,KAAK,GAAewe,IAAI,CAAxBxe,KAAK;QAAEI,QAAQ,GAAKoe,IAAI,CAAjBpe,QAAQ;MACvB,IAAM0/B,QAAQ,IAAA6vE,sBAAA,GAAG,IAAI,CAAC/oF,GAAG,CAACxC,MAAM,CAAChkB,QAAQ,CAACzD,KAAK,CAAC,KAAA,IAAA,IAAA,CAAAgzG,sBAAA,GAA/BA,sBAAA,CAAiC1xF,OAAO,KAAA,IAAA,GAAA,MAAA,GAAxC0xF,sBAAA,CAA0C7vE,QAAQ;EAEnE,IAAA,IAAIA,QAAQ,EAAE;EACZ,MAAA,IAAQlkC,EAAE,GAAKwE,QAAQ,CAAfxE,EAAE;EACV,MAAA,KAAK,IAAIlD,CAAC,GAAGonC,QAAQ,CAACtoC,MAAM,GAAG,CAAC,EAAEkB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC7C,QAAA,IAAMg3D,CAAC,GAAG5vB,QAAQ,CAACpnC,CAAC,CAAC;EACrB,QAAA,IAAIg3D,CAAC,CAAC1vD,KAAK,KAAKA,KAAK,IAAI0vD,CAAC,CAACtvD,QAAQ,CAACxE,EAAE,KAAKA,EAAE,EAAE;EAC7C,UAAA,OAAOkkC,QAAQ,CAACpnC,CAAC,GAAG,CAAC,CAAC;EACxB,QAAA;EACF,MAAA;EACF,IAAA;EAEA,IAAA,OAAOhC,SAAS;EAClB,EAAA;;EAEA;EACF;EACA;EAFEpE,EAAAA,MAAA,CAGQo8G,aAAa,GAArB,SAAQA,aAAaA,CAACtuG,QAAkB,EAA8B;EACpE,IAAA,IAAQ1K,IAAI,GAAK0K,QAAQ,CAAjB1K,IAAI;MAEZ,IAAIA,IAAI,KAAK,UAAU,EAAE;QACvB,OAAOuuG,cAAc,CAACH,UAAU;EAClC,IAAA;EAEA,IAAA,IAAI1jG,QAAQ,CAACxE,EAAE,KAAK,aAAa,EAAE;QACjC,OAAOqoG,cAAc,CAACL,IAAI;EAC5B,IAAA;MAEA,IAAIluG,IAAI,KAAK,OAAO,EAAE;QACpB,OAAOuuG,cAAc,CAACtyG,KAAK;EAC7B,IAAA;MAEA,IAAI+D,IAAI,KAAK,MAAM,EAAE;QACnB,IAAI,CAAC,IAAI,CAACkxB,GAAG,CAACgQ,WAAW,CAACp/B,MAAM,EAAE;UAChC,OAAOysG,cAAc,CAACN,KAAK;EAC7B,MAAA;QAEA,OAAOM,cAAc,CAAC9pG,KAAK;EAC7B,IAAA;EAEA,IAAA,OAAOzD,SAAS;EAClB,EAAA;;EAEA;EACF;EACA;EAFEpE,EAAAA,MAAA,CAGQq8G,eAAe,GAAvB,SAAQA,eAAeA,CAACj5G,IAAoB,EAAE;MAC5C,IAAImlB,OAAe,GAAG,CAAC;EACvB,IAAA,IAAIuJ,MAAM;EACV,IAAA,IAAMwC,GAAG,GAAG,IAAI,CAACA,GAAG;EAEpB,IAAA,IAAIlxB,IAAI,KAAKuuG,cAAc,CAACtyG,KAAK,EAAE;QACjCyyB,MAAM,GAAGwC,GAAG,CAACgQ,WAAW;EAC1B,IAAA,CAAC,MAAM;EACL,MAAA,IAAM/iC,GAAG,GAAG+yB,GAAG,CAACtC,YAAY;EAC5B,MAAA,IAAMhsB,GAAG,GAAGzE,GAAG,GAAG,EAAE,GAAGA,GAAG,GAAG,CAAC,GAAG+yB,GAAG,CAACxC,MAAM,CAAC5sB,MAAM;QAClD4sB,MAAM,GAAGwC,GAAG,CAACxC,MAAM,CAACr0B,KAAK,CAAC,CAAC,EAAEuI,GAAG,CAAC;EACnC,IAAA;EAEA8rB,IAAAA,MAAM,CAAC9tB,OAAO,CAAC,UAACqG,KAAK,EAAK;EACxB,MAAA,IAAIA,KAAK,CAACke,OAAO,GAAGA,OAAO,EAAE;UAC3BA,OAAO,GAAGle,KAAK,CAACke,OAAO;EACzB,MAAA;EACF,IAAA,CAAC,CAAC;EAEF,IAAA,OAAOA,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAGpR,GAAG;EACpC,EAAA;;EAEA;EACF;EACA;EAFEnX,EAAAA,MAAA,CAGQs8G,eAAe,GAAvB,SAAQA,eAAeA,CAACl5G,IAAoB,EAAE;EAC5C,IAAA,IAAMorB,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAM1nB,MAAM,GACV1D,IAAI,KAAKuuG,cAAc,CAACtyG,KAAK,GAAG,IAAI,CAACy8G,WAAW,GAAG,IAAI,CAACC,WAAW;EAErE,IAAA,IAAI,CAACj1G,MAAM,IAAI,CAAC0nB,KAAK,EAAE;EACrB,MAAA,OAAOrX,GAAG;EACZ,IAAA;EAEA,IAAA,IAAMvU,IAAI,GAAGg3C,YAAY,CAACvjB,UAAU,CAClCvvB,MAAM,EACN0nB,KAAK,CAAC+oC,WAAW,EACjB,IAAI,CAACtsC,MAAM,CAACusC,aACd,CAAC;EAED,IAAA,OAAO50D,IAAI,CAACoD,GAAG,GAAG,IAAI;EACxB,EAAA;;EAEA;EACF;EACA;EAFEhG,EAAAA,MAAA,CAGQ08G,oBAAoB,GAA5B,SAAQA,oBAAoBA,GAA0C;EACpE,IAAA,IAAQD,OAAO,GAAK,IAAI,CAACxxF,MAAM,CAAvBwxF,OAAO;EACf,IAAA,IAAMrtG,KAAK,GAAG,IAAI,CAAC8sG,iBAAiB;MACpC,IAAMoB,IAAI,GAAGb,OAAO,IAAK,IAAI,CAACxxF,MAAM,CAAC9gB,MAAoC;EAEzE,IAAA,oBAAA,YAAA;QAGE,SAAAozG,kBAAAA,CAAYtyF,MAAiB,EAAE;EAAA,QAAA,IAAA,CAFvB9gB,MAAM,GAAA,MAAA;EAGZ,QAAA,IAAI,CAACA,MAAM,GAAG,IAAImzG,IAAI,CAACryF,MAAM,CAAC;EAChC,MAAA;EAAC,MAAA,IAAA1f,OAAA,GAAAgyG,kBAAA,CAAAt9G,SAAA;EAAAsL,MAAAA,OAAA,CAUDrJ,OAAO,GAAP,SAAAA,OAAOA,GAAG;EACR,QAAA,IAAI,CAACiI,MAAM,CAACjI,OAAO,EAAE;QACvB,CAAC;EAAAqJ,MAAAA,OAAA,CAEDY,KAAK,GAAL,SAAAA,KAAKA,GAAG;EACN,QAAA,IAAI,CAAChC,MAAM,CAACgC,KAAK,EAAE;QACrB,CAAC;QAAAZ,OAAA,CAEDypC,IAAI,GAAJ,SAAAA,IAAIA,CACFnxC,OAA8B,EAC9BonB,MAA2B,EAC3BkrB,SAAiD,EACjD;UACA/mC,KAAK,CAACvL,OAAO,CAAC;UACd,IAAI,CAACsG,MAAM,CAAC6qC,IAAI,CAACnxC,OAAO,EAAEonB,MAAM,EAAEkrB,SAAS,CAAC;QAC9C,CAAC;QAAA,OAAAh0C,YAAA,CAAAo7G,kBAAA,EAAA,CAAA;UAAAn7G,GAAA,EAAA,OAAA;UAAAC,GAAA,EAvBD,SAAAA,GAAAA,GAAY;EACV,UAAA,OAAO,IAAI,CAAC8H,MAAM,CAACoC,KAAK;EAC1B,QAAA;EAAC,OAAA,EAAA;UAAAnK,GAAA,EAAA,SAAA;UAAAC,GAAA,EAED,SAAAA,GAAAA,GAAc;EACZ,UAAA,OAAO,IAAI,CAAC8H,MAAM,CAACtG,OAAO;EAC5B,QAAA;EAAC,OAAA,CAAA,CAAA;EAAA,IAAA,CAAA,EAAA;EAmBL,EAAA;;EAEA;EACF;EACA;EAFE7D,EAAAA,MAAA,CAGQ28G,oBAAoB,GAA5B,SAAQA,oBAAoBA,GAA0C;EACpE,IAAA,IAAQrnE,OAAO,GAAK,IAAI,CAACrqB,MAAM,CAAvBqqB,OAAO;EACf,IAAA,IAAMlmC,KAAK,GAAG,IAAI,CAAC+sG,iBAAiB;MACpC,IAAMmB,IAAI,GAAGhoE,OAAO,IAAK,IAAI,CAACrqB,MAAM,CAAC9gB,MAAoC;EAEzE,IAAA,oBAAA,YAAA;QAGE,SAAAqzG,kBAAAA,CAAYvyF,MAAiB,EAAE;EAAA,QAAA,IAAA,CAFvB9gB,MAAM,GAAA,MAAA;EAGZ,QAAA,IAAI,CAACA,MAAM,GAAG,IAAImzG,IAAI,CAACryF,MAAM,CAAC;EAChC,MAAA;EAAC,MAAA,IAAAwyF,OAAA,GAAAD,kBAAA,CAAAv9G,SAAA;EAAAw9G,MAAAA,OAAA,CAUDv7G,OAAO,GAAP,SAAAA,OAAOA,GAAG;EACR,QAAA,IAAI,CAACiI,MAAM,CAACjI,OAAO,EAAE;QACvB,CAAC;EAAAu7G,MAAAA,OAAA,CAEDtxG,KAAK,GAAL,SAAAA,KAAKA,GAAG;EACN,QAAA,IAAI,CAAChC,MAAM,CAACgC,KAAK,EAAE;QACrB,CAAC;QAAAsxG,OAAA,CAEDzoE,IAAI,GAAJ,SAAAA,IAAIA,CACFnxC,OAA8B,EAC9BonB,MAA2B,EAC3BkrB,SAAiD,EACjD;UACA/mC,KAAK,CAACvL,OAAO,CAAC;UACd,IAAI,CAACsG,MAAM,CAAC6qC,IAAI,CAACnxC,OAAO,EAAEonB,MAAM,EAAEkrB,SAAS,CAAC;QAC9C,CAAC;QAAA,OAAAh0C,YAAA,CAAAq7G,kBAAA,EAAA,CAAA;UAAAp7G,GAAA,EAAA,OAAA;UAAAC,GAAA,EAvBD,SAAAA,GAAAA,GAAY;EACV,UAAA,OAAO,IAAI,CAAC8H,MAAM,CAACoC,KAAK;EAC1B,QAAA;EAAC,OAAA,EAAA;UAAAnK,GAAA,EAAA,SAAA;UAAAC,GAAA,EAED,SAAAA,GAAAA,GAAc;EACZ,UAAA,OAAO,IAAI,CAAC8H,MAAM,CAACtG,OAAO;EAC5B,QAAA;EAAC,OAAA,CAAA,CAAA;EAAA,IAAA,CAAA,EAAA;IAmBL,CAAC;EAAA,EAAA,OAAA43G,cAAA;EAAA,CAAA,EAAA;;ECnXH,IAAMiC,2BAA2B,GAAG,MAAM;EAAC,IAEtBC,yBAAyB,0BAAAjpF,OAAA,EAAA;IAmB5C,SAAAipF,yBAAAA,CAAYrpF,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,kBAAkB,EAAE4qB,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAhBvB6qB,GAAG,GAAA,MAAA;MAAA7qB,KAAA,CACZU,MAAM,GAAiC,IAAI;MAAAV,KAAA,CAC3C4iB,GAAG,GAAkB,IAAI;MAAA5iB,KAAA,CACzB4gD,SAAS,GAAW,GAAG;MAAA5gD,KAAA,CACvBm0G,gBAAgB,GAAoB,IAAI;MAAAn0G,KAAA,CACxCo0G,UAAU,GAAW,GAAG;EAAAp0G,IAAAA,KAAA,CACxBq0G,WAAW,GAAW,EAAE;MAAAr0G,KAAA,CACxBu2C,OAAO,GAAW,CAAC;MAAAv2C,KAAA,CACnBs0G,OAAO,GAAY,KAAK;MAAAt0G,KAAA,CACxBmT,OAAO,GAAY,IAAI;MAAAnT,KAAA,CACvBqoB,MAAM,GAAmB,IAAI;MAAAroB,KAAA,CAC7B66B,WAAW,GAA2B,IAAI;MAAA76B,KAAA,CAC1Cu0G,cAAc,GAA2B,IAAI;EAAAv0G,IAAAA,KAAA,CAC7Cw0G,iBAAiB,GAAoC,EAAE;MAI7Dx0G,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;MACd7qB,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAqyG,yBAAA,EAAAjpF,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAA29G,yBAAA,CAAA19G,SAAA;EAAAD,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAMpE,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DlkC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DjoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAC;EAAAh6B,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAM3F,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACA,GAAG,EAAE;EACR,MAAA;EACF,IAAA;EACAA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DlkC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DjoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC3C,CAAC;EAAAh6B,EAAAA,MAAA,CAEDk+G,QAAQ,GAAR,SAAAA,QAAQA,GAAG;EACT,IAAA,OAAO,CAAC,IAAI,CAACpsF,MAAM,IAAI,EAAE,EAAE7Y,MAAM,CAAC,UAACilG,QAAQ,EAAE7zG,KAAK,EAAK;QACrD,IAAI6zG,QAAQ,CAAC54G,OAAO,CAAC+E,KAAK,CAACggD,SAAS,CAAC,KAAK,EAAE,EAAE;EAC5C6zD,QAAAA,QAAQ,CAACnvG,IAAI,CAAC1E,KAAK,CAACggD,SAAS,CAAC;EAChC,MAAA;EACA,MAAA,OAAO6zD,QAAQ;MACjB,CAAC,EAAE,EAAc,CAAC;IACpB,CAAC;EAAAl+G,EAAAA,MAAA,CAUD4jC,SAAS,GAAT,SAAAA,SAASA,GAAG;MACV,IAAI,CAACm6E,OAAO,GAAG,IAAI;MACnB,IAAI,CAACzmE,YAAY,EAAE;EACnB,IAAA,IAAI,IAAI,CAAC16B,OAAO,IAAI,IAAI,CAACyP,GAAG,EAAE;QAC5B,IAAI,IAAI,CAAC2zB,OAAO,EAAE;EAChB,QAAA,IAAMm+D,GAAG,GAAG,IAAI,CAACN,UAAU,GAAG,IAAI,IAAIloF,WAAW,CAACD,GAAG,EAAE,GAAG,IAAI,CAACsqB,OAAO,CAAC;UACvE,IAAIm+D,GAAG,GAAG,CAAC,EAAE;YACX,IAAI,CAACC,eAAe,CAAC,IAAI,CAAC/xF,GAAG,EAAE8xF,GAAG,CAAC;EACnC,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAACE,oBAAoB,CAAC,IAAI,CAAChyF,GAAG,CAAC;EACrC,IAAA;IACF,CAAC;EAAArsB,EAAAA,MAAA,CAED8jC,QAAQ,GAAR,SAAAA,QAAQA,GAAG;MACT,IAAI,CAACi6E,OAAO,GAAG,KAAK;MACpB,IAAI,IAAI,CAAC5zG,MAAM,EAAE;EACf,MAAA,IAAI,CAACA,MAAM,CAACjI,OAAO,EAAE;QACrB,IAAI,CAACiI,MAAM,GAAG,IAAI;EACpB,IAAA;MACA,IAAI,CAACmtC,YAAY,EAAE;IACrB,CAAC;EAAAt3C,EAAAA,MAAA,CAEDs3C,YAAY,GAAZ,SAAAA,YAAYA,GAAG;EACb,IAAA,IAAI,IAAI,CAACwmE,WAAW,KAAK,EAAE,EAAE;EAC3Bv6G,MAAAA,IAAI,CAAC+zC,YAAY,CAAC,IAAI,CAACwmE,WAAW,CAAC;EACnC,MAAA,IAAI,CAACA,WAAW,GAAG,EAAE;EACvB,IAAA;IACF,CAAC;EAAA99G,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAAC+3B,mBAAmB,EAAE;MAC1B,IAAI,CAAC6J,QAAQ,EAAE;EACf;MACA,IAAI,CAACxP,GAAG,GAAG,IAAI;MACf,IAAI,CAACxC,MAAM,GAAG,IAAI,CAACwS,WAAW,GAAG,IAAI,CAAC05E,cAAc,GAAG,IAAI;IAC7D,CAAC;EAAAh+G,EAAAA,MAAA,CAEDq9B,WAAW,GAAX,SAAAA,WAAWA,CAACihF,aAAoB,EAAE;EAChC,IAAA,IAAMxsF,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAIA,MAAM,EAAE;QACV,IAAI,CAACA,MAAM,GAAGA,MAAM,CAACzE,MAAM,CAAC,UAAChjB,KAAK,EAAA;UAAA,OAAKA,KAAK,KAAKi0G,aAAa;QAAA,CAAA,CAAC;EACjE,IAAA;IACF,CAAC;EAAAt+G,EAAAA,MAAA,CAEOg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAAC8K,QAAQ,EAAE;MACf,IAAI,CAAClnB,OAAO,GAAG,IAAI;MACnB,IAAI,CAACihG,UAAU,GAAG,GAAG;MACrB,IAAI,CAAC79D,OAAO,GAAG,CAAC;MAChB,IAAI,CAAC3zB,GAAG,GAAG,IAAI;MACf,IAAI,CAACg+B,SAAS,GAAG,GAAG;MACpB,IAAI,CAACv4B,MAAM,GAAG,IAAI,CAACwS,WAAW,GAAG,IAAI,CAAC05E,cAAc,GAAG,IAAI;IAC7D,CAAC;IAAAh+G,MAAA,CAEOw4D,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBr+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAQs+C,eAAe,GAAKt+C,IAAI,CAAxBs+C,eAAe;MACvB,IAAIA,eAAe,KAAK,IAAI,EAAE;EAC5B,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACgB,SAAS,GAAGhB,eAAe,CAACgB,SAAS;EAC1C,IAAA,IAAI,CAACh+B,GAAG,GAAGg9B,eAAe,CAACh9B,GAAG;MAC9B,IAAI,IAAI,CAAC0xF,OAAO,EAAE;QAChB,IAAI,CAACn6E,SAAS,EAAE;EAClB,IAAA;IACF,CAAC;IAAA5jC,MAAA,CAEOu8F,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBpiE,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAI,CAACu5B,WAAW,GAAGv5B,IAAI,CAACu5B,WAAW;EACnC,IAAA,IAAI,CAAC05E,cAAc,GAAGjzG,IAAI,CAACizG,cAAc;IAC3C,CAAC;IAAAh+G,MAAA,CAEOg6B,OAAO,GAAf,SAAQA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;EACpD,IAAA,IAAQ45B,WAAW,GAAK55B,IAAI,CAApB45B,WAAW;EACnB,IAAA,IACE,CAAAA,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEM,MAAM,MAAKpC,kBAAkB,CAACE,yBAAyB,IACpE4B,WAAW,CAACxyB,KAAK,KAAK+wB,gBAAgB,CAACE,6BAA6B,EACpE;EACA,MAAA,IAAMtR,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,MAAA,IAAIysF,eAAe,GAAG,IAAI,CAACX,gBAAgB;EAC3C,MAAA,IAAIY,YAAY,GAAG,IAAI,CAACn0D,SAAS;QACjC,IAAIt/C,IAAI,CAAClH,OAAO,EAAE;EAChB,QAAA,IAAAuhC,aAAA,GAAqCr6B,IAAI,CAAClH,OAAO;YAAzCmkB,OAAO,GAAAod,aAAA,CAAPpd,OAAO;YAAEqiC,SAAS,GAAAjlB,aAAA,CAATilB,SAAS;YAAEjnD,IAAI,GAAAgiC,aAAA,CAAJhiC,IAAI;UAChC,IAAI4kB,OAAO,IAAI8J,MAAM,EAAE;YACrB0sF,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACz2F,OAAO,EAAE5kB,IAAI,EAAEo7G,YAAY,CAAC;UACvE,CAAC,MAAM,IAAIn0D,SAAS,EAAE;EACpBm0D,UAAAA,YAAY,GAAGn0D,SAAS;EAC1B,QAAA;EACF,MAAA;EACA,MAAA,IAAI,EAAEm0D,YAAY,IAAI,IAAI,CAACP,iBAAiB,CAAC,EAAE;UAC7C,IAAI,CAACA,iBAAiB,CAACO,YAAY,CAAC,GAAG7oF,WAAW,CAACD,GAAG,EAAE;EAC1D,MAAA;EACA,MAAA,IAAI,CAAC6oF,eAAe,IAAIzsF,MAAM,EAAE;EAC9B;EACAysF,QAAAA,eAAe,GAAG,IAAI,CAACL,QAAQ,EAAE;EACnC,MAAA;EACA,MAAA,IAAIK,eAAe,IAAIA,eAAe,CAACr5G,MAAM,GAAG,CAAC,EAAE;EACjD,QAAA,IAAI,CAACw5G,qBAAqB,CAACH,eAAe,CAAC;EAC3C55E,QAAAA,WAAW,CAAC4D,QAAQ,GAAG,IAAI,CAAC8hB,SAAS,KAAKm0D,YAAY;EACxD,MAAA;EACA,MAAA,IAAIzzG,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC47B,mBAAmB,IAAI,CAACzvB,IAAI,CAACuvB,KAAK,EAAE;EACpE;EACA;UACAqK,WAAW,CAAC4D,QAAQ,GAAG,IAAI;EAC7B,MAAA,CAAC,MAAM,IAAI,CAAC5D,WAAW,CAAC4D,QAAQ,EAAE;EAChC,QAAA,IAAI,CAAC5lC,IAAI,CAAA,oBAAA,GACcoI,IAAI,CAAC4gB,OAAO,GAAA,MAAA,GAC/B5gB,IAAI,CAAC7N,KAAK,CAACsrC,OAAO,GAAA,yCAAA,GACqBg2E,YAAY,kBACnD1sF,MAAM,GAAGA,MAAM,CAAC5sB,MAAM,GAAG4sB,MAAM,CAAA,GAAA,eAAA,GACjBxC,SAAS,CACvBivF,eACF,CAAC,GAAA,cAAA,GAAejvF,SAAS,CAAC,IAAI,CAAC2uF,iBAAiB,CAClD,CAAC;EACH,MAAA;EACF,IAAA;IACF,CAAC;EAAAj+G,EAAAA,MAAA,CAEM2+G,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAAC7sF,MAAe,EAAW;EAClD;MACA,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,IAAI8sF,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACx0D,SAAS,CAAC;EAC5D,IAAA,IAAIu0D,aAAa,CAAC15G,MAAM,KAAK,CAAC,EAAE;EAC9B,MAAA,IAAMmlD,SAAS,GAAGv4B,MAAM,CAAC,CAAC,CAAC,CAACu4B,SAAS;QACrC,IAAI,CAACtqD,GAAG,CAAA,6BAAA,GACwB,IAAI,CAACsqD,SAAS,GAAA,iCAAA,GAAiCA,SAAS,GAAA,IACxF,CAAC;EACDu0D,MAAAA,aAAa,GAAG,IAAI,CAACC,mBAAmB,CAACx0D,SAAS,CAAC;QACnD,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC5B,IAAA;EACA,IAAA,IAAIu0D,aAAa,CAAC15G,MAAM,KAAK4sB,MAAM,CAAC5sB,MAAM,EAAE;EAC1C,MAAA,IAAI,CAACnF,GAAG,CAAA,QAAA,GACG6+G,aAAa,CAAC15G,MAAM,GAAA,GAAA,GAAI4sB,MAAM,CAAC5sB,MAAM,GAAA,uBAAA,GAAuB,IAAI,CAACmlD,SAAS,OACrF,CAAC;EACH,IAAA;EACA,IAAA,OAAOu0D,aAAa;IACtB,CAAC;EAAA5+G,EAAAA,MAAA,CAEO6+G,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAACx0D,SAAiB,EAAW;EACtD,IAAA,IAAI,IAAI,CAACv4B,MAAM,KAAK,IAAI,EAAE;EACxB,MAAA,OAAO,EAAE;EACX,IAAA;EACA,IAAA,OAAO,IAAI,CAACA,MAAM,CAACzE,MAAM,CAAC,UAAChjB,KAAK,EAAA;EAAA,MAAA,OAAKggD,SAAS,KAAKhgD,KAAK,CAACggD,SAAS;MAAA,CAAA,CAAC;IACrE,CAAC;EAAArqD,EAAAA,MAAA,CAEO0+G,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAACH,eAAyB,EAAE;MACvD,IAAI,CAACX,gBAAgB,GAAGW,eAAe;EACvC,IAAA,IAAIzsF,MAA2B;;EAE/B;EACA,IAAA,IAAMmsF,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;EAChD,IAAA,IAAMvoF,GAAG,GAAGC,WAAW,CAACD,GAAG,EAAE;MAC7B3wB,MAAM,CAAChB,IAAI,CAACk6G,iBAAiB,CAAC,CAACj6G,OAAO,CAAC,UAACqmD,SAAS,EAAK;QACpD,IAAI30B,GAAG,GAAGuoF,iBAAiB,CAAC5zD,SAAS,CAAC,GAAGqzD,2BAA2B,EAAE;UACpE,OAAOO,iBAAiB,CAAC5zD,SAAS,CAAC;EACrC,MAAA;EACF,IAAA,CAAC,CAAC;EACF,IAAA,KAAK,IAAIjkD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGm4G,eAAe,CAACr5G,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC/C,MAAA,IAAMikD,SAAS,GAAGk0D,eAAe,CAACn4G,CAAC,CAAC;QACpC,IAAIikD,SAAS,IAAI4zD,iBAAiB,EAAE;EAClC,QAAA;EACF,MAAA;EACA,MAAA,IAAI5zD,SAAS,KAAK,IAAI,CAACA,SAAS,EAAE;EAChC,QAAA;EACF,MAAA;EACA,MAAA,IAAMy0D,aAAa,GAAG,IAAI,CAACxqF,GAAG,CAACiD,aAAa;QAC5C,IAAMwnF,aAAoB,GAAG,IAAI,CAACzqF,GAAG,CAACxC,MAAM,CAACgtF,aAAa,CAAC;EAC3DhtF,MAAAA,MAAM,GAAG,IAAI,CAAC+sF,mBAAmB,CAACx0D,SAAS,CAAC;EAC5C,MAAA,IAAIv4B,MAAM,CAAC5sB,MAAM,GAAG,CAAC,EAAE;EACrB,QAAA,IAAI,CAACnF,GAAG,CAAA,uBAAA,GAAwBsqD,SAAS,OAAG,CAAC;UAC7C,IAAI,CAACA,SAAS,GAAGA,SAAS;UAC1B+J,4BAA4B,CAACtiC,MAAM,CAAC;UACpC,IAAI,CAACwC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC86B,cAAc,EAAE;EAAE7H,UAAAA,MAAM,EAANA;EAAO,SAAC,CAAC;EACnD;UACA,IAAMktF,gBAAgB,GAAG,IAAI,CAAC1qF,GAAG,CAACxC,MAAM,CAACgtF,aAAa,CAAC;EACvD,QAAA,IAAIC,aAAa,IAAIC,gBAAgB,IAAI,IAAI,CAACltF,MAAM,EAAE;YACpD,IACEktF,gBAAgB,CAAC9xF,KAAK,CAAC,mBAAmB,CAAC,KACzC6xF,aAAa,CAAC7xF,KAAK,CAAC,mBAAmB,CAAC,IAC1C8xF,gBAAgB,CAACz2F,OAAO,KAAKw2F,aAAa,CAACx2F,OAAO,EAClD;cACA,IAAI,CAACxoB,GAAG,CAAA,wCAAA,GACmCg/G,aAAa,CAACx2F,OAAO,GAAA,MAAA,GAAOy2F,gBAAgB,CAACz2F,OACxF,CAAC;EACH,UAAA;EACA,UAAA,IAAI,CAAC+L,GAAG,CAACiD,aAAa,GAAGunF,aAAa;EACxC,QAAA;EACA,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;IAAA9+G,MAAA,CAEOy+G,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1Bz2F,OAAe,EACf5kB,IAAyB,EACzB67G,cAAsB,EACd;EACR,IAAA,IAAMntF,MAAM,GAAG,IAAI,CAAC+sF,mBAAmB,CAACI,cAAc,CAAC,CAACl+E,MAAM,CAC5D,IAAI,CAACjP,MAAM,IAAI,EACjB,CAAC;EACD,IAAA,KAAK,IAAI1rB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0rB,MAAM,CAAC5sB,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,MAAA,IACGhD,IAAI,KAAKtE,mBAAmB,CAACG,WAAW,IACvC6yB,MAAM,CAAC1rB,CAAC,CAAC,CAACunB,aAAa,CAAC3F,OAAO,CAAC,IACjC5kB,IAAI,KAAKtE,mBAAmB,CAACI,cAAc,IAC1C4yB,MAAM,CAAC1rB,CAAC,CAAC,CAACynB,gBAAgB,CAAC7F,OAAO,CAAE,EACtC;EACA,QAAA,OAAO8J,MAAM,CAAC1rB,CAAC,CAAC,CAACikD,SAAS;EAC5B,MAAA;EACF,IAAA;EACA,IAAA,OAAO40D,cAAc;IACvB,CAAC;EAAAj/G,EAAAA,MAAA,CAEOk/G,aAAa,GAArB,SAAQA,aAAaA,CAACC,aAA6B,EAAE;EAAA,IAAA,IAAAxxG,MAAA,GAAA,IAAA;EACnD,IAAA,IAAMmkB,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAI,CAACA,MAAM,EAAE;EACX,MAAA;EACF,IAAA;MACA,IAAMstF,kBAA0C,GAAG,EAAE;MACrD,IAAMC,qBAA6C,GAAG,EAAE;EACxDF,IAAAA,aAAa,CAACn7G,OAAO,CAAC,UAACs7G,YAAY,EAAK;EACtC,MAAA,IACMC,OAAO,GAGTD,YAAY,CAHd9gE,EAAE;UACSghE,MAAM,GAEfF,YAAY,CAFd,SAAS,CAAA;UACUG,cAAc,GAC/BH,YAAY,CADd,iBAAiB,CAAA;EAEnB,MAAA,IAAIxtF,MAAM,CAAC1sB,IAAI,CAAC,UAACiF,KAAK,EAAA;EAAA,QAAA,OAAKA,KAAK,CAACggD,SAAS,KAAKk1D,OAAO;EAAA,MAAA,CAAA,CAAC,EAAE;EACvD,QAAA;EACF,MAAA;EACA,MAAA,IAAMG,cAAc,GAAG/xG,MAAI,CAACkxG,mBAAmB,CAACW,MAAM,CAAC,CAACnlG,GAAG,CACzD,UAACslG,SAAS,EAAK;UACb,IAAM71D,UAAU,GAAG,IAAI7N,QAAQ,CAAC0jE,SAAS,CAACzyF,KAAK,CAAC;EAChD48B,QAAAA,UAAU,CAAC,YAAY,CAAC,GAAGy1D,OAAO;UAClC,IAAMK,kBAAsC,GAC1C91D,UAAU,CAACzqD,KAAK,IAAOyqD,UAAU,CAACzqD,KAAK,GAAA,SAAA,GAAUkgH,OAAS;UAC5D,IAAMM,qBAAyC,GAC7C/1D,UAAU,CAACp8B,SAAS,IAAOo8B,UAAU,CAACp8B,SAAS,GAAA,SAAA,GAAU6xF,OAAS;EACpE,QAAA,IAAIK,kBAAkB,EAAE;EACtBR,UAAAA,kBAAkB,CAACt1D,UAAU,CAACzqD,KAAK,CAAC,GAAGugH,kBAAkB;YACzD91D,UAAU,CAACzqD,KAAK,GAAGugH,kBAAkB;EACvC,QAAA;EACA,QAAA,IAAIC,qBAAqB,EAAE;EACzBR,UAAAA,qBAAqB,CAACv1D,UAAU,CAACp8B,SAAS,CAAC,GAAGmyF,qBAAqB;YACnE/1D,UAAU,CAACp8B,SAAS,GAAGmyF,qBAAqB;EAC9C,QAAA;EACA,QAAA,IAAM1iH,GAAG,GAAG2iH,qBAAqB,CAC/BH,SAAS,CAACtzF,GAAG,EACby9B,UAAU,CAAC,mBAAmB,CAAC,EAC/B,kBAAkB,EAClB21D,cACF,CAAC;EACD,QAAA,IAAMM,WAAW,GAAG,IAAIvzF,KAAK,CAAC;EAC5BU,UAAAA,KAAK,EAAE48B,UAAU;YACjBtiC,UAAU,EAAEm4F,SAAS,CAACn4F,UAAU;YAChCe,OAAO,EAAEo3F,SAAS,CAACp3F,OAAO;YAC1BH,MAAM,EAAEu3F,SAAS,CAACv3F,MAAM;YACxB/iB,IAAI,EAAEs6G,SAAS,CAACt6G,IAAI;EACpBlI,UAAAA,GAAG,EAAHA,GAAG;YACHgnB,UAAU,EAAEw7F,SAAS,CAACx7F,UAAU;YAChCgE,KAAK,EAAEw3F,SAAS,CAACx3F;EACnB,SAAC,CAAC;UACF,IAAIw3F,SAAS,CAACp4F,WAAW,EAAE;EACzB,UAAA,KAAK,IAAInhB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGu5G,SAAS,CAACp4F,WAAW,CAACriB,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrD25G,YAAAA,WAAW,CAACtyF,UAAU,CACpB,OAAO,EACJkyF,SAAS,CAACp4F,WAAW,CAACnhB,CAAC,CAAC,GAAA,SAAA,GAAUm5G,OACvC,CAAC;EACH,UAAA;EACF,QAAA;UACA,IAAII,SAAS,CAAC7xF,cAAc,EAAE;EAC5B,UAAA,KAAK,IAAI1nB,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGu5G,SAAS,CAAC7xF,cAAc,CAAC5oB,MAAM,EAAEkB,EAAC,EAAE,EAAE;EACxD25G,YAAAA,WAAW,CAACtyF,UAAU,CACpB,MAAM,EACHkyF,SAAS,CAAC7xF,cAAc,CAAC1nB,EAAC,CAAC,GAAA,SAAA,GAAUm5G,OAC1C,CAAC;EACH,UAAA;EACF,QAAA;EACA,QAAA,OAAOQ,WAAW;EACpB,MAAA,CACF,CAAC;QACDjuF,MAAM,CAAC/iB,IAAI,CAAAK,KAAA,CAAX0iB,MAAM,EAAS4tF,cAAc,CAAC;QAC9BM,oBAAoB,CAClBryG,MAAI,CAAC22B,WAAW,EAChB86E,kBAAkB,EAClBK,cAAc,EACdF,OACF,CAAC;QACDS,oBAAoB,CAClBryG,MAAI,CAACqwG,cAAc,EACnBqB,qBAAqB,EACrBI,cAAc,EACdF,OACF,CAAC;EACH,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAv/G,EAAAA,MAAA,CAEOq+G,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAAChyF,GAAW,EAAE;EAAA,IAAA,IAAAmQ,MAAA,GAAA,IAAA;EACxC,IAAA,IAAMvR,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;EAC9B,IAAA,IAAMg1F,MAAM,GAAGh1F,MAAM,CAAC9gB,MAAM;MAC5B,IAAI,IAAI,CAACA,MAAM,EAAE;EACf,MAAA,IAAI,CAACA,MAAM,CAACjI,OAAO,EAAE;EACvB,IAAA;EACA,IAAA,IAAI,CAACiI,MAAM,GAAG,IAAI81G,MAAM,CAACh1F,MAAM,CAA0B;EAEzD,IAAA,IAAI9tB,GAAQ;MACZ,IAAI;EACFA,MAAAA,GAAG,GAAG,IAAIoG,IAAI,CAACnG,GAAG,CAACivB,GAAG,CAAC;MACzB,CAAC,CAAC,OAAOnvB,KAAK,EAAE;QACd,IAAI,CAAC0f,OAAO,GAAG,KAAK;EACpB,MAAA,IAAI,CAAC7c,GAAG,CAAA,yCAAA,GAA2CssB,GAAK,CAAC;EACzD,MAAA;EACF,IAAA;EACA,IAAA,IAAIlvB,GAAG,CAAC+iH,QAAQ,KAAK,OAAO,EAAE;EAC5B,MAAA,IAAMC,UAAU,GACd,CAAC,IAAI,CAAC7rF,GAAG,CAAC4oF,iBAAiB,IAAIjyF,MAAM,CAAC0N,sBAAsB,IAAI,CAAC;QACnEx7B,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,cAAc,EAAE,IAAI,CAACqhD,SAAS,CAAC;QACpDltD,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,iBAAiB,EAAE,EAAE,GAAGm3G,UAAU,CAAC;EAC1D,IAAA;EACA,IAAA,IAAMt8G,OAAsB,GAAG;EAC7B2zC,MAAAA,YAAY,EAAE,MAAM;QACpBr6C,GAAG,EAAEA,GAAG,CAACovB;OACV;EAED,IAAA,IAAMiV,UAAU,GAAGvW,MAAM,CAACm1F,0BAA0B,CAACluG,OAAO;MAC5D,IAAMmuG,wBAA4D,GAChE7+E,UAAU,CAACW,UAAU,IAAIX,UAAU,CAACY,YAAY,IAAI,EAAE;EACxD,IAAA,IAAMwT,YAAiC,GAAG;EACxCpU,MAAAA,UAAU,EAAVA,UAAU;QACVqU,OAAO,EAAErU,UAAU,CAACsU,aAAa;EACjCC,MAAAA,QAAQ,EAAEsqE,wBAAwB,CAAC59E,WAAW,IAAI,CAAC;EACnDuT,MAAAA,UAAU,EAAEqqE,wBAAwB,CAACt+E,YAAY,IAAI,CAAC;EACtDkU,MAAAA,aAAa,EAAEoqE,wBAAwB,CAACr+E,eAAe,IAAI;OAC5D;EAED,IAAA,IAAMmU,SAAyC,GAAG;QAChDC,SAAS,EAAE,SAAXA,SAASA,CACPtP,QAAwB,EACxBv6B,KAAkB,EAClB1I,OAAsB,EACtBuxC,cAAmB,EAChB;EACH5Y,QAAAA,MAAI,CAACz8B,GAAG,CAAA,8BAAA,GAA+B5C,GAAG,OAAG,CAAC;EAC9C,QAAA,IAAMmjH,YAAY,GAAGx5E,QAAQ,CAAC/7B,IAAwB;UACtD,IAAI,CAAAu1G,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAEC,OAAO,MAAK,CAAC,EAAE;EAC/B/jF,UAAAA,MAAI,CAACz8B,GAAG,CAAA,mBAAA,GAAqBugH,YAAY,CAACC,OAAO,oBAAiB,CAAC;EACnE,UAAA;EACF,QAAA;EACA/jF,QAAAA,MAAI,CAACwjB,OAAO,GAAGrqB,WAAW,CAACD,GAAG,EAAE;EAChC8G,QAAAA,MAAI,CAACqhF,UAAU,GAAGyC,YAAY,CAACE,GAAG;EAClC,QAAA,IACgBC,SAAS,GAGrBH,YAAY,CAHd,YAAY,CAAA;YACMnB,aAAa,GAE7BmB,YAAY,CAFd,gBAAgB,CAAA;YACI/B,eAAe,GACjC+B,YAAY,CADd,kBAAkB,CAAA;EAEpB,QAAA,IAAIG,SAAS,EAAE;YACb,IAAI;EACFjkF,YAAAA,MAAI,CAACnQ,GAAG,GAAG,IAAI9oB,IAAI,CAACnG,GAAG,CAACqjH,SAAS,EAAEtjH,GAAG,CAAC,CAACovB,IAAI;YAC9C,CAAC,CAAC,OAAOrvB,KAAK,EAAE;cACds/B,MAAI,CAAC5f,OAAO,GAAG,KAAK;EACpB4f,YAAAA,MAAI,CAACz8B,GAAG,CAAA,gDAAA,GAC2C0gH,SACnD,CAAC;EACD,YAAA;EACF,UAAA;EACF,QAAA;UACAjkF,MAAI,CAAC4hF,eAAe,CAAC5hF,MAAI,CAACnQ,GAAG,IAAIxoB,OAAO,CAAC1G,GAAG,CAAC;EAC7C,QAAA,IAAIgiH,aAAa,EAAE;EACjB3iF,UAAAA,MAAI,CAAC0iF,aAAa,CAACC,aAAa,CAAC;EACnC,QAAA;EAEA,QAAA,IAAMuB,kBAA8C,GAAG;EACrDC,UAAAA,gBAAgB,EAAEL,YAAY;EAC9BnjH,UAAAA,GAAG,EAAEA,GAAG,CAACI,QAAQ;WAClB;UACDi/B,MAAI,CAAClI,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC+hH,wBAAwB,EAAEF,kBAAkB,CAAC;EAErE,QAAA,IAAInC,eAAe,EAAE;EACnB/hF,UAAAA,MAAI,CAACkiF,qBAAqB,CAACH,eAAe,CAAC;EAC7C,QAAA;QACF,CAAC;QAEDvkF,OAAO,EAAE,SAATA,OAAOA,CACL98B,KAAqC,EACrC2G,OAAsB,EACtBuxC,cAAmB,EACnB7oC,KAAkB,EACf;EACHiwB,QAAAA,MAAI,CAACz8B,GAAG,CAAA,mCAAA,GAC8B7C,KAAK,CAACslC,IAAI,GAAA,GAAA,GAAItlC,KAAK,CAACgS,IAAI,GAAA,IAAA,GAAKrL,OAAO,CAAC1G,GAAG,MAC9E,CAAC;UACDq/B,MAAI,CAACsH,QAAQ,EAAE;EACf,QAAA,IAAI5mC,KAAK,CAACslC,IAAI,KAAK,GAAG,EAAE;YACtBhG,MAAI,CAAC5f,OAAO,GAAG,KAAK;EACpB4f,UAAAA,MAAI,CAACz8B,GAAG,CAAA,oBAAA,GAAsB8D,OAAO,CAAC1G,GAAG,yBAAsB,CAAC;EAChE,UAAA;EACF,QAAA;EACA,QAAA,IAAIghH,GAAG,GAAG3hF,MAAI,CAACqhF,UAAU,GAAG,IAAI;EAChC,QAAA,IAAI3gH,KAAK,CAACslC,IAAI,KAAK,GAAG,EAAE;EACtB,UAAA,IAAMr4B,MAAM,GAAGqyB,MAAI,CAACryB,MAAM;YAC1B,IAAI,QAAOA,MAAM,IAAA,IAAA,GAAA,MAAA,GAANA,MAAM,CAAE02G,iBAAiB,CAAA,KAAK,UAAU,EAAE;EACnD,YAAA,IAAMC,UAAU,GAAG32G,MAAM,CAAC02G,iBAAiB,CAAC,aAAa,CAAC;EAC1D,YAAA,IAAIC,UAAU,EAAE;EACd3C,cAAAA,GAAG,GAAGxzF,UAAU,CAACm2F,UAAU,CAAC,GAAG,IAAI;EACrC,YAAA;EACF,UAAA;EACAtkF,UAAAA,MAAI,CAACz8B,GAAG,CAAA,oBAAA,GAAsB8D,OAAO,CAAC1G,GAAG,kBAAe,CAAC;EACzD,UAAA;EACF,QAAA;EACAq/B,QAAAA,MAAI,CAAC4hF,eAAe,CAAC5hF,MAAI,CAACnQ,GAAG,IAAIxoB,OAAO,CAAC1G,GAAG,EAAEghH,GAAG,CAAC;QACpD,CAAC;QAED1nE,SAAS,EAAE,SAAXA,SAASA,CACPlqC,KAAkB,EAClB1I,OAAsB,EACtBuxC,cAAmB,EAChB;EACH5Y,QAAAA,MAAI,CAACz8B,GAAG,CAAA,qCAAA,GAAuC8D,OAAO,CAAC1G,GAAG,MAAG,CAAC;UAC9Dq/B,MAAI,CAAC4hF,eAAe,CAAC5hF,MAAI,CAACnQ,GAAG,IAAIxoB,OAAO,CAAC1G,GAAG,CAAC;EAC/C,MAAA;OACD;EAED,IAAA,IAAI,CAAC4C,GAAG,CAAA,gCAAA,GAAkC5C,GAAK,CAAC;MAChD,IAAI,CAACgN,MAAM,CAAC6qC,IAAI,CAACnxC,OAAO,EAAE+xC,YAAY,EAAEO,SAAS,CAAC;IACpD,CAAC;IAAAn2C,MAAA,CAEOo+G,eAAe,GAAvB,SAAQA,eAAeA,CAAC/xF,GAAW,EAAE00F,KAAa,EAA2B;EAAA,IAAA,IAAA1lD,MAAA,GAAA,IAAA;EAAA,IAAA,IAAxC0lD,KAAa,KAAA,MAAA,EAAA;EAAbA,MAAAA,KAAa,GAAG,IAAI,CAAClD,UAAU,GAAG,IAAI;EAAA,IAAA;MACzE,IAAI,CAACvmE,YAAY,EAAE;EACnB,IAAA,IAAI,CAACwmE,WAAW,GAAGv6G,IAAI,CAAC81C,UAAU,CAAC,YAAM;EAAA,MAAA,IAAA2nE,UAAA;QACvC,IAAMxyF,KAAK,GAAA,CAAAwyF,UAAA,GAAG3lD,MAAI,CAAC/mC,GAAG,KAAA,IAAA,GAAA,MAAA,GAAR0sF,UAAA,CAAUxyF,KAAK;EAC7B,MAAA,IAAIA,KAAK,IAAI,CAACA,KAAK,CAAC8qC,KAAK,EAAE;EACzB+B,QAAAA,MAAI,CAACgjD,oBAAoB,CAAChyF,GAAG,CAAC;EAC9B,QAAA;EACF,MAAA;QACAgvC,MAAI,CAAC+iD,eAAe,CAAC/xF,GAAG,EAAEgvC,MAAI,CAACwiD,UAAU,GAAG,IAAI,CAAC;MACnD,CAAC,EAAEkD,KAAK,CAAC;IACX,CAAC;IAAA,OAAA5+G,YAAA,CAAAw7G,yBAAA,EAAA,CAAA;MAAAv7G,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAlcD,SAAAA,GAAAA,GAAuC;QACrC,OAAO,IAAI,CAACu7G,gBAAgB;MAC9B,CAAC;EAAA50G,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAoBu1G,eAAyB,EAAE;EAC7C,MAAA,IAAI,CAACG,qBAAqB,CAACH,eAAe,CAAC;EAC7C,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CA1DOj8G,MAAM,CAAA;EAyfhB,SAAS09G,oBAAoBA,CAC3BjpG,MAA8B,EAC9BkqG,aAAqC,EACrCxB,cAA8B,EAC9BF,OAAe,EACf;IACA,IAAI,CAACxoG,MAAM,EAAE;EACX,IAAA;EACF,EAAA;IACAhS,MAAM,CAAChB,IAAI,CAACk9G,aAAa,CAAC,CAACj9G,OAAO,CAAC,UAACsmB,YAAY,EAAK;EACnD,IAAA,IAAM42F,YAAY,GAAGnqG,MAAM,CACxBsW,MAAM,CAAC,UAACpb,KAAK,EAAA;EAAA,MAAA,OAAKA,KAAK,CAAC+V,OAAO,KAAKsC,YAAY;EAAA,IAAA,CAAA,CAAC,CACjDjQ,GAAG,CAAC,UAACpI,KAAK,EAAK;QACd,IAAMkvG,WAAW,GAAGj+G,QAAA,CAAc,EAAE,EAAE+O,KAAK,CAAC;QAC5CkvG,WAAW,CAACx1F,OAAO,GAAGvnB,SAAS;QAC/B+8G,WAAW,CAACj0F,KAAK,GAAG,IAAI+uB,QAAQ,CAACklE,WAAW,CAACj0F,KAAK,CAAoB;QACtEi0F,WAAW,CAAChkH,GAAG,GAAGgkH,WAAW,CAACj0F,KAAK,CAAC+9B,GAAG,GAAG60D,qBAAqB,CAC7D7tG,KAAK,CAAC9U,GAAG,EACT8U,KAAK,CAACib,KAAK,CAAC,qBAAqB,CAAC,EAClC,oBAAoB,EACpBuyF,cACF,CAAC;EACD0B,MAAAA,WAAW,CAACn5F,OAAO,GAAGm5F,WAAW,CAACj0F,KAAK,CAAC,UAAU,CAAC,GACjD+zF,aAAa,CAAC32F,YAAY,CAAC;EAC7B62F,MAAAA,WAAW,CAACj0F,KAAK,CAAC,YAAY,CAAC,GAAGqyF,OAAO;EACzC,MAAA,OAAO4B,WAAW;EACpB,IAAA,CAAC,CAAC;MACJpqG,MAAM,CAAChI,IAAI,CAAAK,KAAA,CAAX2H,MAAM,EAASmqG,YAAY,CAAC;EAC9B,EAAA,CAAC,CAAC;EACJ;EAEA,SAASpB,qBAAqBA,CAC5BzzF,GAAW,EACX+0F,QAA4B,EAC5BC,YAAuD,EACvD5B,cAA8B,EACtB;EACR,EAAA,IACQ6B,IAAI,GAGR7B,cAAc,CAHhB8B,IAAI;MACI94G,MAAM,GAEZg3G,cAAc,CAFhB+B,MAAM;MACUC,aAAa,GAC3BhC,cAAc,CADf4B,YAAY,CAAA;EAEf,EAAA,IAAIK,aAAa;EACjB,EAAA,IAAIN,QAAQ,EAAE;EACZM,IAAAA,aAAa,GAAGD,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAGL,QAAQ,CAAC;EACzC,IAAA,IAAIM,aAAa,EAAE;EACjBr1F,MAAAA,GAAG,GAAGq1F,aAAa;EACrB,IAAA;EACF,EAAA;IACA,IAAMvkH,GAAG,GAAG,IAAIoG,IAAI,CAACnG,GAAG,CAACivB,GAAG,CAAC;EAC7B,EAAA,IAAIi1F,IAAI,IAAI,CAACI,aAAa,EAAE;MAC1BvkH,GAAG,CAACmkH,IAAI,GAAGA,IAAI;EACjB,EAAA;EACA,EAAA,IAAI74G,MAAM,EAAE;EACV1D,IAAAA,MAAM,CAAChB,IAAI,CAAC0E,MAAM,CAAC,CAChB2xC,IAAI,EAAE,CACNp2C,OAAO,CAAC,UAAC5B,GAAG,EAAK;EAChB,MAAA,IAAIA,GAAG,EAAE;UACPjF,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC5G,GAAG,EAAEqG,MAAM,CAACrG,GAAG,CAAC,CAAC;EACxC,MAAA;EACF,IAAA,CAAC,CAAC;EACN,EAAA;IACA,OAAOjF,GAAG,CAACovB,IAAI;EACjB;;ECxiBA;EACA;EACA;EACA;EACA;EACA;EACA;EANA,IAOMo1F,aAAa,0BAAAjtF,OAAA,EAAA;IAyBjB,SAAAitF,aAAAA,CAAYrtF,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,KAAK,EAAE4qB,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAvBV6qB,GAAG,GAAA,MAAA;EAAA7qB,IAAAA,KAAA,CACHwhB,MAAM,GAAA,MAAA;MAAAxhB,KAAA,CAKf+kB,KAAK,GAA4B,IAAI;MAAA/kB,KAAA,CACrCm4G,gBAAgB,GAAqC,IAAI;EAAAn4G,IAAAA,KAAA,CACzDo4G,uBAAuB,GAE3B,EAAE;MAAAp4G,KAAA,CACEq4G,2BAA2B,GAAW,CAAC;MAAAr4G,KAAA,CACvCs4G,gBAAgB,GAA6B,EAAE;EAAAt4G,IAAAA,KAAA,CAC/Cu4G,wBAAwB,GAE5B,EAAE;MAAAv4G,KAAA,CACEwyD,SAAS,GAAqB,IAAI;EAAAxyD,IAAAA,KAAA,CAClCw4G,iBAAiB,GAAoBN,aAAa,CAACO,iBAAiB,GACxE,CAACP,aAAa,CAACO,iBAAiB,CAAC,GACjC,EAAE;EAAAz4G,IAAAA,KAAA,CACE04G,YAAY,GAAoD,EAAE;EAAA14G,IAAAA,KAAA,CAmflE24G,gBAAgB,GAAG,UAACjoF,KAA0B,EAAK;EACzD,MAAA,IAAQkoF,YAAY,GAAeloF,KAAK,CAAhCkoF,YAAY;UAAEvrG,QAAQ,GAAKqjB,KAAK,CAAlBrjB,QAAQ;EAC9B,MAAA,IAAMwrG,UAAU,GAAA,IAAA,GAAOnoF,KAAK,CAAC/2B,IAAI,GAAA,8BAAA,GAA6Bi/G,YAAY,GAAA,IAAG;EAC7E54G,MAAAA,KAAA,CAAK/G,KAAK,CAAC4/G,UAAU,CAAC;;EAEtB;QACA,IAAIxrG,QAAQ,KAAK,IAAI,EAAE;EACrB,QAAA;EACF,MAAA;EAEA,MAAA,IAAI,CAACrN,KAAA,CAAKm4G,gBAAgB,EAAE;UAC1B,IAAIW,UAAU,GAAGx9G,MAAM,CAAChB,IAAI,CAC1B0F,KAAA,CAAKo4G,uBACP,CAAiB;EACjB,QAAA,IAAI,CAACU,UAAU,CAACr9G,MAAM,EAAE;EACtBq9G,UAAAA,UAAU,GAAG79D,sBAAsB,CAACj7C,KAAA,CAAKwhB,MAAM,CAAC;EAClD,QAAA;EACA,QAAA,IAAMne,UAAU,GAAGy1G,UAAU,CAC1BloG,GAAG,CAACmqC,gCAAgC,CAAC,CACrCn3B,MAAM,CAAC,UAACm1F,CAAC,EAAA;YAAA,OAAK,CAAC,CAACA,CAAC;UAAA,CAAA,CAAuB;UAC3C/4G,KAAA,CAAKm4G,gBAAgB,GAAGn4G,KAAA,CAAKg5G,mBAAmB,CAAC31G,UAAU,CAAC;EAC9D,MAAA;EAEArD,MAAAA,KAAA,CAAKm4G,gBAAgB,CAClBl4F,IAAI,CAAC,UAACg5F,eAAe,EAAK;EACzB,QAAA,IAAMj+D,SAAS,GAAGH,gCAAgC,CAACo+D,eAAe,CAAC;UACnE,IAAIL,YAAY,KAAK,MAAM,IAAI59D,SAAS,KAAKT,UAAU,CAACE,QAAQ,EAAE;YAChEz6C,KAAA,CAAK1J,GAAG,CAAA,aAAA,GACOo6B,KAAK,CAAC/2B,IAAI,GAAA,kCAAA,GAAiCi/G,YAAY,GAAA,6BAAA,GAA6B59D,SACnG,CAAC;EACD,UAAA;EACF,QAAA;;EAEA;EACA,QAAA,IAAI34C,KAA0C;UAC9C,IAAI;YACF,IAAM62G,IAAI,GAAGxzG,OAAO,CAAC,IAAIxI,UAAU,CAACmQ,QAAQ,CAAC,CAAC;EAC9C,UAAA,IAAMlE,IAAI,GAAG8vC,YAAY,CAACnzB,IAAI,CAACliB,KAAK,CAACs1G,IAAI,CAAC,CAAC/vG,IAAI,CAAC;EAChD,UAAA,IAAMsD,IAAI,GAAGU,SAAS,CAAChE,IAAI,CAAC;YAC5B,IAAI,CAACsD,IAAI,EAAE;cACT,MAAM,IAAIgS,KAAK,CAAA,sDAEf,CAAC;EACH,UAAA;EACApc,UAAAA,KAAK,GAAG,IAAInF,UAAU,CAACuP,IAAI,CAACjG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;UAC9C,CAAC,CAAC,OAAO/S,KAAK,EAAE;EACduM,UAAAA,KAAA,CAAK9G,IAAI,CAAI2/G,UAAU,GAAA,yBAAA,GAA0BplH,KAAO,CAAC;EACzD,UAAA;EACF,QAAA;EAEA,QAAA,IAAM0lH,QAAQ,GAAGr8G,UAAU,CAACuF,KAAK,CAAC;UAClC,IAAA6B,MAAA,GAAAlE,KAAA;YAAQu4G,wBAAwB,GAAAr0G,MAAA,CAAxBq0G,wBAAwB;YAAED,gBAAgB,GAAAp0G,MAAA,CAAhBo0G,gBAAgB;EAClD,QAAA,IAAIc,wBAAwB,GAAGb,wBAAwB,CAACY,QAAQ,CAAC;UAAC,IAAAtyF,KAAA,GAAA,SAAAA,KAAAA,GAEhB;EAChD;EACA,YAAA,IAAMwyF,UAAU,GAAGf,gBAAgB,CAAC37G,CAAC,CAAC;EACtC,YAAA,IAAM2P,WAAW,GAAG+sG,UAAU,CAAC/sG,WAAW;EAC1C,YAAA,IAAI,CAACA,WAAW,CAACjK,KAAK,EAAE;EAAA,cAAA,OAAA,CAAA,CAAA;EAExB,YAAA;EACA,YAAA,IAAMi3G,WAAW,GAAGx8G,UAAU,CAACwP,WAAW,CAACjK,KAAK,CAAC;cACjD,IACEw2C,gBAAgB,CAACx2C,KAAK,EAAEiK,WAAW,CAACjK,KAAK,CAAC,IAC1CiK,WAAW,CAACsW,GAAG,CAACvuB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACwH,OAAO,CAACs9G,QAAQ,CAAC,KAAK,EAAE,EAC1D;EACAC,cAAAA,wBAAwB,GAAGb,wBAAwB,CAACe,WAAW,CAAC;gBAChE,IAAI,CAACF,wBAAwB,EAAE;EAAA,gBAAA,OAAA,CAAA,CAAA;EAE/B,cAAA;gBACA,IAAI9sG,WAAW,CAACoJ,IAAI,EAAE;EAAA,gBAAA,OAAA,CAAA,CAAA;EAEtB,cAAA;gBACA,OAAO6iG,wBAAwB,CAACe,WAAW,CAAC;EAC5ChtG,cAAAA,WAAW,CAACoJ,IAAI,GAAG,IAAIxY,UAAU,CAACmQ,QAAQ,CAAC;gBAC3Cf,WAAW,CAACjK,KAAK,GAAGA,KAAK;gBACzB+2G,wBAAwB,GAAGb,wBAAwB,CAACY,QAAQ,CAAC,GAC3DC,wBAAwB,CAACn5F,IAAI,CAAC,YAAM;kBAClC,OAAOjgB,KAAA,CAAKu5G,sCAAsC,CAChDF,UAAU,EACVT,YAAY,EACZvrG,QAAQ,EACR,2BACF,CAAC;EACH,cAAA,CAAC,CAAC;EACJ+rG,cAAAA,wBAAwB,CAACl5F,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,gBAAA,OAAKuM,KAAA,CAAKw5G,WAAW,CAAC/lH,KAAK,CAAC;gBAAA,CAAA,CAAC;EAAC,cAAA,OAAA,CAAA,CAAA;EAErE,YAAA;YACF,CAAC;YAAA6gC,IAAA;EAlCD,QAAA,KAAK,IAAI33B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG27G,gBAAgB,CAAC78G,MAAM,EAAEkB,CAAC,EAAE,EAAA;EAAA23B,UAAAA,IAAA,GAAAzN,KAAA,EAAA;EAAA,UAAA,IAAAyN,IAAA,KAAA,CAAA,EAK5C;EAAS,UAAA,IAAAA,IAAA,KAAA,CAAA,EAYP;EAAM,QAAA;UAmBZ,IAAI,CAAC8kF,wBAAwB,EAAE;EAC7Bp5G,UAAAA,KAAA,CAAKw5G,WAAW,CACd,IAAI/6F,KAAK,CAAA,SAAA,GACG06F,QAAQ,GAAA,oDAAA,GAAqDb,gBAAgB,CAAC78G,MAAM,GAAA,GAChG,CACF,CAAC;EACH,QAAA;EACF,MAAA,CAAC,CAAC,CACDykB,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,QAAA,OAAKuM,KAAA,CAAKw5G,WAAW,CAAC/lH,KAAK,CAAC;QAAA,CAAA,CAAC;MAC9C,CAAC;EAAAuM,IAAAA,KAAA,CAEOy5G,eAAe,GAAG,UAAC/oF,KAAY,EAAK;EAC1C1wB,MAAAA,KAAA,CAAK1J,GAAG,CAAA,IAAA,GAAKo6B,KAAK,CAAC/2B,IAAI,aAAS,CAAC;MACnC,CAAC;MAtlBCqG,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;EACd7qB,IAAAA,KAAA,CAAKwhB,MAAM,GAAGqJ,GAAG,CAACrJ,MAAM;MACxBxhB,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAq2G,aAAA,EAAAjtF,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAA2hH,aAAA,CAAA1hH,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAACihH,YAAY,EAAE;MACnB,IAAI,CAACrG,eAAe,EAAE;EACtB;EACA,IAAA,IAAM7xF,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1BA,MAAM,CAACm4F,+BAA+B,GAAG,IAAI;EAC7Cn4F,IAAAA,MAAM,CAACo4F,eAAe,GAAGp4F,MAAM,CAACq4F,uBAAuB,GAAGl/G,SAAS;MACnE6mB,MAAM,CAAC05B,UAAU,GAAG15B,MAAM,CAACg6B,gBAAgB,GAAG,EAAE;EAChD;MACA,IAAI,CAAC3wB,GAAG,GAAG,IAAI,CAACrJ,MAAM,GAAG,IAAI,CAAC+2F,wBAAwB,GAAG,IAAI;EAC7D;EACA,IAAA,IAAI,CAACI,gBAAgB,GAAG,IAAI,CAACc,eAAe,GAAG,IAAI;IACrD,CAAC;EAAAljH,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAI,CAACpE,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC9D,IAAA,IAAI,CAAC9jC,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACmlG,cAAc,EAAE,IAAI,CAAC8Y,eAAe,EAAE,IAAI,CAAC;EAC9D,IAAA,IAAI,CAACxoF,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAClE,IAAA,IAAI,CAAC1E,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAChE,IAAA,IAAI,CAAClkC,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC0kH,UAAU,EAAE,IAAI,CAACJ,YAAY,EAAE,IAAI,CAAC;IACzD,CAAC;EAAAnjH,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAI,CAAC3F,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC/D,IAAA,IAAI,CAAC9jC,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACmlG,cAAc,EAAE,IAAI,CAAC8Y,eAAe,EAAE,IAAI,CAAC;EAC/D,IAAA,IAAI,CAACxoF,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EACnE,IAAA,IAAI,CAAC1E,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC05D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EACjE,IAAA,IAAI,CAAClkC,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC0kH,UAAU,EAAE,IAAI,CAACJ,YAAY,EAAE,IAAI,CAAC;IAC1D,CAAC;EAAAnjH,EAAAA,MAAA,CAEOwjH,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAAC/+D,SAAqB,EAAsB;EACrE,IAAA,IAAAg/D,YAAA,GAA2C,IAAI,CAACx4F,MAAM;QAA9C05B,UAAU,GAAA8+D,YAAA,CAAV9+D,UAAU;QAAEC,kBAAkB,GAAA6+D,YAAA,CAAlB7+D,kBAAkB;EACtC,IAAA,IAAM8+D,sBAAsB,GAAG/+D,UAAU,oBAAVA,UAAU,CAAGF,SAAS,CAAC;EAEtD,IAAA,IAAIi/D,sBAAsB,EAAE;QAC1B,OAAOA,sBAAsB,CAACC,UAAU;EAC1C,IAAA;;EAEA;EACA,IAAA,IAAIl/D,SAAS,KAAKT,UAAU,CAACI,QAAQ,IAAIQ,kBAAkB,EAAE;EAC3D,MAAA,OAAOA,kBAAkB;EAC3B,IAAA;IACF,CAAC;EAAA5kD,EAAAA,MAAA,CAEO4jH,0BAA0B,GAAlC,SAAQA,0BAA0BA,CAACn/D,SAAqB,EAAkB;EACxE,IAAA,IAAMtnD,GAAG,GAAG,IAAI,CAACqmH,mBAAmB,CAAC/+D,SAAS,CAAC;MAC/C,IAAItnD,GAAG,KAAKiH,SAAS,EAAE;EACrB,MAAA,MAAM,IAAI8jB,KAAK,CAAA,oDAAA,GACuCu8B,SAAS,OAC/D,CAAC;EACH,IAAA;EACA,IAAA,OAAOtnD,GAAG;IACZ,CAAC;EAAA6C,EAAAA,MAAA,CAEO6jH,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAACp/D,SAAqB,EAAiB;EACpE,IAAA,IAAQE,UAAU,GAAK,IAAI,CAAC15B,MAAM,CAA1B05B,UAAU;EAClB,IAAA,IAAM++D,sBAAsB,GAAG/+D,UAAU,oBAAVA,UAAU,CAAGF,SAAS,CAAC;EAEtD,IAAA,IAAIi/D,sBAAsB,EAAE;QAC1B,OAAOA,sBAAsB,CAACI,oBAAoB;EACpD,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC/jH,GAAG,CAAA,+CAAA,GAAgD0kD,SAAS,QAAI,CAAC;EACxE,IAAA;IACF,CAAC;EAAAzkD,EAAAA,MAAA,CAEO+jH,sBAAsB,GAA9B,SAAQA,sBAAsBA,CAC5Bl/D,mBAAiC,EACyB;EAAA,IAAA,IAAAroB,MAAA,GAAA,IAAA;EAC1D,IAAA,IAAM1K,MAAM,GAAG,IAAI,CAACwC,GAAG,CAACxC,MAAM;MAC9B,IAAMkyF,WAAW,GAAG,SAAdA,WAAWA,CAAIzlH,KAAyB,EAAE6H,CAAC,EAAEi0C,CAAC,EAAA;QAAA,OAClD,CAAC,CAAC97C,KAAK,IAAI87C,CAAC,CAAC/0C,OAAO,CAAC/G,KAAK,CAAC,KAAK6H,CAAC;EAAA,IAAA,CAAA;EACnC,IAAA,IAAMgkB,WAAW,GAAG0H,MAAM,CACvBzX,GAAG,CAAC,UAAChQ,KAAK,EAAA;QAAA,OAAKA,KAAK,CAACmd,UAAU;EAAA,IAAA,CAAA,CAAC,CAChC6F,MAAM,CAAC22F,WAAW,CAAC;EACtB,IAAA,IAAMp+F,WAAW,GAAGkM,MAAM,CACvBzX,GAAG,CAAC,UAAChQ,KAAK,EAAA;QAAA,OAAKA,KAAK,CAAC8Z,UAAU;EAAA,IAAA,CAAA,CAAC,CAChCkJ,MAAM,CAAC22F,WAAW,CAAC;MACtB,IAAI55F,WAAW,CAACllB,MAAM,GAAG0gB,WAAW,CAAC1gB,MAAM,KAAK,CAAC,EAAE;EACjD0gB,MAAAA,WAAW,CAAC7W,IAAI,CAAC,aAAa,CAAC;EACjC,IAAA;EAEA,IAAA,OAAO,IAAI4Z,OAAO,CAChB,UACEC,OAGU,EACVmrB,MAAuB,EACpB;EACH,MAAA,IAAMkwE,QAAO,GAAG,SAAVA,OAAOA,CAAI1B,UAAU,EAAK;EAC9B,QAAA,IAAM99D,SAAS,GAAG89D,UAAU,CAAChlG,KAAK,EAAE;EACpCif,QAAAA,MAAI,CAAC0nF,mBAAmB,CAACz/D,SAAS,EAAEr6B,WAAW,EAAExE,WAAW,CAAC,CAC1D8D,IAAI,CAAC,UAACuyC,SAAS,EAAA;EAAA,UAAA,OAAKrzC,OAAO,CAAC;EAAE67B,YAAAA,SAAS,EAATA,SAAS;EAAEwX,YAAAA,SAAS,EAATA;EAAU,WAAC,CAAC;EAAA,QAAA,CAAA,CAAC,CACtDtyC,KAAK,CAAC,UAACzsB,KAAK,EAAK;YAChB,IAAIqlH,UAAU,CAACr9G,MAAM,EAAE;cACrB++G,QAAO,CAAC1B,UAAU,CAAC;EACrB,UAAA,CAAC,MAAM,IAAIrlH,KAAK,YAAYinH,WAAW,EAAE;cACvCpwE,MAAM,CAAC72C,KAAK,CAAC;EACf,UAAA,CAAC,MAAM;cACL62C,MAAM,CACJ,IAAIowE,WAAW,CACb;gBACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;gBACjCjb,OAAO,EAAE/sB,YAAY,CAACwlH,oBAAoB;EAC1ClnH,cAAAA,KAAK,EAALA,KAAK;EACLo9B,cAAAA,KAAK,EAAE;EACT,aAAC,EACDp9B,KAAK,CAACsrC,OACR,CACF,CAAC;EACH,UAAA;EACF,QAAA,CAAC,CAAC;QACN,CAAC;QACDy7E,QAAO,CAACp/D,mBAAmB,CAAC;EAC9B,IAAA,CACF,CAAC;IACH,CAAC;IAAA7kD,MAAA,CAEO8kD,2BAA2B,GAAnC,SAAQA,6BAA2BA,CACjCL,SAAqB,EACrB4/D,uBAAsD,EACvB;EAC/B,IAAA,IAAQjB,+BAA+B,GAAK,IAAI,CAACn4F,MAAM,CAA/Cm4F,+BAA+B;EACvC,IAAA,IAAI,EAAE,OAAOA,+BAA+B,KAAK,UAAU,CAAC,EAAE;QAC5D,IAAIkB,UAAU,iEAA+DlB,+BAAiC;QAC9G,IACEt+D,2BAA2B,KAAK,IAAI,IACpCvhD,IAAI,CAAC0vF,QAAQ,CAACitB,QAAQ,KAAK,OAAO,EAClC;UACAoE,UAAU,GAAA,gFAAA,GAAoFrxB,QAAQ,CAACitB,QAAU;EACnH,MAAA;QACA,OAAOv3F,OAAO,CAACorB,MAAM,CAAC,IAAI7rB,KAAK,CAACo8F,UAAU,CAAC,CAAC;EAC9C,IAAA;EAEA,IAAA,OAAOlB,+BAA+B,CAAC3+D,SAAS,EAAE4/D,uBAAuB,CAAC;IAC5E,CAAC;IAAArkH,MAAA,CAEOkkH,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBz/D,SAAqB,EACrBr6B,WAAqB,EACrBxE,WAAqB,EACD;EAAA,IAAA,IAAA2+F,qBAAA;QAAAlpD,MAAA,GAAA,IAAA;EACpB;EACA,IAAA,IAAMmpD,qBAAqB,GAAGx/D,wCAAwC,CACpEP,SAAS,EACTr6B,WAAW,EACXxE,WAAW,EACX,IAAI,CAACqF,MAAM,CAACg6B,gBAAgB,IAAI,EAClC,CAAC;EACD,IAAA,IAAI48D,uBAAuB,GAAG,IAAI,CAACA,uBAAuB,CAACp9D,SAAS,CAAC;MACrE,IAAIggE,eAAe,IAAAF,qBAAA,GAAG1C,uBAAuB,KAAA,IAAA,GAAA,MAAA,GAAvB0C,qBAAA,CAAyBE,eAAe;MAC9D,IAAI,CAACA,eAAe,EAAE;QACpB,IAAI,CAAC1kH,GAAG,CAAA,+BAAA,GACyB0kD,SAAS,0CAAoCn1B,SAAS,CACnFk1F,qBACF,CACF,CAAC;QACDC,eAAe,GAAG,IAAI,CAAC3/D,2BAA2B,CAChDL,SAAS,EACT+/D,qBACF,CAAC;QACD,IAAME,0BAA0B,GAAI7C,uBAAuB,GACzD,IAAI,CAACA,uBAAuB,CAACp9D,SAAS,CAAC,GACrC;EACEggE,QAAAA,eAAe,EAAfA;SAC2B;EACjCA,MAAAA,eAAe,CAAC96F,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAC/Bm+D,QAAAA,MAAI,CAACt7D,GAAG,CAAA,0CAAA,GACoC0kD,SAAS,GAAA,MAAA,GAAMvnD,KAC3D,CAAC;EACH,MAAA,CAAC,CAAC;EACF,MAAA,OAAOunH,eAAe,CAAC/6F,IAAI,CAAC,UAACi7F,oBAAoB,EAAK;EACpDtpD,QAAAA,MAAI,CAACt7D,GAAG,CAAA,0BAAA,GACoB4kH,oBAAoB,CAAClgE,SAAS,gBAC1D,CAAC;EAED,QAAA,IAAMmgE,kBAAkB,GAAGvpD,MAAI,CAACwpD,sBAAsB,CAACpgE,SAAS,CAAC;EAEjE4W,QAAAA,MAAI,CAACt7D,GAAG,CAAA,0BAAA,GAA2B0kD,SAAS,OAAG,CAAC;EAChD,QAAA,IAAMwX,SAAS,GAAIyoD,0BAA0B,CAACzoD,SAAS,GACrD0oD,oBAAoB,CAACG,eAAe,EAAE,CAACp7F,IAAI,CAAC,UAACuyC,SAAS,EAAK;EACzDZ,UAAAA,MAAI,CAACt7D,GAAG,CAAA,2BAAA,GAA4B0kD,SAAS,OAAG,CAAC;YACjDigE,0BAA0B,CAACK,YAAY,GAAG,IAAI;EAC9C,UAAA,OAAOH,kBAAkB,CAACl7F,IAAI,CAAC,UAACs7F,WAAW,EAAK;EAC9C,YAAA,IAAIA,WAAW,EAAE;gBACf,OAAO3pD,MAAI,CAAC4pD,6BAA6B,CACvChpD,SAAS,EACTxX,SAAS,EACTugE,WACF,CAAC;EACH,YAAA;EACA,YAAA,OAAO/oD,SAAS;EAClB,UAAA,CAAC,CAAC;EACJ,QAAA,CAAC,CAAE;EAELA,QAAAA,SAAS,CAACtyC,KAAK,CAAC,UAACzsB,KAAK,EAAK;EACzBm+D,UAAAA,MAAI,CAACn+D,KAAK,CAAA,oCAAA,GAC4BunD,SAAS,GAAA,OAAA,GAAOvnD,KACtD,CAAC;EACH,QAAA,CAAC,CAAC;EAEF,QAAA,OAAO++D,SAAS;EAClB,MAAA,CAAC,CAAC;EACJ,IAAA;MACA,OAAOwoD,eAAe,CAAC/6F,IAAI,CAAC,YAAA;QAAA,OAAMm4F,uBAAuB,CAAE5lD,SAAS;EAAA,IAAA,CAAC,CAAC;IACxE,CAAC;EAAAj8D,EAAAA,MAAA,CAEOklH,4BAA4B,GAApC,SAAQA,4BAA4BA,CAAAr7G,IAAA,EAQT;EAAA,IAAA,IAPzBkM,WAAW,GAAAlM,IAAA,CAAXkM,WAAW;QACX0uC,SAAS,GAAA56C,IAAA,CAAT46C,SAAS;QACTwX,SAAS,GAAApyD,IAAA,CAAToyD,SAAS;EAMT,IAAA,IAAI,CAACl8D,GAAG,CAAA,gCAAA,GAC0B0kD,SAAS,GAAA,YAAA,GAAYl+C,UAAU,CAC7DwP,WAAW,CAACjK,KAAK,IAAK,EACxB,CAAC,iBAAYiK,WAAW,CAACsW,GAC3B,CAAC;EAED,IAAA,IAAM84F,gBAAgB,GAAGlpD,SAAS,CAACmpD,aAAa,EAAE;EAElD,IAAA,IAAMC,sBAA8C,GAAG;EACrDtvG,MAAAA,WAAW,EAAXA,WAAW;EACX0uC,MAAAA,SAAS,EAATA,SAAS;EACTwX,MAAAA,SAAS,EAATA,SAAS;EACTkpD,MAAAA,gBAAgB,EAAhBA,gBAAgB;EAChBG,MAAAA,SAAS,EAAE;OACZ;EAED,IAAA,IAAI,CAACvD,gBAAgB,CAAChzG,IAAI,CAACs2G,sBAAsB,CAAC;EAElD,IAAA,OAAOA,sBAAsB;IAC/B,CAAC;EAAArlH,EAAAA,MAAA,CAEOulH,eAAe,GAAvB,SAAQA,eAAeA,CAACF,sBAA8C,EAAE;EACtE,IAAA,IAAMtvG,WAAW,GAAGsvG,sBAAsB,CAACtvG,WAAW;MACtD,IAAIA,WAAW,CAACoJ,IAAI,EAAE;EACpB,MAAA,IAAMqmG,iBAAiB,GAAG,IAAI,CAACN,4BAA4B,CACzDG,sBACF,CAAC;EACD,MAAA,IAAMv5G,KAAK,GAAG25G,cAAc,CAAC1vG,WAAW,CAAC;QACzC,IAAMjD,MAAM,GAAG,MAAM;QACrB,IAAI,CAACkvG,wBAAwB,CAACl2G,KAAK,CAAC,GAClC,IAAI,CAACk3G,sCAAsC,CACzCwC,iBAAiB,EACjB1yG,MAAM,EACNiD,WAAW,CAACoJ,IAAI,CAACrY,MAAM,EACvB,SACF,CAAC;EACL,IAAA,CAAC,MAAM;QACL,IAAI,CAACnE,IAAI,CAAA,yDAA0D,CAAC;EACtE,IAAA;EACA;EACA,IAAA,IAAI,CAAC+iH,aAAa,CAACL,sBAAsB,CAAC;IAC5C,CAAC;IAAArlH,MAAA,CAEO2lH,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBN,sBAA8C,EAC9Ct6G,IAA6B,EACd;EACf,IAAA,IAAM66G,UAAU,GAAGP,sBAAsB,CAACF,gBAAgB;MAC1D,IAAI,CAACplH,GAAG,CAAA,yBAAA,GACmB6lH,UAAU,CAAChJ,SAAS,GAAA,eAAA,GAAer2G,UAAU,CACpE8+G,sBAAsB,CAACtvG,WAAW,CAACjK,KAAK,IAAI,EAC9C,CAAC,gCACiBf,IAAI,CAAC2B,UAAU,GAAA,GACnC,CAAC;EACD,IAAA,OAAOk5G,UAAU,CAACxkH,MAAM,CAAC2J,IAAI,CAAC;IAChC,CAAC;EAAA/K,EAAAA,MAAA,CAEM6lH,2BAA2B,GAAlC,SAAOA,2BAA2BA,GAAuB;EAAA,IAAA,IAAAnpD,MAAA,GAAA,IAAA;EACvD,IAAA,OAAQ33D,MAAM,CAAChB,IAAI,CAAC,IAAI,CAAC89G,uBAAuB,CAAC,CAC9CxnG,GAAG,CAAC,UAACoqC,SAAS,EAAA;QAAA,OAAM;EACnBA,QAAAA,SAAS,EAATA,SAAS;EACTsgE,QAAAA,YAAY,EAAEroD,MAAI,CAACmlD,uBAAuB,CAACp9D,SAAS,CAAC,CAAEsgE;SACxD;EAAA,IAAA,CAAC,CAAC,CACF13F,MAAM,CAAC,UAAA+N,KAAA,EAAA;EAAA,MAAA,IAAG2pF,YAAY,GAAA3pF,KAAA,CAAZ2pF,YAAY;QAAA,OAAO,CAAC,CAACA,YAAY;EAAA,IAAA,CAAA,CAAC,CAC5C1qG,GAAG,CAAC,UAAAytB,KAAA,EAAA;EAAA,MAAA,IAAG2c,SAAS,GAAA3c,KAAA,CAAT2c,SAAS;QAAA,OAAOD,gCAAgC,CAACC,SAAS,CAAC;EAAA,IAAA,CAAA,CAAC,CACnEp3B,MAAM,CAAC,UAACo3B,SAAS,EAAA;QAAA,OAAoC,CAAC,CAACA,SAAS;MAAA,CAAA,CAAC;IACtE,CAAC;EAAAzkD,EAAAA,MAAA,CAEM8lH,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAACjhE,mBAAiC,EAAiB;EAAA,IAAA,IAAA4Y,MAAA,GAAA,IAAA;MAC1E,OAAO,IAAI,CAACsoD,4BAA4B,CAAClhE,mBAAmB,CAAC,CAACn7B,IAAI,CAChE,UAAA0uE,KAAA,EAA8B;EAAA,MAAA,IAA3B3zC,SAAS,GAAA2zC,KAAA,CAAT3zC,SAAS;UAAEwX,SAAS,GAAAm8B,KAAA,CAATn8B,SAAS;EACrB,MAAA,OAAOwB,MAAI,CAACuoD,mBAAmB,CAACvhE,SAAS,EAAEwX,SAAS,CAAC;EACvD,IAAA,CACF,CAAC;IACH,CAAC;EAAAj8D,EAAAA,MAAA,CAEMimH,eAAe,GAAtB,SAAOA,eAAeA,CACpBphE,mBAAiC,EACN;EAAA,IAAA,IAAAsf,MAAA,GAAA,IAAA;EAC3B,IAAA,OAAO,IAAIx7C,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;QACtCowB,MAAI,CAAC4hD,4BAA4B,CAAClhE,mBAAmB,CAAC,CACnDn7B,IAAI,CAAC,UAAA++E,KAAA,EAAmB;EAAA,QAAA,IAAhBhkD,SAAS,GAAAgkD,KAAA,CAAThkD,SAAS;EAChB,QAAA,IAAMi+D,eAAe,GAAGl+D,gCAAgC,CAACC,SAAS,CAAC;EACnE,QAAA,IAAIi+D,eAAe,EAAE;YACnB95F,OAAO,CAAC85F,eAAe,CAAC;EAC1B,QAAA,CAAC,MAAM;EACL3uE,UAAAA,MAAM,CACJ,IAAI7rB,KAAK,6CAA0Cu8B,SAAS,GAAA,IAAG,CACjE,CAAC;EACH,QAAA;EACF,MAAA,CAAC,CAAC,CACD96B,KAAK,CAACoqB,MAAM,CAAC;EAClB,IAAA,CAAC,CAAC;IACJ,CAAC;EAAA/zC,EAAAA,MAAA,CAEMkmH,qBAAqB,GAA5B,SAAOA,qBAAqBA,CAAC78G,IAAc,EAA6B;EACtE,IAAA,IAAMyD,UAAU,GAAG/H,MAAM,CAAChB,IAAI,CAACsF,IAAI,CAACa,SAAS,IAAI,EAAE,CAAuB;EAC1E,IAAA,IAAI,CAAC,IAAI,CAAC03G,gBAAgB,EAAE;QAC1B,IAAI,CAAC7hH,GAAG,CAAA,0CAAA,GACqCsJ,IAAI,CAACC,EAAE,GAAA,GAAA,GAAID,IAAI,CAACjG,IAAI,UAC7DiG,IAAI,CAACgB,KAAK,GAAA,gBAAA,GACKyC,UAAU,CAACmQ,IAAI,CAAC,IAAI,CACvC,CAAC;QACD,IAAI,CAAC2kG,gBAAgB,GAAG,IAAI,CAACa,mBAAmB,CAAC31G,UAAU,CAAC;EAC9D,IAAA;MACA,OAAO,IAAI,CAAC80G,gBAAgB;IAC9B,CAAC;EAAA5hH,EAAAA,MAAA,CAEOyiH,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzB31G,UAA8B,EACH;EAC3B,IAAA,IAAMq5G,kBAAkB,GAAGzhE,sBAAsB,CAAC,IAAI,CAACz5B,MAAM,CAAC;EAC9D,IAAA,IAAM45B,mBAAmB,GAAG/3C,UAAU,CACnCuN,GAAG,CAACiqC,gCAAgC,CAAC,CACrCj3B,MAAM,CACL,UAAC9uB,KAAK,EAAA;EAAA,MAAA,OAAK,CAAC,CAACA,KAAK,IAAI4nH,kBAAkB,CAAC7gH,OAAO,CAAC/G,KAAK,CAAC,KAAK,EAAE;EAAA,IAAA,CAChE,CAAwB;EAE1B,IAAA,OAAO,IAAI,CAAC0nH,eAAe,CAACphE,mBAAmB,CAAC;IAClD,CAAC;EAAA7kD,EAAAA,MAAA,CAEMomH,YAAY,GAAnB,SAAOA,YAAYA,CAACrwG,WAAqB,EAA8B;EACrE,IAAA,IAAQgsG,gBAAgB,GAAK,IAAI,CAAzBA,gBAAgB;EACxB,IAAA,KAAK,IAAI37G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG27G,gBAAgB,CAAC78G,MAAM,EAAEkB,CAAC,EAAE,EAAE;QAChD,IAAMigH,MAAM,GAAGD,aAAY,CAACrwG,WAAW,EAAEgsG,gBAAgB,CAAC37G,CAAC,CAAC,CAAC;EAC7D,MAAA,IAAIigH,MAAM,EAAE;EACV,QAAA,OAAOA,MAAM;EACf,MAAA;EACF,IAAA;EACA,IAAA,OAAOjiH,SAAS;IAClB,CAAC;EAAApE,EAAAA,MAAA,CAEMsmH,OAAO,GAAd,SAAOA,OAAOA,CAACv7G,IAAmB,EAAmC;EAAA,IAAA,IAAAk5F,MAAA,GAAA,IAAA;EACnE,IAAA,IAAMluF,WAAW,GAAGhL,IAAI,CAACw7G,OAAO,CAACxwG,WAAW;EAE5C,IAAA,IAAMjK,KAAK,GAAG25G,cAAc,CAAC1vG,WAAW,CAAC;EACzC,IAAA,IAAMywG,SAAS,GAAG,IAAI,CAACrE,YAAY,CAACr2G,KAAK,CAAC;MAC1C,IAAI06G,SAAS,IAAI,IAAI,CAACJ,YAAY,CAACrwG,WAAW,CAAC,KAAK,gBAAgB,EAAE;QACpE,IAAM7Y,KAAK,GAAGupH,iBAAiB,CAC7BD,SAAS,IAAI,gBAAgB,EAC7BzwG,WACF,CAAC;QACD,IAAI,CAACktG,WAAW,CAAC/lH,KAAK,EAAE6N,IAAI,CAAC1B,IAAI,CAAC;EAClC,MAAA,OAAOsf,OAAO,CAACorB,MAAM,CAAC72C,KAAK,CAAC;EAC9B,IAAA;EACA,IAAA,IAAMwpH,UAAU,GAAA,UAAA,GAAc56G,KAAK,GAAA,aAAA,GAAaiK,WAAW,CAACnK,SAAS,GAAA,aAAA,GAAamK,WAAW,CAACkiC,MAAM,GAAA,QAAA,GAASliC,WAAW,CAACsW,GAAG,GAAA,GAAG;EAE/H,IAAA,IAAI,CAACtsB,GAAG,CAAA,2BAAA,GAA6B2mH,UAAY,CAAC;EAElD,IAAA,IAAMC,iBAAiB,GAAG,IAAI,CAAC3E,wBAAwB,CAACl2G,KAAK,CAAC;MAC9D,IAAI,CAAC66G,iBAAiB,EAAE;EACtB,MAAA,IAAM9D,wBAAwB,GAAG,IAAI,CAAC+D,yBAAyB,CAC7D7wG,WACF,CAAC,CACE2T,IAAI,CAAC,UAAAk/E,KAAA,EAA8B;EAAA,QAAA,IAA3BnkD,SAAS,GAAAmkD,KAAA,CAATnkD,SAAS;YAAEwX,SAAS,GAAA2sC,KAAA,CAAT3sC,SAAS;UAC3BgoC,MAAI,CAAC4iB,gBAAgB,EAAE;UACvB5iB,MAAI,CAAClkG,GAAG,CAAA,6BAAA,GACwBgL,IAAI,CAAC1B,IAAI,CAACC,EAAE,GAAA,GAAA,GAAIyB,IAAI,CAAC1B,IAAI,CAACjG,IAAI,UAAK2H,IAAI,CAAC1B,IAAI,CAACgB,KAAK,GAAA,aAAA,GAAcq8G,UAChG,CAAC;UAED,OAAOziB,MAAI,CAAC+hB,mBAAmB,CAACvhE,SAAS,EAAEwX,SAAS,CAAC,CAACvyC,IAAI,CAAC,YAAM;YAC/Du6E,MAAI,CAAC4iB,gBAAgB,EAAE;YACvB,OAAO5iB,MAAI,CAACihB,4BAA4B,CAAC;EACvCzgE,YAAAA,SAAS,EAATA,SAAS;EACTwX,YAAAA,SAAS,EAATA,SAAS;EACTlmD,YAAAA,WAAW,EAAXA;EACF,WAAC,CAAC;EACJ,QAAA,CAAC,CAAC;EACJ,MAAA,CAAC,CAAC,CACD2T,IAAI,CAAC,UAAC87F,iBAAiB,EAAK;UAC3B,IAAM1yG,MAAM,GAAG,MAAM;EACrB,QAAA,IAAMgE,QAAQ,GAAGf,WAAW,CAACoJ,IAAI,GAAGpJ,WAAW,CAACoJ,IAAI,CAACrY,MAAM,GAAG,IAAI;UAClE,OAAOm9F,MAAI,CAAC+e,sCAAsC,CAChDwC,iBAAiB,EACjB1yG,MAAM,EACNgE,QAAQ,EACR,cACF,CAAC;EACH,MAAA,CAAC,CAAC;EAEJ+rG,MAAAA,wBAAwB,CAACl5F,KAAK,CAAC,UAACzsB,KAAK,EAAA;UAAA,OACnC+mG,MAAI,CAACgf,WAAW,CAAC/lH,KAAK,EAAE6N,IAAI,CAAC1B,IAAI,CAAC;EAAA,MAAA,CACpC,CAAC;EACD,MAAA,IAAI,CAAC24G,wBAAwB,CAACl2G,KAAK,CAAC,GAAG+2G,wBAAwB;EAE/D,MAAA,OAAOA,wBAAwB;EACjC,IAAA;;EAEA;EACA8D,IAAAA,iBAAiB,CAACh9F,KAAK,CAAC,UAACzsB,KAAK,EAAK;QACjC,IAAIA,KAAK,YAAYinH,WAAW,EAAE;EAChC,QAAA,IAAMhsE,SAAS,GAAApmC,cAAA,KAAQ7U,KAAK,CAAC6N,IAAI,CAAE;UACnC,IAAIk5F,MAAI,CAACmiB,YAAY,CAACrwG,WAAW,CAAC,KAAK,gBAAgB,EAAE;YACvDoiC,SAAS,CAACpiC,WAAW,GAAGA,WAAW;EACrC,QAAA;UACA,IAAM+wG,WAAW,GAAG,IAAI3C,WAAW,CAAChsE,SAAS,EAAEj7C,KAAK,CAACsrC,OAAO,CAAC;UAC7Dy7D,MAAI,CAACgf,WAAW,CAAC6D,WAAW,EAAE/7G,IAAI,CAAC1B,IAAI,CAAC;EAC1C,MAAA;EACF,IAAA,CAAC,CAAC;EAEF,IAAA,OAAOs9G,iBAAiB;IAC1B,CAAC;EAAA3mH,EAAAA,MAAA,CAEO6mH,gBAAgB,GAAxB,SAAQA,gBAAgBA,CAACr+E,OAAO,EAAkC;EAChE,IAAA,IAAI,CAAC,IAAI,CAAClU,GAAG,EAAS;EACpB,MAAA,MAAM,IAAIpM,KAAK,CAAC,eAAe,CAAC;EAClC,IAAA;IACF,CAAC;IAAAloB,MAAA,CAEOijH,WAAW,GAAnB,SAAQA,WAAWA,CAAC/lH,KAA0B,EAAEmM,IAAe,EAAE;EAC/D,IAAA,IAAI,CAAC,IAAI,CAACirB,GAAG,EAAS;EACpB,MAAA;EACF,IAAA;MAEA,IAAIp3B,KAAK,YAAYinH,WAAW,EAAE;EAChC,MAAA,IAAI96G,IAAI,EAAE;EACRnM,QAAAA,KAAK,CAAC6N,IAAI,CAAC1B,IAAI,GAAGA,IAAI;EACxB,MAAA;EACA,MAAA,IAAM0D,QAAQ,GAAG7P,KAAK,CAAC6N,IAAI,CAACgL,WAAW;QACvC,IAAI,CAAC7Y,KAAK,CAAA,EAAA,GACLA,KAAK,CAACsrC,OAAO,IACdz7B,QAAQ,GAAA,IAAA,GAAQxG,UAAU,CAACwG,QAAQ,CAACjB,KAAK,IAAI,EAAE,CAAC,GAAA,GAAA,GAAM,EAAE,CAE5D,CAAC;EACD,MAAA,IAAI,CAACwoB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE78B,KAAK,CAAC6N,IAAI,CAAC;EAC5C,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC7N,KAAK,CAACA,KAAK,CAACsrC,OAAO,CAAC;QACzB,IAAI,CAAClU,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;UACjCjb,OAAO,EAAE/sB,YAAY,CAACs9D,kBAAkB;EACxCh/D,QAAAA,KAAK,EAALA,KAAK;EACLo9B,QAAAA,KAAK,EAAE;EACT,OAAC,CAAC;EACJ,IAAA;IACF,CAAC;EAAAt6B,EAAAA,MAAA,CAEO4mH,yBAAyB,GAAjC,SAAQA,yBAAyBA,CAC/B7wG,WAAqB,EACqC;EAC1D,IAAA,IAAMjK,KAAK,GAAG25G,cAAc,CAAC1vG,WAAW,CAAC;EACzC,IAAA,IAAMsvG,sBAAsB,GAAG,IAAI,CAACrD,wBAAwB,CAACl2G,KAAK,CAAC;MACnE,IAAI,CAACu5G,sBAAsB,EAAE;EAC3B,MAAA,IAAM5gE,SAAS,GAAGH,gCAAgC,CAChDvuC,WAAW,CAACnK,SACd,CAAC;EACD,MAAA,IAAMi5C,mBAAmB,GAAGJ,SAAS,GACjC,CAACA,SAAS,CAAC,GACXC,sBAAsB,CAAC,IAAI,CAACz5B,MAAM,CAAC;EACvC,MAAA,OAAO,IAAI,CAAC84F,sBAAsB,CAACl/D,mBAAmB,CAAC;EACzD,IAAA;EACA,IAAA,OAAOwgE,sBAAsB;IAC/B,CAAC;EAAArlH,EAAAA,MAAA,CAEO+lH,4BAA4B,GAApC,SAAQA,4BAA4BA,CAClClhE,mBAAiC,EACiC;EAClE,IAAA,IAAI,CAACA,mBAAmB,CAAC3/C,MAAM,EAAE;EAC/B2/C,MAAAA,mBAAmB,GAAGH,sBAAsB,CAAC,IAAI,CAACz5B,MAAM,CAAC;EAC3D,IAAA;EACA,IAAA,IAAI45B,mBAAmB,CAAC3/C,MAAM,KAAK,CAAC,EAAE;QACpC,MAAM,IAAIi/G,WAAW,CACnB;UACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;UACjCjb,OAAO,EAAE/sB,YAAY,CAACmoH,gCAAgC;EACtDzsF,QAAAA,KAAK,EAAE;SACR,EAAA,mDAAA,GACmDhL,SAAS,CAAC;EAC5Dq1B,QAAAA,UAAU,EAAE,IAAI,CAAC15B,MAAM,CAAC05B;EAC1B,OAAC,CACH,CAAC;EACH,IAAA;EACA,IAAA,OAAO,IAAI,CAACo/D,sBAAsB,CAACl/D,mBAAmB,CAAC;IACzD,CAAC;IAAA7kD,MAAA,CA2GOgmH,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBvhE,SAAqB,EACrBwX,SAAoB,EACL;EAAA,IAAA,IAAAooC,MAAA,GAAA,IAAA;EACf,IAAA,IAAI,IAAI,CAACpoC,SAAS,KAAKA,SAAS,EAAE;EAChC,MAAA,OAAOtzC,OAAO,CAACC,OAAO,EAAE;EAC1B,IAAA;MACA,IAAMs1E,KAAK,GAAG,IAAI,CAAC+jB,iBAAiB,CAACxkH,KAAK,EAAE;EAE5C,IAAA,IAAI,CAACsC,GAAG,CAAA,2BAAA,GAA4B0kD,SAAS,OAAG,CAAC;EACjD;EACA;MACA,IAAMuiE,mBAAmB,GAAGr+F,OAAO,CAACW,GAAG,CAAC40E,KAAK,CAAC,CAACx0E,IAAI,CAAC,YAAM;EACxD,MAAA,IAAI,CAAC26E,MAAI,CAAC71E,KAAK,EAAE;UACf61E,MAAI,CAACpoC,SAAS,GAAG,IAAI;EACrB,QAAA,MAAM,IAAI/zC,KAAK,CACb,2DACF,CAAC;EACH,MAAA;EACA,MAAA,OAAOm8E,MAAI,CAAC71E,KAAK,CAACy4F,YAAY,CAAChrD,SAAS,CAAC;EAC3C,IAAA,CAAC,CAAC;MACF,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC1B,IAAA,IAAI,CAACgmD,iBAAiB,CAAClzG,IAAI,CAACi4G,mBAAmB,CAAC;EAChD,IAAA,OAAOA,mBAAmB,CAACt9F,IAAI,CAAC,YAAM;EACpC26E,MAAAA,MAAI,CAACtkG,GAAG,CAAA,uBAAA,GAAwB0kD,SAAS,OAAG,CAAC;EAC7Cy5C,MAAAA,KAAK,CAACnvF,IAAI,CAACi4G,mBAAoB,CAAC;QAChC3iB,MAAI,CAAC4d,iBAAiB,GAAG5d,MAAI,CAAC4d,iBAAiB,CAAC50F,MAAM,CACpD,UAAC+vC,CAAC,EAAA;UAAA,OAAK8gC,KAAK,CAAC54F,OAAO,CAAC83D,CAAC,CAAC,KAAK,EAAE;EAAA,MAAA,CAChC,CAAC;EACH,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAp9D,EAAAA,MAAA,CAEOgjH,sCAAsC,GAA9C,SAAQA,sCAAsCA,CAC5Cn/G,OAA+B,EAC/Bw+G,YAAoB,EACpBvrG,QAA4B,EAC5Bsa,MAIa,EAC4B;EAAA,IAAA,IAAA81F,qBAAA;QAAAzhB,MAAA,GAAA,IAAA;MACzC,IAAM0hB,qBAAqB,IAAAD,qBAAA,GACzB,IAAI,CAACj8F,MAAM,CAAC05B,UAAU,KAAA,IAAA,IAAA,CAAAuiE,qBAAA,GAAtBA,qBAAA,CAAyBrjH,OAAO,CAAC4gD,SAAS,CAAC,KAAA,IAAA,GAAA,MAAA,GAA3CyiE,qBAAA,CAA6CE,eAAe;EAC9D,IAAA,IAAID,qBAAqB,EAAE;QACzB,IAAI;EACF,QAAA,IAAME,cAAwD,GAC5DF,qBAAqB,CAACz9G,IAAI,CAAC,IAAI,CAAC4qB,GAAG,EAAE+tF,YAAY,EAAEvrG,QAAQ,EAAEjT,OAAO,CAAC;UACvE,IAAI,CAACwjH,cAAc,EAAE;EACnB,UAAA,MAAM,IAAIn/F,KAAK,CACb,yDACF,CAAC;EACH,QAAA;UACAm6F,YAAY,GAAGgF,cAAc,CAAChF,YAAY;UAC1CvrG,QAAQ,GAAGuwG,cAAc,CAACvwG,QAAQ,GAAGuwG,cAAc,CAACvwG,QAAQ,GAAG,IAAI;EACnEjT,QAAAA,OAAO,CAACkS,WAAW,CAACoJ,IAAI,GAAGrI,QAAQ,GAAG,IAAInQ,UAAU,CAACmQ,QAAQ,CAAC,GAAG,IAAI;QACvE,CAAC,CAAC,OAAO5Z,KAAK,EAAE;EACd,QAAA,IAAI,CAACyF,IAAI,CAACzF,KAAK,CAACsrC,OAAO,CAAC;UACxB,IAAK,IAAI,CAAClU,GAAG,IAAY,IAAI,CAACA,GAAG,CAACrJ,MAAM,CAACvoB,KAAK,EAAE;EAC9C,UAAA,MAAMxF,KAAK;EACb,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAI4Z,QAAQ,KAAK,IAAI,EAAE;EACrB,MAAA,IAAI,CAAC/W,GAAG,CAAA,qCAAA,GAAsCqxB,MAAM,qBAAiB,CAAC;EACtE,MAAA,OAAOzI,OAAO,CAACC,OAAO,CAAC/kB,OAAO,CAAC;EACjC,IAAA;EAEA,IAAA,IAAMiI,KAAK,GAAG25G,cAAc,CAAC5hH,OAAO,CAACkS,WAAW,CAAC;EACjD,IAAA,IAAMuxG,MAAM,GAAGzjH,OAAO,CAACkS,WAAW,CAACsW,GAAG;EACtC,IAAA,IAAI,CAACtsB,GAAG,CAAA,uCAAA,GACiCqxB,MAAM,kBAAYtlB,KAAK,GAAA,QAAA,GAASw7G,MAAM,GAAA,oBAAA,GAAqBjF,YAAY,GAAA,WAAA,GAC5GvrG,QAAQ,CAACpK,UAAU,MAEvB,CAAC;EAED,IAAA,IAAM66G,aAAa,GAAG,IAAI/1B,YAAY,EAAE;MAExC,IAAMg2B,SAAS,GAAI3jH,OAAO,CAAC4jH,UAAU,GAAG,UAACttF,KAA2B,EAAK;EACvE,MAAA,IAAMyrF,UAAU,GAAG/hH,OAAO,CAACshH,gBAAgB;QAC3C,IAAI,CAACS,UAAU,EAAS;UACtB2B,aAAa,CAACphD,IAAI,CAAC,OAAO,EAAE,IAAIj+C,KAAK,CAAC,eAAe,CAAC,CAAC;EACvD,QAAA;EACF,MAAA;EACA,MAAA,IAAQw/F,WAAW,GAAcvtF,KAAK,CAA9ButF,WAAW;UAAEl/E,OAAO,GAAKrO,KAAK,CAAjBqO,OAAO;EAC5Bi9D,MAAAA,MAAI,CAAC1lG,GAAG,CAAA,IAAA,GACF2nH,WAAW,GAAA,iCAAA,GAAgC9B,UAAU,CAAChJ,SAAS,GAAA,mBAAA,GAAmBp0E,OAAO,CAAC97B,UAChG,CAAC;EACD,MAAA,IACEg7G,WAAW,KAAK,iBAAiB,IACjCA,WAAW,KAAK,iBAAiB,EACjC;EACAjiB,QAAAA,MAAI,CAACkiB,YAAY,CAAC9jH,OAAO,EAAE2kC,OAAO,CAAC,CAAC7e,KAAK,CAAC,UAACzsB,KAAK,EAAK;EACnD,UAAA,IAAIqqH,aAAa,CAACK,UAAU,EAAE,CAAC1iH,MAAM,EAAE;EACrCqiH,YAAAA,aAAa,CAACphD,IAAI,CAAC,OAAO,EAAEjpE,KAAK,CAAC;EACpC,UAAA,CAAC,MAAM;EACLuoG,YAAAA,MAAI,CAACwd,WAAW,CAAC/lH,KAAK,CAAC;EACzB,UAAA;EACF,QAAA,CAAC,CAAC;EACJ,MAAA,CAAC,MAAM,IAAIwqH,WAAW,KAAK,iBAAiB,EAAE;EAC5C,QAAA,IAAI7jH,OAAO,CAAC4gD,SAAS,KAAKT,UAAU,CAACE,QAAQ,EAAE;EAC7CuhD,UAAAA,MAAI,CAACkgB,gBAAgB,CAAC9hH,OAAO,EAAEi/C,cAAc,CAAC,cAAc,CAAC,CAAC,CAC3Dp5B,IAAI,CAAC,YAAA;EAAA,YAAA,OAAM+7E,MAAI,CAACigB,aAAa,CAAC7hH,OAAO,CAAC;EAAA,UAAA,CAAA,CAAC,CACvC8lB,KAAK,CAAC,UAACzsB,KAAK,EAAA;EAAA,YAAA,OAAKuoG,MAAI,CAACwd,WAAW,CAAC/lH,KAAK,CAAC;YAAA,CAAA,CAAC;EAC9C,QAAA;EACF,MAAA,CAAC,MAAM;EACLuoG,QAAAA,MAAI,CAAC9iG,IAAI,CAAA,qCAAA,GAAsC+kH,WAAW,OAAG,CAAC;EAChE,MAAA;MACF,CAAE;MAEF,IAAMG,eAAe,GAAG,SAAlBA,eAAeA,CACnBvC,SAAyB,EACzBzhH,OAA+B,EAC5B;QACHA,OAAO,CAACyhH,SAAS,GAAGA,SAAS;EAC7B,MAAA,IAAIwC,QAAyC;EAC7C,MAAA,IAAIxC,SAAS,CAACv/F,UAAU,CAAC,QAAQ,CAAC,EAAE;EAClCwhG,QAAAA,aAAa,CAACphD,IAAI,CAAC,UAAU,CAAC;EAChC,MAAA,CAAC,MAAM,IACLm/C,SAAS,KAAK,gBAAgB,IAC9BA,SAAS,KAAK,mBAAmB,IACjCA,SAAS,KAAK,mBAAmB,EACjC;UACAwC,QAAQ,GAAGrB,iBAAiB,CAACnB,SAAS,EAAEzhH,OAAO,CAACkS,WAAW,CAAC;EAC9D,MAAA,CAAC,MAAM,IAAIuvG,SAAS,KAAK,SAAS,EAAE;EAClCwC,QAAAA,QAAQ,GAAG,IAAI5/F,KAAK,CAAA,sBAAA,GAAwBpc,KAAK,MAAG,CAAC;EACvD,MAAA,CAAC,MAAM,IAAIw5G,SAAS,KAAK,UAAU,EAAE;EACnCwC,QAAAA,QAAQ,GAAG,IAAI5/F,KAAK,CAAA,cAAe,CAAC;EACtC,MAAA,CAAC,MAAM,IAAIo9F,SAAS,KAAK,gBAAgB,EAAE,CAE1C,MAAM;EACL7f,QAAAA,MAAI,CAAC9iG,IAAI,CAAA,gCAAA,GACyB2iH,SAAS,GAAA,aAAA,GAAax5G,KAAK,MAC7D,CAAC;EACH,MAAA;EACA,MAAA,IAAIg8G,QAAQ,EAAE;EACZ,QAAA,IAAIP,aAAa,CAACK,UAAU,EAAE,CAAC1iH,MAAM,EAAE;EACrCqiH,UAAAA,aAAa,CAACphD,IAAI,CAAC,OAAO,EAAE2hD,QAAQ,CAAC;EACvC,QAAA,CAAC,MAAM;EACLriB,UAAAA,MAAI,CAACwd,WAAW,CAAC6E,QAAQ,CAAC;EAC5B,QAAA;EACF,MAAA;MACF,CAAC;MACD,IAAMC,mBAAmB,GAAIlkH,OAAO,CAACmkH,oBAAoB,GAAG,UAC1D7tF,KAAY,EACT;EACH,MAAA,IAAMyrF,UAAU,GAAG/hH,OAAO,CAACshH,gBAAgB;QAC3C,IAAI,CAACS,UAAU,EAAS;UACtB2B,aAAa,CAACphD,IAAI,CAAC,OAAO,EAAE,IAAIj+C,KAAK,CAAC,eAAe,CAAC,CAAC;EACvD,QAAA;EACF,MAAA;EAEA,MAAA,IAAM+/F,WAAW,GAAGxiB,MAAI,CAACyiB,cAAc,CAACrkH,OAAO,CAAC;EAChD,MAAA,IAAM0S,MAAM,GAAGxR,MAAM,CAAChB,IAAI,CAACkkH,WAAW,CAAC;;EAEvC;EACA,MAAA,IAAI,CAAC1xG,MAAM,CAACnR,IAAI,CAAC,UAAC/B,EAAE,EAAA;EAAA,QAAA,OAAK4kH,WAAW,CAAC5kH,EAAE,CAAC,KAAK,gBAAgB;EAAA,MAAA,CAAA,CAAC,EAAE;EAC9D,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAI4kH,WAAW,CAACn8G,KAAK,CAAC,KAAK,SAAS,EAAE;EACpC;EACA25F,QAAAA,MAAI,CAAC1lG,GAAG,CAAA,cAAA,GACSuvB,SAAS,CAAC24F,WAAW,CAAC,GAAA,oBAAA,GAAoBpkH,OAAO,CAACshH,gBAAgB,CAACvI,SAAS,OAC7F,CAAC;EACDnX,QAAAA,MAAI,CAAC8f,eAAe,CAAC1hH,OAAO,CAAC;EAC7B,QAAA;EACF,MAAA;EAEA,MAAA,IAAIyhH,SAAS,GAAG2C,WAAW,CAACn8G,KAAK,CAA+B;EAChE,MAAA,IAAIw5G,SAAS,EAAE;EACb;EACAuC,QAAAA,eAAe,CAACvC,SAAS,EAAEzhH,OAAO,CAAC;EACrC,MAAA,CAAC,MAAM;EAAA,QAAA,IAAAskH,qBAAA;EACL;UACA,IAAMtyE,OAAO,GAAG,IAAI;UACpBhyC,OAAO,CAACukH,iBAAiB,KAAzBvkH,OAAO,CAACukH,iBAAiB,GAAK,EAAE,CAAA;EAChC,QAAA,CAAAD,qBAAA,GAAAtkH,OAAO,CAACukH,iBAAiB,EAACt8G,KAAK,CAAC,KAAhCq8G,qBAAA,CAA0Br8G,KAAK,CAAC,GAAKvI,IAAI,CAAC81C,UAAU,CAAC,YAAM;YACzD,IAAK,CAACx1C,OAAO,CAACshH,gBAAgB,IAAY,CAAC1f,MAAI,CAACxpC,SAAS,EAAE;EACzD,YAAA;EACF,UAAA;;EAEA;YACA,IAAMosD,gBAAgB,GAAG5iB,MAAI,CAAC2gB,YAAY,CAACviH,OAAO,CAACkS,WAAW,CAAC;EAC/D,UAAA,IAAIsyG,gBAAgB,IAAIA,gBAAgB,KAAK,gBAAgB,EAAE;EAC7D5iB,YAAAA,MAAI,CAAC1lG,GAAG,CAAA,sBAAA,GACiB+L,KAAK,GAAA,oBAAA,GAAoBjI,OAAO,CAACshH,gBAAgB,CAACvI,SAAS,GAAA,+BAAA,GAA+ByL,gBAAgB,yBACnI,CAAC;EACD,YAAA,OAAOR,eAAe,CAACQ,gBAAgB,EAAExkH,OAAO,CAAC;EACnD,UAAA;;EAEA;EACA4hG,UAAAA,MAAI,CAAC1lG,GAAG,CAAA,iBAAA,GACY+L,KAAK,GAAA,oBAAA,GAAoBjI,OAAO,CAACshH,gBAAgB,CAACvI,SAAS,GAAA,qBAAA,GAAqB/mE,OAAO,OAC3G,CAAC;EACDyvE,UAAAA,SAAS,GAAG,gBAAgB;EAC5BuC,UAAAA,eAAe,CAACvC,SAAS,EAAEzhH,OAAO,CAAC;UACrC,CAAC,EAAEgyC,OAAO,CAAC,CAAA;UAEX4vD,MAAI,CAAC1lG,GAAG,CAAA,sBAAA,GAAwB+L,KAAK,GAAA,IAAA,GAAKwjB,SAAS,CAAC24F,WAAW,CAAC,GAAA,IAAI,CAAC;EACvE,MAAA;MACF,CAAE;MAEF5yD,gBAAgB,CAACxxD,OAAO,CAACshH,gBAAgB,EAAE,SAAS,EAAEqC,SAAS,CAAC;MAChEnyD,gBAAgB,CACdxxD,OAAO,CAACshH,gBAAgB,EACxB,mBAAmB,EACnB4C,mBACF,CAAC;MAED,IAAMO,gBAAgB,GAAG,IAAI3/F,OAAO,CAClC,UAACC,OAA+B,EAAEmrB,MAAM,EAAK;EAC3CwzE,MAAAA,aAAa,CAACzuF,EAAE,CAAC,OAAO,EAAEib,MAAM,CAAC;EACjCwzE,MAAAA,aAAa,CAACzuF,EAAE,CAAC,UAAU,EAAElQ,OAAO,CAAC;EACvC,IAAA,CACF,CAAC;EAED,IAAA,OAAO/kB,OAAO,CAACshH,gBAAgB,CAC5BiC,eAAe,CAAC/E,YAAY,EAAEvrG,QAAQ,CAAC,CACvC4S,IAAI,CAAC,YAAM;EACV+7E,MAAAA,MAAI,CAAC1lG,GAAG,CAAA,sCAAA,GACgC8D,OAAO,CAACshH,gBAAgB,CAACvI,SAAS,GAAA,YAAA,GAAY9wG,KAAK,GAAA,QAAA,GAASw7G,MACpG,CAAC;EACH,IAAA,CAAC,CAAC,CACD39F,KAAK,CAAC,UAACzsB,KAAK,EAAK;QAChB,MAAM,IAAIinH,WAAW,CACnB;UACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;UACjCjb,OAAO,EAAE/sB,YAAY,CAACsnC,qBAAqB;EAC3ChpC,QAAAA,KAAK,EAALA,KAAK;UACL6Y,WAAW,EAAElS,OAAO,CAACkS,WAAW;EAChCukB,QAAAA,KAAK,EAAE;SACR,EAAA,wCAAA,GACwCp9B,KAC3C,CAAC;MACH,CAAC,CAAC,CACDwsB,IAAI,CAAC,YAAA;EAAA,MAAA,OAAM4+F,gBAAgB;EAAA,IAAA,CAAA,CAAC,CAC5B3+F,KAAK,CAAC,UAACzsB,KAAK,EAAK;QAChBqqH,aAAa,CAACzoC,kBAAkB,EAAE;QAClC,OAAO2mB,MAAI,CAACigB,aAAa,CAAC7hH,OAAO,CAAC,CAAC6lB,IAAI,CAAC,YAAM;EAC5C,QAAA,MAAMxsB,KAAK;EACb,MAAA,CAAC,CAAC;EACJ,IAAA,CAAC,CAAC,CACDwsB,IAAI,CAAC,YAAM;QACV69F,aAAa,CAACzoC,kBAAkB,EAAE;EAClC,MAAA,OAAOj7E,OAAO;EAChB,IAAA,CAAC,CAAC;IACN,CAAC;EAAA7D,EAAAA,MAAA,CAEOkoH,cAAc,GAAtB,SAAQA,cAAcA,CAAC7C,sBAA8C,EAEnE;EAAA,IAAA,IAAAtf,MAAA,GAAA,IAAA;MACA,IAAMkiB,WAAgD,GAAG,EAAE;MAC3D5C,sBAAsB,CAACF,gBAAgB,CAAC8C,WAAW,CAACjkH,OAAO,CACzD,UAACqiH,MAAsB,EAAEv6G,KAAmB,EAAK;EAC/C;EACA;QACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOu6G,MAAM,KAAK,QAAQ,EAAE;UAC3D,IAAMvsG,IAAI,GAAGhO,KAAK;EAClBA,QAAAA,KAAK,GAAGu6G,MAAM;EACdA,QAAAA,MAAM,GAAGvsG,IAAI;EACf,MAAA;QACA,IAAMotC,UAAU,GACd,QAAQ,IAAIp7C,KAAK,GACb,IAAInF,UAAU,CAACmF,KAAK,CAAChF,MAAM,EAAEgF,KAAK,CAAC4N,UAAU,EAAE5N,KAAK,CAACY,UAAU,CAAC,GAChE,IAAI/F,UAAU,CAACmF,KAAK,CAAC;EAC3B,MAAA,IACEu5G,sBAAsB,CAAC5gE,SAAS,KAAKT,UAAU,CAACG,SAAS,IACzD+C,UAAU,CAAChiD,MAAM,KAAK,EAAE,EACxB;UACAk+C,gBAAgB,CAAC8D,UAAU,CAAC;EAC9B,MAAA;EACA,MAAA,IAAMqhE,qBAAqB,GAAGhiH,UAAU,CAAC2gD,UAAU,CAAC;EACpD;QACA,IAAIm/D,MAAM,KAAK,gBAAgB,EAAE;EAC/BtgB,QAAAA,MAAI,CAACoc,YAAY,CAACoG,qBAAqB,CAAC,GAAGlC,MAAM;EACnD,MAAA;EACAtgB,MAAAA,MAAI,CAAChmG,GAAG,CAAA,sBAAA,GACgBsmH,MAAM,GAAA,4BAAA,GAA4BkC,qBAAqB,GAAA,iBAAA,GAAiBlD,sBAAsB,CAACF,gBAAgB,CAACvI,SAAS,OACjJ,CAAC;EACDqL,MAAAA,WAAW,CAACM,qBAAqB,CAAC,GAAGlC,MAAM;EAC7C,IAAA,CACF,CAAC;EACD,IAAA,OAAO4B,WAAW;IACpB,CAAC;EAAAjoH,EAAAA,MAAA,CAEO6kH,sBAAsB,GAA9B,SAAQA,sBAAsBA,CAC5BpgE,SAAqB,EACS;EAC9B,IAAA,IAAMx5B,MAAM,GAAG,IAAI,CAACA,MAAM;EAC1B,IAAA,IAAMg1F,MAAM,GAAGh1F,MAAM,CAAC9gB,MAAM;EAC5B,IAAA,IAAMq+G,UAAU,GAAG,IAAIvI,MAAM,CAACh1F,MAAmB,CAA0B;EAC3E,IAAA,IAAM9tB,GAAG,GAAG,IAAI,CAAC0mH,uBAAuB,CAACp/D,SAAS,CAAC;MACnD,IAAI,CAACtnD,GAAG,EAAE;EACR,MAAA,OAAOwrB,OAAO,CAACC,OAAO,EAAE;EAC1B,IAAA;EACA,IAAA,IAAI,CAAC7oB,GAAG,CAAA,oCAAA,GAAqC0kD,SAAS,OAAG,CAAC;EAC1D,IAAA,OAAO,IAAI97B,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;EACtC,MAAA,IAAM2B,aAA4B,GAAG;EACnC8B,QAAAA,YAAY,EAAE,aAAa;EAC3Br6C,QAAAA,GAAG,EAAHA;SACD;EACD,MAAA,IAAMqkC,UAAU,GAAGvW,MAAM,CAACw9F,cAAc,CAACv2G,OAAO;EAChD,MAAA,IAAM0jC,YAAiC,GAAG;EACxCpU,QAAAA,UAAU,EAAVA,UAAU;UACVqU,OAAO,EAAErU,UAAU,CAACsU,aAAa;EACjCC,QAAAA,QAAQ,EAAE,CAAC;EACXC,QAAAA,UAAU,EAAE,CAAC;EACbC,QAAAA,aAAa,EAAE;SAChB;EACD,MAAA,IAAMyyE,eAA+C,GAAG;UACtDtyE,SAAS,EAAE,SAAXA,SAASA,CAAGtP,QAAQ,EAAEv6B,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EACvDxsB,UAAAA,OAAO,CAACke,QAAQ,CAAC/7B,IAAmB,CAAC;UACvC,CAAC;UACDivB,OAAO,EAAE,SAATA,OAAOA,CAAG8M,QAAQ,EAAE6hF,MAAM,EAAEvzE,cAAc,EAAE7oC,KAAK,EAAK;YACpDwnC,MAAM,CACJ,IAAIowE,WAAW,CACb;cACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;cACjCjb,OAAO,EACL/sB,YAAY,CAACgqH,4CAA4C;EAC3DtuF,YAAAA,KAAK,EAAE,IAAI;EACX8a,YAAAA,cAAc,EAAdA,cAAc;EACdtO,YAAAA,QAAQ,EAAA/0B,cAAA,CAAA;gBACN5U,GAAG,EAAEu4C,aAAa,CAACv4C,GAAG;EACtB4N,cAAAA,IAAI,EAAE3G;EAAS,aAAA,EACZ0iC,QAAQ;EAEf,WAAC,EAAA,IAAA,GACG2d,SAAS,GAAA,iCAAA,GAAiCtnD,GAAG,mBAAc2pC,QAAQ,CAACtE,IAAI,GAAA,IAAA,GAAKsE,QAAQ,CAAC53B,IAAI,GAAA,GAChG,CACF,CAAC;UACH,CAAC;UACDunC,SAAS,EAAE,SAAXA,SAASA,CAAGlqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;YAC7CrB,MAAM,CACJ,IAAIowE,WAAW,CACb;cACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;cACjCjb,OAAO,EACL/sB,YAAY,CAACgqH,4CAA4C;EAC3DtuF,YAAAA,KAAK,EAAE,IAAI;EACX8a,YAAAA,cAAc,EAAdA,cAAc;EACdtO,YAAAA,QAAQ,EAAE;gBACR3pC,GAAG,EAAEu4C,aAAa,CAACv4C,GAAG;EACtB4N,cAAAA,IAAI,EAAE3G;EACR;EACF,WAAC,SACGqgD,SAAS,GAAA,oCAAA,GAAoCtnD,GAAG,GAAA,GACtD,CACF,CAAC;UACH,CAAC;UACDo5C,OAAO,EAAE,SAATA,OAAOA,CAAGhqC,KAAK,EAAE1I,OAAO,EAAEuxC,cAAc,EAAK;EAC3CrB,UAAAA,MAAM,CAAC,IAAI7rB,KAAK,CAAC,SAAS,CAAC,CAAC;EAC9B,QAAA;SACD;QACDsgG,UAAU,CAACxzE,IAAI,CAACU,aAAa,EAAEE,YAAY,EAAE8yE,eAAe,CAAC;EAC/D,IAAA,CAAC,CAAC;IACJ,CAAC;IAAA1oH,MAAA,CAEOilH,6BAA6B,GAArC,SAAQA,6BAA6BA,CACnChpD,SAAoB,EACpBxX,SAAqB,EACrBokE,IAAkB,EACE;EAAA,IAAA,IAAAxiB,OAAA,GAAA,IAAA;EACpB,IAAA,OAAO,IAAI19E,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;QACtCkoB,SAAS,CACN6sD,oBAAoB,CAACD,IAAI,CAAC,CAC1Bn/F,IAAI,CAAC,UAACq/F,OAAO,EAAK;EACjB1iB,QAAAA,OAAI,CAACtmG,GAAG,CAAA,uBAAA,IAEJgpH,OAAO,GAAG,SAAS,GAAG,sBAAsB,CAAA,GAAA,IAAA,GACzCF,IAAI,CAACn8G,UAAU,GAAA,SAAA,GAAS+3C,SAAS,OACxC,CAAC;UACD77B,OAAO,CAACqzC,SAAS,CAAC;EACpB,MAAA,CAAC,CAAC,CACDtyC,KAAK,CAAC,UAACzsB,KAAK,EAAK;UAChB62C,MAAM,CACJ,IAAIowE,WAAW,CACb;YACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;YACjCjb,OAAO,EACL/sB,YAAY,CAACoqH,2CAA2C;EAC1D9rH,UAAAA,KAAK,EAALA,KAAK;EACLo9B,UAAAA,KAAK,EAAE;EACT,SAAC,EACDp9B,KAAK,CAACsrC,OACR,CACF,CAAC;EACH,MAAA,CAAC,CAAC;EACN,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAxoC,MAAA,CAEO2nH,YAAY,GAApB,SAAQA,YAAYA,CAClB9jH,OAA+B,EAC/BolH,UAAuB,EACR;EAAA,IAAA,IAAAphB,OAAA,GAAA,IAAA;EACf,IAAA,OAAO,IAAI,CAACqhB,cAAc,CAACrlH,OAAO,EAAE,IAAI8C,UAAU,CAACsiH,UAAU,CAAC,CAAC,CAACv/F,IAAI,CAClE,UAAC3e,IAAiB,EAAK;EACrB,MAAA,OAAO88F,OAAI,CAAC8d,gBAAgB,CAAC9hH,OAAO,EAAE,IAAI8C,UAAU,CAACoE,IAAI,CAAC,CAAC,CAAC4e,KAAK,CAC/D,UAACzsB,KAAK,EAAK;UACT,MAAM,IAAIinH,WAAW,CACnB;YACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;YACjCjb,OAAO,EAAE/sB,YAAY,CAAConC,gCAAgC;YACtDjwB,WAAW,EAAElS,OAAO,CAACkS,WAAW;EAChC7Y,UAAAA,KAAK,EAALA,KAAK;EACLo9B,UAAAA,KAAK,EAAE;EACT,SAAC,EACDp9B,KAAK,CAACsrC,OACR,CAAC;EACH,MAAA,CACF,CAAC;EACH,IAAA,CACF,CAAC;IACH,CAAC;IAAAxoC,MAAA,CAEOmpH,yBAAyB,GAAjC,SAAQA,yBAAyBA,CAC/BC,GAAmB,EACnBC,gBAAyC,EAChB;EACzB;EACA;EACA;EACA;EACA;EACA,IAAA,IAAMC,SAAS,GAAGjjH,MAAM,CAACC,YAAY,CAAC8I,KAAK,CACzC,IAAI,EACJ,IAAIk3C,WAAW,CAAC+iE,gBAAgB,CAACviH,MAAM,CACzC,CAAC;EACD,IAAA,IAAI,CAACwiH,SAAS,CAAC1V,QAAQ,CAAC,qBAAqB,CAAC,EAAE;EAC9C;EACA;EACA;EACA;EACAwV,MAAAA,GAAG,CAACG,gBAAgB,CAAC,cAAc,EAAE,yBAAyB,CAAC;EAC/D,MAAA,OAAOF,gBAAgB;EACzB,IAAA;EACA,IAAA,IAAMG,aAAa,GAAG,IAAI9iE,SAAS,EAAE,CAACE,eAAe,CACnD0iE,SAAS,EACT,iBACF,CAAC;EACD;EACA,IAAA,IAAM7xE,OAAO,GAAG+xE,aAAa,CAACjb,gBAAgB,CAAC,YAAY,CAAC;EAC5D,IAAA,IAAI92D,OAAO,CAACvyC,MAAM,GAAG,CAAC,EAAE;EACtB,MAAA,IAAIuiE,MAAe;EACnB,MAAA,KAAK,IAAIrhE,CAAC,GAAG,CAAC,EAAEJ,GAAG,GAAGyxC,OAAO,CAACvyC,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;UAAA,IAAAqjH,qBAAA,EAAAC,sBAAA;EAClDjiD,QAAAA,MAAM,GAAGhwB,OAAO,CAACrxC,CAAC,CAAC;EACnB,QAAA,IAAMf,IAAI,GAAA,CAAAokH,qBAAA,GAAGhiD,MAAM,CAACwmC,aAAa,CAAC,MAAM,CAAC,KAAA,IAAA,GAAA,MAAA,GAA5Bwb,qBAAA,CAA8BE,WAAW;EACtD,QAAA,IAAMprH,KAAK,GAAA,CAAAmrH,sBAAA,GAAGjiD,MAAM,CAACwmC,aAAa,CAAC,OAAO,CAAC,KAAA,IAAA,GAAA,MAAA,GAA7Byb,sBAAA,CAA+BC,WAAW;UACxD,IAAItkH,IAAI,IAAI9G,KAAK,EAAE;EACjB6qH,UAAAA,GAAG,CAACG,gBAAgB,CAAClkH,IAAI,EAAE9G,KAAK,CAAC;EACnC,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,IAAMqrH,gBAAgB,GAAGJ,aAAa,CAACvb,aAAa,CAAC,WAAW,CAAC;EACjE,IAAA,IAAM4b,aAAa,GAAGD,gBAAgB,IAAA,IAAA,GAAA,MAAA,GAAhBA,gBAAgB,CAAED,WAAW;MACnD,IAAI,CAACE,aAAa,EAAE;QAClB,MAAM,IAAI3hG,KAAK,CAAA,wCAAyC,CAAC;EAC3D,IAAA;EACA,IAAA,OAAO46B,cAAc,CAACF,IAAI,CAACinE,aAAa,CAAC,CAAC;IAC5C,CAAC;EAAA7pH,EAAAA,MAAA,CAEO8pH,eAAe,GAAvB,SAAQA,eAAeA,CACrBV,GAAmB,EACnBjsH,GAAW,EACX4sH,YAAoC,EACpCV,gBAAyC,EAIxC;EAAA,IAAA,IAAAthB,OAAA,GAAA,IAAA;EACD,IAAA,IAAMsb,eAAe,GAAG,IAAI,CAACp4F,MAAM,CAACo4F,eAAe;MAEnD,IAAI,CAACA,eAAe,EAAE;QACpB+F,GAAG,CAACvlB,IAAI,CAAC,MAAM,EAAE1mG,GAAG,EAAE,IAAI,CAAC;QAE3B,OAAOwrB,OAAO,CAACC,OAAO,CAAC;EAAEwgG,QAAAA,GAAG,EAAHA,GAAG;EAAEC,QAAAA,gBAAgB,EAAhBA;EAAiB,OAAC,CAAC;EACnD,IAAA;MAEA,OAAO1gG,OAAO,CAACC,OAAO,EAAE,CACrBc,IAAI,CAAC,YAAM;EACV,MAAA,IAAI,CAACqgG,YAAY,CAACh0G,WAAW,EAAS;EACpC,QAAA,MAAM,IAAImS,KAAK,CAAC,aAAa,CAAC;EAChC,MAAA;EACA,MAAA,OAAOm7F,eAAe,CAAC35G,IAAI,CACzBq+F,OAAI,CAACzzE,GAAG,EACR80F,GAAG,EACHjsH,GAAG,EACH4sH,YAAY,EACZV,gBACF,CAAC;EACH,IAAA,CAAC,CAAC,CACD1/F,KAAK,CAAC,UAACzsB,KAAY,EAAK;EACvB,MAAA,IAAI,CAAC6sH,YAAY,CAACh0G,WAAW,EAAS;EACpC;EACA,QAAA,MAAM7Y,KAAK;EACb,MAAA;EACA;QACAksH,GAAG,CAACvlB,IAAI,CAAC,MAAM,EAAE1mG,GAAG,EAAE,IAAI,CAAC;EAE3B,MAAA,OAAOkmH,eAAe,CAAC35G,IAAI,CACzBq+F,OAAI,CAACzzE,GAAG,EACR80F,GAAG,EACHjsH,GAAG,EACH4sH,YAAY,EACZV,gBACF,CAAC;EACH,IAAA,CAAC,CAAC,CACD3/F,IAAI,CAAC,UAACsgG,qBAAqB,EAAK;EAC/B;EACA,MAAA,IAAI,CAACZ,GAAG,CAAChzF,UAAU,EAAE;UACnBgzF,GAAG,CAACvlB,IAAI,CAAC,MAAM,EAAE1mG,GAAG,EAAE,IAAI,CAAC;EAC7B,MAAA;EACA,MAAA,IAAM8sH,qBAAqB,GAAGD,qBAAqB,GAC/CA,qBAAqB,GACrBX,gBAAgB;QACpB,OAAO;EAAED,QAAAA,GAAG,EAAHA,GAAG;EAAEC,QAAAA,gBAAgB,EAAEY;SAAuB;EACzD,IAAA,CAAC,CAAC;IACN,CAAC;IAAAjqH,MAAA,CAEOkpH,cAAc,GAAtB,SAAQA,cAAcA,CACpB1D,iBAAyC,EACzC6D,gBAAyC,EACnB;EAAA,IAAA,IAAArhB,OAAA,GAAA,IAAA;MACtB,IAAM9gE,aAAa,GAAG,IAAI,CAACjc,MAAM,CAACic,aAAa,CAACh1B,OAAO;EACvD,IAAA,OAAO,IAAIyW,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;QACtC,IAAM52C,GAAG,GAAG6qG,OAAI,CAAC4b,0BAA0B,CAAC4B,iBAAiB,CAAC/gE,SAAS,CAAC;EACxEujD,MAAAA,OAAI,CAACjoG,GAAG,CAAA,kCAAA,GAAoC5C,GAAK,CAAC;EAClD,MAAA,IAAMisH,GAAG,GAAG,IAAIc,cAAc,EAAE;QAChCd,GAAG,CAAC5xE,YAAY,GAAG,aAAa;QAChC4xE,GAAG,CAACe,kBAAkB,GAAG,YAAM;UAC7B,IACG,CAACniB,OAAI,CAAC1zE,GAAG,IACT,CAACkxF,iBAAiB,CAACL,gBAAwB,EAC5C;EACA,UAAA,OAAOpxE,MAAM,CAAC,IAAI7rB,KAAK,CAAC,eAAe,CAAC,CAAC;EAC3C,QAAA;EACA,QAAA,IAAIkhG,GAAG,CAAChzF,UAAU,KAAK,CAAC,EAAE;EACxB,UAAA,IAAIgzF,GAAG,CAAC/C,MAAM,KAAK,GAAG,EAAE;cACtBre,OAAI,CAAC8Z,2BAA2B,GAAG,CAAC;EACpC,YAAA,IAAI/2G,IAAI,GAAGq+G,GAAG,CAACtiF,QAAQ;EACvBkhE,YAAAA,OAAI,CAACjoG,GAAG,CAAA,mBAAA,IAEJgL,IAAI,YAAYkU,WAAW,GAAGlU,IAAI,CAAC2B,UAAU,GAAG3B,IAAI,CAExD,CAAC;EACD,YAAA,IAAMu4G,uBAAuB,GAAGtb,OAAI,CAAC/8E,MAAM,CAACq4F,uBAAuB;EACnE,YAAA,IAAIA,uBAAuB,EAAE;gBAC3B,IAAI;EACFv4G,gBAAAA,IAAI,GAAGu4G,uBAAuB,CAAC55G,IAAI,CACjCs+F,OAAI,CAAC1zE,GAAG,EACR80F,GAAG,EACHjsH,GAAG,EACHqoH,iBACF,CAAC;gBACH,CAAC,CAAC,OAAOtoH,KAAK,EAAE;EACd8qG,gBAAAA,OAAI,CAAC9qG,KAAK,CAACA,KAAK,CAAC;EACnB,cAAA;EACF,YAAA;cACA0rB,OAAO,CAAC7d,IAAI,CAAC;EACf,UAAA,CAAC,MAAM;EACL,YAAA,IAAM42B,WAAW,GAAGuF,aAAa,CAAC/E,UAAU;cAC5C,IAAMM,WAAW,GAAGd,WAAW,GAAGA,WAAW,CAACc,WAAW,GAAG,CAAC;cAC7DulE,OAAI,CAAC8Z,2BAA2B,EAAE;EAClC,YAAA,IACE9Z,OAAI,CAAC8Z,2BAA2B,GAAGr/E,WAAW,IAC7C2mF,GAAG,CAAC/C,MAAM,IAAI,GAAG,IAAI+C,GAAG,CAAC/C,MAAM,GAAG,GAAI,EACvC;gBACAtyE,MAAM,CACJ,IAAIowE,WAAW,CACb;kBACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;kBACjCjb,OAAO,EAAE/sB,YAAY,CAACwrH,iCAAiC;kBACvDr0G,WAAW,EAAEyvG,iBAAiB,CAACzvG,WAAW;EAC1CukB,gBAAAA,KAAK,EAAE,IAAI;EACX8a,gBAAAA,cAAc,EAAEg0E,GAAG;EACnBtiF,gBAAAA,QAAQ,EAAE;EACR3pC,kBAAAA,GAAG,EAAHA,GAAG;EACH4N,kBAAAA,IAAI,EAAE3G,SAAgB;oBACtBo+B,IAAI,EAAE4mF,GAAG,CAAC/C,MAAM;oBAChBn3G,IAAI,EAAEk6G,GAAG,CAACiB;EACZ;EACF,eAAC,EAAA,8BAAA,GAC8BltH,GAAG,GAAA,aAAA,GAAcisH,GAAG,CAAC/C,MAAM,GAAA,IAAA,GAAK+C,GAAG,CAACiB,UAAU,GAAA,GAC/E,CACF,CAAC;EACH,YAAA,CAAC,MAAM;gBACL,IAAMC,YAAY,GAChB7nF,WAAW,GAAGulE,OAAI,CAAC8Z,2BAA2B,GAAG,CAAC;EACpD9Z,cAAAA,OAAI,CAACrlG,IAAI,CAAA,4BAAA,GACsB2nH,YAAY,mBAC3C,CAAC;EACDtiB,cAAAA,OAAI,CAACkhB,cAAc,CAAC1D,iBAAiB,EAAE6D,gBAAgB,CAAC,CAAC3/F,IAAI,CAC3Dd,OAAO,EACPmrB,MACF,CAAC;EACH,YAAA;EACF,UAAA;EACF,QAAA;QACF,CAAC;EACD,MAAA,IACEyxE,iBAAiB,CAAC+E,UAAU,IAC5B/E,iBAAiB,CAAC+E,UAAU,CAACn0F,UAAU,KAAK8zF,cAAc,CAACM,IAAI,EAC/D;EACAhF,QAAAA,iBAAiB,CAAC+E,UAAU,CAACp+G,KAAK,EAAE;EACtC,MAAA;QACAq5G,iBAAiB,CAAC+E,UAAU,GAAGnB,GAAG;EAElCphB,MAAAA,OAAI,CAAC8hB,eAAe,CAACV,GAAG,EAAEjsH,GAAG,EAAEqoH,iBAAiB,EAAE6D,gBAAgB,CAAC,CAChE3/F,IAAI,CAAC,UAAAw/E,KAAA,EAA+B;EAAA,QAAA,IAA5BkgB,GAAG,GAAAlgB,KAAA,CAAHkgB,GAAG;YAAEC,gBAAgB,GAAAngB,KAAA,CAAhBmgB,gBAAgB;EAC5B,QAAA,IAAI7D,iBAAiB,CAAC/gE,SAAS,IAAIT,UAAU,CAACG,SAAS,EAAE;YACvDklE,gBAAgB,GAAGrhB,OAAI,CAACmhB,yBAAyB,CAC/CC,GAAG,EACHC,gBACF,CAAC;EACH,QAAA;EACAD,QAAAA,GAAG,CAACqB,IAAI,CAACpB,gBAAgB,CAAC;EAC5B,MAAA,CAAC,CAAC,CACD1/F,KAAK,CAACoqB,MAAM,CAAC;EAClB,IAAA,CAAC,CAAC;IACJ,CAAC;EAAA/zC,EAAAA,MAAA,CAEOmjH,YAAY,GAApB,SAAQA,YAAYA,GAAG;MACrB,IAAI,CAAClpF,mBAAmB,EAAE;MAC1B,IAAI,CAACywF,MAAM,EAAE;IACf,CAAC;IAAA1qH,MAAA,CAEOo4D,eAAe,GAAvB,SAAQA,eAAeA,CACrBj+B,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAI,CAAC,IAAI,CAACkgB,MAAM,CAAC8wC,UAAU,EAAE;EAC3B,MAAA;EACF,IAAA;EAEA,IAAA,IAAMvtC,KAAK,GAAGzjB,IAAI,CAACyjB,KAAK;;EAExB;MACA,IAAI,CAACA,KAAK,GAAGA,KAAK;MAElB6mC,gBAAgB,CAAC7mC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC4zF,gBAAgB,CAAC;MAC3D/sD,gBAAgB,CAAC7mC,KAAK,EAAE,eAAe,EAAE,IAAI,CAAC00F,eAAe,CAAC;IAChE,CAAC;EAAAljH,EAAAA,MAAA,CAEO88G,eAAe,GAAvB,SAAQA,eAAeA,GAAG;EACxB,IAAA,IAAMtuF,KAAK,GAAG,IAAI,CAACA,KAAK;EAExB,IAAA,IAAIA,KAAK,EAAE;QACT+mC,mBAAmB,CAAC/mC,KAAK,EAAE,WAAW,EAAE,IAAI,CAAC4zF,gBAAgB,CAAC;QAC9D7sD,mBAAmB,CAAC/mC,KAAK,EAAE,eAAe,EAAE,IAAI,CAAC00F,eAAe,CAAC;QACjE,IAAI,CAAC10F,KAAK,GAAG,IAAI;QACjB,IAAI,CAACytC,SAAS,GAAG,IAAI;EACvB,IAAA;IACF,CAAC;EAAAj8D,EAAAA,MAAA,CAEO0qH,MAAM,GAAd,SAAQA,MAAMA,GAAG;EAAA,IAAA,IAAAniB,OAAA,GAAA,IAAA;QAAAoiB,mBAAA;MACf,IAAI,CAAC7I,2BAA2B,GAAG,CAAC;EACpC,IAAA,IAAI,CAACE,wBAAwB,GAAG,EAAE;EAClC,IAAA,IAAI,CAACG,YAAY,GAAG,EAAE;MACtB,IAAI,CAAC,IAAI,CAAClmD,SAAS,IAAI,CAAC,IAAI,CAAC8lD,gBAAgB,CAAC78G,MAAM,EAAE;EACpD,MAAA;EACF,IAAA;EACA,IAAA,IAAMspB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAMo8F,aAAa,GAAG,IAAI,CAAC7I,gBAAgB,CAACtkH,KAAK,EAAE;MACnD,IAAI,CAACskH,gBAAgB,GAAG,EAAE;MAC1B,IAAI,CAAC9lD,SAAS,GAAG,IAAI;MAErB7U,QAAQ,CAACG,qBAAqB,EAAE;;EAEhC;EACA,IAAA,IAAMsjE,eAAe,GAAGD,aAAa,CAAC1lH,MAAM;EAC5Cy8G,IAAAA,aAAa,CAACO,iBAAiB,GAAGv5F,OAAO,CAACW,GAAG,CAC3CshG,aAAa,CACVvwG,GAAG,CAAC,UAACgrG,sBAAsB,EAAA;EAAA,MAAA,OAC1B9c,OAAI,CAACmd,aAAa,CAACL,sBAAsB,CAAC;MAAA,CAC5C,CAAC,CACAtkF,MAAM,CACL,CAACvS,KAAK,IAAA,IAAA,IAAA,CAAAm8F,mBAAA,GAALn8F,KAAK,CAAEy4F,YAAY,CAAC,IAAI,CAAC,KAAA,IAAA,GAAA,MAAA,GAA1B0D,mBAAA,CAAqDhhG,KAAK,CACxD,UAACzsB,KAAK,EAAK;EACTqrG,MAAAA,OAAI,CAACxoG,GAAG,CAAA,8BAAA,GAAgC7C,KAAO,CAAC;EAChD,MAAA,IAAI,CAACqrG,OAAI,CAACj0E,GAAG,EAAS;QACtBi0E,OAAI,CAACj0E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;UAC5BpyC,OAAO,EAAE/sB,YAAY,CAACksH,mCAAmC;EACzDxwF,QAAAA,KAAK,EAAE,KAAK;EACZp9B,QAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAA,8BAAA,GAAgChrB,KAAO;EACzD,OAAC,CAAC;EACJ,IAAA,CACF,CAAC,KAAIyrB,OAAO,CAACC,OAAO,EACtB,CACJ,CAAC,CACEe,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChBqrG,MAAAA,OAAI,CAACxoG,GAAG,CAAA,iDAAA,GAAmD7C,KAAO,CAAC;EACnE,MAAA,IAAI,CAACqrG,OAAI,CAACj0E,GAAG,EAAS;QACtBi0E,OAAI,CAACj0E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;UAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;UAC5BpyC,OAAO,EAAE/sB,YAAY,CAACmsH,sCAAsC;EAC5DzwF,QAAAA,KAAK,EAAE,KAAK;EACZp9B,QAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAA,iDAAA,GACoChrB,KACpD;EACF,OAAC,CAAC;EACJ,IAAA,CAAC,CAAC,CAEDwsB,IAAI,CAAC,YAAM;EACV,MAAA,IAAImhG,eAAe,EAAE;EACnBtiB,QAAAA,OAAI,CAACxoG,GAAG,CAAC,uDAAuD,CAAC;EACnE,MAAA;EACF,IAAA,CAAC,CAAC;IACN,CAAC;EAAAC,EAAAA,MAAA,CAEOg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;MAC1B,IAAI,CAAC4oF,gBAAgB,GAAG,IAAI;EAC5B,IAAA,IAAI,CAACO,YAAY,GAAG,EAAE;IACxB,CAAC;IAAAniH,MAAA,CAEOw4D,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBr+B,KAA6B,EAAAgvE,KAAA,EAE7B;EAAA,IAAA,IADE5/C,WAAW,GAAA4/C,KAAA,CAAX5/C,WAAW;MAEb,IAAI,CAACA,WAAW,IAAI,CAAC,IAAI,CAACt+B,MAAM,CAAC8wC,UAAU,EAAE;EAC3C,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAC,IAAI,CAAC6lD,gBAAgB,EAAE;QAC1B,IAAM90G,UAA8B,GAAGy8C,WAAW,CAACtwC,MAAM,CACvD,UAAC+xG,OAA2B,EAAE/gE,UAAoB,EAAK;UACrD,IACE+gE,OAAO,CAAC1lH,OAAO,CAAC2kD,UAAU,CAACr+C,SAA6B,CAAC,KAAK,EAAE,EAChE;EACAo/G,UAAAA,OAAO,CAACj8G,IAAI,CAACk7C,UAAU,CAACr+C,SAA6B,CAAC;EACxD,QAAA;EACA,QAAA,OAAOo/G,OAAO;QAChB,CAAC,EACD,EACF,CAAC;QACD,IAAI,CAACjrH,GAAG,CAAA,yCAAA,GACoC+M,UAAU,CAACmQ,IAAI,CAAC,IAAI,CAChE,CAAC;QACD,IAAI,CAAC2kG,gBAAgB,GAAG,IAAI,CAACa,mBAAmB,CAAC31G,UAAU,CAAC;EAC9D,IAAA;IACF,CAAC;EAAA9M,EAAAA,MAAA,CAEO0lH,aAAa,GAArB,SAAQA,aAAaA,CACnBL,sBAA8C,EAC/B;EAAA,IAAA,IAAApc,OAAA,GAAA,IAAA;EACf,IAAA,IAAQkc,gBAAgB,GACtBE,sBAAsB,CADhBF,gBAAgB;QAAEoF,UAAU,GAClClF,sBAAsB,CADEkF,UAAU;QAAEx0G,WAAW,GAC/CsvG,sBAAsB,CADctvG,WAAW;EAEjD,IAAA,IAAIovG,gBAAgB,EAAiC;EACnD,MAAA,IAAI,CAACplH,GAAG,CAAA,+CAAA,GACyColH,gBAAgB,CAACvI,SAAS,kBAAYr2G,UAAU,CAAC,CAACwP,WAAW,oBAAXA,WAAW,CAA2BjK,KAAK,KAAI,EAAE,CACpJ,CAAC;QACD,IAAIu5G,sBAAsB,CAACoC,UAAU,EAAE;UACrCtC,gBAAgB,CAAC5vD,mBAAmB,CAClC,SAAS,EACT8vD,sBAAsB,CAACoC,UACzB,CAAC;UACDpC,sBAAsB,CAACoC,UAAU,GAAGrjH,SAAS;EAC/C,MAAA;QACA,IAAIihH,sBAAsB,CAAC2C,oBAAoB,EAAE;UAC/C7C,gBAAgB,CAAC5vD,mBAAmB,CAClC,mBAAmB,EACnB8vD,sBAAsB,CAAC2C,oBACzB,CAAC;UACD3C,sBAAsB,CAAC2C,oBAAoB,GAAG5jH,SAAS;EACzD,MAAA;QAEA,IAAImmH,UAAU,IAAIA,UAAU,CAACn0F,UAAU,KAAK8zF,cAAc,CAACM,IAAI,EAAE;UAC/DD,UAAU,CAACp+G,KAAK,EAAE;EACpB,MAAA;QACAk5G,sBAAsB,CAACF,gBAAgB,GACrCE,sBAAsB,CAACtvG,WAAW,GAClCsvG,sBAAsB,CAACkF,UAAU,GAC/BnmH,SAAU;QACd,IAAMsJ,KAAK,GAAG,IAAI,CAACq0G,gBAAgB,CAACz8G,OAAO,CAAC+/G,sBAAsB,CAAC;EACnE,MAAA,IAAI33G,KAAK,GAAG,EAAE,EAAE;UACd,IAAI,CAACq0G,gBAAgB,CAACj+D,MAAM,CAACp2C,KAAK,EAAE,CAAC,CAAC;EACxC,MAAA;EACA,MAAA,IAAQ06G,iBAAiB,GAAK/C,sBAAsB,CAA5C+C,iBAAiB;EACzB,MAAA,IAAIA,iBAAiB,EAAE;UACrBrjH,MAAM,CAAChB,IAAI,CAACqkH,iBAAiB,CAAC,CAACpkH,OAAO,CAAC,UAAC8H,KAAK,EAAA;YAAA,OAC3CvI,IAAI,CAAC+zC,YAAY,CAAC8wE,iBAAiB,CAACt8G,KAAK,CAAC,CAAC;EAAA,QAAA,CAC7C,CAAC;EACH,MAAA;EACA,MAAA,IAAQm5C,gBAAgB,GAAK,IAAI,CAACh6B,MAAM,CAAhCg6B,gBAAgB;EACxB,MAAA,IAAMgmE,aAAa,GAAGhlE,uBAAuB,CAAChB,gBAAgB,CAAC,GAC3D,IAAIt8B,OAAO,CAAC,UAACC,OAAO,EAAEmrB,MAAM,EAAK;UAC/BxwC,IAAI,CAAC81C,UAAU,CACb,YAAA;EAAA,UAAA,OAAMtF,MAAM,CAAC,IAAI7rB,KAAK,CAAA,kCAAmC,CAAC,CAAC;EAAA,QAAA,CAAA,EAC3D,IACF,CAAC;EACDi9F,QAAAA,gBAAgB,CAACtY,MAAM,EAAE,CAACnjF,IAAI,CAACd,OAAO,CAAC,CAACe,KAAK,CAACoqB,MAAM,CAAC;EACvD,MAAA,CAAC,CAAC,GACFprB,OAAO,CAACC,OAAO,EAAE;EACrB,MAAA,OAAOqiG,aAAa,CACjBthG,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChB+rG,QAAAA,OAAI,CAAClpG,GAAG,CAAA,4BAAA,GAA8B7C,KAAO,CAAC;EAC9C,QAAA,IAAI,CAAC+rG,OAAI,CAAC30E,GAAG,EAAS;UACtB20E,OAAI,CAAC30E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;YAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;YAC5BpyC,OAAO,EAAE/sB,YAAY,CAACssH,uCAAuC;EAC7D5wF,UAAAA,KAAK,EAAE,KAAK;EACZp9B,UAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAA,4BAAA,GAA8BhrB,KAAO;EACvD,SAAC,CAAC;EACJ,MAAA,CAAC,CAAC,CACDwsB,IAAI,CAAC,YAAM;EACV,QAAA,OAAOy7F,gBAAgB,CAACgG,KAAK,EAAE;EACjC,MAAA,CAAC,CAAC,CACDxhG,KAAK,CAAC,UAACzsB,KAAK,EAAK;EAChB+rG,QAAAA,OAAI,CAAClpG,GAAG,CAAA,2BAAA,GAA6B7C,KAAO,CAAC;EAC7C,QAAA,IAAI,CAAC+rG,OAAI,CAAC30E,GAAG,EAAS;UACtB20E,OAAI,CAAC30E,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;YAC7B32B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;YAC5BpyC,OAAO,EAAE/sB,YAAY,CAACmsH,sCAAsC;EAC5DzwF,UAAAA,KAAK,EAAE,KAAK;EACZp9B,UAAAA,KAAK,EAAE,IAAIgrB,KAAK,CAAA,2BAAA,GAA6BhrB,KAAO;EACtD,SAAC,CAAC;EACJ,MAAA,CAAC,CAAC;EACN,IAAA;EACA,IAAA,OAAOyrB,OAAO,CAACC,OAAO,EAAE;IAC1B,CAAC;EAAA,EAAA,OAAA+4F,aAAA;EAAA,CAAA,CAx6CyBr/G,MAAM,CAAA;EAA5Bq/G,aAAa,CACHO,iBAAiB,GAAA,MAAA;EA06CjC,SAASuD,cAAcA,CAAC1vG,WAAoC,EAAkB;IAC5E,IAAI,CAACA,WAAW,EAAE;EAChB,IAAA,MAAM,IAAImS,KAAK,CAAC,+CAA+C,CAAC;EAClE,EAAA;EACA,EAAA,IAAInS,WAAW,CAACjK,KAAK,KAAK,IAAI,EAAE;EAC9B,IAAA,MAAM,IAAIoc,KAAK,CAAC,eAAe,CAAC;EAClC,EAAA;EACA,EAAA,OAAO3hB,UAAU,CAACwP,WAAW,CAACjK,KAAK,CAAC;EACtC;EAEA,SAASs6G,aAAYA,CACnBrwG,WAAqB,EACrB+sG,UAAkC,EACN;EAC5B,EAAA,IACE/sG,WAAW,CAACjK,KAAK,IACjBg3G,UAAU,CAACqC,gBAAgB,CAAC8C,WAAW,CAAC74F,GAAG,CAACrZ,WAAW,CAACjK,KAAK,CAAC,EAC9D;MACA,OAAOg3G,UAAU,CAACqC,gBAAgB,CAAC8C,WAAW,CAAC5lH,GAAG,CAAC0T,WAAW,CAACjK,KAAK,CAAC;EACvE,EAAA;IACA,IAAIiK,WAAW,CAAC0Y,OAAO,CAACq0F,UAAU,CAAC/sG,WAAW,CAAC,EAAE;MAC/C,OAAO+sG,UAAU,CAACwC,SAAS;EAC7B,EAAA;EACA,EAAA,OAAOlhH,SAAS;EAClB;EAEA,IAAa+/G,WAAW,0BAAA9rE,MAAA,EAAA;EAEtB,EAAA,SAAA8rE,WAAAA,CACEp5G,IAAkD,EAClDy9B,OAAe,EACf;EAAA,IAAA,IAAA4gE,OAAA;EACAA,IAAAA,OAAA,GAAA/wD,MAAA,CAAA3uC,IAAA,CAAA,IAAA,EAAM8+B,OAAO,CAAC,IAAA,IAAA;EAAC4gE,IAAAA,OAAA,CALDr+F,IAAI,GAAA,MAAA;MAMlBA,IAAI,CAAC7N,KAAK,KAAV6N,IAAI,CAAC7N,KAAK,GAAK,IAAIgrB,KAAK,CAACsgB,OAAO,CAAC,CAAA;MACjC4gE,OAAA,CAAKr+F,IAAI,GAAGA,IAAiB;EAC7BA,IAAAA,IAAI,CAAC2pC,GAAG,GAAG3pC,IAAI,CAAC7N,KAAK;EAAC,IAAA,OAAAksG,OAAA;EACxB,EAAA;IAAC99F,cAAA,CAAA64G,WAAA,EAAA9rE,MAAA,CAAA;EAAA,EAAA,OAAA8rE,WAAA;EAAA,CAAA,cAAA7rE,gBAAA,CAV8BpwB,KAAK,CAAA,CAAA;EAatC,SAASu+F,iBAAiBA,CACxBnB,SAAyB,EACzBvvG,WAAqB,EACR;EACb,EAAA,IAAMq1G,gBAAgB,GAAG9F,SAAS,KAAK,mBAAmB;IAC1D,IAAM35F,OAAO,GAAGy/F,gBAAgB,GAC5BxsH,YAAY,CAACmnC,mCAAmC,GAChDnnC,YAAY,CAACqnC,gCAAgC;IACjD,OAAO,IAAIk+E,WAAW,CACpB;MACE/gH,IAAI,EAAEzE,UAAU,CAACioC,gBAAgB;EACjCjb,IAAAA,OAAO,EAAPA,OAAO;EACP2O,IAAAA,KAAK,EAAE,KAAK;EACZvkB,IAAAA,WAAW,EAAXA;EACF,GAAC,EACDq1G,gBAAgB,GACZ,8BAA8B,GAAA,0BAAA,GACJ9F,SAAS,OACzC,CAAC;EACH;;EChjDmC,IAM7B+F,aAAa,gBAAA,YAAA;IAWjB,SAAAA,aAAAA,CAAY/2F,GAAQ,EAAE;EAAA,IAAA,IAAA,CAVdA,GAAG,GAAA,MAAA;MAAA,IAAA,CACHg3F,+BAA+B,GAAY,KAAK;EAAA,IAAA,IAAA,CAChDt2F,KAAK,GAAA,MAAA;MAAA,IAAA,CACLxG,KAAK,GAA4B,IAAI;EAAA,IAAA,IAAA,CACrC+8F,QAAQ,GAAA,MAAA;MAAA,IAAA,CACRC,iBAAiB,GAAW,CAAC;MAAA,IAAA,CAC7BC,iBAAiB,GAAW,CAAC;EACrC;EAAA,IAAA,IAAA,CACQzc,gBAAgB,GAAA,MAAA;MAGtB,IAAI,CAAC16E,GAAG,GAAGA,GAAG;MAEd,IAAI,CAACoE,iBAAiB,EAAE;EAC1B,EAAA;EAAC,EAAA,IAAA14B,MAAA,GAAAqrH,aAAA,CAAAprH,SAAA;EAAAD,EAAAA,MAAA,CAEMivG,mBAAmB,GAA1B,SAAOA,mBAAmBA,CAACD,gBAAkC,EAAE;MAC7D,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;IAC1C,CAAC;EAAAhvG,EAAAA,MAAA,CAES04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B,IAAA,IAAI,CAACpE,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAChE,IAAA,IAAI,CAAC/sE,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;IAClE,CAAC;EAAAt4D,EAAAA,MAAA,CAESi6B,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B,IAAA,IAAI,CAAC3F,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EACjE,IAAA,IAAI,CAAC/sE,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;IACnE,CAAC;EAAAt4D,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,IAAI,CAAC8yB,KAAK,EAAE;EACd0G,MAAAA,aAAa,CAAC,IAAI,CAAC1G,KAAK,CAAC;EAC3B,IAAA;MAEA,IAAI,CAACiF,mBAAmB,EAAE;MAC1B,IAAI,CAACqxF,+BAA+B,GAAG,KAAK;MAC5C,IAAI,CAAC98F,KAAK,GAAG,IAAI;IACnB,CAAC;IAAAxuB,MAAA,CAESqhG,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBlnE,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAMkgB,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;MAC9B,IAAIA,MAAM,CAACygG,iBAAiB,EAAE;EAC5B,MAAA,IAAMl9F,KAAK,GACTzjB,IAAI,CAACyjB,KAAK,YAAYjrB,IAAI,CAACisG,gBAAgB,GAAGzkG,IAAI,CAACyjB,KAAK,GAAG,IAAI;QACjE,IAAI,CAACA,KAAK,GAAGA,KAAK;QAClB,IAAIA,KAAK,IAAI,OAAOA,KAAK,CAACm9F,uBAAuB,KAAK,UAAU,EAAE;UAChE,IAAI,CAACL,+BAA+B,GAAG,IAAI;EAC7C,MAAA;EAEA/nH,MAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAAC1G,KAAK,CAAC;EAC9B,MAAA,IAAI,CAACA,KAAK,GAAGzxB,IAAI,CAAC+0B,WAAW,CAC3B,IAAI,CAACszF,gBAAgB,CAAC7oH,IAAI,CAAC,IAAI,CAAC,EAChCkoB,MAAM,CAAC4gG,0BACT,CAAC;EACH,IAAA;IACF,CAAC;EAAA7rH,EAAAA,MAAA,CAEOs4D,gBAAgB,GAAxB,SAAQA,gBAAgBA,GAAG;MACzB,IAAI,CAAC9pC,KAAK,GAAG,IAAI;IACnB,CAAC;IAAAxuB,MAAA,CAED8rH,QAAQ,GAAR,SAAAA,QAAQA,CACN39G,KAAuB,EACvB49G,aAAqB,EACrBC,aAAqB,EACrB;EACA,IAAA,IAAMz0D,WAAW,GAAG5hC,WAAW,CAACD,GAAG,EAAE;EACrC,IAAA,IAAIq2F,aAAa,EAAE;QACjB,IAAI,IAAI,CAACR,QAAQ,EAAE;EACjB,QAAA,IAAMU,aAAa,GAAG10D,WAAW,GAAG,IAAI,CAACg0D,QAAQ;EACjD,QAAA,IAAMW,cAAc,GAAGF,aAAa,GAAG,IAAI,CAACR,iBAAiB;EAC7D,QAAA,IAAMW,cAAc,GAAGJ,aAAa,GAAG,IAAI,CAACN,iBAAiB;EAC7D,QAAA,IAAMW,UAAU,GAAI,IAAI,GAAGF,cAAc,GAAID,aAAa;EAC1D,QAAA,IAAM33F,GAAG,GAAG,IAAI,CAACA,GAAG;EACpBA,QAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACwtH,QAAQ,EAAE;EAC3BH,UAAAA,cAAc,EAAEA,cAAc;EAC9BC,UAAAA,cAAc,EAAEA,cAAc;EAC9BG,UAAAA,kBAAkB,EAAEN;EACtB,SAAC,CAAC;UACF,IAAII,UAAU,GAAG,CAAC,EAAE;EAClB;YACA,IACEF,cAAc,GACd53F,GAAG,CAACrJ,MAAM,CAACshG,6BAA6B,GAAGJ,cAAc,EACzD;EACA,YAAA,IAAIv4F,YAAY,GAAGU,GAAG,CAACV,YAAY;cACnCU,GAAG,CAAC9xB,MAAM,CAACG,IAAI,CACb,kEAAkE,GAChEixB,YACJ,CAAC;EACD,YAAA,IACEA,YAAY,GAAG,CAAC,KACfU,GAAG,CAACu6E,gBAAgB,KAAK,EAAE,IAC1Bv6E,GAAG,CAACu6E,gBAAgB,IAAIj7E,YAAY,CAAC,EACvC;gBACAA,YAAY,GAAGA,YAAY,GAAG,CAAC;EAC/BU,cAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACuwG,sBAAsB,EAAE;EACzC/kG,gBAAAA,KAAK,EAAEupB,YAAY;kBACnB07E,YAAY,EAAEh7E,GAAG,CAACV;EACpB,eAAC,CAAC;gBACFU,GAAG,CAACu6E,gBAAgB,GAAGj7E,YAAY;EACnC,cAAA,IAAI,CAACo7E,gBAAgB,CAACgB,eAAe,EAAE;EACzC,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA;QACA,IAAI,CAACub,QAAQ,GAAGh0D,WAAW;QAC3B,IAAI,CAACi0D,iBAAiB,GAAGQ,aAAa;QACtC,IAAI,CAACP,iBAAiB,GAAGM,aAAa;EACxC,IAAA;IACF,CAAC;EAAA/rH,EAAAA,MAAA,CAED4rH,gBAAgB,GAAhB,SAAAA,gBAAgBA,GAAG;EACjB,IAAA,IAAMz9G,KAAK,GAAG,IAAI,CAACqgB,KAAK;EACxB,IAAA,IAAIrgB,KAAK,EAAE;QACT,IAAI,IAAI,CAACm9G,+BAA+B,EAAE;EACxC,QAAA,IAAMkB,oBAAoB,GAAGr+G,KAAK,CAACw9G,uBAAuB,EAAE;EAC5D,QAAA,IAAI,CAACG,QAAQ,CACX39G,KAAK,EACLq+G,oBAAoB,CAACC,gBAAgB,EACrCD,oBAAoB,CAACE,kBACvB,CAAC;EACH,MAAA,CAAC,MAAM;EACL;EACA,QAAA,IAAI,CAACZ,QAAQ,CACX39G,KAAK,EACJA,KAAK,CAASw+G,uBAAuB,EACrCx+G,KAAK,CAASy+G,uBACjB,CAAC;EACH,MAAA;EACF,IAAA;IACF,CAAC;EAAA,EAAA,OAAAvB,aAAA;EAAA,CAAA,EAAA;;EC9IH;EACO,SAASpS,IAAIA,CAAC/pG,IAAY,EAAE;IACjC,IAAI+pG,IAAI,GAAG,IAAI;EACf,EAAA,IAAI7yG,CAAC,GAAG8I,IAAI,CAAChK,MAAM;EACnB,EAAA,OAAOkB,CAAC,EAAE;MACR6yG,IAAI,GAAIA,IAAI,GAAG,EAAE,GAAI/pG,IAAI,CAAC2zC,UAAU,CAAC,EAAEz8C,CAAC,CAAC;EAC3C,EAAA;EAEA,EAAA,OAAO,CAAC6yG,IAAI,KAAK,CAAC,EAAE17G,QAAQ,EAAE;EAChC;;ECJO,IAAMsvH,6BAA6B,GAAG,KAAK;EAYlD,IAAYC,iBAAiB,0BAAjBA,iBAAiB,EAAA;EAAjBA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EAAjBA,EAAAA,iBAAiB,CAAjBA,iBAAiB,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EAAA,EAAA,OAAjBA,iBAAiB;EAAA,CAAA,CAAA,EAAA,CAAA;EA6BtB,SAASC,uBAAuBA,CACrCprD,YAA+B,EAC/Bt1C,GAAW,EACX2gG,cAAsB,EACd;IACR,OAAUrrD,YAAY,CAAC/kB,UAAU,GAAA,GAAA,IAAIowE,cAAc,GAAG,CAAC,CAAA,GAAA,GAAA,GAAI/T,IAAI,CAAC5sF,GAAG,CAAC;EACtE;EAEA,IAAa4gG,iBAAiB,gBAAA,YAAA;EA0B5B,EAAA,SAAAA,iBAAAA,CAAYvgE,SAAoB,EAAE1kD,IAAc,EAAE;EAAA,IAAA,IAAA,CAzB1CA,IAAI,GAAA,MAAA;MAAA,IAAA,CACJklH,SAAS,GAAkB,IAAI;MAAA,IAAA,CAC/BC,cAAc,GAAkB,IAAI;EAAA,IAAA,IAAA,CACpCC,qBAAqB,GAAA,MAAA;EAAA,IAAA,IAAA,CACtBC,oBAAoB,GAAA,MAAA;EAAA,IAAA,IAAA,CACpB3gE,SAAS,GAAA,MAAA;MAAA,IAAA,CACT4gE,SAAS,GAAY,KAAK;MAAA,IAAA,CAC1BC,kBAAkB,GAAW,CAAC;MAAA,IAAA,CAC9BC,YAAY,GAAWr2G,GAAG;MAAA,IAAA,CAC1Bs2G,YAAY,GAAWt2G,GAAG;EAAA,IAAA,IAAA,CAC1Bu2G,YAAY,GAAyB;EAC1CvhG,MAAAA,IAAI,EAAE,KAAK;EACXwhG,MAAAA,IAAI,EAAE;OACP;EAAA,IAAA,IAAA,CACMC,WAAW,GAAgB;EAChCznH,MAAAA,GAAG,EAAE,KAAK;EACV0nH,MAAAA,EAAE,EAAE;OACL;MAAA,IAAA,CACMC,SAAS,GAA4B,EAAE;EAAA,IAAA,IAAA,CACvCC,eAAe,GAAA,MAAA;MAAA,IAAA,CACfC,iBAAiB,GAAyB,IAAI;EAAA,IAAA,IAAA,CAC9CC,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACZ/wH,KAAK,GAAA,MAAA;EAAA,IAAA,IAAA,CACLgxH,aAAa,GAAA,MAAA;MAGlB,IAAI,CAAClmH,IAAI,GAAGA,IAAI;MAChB,IAAI,CAAC0kD,SAAS,GAAGA,SAAS;EAC1B,IAAA,IAAI,CAACyhE,YAAY,CAACzhE,SAAS,CAAC;EAC9B,EAAA;EAAC,EAAA,IAAA1sD,MAAA,GAAAitH,iBAAA,CAAAhtH,SAAA;EAAAD,EAAAA,MAAA,CAEMmuH,YAAY,GAAnB,SAAOA,YAAYA,CAACzhE,SAAoB,EAAE;MACxC,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC1B,IAAA,IAAI,CAAC8gE,YAAY,GAAG9gE,SAAS,CAACnR,IAAI,CAACpuB,aAAa,CAC9C,iBAAiB,EACjB,IAAI,CAACqgG,YACP,CAAC;EACD,IAAA,IAAI,CAACC,YAAY,GAAG/gE,SAAS,CAACnR,IAAI,CAACpuB,aAAa,CAC9C,iBAAiB,EACjB,IAAI,CAACsgG,YACP,CAAC;EACD,IAAA,IAAI,CAACC,YAAY,GAAGhhE,SAAS,CAACnR,IAAI,CAACkB,oBAAoB,CACrD,YAAY,EACZ,IAAI,CAACixE,YACP,CAAC;EACD,IAAA,IAAI,CAACE,WAAW,GAAGlhE,SAAS,CAACnR,IAAI,CAACkB,oBAAoB,CACpD,QAAQ,EACR,IAAI,CAACmxE,WACP,CAAC;IACH,CAAC;EAAA5tH,EAAAA,MAAA,CAEM8zC,KAAK,GAAZ,SAAOA,KAAKA,GAAG;EAAA,IAAA,IAAAs6E,qBAAA;MACb,IAAI,CAACf,oBAAoB,GAAG,KAAK;MACjC,CAAAe,qBAAA,OAAI,CAACL,eAAe,aAApBK,qBAAA,CAAsBlsH,OAAO,EAAE;MAC/B,IAAI,CAAC6rH,eAAe,GAAG3pH,SAAS;EAChC,IAAA,IAAI,CAAC,IAAI,CAACiqH,kBAAkB,EAAE;QAC5B,IAAI,CAACL,iBAAiB,GAAG,IAAI;QAC7B,IAAI,CAACF,SAAS,GAAG,EAAE;QACnB,IAAI,CAACZ,SAAS,GAAG,IAAI;EACvB,IAAA;EACA;EACA;IACF,CAAC;EAAAltH,EAAAA,MAAA,CAEMsuH,uBAAuB,GAA9B,SAAOA,uBAAuBA,CAACC,UAAkB,EAAW;EAAA,IAAA,IAAAC,qBAAA;MAC1D,IAAID,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAI,IAAI,CAACT,SAAS,CAAC5oH,MAAM,EAAE;EACzD,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAMuoH,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,IAAIc,UAAU,IAAI,CAAC,IAAIE,KAAK,CAAChB,YAAY,CAAC,EAAE;EAC1C,MAAA,OAAO,KAAK;EACd,IAAA;MACA,IAAIA,YAAY,KAAK,CAAC,EAAE;EACtB,MAAA,OAAO,IAAI;EACb,IAAA;EACA,IAAA,IAAMiB,WAAW,GAAG,CAAA,CAAAF,qBAAA,OAAI,CAACV,SAAS,CAACS,UAAU,CAAC,KAAA,IAAA,GAAA,MAAA,GAA1BC,qBAAA,CAA4BxzD,WAAW,KAAI,CAAC;MAChE,OAAO0zD,WAAW,GAAGjB,YAAY;IACnC,CAAC;EAAAztH,EAAAA,MAAA,CAEM2uH,cAAc,GAArB,SAAOA,cAAcA,CAACC,KAA4B,EAAU;MAC1D,IAAMlhH,KAAK,GAAG,IAAI,CAACogH,SAAS,CAACxoH,OAAO,CAACspH,KAAK,CAAC;EAC3C,IAAA,OAAOlhH,KAAK;IACd,CAAC;EAAA1N,EAAAA,MAAA,CA0JDzC,QAAQ,GAAR,SAAAA,QAAQA,GAAW;MACjB,OAAOsxH,aAAa,CAAC,IAAI,CAAC;IAC5B,CAAC;IAAA,OAAA1sH,YAAA,CAAA8qH,iBAAA,EAAA,CAAA;MAAA7qH,GAAA,EAAA,YAAA;MAAAC,GAAA,EA1JD,SAAAA,GAAAA,GAAiC;EAC/B,MAAA,OAAO,IAAI,CAACqqD,SAAS,CAACrpD,EAAE;EAC1B,IAAA;EAAC,GAAA,EAAA;MAAAjB,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsB;EACpB,MAAA,OAAO,IAAI,CAACqqD,SAAS,CAAC3N,SAAS;EACjC,IAAA;EAAC,GAAA,EAAA;MAAA38C,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB;EACA,MAAA,IAAMgqC,SAAS,GAAG,IAAI,CAACqgB,SAAS,CAACrgB,SAAS;EAC1C,MAAA,IAAI,IAAI,CAACuhF,WAAW,CAACznH,GAAG,EAAE;EACxB,QAAA,IAAMkD,IAAI,GAAG,IAAI,CAACqjD,SAAS,CAAC3O,SAAS;EACrC,QAAA,IAAI10C,IAAI,EAAE;EACR,UAAA,OAAOylH,qBAAqB,CAACziF,SAAS,EAAEhjC,IAAI,CAAC;EAC/C,QAAA;EACF,MAAA;EACA,MAAA,OAAOgjC,SAAS;EAClB,IAAA;EAAC,GAAA,EAAA;MAAAjqC,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;QACxB,OAAO,IAAI,CAAC88C,GAAG,CAACP,GAAG,GAAG,CAAC,GAAG,IAAI,CAACvS,SAAS;EAC1C,IAAA;EAAC,GAAA,EAAA;MAAAjqC,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA8B;QAC5B,IAAI,IAAI,CAACgqC,SAAS,KAAK,CAAC,IAAI,IAAI,CAACuhF,WAAW,CAACznH,GAAG,EAAE;EAChD,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,IAAMkD,IAAI,GAAG,IAAI,CAACqjD,SAAS,CAAC3O,SAAS;EACrC,MAAA,IAAI10C,IAAI,EAAE;EACR,QAAA,IAAMgjC,SAAS,GAAG,IAAI,CAACqgB,SAAS,CAACrgB,SAAS;EAC1C,QAAA,IAAM0iF,YAAY,GAAGD,qBAAqB,CAACziF,SAAS,EAAEhjC,IAAI,CAAC;EAC3D,QAAA,OAAOgjC,SAAS,GAAG0iF,YAAY,GAAG,GAAG;EACvC,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA;EAAC,GAAA,EAAA;MAAA3sH,GAAA,EAAA,kBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA+B;EAC7B,MAAA,IAAMmrH,YAAY,GAAG,IAAI,CAACA,YAAY;QACtC,IAAMl+G,MAAM,GAAG9C,cAAA,CAAgBghH,YAAY,CAAC,GAAGA,YAAY,GAAG,IAAI,CAACvjH,QAAQ;EAC3E,MAAA,OAAO,IAAI,CAACsjH,kBAAkB,GAAGj+G,MAAM;EACzC,IAAA;EAAC,GAAA,EAAA;MAAAlN,GAAA,EAAA,YAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAyB;EACvB;QACA,IAAMu/D,UAAU,GAAG,IAAI,CAAC5G,WAAW,GAAG,IAAI,CAACg0D,gBAAgB;EAC3D,MAAA,IAAI,IAAI,CAACpB,WAAW,CAACC,EAAE,EAAE;EACvB,QAAA,IAAMxkH,IAAI,GAAG,IAAI,CAAC4kH,YAAY;EAC9B,QAAA,IAAI5kH,IAAI,EAAE;EACR,UAAA,OAAOylH,qBAAqB,CAACltD,UAAU,EAAEv4D,IAAI,CAAC;EAChD,QAAA;EACF,MAAA;EACA,MAAA,OAAOu4D,UAAU;EACnB,IAAA;EAAC,GAAA,EAAA;MAAAx/D,GAAA,EAAA,eAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;QAC3B,IAAI,IAAI,CAACgrH,oBAAoB,EAAE;EAC7B,QAAA,OAAO,IAAI;EACb,MAAA;QACA,IAAI,IAAI,CAACD,qBAAqB,EAAE;EAC9B,QAAA,OAAO,KAAK;EACd,MAAA;EACA,MAAA,IACE,CAAC,IAAI,CAACjuE,GAAG,CAACL,IAAI,IACd,CAAC,IAAI,CAACK,GAAG,CAACP,GAAG;EAAI;EACjB,MAAA,IAAI,CAACqwE,cAAc,KACjBR,KAAK,CAAC,IAAI,CAAChB,YAAY,CAAC,IAAIgB,KAAK,CAAC,IAAI,CAACjB,YAAY,CAAC,IACnD,IAAI,CAACA,YAAY,IAChB,IAAI,CAACvjH,QAAQ,IACbhM,IAAI,CAACQ,GAAG,CAAC,IAAI,CAAC+uH,YAAY,GAAG,IAAI,CAACvjH,QAAQ,CAAC,GACzC4iH,6BAA8B,CAAC,EACrC;EACA,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,OAAO,KAAK;MACd,CAAC;EAAA7jH,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAkBzK,KAAc,EAAE;QAChC,IAAI,IAAI,CAAC8uH,oBAAoB,EAAE;EAC7B,QAAA,IAAI,CAACa,aAAa,GAAG,CAAC3vH,KAAK;EAC3B,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAAC6uH,qBAAqB,GAAG,CAAC7uH,KAAK;EACrC,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAA6D,GAAA,EAAA,eAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAA4B;EAC1B,MAAA,IAAI,IAAI,CAAC8qH,cAAc,KAAK,IAAI,EAAE;UAChC,OAAO,IAAI,CAACA,cAAc;EAC5B,MAAA;QACA,OAAO,IAAI,CAAC9gF,SAAS;MACvB,CAAC;EAAArjC,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAkBzK,KAAa,EAAE;QAC/B,IAAI,CAAC4uH,cAAc,GAAG5uH,KAAK;EAC7B,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,UAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuB;EACrB,MAAA,IAAMorH,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,MAAA,IAAIxjH,QAAgB;EACpB,MAAA,IAAI,IAAI,CAACijH,SAAS,KAAK,IAAI,EAAE;UAC3BjjH,QAAQ,GAAG,IAAI,CAACijH,SAAS;EAC3B,MAAA,CAAC,MAAM,IAAI,IAAI,CAACxgE,SAAS,CAACziD,QAAQ,EAAE;EAClCA,QAAAA,QAAQ,GAAG,IAAI,CAACyiD,SAAS,CAACziD,QAAQ;EACpC,MAAA,CAAC,MAAM;EACLA,QAAAA,QAAQ,GAAG,IAAI,CAACyiD,SAAS,CAACwiE,eAAe,IAAI,CAAC;EAChD,MAAA;QACA,IAAI,CAACT,KAAK,CAAChB,YAAY,CAAC,IAAIA,YAAY,GAAGxjH,QAAQ,EAAE;EACnDA,QAAAA,QAAQ,GAAGwjH,YAAY;EACzB,MAAA;EACA,MAAA,OAAOxjH,QAAQ;MACjB,CAAC;EAAAjB,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAazK,KAAa,EAAE;QAC1B,IAAI,CAAC2uH,SAAS,GAAG3uH,KAAK;EACxB,IAAA;EAAC,GAAA,EAAA;MAAA6D,GAAA,EAAA,KAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,OAAO,IAAI,CAACqqD,SAAS,CAACvN,GAAG;EAC3B,IAAA;EAAC,GAAA,EAAA;MAAA/8C,GAAA,EAAA,mBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;QACtB,IAAI,IAAI,CAACqqD,SAAS,CAACnR,IAAI,CAAC,qBAAqB,CAAC,KAAK,OAAO,EAAE;UAC1D,OAAOuxE,iBAAiB,CAACqC,KAAK;EAChC,MAAA;QACA,OAAOrC,iBAAiB,CAACsC,KAAK;EAChC,IAAA;EAAC,GAAA,EAAA;MAAAhtH,GAAA,EAAA,oBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkC;QAChC,OAAO,IAAI,CAACqqD,SAAS,CAACnR,IAAI,CAAC,kBAAkB,CAAC,KAAK,SAAS;EAC9D,IAAA;EAAC,GAAA,EAAA;MAAAn5C,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA8B;QAC5B,OAAO,IAAI,CAACqqD,SAAS,CAACnR,IAAI,CAAC,oBAAoB,CAAC,KAAK,IAAI;EAC3D,IAAA;EAAC,GAAA,EAAA;MAAAn5C,GAAA,EAAA,UAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;EACjC,MAAA,OAAO,IAAI,CAACqqD,SAAS,CAACnR,IAAI,CAAC,aAAa,CAAC;EAC3C,IAAA;EAAC,GAAA,EAAA;MAAAn5C,GAAA,EAAA,cAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuC;EACrC,MAAA,OAAO,IAAI,CAACqqD,SAAS,CAACnR,IAAI,CAAC,cAAc,CAAC;EAC5C,IAAA;EAAC,GAAA,EAAA;MAAAn5C,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAsB;EACpB,MAAA,OAAO,IAAI,CAAC2F,IAAI,CAAC7K,GAAG;EACtB,IAAA;EAAC,GAAA,EAAA;MAAAiF,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA+B;EAC7B,MAAA,OAAO,IAAI,CAACyrH,SAAS,CAAC5oH,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC8oH,iBAAiB,KAAK,IAAI;EACrE,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;EAOH,SAASc,qBAAqBA,CAACzjF,IAAY,EAAEhiC,IAAsB,EAAE;EACnE,EAAA,OAAOgiC,IAAI,GAAGhiC,IAAI,CAAC9B,KAAK,GAAG8B,IAAI,CAACY,QAAQ,GAAG,CAAC,IAC1C,EACEhM,IAAI,CAACQ,GAAG,CAAC4sC,IAAI,IAAIhiC,IAAI,CAAC9B,KAAK,GAAG8B,IAAI,CAACY,QAAQ,CAAC,CAAC,GAC7C4iH,6BAA6B,CAC9B,GACCxjH,IAAI,CAAC9B,KAAK,GACV8B,IAAI,CAAC9B,KAAK,GAAG8B,IAAI,CAACY,QAAQ;EAChC;EAEO,SAASolH,kBAAkBA,CAChChjG,GAAW,EACXuwF,SAAiB,EACjBr9D,OAAgB,EACH;IACb,IAAMpiD,GAAG,GAAG,IAAIoG,IAAI,CAACnG,GAAG,CAACivB,GAAG,EAAEkzB,OAAO,CAAC;EACtC,EAAA,IAAIpiD,GAAG,CAAC+iH,QAAQ,KAAK,OAAO,EAAE;MAC5B/iH,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,iBAAiB,EAAE4zG,SAAS,CAAC;EACpD,EAAA;EACA,EAAA,OAAOz/G,GAAG;EACZ;EAEO,SAASmyH,iBAAiBA,CAC/B3tD,YAA+B,EAC/BqrD,cAAsB,EACd;EACR,EAAA,OAAA,CAAAuC,qBAAA,GAAO5tD,YAAY,CAACmsD,SAAS,CAAC,EAAEd,cAAc,CAAC,KAAA,IAAA,IAAxCuC,qBAAA,CAA0CryH,KAAK,EAAE;EAAA,IAAA,IAAAqyH,qBAAA;EAExD,EAAA,CAAC;EACD,EAAA,OAAOvC,cAAc;EACvB;EAEA,SAAS6B,aAAaA,CAACltD,YAA+B,EAAU;EAC9D,EAAA,OAAA,KAAA,GAAYA,YAAY,CAAC/kB,UAAU,GAAA,KAAA,IAAK+kB,YAAY,CAACxiB,GAAG,CAACP,GAAG,GAAG,OAAO,GAAG+iB,YAAY,CAACxiB,GAAG,CAACN,IAAI,GAAG,QAAQ,GAAG,EAAE,IAAG8iB,YAAY,CAAC7I,aAAa,CAAC9gC,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA,GAAI2pC,YAAY,CAACC,UAAU,CAAC5pC,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA;EAC9L;EAEO,SAASw3F,kBAAkBA,CAACZ,KAA4B,EAAU;EACvE,EAAA,IAAMrnH,KAAK,GAAGqnH,KAAK,CAAC91D,aAAa;EACjC,EAAA,IAAM7uD,QAAQ,GAAG2kH,KAAK,CAAC3kH,QAAQ,IAAI,CAAC;EACpC,EAAA,OAAA,KAAA,GAAY2kH,KAAK,CAAChyE,UAAU,WAAKr1C,KAAK,CAACywB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA,GAAI,CAACzwB,KAAK,GAAG0C,QAAQ,EAAE+tB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA;EACpF;;ECrTA,IAAay3F,cAAc,gBAAA,YAAA;IAUzB,SAAAA,cAAAA,CACEC,cAA0B,EAC1BC,UAAgC,EAChChuD,YAA+B,EAC/BiuD,SAAgC,EAChC;EAAA,IAAA,IAAAnmH,KAAA,GAAA,IAAA;EAAA,IAAA,IAAA,CAdK6qB,GAAG,GAAA,MAAA;EAAA,IAAA,IAAA,CACHqtC,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACHiuD,SAAS,GAAA,MAAA;MAAA,IAAA,CAClB74G,MAAM,GAAqC,IAAI;MAAA,IAAA,CAC9C84G,UAAU,GAAY,KAAK;MAAA,IAAA,CAC3BC,aAAa,GAA4B,IAAI;EAAA,IAAA,IAAA,CAC7CC,YAAY,GAAA,MAAA;EAAA,IAAA,IAAA,CACZC,gBAAgB,GAAA,MAAA;MAAA,IAAA,CA4EhBC,YAAY,GAAG,YAAM;EAC3B,MAAA,IAAIxmH,KAAI,CAACymH,cAAc,CAACzmH,KAAI,CAAC8tD,WAAW,CAAC,IAAI9tD,KAAI,CAAC6qB,GAAG,EAAE;UACrD7qB,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACsxH,qBAAqB,EAAE,EAAE,CAAC;EACpD,MAAA;MACF,CAAC;MAxEC,IAAM77F,GAAG,GAAI,IAAI,CAACA,GAAG,GAAG,IAAIo7F,cAAc,CAACC,UAAU,CAAE;MACvD,IAAI,CAAChuD,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACiuD,SAAS,GAAGA,SAAS;EAC1B,IAAA,IAAMQ,aAAa,GAAG,SAAhBA,aAAaA,GAAS;QAC1B3mH,KAAI,CAAComH,UAAU,GAAG,IAAI;MACxB,CAAC;MACDv7F,GAAG,CAACwqB,IAAI,CAACjgD,MAAM,CAAC46B,YAAY,EAAE22F,aAAa,CAAC;MAC5C97F,GAAG,CAACwqB,IAAI,CAACjgD,MAAM,CAACg3F,kBAAkB,EAAEu6B,aAAa,CAAC;MAClD97F,GAAG,CAACwqB,IAAI,CAACjgD,MAAM,CAACwxH,qBAAqB,EAAED,aAAa,CAAC;MACrD97F,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuiG,eAAe,EAAE,UAAC/7F,IAAI,EAAAwE,IAAA,EAAgB;EAAA,MAAA,IAAZ2kB,KAAK,GAAA3kB,IAAA,CAAL2kB,KAAK;QAC3C/kB,KAAI,CAAC6mH,oBAAoB,EAAE;QAC3B7mH,KAAI,CAACqmH,aAAa,GAAGthG,KAAK;EAC1B,MAAA,IAAM2L,KAAK,GAAG1wB,KAAI,CAACk4D,YAAY;QAC/B,IAAIxnC,KAAK,CAACszF,YAAY,EAAE;UACtBj/F,KAAK,CAAC6mC,gBAAgB,CAAC,YAAY,EAAE5rD,KAAI,CAACwmH,YAAY,CAAC;UACvD,IAAIxmH,KAAI,CAAC+3D,aAAa,EAAE;EACtBltC,UAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACkrC,eAAe,EAAE,YAAM;EACnC,YAAA,IAAMwmF,WAAW,GAAG9mH,KAAI,CAAC8mH,WAAW;EACpC,YAAA,IAAI9mH,KAAI,CAACymH,cAAc,CAACK,WAAW,CAAC,EAAE;gBACpC9mH,KAAI,CAACumH,gBAAgB,GAAGO,WAAW;gBACnCj8F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACmqG,eAAe,EAAE5kG,SAAS,CAAC;EAChD,YAAA;EACF,UAAA,CAAC,CAAC;EACJ,QAAA;EACF,MAAA;EACF,IAAA,CAAC,CAAC;EACJ,EAAA;EAAC,EAAA,IAAApE,MAAA,GAAAyvH,cAAA,CAAAxvH,SAAA;EAAAD,EAAAA,MAAA,CAMDwwH,UAAU,GAAV,SAAAA,UAAUA,GAAG;EACX,IAAA,IAAMl8F,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAI,CAACA,GAAG,EAAE;EACR,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACA,GAAG,CAACn3B,GAAG,EAAE;EACZ,MAAA,IAAIkvB,GAAW,GAAG,IAAI,CAACujG,SAAS,CAACvjG,GAAG;QACpC,IAAI;EACFA,QAAAA,GAAG,GAAGgjG,kBAAkB,CAAChjG,GAAG,EAAEiI,GAAG,CAACrJ,MAAM,CAACwlG,gBAAgB,IAAI,EAAE,CAAC,CAAClkG,IAAI;QACvE,CAAC,CAAC,OAAOrvB,KAAK,EAAE;EACd;EACA;EAAA,MAAA;EAEFo3B,MAAAA,GAAG,CAACk8F,UAAU,CAACnkG,GAAG,CAAC;EACrB,IAAA,CAAC,MAAM,IAAIiI,GAAG,CAACxC,MAAM,CAAC5sB,MAAM,IAAI,CAAEovB,GAAG,CAASypF,OAAO,EAAE;EACrDzpF,MAAAA,GAAG,CAACsP,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;EACzB,IAAA;IACF,CAAC;EAAA5jC,EAAAA,MAAA,CAED0wH,oBAAoB,GAApB,SAAAA,oBAAoBA,CAACliG,KAA+B,EAAE;EAAA,IAAA,IAAAoO,SAAA;EACpD,IAAA,IAAI,CAAC,IAAI,CAAC4kC,aAAa,EAAE;EACvB,MAAA,OAAO,KAAK;EACd,IAAA;MACA,IAAA,CAAA5kC,SAAA,GAAI,IAAI,CAACtI,GAAG,KAAA,IAAA,IAARsI,SAAA,CAAU+zF,aAAa,EAAE;EAC3B,MAAA,OAAO,IAAI;EACb,IAAA;MACA,IAAI,CAACniG,KAAK,EAAE;EACV,MAAA,OAAO,KAAK;EACd,IAAA;EACA,IAAA,IAAMvkB,QAAQ,GAAGhM,IAAI,CAAC+D,GAAG,CAAC,IAAI,CAACguH,gBAAgB,IAAIn3G,QAAQ,EAAE,IAAI,CAAC5O,QAAQ,CAAC;EAC3E,IAAA,IAAM1C,KAAK,GAAG,IAAI,CAACwxD,cAAc;MACjC,IAAM1iC,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CAAC7H,KAAK,EAAEjnB,KAAK,EAAE,CAAC,CAAC;MAC3D,IAAMgpH,WAAW,GAAG,IAAI,CAACK,YAAY,CAACv6F,UAAU,CAAC5uB,GAAG,CAAC;EACrD,IAAA,OAAO8oH,WAAW,IAAItmH,QAAQ,GAAG,IAAI;IACvC,CAAC;EAAAjK,EAAAA,MAAA,CAQOkwH,cAAc,GAAtB,SAAQA,cAAcA,CAAC7kF,IAAY,EAAW;EAC5C,IAAA,IAAMs2B,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,IAAA,IAAM8rD,YAAY,GAAG9rD,YAAY,CAAC8rD,YAAY;EAC9C,IAAA,OAAO,IAAI,CAACzyD,WAAW,GAAG3vB,IAAI,IAAIoiF,YAAY;IAChD,CAAC;EAAAztH,EAAAA,MAAA,CAoFO4wH,YAAY,GAApB,SAAQA,YAAYA,CAACvlF,IAAY,EAAU;EACzC,IAAA,IAAM0tB,cAAc,GAAG,IAAI,CAACA,cAAc;EAC1C,IAAA,IAAM9uD,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,OAAOhM,IAAI,CAAC+D,GAAG,CAAC/D,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE8pC,IAAI,GAAG0tB,cAAc,CAAC,EAAE9uD,QAAQ,CAAC;IAC/D,CAAC;EAAAjK,EAAAA,MAAA,CAEOswH,oBAAoB,GAA5B,SAAQA,oBAAoBA,GAAG;EAC7B,IAAA,IAAM9hG,KAAK,GAAG,IAAI,CAACshG,aAAa;EAChC,IAAA,IAAIthG,KAAK,EAAE;EACT,MAAA,IAAI,CAACuhG,YAAY,GAAGvhG,KAAK,CAAC+oC,WAAW;QACrC,IAAI,CAACs5D,cAAc,EAAE;QACrBriG,KAAK,CAAC+mC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC06D,YAAY,CAAC;EAC5D,IAAA;IACF,CAAC;EAAAjwH,EAAAA,MAAA,CAEO6wH,cAAc,GAAtB,SAAQA,cAAcA,GAAG;MACvB,IAAI,IAAI,CAACf,aAAa,EAAE;EAAA,MAAA,IAAA5xF,UAAA;QACtB,IAAA,CAAAA,UAAA,GAAI,IAAI,CAAC5J,GAAG,KAAA,IAAA,IAAR4J,UAAA,CAAUyyF,aAAa,EAAE;EAC3B,QAAA,IAAI,CAACX,gBAAgB,GAAG,IAAI,CAACO,WAAW;EAC1C,MAAA;EACF,IAAA;IACF,CAAC;EAAAvwH,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAACouH,oBAAoB,EAAE;MAC3B,IAAI,IAAI,CAACh8F,GAAG,EAAE;EACZ,MAAA,IAAI,CAACA,GAAG,CAACpyB,OAAO,EAAE;EACpB,IAAA;MACA,IAAI,CAACoyB,GAAG,GAAG,IAAI;EACf;MACA,IAAI,CAACvd,MAAM,GAAG,IAAI,CAAC+4G,aAAa,GAAG,IAAI,CAACG,YAAY,GAAG,IAAI;IAC7D,CAAC;EAAAjwH,EAAAA,MAAA,CAED8wH,WAAW,GAAX,SAAAA,WAAWA,CAAC/lH,IAA2C,EAAE;EAAA,IAAA,IAAAozB,UAAA;MACvD,IAAI,CAACqyF,UAAU,EAAE;MACjB,CAAAryF,UAAA,GAAA,IAAI,CAAC7J,GAAG,KAAA,IAAA,IAAR6J,UAAA,CAAU2yF,WAAW,CAAC/lH,IAAI,CAAC;IAC7B,CAAC;EAAA/K,EAAAA,MAAA,CAED+wH,WAAW,GAAX,SAAAA,WAAWA,GAAG;EAAA,IAAA,IAAAC,UAAA;MACZ,IAAI,CAACV,oBAAoB,EAAE;MAC3B,IAAI,CAACR,aAAa,GAAG,IAAI;MACzB,CAAAkB,UAAA,OAAI,CAAC18F,GAAG,aAAR08F,UAAA,CAAUD,WAAW,EAAE;IACzB,CAAC;EAAA/wH,EAAAA,MAAA,CAED44D,eAAe,GAAf,SAAAA,eAAeA,GAAG;EAAA,IAAA,IAAAq4D,UAAA;MAChB,CAAAA,UAAA,OAAI,CAAC38F,GAAG,aAAR28F,UAAA,CAAUr4D,eAAe,EAAE;IAC7B,CAAC;EAAA54D,EAAAA,MAAA,CAED24D,cAAc,GAAd,SAAAA,cAAcA,GAAG;EAAA,IAAA,IAAAu4D,UAAA;MACf,CAAAA,UAAA,OAAI,CAAC58F,GAAG,aAAR48F,UAAA,CAAUv4D,cAAc,EAAE;IAC5B,CAAC;EAAA34D,EAAAA,MAAA,CAEDq5D,aAAa,GAAb,SAAAA,aAAaA,GAAG;EAAA,IAAA,IAAA83D,UAAA;MACd,IAAI,CAACN,cAAc,EAAE;EACrB,IAAA,OAAO,CAAA,CAAAM,UAAA,GAAA,IAAI,CAAC78F,GAAG,KAAA,IAAA,GAAA,MAAA,GAAR68F,UAAA,CAAU93D,aAAa,EAAE,KAAI,IAAI;IAC1C,CAAC;EAAAr5D,EAAAA,MAAA,CAEDoxH,YAAY,GAAZ,SAAAA,YAAYA,GAAG;EACb,IAAA,IAAM98F,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IAAIA,GAAG,IAAI,IAAI,CAACu7F,UAAU,EAAE;QAC1Bv7F,GAAG,CAACwP,QAAQ,EAAE;EACd,MAAA,IAAMutF,aAAa,GAAG,SAAhBA,aAAaA,CAAI/oD,GAAG,EAAA;UAAA,OAAK,OAAOA,GAAG,CAAC38C,OAAO;EAAA,MAAA,CAAA;EACjD2I,MAAAA,GAAG,CAACxC,MAAM,CAAC9tB,OAAO,CAACqtH,aAAa,CAAC;EACjC/8F,MAAAA,GAAG,CAAChD,cAAc,CAACttB,OAAO,CAACqtH,aAAa,CAAC;EACzC/8F,MAAAA,GAAG,CAACg9F,iBAAiB,CAACttH,OAAO,CAACqtH,aAAa,CAAC;QAC5C,IAAI,CAACxB,UAAU,GAAG,KAAK;EACzB,IAAA;IACF,CAAC;IAAA7vH,MAAA,CAED84B,EAAE,GAAF,SAAAA,EAAEA,CACAqB,KAAQ,EACRm7B,QAAyB,EACzBzxD,OAAiB,EACjB;EAAA,IAAA,IAAA0tH,UAAA;EACA,IAAA,CAAAA,UAAA,GAAA,IAAI,CAACj9F,GAAG,KAAA,IAAA,IAARi9F,UAAA,CAAUz4F,EAAE,CAACqB,KAAK,EAAEm7B,QAAQ,CAAC;IAC/B,CAAC;IAAAt1D,MAAA,CAED8+C,IAAI,GAAJ,SAAAA,IAAIA,CACF3kB,KAAQ,EACRm7B,QAAyB,EACzBzxD,OAAiB,EACjB;EAAA,IAAA,IAAA2tH,UAAA;EACA,IAAA,CAAAA,UAAA,GAAA,IAAI,CAACl9F,GAAG,KAAA,IAAA,IAARk9F,UAAA,CAAU1yE,IAAI,CAAC3kB,KAAK,EAAEm7B,QAAQ,CAAC;IACjC,CAAC;IAAAt1D,MAAA,CAEDk6B,GAAG,GAAH,SAAAA,GAAGA,CACDC,KAAQ,EACRm7B,QAAyB,EACzBzxD,OAAiB,EACjB;EAAA,IAAA,IAAA4tH,UAAA;EACA,IAAA,CAAAA,UAAA,GAAA,IAAI,CAACn9F,GAAG,KAAA,IAAA,IAARm9F,UAAA,CAAUv3F,GAAG,CAACC,KAAK,EAAEm7B,QAAQ,CAAC;IAChC,CAAC;EAAAt1D,EAAAA,MAAA,CAEDzC,QAAQ,GAAR,SAAAA,QAAQA,GAAW;EAAA,IAAA,IAAAm0H,UAAA;MACjB,OAAA,kBAAA,GAA0BlC,kBAAkB,CAAC,IAAI,CAACI,SAAS,CAAC,GAAA,GAAA,IAAA,CAAA8B,UAAA,GAAI,IAAI,CAACp9F,GAAG,KAAA,IAAA,GAAA,MAAA,GAARo9F,UAAA,CAAU9U,SAAS,CAAA,GAAA,GAAA,IAAI,IAAI,CAACp7C,aAAa,GAAG,iBAAiB,GAAG,EAAE,CAAA;IACpI,CAAC;IAAA,OAAAr/D,YAAA,CAAAstH,cAAA,EAAA,CAAA;MAAArtH,GAAA,EAAA,eAAA;MAAAC,GAAA,EArOD,SAAAA,GAAAA,GAA6B;EAC3B,MAAA,OAAO,IAAI,CAACs/D,YAAY,CAACH,aAAa;EACxC,IAAA;EAAC,GAAA,EAAA;MAAAp/D,GAAA,EAAA,WAAA;MAAAC,GAAA,EAkDD,SAAAA,GAAAA,GAAyB;EAAA,MAAA,IAAAsvH,WAAA;QACvB,OAAO,EAAA,CAAAA,WAAA,GAAC,IAAI,CAACr9F,GAAG,KAAA,IAAA,IAARq9F,WAAA,CAAUhC,UAAU,CAAA;EAC9B,IAAA;EAAC,GAAA,EAAA;MAAAvtH,GAAA,EAAA,SAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;EACjC,MAAA,OAAO,IAAI,CAACutH,SAAS,CAAChzE,UAAU;EAClC,IAAA;EAAC,GAAA,EAAA;MAAAx6C,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqC;EACnC,MAAA,OAAO,IAAI,CAACutH,SAAS,CAACgC,gBAAgB;EACxC,IAAA;EAAC,GAAA,EAAA;MAAAxvH,GAAA,EAAA,OAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqC;EAAA,MAAA,IAAAwvH,WAAA;QACnC,OAAO,CAAA,CAAAA,WAAA,GAAA,IAAI,CAACv9F,GAAG,qBAARu9F,WAAA,CAAUrjG,KAAK,KAAI,IAAI;EAChC,IAAA;EAAC,GAAA,EAAA;MAAApsB,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;QACxB,IAAMmsB,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,IAAI,CAACshG,aAAa;QAC9C,IAAI,CAACthG,KAAK,EAAE;UACV,IAAI,IAAI,CAACwhG,gBAAgB,EAAE;YACzB,OAAO,IAAI,CAACA,gBAAgB;EAC9B,QAAA;UACA,OAAO,IAAI,CAACz4D,WAAW;EACzB,MAAA;EACA,MAAA,IAAMlhC,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CAAC7H,KAAK,EAAEA,KAAK,CAAC+oC,WAAW,EAAE,KAAK,CAAC;EAC3E,MAAA,OAAO,IAAI,CAACq5D,YAAY,CAACv6F,UAAU,CAAC5uB,GAAG,CAAC;EAC1C,IAAA;EAAC,GAAA,EAAA;MAAArF,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;QACxB,IAAMmsB,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,IAAI,CAACshG,aAAa;QAC9C,IAAI,CAACthG,KAAK,EAAE;EACV,QAAA,OAAO,IAAI,CAACuhG,YAAY,IAAI,CAAC;EAC/B,MAAA;EACA,MAAA,OAAO,IAAI,CAACa,YAAY,CAACpiG,KAAK,CAAC+oC,WAAW,CAAC;EAC7C,IAAA;EAAC,GAAA,EAAA;MAAAn1D,GAAA,EAAA,UAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuB;EACrB,MAAA,IAAM4H,QAAQ,GAAG,IAAI,CAAC2lH,SAAS,CAAC3lH,QAAQ;QACxC,IAAI,CAACA,QAAQ,EAAE;EACb,QAAA,OAAO,CAAC;EACV,MAAA;EACA,MAAA,IAAMwjH,YAAY,GAAG,IAAI,CAAC9rD,YAAY,CAAC8rD,YAAY;EACnD,MAAA,IAAIA,YAAY,EAAE;EAChB,QAAA,IAAMqE,YAAY,GAAGrE,YAAY,GAAG,IAAI,CAACzyD,WAAW;EACpD,QAAA,IAAI82D,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAG7nH,QAAQ,EAAE;EAC/C,UAAA,OAAO6nH,YAAY;EACrB,QAAA;EACF,MAAA;EACA,MAAA,OAAO7nH,QAAQ;EACjB,IAAA;EAAC,GAAA,EAAA;MAAA7H,GAAA,EAAA,WAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwB;EACtB,MAAA,IAAM4H,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC9B,IAAI,CAACA,QAAQ,EAAE;EACb,QAAA,OAAO,CAAC;EACV,MAAA;QACA,OAAOhM,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAE0I,QAAQ,GAAG,IAAI,CAACstD,WAAW,CAAC;EACjD,IAAA;EAAC,GAAA,EAAA;MAAAn1D,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA0B;EACxB,MAAA,OAAO,IAAI,CAACutH,SAAS,CAAC50D,WAAW;EACnC,IAAA;EAAC,GAAA,EAAA;MAAA54D,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAA6B;EAAA,MAAA,IAAA0vH,WAAA;EAC3B,MAAA,OAAO,CAAA,CAAAA,WAAA,GAAA,IAAI,CAACz9F,GAAG,KAAA,IAAA,GAAA,MAAA,GAARy9F,WAAA,CAAU9mG,MAAM,CAAC8tC,cAAc,KAAI,CAAC;MAC7C,CAAC;EAAA/vD,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAmBzK,KAAa,EAAE;EAChC,MAAA,IAAMw6D,cAAc,GAAG,IAAI,CAACA,cAAc;QAC1C,IAAIx6D,KAAK,KAAKw6D,cAAc,EAAE;EAC5B,QAAA,IAAMi5D,IAAI,GAAGzzH,KAAK,GAAGw6D,cAAc;EACnC,QAAA,IAAI96D,IAAI,CAACQ,GAAG,CAACuzH,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC19F,GAAG,EAAE;YAC1C,IAAI,IAAI,CAACu7F,UAAU,EAAE;cACnB,MAAM,IAAI3nG,KAAK,CAAA,sDAEf,CAAC;EACH,UAAA;EACA,UAAA,IAAI,CAACoM,GAAG,CAACrJ,MAAM,CAAC8tC,cAAc,GAAGx6D,KAAK;EACxC,QAAA;EACF,MAAA;EACF,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,EAAA;;EC9LH,IAAM0zH,0BAA0B,GAAG,KAAK;EAiDxC,IAAaC,qBAAqB,0BAAAx9F,OAAA,EAAA;EAWhC,EAAA,SAAAw9F,qBAAAA,CAAYC,gBAAwC,EAAE3vH,MAAe,EAAE;EAAA,IAAA,IAAAiH,KAAA;MACrEA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,OAAM,qBAAqB,EAAElH,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAX/B0oH,gBAAgB,GAAA,MAAA;EAAA1oH,IAAAA,KAAA,CAChB2oH,QAAQ,GAAkD,EAAE;MAAA3oH,KAAA,CAC7D4oH,MAAM,GAA+B,IAAI;MAAA5oH,KAAA,CACzC6oH,KAAK,GAAsC,IAAI;MAAA7oH,KAAA,CAC/C8oH,SAAS,GAAkC;EAChDC,MAAAA,OAAO,EAAE,CAAC;EACVC,MAAAA,OAAO,EAAE,CAAC;EACVC,MAAAA,UAAU,EAAE;OACb;MAICjpH,KAAA,CAAK0oH,gBAAgB,GAAGA,gBAAgB;EAAC,IAAA,OAAA1oH,KAAA;EAC3C,EAAA;IAAC6B,cAAA,CAAA4mH,qBAAA,EAAAx9F,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAkyH,qBAAA,CAAAjyH,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC4xC,KAAK,EAAE;EACZ;MACA,IAAI,CAACq+E,gBAAgB,GAAG,IAAI;IAC9B,CAAC;EAAAnyH,EAAAA,MAAA,CAEM8zC,KAAK,GAAZ,SAAOA,KAAKA,GAAG;EACb,IAAA,IAAI,CAACs+E,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACO,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC1B,IAAI,IAAI,CAACN,MAAM,EAAE;EACf,MAAA,IAAI,CAACA,MAAM,CAACruH,OAAO,CAAC,UAAC29D,YAAY,EAAA;EAAA,QAAA,OAAKA,YAAY,CAAC7tB,KAAK,EAAE;QAAA,CAAA,CAAC;EAC7D,IAAA;EACA,IAAA,IAAI,CAACu+E,MAAM,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI;IACjC,CAAC;IAAAtyH,MAAA,CAEM4yH,kBAAkB,GAAzB,SAAOA,kBAAkBA,CAACrrH,KAAa,EAAEE,GAAW,EAAU;MAC5D,IAAI,IAAI,CAAC4qH,MAAM,EAAE;QACf,OAAO,IAAI,CAACA,MAAM,CAACp5G,MAAM,CAAC,UAACk5D,KAAK,EAAExQ,YAAY,EAAK;UACjD,IACEp6D,KAAK,IAAIo6D,YAAY,CAAC3G,WAAW,IACjCvzD,GAAG,GAAGk6D,YAAY,CAAC3G,WAAW,EAC9B;YACA,OAAO2G,YAAY,CAACzkE,KAAK;YACzB,OAAOi1E,KAAK,GAAG,CAAC;EAClB,QAAA;EACA,QAAA,OAAOA,KAAK;QACd,CAAC,EAAE,CAAC,CAAC;EACP,IAAA;EACA,IAAA,OAAO,CAAC;IACV,CAAC;EAAAnyE,EAAAA,MAAA,CAWM6yH,QAAQ,GAAf,SAAOA,QAAQA,CACbj2E,UAAsC,EACZ;MAC1B,OAAOA,UAAU,GAAG,IAAI,CAACw1E,QAAQ,CAACx1E,UAAU,CAAC,IAAI,IAAI,GAAG,IAAI;IAC9D,CAAC;EAAA58C,EAAAA,MAAA,CAEM8yH,QAAQ,GAAf,SAAOA,QAAQA,CAACl2E,UAA0B,EAAW;EACnD,IAAA,OAAOA,UAAU,IAAI,IAAI,CAACw1E,QAAQ;IACpC,CAAC;IAAApyH,MAAA,CAEM+yH,aAAa,GAApB,SAAOA,aAAaA,CAAC/d,IAA8B,EAAE3pE,IAAa,EAAU;MAC1E,IAAI2pE,IAAI,CAAC76E,KAAK,EAAE;EACd;QACA,OAAO,IAAI,CAAC64F,cAAc,CAAChe,IAAI,CAAC76E,KAAK,CAACyiB,UAAU,CAAC;EACnD,IAAA;EACA;MACA,IAAIlvC,KAAK,GAAG,EAAE;MACd,IAAIsnG,IAAI,CAACvzC,SAAS,EAAE;EAClB/zD,MAAAA,KAAK,GAAG,IAAI,CAACslH,cAAc,CAAChe,IAAI,CAACvzC,SAAS,CAAC7kB,UAAU,CAAC,GAAG,CAAC;EAC5D,IAAA,CAAC,MAAM,IAAIo4D,IAAI,CAACie,aAAa,EAAE;EAC7BvlH,MAAAA,KAAK,GAAG,IAAI,CAACslH,cAAc,CAAChe,IAAI,CAACie,aAAa,CAACr2E,UAAU,CAAC,GAAG,CAAC;EAChE,IAAA;EACA,IAAA,IAAM01E,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAIA,KAAK,EAAE;EACT,MAAA,IAAI,CAACA,KAAK,CAAC5kH,KAAK,CAAC,EAAE;UACjB,IAAI29B,IAAI,KAAKjnC,SAAS,EAAE;YACtBinC,IAAI,GAAG2pE,IAAI,CAACztG,KAAK;EACnB,QAAA;EACAmG,QAAAA,KAAK,GAAG,IAAI,CAACwlH,mBAAmB,CAAC7nF,IAAI,CAAC;EACxC,MAAA;EACA;EACA,MAAA,OAAO39B,KAAK,IAAI,CAAC,IAAA,CAAAylH,YAAA,GAAIb,KAAK,CAAC5kH,KAAK,CAAC,KAAA,IAAA,IAAZylH,YAAA,CAAch5F,KAAK,EAAE;EAAA,QAAA,IAAAg5F,YAAA;EACxC;EACA;EACAzlH,QAAAA,KAAK,EAAE;EACT,MAAA;EACF,IAAA;EACA,IAAA,OAAOA,KAAK;IACd,CAAC;IAAA1N,MAAA,CAEMkzH,mBAAmB,GAA1B,SAAOA,mBAAmBA,CACxBE,WAAmB,EACnBC,YAA2B,EACnB;EACR,IAAA,IAAMf,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAIA,KAAK,EAAE;EACT,MAAA,KAAK,IAAIlsH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGksH,KAAK,CAACptH,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACrC,QAAA,IAAI0kC,SAAyC,GAAGwnF,KAAK,CAAClsH,CAAC,CAAC;EACxD,QAAA,IAAIitH,YAAY,IAAIA,YAAY,KAAK,SAAS,EAAE;EAC9CvoF,UAAAA,SAAS,GAAGA,SAAS,CAACuoF,YAAY,CAAC;EACrC,QAAA;EACA,QAAA,IACED,WAAW,KAAKtoF,SAAS,CAACvjC,KAAK,IAC9B6rH,WAAW,GAAGtoF,SAAS,CAACvjC,KAAK,IAAI6rH,WAAW,GAAGtoF,SAAS,CAACrjC,GAAI,EAC9D;EACA,UAAA,OAAOrB,CAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;IAAApG,MAAA,CAEMszH,uBAAuB,GAA9B,SAAOA,uBAAuBA,CAAC7kE,UAAkB,EAAEE,QAAgB,EAAU;EAC3E,IAAA,IAAM2jE,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAIA,KAAK,EAAE;QACT,KAAK,IAAIlsH,CAAC,GAAGqoD,UAAU,EAAEroD,CAAC,IAAIuoD,QAAQ,EAAEvoD,CAAC,EAAE,EAAE;EAC3C,QAAA,IAAI,CAACksH,KAAK,CAAClsH,CAAC,CAAC,EAAE;EACb,UAAA;EACF,QAAA;EACA,QAAA,IAAM+zB,KAAK,GAAGm4F,KAAK,CAAClsH,CAAC,CAAC,CAAC+zB,KAAK;EAC5B,QAAA,IAAIA,KAAK,IAAA,IAAA,IAALA,KAAK,CAAEuzF,YAAY,CAACC,IAAI,IAAI,CAACxzF,KAAK,CAACqnC,aAAa,EAAE;EACpD,UAAA,OAAOp7D,CAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;EAAApG,EAAAA,MAAA,CAEMgzH,cAAc,GAArB,SAAOA,cAAcA,CAACp2E,UAA0B,EAAU;EACxD,IAAA,IAAM01E,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,IAAA,IAAIA,KAAK,EAAE;QACT,KAAK,IAAIlsH,CAAC,GAAGksH,KAAK,CAACptH,MAAM,EAAEkB,CAAC,EAAE,GAAI;EAAA,QAAA,IAAAmtH,cAAA;EAChC,QAAA,IAAI,CAAA,CAAAA,cAAA,GAAAjB,KAAK,CAAClsH,CAAC,CAAC,CAAC+zB,KAAK,qBAAdo5F,cAAA,CAAgB32E,UAAU,MAAKA,UAAU,EAAE;EAC7C,UAAA,OAAOx2C,CAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;IAAApG,MAAA,CAEM2uH,cAAc,GAArB,SAAOA,cAAcA,CAACx0F,KAAwB,EAAEi5F,WAAmB,EAAU;EAC3E,IAAA,IAAMtF,SAAS,GAAG3zF,KAAK,CAAC2zF,SAAS;EACjC,IAAA,IAAM5oH,MAAM,GAAG4oH,SAAS,CAAC5oH,MAAM;MAC/B,IAAIA,MAAM,GAAG,CAAC,EAAE;QACd,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC/B,QAAA,IAAMwoH,KAAK,GAAGd,SAAS,CAAC1nH,CAAC,CAAC;EAC1B,QAAA,IAAI,CAACwoH,KAAK,CAAC1xH,KAAK,EAAE;EAChB,UAAA,IAAM47D,aAAa,GAAG81D,KAAK,CAAC91D,aAAa;YACzC,IACEs6D,WAAW,KAAKt6D,aAAa,IAC5Bs6D,WAAW,GAAGt6D,aAAa,KACzBs6D,WAAW,GAAGt6D,aAAa,IAAI81D,KAAK,CAAC3kH,QAAQ,IAAI,CAAC,CAAC,IAClD7D,CAAC,KAAKlB,MAAM,GAAG,CAAC,CAAE,EACtB;EACA,YAAA,OAAOkB,CAAC;EACV,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,CAAC;IACV,CAAC;IAAApG,MAAA,CAcMwzH,2BAA2B,GAAlC,SAAOA,2BAA2BA,CAChCC,cAA8B,EAC9BC,mBAA4B,EAC5B;EAAA,IAAA,IAAA/lH,MAAA,GAAA,IAAA;EACA,IAAA,IAAMge,OAAO,GAAG8nG,cAAc,CAACE,IAAI,CAAChoG,OAAQ;EAC5C,IAAA,IAAQg0B,UAAU,GAAKh0B,OAAO,CAAtBg0B,UAAU;EAClB,IAAA,IAAMi0E,0BAA0B,GAAG,IAAI,CAACvB,MAAM;EAC9C,IAAA,IAAMwB,kBAAkB,GAAG,IAAI,CAACC,eAAe,CAC7Cn0E,UAAU,EACV;QACExiD,GAAG,EAAEwuB,OAAO,CAACxuB;OACd,EACDu2H,mBACF,CAAC;EACD,IAAA,IAAMK,GAAG,GAAGhvH,MAAM,CAAChB,IAAI,CAAC47C,UAAU,CAAC;MACnC,IAAMq0E,oBAAoB,GAAGJ,0BAA0B,GACnDA,0BAA0B,CAACvmG,MAAM,CAC/B,UAAC8M,KAAK,EAAA;QAAA,OAAK,CAAC45F,GAAG,CAACngB,QAAQ,CAACz5E,KAAK,CAACyiB,UAAU,CAAC;MAAA,CAC5C,CAAC,GACD,EAAE;MACN,IAAIi3E,kBAAkB,CAAC3uH,MAAM,EAAE;EAC7B;EACA;EACA2uH,MAAAA,kBAAkB,CAACz5E,IAAI,CAAC,UAACC,CAAC,EAAEhkC,CAAC,EAAK;EAChC,QAAA,IAAM49G,IAAI,GAAG55E,CAAC,CAAC8E,GAAG,CAACP,GAAG;EACtB,QAAA,IAAMs1E,KAAK,GAAG75E,CAAC,CAAC8E,GAAG,CAACN,IAAI;EACxB,QAAA,IAAMs1E,IAAI,GAAG99G,CAAC,CAAC8oC,GAAG,CAACP,GAAG;EACtB,QAAA,IAAMw1E,KAAK,GAAG/9G,CAAC,CAAC8oC,GAAG,CAACN,IAAI;EACxB,QAAA,IAAIo1E,IAAI,IAAI,CAACE,IAAI,EAAE;EACjB,UAAA,OAAO,EAAE;EACX,QAAA;EACA,QAAA,IAAIA,IAAI,IAAI,CAACF,IAAI,EAAE;EACjB,UAAA,OAAO,CAAC;EACV,QAAA;EACA,QAAA,IAAIC,KAAK,IAAI,CAACE,KAAK,EAAE;EACnB,UAAA,OAAO,CAAC;EACV,QAAA;EACA,QAAA,IAAIA,KAAK,IAAI,CAACF,KAAK,EAAE;EACnB,UAAA,OAAO,EAAE;EACX,QAAA;UACA,IAAI,CAACD,IAAI,IAAI,CAACE,IAAI,IAAI,CAACD,KAAK,IAAI,CAACE,KAAK,EAAE;EACtC,UAAA,IAAMC,MAAM,GAAGh6E,CAAC,CAAChO,SAAS;EAC1B,UAAA,IAAMioF,MAAM,GAAGj+G,CAAC,CAACg2B,SAAS;YAC1B,IAAIgoF,MAAM,KAAKC,MAAM,EAAE;cACrB,OAAOD,MAAM,GAAGC,MAAM;EACxB,UAAA;EACF,QAAA;UACA,OAAOj6E,CAAC,CAACqS,SAAS,CAAC1O,QAAQ,GAAG3nC,CAAC,CAACq2C,SAAS,CAAC1O,QAAQ;EACpD,MAAA,CAAC,CAAC;EACJ,IAAA;MACA,IAAI,CAACq0E,MAAM,GAAGwB,kBAAkB;;EAEhC;EACAG,IAAAA,oBAAoB,CAAChwH,OAAO,CAAC,UAAC29D,YAAY,EAAK;EAC7Ch0D,MAAAA,MAAI,CAAC4mH,WAAW,CAAC5yD,YAAY,CAAC;EAChC,IAAA,CAAC,CAAC;EAEF,IAAA,IAAI,CAAC6yD,cAAc,CAACf,cAAc,EAAEO,oBAAoB,CAAC;IAC3D,CAAC;IAAAh0H,MAAA,CAEMw0H,cAAc,GAArB,SAAOA,cAAcA,CACnBf,cAA8B,EAC9BO,oBAAyC,EACzCS,WAAoB,EACpB;EAAA,IAAA,IAFAT,oBAAyC,KAAA,MAAA,EAAA;EAAzCA,MAAAA,oBAAyC,GAAG,EAAE;EAAA,IAAA;EAAA,IAAA,IAC9CS,WAAoB,KAAA,MAAA,EAAA;EAApBA,MAAAA,WAAoB,GAAG,KAAK;EAAA,IAAA;EAE5B,IAAA,IAAMpC,MAAM,GAAG,IAAI,CAACA,MAAM,IAAI,EAAE;EAChC,IAAA,IAAIA,MAAM,CAACntH,MAAM,IAAI8uH,oBAAoB,CAAC9uH,MAAM,IAAI,IAAI,CAACA,MAAM,GAAG,CAAC,EAAE;EACnE,MAAA,IAAMwvH,YAAY,GAAG,IAAI,CAACpC,KAAK;QAC/B,IAAMqC,YAAY,GAAG,IAAI,CAACC,aAAa,CAACvC,MAAM,EAAEoB,cAAc,CAAC;QAC/D,IAAMzzE,OAAO,GACXy0E,WAAW,IACXT,oBAAoB,CAAC9uH,MAAM,IAC3B,CAAAwvH,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAExvH,MAAM,MAAKyvH,YAAY,CAACzvH,MAAM,IAC5CyvH,YAAY,CAACvvH,IAAI,CAAC,UAAC4vG,IAAI,EAAE5uG,CAAC,EAAK;EAC7B,QAAA,OACEnI,IAAI,CAACQ,GAAG,CAACu2G,IAAI,CAACyd,OAAO,CAAClrH,KAAK,GAAGmtH,YAAY,CAACtuH,CAAC,CAAC,CAACqsH,OAAO,CAAClrH,KAAK,CAAC,GAC1D,KAAK,IACPtJ,IAAI,CAACQ,GAAG,CAACu2G,IAAI,CAACyd,OAAO,CAAChrH,GAAG,GAAGitH,YAAY,CAACtuH,CAAC,CAAC,CAACqsH,OAAO,CAAChrH,GAAG,CAAC,GAAG,KAAK;EAEpE,MAAA,CAAC,CAAC;EACJ,MAAA,IAAIu4C,OAAO,EAAE;UACX,IAAI,CAACsyE,KAAK,GAAGqC,YAAY;EACzB;EACA,QAAA,IAAI,CAACxC,gBAAgB,CAAC6B,oBAAoB,EAAEU,YAAY,CAAC;EAC3D,MAAA;EACF,IAAA;IACF,CAAC;IAAA10H,MAAA,CAEO8zH,eAAe,GAAvB,SAAQA,eAAeA,CACrBn0E,UAAiD,EACjDk1E,QAAkB,EAClBnB,mBAA4B,EACP;MACrB,IAAMG,kBAAuC,GAAG,EAAE;EAClD,IAAA,IAAME,GAAG,GAAGhvH,MAAM,CAAChB,IAAI,CAAC47C,UAAU,CAAC;EACnC,IAAA,KAAK,IAAIv5C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2tH,GAAG,CAAC7uH,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACnC,MAAA,IAAM/C,EAAE,GAAG0wH,GAAG,CAAC3tH,CAAC,CAAC;EACjB,MAAA,IAAMsmD,SAAS,GAAG/M,UAAU,CAACt8C,EAAE,CAAE;QACjC,IAAIqpD,SAAS,CAACtN,cAAc,EAAE;EAC5B,QAAA,IAAIuiB,YAAY,GAAG,IAAI,CAACywD,QAAQ,CAAC/uH,EAAE,CAAC;EACpC,QAAA,IAAIs+D,YAAY,EAAE;EAChB;EACA;EACAA,UAAAA,YAAY,CAACwsD,YAAY,CAACzhE,SAAS,CAAC;EACtC,QAAA,CAAC,MAAM;EACLiV,UAAAA,YAAY,GAAG,IAAIsrD,iBAAiB,CAACvgE,SAAS,EAAEmoE,QAAQ,CAAC;EACzD,UAAA,IAAI,CAACzC,QAAQ,CAAC/uH,EAAE,CAAC,GAAGs+D,YAAY;YAChC,IAAI+xD,mBAAmB,KAAK,KAAK,EAAE;cACjC/xD,YAAY,CAACH,aAAa,GAAGkyD,mBAAmB;EAClD,UAAA;EACF,QAAA;EACAG,QAAAA,kBAAkB,CAAC9kH,IAAI,CAAC4yD,YAAY,CAAC;EACvC,MAAA;EACF,IAAA;EACA,IAAA,OAAOkyD,kBAAkB;IAC3B,CAAC;IAAA7zH,MAAA,CAEO40H,aAAa,GAArB,SAAQA,aAAaA,CACnBf,kBAAuC,EACvCJ,cAA8B,EACF;MAC5B,IAAMqB,QAAoC,GAAG,EAAE;EAC/C,IAAA,IAAMnpG,OAAO,GAAG8nG,cAAc,CAACE,IAAI,CAAChoG,OAAQ;MAC5C,IAAMopG,eAAe,GAAGppG,OAAO,CAACuL,IAAI,GAAGre,QAAQ,GAAG8S,OAAO,CAAC6mC,IAAI;MAC9D,IAAIwiE,eAAe,GAAG,CAAC;;EAEvB;EACAnB,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACxmG,MAAM,CAC5C,UAAC8M,KAAK,EAAA;EAAA,MAAA,OAAK,CAACA,KAAK,CAACj9B,KAAK,IAAI,EAAEi9B,KAAK,CAACglB,GAAG,CAACL,IAAI,IAAI3kB,KAAK,CAACmzF,SAAS,CAAC;EAAA,IAAA,CACjE,CAAC;MACD,IAAIuG,kBAAkB,CAAC3uH,MAAM,EAAE;EAC7B;EACA,MAAA,IAAI,CAAC+vH,cAAc,CAACpB,kBAAkB,EAAEJ,cAAc,CAAC;;EAEvD;QACA,IAAIyB,eAAe,GAAG,CAAC;QACvB,IAAIC,cAAc,GAAG,CAAC;EACtBtB,MAAAA,kBAAkB,CAAC7vH,OAAO,CAAC,UAAC29D,YAAY,EAAEv7D,CAAC,EAAK;EAC9C,QAAA,IAAMgvH,OAAO,GAAGzzD,YAAY,CAACxiB,GAAG,CAACP,GAAG;EACpC,QAAA,IAAMy2E,QAAQ,GAAG1zD,YAAY,CAACxiB,GAAG,CAACN,IAAI;UACtC,IAAMo0E,aAAa,GAChBY,kBAAkB,CAACztH,CAAC,GAAG,CAAC,CAAC,IAAsC,IAAI;EACtE,QAAA,IAAMo7D,aAAa,GAAGG,YAAY,CAACH,aAAa;UAChD,IAAM8zD,UAAU,GAAGD,QAAQ,GACvBN,eAAe,GACfpzD,YAAY,CAAC3G,WAAW;EAC5B,QAAA,IAAMu6D,oBAAoB,GAAG5zD,YAAY,CAAC13D,QAAQ;EAClD,QAAA,IAAMurH,gBAAgB,GACpB7zD,YAAY,CAAC8zD,iBAAiB,KAAK3I,iBAAiB,CAACqC,KAAK,GACtDoG,oBAAoB,GACpB,CAAC;EACP,QAAA,IAAMvG,gBAAgB,GAAGrtD,YAAY,CAACqtD,gBAAgB;UACtD,IAAM0G,uBAAuB,GAAG,CAAAzC,aAAa,oBAAbA,aAAa,CAAE5mF,SAAS,MAAKipF,UAAU;EACvE,QAAA,IAAM/tH,KAAK,GAAG+tH,UAAU,GAAG3zD,YAAY,CAAC4rD,kBAAkB;UAC1D,IAAI9lH,GAAG,GAAG+5D,aAAa,GACnBj6D,KAAK,GAAGguH,oBAAoB,GAC5BD,UAAU,GAAGtG,gBAAgB;UACjC,IAAIoG,OAAO,IAAK,CAACC,QAAQ,IAAIC,UAAU,IAAI,CAAE,EAAE;EAC7C;YACA,IAAMK,eAAe,GAAGR,cAAc;EACtCA,UAAAA,cAAc,IAAIK,gBAAgB;YAClC7zD,YAAY,CAAC7I,aAAa,GAAGvxD,KAAK;YAClC,IAAMquH,YAAY,GAAGZ,eAAe;EACpCA,UAAAA,eAAe,IAAIO,oBAAoB;YACvCT,QAAQ,CAAC/lH,IAAI,CAAC;EACZorB,YAAAA,KAAK,EAAEwnC,YAAY;EACnBp6D,YAAAA,KAAK,EAALA,KAAK;EACLE,YAAAA,GAAG,EAAHA,GAAG;EACHgrH,YAAAA,OAAO,EAAE;EACPlrH,cAAAA,KAAK,EAAEquH,YAAY;EACnBnuH,cAAAA,GAAG,EAAEutH;eACN;EACDtC,YAAAA,UAAU,EAAE;EACVnrH,cAAAA,KAAK,EAAEouH,eAAe;EACtBluH,cAAAA,GAAG,EAAE0tH;EACP;EACF,WAAC,CAAC;EACJ,QAAA,CAAC,MAAM,IAAIG,UAAU,IAAIP,eAAe,EAAE;YACxC,IAAI,CAACW,uBAAuB,EAAE;EAC5B,YAAA,IAAMG,eAAe,GAAGP,UAAU,GAAGJ,eAAe;EACpD;cACA,IAAIW,eAAe,GAAG5D,0BAA0B,EAAE;EAChD;gBACA,IAAMn5D,aAAa,GAAGo8D,eAAe;gBACrC,IAAMS,gBAAe,GAAGR,cAAc;EACtCA,cAAAA,cAAc,IAAIU,eAAe;gBACjC,IAAMD,aAAY,GAAGZ,eAAe;EACpCA,cAAAA,eAAe,IAAIa,eAAe;EAClC,cAAA,IAAMC,cAAc,GAAG;kBACrB7C,aAAa,EAAEY,kBAAkB,CAACztH,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;EAChDq7D,gBAAAA,SAAS,EAAEE,YAAY;EACvBp6D,gBAAAA,KAAK,EAAEuxD,aAAa;kBACpBrxD,GAAG,EAAEqxD,aAAa,GAAG+8D,eAAe;EACpCpD,gBAAAA,OAAO,EAAE;EACPlrH,kBAAAA,KAAK,EAAEquH,aAAY;EACnBnuH,kBAAAA,GAAG,EAAEutH;mBACN;EACDtC,gBAAAA,UAAU,EAAE;EACVnrH,kBAAAA,KAAK,EAAEouH,gBAAe;EACtBluH,kBAAAA,GAAG,EAAE0tH;EACP;iBACD;EACDL,cAAAA,QAAQ,CAAC/lH,IAAI,CAAC+mH,cAAc,CAAC;EAC/B,YAAA,CAAC,MAAM,IAAID,eAAe,GAAG,CAAC,IAAI5C,aAAa,EAAE;EAC/C;gBACAA,aAAa,CAAC1F,kBAAkB,IAAIsI,eAAe;gBACnDf,QAAQ,CAACA,QAAQ,CAAC5vH,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG,GAAG6tH,UAAU;EAChD,YAAA;EACF,UAAA;EACA;EACA,UAAA,IAAID,QAAQ,EAAE;EACZ5tH,YAAAA,GAAG,GAAGF,KAAK;EACb,UAAA;YACAo6D,YAAY,CAAC7I,aAAa,GAAGvxD,KAAK;YAClC,IAAMouH,iBAAe,GAAGR,cAAc;EACtCA,UAAAA,cAAc,IAAIK,gBAAgB;YAClC,IAAMI,cAAY,GAAGZ,eAAe;EACpCA,UAAAA,eAAe,IAAIO,oBAAoB;YACvCT,QAAQ,CAAC/lH,IAAI,CAAC;EACZorB,YAAAA,KAAK,EAAEwnC,YAAY;EACnBp6D,YAAAA,KAAK,EAALA,KAAK;EACLE,YAAAA,GAAG,EAAHA,GAAG;EACHgrH,YAAAA,OAAO,EAAE;EACPlrH,cAAAA,KAAK,EAAEquH,cAAY;EACnBnuH,cAAAA,GAAG,EAAEutH;eACN;EACDtC,YAAAA,UAAU,EAAE;EACVnrH,cAAAA,KAAK,EAAEouH,iBAAe;EACtBluH,cAAAA,GAAG,EAAE0tH;EACP;EACF,WAAC,CAAC;EACJ,QAAA,CAAC,MAAM;EACL;EACA,UAAA;EACF,QAAA;EACA,QAAA,IAAMvzD,UAAU,GAAGD,YAAY,CAACC,UAAU;EAC1C,QAAA,IAAIyzD,QAAQ,IAAIzzD,UAAU,GAAGmzD,eAAe,EAAE;EAC5CG,UAAAA,eAAe,GAAGH,eAAe;EACnC,QAAA,CAAC,MAAM;EACLG,UAAAA,eAAe,GAAGtzD,UAAU;EAC9B,QAAA;EACF,MAAA,CAAC,CAAC;QACF,IAAIszD,eAAe,GAAGH,eAAe,EAAE;EAAA,QAAA,IAAAgB,SAAA;EACrC;UACA,IAAMj9D,aAAa,GAAGo8D,eAAe;UACrC,IAAMS,eAAe,GAAGR,cAAc;EACtC,QAAA,IAAMU,eAAe,GAAGd,eAAe,GAAGG,eAAe;EACzDC,QAAAA,cAAc,IAAIU,eAAe;UACjC,IAAMD,YAAY,GAAGZ,eAAe;EACpCA,QAAAA,eAAe,IAAIa,eAAe;UAClCf,QAAQ,CAAC/lH,IAAI,CAAC;EACZkkH,UAAAA,aAAa,EAAE,CAAA,CAAA8C,SAAA,GAAAjB,QAAQ,CAACA,QAAQ,CAAC5vH,MAAM,GAAG,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAA7B6wH,SAAA,CAA+B57F,KAAK,KAAI,IAAI;EAC3DsnC,UAAAA,SAAS,EAAE,IAAI;EACfl6D,UAAAA,KAAK,EAAE2tH,eAAe;YACtBztH,GAAG,EAAEqxD,aAAa,GAAG+8D,eAAe;EACpCpD,UAAAA,OAAO,EAAE;EACPlrH,YAAAA,KAAK,EAAEquH,YAAY;EACnBnuH,YAAAA,GAAG,EAAEutH;aACN;EACDtC,UAAAA,UAAU,EAAE;EACVnrH,YAAAA,KAAK,EAAEouH,eAAe;EACtBluH,YAAAA,GAAG,EAAE0tH;EACP;EACF,SAAC,CAAC;EACJ,MAAA;QACA,IAAI,CAACxC,YAAY,CAACoC,eAAe,EAAEC,eAAe,EAAEG,cAAc,CAAC;EACrE,IAAA,CAAC,MAAM;EACL;QACA,IAAM5tH,KAAK,GAAG,CAAC;QACfutH,QAAQ,CAAC/lH,IAAI,CAAC;EACZkkH,QAAAA,aAAa,EAAE,IAAI;EACnBxxD,QAAAA,SAAS,EAAE,IAAI;EACfl6D,QAAAA,KAAK,EAALA,KAAK;EACLE,QAAAA,GAAG,EAAEstH,eAAe;EACpBtC,QAAAA,OAAO,EAAE;EACPlrH,UAAAA,KAAK,EAALA,KAAK;EACLE,UAAAA,GAAG,EAAEstH;WACN;EACDrC,QAAAA,UAAU,EAAE;EACVnrH,UAAAA,KAAK,EAALA,KAAK;EACLE,UAAAA,GAAG,EAAEstH;EACP;EACF,OAAC,CAAC;QACF,IAAI,CAACpC,YAAY,CAACoC,eAAe,EAAEA,eAAe,EAAEA,eAAe,CAAC;EACtE,IAAA;EACA,IAAA,OAAOD,QAAQ;IACjB,CAAC;IAAA90H,MAAA,CAEO2yH,YAAY,GAApB,SAAQA,YAAYA,CAACH,OAAe,EAAEC,OAAe,EAAEC,UAAkB,EAAE;MACzE,IAAI,CAACH,SAAS,GAAG;EACfC,MAAAA,OAAO,EAAPA,OAAO;EACPC,MAAAA,OAAO,EAAPA,OAAO;EACPC,MAAAA,UAAU,EAAVA;OACD;IACH,CAAC;IAAA1yH,MAAA,CAEOi1H,cAAc,GAAtB,SAAQA,cAAcA,CACpBpB,kBAAuC,EACvCJ,cAA8B,EAC9B;EAAA,IAAA,IAAAj3F,MAAA,GAAA,IAAA;EACA,IAAA,IAAM7Q,OAAO,GAAG8nG,cAAc,CAACE,IAAI,CAAChoG,OAAQ;MAC5C,IAAMopG,eAAe,GAAGppG,OAAO,CAACuL,IAAI,GAAGre,QAAQ,GAAG8S,OAAO,CAAC6mC,IAAI;;EAE9D;MACA,IAAI+6D,kBAAkB,GAAG,CAAC;MAC1B,IAAIyI,kBAAkB,GAAG,EAAE;EAC3BnC,IAAAA,kBAAkB,CAAC7vH,OAAO,CAAC,UAAC29D,YAAY,EAAEv7D,CAAC,EAAK;EAC9C,MAAA,IAAMgvH,OAAO,GAAGzzD,YAAY,CAACxiB,GAAG,CAACP,GAAG;EACpC,MAAA,IAAMy2E,QAAQ,GAAG1zD,YAAY,CAACxiB,GAAG,CAACN,IAAI;EACtC,MAAA,IAAMy2E,UAAU,GAAGF,OAAO,GACtB,CAAC,GACDC,QAAQ,GACNN,eAAe,GACfpzD,YAAY,CAACt1B,SAAS;EAC5B7P,MAAAA,MAAI,CAACy5F,oBAAoB,CAACt0D,YAAY,CAAC;;EAEvC;EACA,MAAA,IAAM+zD,uBAAuB,GAAGM,kBAAkB,KAAKV,UAAU;EACjE,MAAA,IAAII,uBAAuB,EAAE;UAC3B/zD,YAAY,CAAC4rD,kBAAkB,GAAGA,kBAAkB;EACtD,MAAA,CAAC,MAAM;EACLA,QAAAA,kBAAkB,GAAG,CAAC;EACtByI,QAAAA,kBAAkB,GAAGV,UAAU;EACjC,MAAA;QACA,IAAI,CAACD,QAAQ,IAAI1zD,YAAY,CAACisD,WAAW,CAACC,EAAE,EAAE;EAC5C;UACAlsD,YAAY,CAACssD,YAAY,GACvBpuF,iBAAiB,CACf,IAAI,EACJlU,OAAO,CAACyT,SAAS,EACjBuiC,YAAY,CAAC3G,WAAW,GAAG2G,YAAY,CAACqtD,gBAAgB,EACxD,CAAC,EACD,CACF,CAAC,IAAI5qH,SAAS;EAClB,MAAA;EACA;QACA,IAAIu9D,YAAY,CAACH,aAAa,IAAI,CAACG,YAAY,CAAC0rD,oBAAoB,EAAE;UACpE,IAAM6I,mBAAmB,GAAG15F,MAAI,CAAC25F,yBAAyB,CACxDx0D,YAAY,EACZ8xD,cACF,CAAC;UACD,IAAI,CAACyC,mBAAmB,EAAE;YACxBv0D,YAAY,CAACH,aAAa,GAAG,KAAK;EACpC,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAACG,YAAY,CAACH,aAAa,IAAIp7D,CAAC,GAAG,CAAC,GAAGytH,kBAAkB,CAAC3uH,MAAM,EAAE;EACpE;EACA,QAAA,IAAMkxH,WAAW,GACfvC,kBAAkB,CAACztH,CAAC,GAAG,CAAC,CAAC,CAACimC,SAAS,GACnCwnF,kBAAkB,CAACztH,CAAC,CAAC,CAACw7D,UAAU;UAClC,IAAIw0D,WAAW,GAAGnE,0BAA0B,EAAE;YAC5C4B,kBAAkB,CAACztH,CAAC,GAAG,CAAC,CAAC,CAACo7D,aAAa,GAAG,KAAK;YAC/C,IAAIqyD,kBAAkB,CAACztH,CAAC,GAAG,CAAC,CAAC,CAACo7D,aAAa,EAAE;EAC3ChlC,YAAAA,MAAI,CAAC75B,IAAI,CAAA,sDAAA,GACgDg/D,YACzD,CAAC;EACH,UAAA;EACF,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAM6rD,YAAY,GAAGhhH,cAAA,CAAgBm1D,YAAY,CAAC6rD,YAAY,CAAC,GAC3D7rD,YAAY,CAAC6rD,YAAY,GACzB7rD,YAAY,CAAC13D,QAAQ;EACzBsjH,MAAAA,kBAAkB,IAAIC,YAAY;EACpC,IAAA,CAAC,CAAC;IACJ,CAAC;IAAAxtH,MAAA,CAEOm2H,yBAAyB,GAAjC,SAAQA,yBAAyBA,CAC/Bx0D,YAA+B,EAC/B8xD,cAA8B,EACrB;EAAA,IAAA,IAAAp4D,MAAA,GAAA,IAAA;EACT,IAAA,IAAMuG,UAAU,GAAGD,YAAY,CAACC,UAAU;MAC1C,IAAMy0D,gBAAgB,GACpB10D,YAAY,CAACt1B,SAAS,GAAGs1B,YAAY,CAACqtD,gBAAgB;MACxD,IACE/wH,IAAI,CAACQ,GAAG,CAACmjE,UAAU,GAAGy0D,gBAAgB,CAAC,GAAGxJ,6BAA6B,EACvE;QACA,IAAI,CAAC9sH,GAAG,CAAA,IAAA,GACF4hE,YAAY,CAAC/kB,UAAU,GAAA,gBAAA,GAAgBglB,UAAU,GAAA,2CAAA,GAA4Cy0D,gBACnG,CAAC;EACD,MAAA,OAAO,KAAK;EACd,IAAA;EACA,IAAA,IAAMC,SAAS,GAAGvxH,MAAM,CAAChB,IAAI,CAAC0vH,cAAc,CAAC;EAC7C,IAAA,OAAO,CAAC6C,SAAS,CAAClxH,IAAI,CAAC,UAAC2lC,YAAY,EAAK;EACvC,MAAA,IAAMpf,OAAO,GAAG8nG,cAAc,CAAC1oF,YAAY,CAAC,CAACpf,OAAO;EACpD,MAAA,IAAMoiC,WAAW,GAAGpiC,OAAO,CAAC6mC,IAAI;QAChC,IAAIoP,UAAU,IAAI7T,WAAW,EAAE;EAC7B;EACAsN,QAAAA,MAAI,CAACt7D,GAAG,CAAA,IAAA,GACF4hE,YAAY,CAAC/kB,UAAU,GAAA,gBAAA,GAAgBglB,UAAU,GAAA,QAAA,GAAS72B,YAAY,GAAA,gBAAA,GAAiBgjB,WAC7F,CAAC;EACD;EACA,QAAA,OAAO,KAAK;EACd,MAAA;QACA,IAAMwoE,aAAa,GAAG12F,iBAAiB,CACrC,IAAI,EACJlU,OAAO,CAACyT,SAAS,EACjBwiC,UACF,CAAC;QACD,IAAI,CAAC20D,aAAa,EAAE;EAClBl7D,QAAAA,MAAI,CAACt7D,GAAG,CAAA,IAAA,GACF4hE,YAAY,CAAC/kB,UAAU,sBAAgBglB,UAAU,GAAA,wCAAA,GAAyC72B,YAAY,GAAA,aAAA,GAAcpf,OAAO,CAACs7E,SAAS,GAAA,GAAA,GAAIt7E,OAAO,CAACo2B,WAAW,MAClK,CAAC;EACD,QAAA,OAAO,IAAI;EACb,MAAA;QACA,IAAMy0E,SAAS,GAAGzrF,YAAY,KAAK,OAAO,GAAG,KAAK,GAAG,CAAC;EACtD,MAAA,IAAM0rF,kBAAkB,GACtBx4H,IAAI,CAACQ,GAAG,CAAC83H,aAAa,CAAChvH,KAAK,GAAGq6D,UAAU,CAAC,GACxCirD,6BAA6B,GAAG2J,SAAS,IAC3Cv4H,IAAI,CAACQ,GAAG,CAAC83H,aAAa,CAAC9uH,GAAG,GAAGm6D,UAAU,CAAC,GACtCirD,6BAA6B,GAAG2J,SAAS;QAC7C,IAAI,CAACC,kBAAkB,EAAE;UACvBp7D,MAAI,CAACt7D,GAAG,CAAA,IAAA,GACF4hE,YAAY,CAAC/kB,UAAU,GAAA,gBAAA,GAAgBglB,UAAU,GAAA,oBAAA,GAAqB72B,YAAY,GAAA,oBAAA,GAAqBwrF,aAAa,CAAChvH,KAAK,GAAA,GAAA,GAAIgvH,aAAa,CAAC9uH,GAAG,GAAA,OAAA,GAAQ8uH,aAAa,CAACjtH,EAAE,GAAA,OAAA,GAAQitH,aAAa,CAACjsH,EAAE,GAAA,GACrM,CAAC;EACD,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,OAAO,KAAK;EACd,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAtK,EAAAA,MAAA,CAEOi2H,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAACt0D,YAA+B,EAAE;EAC5D,IAAA,IAAI,CAACA,YAAY,CAAC+0D,eAAe,EAAE;EACjC,MAAA;EACF,IAAA;EACA,IAAA,IAAMpB,UAAU,GAAG3zD,YAAY,CAAC7I,aAAa;MAC7C,IAAI69D,WAAW,GAAG,CAAC;MACnB,IAAIC,kBAAkB,GAAG,KAAK;MAC9B,IAAIC,SAAS,GAAG,KAAK;EACrB,IAAA,KAAK,IAAIzwH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGu7D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtD,MAAA,IAAMwoH,KAAK,GAAGjtD,YAAY,CAACmsD,SAAS,CAAC1nH,CAAC,CAAC;EACvC,MAAA,IAAM0yD,aAAa,GAAGw8D,UAAU,GAAGqB,WAAW;QAC9C/H,KAAK,CAAC5zD,WAAW,GAAG27D,WAAW;QAC/B/H,KAAK,CAAC91D,aAAa,GAAGA,aAAa;EACnC89D,MAAAA,kBAAkB,KAAlBA,kBAAkB,GAAKhI,KAAK,CAAC3kH,QAAQ,KAAK,IAAI,CAAA;EAC9C4sH,MAAAA,SAAS,KAATA,SAAS,GAAK,CAAC,CAACjI,KAAK,CAAC1xH,KAAK,CAAA;EAC3B,MAAA,IAAM+M,QAAQ,GAAG2kH,KAAK,CAAC1xH,KAAK,GAAG,CAAC,GAAI0xH,KAAK,CAAC3kH,QAAQ,IAAe,CAAC;EAClE0sH,MAAAA,WAAW,IAAI1sH,QAAQ;EACzB,IAAA;EACA;EACA,IAAA,IAAI2sH,kBAAkB,IAAI,CAACC,SAAS,EAAE;EACpCl1D,MAAAA,YAAY,CAAC13D,QAAQ,GAAGhM,IAAI,CAACsD,GAAG,CAACo1H,WAAW,EAAEh1D,YAAY,CAAC13D,QAAQ,CAAC;EACtE,IAAA,CAAC,MAAM;QACL03D,YAAY,CAAC13D,QAAQ,GAAG0sH,WAAW;EACrC,IAAA;IACF,CAAC;EAAA32H,EAAAA,MAAA,CAEOu0H,WAAW,GAAnB,SAAQA,WAAWA,CAAC5yD,YAA+B,EAAE;MACnDA,YAAY,CAAC7tB,KAAK,EAAE;EACpB,IAAA,OAAO,IAAI,CAACs+E,QAAQ,CAACzwD,YAAY,CAAC/kB,UAAU,CAAC;IAC/C,CAAC;IAAA,OAAAz6C,YAAA,CAAA+vH,qBAAA,EAAA,CAAA;MAAA9vH,GAAA,EAAA,UAAA;MAAAC,GAAA,EAvkBD,SAAAA,GAAAA,GAAuB;EACrB,MAAA,IAAMiwH,KAAK,GAAG,IAAI,CAACA,KAAK;EACxB,MAAA,OAAOA,KAAK,GAAGA,KAAK,CAACA,KAAK,CAACptH,MAAM,GAAG,CAAC,CAAC,CAACuC,GAAG,GAAG,CAAC;EAChD,IAAA;EAAC,GAAA,EAAA;MAAArF,GAAA,EAAA,QAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAqB;QACnB,OAAO,IAAI,CAACiwH,KAAK,GAAG,IAAI,CAACA,KAAK,CAACptH,MAAM,GAAG,CAAC;EAC3C,IAAA;EAAC,GAAA,EAAA;MAAA9C,GAAA,EAAA,cAAA;MAAAC,GAAA,EAkHD,SAAAA,GAAAA,GAAyC;EAAA,MAAA,IAAAy0H,WAAA;QACvC,IAAMC,iBAAiB,IAAAD,WAAA,GAAG,IAAI,CAACxE,KAAK,cAAAwE,WAAA,GAAVA,WAAA,CAAa,IAAI,CAAC5xH,MAAM,GAAG,CAAC,CAAC,KAAA,IAAA,GAAA,MAAA,GAA7B4xH,WAAA,CAA+B38F,KAAK;EAC9D,MAAA,IAAI48F,iBAAiB,EAAE;EACrB,QAAA,IAAMjJ,SAAS,GAAGiJ,iBAAiB,CAACjJ,SAAS;UAC7C,IAAMkJ,UAAU,GAAGlJ,SAAS,CAACA,SAAS,CAAC5oH,MAAM,GAAG,CAAC,CAAC;EAClD,QAAA,IAAI8xH,UAAU,EAAE;YACd,OAAOA,UAAU,CAACp6E,UAAU;EAC9B,QAAA;EACF,MAAA;EACA,MAAA,OAAO,IAAI;EACb,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CAlLwCt6C,MAAM,CAAA;EAynB1C,SAAS20H,eAAeA,CAAC1/E,OAAiC,EAAU;EACzE,EAAA,OAAA,GAAA,IAAWA,OAAO,CAACpd,KAAK,GAAG,GAAG,GAAGod,OAAO,CAACpd,KAAK,CAACyiB,UAAU,GAAG,GAAG,GAAG,SAAS,CAAA,GAAA,IAAA,GAAKrF,OAAO,CAAChwC,KAAK,CAACywB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA,GAAIuf,OAAO,CAAC9vC,GAAG,CAACuwB,OAAO,CAAC,CAAC,CAAC,GAAA,GAAA;EACpI;;ECtqBA,IAAak/F,eAAe,gBAAA,YAAA;IAG1B,SAAAA,eAAAA,CAAY5iG,GAAQ,EAAE;EAAA,IAAA,IAAA,CAFdA,GAAG,GAAA,MAAA;MAGT,IAAI,CAACA,GAAG,GAAGA,GAAG;EAChB,EAAA;EAAC,EAAA,IAAAt0B,MAAA,GAAAk3H,eAAA,CAAAj3H,SAAA;EAAAD,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;EACR;MACA,IAAI,CAACoyB,GAAG,GAAG,IAAI;IACjB,CAAC;IAAAt0B,MAAA,CAEDm3H,aAAa,GAAb,SAAAA,aAAaA,CACXx1D,YAA4C,EAC5Cy1D,cAAkC,EACC;EAAA,IAAA,IAAA3tH,KAAA,GAAA,IAAA;EACnC,IAAA,IAAM4tH,YAAY,GAAG11D,YAAY,CAAC01D,YAAY;EAC9C,IAAA,IAAIl6H,GAAQ;MACZ,IAAI;EACFA,MAAAA,GAAG,GAAGkyH,kBAAkB,CACtBgI,YAAY,EACZ,IAAI,CAAC/iG,GAAG,CAACsoF,SAAS,EAClBj7C,YAAY,CAACpiB,OACf,CAAC;MACH,CAAC,CAAC,OAAOriD,KAAK,EAAE;EACd,MAAA,IAAMi7C,SAAS,GAAG,IAAI,CAACm/E,oBAAoB,CACzC31D,YAAY,EACZ/iE,YAAY,CAAC24H,qBAAqB,EAClCr6H,KAAK,EACLm6H,YACF,CAAC;QACD,IAAI,CAAC/iG,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEoe,SAAS,CAAC;EACzC,MAAA;EACF,IAAA;EACA,IAAA,IAAIi/E,cAAc,IAAIj6H,GAAG,CAAC+iH,QAAQ,KAAK,OAAO,EAAE;QAC9C/iH,GAAG,CAACmvB,YAAY,CAACtjB,GAAG,CAAC,mBAAmB,EAAE,EAAE,GAAGouH,cAAc,CAAC;EAChE,IAAA;EACA,IAAA,IAAMnsG,MAAM,GAAG,IAAI,CAACqJ,GAAG,CAACrJ,MAAM;EAC9B,IAAA,IAAMg1F,MAAM,GAAGh1F,MAAM,CAAC9gB,MAAM;EAC5B,IAAA,IAAMA,MAAM,GAAG,IAAI81G,MAAM,CAACh1F,MAAM,CAA0B;EAC1D,IAAA,IAAMpnB,OAAsB,GAAG;EAC7B2zC,MAAAA,YAAY,EAAE,MAAM;QACpBr6C,GAAG,EAAEA,GAAG,CAACovB;OACV;EACD,IAAA,IAAMiV,UAAU,GAAGvW,MAAM,CAACusG,+BAA+B,CAACtlH,OAAO;EACjE,IAAA,IAAM0jC,YAAiC,GAAG;EACxCpU,MAAAA,UAAU,EAAVA,UAAU;QACVqU,OAAO,EAAErU,UAAU,CAACsU,aAAa;EACjCC,MAAAA,QAAQ,EAAE,CAAC;EACXC,MAAAA,UAAU,EAAE,CAAC;EACbC,MAAAA,aAAa,EAAE;OAChB;EACD,IAAA,IAAME,SAAyC,GAAG;QAChDC,SAAS,EAAE,SAAXA,SAASA,CACPtP,QAAwB,EACxBv6B,KAAkB,EAClB1I,OAAsB,EACtBuxC,cAAmB,EAChB;EACH,QAAA,IAAM44E,iBAAiB,GAAGlnF,QAAQ,CAAC/7B,IAAqB;EACxD,QAAA,IAAM0sH,MAAM,GAAGzJ,iBAAiB,IAAA,IAAA,GAAA,MAAA,GAAjBA,iBAAiB,CAAE0J,MAAM;EACxC,QAAA,IAAI,CAACr5G,KAAK,CAACkhB,OAAO,CAACk4F,MAAM,CAAC,EAAE;YAC1B,IAAMt/E,UAAS,GAAG1uC,KAAI,CAAC6tH,oBAAoB,CACzC31D,YAAY,EACZ/iE,YAAY,CAAC+4H,wBAAwB,EACrC,IAAIzvG,KAAK,CAAA,iCAAkC,CAAC,EAC5CrkB,OAAO,CAAC1G,GAAG,EACXoP,KAAK,EACL6oC,cACF,CAAC;YACD3rC,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEoe,UAAS,CAAC;EACzC,UAAA;EACF,QAAA;UACAwpB,YAAY,CAACqsD,iBAAiB,GAAGA,iBAAiB;UAClDvkH,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC+4H,iBAAiB,EAAE;EACzCz9F,UAAAA,KAAK,EAAEwnC,YAAY;EACnBqsD,UAAAA,iBAAiB,EAAjBA,iBAAiB;EACjB54E,UAAAA,cAAc,EAAdA;EACF,SAAC,CAAC;QACJ,CAAC;QACDpb,OAAO,EAAE,SAATA,OAAOA,CACL98B,KAAqC,EACrC2G,OAAsB,EACtBuxC,cAAmB,EACnB7oC,KAAkB,EACf;EACH,QAAA,IAAM4rC,SAAS,GAAG1uC,KAAI,CAAC6tH,oBAAoB,CACzC31D,YAAY,EACZ/iE,YAAY,CAAC24H,qBAAqB,EAClC,IAAIrvG,KAAK,CAAA,0CAAA,GACoChrB,KAAK,CAACslC,IAAI,GAAA,GAAA,GAAItlC,KAAK,CAACgS,IAAI,GAAA,IAAA,GAAKrL,OAAO,CAAC1G,GAAG,GAAA,GACrF,CAAC,EACD0G,OAAO,CAAC1G,GAAG,EACXoP,KAAK,EACL6oC,cACF,CAAC;UACD3rC,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEoe,SAAS,CAAC;QAC3C,CAAC;QACD1B,SAAS,EAAE,SAAXA,SAASA,CACPlqC,KAAkB,EAClB1I,OAAsB,EACtBuxC,cAAmB,EAChB;EACH,QAAA,IAAM+C,SAAS,GAAG1uC,KAAI,CAAC6tH,oBAAoB,CACzC31D,YAAY,EACZ/iE,YAAY,CAACi5H,uBAAuB,EACpC,IAAI3vG,KAAK,CAAA,gCAAA,GAAkCrkB,OAAO,CAAC1G,GAAG,GAAA,GAAG,CAAC,EAC1D0G,OAAO,CAAC1G,GAAG,EACXoP,KAAK,EACL6oC,cACF,CAAC;UACD3rC,KAAI,CAAC6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAEoe,SAAS,CAAC;EAC3C,MAAA;OACD;MACDhuC,MAAM,CAAC6qC,IAAI,CAACnxC,OAAO,EAAE+xC,YAAY,EAAEO,SAAS,CAAC;MAC7C,IAAI,CAAC7hB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACi5H,kBAAkB,EAAE;EAC1C39F,MAAAA,KAAK,EAAEwnC;EACT,KAAC,CAAC;EACF,IAAA,OAAOx3D,MAAM;IACf,CAAC;EAAAnK,EAAAA,MAAA,CAEDs3H,oBAAoB,GAApB,SAAAA,oBAAoBA,CAClB31D,YAA+B,EAC/Bh2C,OAAqB,EACrBzuB,KAAY,EACZC,GAAW,EACXoP,KAAmB,EACnB6oC,cAAoB,EACT;MACXusB,YAAY,CAACzkE,KAAK,GAAGA,KAAK;MAC1B,OAAO;QACLkG,IAAI,EAAEzE,UAAU,CAACw2C,aAAa;EAC9BxpB,MAAAA,OAAO,EAAPA,OAAO;EACP2O,MAAAA,KAAK,EAAE,KAAK;EACZqnC,MAAAA,YAAY,EAAZA,YAAY;EACZxkE,MAAAA,GAAG,EAAHA,GAAG;EACHD,MAAAA,KAAK,EAALA,KAAK;EACLk4C,MAAAA,cAAc,EAAdA,cAAc;EACd7oC,MAAAA,KAAK,EAALA;OACD;IACH,CAAC;EAAA,EAAA,OAAA2qH,eAAA;EAAA,CAAA,EAAA;;EC7EH,SAASa,aAAaA,CAACvpG,KAA8B,EAAE;IACrDA,KAAK,IAAA,IAAA,IAALA,KAAK,CAAEwpG,IAAI,EAAE,CAACruG,KAAK,CAAC,YAAM;EACxB;EAAA,EAAA,CACD,CAAC;EACJ;EAEA,SAASsuG,eAAeA,CAAC11H,KAAa,EAAE8oC,IAAY,EAAE;IACpD,OAAA,GAAA,GAAW9oC,KAAK,yCAAoC8oC,IAAI;EAC1D;EAAC,IAEoB6sF,uBAAuB,0BAAAxjG,OAAA,EAAA;EA2C1C,EAAA,SAAAwjG,uBAAAA,CAAY5jG,GAAQ,EAAEo7F,cAA0B,EAAE;EAAA,IAAA,IAAAjmH,KAAA;MAChDA,KAAA,GAAAirB,OAAA,CAAAhrB,IAAA,CAAA,IAAA,EAAM,eAAe,EAAE4qB,GAAG,CAAC9xB,MAAM,CAAC,IAAA,IAAA;EAACiH,IAAAA,KAAA,CAxCpBimH,cAAc,GAAA,MAAA;EAAAjmH,IAAAA,KAAA,CACd6qB,GAAG,GAAA,MAAA;EAAA7qB,IAAAA,KAAA,CACHskH,eAAe,GAAA,MAAA;EAEhC;MAAAtkH,KAAA,CACQgqH,cAAc,GAA0B,IAAI;MAAAhqH,KAAA,CAC5C0uH,YAAY,GAGT,IAAI;EAEf;MAAA1uH,KAAA,CACQ+kB,KAAK,GAA4B,IAAI;MAAA/kB,KAAA,CACrC2uH,YAAY,GAA8B,IAAI;MAAA3uH,KAAA,CAC9C5E,cAAc,GAAqC,IAAI;EAE/D;MAAA4E,KAAA,CACQ4uH,OAAO,GAAgC,IAAI;EAEnD;MAAA5uH,KAAA,CACQi4D,WAAW,GAAqB,EAAE;EAE1C;EAAAj4D,IAAAA,KAAA,CACQ6uH,WAAW,GAAW,EAAE;EAAA7uH,IAAAA,KAAA,CACxB2pH,WAAW,GAAW,EAAE;EAEhC;EAAA3pH,IAAAA,KAAA,CACQqrH,QAAQ,GAAA,MAAA;EAEhB;MAAArrH,KAAA,CACQq7D,WAAW,GAAoC,IAAI;MAAAr7D,KAAA,CACnD63D,aAAa,GAAoC,IAAI;MAAA73D,KAAA,CACrD8uH,WAAW,GAAyC,IAAI;MAAA9uH,KAAA,CACxD+uH,SAAS,GAAoC,IAAI;MAAA/uH,KAAA,CACjDgvH,YAAY,GAAiC,IAAI;MAAAhvH,KAAA,CACjDivH,UAAU,GAAiC,IAAI;MAAAjvH,KAAA,CAC/CkvH,cAAc,GAAiC,IAAI;MAAAlvH,KAAA,CACnDmvH,UAAU,GAAY,KAAK;MAAAnvH,KAAA,CA0uB3BovH,MAAM,GAAG,YAAM;QACrBpvH,KAAA,CAAKmvH,UAAU,GAAG,IAAI;MACxB,CAAC;MAAAnvH,KAAA,CAEOqvH,OAAO,GAAG,YAAM;QACtBrvH,KAAA,CAAKmvH,UAAU,GAAG,KAAK;MACzB,CAAC;MAAAnvH,KAAA,CAEOsvH,SAAS,GAAG,YAAM;EACxB,MAAA,IAAMxhE,WAAW,GAAG9tD,KAAA,CAAK8tD,WAAW;EACpC,MAAA,IAAIA,WAAW,KAAKnzD,SAAS,IAAIqF,KAAA,CAAKuvH,gBAAgB,IAAI,CAACvvH,KAAA,CAAKqrH,QAAQ,EAAE;EACxE,QAAA;EACF,MAAA;EACA,MAAA,IAAM9C,IAAI,GAAGz6D,WAAW,GAAG9tD,KAAA,CAAK2pH,WAAW;EAC3C,MAAA,IAAM6F,aAAa,GAAGh7H,IAAI,CAACQ,GAAG,CAACuzH,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;EACrD,MAAA,IAAIiH,aAAa,EAAE;EACjB,QAAA;EACF,MAAA;EACA,MAAA,IAAM55D,YAAY,GAAG2yD,IAAI,IAAI,KAAK;QAClCvoH,KAAA,CAAK2pH,WAAW,GAAG77D,WAAW;QAC9B9tD,KAAA,CAAK6uH,WAAW,GAAG/gE,WAAW;;EAE9B;EACA,MAAA,IAAMuN,WAAW,GAAGr7D,KAAA,CAAKq7D,WAAW;QACpC,IAAI,CAACA,WAAW,EAAE;UAChBr7D,KAAA,CAAKyvH,WAAW,EAAE;EAClB,QAAA;EACF,MAAA;EACA,MAAA,IAAI75D,YAAY,EAAE;EAChB,QAAA,IAAM85D,UAAU,GAAG1vH,KAAA,CAAKqrH,QAAQ,CAAClC,kBAAkB,CACjDr7D,WAAW,EACXA,WAAW,GAAGy6D,IAChB,CAAC;EACD,QAAA,IAAImH,UAAU,EAAE;EACd1vH,UAAAA,KAAA,CAAK+qH,cAAc,CAAC,IAAI,CAAC;EAC3B,QAAA;EACF,MAAA;QACA/qH,KAAA,CAAKyvH,WAAW,EAAE;EAClB,MAAA,IACG75D,YAAY,IAAI9H,WAAW,GAAGuN,WAAW,CAACv9D,KAAK,IAChDgwD,WAAW,IAAIuN,WAAW,CAACr9D,GAAG,EAC9B;EAAA,QAAA,IAAA+2D,WAAA;EACA,QAAA,IAAM46D,YAAY,GAAG3vH,KAAA,CAAKspH,aAAa,CAACjuD,WAAW,CAAC;UACpD,IAAIu0D,aAAa,GAAG5vH,KAAA,CAAKqrH,QAAQ,CAAC5B,mBAAmB,CAAC37D,WAAW,CAAC;EAClE,QAAA,IAAI8hE,aAAa,KAAK,EAAE,EAAE;YACxBA,aAAa,GAAGD,YAAY,IAAI/5D,YAAY,GAAG,EAAE,GAAG,CAAC,CAAC;EACtD51D,UAAAA,KAAA,CAAK1J,GAAG,CAAA,SAAA,IACIs/D,YAAY,GAAG,OAAO,GAAG,EAAE,CAAA,GAAA,sCAAA,GAAuC9H,WAAW,GAAA,mBAAA,GAAoB6hE,YAAY,GAAA,MAAA,GAAOC,aAAa,MAC7I,CAAC;EACH,QAAA;EACA,QAAA,IAAI,CAAC5vH,KAAA,CAAK21C,cAAc,CAAC0lB,WAAW,CAAC,IAAA,CAAAtG,WAAA,GAAI/0D,KAAA,CAAK+kB,KAAK,aAAVgwC,WAAA,CAAYtoC,MAAM,EAAE;YAC3DzsB,KAAA,CAAKmvH,UAAU,GAAG,KAAK;EACzB,QAAA;UACA,IAAI,CAACv5D,YAAY,EAAE;EACjB;YACA,IAAIg6D,aAAa,GAAGD,YAAY,EAAE;EAChC,YAAA,IAAME,SAAS,GAAG7vH,KAAA,CAAKqrH,QAAQ,CAACxB,uBAAuB,CACrD8F,YAAY,GAAG,CAAC,EAChBC,aACF,CAAC;cACD,IAAIC,SAAS,GAAGF,YAAY,EAAE;EAC5B3vH,cAAAA,KAAA,CAAK8vH,mBAAmB,CAACD,SAAS,CAAC;EACnC,cAAA;EACF,YAAA;EACF,UAAA;EACF,QAAA;EACA7vH,QAAAA,KAAA,CAAK8vH,mBAAmB,CAACF,aAAa,CAAC;EACvC,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAMZ,YAAY,GAAGhvH,KAAA,CAAKgvH,YAAY;QACtC,IAAI,CAACA,YAAY,EAAE;EACjB;UACA,IAAIhvH,KAAA,CAAK+vH,eAAe,IAAI/vH,KAAA,CAAK21C,cAAc,CAAC0lB,WAAW,CAAC,EAAE;YAC5D,IAAM20D,YAAY,GAAG30D,WAAW,CAAC3qC,KAAK,CAAC2zF,SAAS,CAAC,CAAC,CAAC;EACnD;EACA,UAAA,IAAI2L,YAAY,EAAE;EAChBhwH,YAAAA,KAAA,CAAK+uH,SAAS,GAAG/uH,KAAA,CAAKq7D,WAAW;cACjCr7D,KAAA,CAAKq7D,WAAW,GAAG,IAAI;EACvBr7D,YAAAA,KAAA,CAAKiwH,wBAAwB,CAACniE,WAAW,EAAEkiE,YAAY,CAAC;EAC1D,UAAA;EACF,QAAA;EACA,QAAA;EACF,MAAA;EACA,MAAA,IAAMlyH,KAAK,GAAGkxH,YAAY,CAAC3/D,aAAa;EACxC,MAAA,IAAM7uD,QAAQ,GAAGwuH,YAAY,CAACxuH,QAAQ,IAAI,CAAC;QAC3C,IACGo1D,YAAY,IAAI9H,WAAW,GAAGhwD,KAAK,IACpCgwD,WAAW,IAAIhwD,KAAK,GAAG0C,QAAQ,EAC/B;EAAA,QAAA,IAAA0vH,kBAAA;UACA,IAAA,CAAAA,kBAAA,GAAI70D,WAAW,CAAC3qC,KAAK,KAAA,IAAA,IAAjBw/F,kBAAA,CAAmBn4D,aAAa,EAAE;YACpC/3D,KAAA,CAAKmwH,iBAAiB,CAAC90D,WAAW,CAAC3qC,KAAK,EAAE2qC,WAAW,CAAC;EACtDr7D,UAAAA,KAAA,CAAKygG,gBAAgB,CAAC3yC,WAAW,CAAC;EACpC,QAAA;EACA9tD,QAAAA,KAAA,CAAKiwH,wBAAwB,CAACniE,WAAW,EAAEkhE,YAAY,CAAC;EAC1D,MAAA;MACF,CAAC;MAAAhvH,KAAA,CAMOowH,YAAY,GAAG,YAAM;EAC3B,MAAA,IAAMtiE,WAAW,GAAG9tD,KAAA,CAAK8tD,WAAW;EACpC,MAAA,IAAIA,WAAW,KAAKnzD,SAAS,IAAIqF,KAAA,CAAKuvH,gBAAgB,EAAE;EACtD,QAAA;EACF,MAAA;;EAEA;EACA;EACA,MAAA,IAAIzhE,WAAW,GAAG9tD,KAAA,CAAK2pH,WAAW,EAAE;UAClC3pH,KAAA,CAAK2pH,WAAW,GAAG77D,WAAW;EAC9B,QAAA,IAAIA,WAAW,GAAG9tD,KAAA,CAAK6uH,WAAW,EAAE;YAClC7uH,KAAA,CAAKyvH,WAAW,EAAE;EACpB,QAAA;EACF,MAAA,CAAC,MAAM;EACL,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAMp0D,WAAW,GAAGr7D,KAAA,CAAKq7D,WAAW;EACpC,MAAA,IAAI,CAACA,WAAW,IAAIr7D,KAAA,CAAK+vH,eAAe,EAAE;EACxC,QAAA;EACF,MAAA;EACA,MAAA,IAAIjiE,WAAW,IAAIuN,WAAW,CAACr9D,GAAG,EAAE;EAClCgC,QAAAA,KAAA,CAAK2pH,WAAW,GAAGtuD,WAAW,CAACr9D,GAAG;EAClC,QAAA,IAAM2xH,YAAY,GAAG3vH,KAAA,CAAKspH,aAAa,CAACjuD,WAAW,CAAC;EACpDr7D,QAAAA,KAAA,CAAK8vH,mBAAmB,CAACH,YAAY,GAAG,CAAC,CAAC;EAC5C,MAAA;EACA;EACA,MAAA,IAAMX,YAAY,GAAGhvH,KAAA,CAAKgvH,YAAY;QACtC,IAAI,CAACA,YAAY,EAAE;EACjB,QAAA;EACF,MAAA;QACA,IAAMhxH,GAAG,GAAGgxH,YAAY,CAAC3/D,aAAa,IAAI2/D,YAAY,CAACxuH,QAAQ,IAAI,CAAC,CAAC;QACrE,IAAIstD,WAAW,IAAI9vD,GAAG,EAAE;EACtBgC,QAAAA,KAAA,CAAKiwH,wBAAwB,CAACniE,WAAW,EAAEkhE,YAAY,CAAC;EAC1D,MAAA;MACF,CAAC;EA+oBD;EAAAhvH,IAAAA,KAAA,CACQ0oH,gBAAgB,GAAG,UACzB6B,oBAAyC,EACzC8F,aAAgD,EAC7C;EACH,MAAA,IAAMhF,QAAQ,GAAGrrH,KAAA,CAAKqrH,QAAQ;QAC9B,IAAI,CAACA,QAAQ,EAAE;EACb,QAAA;EACF,MAAA;EACA,MAAA,IAAMhwD,WAAW,GAAGr7D,KAAA,CAAKq7D,WAAW;EACpC,MAAA,IAAM+uD,kBAAkB,GAAGiB,QAAQ,CAACzC,MAAM,IAAI,EAAE;EAChD,MAAA,IAAM0H,aAAa,GAAGjF,QAAQ,CAACxC,KAAK,IAAI,EAAE;EAC1C,MAAA,IAAMC,SAAS,GAAGuC,QAAQ,CAACvC,SAAS;EACpC,MAAA,IAAMyH,UAAU,GAAGhG,oBAAoB,CAAC35G,GAAG,CACzC,UAACsnD,YAAY,EAAA;UAAA,OAAKA,YAAY,CAAC/kB,UAAU;EAAA,MAAA,CAC3C,CAAC;QACD,IAAMq9E,oBAAoB,GAAG,CAAC,EAC5BpG,kBAAkB,CAAC3uH,MAAM,IAAI80H,UAAU,CAAC90H,MAAM,CAC/C;QACD,IAAI+0H,oBAAoB,IAAIH,aAAa,EAAE;EACzCrwH,QAAAA,KAAA,CAAK1J,GAAG,CAAA,yBAAA,GAEJ8zH,kBAAkB,CAAC3uH,MAAM,GAAA,KAAA,GACrB2uH,kBAAkB,GAAA,cAAA,GACpBkG,aAAa,CAAC1/G,GAAG,CAAC,UAACslB,GAAG,EAAA;YAAA,OAAKs3F,eAAe,CAACt3F,GAAG,CAAC;EAAA,QAAA,CAAA,CAAC,GAAA,QAAA,GAASl2B,KAAA,CAAK2pH,WACpE,CAAC;EACH,MAAA;QACA,IAAI4G,UAAU,CAAC90H,MAAM,EAAE;EACrBuE,QAAAA,KAAA,CAAK1J,GAAG,CAAA,iBAAA,GAAmBi6H,UAAY,CAAC;EAC1C,MAAA;;EAEA;EACA;QACA,IAAIE,kBAAmD,GAAG,IAAI;QAC9D,IAAIC,oBAAqD,GAAG,IAAI;EAChE,MAAA,IAAIr1D,WAAW,EAAE;UACfo1D,kBAAkB,GAAGzwH,KAAA,CAAK2wH,UAAU,CAACt1D,WAAW,EAAEr7D,KAAA,CAAK2pH,WAAW,CAAC;UACnE,IAAI3pH,KAAA,CAAK4wH,UAAU,CAACv1D,WAAW,EAAEo1D,kBAAkB,CAAC,EAAE;YACpDzwH,KAAA,CAAKq7D,WAAW,GAAGo1D,kBAAkB;EACvC,QAAA,CAAC,MAAM;EACLzwH,UAAAA,KAAA,CAAK8uH,WAAW,GAAG9uH,KAAA,CAAK+uH,SAAS,GAAG,IAAI;EAC1C,QAAA;EACF,MAAA;EACA;QACA/uH,KAAA,CAAK8uH,WAAW,GAAG9uH,KAAA,CAAK2wH,UAAU,CAAC3wH,KAAA,CAAK8uH,WAAW,CAAC;QACpD9uH,KAAA,CAAK+uH,SAAS,GAAG/uH,KAAA,CAAK2wH,UAAU,CAAC3wH,KAAA,CAAK+uH,SAAS,CAAC;EAChD;EACA,MAAA,IAAMl3D,aAAa,GAAG73D,KAAA,CAAK63D,aAAa;EACxC,MAAA,IAAIA,aAAa,EAAE;UACjB64D,oBAAoB,GAAG1wH,KAAA,CAAK2wH,UAAU,CAAC94D,aAAa,EAAE73D,KAAA,CAAK6uH,WAAW,CAAC;UACvE,IAAI7uH,KAAA,CAAK4wH,UAAU,CAAC/4D,aAAa,EAAE64D,oBAAoB,CAAC,EAAE;YACxD1wH,KAAA,CAAK63D,aAAa,GAAG64D,oBAAoB;EAC3C,QAAA,CAAC,MAAM,IAAI74D,aAAa,CAACnnC,KAAK,EAAE;EAC9B;EACA1wB,UAAAA,KAAA,CAAK63D,aAAa,GAAG73D,KAAA,CAAKq7D,WAAW;YACrCr7D,KAAA,CAAKmwH,iBAAiB,CAACt4D,aAAa,CAACnnC,KAAK,EAAE,IAAI,CAAC;EACnD,QAAA;EACF,MAAA;EAEA65F,MAAAA,oBAAoB,CAAChwH,OAAO,CAAC,UAAC29D,YAAY,EAAK;EAC7CA,QAAAA,YAAY,CAACmsD,SAAS,CAAC9pH,OAAO,CAAC,UAAC4qH,KAAK,EAAK;YACxCnlH,KAAA,CAAK6wH,gBAAgB,CAAC1L,KAAK,CAAChyE,UAAU,EAAE,IAAI,CAAC;EAC/C,QAAA,CAAC,CAAC;EACJ,MAAA,CAAC,CAAC;EAEFnzC,MAAAA,KAAA,CAAKi4D,WAAW,CAAC19D,OAAO,CAAC,UAACu2H,MAAM,EAAK;EACnC,QAAA,IAAIA,MAAM,CAAC54D,YAAY,CAACH,aAAa,EAAE;EACrC,UAAA,IAAM1I,aAAa,GAAGyhE,MAAM,CAAC3K,SAAS,CAAC92D,aAAa;EACpD,UAAA,IAAMk5D,IAAI,GAAGuI,MAAM,CAACxhE,cAAc,GAAGD,aAAa;EAClD,UAAA,IAAIk5D,IAAI,EAAE;cACR,IAAI;gBACFuI,MAAM,CAACxhE,cAAc,GAAGD,aAAa;cACvC,CAAC,CAAC,OAAO70D,CAAC,EAAE;gBACV,IAAIhG,IAAI,CAACQ,GAAG,CAACuzH,IAAI,CAAC,GAAGnF,6BAA6B,EAAE;EAClDpjH,gBAAAA,KAAA,CAAK9G,IAAI,CACJsB,CAAC,YAAMs2H,MAAM,CAACC,OAAO,GAAA,KAAA,GAAKD,MAAM,CAACxhE,cAAc,GAAA,IAAA,GAAKD,aAAa,MACtE,CAAC;EACH,cAAA;EACF,YAAA;EACF,UAAA;EACF,QAAA;EACF,MAAA,CAAC,CAAC;QAEF,IAAImhE,oBAAoB,IAAIH,aAAa,EAAE;UACzCrwH,KAAA,CAAK6qB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC47H,qBAAqB,EAAE;EAC7CpI,UAAAA,MAAM,EAAEwB,kBAAkB,CAACp2H,KAAK,CAAC,CAAC,CAAC;EACnCq3H,UAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC80H,UAAAA,SAAS,EAATA,SAAS;EACTyH,UAAAA,UAAU,EAAVA;EACF,SAAC,CAAC;EAEF,QAAA,IACEvwH,KAAA,CAAK21C,cAAc,CAAC0lB,WAAW,CAAC,IAChCk1D,UAAU,CAACpmB,QAAQ,CAAC9uC,WAAW,CAAC3qC,KAAK,CAACyiB,UAAU,CAAC,EACjD;YACAnzC,KAAA,CAAK9G,IAAI,CAAA,iBAAA,GACUmiE,WAAW,CAAC3qC,KAAK,CAACyiB,UAAU,GAAA,0BAC/C,CAAC;EACDnzC,UAAAA,KAAA,CAAKixH,eAAe,CAAC51D,WAAW,CAAC3qC,KAAK,CAAC;EACvC,UAAA;EACF,QAAA;EAEA,QAAA,IAAI2qC,WAAW,EAAE;EACfr7D,UAAAA,KAAA,CAAKkxH,WAAW,CAACT,kBAAkB,EAAEp1D,WAAW,CAAC;EACnD,QAAA;EACA,QAAA,IAAIxD,aAAa,IAAI64D,oBAAoB,KAAKD,kBAAkB,EAAE;EAChEzwH,UAAAA,KAAA,CAAKkxH,WAAW,CAACR,oBAAoB,EAAE74D,aAAa,CAAC;EACvD,QAAA;;EAEA;EACA;UACA73D,KAAA,CAAKyvH,WAAW,EAAE;EACpB,MAAA;MACF,CAAC;MAhnDCzvH,KAAA,CAAK6qB,GAAG,GAAGA,GAAG;MACd7qB,KAAA,CAAKimH,cAAc,GAAGA,cAAc;EACpCjmH,IAAAA,KAAA,CAAKskH,eAAe,GAAG,IAAImJ,eAAe,CAAC5iG,GAAG,CAAC;EAC/C7qB,IAAAA,KAAA,CAAKqrH,QAAQ,GAAG,IAAI5C,qBAAqB,CACvCzoH,KAAA,CAAK0oH,gBAAgB,EACrB79F,GAAG,CAAC9xB,MACN,CAAC;MACDiH,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAA4sH,uBAAA,EAAAxjG,OAAA,CAAA;EAAA,EAAA,IAAA10B,MAAA,GAAAk4H,uBAAA,CAAAj4H,SAAA;EAAAD,EAAAA,MAAA,CAEO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAMpE,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB;EACA,IAAA,IAAIA,GAAG,EAAE;EACPA,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3D/sE,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD9jC,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DhkC,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDpP,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC82F,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACtEthE,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk5F,mBAAmB,EAAE,IAAI,CAAC6iC,mBAAmB,EAAE,IAAI,CAAC;EAClEtmG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACg8H,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACtExmG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk8H,sBAAsB,EAAE,IAAI,CAACC,sBAAsB,EAAE,IAAI,CAAC;EACxE1mG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACo8H,eAAe,EAAE,IAAI,CAACC,sBAAsB,EAAE,IAAI,CAAC;EACjE5mG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC+4H,iBAAiB,EAAE,IAAI,CAACuD,iBAAiB,EAAE,IAAI,CAAC;EAC9D7mG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACkrC,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3D1V,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACu3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD/hE,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACmqG,eAAe,EAAE,IAAI,CAACoyB,eAAe,EAAE,IAAI,CAAC;EAC1D9mG,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw8H,WAAW,EAAE,IAAI,CAACnjE,YAAY,EAAE,IAAI,CAAC;EACnD5jC,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EACxC1F,MAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC0kH,UAAU,EAAE,IAAI,CAACJ,YAAY,EAAE,IAAI,CAAC;EACpD,IAAA;IACF,CAAC;EAAAnjH,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAM3F,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB;EACA,IAAA,IAAIA,GAAG,EAAE;EACPA,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACuiG,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5D/sE,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D9jC,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DhkC,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC4kC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDpP,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC82F,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvEthE,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk5F,mBAAmB,EAAE,IAAI,CAAC6iC,mBAAmB,EAAE,IAAI,CAAC;EACnEtmG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACg8H,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvExmG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk8H,sBAAsB,EAAE,IAAI,CAACC,sBAAsB,EAAE,IAAI,CAAC;EACzE1mG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACo8H,eAAe,EAAE,IAAI,CAACC,sBAAsB,EAAE,IAAI,CAAC;EAClE5mG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC+4H,iBAAiB,EAAE,IAAI,CAACuD,iBAAiB,EAAE,IAAI,CAAC;EAC/D7mG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EACxDjtE,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACkrC,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5D1V,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACu3F,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D/hE,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACmqG,eAAe,EAAE,IAAI,CAACoyB,eAAe,EAAE,IAAI,CAAC;EAC3D9mG,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw8H,WAAW,EAAE,IAAI,CAACnjE,YAAY,EAAE,IAAI,CAAC;EACpD5jC,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EACzC1F,MAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC0kH,UAAU,EAAE,IAAI,CAACJ,YAAY,EAAE,IAAI,CAAC;EACrD,IAAA;IACF,CAAC;EAAAnjH,EAAAA,MAAA,CAED4jC,SAAS,GAAT,SAAAA,SAASA,GAAG;EACV;MACA,IAAI,CAACg1B,eAAe,EAAE;IACxB,CAAC;EAAA54D,EAAAA,MAAA,CAED8jC,QAAQ,GAAR,SAAAA,QAAQA,GAAG;EACT;MACA,IAAI,CAAC60B,cAAc,EAAE;IACvB,CAAC;EAAA34D,EAAAA,MAAA,CAED44D,eAAe,GAAf,SAAAA,eAAeA,GAAG;EAAA,IAAA,IAAA0iE,qBAAA;MAChB,CAAAA,qBAAA,GAAA,IAAI,CAACC,kBAAkB,EAAE,KAAA,IAAA,IAAzBD,qBAAA,CAA2B1iE,eAAe,EAAE;IAC9C,CAAC;EAAA54D,EAAAA,MAAA,CAED24D,cAAc,GAAd,SAAAA,cAAcA,GAAG;EAAA,IAAA,IAAA6iE,sBAAA;MACf,CAAAA,sBAAA,GAAA,IAAI,CAACD,kBAAkB,EAAE,KAAA,IAAA,IAAzBC,sBAAA,CAA2B7iE,cAAc,EAAE;IAC7C,CAAC;EAAA34D,EAAAA,MAAA,CAEDkC,OAAO,GAAP,SAAAA,OAAOA,GAAG;MACR,IAAI,CAAC+3B,mBAAmB,EAAE;MAC1B,IAAI,CAAC6J,QAAQ,EAAE;EACf;MACA,IAAI,IAAI,CAACiqF,eAAe,EAAE;EACxB,MAAA,IAAI,CAACA,eAAe,CAAC7rH,OAAO,EAAE;EAChC,IAAA;MACA,IAAI,CAACu5H,gBAAgB,EAAE;MACvB,IAAI,CAACC,kBAAkB,EAAE;MACzB,IAAI,IAAI,CAAC5G,QAAQ,EAAE;EACjB,MAAA,IAAI,CAACA,QAAQ,CAAC5yH,OAAO,EAAE;EACzB,IAAA;MACA,IAAI,CAACssB,KAAK,GACR,IAAI,CAAC4pG,YAAY,GACjB,IAAI,CAAC3E,cAAc,GACnB,IAAI,CAAC5uH,cAAc,GACnB,IAAI,CAACszH,YAAY,GACjB,IAAI,CAACrD,QAAQ,GACb,IAAI,CAACuD,OAAO,GACV,IAAI;EACR;MACA,IAAI,CAAC/jG,GAAG,GAAG,IAAI,CAACo7F,cAAc,GAAG,IAAI,CAAC3vH,GAAG,GAAG,IAAI;EAChD;MACA,IAAI,CAACguH,eAAe,GAAG,IAAI;EAC3B;EACA,IAAA,IAAI,CAAC8K,MAAM,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,SAAS,GAAG,IAAI,CAACc,YAAY,GAAG,IAAI;EACtE;MACA,IAAI,CAAC1H,gBAAgB,GAAG,IAAI;IAC9B,CAAC;EAAAnyH,EAAAA,MAAA,CAEOmjH,YAAY,GAApB,SAAQA,YAAYA,GAAG;MACrB,IAAM30F,KAAK,GAAG,IAAI,CAACmtG,YAAY,IAAI,IAAI,CAACntG,KAAK;EAC7C,IAAA,IAAIA,KAAK,EAAE;EACT,MAAA,IAAI,CAAC8hG,oBAAoB,CAAC9hG,KAAK,CAAC;EAClC,IAAA;IACF,CAAC;EAAAxuB,EAAAA,MAAA,CAEOswH,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAAC9hG,KAAuB,EAAE;MACpD+mC,mBAAmB,CAAC/mC,KAAK,EAAE,MAAM,EAAE,IAAI,CAACqqG,MAAM,CAAC;MAC/CtjE,mBAAmB,CAAC/mC,KAAK,EAAE,OAAO,EAAE,IAAI,CAACsqG,OAAO,CAAC;MACjDvjE,mBAAmB,CAAC/mC,KAAK,EAAE,SAAS,EAAE,IAAI,CAACuqG,SAAS,CAAC;MACrDxjE,mBAAmB,CAAC/mC,KAAK,EAAE,YAAY,EAAE,IAAI,CAACqrG,YAAY,CAAC;IAC7D,CAAC;IAAA75H,MAAA,CAEOqhG,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBlnE,KAA6B,EAC7BpvB,IAAwB,EACxB;MACA,IAAMyjB,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGzjB,IAAI,CAACyjB,KAAM;MACvC6mC,gBAAgB,CAAC7mC,KAAK,EAAE,SAAS,EAAE,IAAI,CAACuqG,SAAS,CAAC;MAClD1jE,gBAAgB,CAAC7mC,KAAK,EAAE,YAAY,EAAE,IAAI,CAACqrG,YAAY,CAAC;MACxDxkE,gBAAgB,CAAC7mC,KAAK,EAAE,MAAM,EAAE,IAAI,CAACqqG,MAAM,CAAC;MAC5CxjE,gBAAgB,CAAC7mC,KAAK,EAAE,OAAO,EAAE,IAAI,CAACsqG,OAAO,CAAC;IAChD,CAAC;IAAA94H,MAAA,CAEOo4D,eAAe,GAAvB,SAAQA,eAAeA,CACrBj+B,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAM+5D,WAAW,GAAG,IAAI,CAAC82D,oBAAoB;EAC7C,IAAA,IAAMC,aAAa,GAAG,IAAI,CAACzD,YAAY;MACvC,IAAI,CAACA,YAAY,GAAG,IAAI;MACxB,IAAItzD,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI,CAACg3D,UAAU,EAAE;EACnB,IAAA,CAAC,MAAM,IAAI,CAACD,aAAa,EAAE;EACzB;QACA,IAAI,CAACH,kBAAkB,EAAE;EACzB,MAAA,IAAMtC,YAAY,GAAG,IAAI,CAACrG,aAAa,CAACjuD,WAAW,CAAC;EACpD,MAAA,IAAI,CAACy0D,mBAAmB,CAACH,YAAY,CAAC;EACxC,IAAA;IACF,CAAC;EAAAp5H,EAAAA,MAAA,CAEO07H,kBAAkB,GAA1B,SAAQA,kBAAkBA,GAAG;MAC3B,IAAI,CAAC37H,GAAG,CAAA,sBAAuB,CAAC;MAChC,IAAI,CAAC+kE,WAAW,GACd,IAAI,CAACxD,aAAa,GAClB,IAAI,CAACi3D,WAAW,GAChB,IAAI,CAACC,SAAS,GACd,IAAI,CAACC,YAAY,GACjB,IAAI,CAACC,UAAU,GACf,IAAI,CAACC,cAAc,GACjB,IAAI;IACV,CAAC;IAAA34H,MAAA,CAEOs4D,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAMquD,iBAAiB,GAAG,CAAC,CAACruD,IAAI,CAACsuD,aAAa;EAC9C,IAAA,IAAM7qC,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAI,CAACA,KAAK,GAAG,IAAI;EACjB,IAAA,IAAI4qC,iBAAiB,EAAE;EACrB,MAAA;EACF,IAAA;EACA,IAAA,IAAI5qC,KAAK,EAAE;EACT,MAAA,IAAI,CAAC8hG,oBAAoB,CAAC9hG,KAAK,CAAC;EAClC,IAAA;EACA;MACA,IAAI,IAAI,CAAC4pG,YAAY,EAAE;EACrB,MAAA,IAAMmC,MAAM,GAAG,IAAI,CAACgB,kBAAkB,EAAE;EACxC,MAAA,IAAIhB,MAAM,EAAE;EACV,QAAA,IAAI,CAACx6H,GAAG,CAAA,+CAAA,GAAiDw6H,MAAQ,CAAC;UAClE,IAAI,CAAC9B,YAAY,GACf,IAAI,CAACC,UAAU,GACf,IAAI,CAACC,cAAc,GACnB,IAAI,CAACr3D,aAAa,GAClB,IAAI,CAACi3D,WAAW,GAChB,IAAI,CAACH,YAAY,GACf,IAAI;UACRmC,MAAM,CAACxJ,WAAW,EAAE;EACtB,MAAA;QACA,IAAI,CAAC6H,UAAU,GAAG,KAAK;EACzB,IAAA;IACF,CAAC;EAAA54H,EAAAA,MAAA,CAkaOo/C,cAAc,GAAtB,SAAQA,cAAcA,CACpB41D,IAAiD,EACV;EACvC,IAAA,OAAO,CAAC,EAACA,IAAI,IAAA,IAAA,IAAJA,IAAI,CAAE76E,KAAK,CAAA;IACtB,CAAC;IAAAn6B,MAAA,CAEO+7H,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBvB,OAA4B,EAC5BwB,SAA0C,EAC1C;EACA,IAAA,IAAMzB,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACzB,OAAO,CAAC;EAC3C,IAAA,IAAID,MAAM,EAAE;EACV,MAAA,IAAI,CAAC2B,uBAAuB,CAAC3B,MAAM,EAAEyB,SAAS,CAAC;EACjD,IAAA;IACF,CAAC;IAAAh8H,MAAA,CAEOk8H,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAC7B3B,MAAsB,EACtByB,SAAsD,EACtD;EACA,IAAA,IAAMx6D,aAAa,GAAG+4D,MAAM,CAAC54D,YAAY,CAACH,aAAa;EACvD,IAAA,IAAM26D,WAAW,GAAG5B,MAAM,CAAC/rG,KAAK;EAChC,IAAA,IAAIgzC,aAAa,IAAI26D,WAAW,KAAK,IAAI,CAACR,YAAY,EAAE;QACtD,IAAI,CAAChD,cAAc,GAAG,IAAI;EAC1B,MAAA,IACE,CAACqD,SAAS,IACT,IAAI,CAAC58E,cAAc,CAAC48E,SAAS,CAAC,IAAI,CAACA,SAAS,CAAC7hG,KAAK,CAACqnC,aAAc,EAClE;EACA;EACA;UACA,IAAIw6D,SAAS,IAAIG,WAAW,EAAE;YAC5B,IAAI,CAAC/D,YAAY,GAAG;EAAE5pG,YAAAA,KAAK,EAAE2tG;aAAa;EAC1C,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAMC,qBAAqB,GAAG7B,MAAM,CAAClhE,aAAa,EAAE;QACpD,IAAI,CAACt5D,GAAG,CAAA,4BAAA,GACuBw6H,MAAM,SAAIjrG,SAAS,CAAC8sG,qBAAqB,CACxE,CAAC;QACD,IAAI,CAAChE,YAAY,GAAGgE,qBAAqB;EAC3C,IAAA,CAAC,MAAM,IAAIJ,SAAS,IAAIG,WAAW,EAAE;QACnC,IAAI,CAACvD,UAAU,KAAf,IAAI,CAACA,UAAU,GAAK,CAACuD,WAAW,CAACjmG,MAAM,CAAA;EACzC,IAAA;IACF,CAAC;IAAAl2B,MAAA,CAEOq8H,eAAe,GAAvB,SAAQA,eAAeA,CACrB9B,MAA4B,EAC5B/rG,KAAuB,EACvB;EAAA,IAAA,IAAA8tG,kBAAA;QAAA3uH,MAAA,GAAA,IAAA;QAAA4uH,qBAAA;EACA,IAAA,IAAIhC,MAAM,CAAC/rG,KAAK,KAAKA,KAAK,EAAE;EAC1B,MAAA;EACF,IAAA;MACA,IAAI4tG,qBAAgD,GAAG,IAAI;EAC3D,IAAA,IAAMI,aAAa,GAAG,IAAI,CAACloG,GAAG;EAC9B,IAAA,IAAMmoG,aAAa,GAAGlC,MAAM,KAAKiC,aAAa;MAC9C,IAAMh7D,aAAa,GACjBi7D,aAAa,IAAKlC,MAAM,CAAoB54D,YAAY,CAACH,aAAa;MACxE,IAAMk7D,mBAAmB,GAAA,CAAAJ,kBAAA,GAAG,IAAI,CAAClE,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjBkE,kBAAA,CAAmBt8B,WAAW;EAE1D,IAAA,IAAI28B,aAAqB;MACzB,IAAIH,aAAa,CAAChuG,KAAK,EAAE;EACvB,MAAA,IAAIgzC,aAAa,EAAE;EACjB46D,QAAAA,qBAAqB,GAAGI,aAAa,CAACnjE,aAAa,EAAE;UACrD,IAAI,CAAC++D,YAAY,GAAGgE,qBAAqB;EAC3C,MAAA;EACAO,MAAAA,aAAa,GAAA,SAAY;MAC3B,CAAC,MAAM,IAAID,mBAAmB,EAAE;EAC9B,MAAA,IAAME,eAAe,GAAG,IAAI,CAACrB,kBAAkB,EAAE;EACjD,MAAA,IAAIqB,eAAe,EAAE;EACnBR,QAAAA,qBAAqB,GAAGQ,eAAe,CAACvjE,aAAa,EAAE;EACvDsjE,QAAAA,aAAa,QAAMC,eAAiB;EACtC,MAAA,CAAC,MAAM;EACLD,QAAAA,aAAa,GAAA,sBAAyB;EACxC,MAAA;EACF,IAAA,CAAC,MAAM;EACLA,MAAAA,aAAa,GAAA,gBAAmB;EAClC,IAAA;MACA,IAAI,CAACP,qBAAqB,EAAE;EAC1B,MAAA,IAAIM,mBAAmB,EAAE;UACvBN,qBAAqB,GAAG,IAAI,CAAChE,YAAY;EACzC,QAAA,IAAI,CAACr4H,GAAG,CAAA,kCAAA,GAC6BuvB,SAAS,CAAC8sG,qBAAqB,CACpE,CAAC;EACH,MAAA,CAAC,MAAM,IAAI,CAAC,IAAI,CAAChE,YAAY,IAAIoE,aAAa,CAAChuG,KAAK,KAAKA,KAAK,EAAE;EAC9D;EACA,QAAA,IAAMkzC,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,QAAA,IAAIA,WAAW,CAACx8D,MAAM,GAAG,CAAC,EAAE;EAC1Bw8D,UAAAA,WAAW,CAAC19D,OAAO,CAAC,UAAC64H,YAAY,EAAK;cACpC,IACEJ,aAAa,IACbI,YAAY,CAACl7D,YAAY,CAACH,aAAa,KAAKA,aAAa,EACzD;EACA,cAAA,IAAMG,YAAY,GAAGk7D,YAAY,CAACl7D,YAAY;gBAC9Ch0D,MAAI,CAACisH,iBAAiB,CAACiD,YAAY,CAACl7D,YAAY,EAAE,IAAI,CAAC;EACvDA,cAAAA,YAAY,CAACH,aAAa,GAAG,KAAK,CAAC;EACnC;gBACA,IAAIG,YAAY,CAACH,aAAa,EAAa;EACzC7zD,gBAAAA,MAAI,CAAChL,IAAI,CAAA,qDAAA,GAC+Cg/D,YACxD,CAAC;EACH,cAAA;EACF,YAAA;EACF,UAAA,CAAC,CAAC;EACJ,QAAA;EACA,QAAA,IAAI,CAACrtC,GAAG,CAACy8F,WAAW,EAAE;UACtB,IAAI,CAACqH,YAAY,GAAG;EAAE5pG,UAAAA,KAAK,EAALA;WAAO;EAC/B,MAAA;EACF,IAAA;EACA,IAAA,IAAMsuG,YAAY,GAChBV,qBAAqB,IACrB,aAAa,IAAIA,qBAAqB,IACtC,CAAA,CAAAG,qBAAA,GAAAH,qBAAqB,CAACp8B,WAAW,KAAA,IAAA,GAAA,MAAA,GAAjCu8B,qBAAA,CAAmCnmG,UAAU,MAAK,QAAQ;MAC5D,IAAM2mG,YAAY,GAChBD,YAAY,IAAIV,qBAAqB,GAAGA,qBAAqB,GAAG5tG,KAAK;MACvE,IAAI,CAACzuB,GAAG,CAAA,CACH+8H,YAAY,GAAG,yBAAyB,GAAG,iBAAiB,IAAA,MAAA,IAC7DL,aAAa,GAAGlC,MAAM,GAAG,SAAS,CAAA,GAAA,QAAA,GAC3BoC,aAAa,6BAAwBnuG,KAAK,CAAC+oC,WAAW,GAAA,GACjE,CAAC;EACD,IAAA,IAAMu9D,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAIiI,YAAY,KAAKX,qBAAqB,IAAItH,QAAQ,EAAE;QACtD,IAAMkI,sBAAsB,GAC1BP,aAAa,IACZlC,MAAM,CAAoBC,OAAO,KAAK1F,QAAQ,CAACmI,YAAY;EAC9D;QACAF,YAAY,CAACz8B,SAAS,GAAG;UACvBr2F,QAAQ,EAAE6qH,QAAQ,CAAC7qH,QAAQ;EAC3B85F,QAAAA,WAAW,EAAE,CAAC04B,aAAa,IAAIO,sBAAsB;EACrDE,QAAAA,UAAU,EAAE,CAACT;SACd;EACH,IAAA;EACAlC,IAAAA,MAAM,CAACzJ,WAAW,CAACiM,YAAY,CAAC;IAClC,CAAC;EAAA/8H,EAAAA,MAAA,CAoGOk7H,sBAAsB,GAA9B,SAAQA,sBAAsBA,GAAG;MAC/B,IAAI,CAACrB,YAAY,EAAE;IACrB,CAAC;EAwCD;EAAA75H,EAAAA,MAAA,CACQ87H,UAAU,GAAlB,SAAQA,UAAUA,GAAG;EACnB,IAAA,IAAMhH,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAMjB,kBAAkB,GAAGiB,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEzC,MAAM;MAC3C,IAAI,CAACwB,kBAAkB,IAAI,IAAI,CAACmF,gBAAgB,IAAI,CAAC,IAAI,CAACxqG,KAAK,EAAE;EAC/D,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAI,IAAI,CAAC8pG,WAAW,KAAK,EAAE,EAAE;QAC3B,IAAI,CAACA,WAAW,GAAG,CAAC;EACtB,IAAA;EACA;EACA,IAAA,IAAMlF,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAMwI,oBAAoB,GAAG,IAAI,CAACA,oBAAoB;EACtD,IAAA,IAAIxI,WAAW,KAAK,EAAE,EAAE;EACtB,MAAA,IAAMvvF,aAAa,GAAG,IAAI,CAACvP,GAAG,CAACuP,aAAa;QAC5C,IAAI,CAAC9jC,GAAG,CAACk4H,eAAe,CAAC,YAAY,EAAEp0F,aAAa,CAAC,CAAC;QACtD,IAAI,CAACuvF,WAAW,GAAGvvF,aAAa;EAChC,MAAA,IAAIgwF,kBAAkB,CAAC3uH,MAAM,IAAI2uH,kBAAkB,CAAC,CAAC,CAAC,CAAC10E,GAAG,CAACP,GAAG,EAAE;EAC9D,QAAA,IAAMlxC,KAAK,GAAGonH,QAAQ,CAAC9B,cAAc,CAACa,kBAAkB,CAAC,CAAC,CAAC,CAACj3E,UAAU,CAAC;EACvE,QAAA,IAAI,CAAC28E,mBAAmB,CAAC7rH,KAAK,CAAC;QACjC,CAAC,MAAM,IAAIm2B,aAAa,IAAI,CAAC,IAAI,CAAC,IAAI,CAACs5F,WAAW,EAAE;EAClD,QAAA,IAAM51H,KAAK,GAAI,IAAI,CAAC6rH,WAAW,GAC7BvvF,aAAa,GAAG,CAAC,GAAGA,aAAa,GAAG,CAAE;EACxC,QAAA,IAAMn2B,MAAK,GAAGonH,QAAQ,CAAC5B,mBAAmB,CAAC3rH,KAAK,CAAC;EACjD,QAAA,IAAI,CAACgyH,mBAAmB,CAAC7rH,MAAK,CAAC;EACjC,MAAA;MACF,CAAC,MAAM,IAAIkuH,oBAAoB,IAAI,CAAC,IAAI,CAAC92D,WAAW,EAAE;EACpD,MAAA,IAAMp3D,OAAK,GAAGonH,QAAQ,CAAC/B,aAAa,CAAC6I,oBAAoB,CAAC;EAC1D,MAAA,IAAI,CAACrC,mBAAmB,CAAC7rH,OAAK,CAAC;EACjC,IAAA;IACF,CAAC;IAAA1N,MAAA,CAEOo9H,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3BpoB,IAAmC,EACnC4a,SAAgC,EAChC;EACA,IAAA,IAAMjuD,YAAY,GAAGqzC,IAAI,CAAC76E,KAAK;EAC/B,IAAA,IAAM6yF,cAAc,GAAGrrD,YAAY,CAACgtD,cAAc,CAACiB,SAAS,CAAC;EAC7D,IAAA,IAAMyN,cAAc,GAAG/N,iBAAiB,CAAC3tD,YAAY,EAAEqrD,cAAc,CAAC;EACtE,IAAA,IAAI,CAACrrD,YAAY,CAAC2sD,uBAAuB,CAAC+O,cAAc,CAAC,EAAE;EACzD,MAAA,IAAI,CAACC,eAAe,CAACtoB,IAAI,EAAEqoB,cAAc,CAAC;EAC5C,IAAA,CAAC,MAAM,IAAI,IAAI,CAACvI,QAAQ,EAAE;EAAA,MAAA,IAAAyI,oBAAA;QACxB,IAAMC,QAAQ,IAAAD,oBAAA,GAAG,IAAI,CAACzI,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAnBiL,oBAAA,CAAsB,IAAI,CAACxK,aAAa,CAAC/d,IAAI,CAAC,GAAG,CAAC,CAAC;EACpE,MAAA,IAAIwoB,QAAQ,EAAE;EACZ,QAAA,IAAI,CAACC,cAAc,CAACD,QAAQ,CAAC;EAC/B,MAAA;EACF,IAAA;IACF,CAAC;IAAAx9H,MAAA,CAEO09H,sBAAsB,GAA9B,SAAQA,sBAAsBA,CAC5B/7D,YAA+B,EAC/Bj0D,KAAa,EACbs/G,cAAsB,EACtB;EACA,IAAA,IAAMqQ,cAAc,GAAG/N,iBAAiB,CAAC3tD,YAAY,EAAEqrD,cAAc,CAAC;EACtE,IAAA,IAAI,CAACrrD,YAAY,CAAC2sD,uBAAuB,CAAC+O,cAAc,CAAC,EAAE;EACzD;QACA,IAAI17D,YAAY,CAACH,aAAa,EAAE;EAC9B,QAAA,IAAMouD,SAAS,GAAGjuD,YAAY,CAACmsD,SAAS,CAACuP,cAAc,CAE1C;EACb,QAAA,IAAIzN,SAAS,EAAE;EACb,UAAA,IAAI,CAAC+N,cAAc,CAAC/N,SAAS,CAAC92D,aAAa,CAAC;EAC9C,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAACygE,mBAAmB,CAAC7rH,KAAK,EAAE2vH,cAAc,CAAC;EACjD,IAAA,CAAC,MAAM,IAAI,IAAI,CAACvI,QAAQ,EAAE;EACxB;EACA;EACA,MAAA,IAAMiF,aAAa,GAAG,IAAI,CAACjF,QAAQ,CAACxC,KAAK;EACzC,MAAA,IAAIyH,aAAa,EAAE;EACjB,QAAA,IAAM6D,SAAS,GAAGlwH,KAAK,GAAG,CAAC;EAC3B,QAAA,IAAMmwH,cAAc,GAAG9D,aAAa,CAAC70H,MAAM;UAC3C,IAAI04H,SAAS,IAAIC,cAAc,EAAE;EAC/B,UAAA,IAAI,CAACtE,mBAAmB,CAAC,EAAE,CAAC;EAC5B,UAAA;EACF,QAAA;EACA,QAAA,IAAMuE,cAAc,GAAGn8D,YAAY,CAACC,UAAU;EAC9C,QAAA,IAAI,IAAI,CAACwxD,WAAW,GAAG0K,cAAc,EAAE;YACrC,IAAI,CAAC/9H,GAAG,CAACk4H,eAAe,CAAC,wBAAwB,EAAE6F,cAAc,CAAC,CAAC;YACnE,IAAI,CAAC1K,WAAW,GAAG0K,cAAc;YACjC,IAAIn8D,YAAY,CAACH,aAAa,EAAE;EAC9B,YAAA,IAAI,CAACm8D,cAAc,CAACG,cAAc,CAAC;EACrC,UAAA;YACA,IAAI,CAAC5E,WAAW,CAAC,IAAI,CAACZ,WAAW,GAAGwF,cAAc,CAAC;EACrD,QAAA;EACA,QAAA,IAAI,CAACvE,mBAAmB,CAACqE,SAAS,CAAC;EACrC,MAAA;EACF,IAAA;IACF,CAAC;IAAA59H,MAAA,CAEO05H,wBAAwB,GAAhC,SAAQA,wBAAwBA,CAC9BruF,IAAY,EACZotF,YAAmC,EACnC;EACA,IAAA,IAAM3D,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAI,CAACA,QAAQ,EAAE;EACb,MAAA;EACF,IAAA;EACA,IAAA,IAAMlD,gBAAgB,GAAG6G,YAAY,CAAC7G,gBAAgB;EACtD,IAAA,IAAMjwD,YAAY,GAAGmzD,QAAQ,CAACjC,QAAQ,CAACjB,gBAAgB,CAAC;EACxD,IAAA,IAAIjwD,YAAY,EAAE;EAChB,MAAA,IAAMo8D,SAAS,GAAGjJ,QAAQ,CAAC9B,cAAc,CAACpB,gBAAgB,CAAC;QAC3D,IAAM5E,cAAc,GAAG8H,QAAQ,CAACnG,cAAc,CAAChtD,YAAY,EAAEt2B,IAAI,CAAC;QAClE,IAAI,CAACqyF,sBAAsB,CAAC/7D,YAAY,EAAEo8D,SAAS,EAAE/Q,cAAc,GAAG,CAAC,CAAC;EAC1E,IAAA;IACF,CAAC;IAAAhtH,MAAA,CAEOu5H,mBAAmB,GAA3B,SAAQA,mBAAmBA,CAAC7rH,KAAa,EAAEs/G,cAAuB,EAAE;EAAA,IAAA,IAAAgR,cAAA;MAClE,IAAMjE,aAAa,GAAA,CAAAiE,cAAA,GAAG,IAAI,CAAClJ,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAbkJ,cAAA,CAAe1L,KAAK;EAC1C,IAAA,IAAI,CAACyH,aAAa,IAAI,IAAI,CAACf,gBAAgB,EAAE;EAC3C,MAAA;EACF,IAAA;MACA,IAAMiF,aAAa,GAAGvwH,KAAK,IAAI,CAAC,GAAGqsH,aAAa,CAACrsH,KAAK,CAAC,GAAG,IAAI;EAC9D,IAAA,IAAI,CAAC3N,GAAG,CAAA,sBAAA,GACiB2N,KAAK,GAAA,IAAA,GAAKs/G,cAAc,WAAKiR,aAAa,GAAGhH,eAAe,CAACgH,aAAa,CAAC,GAAGA,aAAa,gBAAU,IAAI,CAAC7K,WACnI,CAAC;EACD;MACA,IAAM8K,WAAW,GAAG,IAAI,CAAC3F,WAAW,IAAI,IAAI,CAACzzD,WAAW;EACxD,IAAA,IAAM00D,eAAe,GAAG,IAAI,CAACA,eAAe;EAC5C,IAAA,IAAI,IAAI,CAACp6E,cAAc,CAAC8+E,WAAW,CAAC,EAAE;EACpC,MAAA,IAAMv8D,YAAY,GAAGu8D,WAAW,CAAC/jG,KAAK;EACtC,MAAA,IAAMs+F,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,MAAA,IAAM+B,OAAO,GAAG/B,YAAY,IAAA,IAAA,GAAA,MAAA,GAAZA,YAAY,CAAE77E,UAAU;QACxC,IAAM29E,MAAM,GAAGC,OAAO,GAAG,IAAI,CAACyB,cAAc,CAACzB,OAAO,CAAC,GAAG,IAAI;EAC5D,MAAA,IACED,MAAM,IACNC,OAAO,KACN,CAAC,IAAI,CAAC2D,eAAe,CAACD,WAAW,EAAED,aAAa,CAAC,IAC/CjR,cAAc,KAAK5oH,SAAS,IAC3Bo2H,OAAO,KAAK74D,YAAY,CAACmsD,SAAS,CAACd,cAAc,CAAC,CAACpwE,UAAW,CAAC,EACnE;EAAA,QAAA,IAAAwhF,mBAAA;EACA,QAAA,IAAMC,qBAAqB,GAAG18D,YAAY,CAACgtD,cAAc,CAAC8J,YAAY,CAAC;EACvE,QAAA,IAAI,CAAC14H,GAAG,CAAA,2BAAA,IACsBs+H,qBAAqB,GAAG,CAAC,CAAA,GAAA,GAAA,GAAI18D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM,GAAA,GAAA,GAAIsqH,kBAAkB,CAACiJ,YAAY,CAC3H,CAAC;UACD,IAAI,CAACC,UAAU,GAAGD,YAAY;UAC9B,IAAI,CAACA,YAAY,GAAG,IAAI;UACxB,IAAI,CAACnkG,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACy/H,wBAAwB,EAAE;EAChD1P,UAAAA,KAAK,EAAE6J,YAAY;EACnBzL,UAAAA,cAAc,EAAEqR,qBAAqB;EACrClkG,UAAAA,KAAK,EAAEwnC,YAAY;EACnBmzD,UAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC47H,UAAAA,aAAa,EAAE3rH,KAAK;EACpB6sH,UAAAA,MAAM,EAANA;EACF,SAAC,CAAC;EACF,QAAA,IAAI2D,WAAW,KAAK,IAAI,CAACp5D,WAAW,EAAE;EACpC;YACA,IACE,IAAI,CAACu1D,UAAU,CAAC6D,WAAW,EAAE,IAAI,CAACp5D,WAAW,CAAC;EAC9C;YACA,CAAC,IAAI,CAAC2zD,YAAY;cAClB;EACA,YAAA,IAAI,CAACiF,sBAAsB,CACzB/7D,YAAY,EACZ,IAAI,CAACoxD,aAAa,CAAC,IAAI,CAACjuD,WAAW,CAAC,EACpCu5D,qBACF,CAAC;EACH,UAAA;EACA;EACA,UAAA;EACF,QAAA;EACA,QAAA,IAAI,CAACtC,mBAAmB,CAACvB,OAAO,EAAEyD,aAAa,CAAC;EAChD,QAAA,IAAI1D,MAAM,CAAC/rG,KAAK,IAAI,GAAA4vG,mBAAA,GAAC,IAAI,CAAChG,YAAY,KAAA,IAAA,IAAjBgG,mBAAA,CAAmBp+B,WAAW,CAAA,EAAE;YACnDu6B,MAAM,CAACxJ,WAAW,EAAE;EACtB,QAAA;EACF,MAAA;QACA,IAAI,CAAC,IAAI,CAACoN,eAAe,CAACD,WAAW,EAAED,aAAa,CAAC,EAAE;UACrD,IAAI,CAACzF,SAAS,GAAG0F,WAAW;UAC5B,IAAI,CAACp5D,WAAW,GAAG,IAAI;UACvB,IAAI,CAAC/kE,GAAG,CAAA,qBAAA,GACgB4hE,YAAY,SAAIs1D,eAAe,CAACiH,WAAW,CACnE,CAAC;UACDv8D,YAAY,CAAC2rD,SAAS,GAAG,IAAI;UAC7B,IAAI,CAACh5F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC0/H,kBAAkB,EAAE;EAC1CpkG,UAAAA,KAAK,EAAEwnC,YAAY;EACnBmzD,UAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC47H,UAAAA,aAAa,EAAE3rH;EACjB,SAAC,CAAC;EACF;EACA,QAAA,IAAIi0D,YAAY,CAACxiB,GAAG,CAACL,IAAI,EAAE;EAAA,UAAA,IAAA0/E,eAAA;EACzB;YACA,IAAI,CAAChK,cAAc,EAAE;YACrB,IAAMiK,oBAAoB,GAAA,CAAAD,eAAA,GAAG,IAAI,CAAC1J,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAb0J,eAAA,CAAelM,KAAK;YACjD,IAAI2L,aAAa,IAAIQ,oBAAoB,EAAE;EACzC,YAAA,IAAMC,YAAY,GAAG,IAAI,CAAC3L,aAAa,CAACkL,aAAa,CAAC;EACtD,YAAA,IAAI,CAACU,eAAe,CAClBD,YAAY,EACZD,oBAAoB,EACpBzR,cAAc,EACdkR,WAAW,EACX1E,eACF,CAAC;EACH,UAAA;EACA,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACmF,eAAe,CAClBjxH,KAAK,EACLqsH,aAAa,EACb/M,cAAc,EACdkR,WAAW,EACX1E,eACF,CAAC;IACH,CAAC;EAAAx5H,EAAAA,MAAA,CACO2+H,eAAe,GAAvB,SAAQA,eAAeA,CACrBjxH,KAAa,EACbqsH,aAAyC,EACzC/M,cAAkC,EAClCkR,WAA4C,EAC5CU,cAAuB,EACvB;EAAA,IAAA,IAAApiG,MAAA,GAAA,IAAA;EACA,IAAA,IAAMs4F,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAC9B,IAAI,CAACA,QAAQ,EAAE;EACb,MAAA;EACF,IAAA;EACA,IAAA,IAAMmJ,aAAa,GAAGlE,aAAa,CAACrsH,KAAK,CAAC,IAAI,IAAI;EAClD,IAAA,IAAM8gB,KAAK,GAAG,IAAI,CAACmtG,YAAY;EAC/B;EACA,IAAA,IAAMj6D,WAAW,GAAG,IAAI,CAACA,WAAW;MACpC,IAAIA,WAAW,CAACx8D,MAAM,EAAE;EACtBw8D,MAAAA,WAAW,CAAC19D,OAAO,CAAC,UAACu2H,MAAM,EAAK;EAC9B,QAAA,IAAM54D,YAAY,GAAG44D,MAAM,CAAC54D,YAAY;UACxC,IAAMk9D,WAAW,GAAG/J,QAAQ,CAAC9B,cAAc,CAACrxD,YAAY,CAAC/kB,UAAU,CAAC;UACpE,IAAIiiF,WAAW,GAAGnxH,KAAK,IAAImxH,WAAW,GAAGnxH,KAAK,GAAG,CAAC,EAAE;EAClD8uB,UAAAA,MAAI,CAACo9F,iBAAiB,CAACj4D,YAAY,EAAEs8D,aAAa,CAAC;EACrD,QAAA;EACF,MAAA,CAAC,CAAC;EACJ,IAAA;EACA;EACA,IAAA,IAAI,IAAI,CAAC7+E,cAAc,CAAC6+E,aAAa,CAAC,EAAE;QACtC,IAAI,CAAC7K,WAAW,GAAGn1H,IAAI,CAAC+D,GAAG,CACzB/D,IAAI,CAACsD,GAAG,CAAC,IAAI,CAAC6xH,WAAW,EAAE6K,aAAa,CAAC12H,KAAK,CAAC,EAC/C02H,aAAa,CAACx2H,GAChB,CAAC;EACD;EACA,MAAA,IAAMk6D,YAAY,GAAGs8D,aAAa,CAAC9jG,KAAK;EACxC;QACA,IAAI6yF,cAAc,KAAK5oH,SAAS,EAAE;UAChC4oH,cAAc,GAAG8H,QAAQ,CAACnG,cAAc,CACtChtD,YAAY,EACZ,IAAI,CAACyxD,WACP,CAAC;UACD,IAAM0L,mBAAmB,GAAGxP,iBAAiB,CAC3C3tD,YAAY,EACZqrD,cAAc,GAAG,CACnB,CAAC;EACD,QAAA,IACErrD,YAAY,CAAC2sD,uBAAuB,CAACwQ,mBAAmB,CAAC,IACxDn9D,YAAY,CAACH,aAAa,IAAI,IAAI,CAAC4xD,WAAW,KAAK6K,aAAa,CAACx2H,GAAI,EACtE;YACA,IAAI,CAACi2H,sBAAsB,CAAC/7D,YAAY,EAAEj0D,KAAK,EAAEs/G,cAAc,CAAC;EAChE,UAAA;EACF,QAAA;EACAA,QAAAA,cAAc,GAAG8R,mBAAmB;EACtC,MAAA;EACA;EACA,MAAA,IAAMvG,WAAW,GAAG,IAAI,CAACA,WAAW;QACpC,IAAI,CAAC,IAAI,CAACwG,cAAc,CAACd,aAAa,EAAEzvG,KAAK,CAAC,EAAE;EAC9C,QAAA,IAAI,CAACwwG,gBAAgB,CAACf,aAAa,CAAC;EACtC,MAAA;QACA,IAAI1D,MAAM,GAAG,IAAI,CAAC0E,aAAa,CAACt9D,YAAY,EAAEqrD,cAAc,CAAC;QAC7D,IAAI,CAAC,IAAI,CAACmR,eAAe,CAACF,aAAa,EAAE1F,WAAW,IAAI2F,WAAW,CAAC,EAAE;UACpE,IAAI,CAAC3F,WAAW,GAAG0F,aAAa;EAChC,QAAA,IAAI,CAACl+H,GAAG,CAAA,uBAAA,GACkBk3H,eAAe,CAACgH,aAAa,CAAC,GAAA,GAAA,IAAIt8D,YAAY,CAACH,aAAa,GAAG,iBAAiB,GAAG,EAAE,CAC/G,CAAC;UACD,IAAI,CAACltC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACqgI,oBAAoB,EAAE;EAC5C/kG,UAAAA,KAAK,EAAEwnC,YAAY;EACnBmzD,UAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC47H,UAAAA,aAAa,EAAE3rH;EACjB,SAAC,CAAC;EACJ,MAAA;EACA,MAAA,IAAI,CAACi0D,YAAY,CAAC+0D,eAAe,EAAE;EACjC;EACA;EACA,QAAA,IAAI,CAAC32H,GAAG,CAAA,6CAAA,GAA+C4hE,YAAc,CAAC;EACtE,QAAA;EACF,MAAA;QACA,IAAIA,YAAY,CAACosD,eAAe,EAAE;EAChCpsD,QAAAA,YAAY,CAACosD,eAAe,CAAC7rH,OAAO,EAAE;UACtCy/D,YAAY,CAACosD,eAAe,GAAG3pH,SAAS;EAC1C,MAAA;QACA,IAAI,CAACoqB,KAAK,EAAE;EACV,QAAA,IAAI,CAACzuB,GAAG,CAAA,gDAAA,GAC2C4hE,YACnD,CAAC;EACD,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAI,CAAC42D,WAAW,GAAG,IAAI,CAACC,SAAS,GAAG,IAAI;QACxC,IAAI,CAAC1zD,WAAW,GAAGm5D,aAAa;;EAEhC;EACA,MAAA,IAAMrO,SAAS,GAAGjuD,YAAY,CAACmsD,SAAS,CAACd,cAAc,CAE1C;QACb,IAAI,CAAC4C,SAAS,EAAE;UACd,IAAI,CAAC8N,sBAAsB,CAAC/7D,YAAY,EAAEj0D,KAAK,EAAEs/G,cAAc,IAAI,CAAC,CAAC;EACrE,QAAA;EACF,MAAA;;EAEA;QACA,IAAI,CAACuN,MAAM,EAAE;UACXA,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACrM,SAAS,CAAChzE,UAAU,CAAC;EACpD,MAAA;EACA,MAAA,IAAI29E,MAAM,KAAK,IAAI,IAAIA,MAAM,CAAC4E,SAAS,EAAE;EACvC,QAAA,IAAMC,eAAe,GAAGz9D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM;UACrD,IAAI,CAACvC,IAAI,CAAA,QAAA,IAELqqH,cAAc,GAAG,CAAC,CAAA,GAAA,GAAA,GAChBoS,eAAe,GAAA,oBAAA,GAAqBz9D,YAC1C,CAAC;UACD44D,MAAM,GAAG,IAAI,CAAC8E,iBAAiB,CAC7B19D,YAAY,EACZiuD,SAAS,EACT5C,cACF,CAAC;UACDuN,MAAM,CAAC/J,UAAU,EAAE;EACrB,MAAA;QACA,IAAI,CAAC,IAAI,CAAC2N,eAAe,CAACF,aAAa,EAAE,IAAI,CAAC38D,aAAa,CAAC,EAAE;UAC5D,IAAIK,YAAY,CAACH,aAAa,IAAI,IAAI,CAAC89D,eAAe,CAAC1P,SAAS,CAAC,EAAE;EACjE,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAAC2P,gBAAgB,CACnBhF,MAAM,EACNvN,cAAc,EACd+M,aAAa,EACbrsH,KAAK,EACL8gB,KACF,CAAC;QACD,IAAI,IAAI,CAACoqG,UAAU,EAAE;EACnBb,QAAAA,aAAa,CAACwC,MAAM,CAAC/rG,KAAK,CAAC;EAC7B,MAAA;MACF,CAAC,MAAM,IAAIyvG,aAAa,EAAE;QACxB,IAAI,CAACuB,aAAa,CAACvB,aAAa,EAAEvwH,KAAK,EAAEwwH,WAAW,CAAC;QACrD,IAAI,IAAI,CAACtF,UAAU,EAAE;EACnBb,QAAAA,aAAa,CAAC,IAAI,CAACzjG,GAAG,CAAC9F,KAAK,CAAC;EAC/B,MAAA;MACF,CAAC,MAAM,IAAIowG,cAAc,IAAI,IAAI,CAACx/E,cAAc,CAAC8+E,WAAW,CAAC,EAAE;EAC7D;EACA;QACA,IAAI,CAAC1F,SAAS,GAAG,IAAI;QACrB,IAAI,CAAC1zD,WAAW,GAAGo5D,WAAW;EAC9B,MAAA,IAAI,CAACA,WAAW,CAAC/jG,KAAK,CAACqnC,aAAa,EAAE;EACpC;UACA,IAAI,CAACi+D,aAAa,CAAC3K,QAAQ,CAACvC,SAAS,CAACC,OAAO,EAAE,IAAI,CAAC;EACtD,MAAA;EACF,IAAA;IACF,CAAC;IAAAxyH,MAAA,CAcOw/H,aAAa,GAArB,SAAQA,aAAaA,CACnBvB,aAA8C,EAC9CvwH,KAAa,EACbgyH,QAAyC,EACzC;MAAA,IAAAC,mBAAA,EAAAC,eAAA;MACA,IAAI,CAAC96D,WAAW,GAAGm5D,aAAa;EAChC,IAAA,IAAI,CAACxF,YAAY,GAAG,IAAI,CAACC,UAAU,GAAG,IAAI;EAC1C,IAAA,IAAI,CAACH,WAAW,GAAG,IAAI,CAACC,SAAS,GAAG,IAAI;EAExC,IAAA,IAAI,CAACiF,cAAc,CAACQ,aAAa,CAAC;EAElC,IAAA,IAAI,CAACl+H,GAAG,CAAA,WAAA,GAAak3H,eAAe,CAACgH,aAAa,CAAG,CAAC;MAEtD,IAAI,EAAA,CAAA0B,mBAAA,GAAC,IAAI,CAACvH,YAAY,KAAA,IAAA,IAAjBuH,mBAAA,CAAmB3/B,WAAW,CAAA,EAAE;EACnC,MAAA,IAAIozB,WAAW,GAAG,IAAI,CAACA,WAAW;QAClC,IACEA,WAAW,GAAG6K,aAAa,CAAC12H,KAAK,IACjC6rH,WAAW,IAAI6K,aAAa,CAACx2H,GAAG,EAChC;UACA2rH,WAAW,GAAG,IAAI,CAACyM,oBAAoB,CAAC5B,aAAa,EAAEvwH,KAAK,CAAC;UAC7D,IAAI,CAAC3N,GAAG,CAACk4H,eAAe,CAAC,eAAe,EAAE7E,WAAW,CAAC,CAAC;UACvD,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC,MAAA;EACA,MAAA,IAAI,CAACqM,aAAa,CAACrM,WAAW,EAAE6K,aAAa,CAAC;EAChD,IAAA;MAEA,IAAI,CAACyB,QAAQ,EAAE;EACb,MAAA;EACF,IAAA;MAEA,IAAM3F,aAAa,GAAA,CAAA6F,eAAA,GAAG,IAAI,CAAC9K,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAb8K,eAAA,CAAetN,KAAK;MAC1C,IAAI,CAACyH,aAAa,EAAE;EAClB,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAACh6H,GAAG,CAAA,gCAAA,GAAkCk3H,eAAe,CAACgH,aAAa,CAAG,CAAC;MAC3E,IAAI,CAAC3pG,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACihI,6BAA6B,EAAE;EACrDhL,MAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC47H,MAAAA,aAAa,EAAE3rH;EACjB,KAAC,CAAC;MACF,IAAI,CAACwrH,WAAW,EAAE;IACpB,CAAC;IAAAl5H,MAAA,CAEO6/H,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1B5B,aAA8C,EAC9CvwH,KAAa,EACL;EACR,IAAA,IAAMqyH,SAAS,GAAG9B,aAAa,CAAC12H,KAAK;MACrC,IAAI,IAAI,CAAC41H,WAAW,EAAE;EACpB,MAAA,IAAMxxG,OAAO,GAAG,IAAI,CAACq0G,cAAc;QACnC,IAAItyH,KAAK,KAAK,CAAC,EAAE;EACf,QAAA,OAAO,IAAI,CAAC4mB,GAAG,CAACuP,aAAa;EAC/B,MAAA,CAAC,MAAM,IACLlY,OAAO,KACNo0G,SAAS,GAAGp0G,OAAO,CAACy2B,aAAa,IAAI29E,SAAS,GAAGp0G,OAAO,CAAC6mC,IAAI,CAAC,EAC/D;EACA,QAAA,OAAO,IAAI,CAACl+B,GAAG,CAACksC,gBAAgB,IAAI,EAAE;EACxC,MAAA;EACF,IAAA;EACA,IAAA,OAAOu/D,SAAS;IAClB,CAAC;EAAA//H,EAAAA,MAAA,CAEOs/H,eAAe,GAAvB,SAAQA,eAAeA,CAAC1Q,KAA4B,EAAW;MAC7D,IAAM2L,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC;EACpD,IAAA,IAAI29E,MAAM,IAAA,IAAA,IAANA,MAAM,CAAEjmG,GAAG,EAAE;EACf,MAAA,OAAOimG,MAAM,CAACjmG,GAAG,CAACq8F,aAAa;EACjC,IAAA;EACA,IAAA,IAAMt6F,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CACxC,IAAI,CAACslG,YAAY,EACjB,IAAI,CAACvI,WAAW,EAChB,CACF,CAAC;EACD,IAAA,OAAO/8F,UAAU,CAAC5uB,GAAG,GAAG,CAAC,IAAImnH,KAAK,CAAC91D,aAAa,IAAI81D,KAAK,CAAC3kH,QAAQ,IAAI,CAAC,CAAC;IAC1E,CAAC;IAAAjK,MAAA,CAEOy/H,aAAa,GAArB,SAAQA,aAAaA,CACnBrM,WAAmB,EACnBpe,IAA4C,EAC5Che,uBAAiC,EACjC;EACA,IAAA,IAAIge,IAAI,EAAE;EACR,MAAA,IAAI,CAACgqB,gBAAgB,CAAChqB,IAAI,CAAC;EAC7B,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC1zC,aAAa,GAAG,IAAI,CAACwD,WAAW;EACvC,IAAA;MACA,IAAI,CAAC6zD,cAAc,GAAG,IAAI;EAE1B,IAAA,IAAMnqG,KAAK,GAAG,IAAI,CAACmtG,YAAY;MAC/B,IAAI,CAACntG,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA,IAAA,IAAM8F,GAAG,GAAG,IAAI,CAACA,GAAG;MACpB,IAAIA,GAAG,CAAC9F,KAAK,EAAE;QACb,IAAI,CAAC0qG,WAAW,EAAE;EACpB,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAACmD,eAAe,CAAC/nG,GAAG,EAAE9F,KAAK,CAAC;EAChC,MAAA,IAAIwoE,uBAAuB,EAAE;EAC3B,QAAA,IAAI,CAACipC,qBAAqB,CAAC7M,WAAW,EAAEp8B,uBAAuB,CAAC;EAClE,MAAA;EACF,IAAA;MACA,IAAI,CAACA,uBAAuB,EAAE;EAC5B;QACA,IAAI,CAACj3F,GAAG,CAACk4H,eAAe,CAAC,eAAe,EAAE7E,WAAW,CAAC,CAAC;QACvD,IAAI,CAACA,WAAW,GAAGA,WAAW;EAC9B,MAAA,IAAI,CAAC6M,qBAAqB,CAAC7M,WAAW,EAAEp8B,uBAAuB,CAAC;EAClE,IAAA;IACF,CAAC;IAAAh3F,MAAA,CAEOigI,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3B7M,WAAmB,EACnBp8B,uBAAiC,EACjC;EAAA,IAAA,IAAAkpC,qBAAA;EACA,IAAA,IAAM5rG,GAAG,GAAG,IAAI,CAACA,GAAG;EACpB,IAAA,IACE,CAACA,GAAG,CAAC6rG,cAAc,IACnB,CAAC7rG,GAAG,CAAC9F,KAAK,IACVvwB,IAAI,CAACQ,GAAG,CACN,CAAC,EAAAyhI,qBAAA,GAAA5rG,GAAG,CAACgC,qBAAqB,KAAA,IAAA,GAAA,MAAA,GAAzB4pG,qBAAA,CAA2B34H,KAAK,KAAI+sB,GAAG,CAAC9F,KAAK,CAAC+oC,WAAW,IACxD67D,WACJ,CAAC,GAAG,GAAG,EACP;EACA9+F,MAAAA,GAAG,CAACsP,SAAS,CAACwvF,WAAW,EAAEp8B,uBAAuB,CAAC;EACrD,IAAA,CAAC,MAAM,IAAI,CAAC1iE,GAAG,CAAC8rG,gBAAgB,EAAE;QAChC9rG,GAAG,CAACskC,eAAe,EAAE;EACvB,IAAA;EACF,EAAA;;EAEA;EAAA;EAAA54D,EAAAA,MAAA,CACQg5B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAAA,IAAA,IAAAqnG,eAAA;MAC1B,IAAI,CAACv8F,QAAQ,EAAE;MACf,CAAAu8F,eAAA,OAAI,CAACvL,QAAQ,aAAbuL,eAAA,CAAevsF,KAAK,EAAE;MACtB,IAAI,CAAC2nF,gBAAgB,EAAE;MACvB,IAAI,CAACC,kBAAkB,EAAE;MACzB,IAAI,CAAC9C,UAAU,GAAG,KAAK;MACvB,IAAI,CAACN,WAAW,GAAG,IAAI,CAAClF,WAAW,GAAG,EAAE;EACxC,IAAA,IAAI,CAACK,cAAc,GACjB,IAAI,CAAC0E,YAAY,GACjB,IAAI,CAACE,OAAO,GACZ,IAAI,CAACxzH,cAAc,GACjB,IAAI;EACR;EACA,IAAA,IAAI,CAACyvB,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;EAC7D,IAAA,IAAI,CAACjtE,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6F,aAAa,EAAE,IAAI,CAACwI,cAAc,EAAE,IAAI,CAAC;IAC9D,CAAC;IAAAvhG,MAAA,CAEO0jC,cAAc,GAAtB,SAAQA,cAAcA,CAACvJ,KAA2B,EAAEpvB,IAAsB,EAAE;MAC1E,IAAIA,IAAI,CAACV,KAAK,KAAK,EAAE,IAAI,CAAC,IAAI,CAACyqH,QAAQ,EAAE;EACvC;EACA,MAAA;EACF,IAAA;MACA,IAAMnB,IAAI,GAAG,IAAI,CAACr/F,GAAG,CAACxC,MAAM,CAAC/mB,IAAI,CAACV,KAAK,CAAC;EACxC,IAAA,IAAI,CAACspH,IAAI,CAAChoG,OAAO,EAAE;EACjB,MAAA;EACF,IAAA;EACA,IAAA,IAAM20G,gBAAgB,GAAAvuH,cAAA,CAAAA,cAAA,CAAA,EAAA,EAChB,IAAI,CAAC0hH,cAAc,IAAI,IAAI,CAAC0E,YAAY,CAAA,EAAA,EAAA,EAAA;EAC5CxE,MAAAA,IAAI,EAAJA;OAAI,CACL;MACD,IAAI,CAACF,cAAc,GAAG6M,gBAAgB;EACtC,IAAA,IAAI,CAACxL,QAAQ,CAACtB,2BAA2B,CACvC8M,gBAAgB,EAChB,IAAI,CAAChsG,GAAG,CAACrJ,MAAM,CAACs1G,yBAClB,CAAC;MAED,IAAI,CAAC,IAAI,CAAC3E,oBAAoB,IAAI,IAAI,CAAC9G,QAAQ,CAACxC,KAAK,EAAE;QACrD,IAAI,CAACwJ,UAAU,EAAE;EACnB,IAAA;IACF,CAAC;IAAA97H,MAAA,CAEO46H,mBAAmB,GAA3B,SAAQA,mBAAmBA,CACzBzgG,KAAiC,EACjCpvB,IAA2B,EAC3B;MACA,IAAMmD,KAAK,GAAG,IAAI,CAAComB,GAAG,CAACgQ,WAAW,CAACv5B,IAAI,CAAC1H,EAAE,CAAC;EAC3C,IAAA,IAAMm9H,iBAAiB,GAAG,IAAI,CAAC/M,cAAc;MAC7C,IAAI,CAAC+M,iBAAiB,EAAE;QACtB,IAAI,CAACrI,YAAY,GAAApmH,cAAA,CAAAA,cAAA,CAAA,EAAA,EAAQ,IAAI,CAAComH,YAAY,CAAA,EAAA,EAAA,EAAA;EAAEjqH,QAAAA,KAAK,EAALA;SAAK,CAAE;EACnD,MAAA;EACF,IAAA;EACA,IAAA,IAAMoyH,gBAAgB,GAAAvuH,cAAA,CAAAA,cAAA,KAAQyuH,iBAAiB,CAAA,EAAA,EAAA,EAAA;EAAEtyH,MAAAA,KAAK,EAALA;OAAK,CAAE;MACxD,IAAI,CAACulH,cAAc,GAAG6M,gBAAgB;IACxC,CAAC;IAAAtgI,MAAA,CAEOg7H,sBAAsB,GAA9B,SAAQA,sBAAsBA,CAC5B7gG,KAAoC,EACpCpvB,IAA8B,EAC9B;MACA,IAAM01H,SAAS,GAAG,IAAI,CAACnsG,GAAG,CAAC0pF,cAAc,CAACjzG,IAAI,CAAC1H,EAAE,CAAC;EAClD,IAAA,IAAMm9H,iBAAiB,GAAG,IAAI,CAAC/M,cAAc;MAC7C,IAAI,CAAC+M,iBAAiB,EAAE;QACtB,IAAI,CAACrI,YAAY,GAAApmH,cAAA,CAAAA,cAAA,CAAA,EAAA,EAAQ,IAAI,CAAComH,YAAY,CAAA,EAAA,EAAA,EAAA;EAAEsI,QAAAA,SAAS,EAATA;SAAS,CAAE;EACvD,MAAA;EACF,IAAA;EACA,IAAA,IAAMH,gBAAgB,GAAAvuH,cAAA,CAAAA,cAAA,KAAQyuH,iBAAiB,CAAA,EAAA,EAAA,EAAA;EAAEC,MAAAA,SAAS,EAATA;OAAS,CAAE;MAC5D,IAAI,CAAChN,cAAc,GAAG6M,gBAAgB;IACxC,CAAC;IAAAtgI,MAAA,CAEO41F,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3Bz7D,KAAmC,EACnCpvB,IAA6B,EAC7B;EACA,IAAA,IAAMsyF,WAAW,GAAG/qE,uBAAuB,CAACvnB,IAAI,CAAC;EACjD,IAAA,IAAI,CAAC22D,WAAW,CAAC19D,OAAO,CACtB,UAAA6F,IAAA,EAAA;EAAA,MAAA,IAAGyqB,GAAG,GAAAzqB,IAAA,CAAHyqB,GAAG;EAAA,MAAA,OACJA,GAAG,KAAKA,GAAG,CAAC8oE,cAAc,CAACryF,IAAI,CAAC,IAAIupB,GAAG,CAAC8oE,cAAc,CAACC,WAAW,CAAC,CAAC;EAAA,IAAA,CACxE,CAAC;IACH,CAAC;IAAAr9F,MAAA,CAEO86H,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3B3gG,KAAmC,EACnCpvB,IAA6B,EAC7B;EACA,IAAA,IAAM21H,cAAc,GAAGpuG,uBAAuB,CAACvnB,IAAI,CAAC;EACpD,IAAA,IAAI,CAAC22D,WAAW,CAAC19D,OAAO,CACtB,UAAAo3B,KAAA,EAAA;EAAA,MAAA,IAAG9G,GAAG,GAAA8G,KAAA,CAAH9G,GAAG;QAAA,OACJA,GAAG,KACFA,GAAG,CAACqsG,iBAAiB,CAAC51H,IAAI,CAAC,IACzBA,IAAI,CAAC1H,EAAE,KAAK,EAAE,IAAIixB,GAAG,CAACqsG,iBAAiB,CAACD,cAAc,CAAE,CAAC;EAAA,IAAA,CAChE,CAAC;IACH,CAAC;IAAA1gI,MAAA,CAEOuhG,cAAc,GAAtB,SAAQA,cAAcA,CAACpnE,KAA2B,EAAEpvB,IAAsB,EAAE;EAC1E,IAAA,IAAMlG,cAAc,GAAGkG,IAAI,CAACgM,MAAM;EAClC,IAAA,IAAIlS,cAAc,EAAE;QAClB,IAAI,CAACA,cAAc,GAAGA,cAAc;EACtC,IAAA;IACF,CAAC;IAAA7E,MAAA,CAEOgqC,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtB7P,KAA6B,EAC7BpvB,IAAwB,EACxB;MACA,IAAI,CAACmuH,WAAW,EAAE;IACpB,CAAC;IAAAl5H,MAAA,CAEOq2F,eAAe,GAAvB,SAAQA,eAAeA,CACrBl8D,KAA4B,EAC5BpvB,IAAuB,EACvB;EACA,IAAA,IAAM+5D,WAAW,GAAG,IAAI,CAACA,WAAW;MACpC,IACEA,WAAW,IACX,CAAC,IAAI,CAACu1D,UAAU,CAACv1D,WAAW,EAAE,IAAI,CAACxD,aAAa,CAAC,IACjD,CAAC,IAAI,CAACliB,cAAc,CAAC0lB,WAAW,CAAC,EACjC;EACA,MAAA,IAAMsuD,WAAW,GAAG,IAAI,CAACA,WAAW;QACpC,IAAI,CAACkF,WAAW,GAAGlF,WAAW;QAC9B,IAAI,CAAC8F,WAAW,EAAE;EACpB,IAAA;IACF,CAAC;EAAAl5H,EAAAA,MAAA,CAEOo7H,eAAe,GAAvB,SAAQA,eAAeA,CAACjhG,KAA6B,EAAE;EACrD,IAAA,IAAI,CAAC,IAAI,CAAC26F,QAAQ,EAAE;EAClB,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAMjB,kBAAkB,GAAG,IAAI,CAACiB,QAAQ,CAACzC,MAAM;MAC/C,IAAI,IAAI,CAACiG,WAAW,GAAGj6H,MAAM,CAACuiI,SAAS,IAAI/M,kBAAkB,EAAE;EAC7D,MAAA,KAAK,IAAIztH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGytH,kBAAkB,CAAC3uH,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAClD,QAAA,IAAMu7D,YAAY,GAAGkyD,kBAAkB,CAACztH,CAAC,CAAC;EAC1C,QAAA,IAAIu7D,YAAY,CAACxiB,GAAG,CAACN,IAAI,EAAE;EAAA,UAAA,IAAAgiF,qBAAA;YACzB,IAAMxH,aAAa,GAAG,IAAI,CAACvE,QAAQ,CAAC9B,cAAc,CAChDrxD,YAAY,CAAC/kB,UACf,CAAC;EACD,UAAA,IAAMo4D,IAAI,GAAA,CAAA6rB,qBAAA,GAAG,IAAI,CAAC/L,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAnBuO,qBAAA,CAAsBxH,aAAa,CAAC;EACjD,UAAA,IACE,IAAI,CAACj6E,cAAc,CAAC41D,IAAI,CAAC,IACzB,IAAI,CAACmpB,eAAe,CAACnpB,IAAI,EAAE,IAAI,CAAC1zC,aAAa,CAAC,EAC9C;EACA,YAAA,IAAI,CAACm8D,cAAc,CAACzoB,IAAI,EAAE,CAAC,CAAC;EAC9B,UAAA;EACA,UAAA;EACF,QAAA;EACF,MAAA;EACA,MAAA,IAAI,CAACsjB,WAAW,GAAGj6H,MAAM,CAACuiI,SAAS;EACrC,IAAA;IACF,CAAC;EAAA5gI,EAAAA,MAAA,CAEOk4D,YAAY,GAApB,SAAQA,YAAYA,CAAC/9B,KAAyB,EAAE;EAC9C,IAAA,IAAM2qC,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAI,CAAC,IAAI,CAAC00D,eAAe,IAAI10D,WAAW,EAAE;EACxC,MAAA,IAAMs0D,YAAY,GAAG,IAAI,CAACrG,aAAa,CAACjuD,WAAW,CAAC;EACpD,MAAA,IAAI,CAACy0D,mBAAmB,CAACH,YAAY,GAAG,CAAC,CAAC;EAC5C,IAAA,CAAC,MAAM;QACL,IAAI,CAACR,UAAU,GAAG,KAAK;EACzB,IAAA;IACF,CAAC;IAAA54H,MAAA,CAqHOo6H,UAAU,GAAlB,SAAQA,UAAUA,CAChB0G,YAAsB,EACtBz1F,IAAa,EACH;EAAA,IAAA,IAAA01F,eAAA;EACV;MACA,IAAMzO,KAAK,GAAA,CAAAyO,eAAA,GAAG,IAAI,CAACjM,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAbiM,eAAA,CAAezO,KAAK;MAClC,IAAIwO,YAAY,IAAIxO,KAAK,EAAE;QACzB,IAAM5kH,KAAK,GAAG,IAAI,CAACqlH,aAAa,CAAC+N,YAAY,EAAEz1F,IAAI,CAAC;EACpD,MAAA,OAAQinF,KAAK,CAAC5kH,KAAK,CAAC,IAAsB,IAAI;EAChD,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;IAAA1N,MAAA,CAEO26H,WAAW,GAAnB,SAAQA,WAAWA,CACjBqG,WAA4C,EAC5CC,gBAA0C,EAC1C;EAAA,IAAA,IAAA5lE,MAAA,GAAA,IAAA;MACA,IACE,IAAI,CAACjc,cAAc,CAAC4hF,WAAW,CAAC,IAChCA,WAAW,CAAC7mG,KAAK,CAACqnC,aAAa,IAC/By/D,gBAAgB,CAACx5H,GAAG,GAAGu5H,WAAW,CAACv5H,GAAG,GAAG,IAAI,EAC7C;QACAu5H,WAAW,CAAC7mG,KAAK,CAAC2zF,SAAS,CAAC9pH,OAAO,CAAC,UAAC4qH,KAAK,EAAElhH,KAAK,EAAK;UACpD,IAAIszH,WAAW,CAAC7mG,KAAK,CAACm0F,uBAAuB,CAAC5gH,KAAK,CAAC,EAAE;YACpD2tD,MAAI,CAACi/D,gBAAgB,CAAC1L,KAAK,CAAChyE,UAAU,EAAE,IAAI,CAAC;EAC/C,QAAA;EACF,MAAA,CAAC,CAAC;EACF,MAAA,IAAMskF,UAAU,GAAGF,WAAW,CAACv5H,GAAG,GAAG,IAAI;EACzC,MAAA,IAAM4uB,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CACxC,IAAI,CAACslG,YAAY,EACjBuF,UAAU,EACV,CACF,CAAC;EACD,MAAA,IACE7qG,UAAU,CAAC5uB,GAAG,GAAGy5H,UAAU,IAC3B,CAAC7qG,UAAU,CAACqkB,SAAS,IAAI,CAAC,IAAIwmF,UAAU,EACxC;EACA,QAAA,IAAI,CAACnhI,GAAG,CAAA,6BAAA,GACwBk3H,eAAe,CAAC+J,WAAW,CAAC,GAAA,QAAA,GAAS/J,eAAe,CAACgK,gBAAgB,CAAC,MACtG,CAAC;UACD,IAAMjqC,uBAAuB,GAAG,IAAI;UACpC,IAAI,CAACyoC,aAAa,CAACyB,UAAU,EAAE,IAAI,EAAElqC,uBAAuB,CAAC;EAC7D,QAAA,IAAI,CAACkT,gBAAgB,CAACg3B,UAAU,CAAC;EACnC,MAAA;EACF,IAAA;IACF,CAAC;IAAAlhI,MAAA,CAEOq6H,UAAU,GAAlB,SAAQA,UAAUA,CAChBhgF,CAA2B,EAC3BhkC,CAA8C,EACrC;MACT,OACE,CAAC,CAACA,CAAC,KACFgkC,CAAC,KAAKhkC,CAAC,IACLgkC,CAAC,CAAClgB,KAAK,IAAI9jB,CAAC,CAAC8jB,KAAK,IAAI,IAAI,CAACgkG,eAAe,CAAC9jF,CAAC,EAAEhkC,CAAC,CAAE,IACjD,CAACgkC,CAAC,CAAClgB,KAAK,IACP,CAAC9jB,CAAC,CAAC8jB,KAAK,IACR,IAAI,CAAC44F,aAAa,CAAC14E,CAAC,CAAC,KAAK,IAAI,CAAC04E,aAAa,CAAC18G,CAAC,CAAE,CAAC;IAEzD,CAAC;IAAArW,MAAA,CAEOm+H,eAAe,GAAvB,SAAQA,eAAeA,CACrB9jF,CAAgC,EAChChkC,CAA8C,EACrC;EAAA,IAAA,IAAA8qH,QAAA;MACT,OAAO,CAAC,CAAC9qH,CAAC,KAAKgkC,CAAC,KAAKhkC,CAAC,IAAIgkC,CAAC,CAAClgB,KAAK,CAACyiB,UAAU,MAAA,CAAAukF,QAAA,GAAK9qH,CAAC,CAAC8jB,KAAK,KAAA,IAAA,GAAA,MAAA,GAAPgnG,QAAA,CAASvkF,UAAU,CAAA,CAAC;IACvE,CAAC;IAAA58C,MAAA,CAEO+yH,aAAa,GAArB,SAAQA,aAAaA,CACnB/d,IAAqC,EACrC3pE,IAAa,EACL;EACR,IAAA,OAAO2pE,IAAI,IAAI,IAAI,CAAC8f,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC/B,aAAa,CAAC/d,IAAI,EAAE3pE,IAAI,CAAC,GAAG,EAAE;IAC7E,CAAC;EAAArrC,EAAAA,MAAA,CAEOw0H,cAAc,GAAtB,SAAQA,cAAcA,CAACC,WAAoB,EAAU;EAAA,IAAA,IAAA2M,eAAA;EAAA,IAAA,IAA9B3M,WAAoB,KAAA,MAAA,EAAA;EAApBA,MAAAA,WAAoB,GAAG,KAAK;EAAA,IAAA;EACjD,IAAA,IAAMhB,cAAc,GAAG,IAAI,CAACA,cAAc;MAC1C,IAAI,CAACA,cAAc,EAAE;EACnB,MAAA;EACF,IAAA;EACA,IAAA,CAAA2N,eAAA,GAAA,IAAI,CAACtM,QAAQ,aAAbsM,eAAA,CAAe5M,cAAc,CAACf,cAAc,EAAE,EAAE,EAAEgB,WAAW,CAAC;EAChE,EAAA;;EAEA;EAAA;EAAAz0H,EAAAA,MAAA,CACQk5H,WAAW,GAAnB,SAAQA,WAAWA,CAACrd,OAAiB,EAAE;EAAA,IAAA,IAAAwlB,eAAA;MACrC,IAAM/O,KAAK,GAAA,CAAA+O,eAAA,GAAG,IAAI,CAACvM,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAbuM,eAAA,CAAe/O,KAAK;MAClC,IAAI,CAACA,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EACA;EACA,IAAA,IAAMj8F,UAAU,GAAGujB,YAAY,CAACvjB,UAAU,CACxC,IAAI,CAACslG,YAAY,EACjB,IAAI,CAACvI,WAAW,EAChB,CACF,CAAC;EACD,IAAA,IAAIvX,OAAO,EAAE;EACX,MAAA,IAAI,CAACyc,WAAW,GAAG,IAAI,CAAClF,WAAW;EACrC,IAAA;EACAvX,IAAAA,OAAO,KAAPA,OAAO,GAAKxlF,UAAU,CAACrwB,GAAG,GAAG,CAAC,CAAA;MAC9B,IAAI,CAACs7H,iBAAiB,CAACjrG,UAAU,CAAC5uB,GAAG,EAAE6qH,KAAK,EAAEzW,OAAO,CAAC;IACxD,CAAC;IAAA77G,MAAA,CAEOshI,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvBvhG,SAAiB,EACjBuyF,KAAiC,EACjCiP,aAAuB,EACvB;EACA,IAAA,IAAMzM,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAMxzD,aAAa,GAAG,IAAI,CAACA,aAAa;MACxC,IAAI,IAAI,CAACg3D,WAAW,GAAGv4F,SAAS,IAAI,CAAC+0F,QAAQ,EAAE;EAC7C,MAAA;EACF,IAAA;EACA,IAAA,IAAIxC,KAAK,CAACptH,MAAM,KAAK,CAAC,IAAI,IAAI,CAACm1H,UAAU,CAAC/H,KAAK,CAAC,CAAC,CAAC,EAAEhxD,aAAa,CAAC,EAAE;QAClE,IAAI,CAACg3D,WAAW,GAAGv4F,SAAS;EAC5B,MAAA;EACF,IAAA;EACA,IAAA,IAAM+kC,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,IAAMs0D,YAAY,GAAG,IAAI,CAACrG,aAAa,CAACjuD,WAAW,CAAC;EACpD,IAAA,IAAI08D,cAAc,GAAG1M,QAAQ,CAAC5B,mBAAmB,CAACnzF,SAAS,CAAC;EAE5D,IAAA,IAAI,IAAI,CAACu4F,WAAW,GAAGv4F,SAAS,EAAE;EAAA,MAAA,IAAA0hG,qBAAA;EAChC,MAAA,IAAMC,cAAc,GAAG,IAAI,CAAC3O,aAAa,CAACzxD,aAAa,CAAC;EACxD,MAAA,IAAMqgE,iBAAiB,GAAG1jI,IAAI,CAAC+D,GAAG,CAAC0/H,cAAc,GAAG,CAAC,EAAEpP,KAAK,CAACptH,MAAM,GAAG,CAAC,CAAC;EACxE,MAAA,IAAM08H,gBAAgB,GAAGtP,KAAK,CAACqP,iBAAiB,CAAC;EACjD,MAAA,IACGH,cAAc,KAAK,EAAE,IACpBlgE,aAAa,IACbvhC,SAAS,IAAIuhC,aAAa,CAAC75D,GAAG,IAC/B,CAAAg6H,qBAAA,GAAAG,gBAAgB,CAACznG,KAAK,KAAA,IAAA,IAAtBsnG,qBAAA,CAAwBjgE,aAAa,IACpCzhC,SAAS,GAAG,IAAI,IAAI6hG,gBAAgB,CAACr6H,KAAM,EAC7C;EACAi6H,QAAAA,cAAc,GAAGG,iBAAiB;EACpC,MAAA;EACA,MAAA,IAAI,IAAI,CAACviF,cAAc,CAACkiB,aAAa,CAAC,EAAE;EACtC,QAAA,IAAMK,YAAY,GAAGL,aAAa,CAACnnC,KAAK;UACxC,IACEwnG,iBAAiB,GAAGvI,YAAY,GAAG,CAAC,IACpCz3D,YAAY,CAACH,aAAa,KAAK,KAAK,EACpC;EACA;EACA,UAAA;EACF,QAAA;UACA,IACEG,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM,KAAK,CAAC,IACnCy8D,YAAY,CAACosD,eAAe,EAC5B;EACA;EACA,UAAA;EACF,QAAA;EACF,MAAA;QACA,IAAI,CAACuK,WAAW,GAAGv4F,SAAS;EAC5B,MAAA,IAAIyhG,cAAc,GAAGE,cAAc,IAAIF,cAAc,GAAGpI,YAAY,EAAE;EACpE,QAAA,IAAI,CAACqE,cAAc,CAACmE,gBAAgB,CAAC;EACvC,MAAA,CAAC,MAAM;EACL;EACA,QAAA,IAAMj2G,OAAO,GAAG,IAAI,CAACq0G,cAAc;EACnC,QAAA,IACE,IAAI,CAAC7C,WAAW,IAChBxxG,OAAO,IACPoU,SAAS,GAAGpU,OAAO,CAAC6mC,IAAI,GAAG7mC,OAAO,CAAC00B,cAAc,IACjDuhF,gBAAgB,CAACr6H,KAAK,GACpBokB,OAAO,CAAC6mC,IAAI,GAAG,IAAI,CAACl+B,GAAG,CAACrJ,MAAM,CAAC42G,yBAAyB,IAC1D,IAAI,CAACziF,cAAc,CAACwiF,gBAAgB,CAAC,EACrC;YACA,IAAI,CAAC3C,aAAa,CAAC2C,gBAAgB,CAACznG,KAAK,EAAE,CAAC,CAAC;EAC/C,QAAA;EACF,MAAA;EACF,IAAA,CAAC,MAAM,IACLonG,aAAa,IACbz8D,WAAW,IACX,CAAC,IAAI,CAACu1D,UAAU,CAACv1D,WAAW,EAAExD,aAAa,CAAC,EAC5C;QACA,IAAIkgE,cAAc,KAAKpI,YAAY,EAAE;EACnC,QAAA,IAAI,CAACqE,cAAc,CAAC34D,WAAW,CAAC;EAClC,MAAA,CAAC,MAAM,IAAI08D,cAAc,KAAKpI,YAAY,GAAG,CAAC,EAAE;EAC9C,QAAA,IAAI,CAACqE,cAAc,CAACnL,KAAK,CAACkP,cAAc,CAAC,CAAC;EAC5C,MAAA;EACF,IAAA;IACF,CAAC;IAAAxhI,MAAA,CAEO++H,cAAc,GAAtB,SAAQA,cAAcA,CACpB/pB,IAAmC,EACnCxmF,KAA8B,EACrB;EAAA,IAAA,IAAAkuC,MAAA,GAAA,IAAA;EACT,IAAA,IAAMoxD,SAAS,GAAG9Y,IAAI,CAAC76E,KAAK,CAAC2zF,SAAS;EACtC,IAAA,IAAIA,SAAS,CAAC5oH,MAAM,KAAK,CAAC,EAAE;EAC1B,MAAA,OAAO,KAAK;EACd,IAAA;MACA,OAAO,CAAC8vG,IAAI,CAAC76E,KAAK,CAAC2zF,SAAS,CAAC1oH,IAAI,CAAC,UAACwpH,KAAK,EAAK;QAC3C,IAAM2L,MAAM,GAAG79D,MAAI,CAACu/D,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC;QACpD,OAAO,EAAC29E,MAAM,IAAA,IAAA,IAANA,MAAM,CAAE7J,oBAAoB,CAACliG,KAAK,CAAC,CAAA;EAC7C,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAxuB,EAAAA,MAAA,CAEOg/H,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBhqB,IAA8B,EACG;EAAA,IAAA,IAAAv3C,MAAA,GAAA,IAAA;EACjC,IAAA,IAAMqkE,aAAa,GAAG,IAAI,CAACxgE,aAAa;EACxC,IAAA,IAAMwzD,QAAQ,GAAG,IAAI,CAACA,QAAQ;MAE9B,IAAI,CAAC,IAAI,CAACuF,UAAU,CAACrlB,IAAI,EAAE8sB,aAAa,CAAC,IAAIhN,QAAQ,EAAE;EACrD,MAAA,IAAQxC,KAAK,GAAawC,QAAQ,CAA1BxC,KAAK;UAAED,MAAM,GAAKyC,QAAQ,CAAnBzC,MAAM;EACrB,MAAA,IAAI,CAACC,KAAK,IAAI,CAACD,MAAM,EAAE;EACrB,QAAA,OAAOyP,aAAa;EACtB,MAAA;EACA,MAAA,IAAM1iF,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC41D,IAAI,CAAC;EAChD,MAAA,IAAM4nB,eAAe,GAAG,IAAI,CAACrB,kBAAkB,EAAE;QACjD,IAAI,CAACj6D,aAAa,GAAG0zC,IAAI;QACzB,IAAI,CAACsjB,WAAW,GAAGr6H,IAAI,CAACsD,GAAG,CACzByzG,IAAI,CAACztG,KAAK,EACVtJ,IAAI,CAAC+D,GAAG,CAACgzG,IAAI,CAACvtG,GAAG,EAAE,IAAI,CAAC2rH,WAAW,CACrC,CAAC;EACD,MAAA,IAAM2O,aAAa,GAAGnF,eAAe,GACjCA,eAAe,CAACpkH,SAAS,GACzBspH,aAAa,GACXA,aAAa,CAACr6H,GAAG,GAAG,IAAI,CAAC2rH,WAAW,GACpC,CAAC;QACP,IAAI,CAACrzH,GAAG,CACN,qCAAA,GAAsCk3H,eAAe,CAACjiB,IAAI,CAAC,IACxD8sB,aAAa,UAAQC,aAAa,CAAC/pG,OAAO,CAAC,CAAC,CAAC,GAAA,aAAA,GAAgB,EAAE,CACpE,CAAC;EACD,MAAA,IAAI,CAAC,IAAI,CAACghG,gBAAgB,EAAE;EAC1B,QAAA,IAAI55E,cAAc,EAAE;EAClB,UAAA,IAAM4iF,WAAW,GAAGlN,QAAQ,CAACnG,cAAc,CACzC3Z,IAAI,CAAC76E,KAAK,EACV,IAAI,CAACm+F,WACP,CAAC;EACD;YACAtjB,IAAI,CAAC76E,KAAK,CAAC2zF,SAAS,CAAC9pH,OAAO,CAAC,UAAC4qH,KAAK,EAAExoH,CAAC,EAAK;cACzC,IAAMm0H,MAAM,GAAG98D,MAAI,CAACw+D,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC;EACpD,YAAA,IAAI29E,MAAM,EAAE;gBACV,IAAIn0H,CAAC,KAAK47H,WAAW,EAAE;kBACrBzH,MAAM,CAAC/J,UAAU,EAAE;EACrB,cAAA;gBACA+J,MAAM,CAAC3hE,eAAe,EAAE;EAC1B,YAAA;EACF,UAAA,CAAC,CAAC;EACJ,QAAA,CAAC,MAAM;EACL,UAAA,IAAI,CAACtkC,GAAG,CAACskC,eAAe,EAAE;EAC1B,UAAA,IAAI,CAAC8I,WAAW,CAAC19D,OAAO,CAAC,UAACu2H,MAAM,EAAA;EAAA,YAAA,OAAKA,MAAM,CAAC5hE,cAAc,EAAE;YAAA,CAAA,CAAC;EAC/D,QAAA;EACF,MAAA;QACA,IAAI,CAACrkC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACojI,kCAAkC,EAAE;EAC1D5P,QAAAA,MAAM,EAAEA,MAAM,CAAC50H,KAAK,CAAC,CAAC,CAAC;EACvBq3H,QAAAA,QAAQ,EAAExC,KAAK,CAAC70H,KAAK,CAAC,CAAC,CAAC;EACxBikI,QAAAA,cAAc,EAAE,IAAI,CAAC3O,aAAa,CAAC/d,IAAI,CAAC;EACxCokB,QAAAA,YAAY,EAAE,IAAI,CAACrG,aAAa,CAAC,IAAI,CAACjuD,WAAW;EACnD,OAAC,CAAC;EACJ,IAAA,CAAC,MAAM,IAAI,IAAI,CAACxD,aAAa,KAAK0zC,IAAI,EAAE;QACtC,IAAI,CAAC1zC,aAAa,GAAG0zC,IAAI;EAC3B,IAAA;EACA,IAAA,OAAO8sB,aAAa;IACtB,CAAC;IAAA9hI,MAAA,CAEOy9H,cAAc,GAAtB,SAAQA,cAAcA,CACpBzoB,IAA8B,EAC9BgY,cAAsB,EACtB;EAAA,IAAA,IADAA,cAAsB,KAAA,MAAA,EAAA;EAAtBA,MAAAA,cAAsB,GAAG,CAAC;EAAA,IAAA;EAE1B,IAAA,IAAM8U,aAAa,GAAG,IAAI,CAAC9C,gBAAgB,CAAChqB,IAAI,CAAC;MACjD,IAAI,IAAI,CAACgkB,gBAAgB,EAAE;EACzB,MAAA;EACF,IAAA;EACA,IAAA,IAAI,IAAI,CAAC55E,cAAc,CAAC41D,IAAI,CAAC,EAAE;EAC7B;EACA,MAAA,IAAI,CAACsoB,eAAe,CAACtoB,IAAI,EAAEgY,cAAc,CAAC;EAC5C,IAAA,CAAC,MAAM,IAAI8U,aAAa,KAAK,IAAI,EAAE;EACjC;QACA,IAAI,CAACnJ,cAAc,GAAG,IAAI;EAC1B,MAAA,IAAMP,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,MAAA,IAAIA,YAAY,EAAE;UAChB,IAAIA,YAAY,CAACp4B,WAAW,EAAE;YAC5B,IAAMhJ,uBAAuB,GAAG,IAAI;YACpC,IAAI,CAACyoC,aAAa,CAACzqB,IAAI,CAACztG,KAAK,EAAEytG,IAAI,EAAEhe,uBAAuB,CAAC;EAC/D,QAAA,CAAC,MAAM;EACL,UAAA,IAAI,CAACkrC,cAAc,CAACltB,IAAI,CAAC;EAC3B,QAAA;EACF,MAAA,CAAC,MAAM;EACL;EACA,QAAA,IAAI,CAACktB,cAAc,CAACltB,IAAI,CAAC;EAC3B,MAAA;EACF,IAAA;IACF,CAAC;EAAAh1G,EAAAA,MAAA,CAEOkiI,cAAc,GAAtB,SAAQA,cAAcA,CAACltB,IAAqC,EAAE;EAC5D,IAAA,IAAMtnG,KAAK,GAAG,IAAI,CAACqlH,aAAa,CAAC/d,IAAI,CAAC;MACtC,IAAMoe,WAAW,GAAG,IAAI,CAACyM,oBAAoB,CAAC7qB,IAAI,EAAEtnG,KAAK,CAAC;EAC1D,IAAA,IAAI,CAACuyH,qBAAqB,CAAC7M,WAAW,CAAC;IACzC,CAAC;IAAApzH,MAAA,CAEOs9H,eAAe,GAAvB,SAAQA,eAAeA,CACrBtoB,IAAmC,EACnCgY,cAAsB,EACtB;EACA,IAAA,IAAMrrD,YAAY,GAAGqzC,IAAI,CAAC76E,KAAK;EAC/B,IAAA,IAAMgoG,WAAW,GACfxgE,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM,KAAK,CAAC,IAAI,CAACy8D,YAAY,CAACosD,eAAe;EACtE,IAAA,IAAMqU,QAAQ,GAAGzgE,YAAY,CAACxiB,GAAG,CAACL,IAAI;EACtC,IAAA,IAAIqjF,WAAW,IAAI,CAACC,QAAQ,EAAE;EAC5B;QACA,IAAM7H,MAAM,GAAG,IAAI,CAAC0E,aAAa,CAACt9D,YAAY,EAAEqrD,cAAc,CAAC;EAC/D,MAAA,IAAIuN,MAAM,IAAA,IAAA,IAANA,MAAM,CAAE54D,YAAY,CAACH,aAAa,EAAE;EACtC,QAAA,IAAMhzC,KAAK,GAAG,IAAI,CAACmtG,YAAY;EAC/B,QAAA,IAAIntG,KAAK,EAAE;EACT,UAAA,IAAI,CAAC6zG,iBAAiB,CAAC9H,MAAM,EAAE/rG,KAAK,CAAC;EACvC,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;IAAAxuB,MAAA,CAEOi/H,aAAa,GAArB,SAAQA,aAAaA,CACnBt9D,YAA+B,EAC/BqrD,cAAsB,EACC;EACvB,IAAA,IAAM3gG,GAAG,GAAGs1C,YAAY,CAAC2gE,QAAQ;EACjC,IAAA,IAAMlD,eAAe,GAAGz9D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM;MACrD,IAAMi9H,WAAW,GAAG/C,eAAe,KAAK,CAAC,IAAI,CAACz9D,YAAY,CAACosD,eAAe;EAC1E,IAAA,IAAMqU,QAAQ,GAAGzgE,YAAY,CAACxiB,GAAG,CAACL,IAAI;EACtC,IAAA,IAAIqjF,WAAW,EAAE;EACf,MAAA,IAAMrpE,aAAa,GAAG6I,YAAY,CAAC7I,aAAa;QAChD,IAAI6I,YAAY,CAACH,aAAa,EAAE;EAAA,QAAA,IAAA+gE,qBAAA;EAC9B,QAAA,IAAMz9D,WAAW,GAAG,IAAI,CAACA,WAAW;UACpC,IACE,CAAC,IAAI,CAAC1lB,cAAc,CAAC0lB,WAAW,CAAC,IACjC,CAAAA,WAAW,IAAA,IAAA,IAAA,CAAAy9D,qBAAA,GAAXz9D,WAAW,CAAErD,SAAS,KAAA,IAAA,GAAA,MAAA,GAAtB8gE,qBAAA,CAAwB3lF,UAAU,MAAK+kB,YAAY,CAAC/kB,UAAU,EAC9D;EACA,UAAA,IAAI,CAACstD,gBAAgB,CAACpxC,aAAa,GAAG,IAAI,CAAC;EAC7C,QAAA;EACF,MAAA;EACA,MAAA,IAAIs+D,cAAc;QAClB,IAAIoL,iBAAiB,GAAG,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC19D,WAAW,IAAI,IAAI,CAACq4D,WAAW,EAAE;EACzCqF,QAAAA,iBAAiB,GAAG,IAAI,CAACluG,GAAG,CAACuP,aAAa;EAC1C,QAAA,IAAI2+F,iBAAiB,KAAK,EAAE,EAAE;EAC5BA,UAAAA,iBAAiB,GAAG,IAAI,CAACluG,GAAG,CAACksC,gBAAgB,IAAI,CAAC;EACpD,QAAA;EACF,MAAA;EACA,MAAA,IACEgiE,iBAAiB,IACjB,EAAE7gE,YAAY,CAACxiB,GAAG,CAACP,GAAG,IAAI+iB,YAAY,CAACxiB,GAAG,CAACN,IAAI,CAAC,EAChD;EACA,QAAA,IAAMmc,WAAW,GAAGwnE,iBAAiB,GAAG1pE,aAAa;UACrD,IAAIkC,WAAW,GAAG,CAAC,EAAE;YACnBo8D,cAAc,GAAGn5H,IAAI,CAAC24B,KAAK,CAACokC,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI;EACxD,QAAA;EACF,MAAA;QACA,IAAI,CAACj7D,GAAG,CAAA,0BAAA,IACqBitH,cAAc,GAAG,CAAC,CAAA,GAAA,GAAA,IAAI3gG,GAAG,GAAG,CAAC,GAAG+yG,eAAe,CAAA,GAAA,GAAA,GAAIz9D,YAAY,IACxFy1D,cAAc,GAAA,eAAA,GACMoL,iBAAiB,uBAAkBpL,cAAc,GACjE,EAAE,CAEV,CAAC;EACD,MAAA,IAAI/qG,GAAG,EAAE;EACP,QAAA,OAAO,IAAI,CAACo2G,WAAW,CACrB9gE,YAAY,EACZ,CAAC,EACD,CAAC,EACD7I,aAAa,EACb6I,YAAY,CAAC13D,QAAQ,EACrBoiB,GACF,CAAC;EACH,MAAA;QACA,IAAM0hG,eAAe,GAAG,IAAI,CAACA,eAAe,CAACoJ,aAAa,CACxDx1D,YAAY,EACZy1D,cACF,CAAC;EACD,MAAA,IAAIrJ,eAAe,EAAE;UACnBpsD,YAAY,CAACosD,eAAe,GAAGA,eAAe;EAChD,MAAA;EACF,IAAA,CAAC,MAAM,IAAI,CAACqU,QAAQ,IAAIhD,eAAe,EAAE;EACvC;QACA,KAAK,IAAIh5H,CAAC,GAAG4mH,cAAc,EAAE5mH,CAAC,GAAGg5H,eAAe,EAAEh5H,CAAC,EAAE,EAAE;EACrD,QAAA,IAAMwoH,MAAK,GAAGjtD,YAAY,CAACmsD,SAAS,CAAC1nH,CAAC,CAAC;UACvC,IAAMs8H,WAAW,GAAG,IAAI,CAACC,wBAAwB,CAAC/T,MAAK,CAAChyE,UAAU,CAAC;EACnE,QAAA,IACE,CAAC8lF,WAAW,KAAK,EAAE,IAAI,IAAI,CAAChhE,WAAW,CAACghE,WAAW,CAAC,CAACvD,SAAS,KAC9D,CAACvQ,MAAK,CAAC1xH,KAAK,EACZ;YACA,IAAI,CAACmiI,iBAAiB,CAAC19D,YAAY,EAAEitD,MAAK,EAAExoH,CAAC,CAAC;EAChD,QAAA;EACF,MAAA;EACA,MAAA,IAAMwoH,KAAK,GAAGjtD,YAAY,CAACmsD,SAAS,CAACd,cAAc,CAAC;EACpD;EACA,MAAA,IAAI4B,KAAK,EAAE;UACT,IAAM2L,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC;EACpD,QAAA,IAAI29E,MAAM,EAAE;YACVA,MAAM,CAAC/J,UAAU,EAAE;EACrB,QAAA;EACA,QAAA,OAAO+J,MAAM;EACf,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAAv6H,EAAAA,MAAA,CAEOkqG,gBAAgB,GAAxB,SAAQA,gBAAgBA,CAAClvC,WAAmB,EAAE;EAAA,IAAA,IAAAmJ,MAAA,GAAA,IAAA;EAC5C;EACA,IAAA,IAAMt/D,cAAc,GAAG,IAAI,CAACA,cAAc;MAC1C,IAAI,CAACA,cAAc,EAAE;EACnB,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAC9E,GAAG,CAAA,oCAAA,GAAsCi7D,WAAa,CAAC;EAC5D,IAAA,IAAM4nE,iBAAiB,GAAG79H,MAAM,CAAChB,IAAI,CAACc,cAAc,CAAC;EACrD+9H,IAAAA,iBAAiB,CAAC5+H,OAAO,CAAC,UAACZ,IAAsB,EAAK;QACpD+gE,MAAI,CAAC7vC,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACs8D,eAAe,EAAE;EACvCH,QAAAA,WAAW,EAAXA,WAAW;EACXC,QAAAA,SAAS,EAAEpiD,QAAQ;EACnBzV,QAAAA,IAAI,EAAJA;EACF,OAAC,CAAC;EACJ,IAAA,CAAC,CAAC;EACJ,EAAA;;EAEA;EAAA;EAAApD,EAAAA,MAAA,CACQ2iI,wBAAwB,GAAhC,SAAQA,wBAAwBA,CAACnI,OAA4B,EAAU;EACrE,IAAA,IAAM94D,WAAW,GAAG,IAAI,CAACA,WAAW;EACpC,IAAA,KAAK,IAAIt7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGs7D,WAAW,CAACx8D,MAAM,EAAEkB,CAAC,EAAE,EAAE;QAC3C,IAAIo0H,OAAO,KAAK94D,WAAW,CAACt7D,CAAC,CAAC,CAACo0H,OAAO,EAAE;EACtC,QAAA,OAAOp0H,CAAC;EACV,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;EAAApG,EAAAA,MAAA,CAEOi8H,cAAc,GAAtB,SAAQA,cAAcA,CAACzB,OAA4B,EAAyB;EAC1E,IAAA,IAAM9sH,KAAK,GAAG,IAAI,CAACi1H,wBAAwB,CAACnI,OAAO,CAAC;EACpD,IAAA,OAAO,IAAI,CAAC94D,WAAW,CAACh0D,KAAK,CAAC,IAAI,IAAI;IACxC,CAAC;EAAA1N,EAAAA,MAAA,CAEOu7H,kBAAkB,GAA1B,SAAQA,kBAAkBA,GAA0B;EAClD,IAAA,IAAQ75D,WAAW,GAAmB,IAAI,CAAlCA,WAAW;QAAEi6D,YAAY,GAAK,IAAI,CAArBA,YAAY;EACjC,IAAA,IAAIA,YAAY,EAAE;EAChB,MAAA,KAAK,IAAIv1H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGs7D,WAAW,CAACx8D,MAAM,EAAEkB,CAAC,EAAE,EAAE;UAC3C,IAAIs7D,WAAW,CAACt7D,CAAC,CAAC,CAACooB,KAAK,KAAKmtG,YAAY,EAAE;YACzC,OAAOj6D,WAAW,CAACt7D,CAAC,CAAC;EACvB,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAApG,EAAAA,MAAA,CAEOyiI,WAAW,GAAnB,SAAQA,WAAWA,CACjB9gE,YAA+B,EAC/BqrD,cAAsB,EACtBhyD,WAAmB,EACnBlC,aAAqB,EACrB7uD,QAAgB,EAChBoiB,GAAW,EACK;EAChB,IAAA,IAAMujG,SAAgC,GAAG;QACvCgC,gBAAgB,EAAEjwD,YAAY,CAAC/kB,UAAU;QACzCA,UAAU,EAAEmwE,uBAAuB,CAACprD,YAAY,EAAEt1C,GAAG,EAAE2gG,cAAc,CAAC;EACtE/iH,MAAAA,QAAQ,EAARA,QAAQ;EACR+wD,MAAAA,WAAW,EAAXA,WAAW;EACXlC,MAAAA,aAAa,EAAbA,aAAa;EACbzsC,MAAAA,GAAG,EAAHA;OACD;MACD,OAAO,IAAI,CAACgzG,iBAAiB,CAAC19D,YAAY,EAAEiuD,SAAS,EAAE5C,cAAc,CAAC;IACxE,CAAC;IAAAhtH,MAAA,CAEOq/H,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvB19D,YAA+B,EAC/BiuD,SAAgC,EAChC5C,cAAsB,EACN;EAAA,IAAA,IAAA/oB,MAAA,GAAA,IAAA;EAChB,IAAA,IAAMuuB,OAAO,GAAG,IAAI,CAACl+F,GAAG;EACxB,IAAA,IAAMq7F,UAAU,GAAG6C,OAAO,CAAC7C,UAAU;EACrC,IAAA,IAAIhhG,eAAe,GAAGghG,UAAU,CAAChhG,eAAe;EAChD,IAAA,IAAMiF,YAAY,GAChB4+F,OAAO,CAACh+F,YAAY,IAAIg+F,OAAO,CAAC1gG,MAAM,CAAC0gG,OAAO,CAAC5+F,YAAY,CAAC;EAC9D;MACA,IAAIjF,eAAe,IAAIiF,YAAY,EAAE;EACnCjF,MAAAA,eAAe,GAAGzrB,QAAA,CAAc,EAAE,EAAEyrB,eAAe,CAAC;QACpD,IAAIiF,YAAY,CAACzP,UAAU,EAAE;EAC3BwK,QAAAA,eAAe,CAACxK,UAAU,GAAGyP,YAAY,CAACzP,UAAU;EACtD,MAAA;EACA;QACA,IAAIyP,YAAY,CAACtL,UAAU,EAAE;EAC3BqG,QAAAA,eAAe,CAACE,kBAAkB,GAAG,CAAC+E,YAAY,CAACtL,UAAU,CAAC;EAChE,MAAA;EACF,IAAA;MACA,IAAMu6G,aAAa,GAAGrQ,OAAO,CAACluF,WAAW,CAACkuF,OAAO,CAAC/nG,UAAU,CAAC;MAC7D,IAAMq4G,gBAAgB,GAAGtQ,OAAO,CAACxU,cAAc,CAACwU,OAAO,CAAC12B,aAAa,CAAC;MACtE,IAAIj4D,aAAa,GAAG,CAAC;EACrB,IAAA,IAAI,IAAI,CAACs5F,WAAW,IAAIx7D,YAAY,CAACH,aAAa,EAAE;QAClD,IAAMuhE,aAAa,GAAG,IAAI,CAAC3P,WAAW,GAAGxD,SAAS,CAAC92D,aAAa;QAChE,IAAIiqE,aAAa,GAAG,CAAC,EAAE;EACrB,QAAA,IAAM94H,QAAQ,GAAG2lH,SAAS,CAAC3lH,QAAQ;EACnC,QAAA,IAAIA,QAAQ,IAAI84H,aAAa,GAAG94H,QAAQ,EAAE;EACxC45B,UAAAA,aAAa,GAAGk/F,aAAa;EAC/B,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,IAAMvI,OAAO,GAAG5K,SAAS,CAAChzE,UAAU;EACpC,IAAA,IAAMomF,YAAkC,GAAAjxH,cAAA,CAAAA,cAAA,KACnC49G,UAAU,CAAA,EAAA,EAAA,EAAA;EACb/vD,MAAAA,kBAAkB,EAAE3hE,IAAI,CAAC+D,GAAG,CAAC,GAAG,EAAEwwH,OAAO,CAACvnG,MAAM,CAAC20C,kBAAkB,CAAC;EACpEzG,MAAAA,aAAa,EAAE,IAAI;EACnBi+B,MAAAA,iBAAiB,EAAE,IAAI;QACvBq5B,gBAAgB,EAAE+B,OAAO,CAAC5V,SAAS;EACnCqmB,MAAAA,aAAa,EAAEzI,OAAO;QACtB7hG,sBAAsB,EAAE65F,OAAO,CAACtV,iBAAiB;EACjDj4C,MAAAA,uBAAuB,EAAE7gE,SAAS;EAClCy/B,MAAAA,aAAa,EAAbA,aAAa;EACb+mE,MAAAA,oBAAoB,EAAE,KAAK;EAC3Bs4B,MAAAA,aAAa,EAAE,KAAK;EACpBv0G,MAAAA,eAAe,EAAfA,eAAe;EACfrH,MAAAA,eAAe,EACZu7G,aAAa,IACdlT,UAAU,CAACroG,eAAe;EAC5B67G,MAAAA,kBAAkB,EACfL,gBAAgB,IACjBnT,UAAU,CAACwT;OAAkB,CAChC;EACD;MACA,IAAIxhE,YAAY,CAACH,aAAa,EAAE;QAC9BG,YAAY,CAAC0rD,oBAAoB,GAAG,IAAI;QACxC,IAAIuC,SAAS,CAAC92D,aAAa,EAAE;EAC3BkqE,QAAAA,YAAY,CAACjqE,cAAc,GAAG62D,SAAS,CAAC92D,aAAa;EACvD,MAAA;EACF,IAAA;EACA,IAAA,IAAMw/C,IAAI,GAAG0qB,YAAY,CAAC1qB,IAAI;MAC9B,IAAIA,IAAI,YAAJA,IAAI,CAAEsE,SAAS,IAAItE,IAAI,CAACuE,SAAS,EAAE;QACrCmmB,YAAY,CAAC1qB,IAAI,GAAGp1G,QAAA,CAAc,EAAE,EAAEo1G,IAAI,EAAE;EAC1CuE,QAAAA,SAAS,EAAE5D,IAAI,CAAC2W,SAAS,CAACvjG,GAAG;EAC/B,OAAC,CAAC;EACJ,IAAA;EACA,IAAA,IAAI,IAAI,CAAC4vG,cAAc,CAACzB,OAAO,CAAC,EAAE;EAChC,MAAA,IAAI,CAAC73H,IAAI,CAAA,kCAAA,GAC4Bg/D,YAAY,GAAA,aAAA,GAAc64D,OAC/D,CAAC;EACH,IAAA;EACA,IAAA,IAAMD,MAAM,GAAG,IAAI9K,cAAc,CAC/B,IAAI,CAACC,cAAc,EACnBsT,YAAY,EACZrhE,YAAY,EACZiuD,SACF,CAAC;EACD,IAAA,IAAI,CAACluD,WAAW,CAAC3yD,IAAI,CAACwrH,MAAM,CAAC;EAC7B54D,IAAAA,YAAY,CAACmsD,SAAS,CAACd,cAAc,CAAC,GAAG4C,SAAS;EAClD;MACA,IAAIwT,eAAe,GAAG,IAAI;EAC1B,IAAA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAI13G,OAAqB,EAAK;QAC1D,IAAIA,OAAO,CAACuL,IAAI,EAAE;EAAA,QAAA,IAAAosG,eAAA;EAChB,QAAA,IAAMpmI,KAAK,GAAG,IAAIgrB,KAAK,CAAA,mCAAA,GACey5C,YACtC,CAAC;EACD,QAAA,IAAMxpB,SAAoB,GAAG;EAC3B7d,UAAAA,KAAK,EAAE,IAAI;YACXl3B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;YAC5BpyC,OAAO,EAAE/sB,YAAY,CAAC2kI,6BAA6B;EACnDrmI,UAAAA,KAAK,EAALA;WACD;EACD,QAAA,IAAMm8H,aAAa,GACjB,CAAA,CAAAiK,eAAA,GAAAr/B,MAAI,CAAC6wB,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAbwO,eAAA,CAAetQ,cAAc,CAACrxD,YAAY,CAAC/kB,UAAU,CAAC,KAAI,EAAE;EAC9DqnD,QAAAA,MAAI,CAACu/B,oBAAoB,CACvBrrF,SAAS,EACTwpB,YAAY,EACZ03D,aAAa,EACbrM,cAAc,EACd9vH,KAAK,CAACsrC,OACR,CAAC;EACD,QAAA;EACF,MAAA;EACA;QACA,IAAMv+B,QAAQ,GAAG0hB,OAAO,CAAC6mC,IAAI,GAAG7mC,OAAO,CAACy2B,aAAa;EACrD,MAAA,IAAMqhF,oBAAoB,GAAG7T,SAAS,CAAC3lH,QAAQ;QAC/C,IACEm5H,eAAe,IACfK,oBAAoB,KAAK,IAAI,IAC7Bx5H,QAAQ,GAAGw5H,oBAAoB,EAC/B;EACAL,QAAAA,eAAe,GAAG,KAAK;UACvBn/B,MAAI,CAAClkG,GAAG,CAAA,uBAAA,GACiBy6H,OAAO,2BAAqBiJ,oBAAoB,GAAA,KAAA,GAAMx5H,QAC/E,CAAC;UACD2lH,SAAS,CAAC3lH,QAAQ,GAAGA,QAAQ;EAC7B;UACAg6F,MAAI,CAACuwB,cAAc,EAAE;EACvB,MAAA;MACF,CAAC;MACD+F,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAAC4kC,aAAa,EAAE,UAACtJ,KAAK,EAAA2N,KAAA,EAAA;EAAA,MAAA,IAAInc,OAAO,GAAAmc,KAAA,CAAPnc,OAAO;QAAA,OAC/C03G,wBAAwB,CAAC13G,OAAO,CAAC;EAAA,IAAA,CACnC,CAAC;MACD4uG,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAACwlE,iBAAiB,EAAE,UAAClqC,KAAK,EAAAi+D,KAAA,EAAA;EAAA,MAAA,IAAIzsE,OAAO,GAAAysE,KAAA,CAAPzsE,OAAO;QAAA,OACnD03G,wBAAwB,CAAC13G,OAAO,CAAC;EAAA,IAAA,CACnC,CAAC;EACD4uG,IAAAA,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAACo8H,eAAe,EAAE,YAAA;EAAA,MAAA,OAAMh3B,MAAI,CAACi3B,sBAAsB,EAAE;MAAA,CAAA,CAAC;MACtE,IAAM35B,eAAc,GAAG,SAAjBA,cAAcA,CAClBpnE,KAA2B,EAC3BpvB,IAAsB,EACnB;EACH,MAAA,IAAM24H,YAAY,GAAGz/B,MAAI,CAACg4B,cAAc,CAACzB,OAAO,CAAC;EACjD,MAAA,IAAIkJ,YAAY,IAAI34H,IAAI,CAACgM,MAAM,EAAE;UAC/B2sH,YAAY,CAACxpG,GAAG,CAACr7B,MAAM,CAACk6F,aAAa,EAAEwI,eAAc,CAAC;EACtDmiC,QAAAA,YAAY,CAAC3sH,MAAM,GAAGhM,IAAI,CAACgM,MAAM;EACjC,QAAA,IAAMyX,KAAK,GAAGy1E,MAAI,CAAC03B,YAAY;EAC/B,QAAA,IACE13B,MAAI,CAAC00B,cAAc,KAAK+K,YAAY,CAAC9T,SAAS,IAC9CphG,KAAK,IACL,CAACk1G,YAAY,CAACl1G,KAAK,EACnB;EACAy1E,UAAAA,MAAI,CAACo+B,iBAAiB,CAACqB,YAAY,EAAEl1G,KAAK,CAAC;EAC7C,QAAA;EACF,MAAA;MACF,CAAC;MACD+rG,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAACk6F,aAAa,EAAEwI,eAAc,CAAC;EAC/C,IAAA,IAAMovB,aAAa,GAAG,SAAhBA,aAAaA,GAAS;EAAA,MAAA,IAAAgT,qBAAA;EAC1B,MAAA,IAAMD,YAAY,GAAGz/B,MAAI,CAACg4B,cAAc,CAACzB,OAAO,CAAC;EACjDv2B,MAAAA,MAAI,CAAClkG,GAAG,CAAA,2BAAA,GAA6B2jI,YAAc,CAAC;EACpD,MAAA,IAAI,CAACA,YAAY,IAAI,CAACz/B,MAAI,CAAC6wB,QAAQ,EAAE;EACnC,QAAA;EACF,MAAA;EACA;QACA,IAAMuE,aAAa,GAAGp1B,MAAI,CAAC6wB,QAAQ,CAAC9B,cAAc,CAChDrxD,YAAY,CAAC/kB,UACf,CAAC;EACD,MAAA,IAAMo4D,IAAI,GAAA,CAAA2uB,qBAAA,GAAG1/B,MAAI,CAAC6wB,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAnBqR,qBAAA,CAAsBtK,aAAa,CAAC;EACjD,MAAA,IAAIp1B,MAAI,CAAC7kD,cAAc,CAAC41D,IAAI,CAAC,EAAE;EAC7B/Q,QAAAA,MAAI,CAACm5B,qBAAqB,CAACpoB,IAAI,EAAE4a,SAAS,CAAC;EAC7C,MAAA;MACF,CAAC;MACD2K,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAACmqG,eAAe,EAAE2nB,aAAa,CAAC;EAChD,IAAA,IAAMiT,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIrV,UAAU,EAAK;EAC1C,MAAA,OAAO,YAAM;EACX,QAAA,IAAMmV,YAAY,GAAGz/B,MAAI,CAACg4B,cAAc,CAACzB,OAAO,CAAC;EACjD,QAAA,IAAI,CAACkJ,YAAY,IAAI,CAACz/B,MAAI,CAAC6wB,QAAQ,EAAE;EACnC,UAAA;EACF,QAAA;UACA7wB,MAAI,CAAC20B,UAAU,GAAG,IAAI;UACtB,IAAMS,aAAa,GAAGp1B,MAAI,CAAC6wB,QAAQ,CAAC9B,cAAc,CAChDrxD,YAAY,CAAC/kB,UACf,CAAC;UACDqnD,MAAI,CAACy5B,sBAAsB,CAAC/7D,YAAY,EAAE03D,aAAa,EAAE9K,UAAU,CAAC;QACtE,CAAC;MACH,CAAC;MACDgM,MAAM,CAACz7E,IAAI,CAACjgD,MAAM,CAACw8H,WAAW,EAAEuI,mBAAmB,CAAC5W,cAAc,CAAC,CAAC;MACpEuN,MAAM,CAACz7E,IAAI,CAACjgD,MAAM,CAACsxH,qBAAqB,EAAEyT,mBAAmB,CAAC/qH,QAAQ,CAAC,CAAC;MACxE0hH,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,UAACI,KAAmB,EAAEpvB,IAAe,EAAK;EAChE,MAAA,IAAI,CAACk5F,MAAI,CAAC6wB,QAAQ,EAAE;EAClB,QAAA;EACF,MAAA;EACA,MAAA,IAAM4O,YAAY,GAAGz/B,MAAI,CAACg4B,cAAc,CAACzB,OAAO,CAAC;EACjD,MAAA,IAAIzvH,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC6nC,oBAAoB,EAAE;EACtD,QAAA,IAAIi9F,YAAY,IAAA,IAAA,IAAZA,YAAY,CAAEliE,aAAa,EAAE;EAC/ByiC,UAAAA,MAAI,CAAC4/B,kBAAkB,CAACliE,YAAY,CAAC;EACrC,UAAA;EACF,QAAA;UACAsiC,MAAI,CAAC41B,YAAY,EAAE;EACnB51B,QAAAA,MAAI,CAACi1B,WAAW,CAAC,IAAI,CAAC;EACtB,QAAA;EACF,MAAA;QACAj1B,MAAI,CAACu/B,oBAAoB,CACvBz4H,IAAI,EACJ42D,YAAY,EACZsiC,MAAI,CAAC6wB,QAAQ,CAAC9B,cAAc,CAACrxD,YAAY,CAAC/kB,UAAU,CAAC,EACrDowE,cAAc,EAAA,qBAAA,GACQjiH,IAAI,CAAC7N,KAAK,GAAA,GAAA,GAAIykE,YACtC,CAAC;EACH,IAAA,CAAC,CAAC;EACF44D,IAAAA,MAAM,CAACzhG,EAAE,CAACj6B,MAAM,CAAC0kH,UAAU,EAAE,YAAM;EACjC,MAAA,IAAMmgB,YAAY,GAAGz/B,MAAI,CAACg4B,cAAc,CAACzB,OAAO,CAAC;EACjD,MAAA,IAAI,CAACkJ,YAAY,IAAI,CAACz/B,MAAI,CAAC6wB,QAAQ,EAAE;EACnC,QAAA;EACF,MAAA;EACA,MAAA,IAAM53H,KAAK,GAAG,IAAIgrB,KAAK,CAAA,sCAAA,GAAwCsyG,OAAS,CAAC;EACzE,MAAA,IAAMriF,SAAoB,GAAG;EAC3B7d,QAAAA,KAAK,EAAE,IAAI;UACXl3B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;UAC5BpyC,OAAO,EAAE/sB,YAAY,CAAC2kI,6BAA6B;EACnDrmI,QAAAA,KAAK,EAALA;SACD;QACD+mG,MAAI,CAACu/B,oBAAoB,CACvBrrF,SAAS,EACTwpB,YAAY,EACZsiC,MAAI,CAAC6wB,QAAQ,CAAC9B,cAAc,CAACrxD,YAAY,CAAC/kB,UAAU,CAAC,EACrDowE,cAAc,EACd9vH,KAAK,CAACsrC,OACR,CAAC;EACH,IAAA,CAAC,CAAC;EACF,IAAA,IAAI,CAACzoC,GAAG,CAAA,oCAAA,GAC+ByvH,kBAAkB,CAACI,SAAS,CACnE,CAAC;MACD,IAAI,CAACt7F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACilI,iCAAiC,EAAE;EACzDlV,MAAAA,KAAK,EAAEgB,SAAS;EAChB5C,MAAAA,cAAc,EAAdA,cAAc;EACd7yF,MAAAA,KAAK,EAAEwnC,YAAY;EACnB44D,MAAAA,MAAM,EAANA;EACF,KAAC,CAAC;EACF,IAAA,OAAOA,MAAM;IACf,CAAC;IAAAv6H,MAAA,CAEO45H,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvBj4D,YAA+B,EAC/Bq6D,SAA0C,EAC1C;EAAA,IAAA,IAAA33B,MAAA,GAAA,IAAA;EACA1iC,IAAAA,YAAY,CAACmsD,SAAS,CAAC9pH,OAAO,CAAC,UAAC4qH,KAAK,EAAK;QACxCvqB,MAAI,CAACi2B,gBAAgB,CAAC1L,KAAK,CAAChyE,UAAU,EAAEo/E,SAAS,CAAC;EACpD,IAAA,CAAC,CAAC;EACF;MACAr6D,YAAY,CAAC7tB,KAAK,EAAE;IACtB,CAAC;EAAA9zC,EAAAA,MAAA,CAEO+jI,gBAAgB,GAAxB,SAAQA,gBAAgBA,CAACvJ,OAA4B,EAAE;EACrD;EACA,IAAA,IAAMkI,WAAW,GAAG,IAAI,CAACC,wBAAwB,CAACnI,OAAO,CAAC;EAC1D,IAAA,IAAIkI,WAAW,KAAK,EAAE,EAAE;EACtB,MAAA,IAAI,CAAC3iI,GAAG,CAAA,uBAAA,GAAwBy6H,OAAO,mBAAe,CAAC;EACvD,MAAA,IAAMD,MAAM,GAAG,IAAI,CAAC74D,WAAW,CAACghE,WAAW,CAAC;EAC5C,MAAA,IAAI,CAACxG,uBAAuB,CAAC3B,MAAM,EAAE,IAAI,CAAC;QAC1CA,MAAM,CAACnJ,YAAY,EAAE;EACvB,IAAA;IACF,CAAC;IAAApxH,MAAA,CAEOs6H,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBE,OAA4B,EAC5BwB,SAA0C,EAC1C;EACA,IAAA,IAAM0G,WAAW,GAAG,IAAI,CAACC,wBAAwB,CAACnI,OAAO,CAAC;EAC1D,IAAA,IAAIkI,WAAW,KAAK,EAAE,EAAE;EACtB,MAAA,IAAMnI,MAAM,GAAG,IAAI,CAAC74D,WAAW,CAACghE,WAAW,CAAC;EAC5C,MAAA,IAAI,CAAC3iI,GAAG,CAAA,QAAA,GACGw6H,MAAM,qBAAeyB,SAAS,GAAG/E,eAAe,CAAC+E,SAAS,CAAC,GAAGA,SAAS,CAClF,CAAC;EACD,MAAA,IAAI,CAACE,uBAAuB,CAAC3B,MAAM,EAAEyB,SAAS,CAAC;QAC/C,IAAI,CAACt6D,WAAW,CAAC5d,MAAM,CAAC4+E,WAAW,EAAE,CAAC,CAAC;QACvCnI,MAAM,CAACr4H,OAAO,EAAE;EAClB,IAAA;IACF,CAAC;EAAAlC,EAAAA,MAAA,CAEOy7H,gBAAgB,GAAxB,SAAQA,gBAAgBA,GAAG;EACzB,IAAA,IAAIlB,MAAkC;MACtC,OAAQA,MAAM,GAAG,IAAI,CAAC74D,WAAW,CAACtU,GAAG,EAAE,EAAG;QACxCmtE,MAAM,CAACr4H,OAAO,EAAE;EAClB,IAAA;MACA,IAAI,CAACw/D,WAAW,GAAG,EAAE;IACvB,CAAC;EAAA1hE,EAAAA,MAAA,CAEOu/H,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBhF,MAAsB,EACtBvN,cAAsB,EACtB+M,aAAyC,EACzCV,aAAqB,EACrB7qG,KAAuB,EACvB;EACA,IAAA,IAAQmzC,YAAY,GAAyB44D,MAAM,CAA3C54D,YAAY;QAAEiuD,SAAS,GAAc2K,MAAM,CAA7B3K,SAAS;QAAE4K,OAAO,GAAKD,MAAM,CAAlBC,OAAO;EACxC,IAAA,IAAM4E,eAAe,GAAGz9D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM;EAErD,IAAA,IAAMuzH,YAAY,GAAG,IAAI,CAACA,YAAY;MACtC,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACD,YAAY,GAAG7I,SAAS;MAC7B,IAAI,CAAC6I,YAAY,IAAIA,YAAY,CAAC77E,UAAU,KAAK49E,OAAO,EAAE;EACxD,MAAA,IAAI/B,YAAY,EAAE;EAChB;UACA,IAAI,CAAC6B,gBAAgB,CACnB7B,YAAY,CAAC77E,UAAU,EACvBm9E,aAAa,CAACV,aAAa,CAC7B,CAAC;UACD,OAAOZ,YAAY,CAACv7H,KAAK;EAC3B,MAAA;EACA,MAAA,IAAI,CAAC6C,GAAG,CAAA,6BAAA,IACwBitH,cAAc,GAAG,CAAC,CAAA,GAAA,GAAA,GAAIoS,eAAe,GAAA,GAAA,GAAI5P,kBAAkB,CAACI,SAAS,CACrG,CAAC;QACD,IAAI,CAACt7F,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACmlI,0BAA0B,EAAE;EAClDpV,QAAAA,KAAK,EAAEgB,SAAS;EAChB5C,QAAAA,cAAc,EAAdA,cAAc;EACd7yF,QAAAA,KAAK,EAAEwnC,YAAY;EACnBmzD,QAAAA,QAAQ,EAAEiF,aAAa,CAACt8H,KAAK,CAAC,CAAC,CAAC;EAChC47H,QAAAA,aAAa,EAAbA,aAAa;EACbkB,QAAAA,MAAM,EAANA;EACF,OAAC,CAAC;EACJ,IAAA;;EAEA;EACA,IAAA,IAAI,CAAC8H,iBAAiB,CAAC9H,MAAM,EAAE/rG,KAAK,CAAC;IACvC,CAAC;IAAAxuB,MAAA,CAEOqiI,iBAAiB,GAAzB,SAAQA,iBAAiBA,CAAC9H,MAAsB,EAAE/rG,KAAuB,EAAE;MAAA,IAAAy1G,qBAAA,EAAAC,mBAAA;EACzE,IAAA,IAAI,CAAC,IAAI,CAACpP,QAAQ,EAAE;EAClB,MAAA;EACF,IAAA;EACA,IAAA,IAAQnzD,YAAY,GAAgB44D,MAAM,CAAlC54D,YAAY;QAAEiuD,SAAS,GAAK2K,MAAM,CAApB3K,SAAS;MAC/B,IAAMyJ,aAAa,GAAG,IAAI,CAACvE,QAAQ,CAAC9B,cAAc,CAACrxD,YAAY,CAAC/kB,UAAU,CAAC;EAC3E,IAAA,IAAMo4D,IAAI,GAAA,CAAAivB,qBAAA,GAAG,IAAI,CAACnP,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAnB2R,qBAAA,CAAsB5K,aAAa,CAAC;MACjD,IAAI,CAACrkB,IAAI,EAAE;EACT,MAAA;EACF,IAAA;MACAulB,MAAM,CAAC/J,UAAU,EAAE;EACnB,IAAA,IAAI,CAACwO,gBAAgB,CAAChqB,IAAI,CAAC;MAC3B,IAAI,CAAC2jB,cAAc,GAAG/I,SAAS;EAC/B,IAAA,IAAMgN,eAAe,GAAG,IAAI,CAACrB,kBAAkB,EAAE;MACjD,IAAIqB,eAAe,KAAKrC,MAAM,EAAE;EAC9B,MAAA;EACF,IAAA;EACA,IAAA,IAAM4J,iBAAiB,GAAGxiE,YAAY,CAACH,aAAa;EACpD,IAAA,IACE2iE,iBAAiB,IACjB,CAAAvH,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEj7D,YAAY,CAACH,aAAa,MAAK,KAAK,EACrD;EACA;EACA,MAAA;EACF,IAAA;MACA,IAAM4iE,YAAY,GAChB,CAAAxH,eAAe,oBAAfA,eAAe,CAAE7lH,MAAM,MAAA,CAAAmtH,mBAAA,GACvB,IAAI,CAAC9L,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjB8L,mBAAA,CAAmBntH,MAAM,CAAA,IACzB,IAAI,CAAClS,cAAc;EACrB,IAAA,IAAIs/H,iBAAiB,IAAIvU,SAAS,KAAK,IAAI,CAAC6I,YAAY,EAAE;EACxD;EACA,MAAA,IAAI,CAAC8B,MAAM,CAACxjH,MAAM,EAAE;EAClB,QAAA,IAAI,CAAChX,GAAG,CAAA,0CAAA,GAA4Cw6H,MAAQ,CAAC;EAC7D,QAAA;EACF,MAAA;QACA,IACE6J,YAAY,IACZ,CAACz/H,uBAAuB,CAACy/H,YAAY,EAAE7J,MAAM,CAACxjH,MAAM,CAAC,EACrD;UACA,IAAM7Z,KAAK,GAAG,IAAIgrB,KAAK,CAAA,QAAA,GACZsnG,kBAAkB,CAACI,SAAS,CAAC,GAAA,yBAAA,GAA0B7qH,MAAM,CAAChB,IAAI,CAACw2H,MAAM,CAACxjH,MAAM,CAAC,GAAA,sDAAA,GAAuDhS,MAAM,CAAChB,IAAI,CAACqgI,YAAY,CAAC,GAAA,IAC5K,CAAC;EACD,QAAA,IAAMjsF,SAAoB,GAAG;EAC3B7d,UAAAA,KAAK,EAAE,IAAI;YACXl3B,IAAI,EAAEzE,UAAU,CAACo/D,WAAW;YAC5BpyC,OAAO,EAAE/sB,YAAY,CAAC2kI,6BAA6B;EACnDrmI,UAAAA,KAAK,EAALA;WACD;EACD,QAAA,IAAM8vH,cAAc,GAAGrrD,YAAY,CAACgtD,cAAc,CAACiB,SAAS,CAAC;EAC7D,QAAA,IAAI,CAAC4T,oBAAoB,CACvBrrF,SAAS,EACTwpB,YAAY,EACZ03D,aAAa,EACbrM,cAAc,EACd9vH,KAAK,CAACsrC,OACR,CAAC;EACD,QAAA;EACF,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,CAAC6zF,eAAe,CAAC9B,MAAM,EAAE/rG,KAAK,CAAC;IACrC,CAAC;EAAAxuB,EAAAA,MAAA,CAEO6jI,kBAAkB,GAA1B,SAAQA,kBAAkBA,CAACliE,YAA+B,EAAE;EAC1D,IAAA,IAAMmzD,QAAQ,GAAG,IAAI,CAACA,QAAQ;EAC9B,IAAA,IAAMtmG,KAAK,GAAG,IAAI,CAACmtG,YAAY;EAC/B,IAAA,IAAI,CAAC7G,QAAQ,IAAI,CAACtmG,KAAK,EAAE;EACvB,MAAA;EACF,IAAA;EACA,IAAA,IAAM+oC,WAAW,GAAG/oC,KAAK,CAAC+oC,WAAW;MACrC,IAAM8sE,eAAe,GAAGvP,QAAQ,CAACnG,cAAc,CAAChtD,YAAY,EAAEpK,WAAW,CAAC;EAC1E,IAAA,IAAM+sE,aAAa,GAAG3iE,YAAY,CAACmsD,SAAS,CAACuW,eAAe,CAE/C;EACb,IAAA,IAAIC,aAAa,EAAE;QACjB,IAAM/J,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACqI,aAAa,CAAC1nF,UAAU,CAAC;EAC5D,MAAA,IAAI29E,MAAM,EAAE;UACV,IAAMgK,gBAAgB,GACpBhK,MAAM,CAAChjE,WAAW,IAAIA,WAAW,GAAG+sE,aAAa,CAACxrE,aAAa;EACjE,QAAA,IAAM0rE,eAAe,GAAGjK,MAAM,CAACtwH,QAAQ,GAAGs6H,gBAAgB;EAC1D,QAAA,IAAI,CAAC5hI,IAAI,CAAA,aAAA,GACO4hI,gBAAgB,aAAOA,gBAAgB,GAAGC,eAAe,CAAA,GAAA,MAAA,GAAOjK,MAAM,GAAA,GAAA,GAAI54D,YAAY,GAAA,uBAAA,GAAwBpK,WAAW,MACzI,CAAC;UACD,IACEgtE,gBAAgB,KACfC,eAAe,GAAGh2G,KAAK,CAAC2H,YAAY,GAAG,GAAG,IACzCokG,MAAM,CAAC7J,oBAAoB,CAACliG,KAAK,CAAC,CAAC,IACrC+rG,MAAM,CAACjmG,GAAG,EACV;YACA,IAAM+kG,aAAa,GAAGvE,QAAQ,CAAC9B,cAAc,CAC3CrxD,YAAY,CAAC/kB,UACf,CAAC;YACD,IAAI,CAAC8gF,sBAAsB,CACzB/7D,YAAY,EACZ03D,aAAa,EACbgL,eACF,CAAC;EACH,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;EAAArkI,EAAAA,MAAA,CAEO29H,cAAc,GAAtB,SAAQA,cAAcA,CAACtyF,IAAY,EAAE;EACnC,IAAA,IAAM7c,KAAK,GAAG,IAAI,CAACmtG,YAAY;EAC/B,IAAA,IAAIntG,KAAK,IAAIA,KAAK,CAAC+oC,WAAW,GAAGlsB,IAAI,EAAE;QACrC7c,KAAK,CAAC+oC,WAAW,GAAGlsB,IAAI;EAC1B,IAAA;IACF,CAAC;EAAArrC,EAAAA,MAAA,CAEOwjI,oBAAoB,GAA5B,SAAQA,oBAAoBA,CAC1Bz4H,IAAe,EACf42D,YAA+B,EAC/B03D,aAAqB,EACrBrM,cAAsB,EACtByX,YAAoB,EACpB;EACA,IAAA,IAAI15H,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAAC6nC,oBAAoB,EAAE;EACtD,MAAA;EACF,IAAA;MACA,IAAMmpF,SAAS,GAAIjuD,YAAY,CAACmsD,SAAS,CAACd,cAAc,CAAC,IACvD,IAAqC;EACvC,IAAA,IAAI,CAACrqH,IAAI,CAAA,2BAAA,IACqBitH,SAAS,GAAGJ,kBAAkB,CAACI,SAAS,CAAC,GAAGA,SAAS,CAAA,GAAA,GAAA,GAAI7kH,IAAI,CAAC7N,KAC5F,CAAC;EACD,IAAA,IAAI,CAAC,IAAI,CAAC43H,QAAQ,EAAE;EAClB,MAAA;EACF,IAAA;MACA,IAAM0F,OAAO,GAAG,CAAA5K,SAAS,oBAATA,SAAS,CAAEhzE,UAAU,KAAI,EAAE;EAC3C,IAAA,IAAM8lF,WAAW,GAAG,IAAI,CAACC,wBAAwB,CAACnI,OAAO,CAAC;MAC1D,IAAMD,MAAM,GAAG,IAAI,CAAC74D,WAAW,CAACghE,WAAW,CAAC,IAAI,IAAI;EACpD,IAAA,IAAMpQ,KAAK,GAAG,IAAI,CAACwC,QAAQ,CAACxC,KAAK;MACjC,IAAMoS,sBAAsB,GAAGxhI,QAAA,CAAc,EAAE,EAAE6H,IAAI,EAAE;EACrDuvB,MAAAA,KAAK,EAAE,KAAK;EACZqK,MAAAA,WAAW,EAAEG,0BAA0B,CAAC,IAAI,CAAC;EAC7C8pF,MAAAA,KAAK,EAAEgB,SAAS;EAChB5C,MAAAA,cAAc,EAAdA,cAAc;EACd7yF,MAAAA,KAAK,EAAEwnC,YAAY;EACnBmzD,MAAAA,QAAQ,EAAExC,KAAK;EACf+G,MAAAA,aAAa,EAAbA,aAAa;EACbkB,MAAAA,MAAM,EAANA;EACF,KAAC,CAAC;MACF,IAAI,CAACjmG,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC8lI,wBAAwB,EAAED,sBAAsB,CAAC;EACzE,IAAA,IAAI,CAAC35H,IAAI,CAACuvB,KAAK,EAAE;EACf,MAAA;EACF,IAAA;EAEA,IAAA,IAAMm+F,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,IAAA,IAAME,cAAc,GAAG,IAAI,CAACA,cAAc;EAC1C,IAAA,IAAMz7H,KAAK,GAAG,IAAIgrB,KAAK,CAACu8G,YAAY,CAAC;EACrC,IAAA,IAAI7U,SAAS,EAAE;EACb,MAAA,IAAI,CAAC0K,gBAAgB,CAACE,OAAO,EAAE,IAAI,CAAC;QACpC5K,SAAS,CAAC1yH,KAAK,GAAGA,KAAK;EACzB,IAAA;;EAEA;MACA,IAAI,CAACykE,YAAY,CAACmsD,SAAS,CAAC1oH,IAAI,CAAC,UAACwpH,KAAK,EAAA;QAAA,OAAK,CAACA,KAAK,CAAC1xH,KAAK;EAAA,IAAA,CAAA,CAAC,EAAE;QACzDykE,YAAY,CAACzkE,KAAK,GAAGA,KAAK;EAC5B,IAAA,CAAC,MAAM;EACL;EACA,MAAA,KAAK,IAAIkJ,CAAC,GAAG4mH,cAAc,EAAE5mH,CAAC,GAAGu7D,YAAY,CAACmsD,SAAS,CAAC5oH,MAAM,EAAEkB,CAAC,EAAE,EAAE;UACnE,IAAI,CAAC29H,gBAAgB,CAACpiE,YAAY,CAACmsD,SAAS,CAAC1nH,CAAC,CAAC,CAACw2C,UAAU,CAAC;EAC7D,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAC43E,cAAc,CAAC,IAAI,CAAC;MACzB,IAAI7yD,YAAY,CAACzkE,KAAK,EAAE;EACtB,MAAA,IAAI,CAACw9H,eAAe,CAAC/4D,YAAY,CAAC;MACpC,CAAC,MAAM,IAAI82D,YAAY,IAAIA,YAAY,CAAC77E,UAAU,KAAK49E,OAAO,EAAE;QAC9D,IAAI,CAACkD,sBAAsB,CAAC/7D,YAAY,EAAE03D,aAAa,EAAErM,cAAc,CAAC;EAC1E,IAAA,CAAC,MAAM,IACL2L,cAAc,IACdA,cAAc,CAAC/7E,UAAU,KAAK49E,OAAO,IACrC,IAAI,CAACp7E,cAAc,CAAC,IAAI,CAACkiB,aAAa,CAAC,EACvC;QACA,IAAI,CAAC87D,qBAAqB,CAAC,IAAI,CAAC97D,aAAa,EAAEq3D,cAAc,CAAC;EAChE,IAAA;IACF,CAAC;EAAA34H,EAAAA,MAAA,CAEO06H,eAAe,GAAvB,SAAQA,eAAeA,CAAC/4D,YAA+B,EAAE;EACvD;EACA,IAAA,IAAMu/D,UAAU,GAAGv/D,YAAY,CAAC7I,aAAa;EAC7C,IAAA,IAAMgM,WAAW,GAAG,IAAI,CAAC82D,oBAAoB;EAC7C;EACA,IAAA,IAAI92D,WAAW,EAAE;QACf,IAAI,CAAC/kE,GAAG,CAAA,mCAAA,GAC6B4hE,YAAY,CAAC/kB,UAAU,GAAA,YAAA,GACxDskF,UAAU,GAAA,QAAA,GACH,IAAI,CAAC9N,WAAW,GAAA,YAAA,GAAa6D,eAAe,CACnDnyD,WACF,CAAC,GAAA,UAAA,GAAWnD,YAAY,CAACzkE,KAC3B,CAAC;EACD,MAAA,IAAIk2H,WAAW,GAAG,IAAI,CAACA,WAAW;EAClC,MAAA,IAAIA,WAAW,KAAK,EAAE,EAAE;EACtBA,QAAAA,WAAW,GAAG,IAAI,CAAC9+F,GAAG,CAACuP,aAAa;EACtC,MAAA;QACA,IAAM+gG,cAAc,GAAG,IAAI,CAACxK,UAAU,CAACt1D,WAAW,EAAEsuD,WAAW,CAAC;QAChE,IAAI,IAAI,CAACiH,UAAU,CAACv1D,WAAW,EAAE8/D,cAAc,CAAC,EAAE;EAChD,QAAA,IAAI,CAAChL,iBAAiB,CAACj4D,YAAY,EAAE,IAAI,CAAC;EAC5C,MAAA;QACA,IAAIA,YAAY,CAACH,aAAa,EAAE;EAC9B,QAAA,IAAI,CAACi+D,aAAa,CAACyB,UAAU,EAAE,IAAI,CAAC;EACpC,QAAA,IAAI,CAACh3B,gBAAgB,CAACg3B,UAAU,CAAC;EACnC,MAAA;EACA,MAAA,IAAI,CAAC,IAAI,CAACpM,QAAQ,EAAE;EAClB,QAAA;EACF,MAAA;QACA,IAAMuE,aAAa,GAAG,IAAI,CAACvE,QAAQ,CAAC5B,mBAAmB,CAACE,WAAW,CAAC;EACpE,MAAA,IAAI,CAACmG,mBAAmB,CAACF,aAAa,CAAC;EACzC,IAAA,CAAC,MAAM;QACL,IAAI,CAACyC,UAAU,EAAE;EACnB,IAAA;EACF,EAAA;;EAEA;EAAA;IAAA97H,MAAA,CACQm7H,iBAAiB,GAAzB,SAAQA,iBAAiBA,CACvBhhG,KAA+B,EAC/BpvB,IAAyB,EACzB;EAAA,IAAA,IAAA85H,eAAA;QAAAp/B,MAAA,GAAA,IAAA;QAAAq/B,mBAAA;EACA,IAAA,IAAMnjE,YAAY,GAAG52D,IAAI,CAACovB,KAAK;EAC/B,IAAA,IAAM4qG,cAAc,GAAGpjE,YAAY,CAAC/kB,UAAU;EAC9C,IAAA,IAAM66E,MAAM,GAAG1sH,IAAI,CAACijH,iBAAiB,CAAC0J,MAAM;EAC5C,IAAA,IAAI,EAAA,CAAAmN,eAAA,GAAC,IAAI,CAAC/P,QAAQ,KAAA,IAAA,IAAb+P,eAAA,CAAe/R,QAAQ,CAACiS,cAAc,CAAC,CAAA,EAAE;EAC5C;EACA,MAAA;EACF,IAAA;EACA,IAAA,IAAMzP,UAAU,GAAG3zD,YAAY,CAAC7I,aAAa;EAC7C,IAAA,IAAMksE,gBAAgB,GAAGrjE,YAAY,CAAC13D,QAAQ;MAC9C,IAAI0sH,WAAW,GAAG,CAAC;EACnBc,IAAAA,MAAM,CAACzzH,OAAO,CAAC,UAAC4qH,KAAK,EAAE5B,cAAc,EAAK;EACxC,MAAA,IAAM/iH,QAAQ,GAAG0gB,UAAU,CAACikG,KAAK,CAACqW,QAAQ,CAAC;EAC3Cx/B,MAAAA,MAAI,CAACg9B,WAAW,CACd9gE,YAAY,EACZqrD,cAAc,EACd2J,WAAW,EACXrB,UAAU,GAAGqB,WAAW,EACxB1sH,QAAQ,EACR2kH,KAAK,CAAC3jE,GACR,CAAC;EACD0rE,MAAAA,WAAW,IAAI1sH,QAAQ;EACzB,IAAA,CAAC,CAAC;MACF03D,YAAY,CAAC13D,QAAQ,GAAG0sH,WAAW;MACnC,IAAI,CAAC52H,GAAG,CAAA,mCAAA,GAC8B42H,WAAW,eAAUqO,gBAAgB,GAAA,IAAA,GAAKrjE,YAChF,CAAC;EACD,IAAA,IAAM42D,WAAW,GAAG,IAAI,CAACA,WAAW;MACpC,IAAM2M,cAAc,GAAG,CAAA3M,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEp+F,KAAK,CAACyiB,UAAU,MAAKmoF,cAAc;;EAEvE;MACA,IAAI,CAACvQ,cAAc,EAAE;MAErB,IAAM2Q,cAAc,GAAA,CAAAL,mBAAA,GAAG,IAAI,CAACxjE,aAAa,KAAA,IAAA,GAAA,MAAA,GAAlBwjE,mBAAA,CAAoB3qG,KAAK;;EAEhD;EACA,IAAA,IAAI+qG,cAAc,EAAE;EAAA,MAAA,IAAAE,qBAAA;EAClB;QACA,IAAM/L,aAAa,GAAG,IAAI,CAACvE,QAAQ,CAAC9B,cAAc,CAAC+R,cAAc,CAAC;EAClE,MAAA,IAAM/vB,IAAI,GAAA,CAAAowB,qBAAA,GAAG,IAAI,CAACtQ,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAnB8S,qBAAA,CAAsB/L,aAAa,CAAC;EACjD,MAAA,IAAIrkB,IAAI,EAAE;EACR,QAAA,IAAI,CAAC,IAAI,CAAClwC,WAAW,IAAI,IAAI,CAACsuD,WAAW,GAAGpe,IAAI,CAACvtG,GAAG,EAAE;EACpD;YACA,IAAMiG,KAAK,GAAG,IAAI,CAAConH,QAAQ,CAAC5B,mBAAmB,CAAC,IAAI,CAACE,WAAW,CAAC;YACjE,IAAI1lH,KAAK,KAAK2rH,aAAa,EAAE;cAC3B13D,YAAY,CAACzkE,KAAK,GAAG,IAAIgrB,KAAK,CAAA,+CAAA,GACoB,IAAI,CAACkrG,WAAW,GAAA,GAAA,GAAIzxD,YACtE,CAAC;EACD,YAAA,IAAI,CAAC6yD,cAAc,CAAC,IAAI,CAAC;EACzB,YAAA,IAAI,CAACkG,eAAe,CAAC/4D,YAAY,CAAC;EAClC,YAAA;EACF,UAAA;EACF,QAAA;EACA,QAAA,IAAI,CAACq9D,gBAAgB,CAAChqB,IAAI,CAAC;EAC7B,MAAA;EACA,MAAA,IAAI,CAACukB,mBAAmB,CAACF,aAAa,CAAC;MACzC,CAAC,MAAM,IAAI,CAAA8L,cAAc,IAAA,IAAA,GAAA,MAAA,GAAdA,cAAc,CAAEvoF,UAAU,MAAKmoF,cAAc,EAAE;EACxD,MAAA,IAAMnV,SAAS,GAAGjuD,YAAY,CAACmsD,SAAS,CAAC,CAAC,CAAC;EAC3C;EACA,MAAA,IAAI8B,SAAS,EAAE;UACb,IAAM2K,MAAM,GAAG,IAAI,CAAC0B,cAAc,CAACrM,SAAS,CAAChzE,UAAU,CAAC;UACxD,IAAIuoF,cAAc,CAAC3jE,aAAa,EAAE;EAChC;EACA,UAAA,IAAMhzC,KAAK,GAAG,IAAI,CAACmtG,YAAY;YAC/B,IAAIpB,MAAM,IAAI/rG,KAAK,EAAE;EACnB,YAAA,IAAI,CAAC6zG,iBAAiB,CAAC9H,MAAM,EAAE/rG,KAAK,CAAC;EACvC,UAAA;UACF,CAAC,MAAM,IAAI+rG,MAAM,EAAE;YACjBA,MAAM,CAAC/J,UAAU,EAAE;EACrB,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;IAAAxwH,MAAA,CAEOg6B,OAAO,GAAf,SAAQA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;EACpD,IAAA,IAAI,CAAC,IAAI,CAAC+pH,QAAQ,EAAE;EAClB,MAAA;EACF,IAAA;MACA,QAAQ/pH,IAAI,CAAC4gB,OAAO;QAClB,KAAK/sB,YAAY,CAAC+4H,wBAAwB;QAC1C,KAAK/4H,YAAY,CAAC24H,qBAAqB;QACvC,KAAK34H,YAAY,CAACi5H,uBAAuB;EAAE,QAAA;EACzC,UAAA,IAAMl2D,YAAY,GAAG52D,IAAI,CAAC42D,YAAY;EACtC,UAAA,IAAIA,YAAY,EAAE;EAChB,YAAA,IAAI,CAAC6yD,cAAc,CAAC,IAAI,CAAC;EACzB,YAAA,IAAI,CAACkG,eAAe,CAAC/4D,YAAY,CAAC;EACpC,UAAA;EACA,UAAA;EACF,QAAA;QACA,KAAK/iE,YAAY,CAAC6nC,oBAAoB;EAAE,QAAA;EACtC,UAAA,IAAM4+F,YAAY,GAChB,IAAI,CAAC7M,SAAS,IAAI,IAAI,CAACD,WAAW,IAAI,IAAI,CAACzzD,WAAW;EACxD,UAAA,IACE,IAAI,CAAC1lB,cAAc,CAACimF,YAAY,CAAC,IACjCA,YAAY,CAAClrG,KAAK,CAACqnC,aAAa,EAChC;EACA,YAAA,IAAI,CAACqiE,kBAAkB,CAACwB,YAAY,CAAClrG,KAAK,CAAC;EAC3C,YAAA;EACF,UAAA;YACA,IAAI,CAACp6B,GAAG,CAAA,wBAAA,GACmB,IAAI,CAACqzH,WAAW,GAAA,gBAAA,GAAiB,IAAI,CAACkF,WACjE,CAAC;YACD,IAAI,CAACuB,YAAY,EAAE;EACnB,UAAA,IAAI,CAACX,WAAW,CAAC,IAAI,CAAC;EACtB,UAAA;EACF,QAAA;EACF;IACF,CAAC;IAAA,OAAA/2H,YAAA,CAAA+1H,uBAAA,EAAA,CAAA;MAAA91H,GAAA,EAAA,sBAAA;MAAAC,GAAA,EA5/ED,SAAAA,GAAAA,GAA+D;EAC7D;EACA,MAAA,IAAI,CAAC,IAAI,CAACiyB,GAAG,EAAE;EACb,QAAA,OAAO,IAAI;EACb,MAAA;QACA,IAAI,IAAI,CAAC+jG,OAAO,EAAE;UAChB,OAAO,IAAI,CAACA,OAAO;EACrB,MAAA;QACA,IAAMt6H,CAAC,GAAG,IAAI;EACd,MAAA,IAAMunI,sBAAsB,GAAG,SAAzBA,sBAAsBA,GAAA;EAAA,QAAA,OAASvnI,CAAC,CAACujE,aAAa,IAAIvjE,CAAC,CAACw6H,WAAW;EAAA,MAAA,CAAA;EACrE,MAAA,IAAM0D,cAAc,GAAG,SAAjBA,cAAcA,CAAIrN,KAAmC,EAAA;UAAA,OACzDA,KAAK,GAAG7wH,CAAC,CAACk+H,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC,GAAGgyE,KAAK;EAAA,MAAA,CAAA;EACpD,MAAA,IAAM2W,aAAa,GAAG,SAAhBA,aAAaA,CACjBvwB,IAAqC,EACrCqe,YAA0B,EAC1BzE,KAAmC,EACnC4W,eAA8C,EAC9CC,gBAA+C,EACpC;EACX,QAAA,IAAIzwB,IAAI,EAAE;EACR,UAAA,IAAI3pE,IAAI,GACN2pE,IAAI,CAACqe,YAAY,CAAC,CAIlB9rH,KAAK;EACP,UAAA,IAAMo6D,YAAY,GAAGqzC,IAAI,CAAC76E,KAAK;EAC/B,UAAA,IAAIwnC,YAAY,EAAE;cAChB,IACE0xD,YAAY,KAAK,SAAS,IAC1B1xD,YAAY,CAAC8zD,iBAAiB,KAAK3I,iBAAiB,CAACsC,KAAK,EAC1D;EACA,cAAA,IAAMsW,WAAW,GAAGzJ,cAAc,CAACrN,KAAK,CAAC;gBACzC,IAAI,CAAA8W,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAE/jE,YAAY,MAAKA,YAAY,EAAE;kBAC9Ct2B,IAAI,IACFq6F,WAAW,CAAC9V,SAAS,CAAC50D,WAAW,GACjC0qE,WAAW,CAACD,gBAAgB,CAAC;EACjC,cAAA;EACF,YAAA;EACF,UAAA,CAAC,MAAM;EACL,YAAA,IAAMlnI,KAAK,GACTinI,eAAe,KAAK,aAAa,GAC7BG,cAAc,EAAE,GAChB5nI,CAAC,CAACynI,eAAe,CAAC;EACxBn6F,YAAAA,IAAI,IAAI9sC,KAAK,GAAGy2G,IAAI,CAACztG,KAAK;EAC5B,UAAA;EACA,UAAA,OAAO8jC,IAAI;EACb,QAAA;EACA,QAAA,OAAO,CAAC;QACV,CAAC;QACD,IAAMu6F,cAAc,GAAG,SAAjBA,cAAcA,CAClBC,WAAmB,EACnBxS,YAA0B,EACf;EAAA,QAAA,IAAAyS,WAAA;EACX,QAAA,IACED,WAAW,KAAK,CAAC,IACjBxS,YAAY,KAAK,SAAS,IAAA,CAAAyS,WAAA,GAC1B/nI,CAAC,CAAC+2H,QAAQ,aAAVgR,WAAA,CAAY5gI,MAAM,EAClB;EAAA,UAAA,IAAA6gI,iBAAA;YACA,IAAMr4H,KAAK,GAAG3P,CAAC,CAAC+2H,QAAQ,CAAC5B,mBAAmB,CAAC2S,WAAW,CAAC;EACzD,UAAA,IAAM7wB,IAAI,GAAA,CAAA+wB,iBAAA,GAAGhoI,CAAC,CAAC+2H,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAhByT,iBAAA,CAAmBr4H,KAAK,CAAC;EACtC,UAAA,IAAIsnG,IAAI,EAAE;cACR,IAAMgd,IAAI,GAAGhd,IAAI,CAACqe,YAAY,CAAC,CAAC9rH,KAAK,GAAGytG,IAAI,CAACztG,KAAK;cAClD,OAAOs+H,WAAW,GAAG7T,IAAI;EAC3B,UAAA;EACF,QAAA;EACA,QAAA,OAAO6T,WAAW;QACpB,CAAC;EACD,MAAA,IAAMF,cAAc,GAAG,SAAjBA,cAAcA,GAAiB;EACnC,QAAA,IAAMpnI,KAAK,GAAGR,CAAC,CAACu6H,WAAW;EAC3B,QAAA,IAAI/5H,KAAK,KAAKF,MAAM,CAACuiI,SAAS,EAAE;YAC9B,OAAOoF,iBAAiB,CAAC,SAAS,CAAC;EACrC,QAAA;EACA,QAAA,OAAO/nI,IAAI,CAACsD,GAAG,CAAChD,KAAK,EAAE,CAAC,CAAC;QAC3B,CAAC;EACD,MAAA,IAAMynI,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAI3S,YAA0B,EAAa;UAAA,IAAA4S,iBAAA,EAAAC,YAAA;UAChE,IAAA,CAAAD,iBAAA,GAAIloI,CAAC,CAACiiI,cAAc,KAAA,IAAA,IAAhBiG,iBAAA,CAAkB/uG,IAAI,EAAE;EAC1B;EACA,UAAA,OAAOn5B,CAAC,CAACiiI,cAAc,CAACxtE,IAAI;EAC9B,QAAA;EACA,QAAA,OAAO,CAAA,CAAA0zE,YAAA,GAAAnoI,CAAC,CAAC+2H,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAVoR,YAAA,CAAY3T,SAAS,CAACc,YAAY,CAAC,KAAI,CAAC;QACjD,CAAC;QACD,IAAM8S,MAAM,GAAG,SAATA,MAAMA,CAAI96F,IAAY,EAAEgoF,YAA0B,EAAK;UAAA,IAAA+S,WAAA,EAAAC,kBAAA;EAC3D,QAAA,IAAMrxB,IAAI,GAAGj3G,CAAC,CAAC69H,oBAAoB;EACnC,QAAA,IAAI5mB,IAAI,IAAA,IAAA,IAAA,CAAAoxB,WAAA,GAAJpxB,IAAI,CAAE76E,KAAK,KAAA,IAAA,IAAXisG,WAAA,CAAa1Y,YAAY,CAACvhG,IAAI,IAAI,CAACpuB,CAAC,CAAC+2H,QAAQ,EAAE;EACjD,UAAA;EACF,QAAA;EACA/2H,QAAAA,CAAC,CAACgC,GAAG,CAAA,UAAA,GAAYsrC,IAAI,GAAA,KAAA,GAAKgoF,YAAY,OAAG,CAAC;EAC1C,QAAA,IAAMvuD,WAAW,GAAG/mE,CAAC,CAAC69H,oBAAoB;UAC1C,IAAM0K,WAAW,GAAGvoI,CAAC,CAAC+2H,QAAQ,CAAC5B,mBAAmB,CAAC7nF,IAAI,EAAEgoF,YAAY,CAAC;EACtE,QAAA,IAAMkT,UAAU,GAAA,CAAAF,kBAAA,GAAGtoI,CAAC,CAAC+2H,QAAQ,CAACxC,KAAK,KAAA,IAAA,GAAA,MAAA,GAAhB+T,kBAAA,CAAmBC,WAAW,CAAC;EAClD,QAAA,IAAM1J,eAAe,GAAG7+H,CAAC,CAACw9H,kBAAkB,EAAE;EAC9C,QAAA,IAAMh6D,qBAAqB,GAAGq7D,eAAe,IAAA,IAAA,GAAA,MAAA,GAAfA,eAAe,CAAEj7D,YAAY;EAC3D,QAAA,IAAMH,aAAa,GAAGD,qBAAqB,IAAA,IAAA,GAAA,MAAA,GAArBA,qBAAqB,CAAEC,aAAa;UAC1D,IAAMglE,UAAU,GAAG1hE,WAAW,IAAI/mE,CAAC,CAACs8H,UAAU,CAACv1D,WAAW,EAAEyhE,UAAU,CAAC;EACvE,QAAA,IAAIzhE,WAAW,KAAKtD,aAAa,IAAIglE,UAAU,CAAC,EAAE;EAChD;EACA,UAAA,IAAMd,WAAW,GAAGzJ,cAAc,CAACl+H,CAAC,CAAC06H,YAAY,CAAC;YAClD,IAAMjqG,KAAK,GAAG,CAAAk3G,WAAW,IAAA,IAAA,GAAA,MAAA,GAAXA,WAAW,CAAEl3G,KAAK,KAAIzwB,CAAC,CAAC49H,YAAY;EAClD,UAAA,IAAIntG,KAAK,EAAE;cACT,IAAM+oC,WAAW,GACf87D,YAAY,KAAK,SAAS,GACtB7kG,KAAK,CAAC+oC,WAAW,GACjBguE,aAAa,CACXzgE,WAAW,EACXuuD,YAAY,EACZt1H,CAAC,CAAC06H,YAAY,EACd,aAAa,EACb,aACF,CAAC;EAEP,YAAA,IAAMzG,IAAI,GAAG3mF,IAAI,GAAGksB,WAAW;cAC/B,IAAMkvE,UAAU,GACd,CAACjlE,aAAa,GAAGjK,WAAW,GAAG/oC,KAAK,CAAC+oC,WAAW,IAAIy6D,IAAI;EAC1D,YAAA,IACEyU,UAAU,IAAI,CAAC,KACd,CAACf,WAAW,IACXlkE,aAAa,IACbilE,UAAU,IAAIf,WAAW,CAACz7H,QAAQ,CAAC,EACrC;gBACAukB,KAAK,CAAC+oC,WAAW,GAAGkvE,UAAU;EAC9B,cAAA;EACF,YAAA;EACF,UAAA;EACF,QAAA;EACA;EACA,QAAA,IAAIF,UAAU,EAAE;YACd,IAAIE,WAAU,GAAGp7F,IAAI;YACrB,IAAIgoF,YAAY,KAAK,SAAS,EAAE;EAC9B,YAAA,IAAMqT,mBAAmB,GAAGH,UAAU,CAAClT,YAAY,CAAC,CAAC9rH,KAAK;EAC1D,YAAA,IAAMyqH,KAAI,GAAG3mF,IAAI,GAAGq7F,mBAAmB;EACvCD,YAAAA,WAAU,GAAGF,UAAU,CAACh/H,KAAK,GAAGyqH,KAAI;EACtC,UAAA;YACA,IAAM2U,eAAe,GAAG,CAAC5oI,CAAC,CAACqhD,cAAc,CAACmnF,UAAU,CAAC;YACrD,IACE,CAAC,CAACxoI,CAAC,CAACqhD,cAAc,CAAC0lB,WAAW,CAAC,IAAIA,WAAW,CAAC3qC,KAAK,CAACqnC,aAAa,MACjEmlE,eAAe,IAAIJ,UAAU,CAACpsG,KAAK,CAACqnC,aAAa,CAAC,EACnD;EACA,YAAA,IAAMhzC,MAAK,GACTzwB,CAAC,CAACywB,KAAK,KAAKgzC,aAAa,GAAGo7D,eAAe,oBAAfA,eAAe,CAAEpuG,KAAK,GAAG,IAAI,CAAC;EAC5D,YAAA,IAAIA,MAAK,EAAE;gBACTA,MAAK,CAAC+oC,WAAW,GAAGkvE,WAAU;EAChC,YAAA;YACF,CAAC,MAAM,IAAI3hE,WAAW,EAAE;EACtB;EACA,YAAA,IAAMs0D,YAAY,GAAGr7H,CAAC,CAACg1H,aAAa,CAACjuD,WAAW,CAAC;cACjD,IAAIwhE,WAAW,GAAGlN,YAAY,EAAE;EAC9B,cAAA,IAAME,SAAS,GAAGv7H,CAAC,CAAC+2H,QAAQ,CAACxB,uBAAuB,CAClD8F,YAAY,GAAG,CAAC,EAChBkN,WACF,CAAC;gBACD,IAAIhN,SAAS,GAAGF,YAAY,EAAE;EAC5Br7H,gBAAAA,CAAC,CAACw7H,mBAAmB,CAACD,SAAS,CAAC;EAChC,gBAAA;EACF,cAAA;EACF,YAAA;cAEA,IAAI/K,UAAU,GAAG,CAAC;EAClB,YAAA,IAAIoY,eAAe,EAAE;gBACnB5oI,CAAC,CAACq1H,WAAW,GAAGqT,WAAU;gBAC1B1oI,CAAC,CAACm7H,WAAW,EAAE;EACjB,YAAA,CAAC,MAAM;EACL,cAAA,IAAMpL,SAAS,GAAGyY,UAAU,CAACpsG,KAAK,CAAC2zF,SAAS;EAC5C,cAAA,IAAM8Y,SAAS,GACbv7F,IAAI,GAAG,CAACk7F,UAAU,CAAClT,YAAY,CAAC,IAAIkT,UAAU,EAAEh/H,KAAK;gBACvD,KAAK,IAAInB,CAAC,GAAG0nH,SAAS,CAAC5oH,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACpC,gBAAA,IAAMwoH,KAAK,GAAGd,SAAS,CAAC1nH,CAAC,CAAC;EAC1B,gBAAA,IACEwoH,KAAK,CAAC3kH,QAAQ,IACd28H,SAAS,IAAIhY,KAAK,CAAC5zD,WAAW,IAC9B4rE,SAAS,GAAGhY,KAAK,CAAC5zD,WAAW,GAAG4zD,KAAK,CAAC3kH,QAAQ,EAC9C;EACAskH,kBAAAA,UAAU,GAAGnoH,CAAC;EACd,kBAAA;EACF,gBAAA;EACF,cAAA;EACF,YAAA;EACArI,YAAAA,CAAC,CAACw7H,mBAAmB,CAAC+M,WAAW,EAAE/X,UAAU,CAAC;EAChD,UAAA;EACF,QAAA;QACF,CAAC;EACD,MAAA,IAAMsY,qBAAqB,GAAG,SAAxBA,qBAAqBA,GAAS;EAClC,QAAA,IAAM/hE,WAAW,GAAG/mE,CAAC,CAAC69H,oBAAoB;EAC1C,QAAA,IAAI79H,CAAC,CAACqhD,cAAc,CAAC0lB,WAAW,CAAC,EAAE;EACjC,UAAA,OAAOA,WAAW;EACpB,QAAA;EACA,QAAA,IAAMxD,aAAa,GAAGgkE,sBAAsB,EAAE;EAC9C,QAAA,IAAIvnI,CAAC,CAACqhD,cAAc,CAACkiB,aAAa,CAAC,EAAE;EACnC,UAAA,OAAOA,aAAa;EACtB,QAAA;EACA,QAAA,OAAO,IAAI;QACb,CAAC;EACD,MAAA,IAAMwlE,kBAAsC,GAAG;UAC7C,IAAIvW,WAAWA,GAAG;EAChB,UAAA,IAAMwW,gBAAgB,GAAGzB,sBAAsB,EAAE;EACjD,UAAA,IAAMhkE,aAAa,GAAGvjE,CAAC,CAACujE,aAAa;EACrC,UAAA,IAAIA,aAAa,IAAIA,aAAa,KAAKylE,gBAAgB,EAAE;EAAA,YAAA,IAAAC,iBAAA;EACvD,YAAA,OACEzB,aAAa,CACXjkE,aAAa,EACb,SAAS,EACTvjE,CAAC,CAAC46H,cAAc,EAChB,aAAa,EACb,aACF,CAAC,GAAGr3D,aAAa,CAACmxD,OAAO,CAAClrH,KAAK,KAAA,CAAAy/H,iBAAA,GAC/BjpI,CAAC,CAAC46H,cAAc,KAAA,IAAA,GAAA,MAAA,GAAhBqO,iBAAA,CAAkBhsE,WAAW,KAC7B,CAAC;EAEL,UAAA;EACA,UAAA,OAAO,CAAC;UACV,CAAC;UACD,IAAIzD,WAAWA,GAAG;EAChB,UAAA,IAAMwvE,gBAAgB,GAAGF,qBAAqB,EAAE;EAChD,UAAA,IAAM/hE,WAAW,GAAG/mE,CAAC,CAAC69H,oBAAoB;EAC1C,UAAA,IAAI92D,WAAW,IAAIA,WAAW,KAAKiiE,gBAAgB,EAAE;EACnD,YAAA,OACExB,aAAa,CACXzgE,WAAW,EACX,SAAS,EACT/mE,CAAC,CAACkpI,qBAAqB,EACvB,aAAa,EACb,aACF,CAAC,GAAGniE,WAAW,CAAC2tD,OAAO,CAAClrH,KAAK;EAEjC,UAAA;EACA,UAAA,OAAO,CAAC;UACV,CAAC;UACD,IAAIgwD,WAAWA,CAAClsB,IAAY,EAAE;EAC5B,UAAA,IAAM07F,gBAAgB,GAAGF,qBAAqB,EAAE;EAChD,UAAA,IAAM/hE,WAAW,GAAG/mE,CAAC,CAAC69H,oBAAoB;EAC1C,UAAA,IAAI92D,WAAW,IAAIA,WAAW,KAAKiiE,gBAAgB,EAAE;cACnDZ,MAAM,CAAC96F,IAAI,GAAGy5B,WAAW,CAAC2tD,OAAO,CAAClrH,KAAK,EAAE,SAAS,CAAC;EACrD,UAAA;UACF,CAAC;UACD,IAAI0C,QAAQA,GAAG;EACb,UAAA,IAAM88H,gBAAgB,GAAGF,qBAAqB,EAAE;EAChD,UAAA,IAAIE,gBAAgB,EAAE;cACpB,OAAOA,gBAAgB,CAACtU,OAAO,CAAChrH,GAAG,GAAGs/H,gBAAgB,CAACtU,OAAO,CAAClrH,KAAK;EACtE,UAAA;EACA,UAAA,OAAO,CAAC;UACV,CAAC;UACD,IAAI2/H,YAAYA,GAAG;EAAA,UAAA,IAAAC,qBAAA;EACjB,UAAA,IAAMrZ,SAAS,GAAA,CAAAqZ,qBAAA,GAAGN,qBAAqB,EAAE,KAAA,IAAA,GAAA,MAAA,GAAvBM,qBAAA,CAAyBhtG,KAAK,CAAC2zF,SAAS;EAC1D,UAAA,IAAIA,SAAS,EAAE;EACb,YAAA,OAAOA,SAAS,CAACzzG,GAAG,CAAC,UAACu0G,KAAK,EAAA;EAAA,cAAA,OAAK7wH,CAAC,CAACk+H,cAAc,CAACrN,KAAK,CAAChyE,UAAU,CAAC;cAAA,CAAA,CAAC;EACrE,UAAA;EACA,UAAA,OAAO,EAAE;UACX,CAAC;UACD,IAAIw8E,YAAYA,GAAG;EAAA,UAAA,IAAAgO,sBAAA;YACjB,IAAMzlE,YAAY,GAAA,CAAAylE,sBAAA,GAAGP,qBAAqB,EAAE,KAAA,IAAA,GAAA,MAAA,GAAvBO,sBAAA,CAAyBjtG,KAAK;EACnD,UAAA,IAAIwnC,YAAY,IAAI5jE,CAAC,CAACkpI,qBAAqB,EAAE;EAC3C,YAAA,OAAOtlE,YAAY,CAACgtD,cAAc,CAAC5wH,CAAC,CAACkpI,qBAAqB,CAAC;EAC7D,UAAA;EACA,UAAA,OAAO,EAAE;UACX,CAAC;UACD,IAAII,YAAYA,GAAG;YACjB,OAAOR,qBAAqB,EAAE;EAChC,QAAA;SACD;QACD,OAAQ,IAAI,CAACxO,OAAO,GAAG;UACrB,IAAIhG,MAAMA,GAAG;EAAA,UAAA,IAAAiV,YAAA;EACX;YACA,OAAO,CAAA,CAAAA,YAAA,GAAAvpI,CAAC,CAAC+2H,QAAQ,KAAA,IAAA,IAAA,CAAAwS,YAAA,GAAVA,YAAA,CAAYjV,MAAM,KAAA,IAAA,GAAA,MAAA,GAAlBiV,YAAA,CAAoB7pI,KAAK,CAAC,CAAC,CAAC,KAAI,EAAE;UAC3C,CAAC;UACD,IAAIq3H,QAAQA,GAAG;EAAA,UAAA,IAAAyS,YAAA;EACb;YACA,OAAO,CAAA,CAAAA,YAAA,GAAAxpI,CAAC,CAAC+2H,QAAQ,KAAA,IAAA,IAAA,CAAAyS,YAAA,GAAVA,YAAA,CAAYjV,KAAK,KAAA,IAAA,GAAA,MAAA,GAAjBiV,YAAA,CAAmB9pI,KAAK,CAAC,CAAC,CAAC,KAAI,EAAE;UAC1C,CAAC;UACD,IAAIqpI,kBAAkBA,GAAG;YACvB,IAAID,qBAAqB,EAAE,EAAE;EAC3B,YAAA,OAAOC,kBAAkB;EAC3B,UAAA;EACA,UAAA,OAAO,IAAI;UACb,CAAC;UACD,IAAIplE,WAAWA,GAAG;EAChB,UAAA,OAAO3jE,CAAC,CAAC2jE,WAAW,CAACjkE,KAAK,CAAC,CAAC,CAAC;UAC/B,CAAC;UACD,IAAIk7H,cAAcA,GAAG;YACnB,OAAO56H,CAAC,CAAC46H,cAAc;UACzB,CAAC;UACD,IAAIr3D,aAAaA,GAAG;YAClB,OAAOgkE,sBAAsB,EAAE;UACjC,CAAC;UACD,IAAI5D,cAAcA,GAAG;EACnB,UAAA,IAAM1sB,IAAI,GAAGswB,sBAAsB,EAAE;EACrC,UAAA,OAAOvnI,CAAC,CAACg1H,aAAa,CAAC/d,IAAI,CAAC;UAC9B,CAAC;UACD,IAAIyjB,YAAYA,GAAG;YACjB,OAAO16H,CAAC,CAACkpI,qBAAqB;UAChC,CAAC;UACD,IAAIniE,WAAWA,GAAG;YAChB,OAAO/mE,CAAC,CAAC69H,oBAAoB;UAC/B,CAAC;UACD,IAAIxC,YAAYA,GAAG;EACjB,UAAA,IAAMpkB,IAAI,GAAGj3G,CAAC,CAAC69H,oBAAoB;EACnC,UAAA,OAAO79H,CAAC,CAACg1H,aAAa,CAAC/d,IAAI,CAAC;UAC9B,CAAC;EACDwd,QAAAA,OAAO,EAAE;YACP,IAAIjC,WAAWA,GAAG;cAChB,OAAOoV,cAAc,EAAE;YACzB,CAAC;YACD,IAAIpuE,WAAWA,GAAG;EAChB,YAAA,IAAM67D,WAAW,GAAGr1H,CAAC,CAACq1H,WAAW;EACjC,YAAA,OAAOA,WAAW,GAAG,CAAC,GAAGA,WAAW,GAAG,CAAC;YAC1C,CAAC;YACD,IAAI77D,WAAWA,CAAClsB,IAAY,EAAE;EAC5B86F,YAAAA,MAAM,CAAC96F,IAAI,EAAE,SAAS,CAAC;YACzB,CAAC;YACD,IAAIphC,QAAQA,GAAG;cACb,OAAO+7H,iBAAiB,CAAC,SAAS,CAAC;YACrC,CAAC;YACD,IAAIwB,aAAaA,GAAG;EAAA,YAAA,IAAAC,kBAAA;cAClB,OAAO,CAAA,CAAAA,kBAAA,GAAA1pI,CAAC,CAACiiI,cAAc,KAAA,IAAA,GAAA,MAAA,GAAhByH,kBAAA,CAAkBrlF,aAAa,KAAI,CAAC;EAC7C,UAAA;WACD;EACDswE,QAAAA,UAAU,EAAE;YACV,IAAInC,WAAWA,GAAG;EAChB,YAAA,OAAOgV,aAAa,CAClBD,sBAAsB,EAAE,EACxB,YAAY,EACZvnI,CAAC,CAAC46H,cAAc,EAChB,aAAa,EACb,aACF,CAAC;YACH,CAAC;YACD,IAAIphE,WAAWA,GAAG;EAChB,YAAA,OAAOguE,aAAa,CAClBxnI,CAAC,CAAC69H,oBAAoB,EACtB,YAAY,EACZ79H,CAAC,CAACkpI,qBAAqB,EACvB,aAAa,EACb,aACF,CAAC;YACH,CAAC;YACD,IAAI1vE,WAAWA,CAAClsB,IAAY,EAAE;EAC5B86F,YAAAA,MAAM,CAAC96F,IAAI,EAAE,YAAY,CAAC;YAC5B,CAAC;YACD,IAAIphC,QAAQA,GAAG;cACb,OAAO+7H,iBAAiB,CAAC,YAAY,CAAC;YACxC,CAAC;YACD,IAAIwB,aAAaA,GAAG;EAAA,YAAA,IAAAE,kBAAA;EAClB,YAAA,OAAO9B,cAAc,CACnB,CAAA,CAAA8B,kBAAA,GAAA3pI,CAAC,CAACiiI,cAAc,KAAA,IAAA,GAAA,MAAA,GAAhB0H,kBAAA,CAAkBtlF,aAAa,KAAI,CAAC,EACpC,YACF,CAAC;EACH,UAAA;WACD;EACDj2B,QAAAA,IAAI,EAAE,SAANA,IAAIA,GAAQ;EACV,UAAA,IAAM6oF,IAAI,GAAGj3G,CAAC,CAAC69H,oBAAoB;EACnC,UAAA,IAAMzhG,KAAK,GAAG66E,IAAI,IAAA,IAAA,GAAA,MAAA,GAAJA,IAAI,CAAE76E,KAAK;YACzB,IAAIA,KAAK,IAAI,CAACA,KAAK,CAACuzF,YAAY,CAACvhG,IAAI,EAAE;EACrC,YAAA,IAAMze,KAAK,GAAG3P,CAAC,CAACg1H,aAAa,CAAC/d,IAAI,CAAC;cACnC,IAAI76E,KAAK,CAACqnC,aAAa,EAAE;EACvB,cAAA,IAAMn2B,IAAI,GAAG2pE,IAAI,CAACyd,OAAO,CAAClrH,KAAK,GAAGytG,IAAI,CAAC76E,KAAK,CAAClwB,QAAQ;EACrDk8H,cAAAA,MAAM,CAAC96F,IAAI,GAAG,KAAK,EAAE,SAAS,CAAC;EACjC,YAAA,CAAC,MAAM;gBACLttC,CAAC,CAAC2/H,sBAAsB,CAACvjG,KAAK,EAAEzsB,KAAK,EAAEmL,QAAQ,CAAC;EAClD,YAAA;EACF,UAAA;EACF,QAAA;SACD;EACH,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAAzW,GAAA,EAAA,sBAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAAoE;QAClE,OAAO,IAAI,CAACk2H,WAAW,IAAI,IAAI,CAACzzD,WAAW,IAAI,IAAI,CAAC0zD,SAAS;EAC/D,IAAA;EAAC,GAAA,EAAA;MAAAp2H,GAAA,EAAA,uBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAkE;EAChE,MAAA,OAAO,IAAI,CAACo2H,YAAY,IAAI,IAAI,CAACC,UAAU;EAC7C,IAAA;EAAC,GAAA,EAAA;MAAAt2H,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuC;EAAA,MAAA,IAAAslI,eAAA;EACrC,MAAA,IAAM7iE,WAAW,GAAG,IAAI,CAACA,WAAW;QACpC,IAAMwtD,KAAK,GAAA,CAAAqV,eAAA,GAAG,IAAI,CAAC7S,QAAQ,KAAA,IAAA,GAAA,MAAA,GAAb6S,eAAA,CAAerV,KAAK;QAClC,IAAI,CAAC,IAAI,CAACsV,eAAe,IAAI,CAAC9iE,WAAW,IAAI,CAACwtD,KAAK,EAAE;EACnD,QAAA,OAAO,KAAK;EACd,MAAA;QAEA,OAAO,IAAI,CAACS,aAAa,CAACjuD,WAAW,CAAC,KAAKwtD,KAAK,CAACptH,MAAM,GAAG,CAAC;EAC7D,IAAA;EAAC,GAAA,EAAA;MAAA9C,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuC;EACrC,MAAA,OAAO,IAAI,CAACu5H,oBAAoB,KAAK,IAAI;EAC3C,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAAx5H,GAAA,EAAA,aAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAA8C;QAAA,IAAAwlI,oBAAA,EAAAC,OAAA;EAC5C,MAAA,IAAI,IAAI,CAACrU,cAAc,KAAK,IAAI,EAAE;EAChC;EACA,QAAA,OAAOrvH,SAAS;EAClB,MAAA;EACA;QACA,IAAM2jI,iBAAiB,GAAG,IAAI,CAACxP,WAAW,IAAI,IAAI,CAACzzD,WAAW;EAC9D,MAAA,IACE,IAAI,CAAC1lB,cAAc,CAAC2oF,iBAAiB,CAAC,IACtC,CAACA,iBAAiB,CAAC5tG,KAAK,CAACqnC,aAAa,EACtC;EACA,QAAA,OAAOp9D,SAAS;EAClB,MAAA;EACA,MAAA,IAAIoqB,KAAK,GAAG,IAAI,CAACA,KAAK;EACtB,MAAA,IAAI,CAACA,KAAK,IAAA,CAAAq5G,oBAAA,GAAI,IAAI,CAACvmE,aAAa,KAAA,IAAA,IAAA,CAAAumE,oBAAA,GAAlBA,oBAAA,CAAoB1tG,KAAK,aAAzB0tG,oBAAA,CAA2BrmE,aAAa,EAAE;EACtD;UACAhzC,KAAK,GAAG,IAAI,CAACmtG,YAAY;EAC3B,MAAA;QACA,IAAMpkE,WAAW,IAAAuwE,OAAA,GAAGt5G,KAAK,KAAA,IAAA,GAAA,MAAA,GAALs5G,OAAA,CAAOvwE,WAAW;QACtC,IAAIA,WAAW,KAAKnzD,SAAS,IAAI,CAACoI,cAAA,CAAgB+qD,WAAW,CAAC,EAAE;EAC9D,QAAA,OAAOnzD,SAAS;EAClB,MAAA;EACA,MAAA,OAAOmzD,WAAW;EACpB,IAAA;EAAC,GAAA,EAAA;MAAAn1D,GAAA,EAAA,cAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAoD;EAAA,MAAA,IAAA2lI,mBAAA;EAClD,MAAA,OAAO,IAAI,CAACx5G,KAAK,KAAA,CAAAw5G,mBAAA,GAAI,IAAI,CAAC5P,YAAY,KAAA,IAAA,GAAA,MAAA,GAAjB4P,mBAAA,CAAmBx5G,KAAK,KAAI,IAAI;EACvD,IAAA;EAAC,GAAA,EAAA;MAAApsB,GAAA,EAAA,kBAAA;MAAAC,GAAA,EAsnBD,SAAAA,GAAAA,GAAwC;QACtC,OAAO,IAAI,CAACiyB,GAAG,CAACrJ,MAAM,CAACi6C,0BAA0B,KAAK,KAAK;EAC7D,IAAA;EAAC,GAAA,EAAA;MAAA9iE,GAAA,EAAA,gBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAuD;EAAA,MAAA,IAAA4lI,oBAAA;QACrD,OAAA,CAAAA,oBAAA,GAAO,IAAI,CAACxU,cAAc,qBAAnBwU,oBAAA,CAAqBtU,IAAI,CAAChoG,OAAO;EAC1C,IAAA;EAAC,GAAA,EAAA;MAAAvpB,GAAA,EAAA,aAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAmC;EAAA,MAAA,IAAA6lI,oBAAA;QACjC,OAAO,CAAC,EAAA,CAAAA,oBAAA,GAAC,IAAI,CAAClI,cAAc,KAAA,IAAA,IAAnBkI,oBAAA,CAAqBhxG,IAAI,CAAA;EACpC,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CA1wCO50B,MAAM,CAAA;;ECvDhB,IAAMqyF,eAAa,GAAG,GAAG,CAAC;;EAO1B,IAAawzC,wBAAwB,0BAAAtzC,qBAAA,EAAA;EAQnC,EAAA,SAAAszC,yBACE7zG,GAAQ,EACRgiC,eAAgC,EAChClsD,SAAoB,EACpB;EAAA,IAAA,IAAAX,KAAA;EACAA,IAAAA,KAAA,GAAAorF,qBAAA,CAAAnrF,IAAA,CAAA,IAAA,EACE4qB,GAAG,EACHgiC,eAAe,EACflsD,SAAS,EACT,4BAA4B,EAC5BjL,iBAAiB,CAACG,QACpB,CAAC,IAAA,IAAA;EAACmK,IAAAA,KAAA,CAfI2+H,cAAc,GAAW,EAAE;MAAA3+H,KAAA,CAC3B4+H,cAAc,GAAuB,EAAE;MAAA5+H,KAAA,CACvC2rF,WAAW,GAAwB,IAAI;MAc7C3rF,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAA68H,wBAAA,EAAAtzC,qBAAA,CAAA;EAAA,EAAA,IAAA70F,MAAA,GAAAmoI,wBAAA,CAAAloI,SAAA;EAAAD,EAAAA,MAAA,CAES64C,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;MAC9B,IAAI,CAAC5e,mBAAmB,EAAE;EAC1B46D,IAAAA,qBAAA,CAAA50F,SAAA,CAAM44C,mBAAmB,CAAAnvC,IAAA,CAAA,IAAA,CAAA;MACzB,IAAI,CAAC0rF,WAAW,GAAG,IAAI;IACzB,CAAC;EAAAp1F,EAAAA,MAAA,CAES04B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5Bm8D,IAAAA,qBAAA,CAAA50F,SAAA,CAAMy4B,iBAAiB,CAAAhvB,IAAA,CAAA,IAAA,CAAA;EACvB,IAAA,IAAQ4qB,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACrDpF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACypI,uBAAuB,EAAE,IAAI,CAACC,uBAAuB,EAAE,IAAI,CAAC;EAC1Ej0G,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACg8H,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACtExmG,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACwxH,qBAAqB,EAAE,IAAI,CAACmY,qBAAqB,EAAE,IAAI,CAAC;EACtEl0G,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC4pI,uBAAuB,EAAE,IAAI,CAACC,uBAAuB,EAAE,IAAI,CAAC;EAC1Ep0G,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;IAC7D,CAAC;EAAAn2F,EAAAA,MAAA,CAESi6B,mBAAmB,GAA7B,SAAUA,mBAAmBA,GAAG;EAC9B46D,IAAAA,qBAAA,CAAA50F,SAAA,CAAMg6B,mBAAmB,CAAAvwB,IAAA,CAAA,IAAA,CAAA;EACzB,IAAA,IAAQ4qB,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC46B,YAAY,EAAE,IAAI,CAACC,aAAa,EAAE,IAAI,CAAC;EACtDpF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACypI,uBAAuB,EAAE,IAAI,CAACC,uBAAuB,EAAE,IAAI,CAAC;EAC3Ej0G,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACg8H,qBAAqB,EAAE,IAAI,CAACC,qBAAqB,EAAE,IAAI,CAAC;EACvExmG,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACwxH,qBAAqB,EAAE,IAAI,CAACmY,qBAAqB,EAAE,IAAI,CAAC;EACvEl0G,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC4pI,uBAAuB,EAAE,IAAI,CAACC,uBAAuB,EAAE,IAAI,CAAC;EAC3Ep0G,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs8D,eAAe,EAAE,IAAI,CAACg7B,gBAAgB,EAAE,IAAI,CAAC;IAC9D,CAAC;IAAAn2F,MAAA,CAED4jC,SAAS,GAAT,SAAAA,SAASA,CAACC,aAAqB,EAAEmzD,uBAAiC,EAAE;MAClE,IAAI,CAAClzD,QAAQ,EAAE;EACf,IAAA,IAAI,CAACwzB,KAAK,GAAG7B,KAAK,CAACE,IAAI;EAEvB,IAAA,IAAI,CAACr9B,WAAW,CAACq8D,eAAa,CAAC;MAE/B,IAAI,CAAC/9B,gBAAgB,GAAG,IAAI,CAACD,eAAe,GAC1C9yB,aAAa,GAAG,IAAI,CAACk1B,cAAc;MACrC,IAAI,CAACl1B,aAAa,GAAGmzD,uBAAuB,GAAG,EAAE,GAAGnzD,aAAa;MAEjE,IAAI,CAAC+U,IAAI,EAAE;IACb,CAAC;EAAA54C,EAAAA,MAAA,CAESg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAG;EAC5B67D,IAAAA,qBAAA,CAAA50F,SAAA,CAAM+4B,iBAAiB,CAAAtvB,IAAA,CAAA,IAAA,CAAA;MACvB,IAAI,CAAC0rF,WAAW,GAAG,IAAI;IACzB,CAAC;IAAAp1F,MAAA,CAESs4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;MACA,IAAI,CAACs9H,cAAc,GAAG,EAAE;MACxBxzC,qBAAA,CAAA50F,SAAA,CAAMq4D,gBAAgB,CAAA5uD,IAAA,CAAA,IAAA,EAACywB,KAAK,EAAEpvB,IAAI,CAAA;IACpC,CAAC;IAAA/K,MAAA,CAEO05B,aAAa,GAArB,SAAQA,aAAaA,CAACS,KAA0B,EAAEpvB,IAAqB,EAAE;EACvE,IAAA,IAAI,CAACqqF,WAAW,GAAGrqF,IAAI,CAAC4gB,OAAO;IACjC,CAAC;IAAA3rB,MAAA,CAEO0oI,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAC7BvuG,KAAqC,EACrCpvB,IAA2B,EAC3B;EACA,IAAA,IAAQ1B,IAAI,GAAc0B,IAAI,CAAtB1B,IAAI;QAAE0/G,OAAO,GAAKh+G,IAAI,CAAhBg+G,OAAO;EACrB,IAAA,IAAI,CAAC,IAAI,CAACnvD,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EAClC,MAAA,IAAID,eAAe,CAACC,IAAI,CAAC,EAAE;UACzB,IAAI,CAACy2B,YAAY,GAAGz2B,IAAI;EAC1B,MAAA;EACA,MAAA,IAAI,CAACiuD,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,IAAA;MACA,IAAI,CAACozD,OAAO,EAAE;EACZ,MAAA;EACF,IAAA;MAEA,IAAMt+E,QAAQ,GAAG,IAAI,CAAC49F,cAAc,CAAC,IAAI,CAACD,cAAc,CAAC;MACzD,IAAI,CAAC39F,QAAQ,EAAE;EACb,MAAA;EACF,IAAA;;EAEA;EACA;EACA,IAAA,IAAIK,SAAgC;EACpC,IAAA,IAAMm8D,SAAS,GAAG59F,IAAI,CAAC9B,KAAK;EAC5B,IAAA,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqkC,QAAQ,CAACvlC,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACxC,MAAA,IAAI6gG,SAAS,IAAIx8D,QAAQ,CAACrkC,CAAC,CAAC,CAACmB,KAAK,IAAI0/F,SAAS,IAAIx8D,QAAQ,CAACrkC,CAAC,CAAC,CAACqB,GAAG,EAAE;EAClEqjC,QAAAA,SAAS,GAAGL,QAAQ,CAACrkC,CAAC,CAAC;EACvB,QAAA;EACF,MAAA;EACF,IAAA;MAEA,IAAMuiI,OAAO,GAAGt/H,IAAI,CAAC9B,KAAK,GAAG8B,IAAI,CAACY,QAAQ;EAC1C,IAAA,IAAI6gC,SAAS,EAAE;QACbA,SAAS,CAACrjC,GAAG,GAAGkhI,OAAO;EACzB,IAAA,CAAC,MAAM;EACL79F,MAAAA,SAAS,GAAG;EACVvjC,QAAAA,KAAK,EAAE0/F,SAAS;EAChBx/F,QAAAA,GAAG,EAAEkhI;SACN;EACDl+F,MAAAA,QAAQ,CAAC17B,IAAI,CAAC+7B,SAAS,CAAC;EAC1B,IAAA;EACA,IAAA,IAAI,CAACwrB,eAAe,CAACpqB,YAAY,CAAC7iC,IAAqB,CAAC;EACxD,IAAA,IAAI,CAAC8yD,oBAAoB,CAAC9yD,IAAI,EAAE,IAAI,CAAC;MACrC,IAAI,IAAI,CAACmlB,KAAK,EAAE;QACd,IAAI,CAACoqB,IAAI,EAAE;EACb,IAAA;IACF,CAAC;IAAA54C,MAAA,CAEOm2F,gBAAgB,GAAxB,SAAQA,gBAAgBA,CACtBh8D,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAQiwD,WAAW,GAAgBjwD,IAAI,CAA/BiwD,WAAW;QAAEC,SAAS,GAAKlwD,IAAI,CAAlBkwD,SAAS;MAC9B,IAAID,WAAW,KAAK,CAAC,IAAIC,SAAS,KAAK58D,MAAM,CAACi5B,iBAAiB,EAAE;EAC/D,MAAA,IAAMsxG,kBAAkB,GAAG3tE,SAAS,GAAG,CAAC;QACxC,IAAI2tE,kBAAkB,IAAI,CAAC,EAAE;EAC3B,QAAA;EACF,MAAA;QACA79H,IAAI,CAAC69H,kBAAkB,GAAG3qI,IAAI,CAACsD,GAAG,CAAC,CAAC,EAAEqnI,kBAAkB,CAAC;EACzD,MAAA,IAAI,CAACP,cAAc,CAACrkI,OAAO,CAAC,UAACymC,QAAQ,EAAK;UACxC,KAAK,IAAIrkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqkC,QAAQ,CAACvlC,MAAM,GAAI;YACrC,IAAIulC,QAAQ,CAACrkC,CAAC,CAAC,CAACqB,GAAG,IAAImhI,kBAAkB,EAAE;cACzCn+F,QAAQ,CAACltB,KAAK,EAAE;EAChB,YAAA;YACF,CAAC,MAAM,IAAIktB,QAAQ,CAACrkC,CAAC,CAAC,CAACmB,KAAK,GAAGqhI,kBAAkB,EAAE;EACjDn+F,YAAAA,QAAQ,CAACrkC,CAAC,CAAC,CAACmB,KAAK,GAAGqhI,kBAAkB;EACxC,UAAA,CAAC,MAAM;EACL,YAAA;EACF,UAAA;EACAxiI,UAAAA,CAAC,EAAE;EACL,QAAA;EACF,MAAA,CAAC,CAAC;EACF,MAAA,IAAI,CAACkwD,eAAe,CAACnpB,sBAAsB,CACzC6tB,WAAW,EACX4tE,kBAAkB,EAClBzpI,iBAAiB,CAACG,QACpB,CAAC;EACH,IAAA;EACF,EAAA;;EAEA;EAAA;IAAAU,MAAA,CACUg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAE;EACtD,IAAA,IAAM1B,IAAI,GAAG0B,IAAI,CAAC1B,IAAI;MAEtB,IAAI,CAAAA,IAAI,IAAA,IAAA,GAAA,MAAA,GAAJA,IAAI,CAAEjG,IAAI,MAAKjE,iBAAiB,CAACG,QAAQ,EAAE;EAC7C,MAAA,IAAIyL,IAAI,CAAC4gB,OAAO,KAAK/sB,YAAY,CAACmmC,QAAQ,EAAE;UAC1C,IAAI,CAACuxB,eAAe,CAACpqB,YAAY,CAAC7iC,IAAI,EAAmB,IAAI,CAAC;EAChE,MAAA;QACA,IAAI,IAAI,CAAC4rB,WAAW,EAAE;EACpB,QAAA,IAAI,CAACA,WAAW,CAACjpB,aAAa,EAAE;EAClC,MAAA;EACA,MAAA,IAAI,IAAI,CAACsrD,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChC,QAAA,IAAI,CAAC4B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,MAAA;EACF,IAAA;EACF,EAAA;;EAEA;EAAA;IAAA31D,MAAA,CACQuoI,uBAAuB,GAA/B,SAAQA,uBAAuBA,CAC7BpuG,KAAqC,EAAAtwB,IAAA,EAErC;EAAA,IAAA,IAAA8D,MAAA,GAAA,IAAA;EAAA,IAAA,IADEqwG,cAAc,GAAAn0G,IAAA,CAAdm0G,cAAc;EAEhB,IAAA,IAAI,IAAI,CAAClsF,MAAM,IAAIspE,wBAAwB,CAAC,IAAI,CAACtpE,MAAM,EAAEksF,cAAc,CAAC,EAAE;QACxE,IAAI,CAAClsF,MAAM,GAAGksF,cAAc,CAAC3jG,GAAG,CAC9B,UAACo9E,aAAa,EAAA;EAAA,QAAA,OAAK,IAAIjrE,KAAK,CAACirE,aAAa,CAAC;EAAA,MAAA,CAC7C,CAAC;EACD,MAAA;EACF,IAAA;MACA,IAAI,CAAC4wC,cAAc,GAAG,EAAE;MACxB,IAAI,CAACv2G,MAAM,GAAGksF,cAAc,CAAC3jG,GAAG,CAAC,UAACo9E,aAAa,EAAK;EAClD,MAAA,IAAMptF,KAAK,GAAG,IAAImiB,KAAK,CAACirE,aAAa,CAAC;QACtC9pF,MAAI,CAAC06H,cAAc,CAACh+H,KAAK,CAAChH,EAAE,CAAC,GAAG,EAAE;EAClC,MAAA,OAAOgH,KAAK;EACd,IAAA,CAAC,CAAC;EACF,IAAA,IAAI,CAACisD,eAAe,CAACnpB,sBAAsB,CACzC,CAAC,EACD9uC,MAAM,CAACi5B,iBAAiB,EACxBn4B,iBAAiB,CAACG,QACpB,CAAC;MACD,IAAI,CAACwgC,YAAY,GAAG,IAAI;MACxB,IAAI,CAAC42B,WAAW,GAAG,IAAI;IACzB,CAAC;IAAA12D,MAAA,CAEO86H,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3B3gG,KAAmC,EACnCpvB,IAAuB,EACvB;EAAA,IAAA,IAAAqxD,YAAA;EACA,IAAA,IAAI,CAACgsE,cAAc,GAAGr9H,IAAI,CAAC1H,EAAE;EAE7B,IAAA,IAAI,GAAA+4D,YAAA,GAAC,IAAI,CAACtqC,MAAM,KAAA,IAAA,IAAXsqC,YAAA,CAAal3D,MAAM,KAAI,IAAI,CAACkjI,cAAc,KAAK,EAAE,EAAE;QACtD,IAAI,CAAC1sG,aAAa,EAAE;EACpB,MAAA;EACF,IAAA;;EAEA;MACA,IAAM0gE,YAAY,GAAG,IAAI,CAACtqE,MAAM,CAAC,IAAI,CAACs2G,cAAc,CAAC;EACrD,IAAA,IAAIhsC,YAAY,IAAA,IAAA,IAAZA,YAAY,CAAEzwE,OAAO,EAAE;EACzB,MAAA,IAAI,CAAC+qC,WAAW,GAAG,IAAI,CAACmyE,qBAAqB;EAC/C,IAAA,CAAC,MAAM;QACL,IAAI,CAACnyE,WAAW,GAAG,IAAI;EACzB,IAAA;MACA,IAAI0lC,YAAY,IAAI,IAAI,CAAC9kC,KAAK,KAAK7B,KAAK,CAACC,OAAO,EAAE;EAChD,MAAA,IAAI,CAACp9B,WAAW,CAACq8D,eAAa,CAAC;EACjC,IAAA;EACF,EAAA;;EAEA;EAAA;IAAA30F,MAAA,CACQwoI,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAC3BruG,KAAmC,EACnCpvB,IAAqB,EACrB;EAAA,IAAA,IAAAw5B,cAAA;EACA,IAAA,IAAQ6jG,cAAc,GAAa,IAAI,CAA/BA,cAAc;QAAEt2G,MAAM,GAAK,IAAI,CAAfA,MAAM;EAC9B,IAAA,IAAiBo/B,UAAU,GAAkBnmD,IAAI,CAAzC4gB,OAAO;QAAkBra,OAAO,GAAKvG,IAAI,CAApB1H,EAAE;MAC/B,IAAI,CAACyuB,MAAM,EAAE;EACX,MAAA,IAAI,CAACnvB,IAAI,CAAA,iDAAA,GAAmD2O,OAAS,CAAC;EACtE,MAAA;EACF,IAAA;EACA,IAAA,IAAMW,KAAY,GAAG6f,MAAM,CAACxgB,OAAO,CAAC;MACpC,IAAIA,OAAO,IAAIwgB,MAAM,CAAC5sB,MAAM,IAAI,CAAC+M,KAAK,EAAE;EACtC,MAAA;EACF,IAAA;EACA,IAAA,IAAI,CAAClS,GAAG,CAAA,iBAAA,GACYuR,OAAO,GAAA,WAAA,GAAY4/C,UAAU,CAAC/Q,OAAO,GAAA,GAAA,GACrD+Q,UAAU,CAACxR,KAAK,UAEhBwR,UAAU,CAACzP,UAAU,GAAA,QAAA,GACRyP,UAAU,CAACzP,UAAU,GAAA,GAAA,GAAIyP,UAAU,CAACvP,aAAa,GAAA,GAAA,GAC1D,EAAE,CAAA,GAAA,YAAA,GACKuP,UAAU,CAAC5Q,aAC1B,CAAC;EACD,IAAA,IAAI,CAACoW,WAAW,GAAG,IAAI,CAACmyE,qBAAqB;MAC7C,IAAIn1E,OAAO,GAAG,CAAC;EACf,IAAA,IAAIxC,UAAU,CAACh6B,IAAI,IAAA,CAAAqN,cAAA,GAAItyB,KAAK,CAAC0Z,OAAO,KAAA,IAAA,IAAb4Y,cAAA,CAAerN,IAAI,EAAE;QAC1C,IAAIg6B,UAAU,CAAClQ,iBAAiB,EAAE;EAChC,QAAA;EACF,MAAA;EACA,MAAA,IAAMo0C,WAAW,GAAG,IAAI,CAACA,WAAW;QACpC,IAAI,CAACA,WAAW,EAAE;UAChB,IAAI,CAACp+B,kBAAkB,GAAG,KAAK;EAC/B,QAAA;EACF,MAAA;EACA,MAAA,IAAM8xE,wBAAwB,GAAG1zC,WAAW,CAACh2D,SAAS,CAAC,CAAC,CAAC;EACzD,MAAA,IAAI,CAACntB,KAAK,CAAC0Z,OAAO,EAAE;EAClB,QAAA,IAAIulC,UAAU,CAACrD,kBAAkB,IAAIunC,WAAW,CAACvnC,kBAAkB,EAAE;EACnEkH,UAAAA,uBAAuB,CAAC7D,UAAU,EAAEkkC,WAAW,CAAC;YAChD1hC,OAAO,GAAGxC,UAAU,CAAC9O,aAAa;UACpC,CAAC,MAAM,IAAI0mF,wBAAwB,EAAE;EACnC;YACAp1E,OAAO,GAAGo1E,wBAAwB,CAACvhI,KAAK;EACxCosD,UAAAA,UAAU,CAACzC,UAAU,EAAEwC,OAAO,CAAC;EACjC,QAAA;EACF,MAAA,CAAC,MAAM;EAAA,QAAA,IAAAokC,qBAAA;UACLpkC,OAAO,GAAG,IAAI,CAAC0O,cAAc,CAC3BlR,UAAU,EACVj/C,KAAK,CAAC0Z,OAAO,GAAAmsE,qBAAA,GACb,IAAI,CAAC/gC,eAAe,qBAApB+gC,qBAAA,CAAsBnsE,OACxB,CAAC;EACD,QAAA,IAAI+nC,OAAO,KAAK,CAAC,IAAIo1E,wBAAwB,EAAE;EAC7C;YACAp1E,OAAO,GAAGo1E,wBAAwB,CAACvhI,KAAK;EACxCosD,UAAAA,UAAU,CAACzC,UAAU,EAAEwC,OAAO,CAAC;EACjC,QAAA;EACF,MAAA;EACA;EACA,MAAA,IAAI0hC,WAAW,IAAI,CAAC,IAAI,CAACp+B,kBAAkB,EAAE;EAC3C,QAAA,IAAI,CAAC4L,gBAAgB,CAACwyB,WAAW,EAAE1hC,OAAO,CAAC;EAC7C,MAAA;EACF,IAAA;MACAzhD,KAAK,CAAC0Z,OAAO,GAAGulC,UAAU;MAC1B,IAAI,CAAC6F,eAAe,GAAG9kD,KAAK;MAE5B,IAAIX,OAAO,KAAK82H,cAAc,EAAE;EAC9B,MAAA;EACF,IAAA;MAEA,IAAI,CAAC9zG,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk8H,sBAAsB,EAAE;EAC9CpvG,MAAAA,OAAO,EAAEulC,UAAU;EACnB7tD,MAAAA,EAAE,EAAEiO,OAAO;QACX0W,OAAO,EAAEjd,IAAI,CAACid;EAChB,KAAC,CAAC;;EAEF;MACA,IAAI,CAAC4wB,IAAI,EAAE;;EAEX;MACA,IACEsY,UAAU,CAACh6B,IAAI,IACf,CAAC,IAAI,CAACjC,WAAW,IACjB,IAAI,CAACzG,KAAK,IACV,IAAI,CAAC8oC,KAAK,KAAK7B,KAAK,CAACE,IAAI,EACzB;EACA,MAAA,IAAMozE,SAAS,GAAGlpG,iBAAiB,CACjC,IAAI,EACJqxB,UAAU,CAAC9xB,SAAS,EACpB,IAAI,CAAC5Q,KAAK,CAAC+oC,WAAW,EACtB,CACF,CAAC;QACD,IAAI,CAACwxE,SAAS,EAAE;EACd,QAAA,IAAI,CAACpmI,IAAI,CAAC,6CAA6C,CAAC;UACxDsP,KAAK,CAAC0Z,OAAO,GAAGvnB,SAAS;EAC3B,MAAA;EACF,IAAA;IACF,CAAC;EAAApE,EAAAA,MAAA,CAEDi6D,2BAA2B,GAA3B,SAAAA,2BAA2BA,CAACsD,cAA8B,EAAE;EAAA,IAAA,IAAA/gC,MAAA,GAAA,IAAA;EAC1D,IAAA,IAAQnzB,IAAI,GAAck0D,cAAc,CAAhCl0D,IAAI;QAAE4U,OAAO,GAAKs/C,cAAc,CAA1Bt/C,OAAO;EACrB,IAAA,IAAMq9C,WAAW,GAAGjyD,IAAI,CAAC0M,WAAW;EACpC,IAAA,IAAMue,GAAG,GAAG,IAAI,CAACA,GAAG;EAEpB,IAAA,IAAI,IAAI,CAACslC,kBAAkB,CAACvwD,IAAI,CAAC,EAAE;EACjC,MAAA;EACF,IAAA;EACA;MACA,IACE4U,OAAO,IACPA,OAAO,CAACvR,UAAU,GAAG,CAAC,IACtB4uD,WAAW,IAAA,IAAA,IAAXA,WAAW,CAAEl5D,GAAG,IAChBk5D,WAAW,CAACptB,EAAE,IACdsU,uBAAuB,CAAC8Y,WAAW,CAACrjB,MAAM,CAAC,EAC3C;EACA,MAAA,IAAM5L,SAAS,GAAG1W,WAAW,CAACD,GAAG,EAAE;EACnC;EACA,MAAA,IAAI,CAACuhC,SAAS,CACX5oB,OAAO,CACN,IAAI1nC,UAAU,CAACsX,OAAO,CAAC,EACvBq9C,WAAW,CAACl5D,GAAG,CAAC0E,MAAM,EACtBw0D,WAAW,CAACptB,EAAE,CAACpnC,MAAM,EACrB27C,+BAA+B,CAAC6Y,WAAW,CAACrjB,MAAM,CACpD,CAAC,CACAtuB,KAAK,CAAC,UAAC+qB,GAAG,EAAK;EACdpgB,QAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACk7B,KAAK,EAAE;YACxB32B,IAAI,EAAEzE,UAAU,CAACy5C,WAAW;YAC5BzsB,OAAO,EAAE/sB,YAAY,CAAComC,kBAAkB;EACxC1K,UAAAA,KAAK,EAAE,KAAK;EACZp9B,UAAAA,KAAK,EAAEw3C,GAAG;YACVtjB,MAAM,EAAEsjB,GAAG,CAAClM,OAAO;EACnBn/B,UAAAA,IAAI,EAAJA;EACF,SAAC,CAAC;EACF,QAAA,MAAMqrC,GAAG;EACX,MAAA,CAAC,CAAC,CACDhrB,IAAI,CAAC,UAAC6xC,aAAa,EAAK;EACvB,QAAA,IAAMjvB,OAAO,GAAG3W,WAAW,CAACD,GAAG,EAAE;EACjCpB,QAAAA,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC28D,cAAc,EAAE;EACjCnyD,UAAAA,IAAI,EAAJA,IAAI;EACJ4U,UAAAA,OAAO,EAAEs9C,aAAa;EACtBhvD,UAAAA,KAAK,EAAE;EACLkvD,YAAAA,MAAM,EAAEpvB,SAAS;EACjBqvB,YAAAA,QAAQ,EAAEpvB;EACZ;EACF,SAAC,CAAC;EACJ,MAAA,CAAC,CAAC,CACD3iB,KAAK,CAAC,UAAC+qB,GAAG,EAAK;UACdlY,MAAI,CAAC75B,IAAI,CAAI+xC,GAAG,CAACrvC,IAAI,GAAA,IAAA,GAAKqvC,GAAG,CAAClM,OAAS,CAAC;EACxChM,QAAAA,MAAI,CAAC86B,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACzB,MAAA,CAAC,CAAC;EACN,IAAA;IACF,CAAC;EAAA31D,EAAAA,MAAA,CAEDm5C,MAAM,GAAN,SAAAA,MAAMA,GAAG;EACP,IAAA,IAAI,CAAC,IAAI,CAAC3qB,KAAK,EAAE;EACf,MAAA,IAAI,CAAC8oC,KAAK,GAAG7B,KAAK,CAACE,IAAI;EACvB,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,IAAI,CAAC2B,KAAK,KAAK7B,KAAK,CAACE,IAAI,EAAE;EAC7B,MAAA,IAAQyyE,cAAc,GAAa,IAAI,CAA/BA,cAAc;UAAEt2G,MAAM,GAAK,IAAI,CAAfA,MAAM;EAC9B,MAAA,IAAM7f,KAAK,GAAG6f,MAAM,oBAANA,MAAM,CAAGs2G,cAAc,CAAC;EACtC,MAAA,IAAI,CAACn2H,KAAK,IAAI,CAAC6f,MAAM,CAAC5sB,MAAM,IAAI,CAAC+M,KAAK,CAAC0Z,OAAO,EAAE;EAC9C,QAAA;EACF,MAAA;EACA,MAAA,IAAI,IAAI,CAACkvC,WAAW,CAAC5oD,KAAK,CAAC,EAAE;EAC3B,QAAA;EACF,MAAA;EACA,MAAA,IAAQgZ,MAAM,GAAK,IAAI,CAAfA,MAAM;EACd,MAAA,IAAMssC,WAAW,GAAG,IAAI,CAACmH,eAAe,EAAE;QAC1C,IAAMxkB,YAAY,GAAGN,YAAY,CAACM,YAAY,CAC5C,IAAI,CAACmuF,cAAc,CAAC,IAAI,CAACD,cAAc,CAAC,IAAI,EAAE,EAC9C7wE,WAAW,EACXtsC,MAAM,CAACusC,aACT,CAAC;EACD,MAAA,IAAaiC,gBAAgB,GAAqBvf,YAAY,CAAtDzyC,GAAG;UAAyBgzC,SAAS,GAAKP,YAAY,CAA/Bl0C,GAAG;EAClC,MAAA,IAAM6wF,YAAY,GAAG5kF,KAAK,CAAC0Z,OAAuB;QAClD,IAAM+zC,SAAS,GACb,IAAI,CAACprC,GAAG,CAACkmC,eAAe,GAAGq8B,YAAY,CAACx0C,mBAAmB;QAE7D,IAAI5H,SAAS,GAAGilB,SAAS,EAAE;EACzB,QAAA;EACF,MAAA;EACA,MAAA,IAAMtgC,SAAS,GAAGy3D,YAAY,CAACz3D,SAAS;EACxC,MAAA,IAAM8gC,OAAO,GAAG9gC,SAAS,CAACl6B,MAAM;EAChC,MAAA,IAAMuC,GAAG,GAAGovF,YAAY,CAACrkC,IAAI;QAE7B,IAAIu2E,SAA+B,GAAG,IAAI;EAC1C,MAAA,IAAMjpG,YAAY,GAAG,IAAI,CAACA,YAAY;QACtC,IAAI25B,gBAAgB,GAAGhyD,GAAG,EAAE;EAC1B,QAAA,IAAMkwD,SAAS,GAAG1sC,MAAM,CAACqU,sBAAsB;UAC/C,IAAM2iC,eAAe,GACnBxI,gBAAgB,GAAGhyD,GAAG,GAAGkwD,SAAS,GAAG,CAAC,GAAGA,SAAS;UACpDoxE,SAAS,GAAGlpG,iBAAiB,CAC3BC,YAAY,EACZV,SAAS,EACTnhC,IAAI,CAACsD,GAAG,CAAC69B,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK,EAAEkyD,gBAAgB,CAAC,EAC9CwI,eACF,CAAC;EACD,QAAA,IACE,CAAC8mE,SAAS,IACVjpG,YAAY,IACZA,YAAY,CAACv4B,KAAK,GAAG63B,SAAS,CAAC,CAAC,CAAC,CAAC73B,KAAK,EACvC;EACAwhI,UAAAA,SAAS,GAAG3pG,SAAS,CAAC,CAAC,CAAC;EAC1B,QAAA;EACF,MAAA,CAAC,MAAM;EACL2pG,QAAAA,SAAS,GAAG3pG,SAAS,CAAC8gC,OAAO,GAAG,CAAC,CAAC;EACpC,MAAA;QACA6oE,SAAS,GAAG,IAAI,CAACpoE,qBAAqB,CAACooE,SAAS,EAAE92H,KAAK,CAAC0Z,OAAO,CAAC;QAChE,IAAI,CAACo9G,SAAS,EAAE;EACd,QAAA;EACF,MAAA;EACA;QACA,IAAMnoE,QAAQ,GAAGmoE,SAAS,CAACz/H,EAAE,GAAGutF,YAAY,CAAC12C,OAAO;EACpD,MAAA,IAAM2L,QAAQ,GAAG1sB,SAAS,CAACwhC,QAAQ,GAAG,CAAC,CAAC;QACxC,IACE9U,QAAQ,IACRA,QAAQ,CAACxhD,EAAE,KAAKy+H,SAAS,CAACz+H,EAAE,IAC5B,IAAI,CAACgsD,eAAe,CAACzpB,QAAQ,CAACif,QAAQ,CAAC,KAAK5iB,aAAa,CAACC,UAAU,EACpE;EACA4/F,QAAAA,SAAS,GAAGj9E,QAAQ;EACtB,MAAA;EACA,MAAA,IACE,IAAI,CAACwK,eAAe,CAACzpB,QAAQ,CAACk8F,SAAS,CAAC,KAAK7/F,aAAa,CAACC,UAAU,EACrE;EACA;EACA,QAAA,IAAM6/F,UAAU,GAAG,IAAI,CAACnoE,yBAAyB,CAACkoE,SAAS,CAAC;EAC5D,QAAA,IAAIC,UAAU,EAAE;YACd,IAAI,CAACxvE,YAAY,CAACwvE,UAAU,EAAE/2H,KAAK,EAAEwnD,gBAAgB,CAAC;EACxD,QAAA;EACF,MAAA;EACF,IAAA;IACF,CAAC;IAAAz5D,MAAA,CAESw5D,YAAY,GAAtB,SAAUA,YAAYA,CACpBnwD,IAAc,EACdgB,KAAY,EACZovD,gBAAwB,EACxB;EACA,IAAA,IAAI,CAACrwD,eAAe,CAACC,IAAI,CAAC,EAAE;EAC1B,MAAA,IAAI,CAAC+xD,gBAAgB,CAAC/xD,IAAI,EAAEgB,KAAK,CAAC;EACpC,IAAA,CAAC,MAAM;QACLwqF,qBAAA,CAAA50F,SAAA,CAAMu5D,YAAY,CAAA9vD,IAAA,CAAA,IAAA,EAACL,IAAI,EAAEgB,KAAK,EAAEovD,gBAAgB,CAAA;EAClD,IAAA;IACF,CAAC;IAAA,OAAAt3D,YAAA,CAAAgmI,wBAAA,EAAA,CAAA;MAAA/lI,GAAA,EAAA,uBAAA;MAAAC,GAAA,EAED,SAAAA,GAAAA,GAAwC;EACtC,MAAA,OAAO,IAAI4mI,kBAAkB,CAC3B,IAAI,CAACZ,cAAc,CAAC,IAAI,CAACD,cAAc,CAAC,IAAI,EAC9C,CAAC;EACH,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CA5dOhyE,oBAAoB,CAAA;EA6d7B,IAEK6yE,kBAAkB,GAGtB,SAAAA,kBAAAA,CAAYC,UAAuB,EAAE;EAAA,EAAA,IAAA,CAFrBz+F,QAAQ,GAAA,MAAA;IAGtB,IAAM0+F,QAAQ,GAAG,SAAXA,QAAQA,CACZ9jI,IAAqB,EACrBqI,KAAa,EACbxI,MAAc,EACH;MACXwI,KAAK,GAAGA,KAAK,KAAK,CAAC;EACnB,IAAA,IAAIA,KAAK,GAAGxI,MAAM,GAAG,CAAC,EAAE;QACtB,MAAM,IAAIqiG,YAAY,CAAA,qBAAA,GACEliG,IAAI,+CAA0CqI,KAAK,GAAA,uCAAA,GAAwCxI,MAAM,GAAA,GACzH,CAAC;EACH,IAAA;EACA,IAAA,OAAOgkI,UAAU,CAACx7H,KAAK,CAAC,CAACrI,IAAI,CAAC;IAChC,CAAC;IACD,IAAI,CAAColC,QAAQ,GAAG;MACd,IAAIvlC,MAAMA,GAAG;QACX,OAAOgkI,UAAU,CAAChkI,MAAM;MAC1B,CAAC;EACDuC,IAAAA,GAAG,EAAA,SAAHA,GAAGA,CAACiG,KAAa,EAAU;QACzB,OAAOy7H,QAAQ,CAAC,KAAK,EAAEz7H,KAAK,EAAEw7H,UAAU,CAAChkI,MAAM,CAAC;MAClD,CAAC;EACDqC,IAAAA,KAAK,EAAA,SAALA,KAAKA,CAACmG,KAAa,EAAU;QAC3B,OAAOy7H,QAAQ,CAAC,OAAO,EAAEz7H,KAAK,EAAEw7H,UAAU,CAAChkI,MAAM,CAAC;EACpD,IAAA;KACD;EACH,CAAC;;ECviBI,SAASkkI,iBAAiBA,CAACn3H,KAAgB,EAAEo3H,OAAyB,EAAE;EAC7E,EAAA,IAAIlvG,KAAY;IAChB,IAAI;EACFA,IAAAA,KAAK,GAAG,IAAImvG,KAAK,CAAC,UAAU,CAAC;IAC/B,CAAC,CAAC,OAAO50F,GAAG,EAAE;EACZ;EACAva,IAAAA,KAAK,GAAGs0E,QAAQ,CAAC86B,WAAW,CAAC,OAAO,CAAC;MACrCpvG,KAAK,CAACqvG,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC;EAC3C,EAAA;IACCrvG,KAAK,CAASloB,KAAK,GAAGA,KAAK;EAC5Bo3H,EAAAA,OAAO,CAACI,aAAa,CAACtvG,KAAK,CAAC;EAC9B;EAEO,SAASuvG,aAAaA,CAACz3H,KAAgB,EAAEktC,GAAW,EAAE;EAC3D;EACA;EACA;EACA,EAAA,IAAMwqF,IAAI,GAAG13H,KAAK,CAAC03H,IAAI;IACvB,IAAIA,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAG,QAAQ;EACvB,EAAA;EACA,EAAA,IAAI13H,KAAK,CAAC23H,IAAI,IAAI,CAAC33H,KAAK,CAAC23H,IAAI,CAACC,UAAU,CAAC1qF,GAAG,CAAC97C,EAAE,CAAC,EAAE;MAChD,IAAI;EACF4O,MAAAA,KAAK,CAAC63H,MAAM,CAAC3qF,GAAG,CAAC;QACjB,IAAI,CAACltC,KAAK,CAAC23H,IAAI,CAACC,UAAU,CAAC1qF,GAAG,CAAC97C,EAAE,CAAC,EAAE;EAClC,QAAA,MAAM,IAAI6kB,KAAK,CAAA,wBAAA,GAA0Bi3B,GAAK,CAAC;EACjD,MAAA;MACF,CAAC,CAAC,OAAOzK,GAAG,EAAE;EACZlyC,MAAAA,MAAM,CAACE,KAAK,CAAA,qBAAA,GAAuBgyC,GAAK,CAAC;QACzC,IAAI;EACF,QAAA,IAAMq1F,YAAY,GAAG,IAAKxmI,IAAI,CAACymI,YAAY,CACzC7qF,GAAG,CAAC9S,SAAS,EACb8S,GAAG,CAAC7S,OAAO,EACX6S,GAAG,CAACjwC,IACN,CAAC;EACD66H,QAAAA,YAAY,CAAC1mI,EAAE,GAAG87C,GAAG,CAAC97C,EAAE;EACxB4O,QAAAA,KAAK,CAAC63H,MAAM,CAACC,YAAY,CAAC;QAC5B,CAAC,CAAC,OAAOE,IAAI,EAAE;EACbznI,QAAAA,MAAM,CAACE,KAAK,CAAA,0DAAA,GACiDunI,IAC7D,CAAC;EACH,MAAA;EACF,IAAA;EACF,EAAA;IACA,IAAIN,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAGA,IAAI;EACnB,EAAA;EACF;EAEO,SAASO,gBAAgBA,CAC9Bj4H,KAAgB,EAChBk4H,YAAkC,EAClC;EACA;EACA;EACA;EACA,EAAA,IAAMR,IAAI,GAAG13H,KAAK,CAAC03H,IAAI;IACvB,IAAIA,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAG,QAAQ;EACvB,EAAA;IACA,IAAI13H,KAAK,CAAC23H,IAAI,EAAE;MACd,KAAK,IAAIxjI,CAAC,GAAG6L,KAAK,CAAC23H,IAAI,CAAC1kI,MAAM,EAAEkB,CAAC,EAAE,GAAI;EACrC,MAAA,IAAI+jI,YAAY,EAAE;UAChBl4H,KAAK,CAAC23H,IAAI,CAACxjI,CAAC,CAAC,CAACmvD,mBAAmB,CAAC,OAAO,EAAE40E,YAAY,CAAC;EAC1D,MAAA;QACAl4H,KAAK,CAACm4H,SAAS,CAACn4H,KAAK,CAAC23H,IAAI,CAACxjI,CAAC,CAAC,CAAC;EAChC,IAAA;EACF,EAAA;IACA,IAAIujI,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAGA,IAAI;EACnB,EAAA;EACF;EAEO,SAASU,iBAAiBA,CAC/Bp4H,KAAgB,EAChB1K,KAAa,EACbE,GAAW,EACX+O,SAA0C,EAC1C;EACA,EAAA,IAAMmzH,IAAI,GAAG13H,KAAK,CAAC03H,IAAI;IACvB,IAAIA,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAG,QAAQ;EACvB,EAAA;IAEA,IAAI13H,KAAK,CAAC23H,IAAI,IAAI33H,KAAK,CAAC23H,IAAI,CAAC1kI,MAAM,GAAG,CAAC,EAAE;MACvC,IAAM0kI,IAAI,GAAGU,cAAc,CAACr4H,KAAK,CAAC23H,IAAI,EAAEriI,KAAK,EAAEE,GAAG,CAAC;EACnD,IAAA,KAAK,IAAIrB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwjI,IAAI,CAAC1kI,MAAM,EAAEkB,CAAC,EAAE,EAAE;QACpC,IAAI,CAACoQ,SAAS,IAAIA,SAAS,CAACozH,IAAI,CAACxjI,CAAC,CAAC,CAAC,EAAE;EACpC6L,QAAAA,KAAK,CAACm4H,SAAS,CAACR,IAAI,CAACxjI,CAAC,CAAC,CAAC;EAC1B,MAAA;EACF,IAAA;EACF,EAAA;IACA,IAAIujI,IAAI,KAAK,UAAU,EAAE;MACvB13H,KAAK,CAAC03H,IAAI,GAAGA,IAAI;EACnB,EAAA;EACF;;EAEA;EACA;EACA,SAASY,wBAAwBA,CAC/BX,IAAuC,EACvCv+F,IAAY,EACJ;EACR;IACA,IAAIA,IAAI,IAAIu+F,IAAI,CAAC,CAAC,CAAC,CAACv9F,SAAS,EAAE;EAC7B,IAAA,OAAO,CAAC;EACV,EAAA;EACA;EACA,EAAA,IAAMrmC,GAAG,GAAG4jI,IAAI,CAAC1kI,MAAM,GAAG,CAAC;IAC3B,IAAImmC,IAAI,GAAGu+F,IAAI,CAAC5jI,GAAG,CAAC,CAACsmC,OAAO,EAAE;EAC5B,IAAA,OAAO,EAAE;EACX,EAAA;IAEA,IAAIkkE,IAAI,GAAG,CAAC;IACZ,IAAID,KAAK,GAAGvqG,GAAG;EACf,EAAA,IAAIwkI,GAAG;IACP,OAAOh6B,IAAI,IAAID,KAAK,EAAE;MACpBi6B,GAAG,GAAGvsI,IAAI,CAACE,KAAK,CAAC,CAACoyG,KAAK,GAAGC,IAAI,IAAI,CAAC,CAAC;MAEpC,IAAInlE,IAAI,GAAGu+F,IAAI,CAACY,GAAG,CAAC,CAACn+F,SAAS,EAAE;QAC9BkkE,KAAK,GAAGi6B,GAAG,GAAG,CAAC;EACjB,IAAA,CAAC,MAAM,IAAIn/F,IAAI,GAAGu+F,IAAI,CAACY,GAAG,CAAC,CAACn+F,SAAS,IAAImkE,IAAI,GAAGxqG,GAAG,EAAE;QACnDwqG,IAAI,GAAGg6B,GAAG,GAAG,CAAC;EAChB,IAAA,CAAC,MAAM;EACL;EACA,MAAA,OAAOA,GAAG;EACZ,IAAA;EACF,EAAA;EACA;EACA;IACA,OAAOZ,IAAI,CAACp5B,IAAI,CAAC,CAACnkE,SAAS,GAAGhB,IAAI,GAAGA,IAAI,GAAGu+F,IAAI,CAACr5B,KAAK,CAAC,CAAClkE,SAAS,GAC7DmkE,IAAI,GACJD,KAAK;EACX;EAEO,SAAS+5B,cAAcA,CAC5BV,IAAuC,EACvCriI,KAAa,EACbE,GAAW,EACK;IAChB,IAAMgjI,SAAyB,GAAG,EAAE;EACpC,EAAA,IAAMC,eAAe,GAAGH,wBAAwB,CAACX,IAAI,EAAEriI,KAAK,CAAC;EAC7D,EAAA,IAAImjI,eAAe,GAAG,EAAE,EAAE;EACxB,IAAA,KAAK,IAAItkI,CAAC,GAAGskI,eAAe,EAAE1kI,GAAG,GAAG4jI,IAAI,CAAC1kI,MAAM,EAAEkB,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;EAC7D,MAAA,IAAM+4C,GAAG,GAAGyqF,IAAI,CAACxjI,CAAC,CAAC;QACnB,IAAI+4C,GAAG,CAAC9S,SAAS,IAAI9kC,KAAK,IAAI43C,GAAG,CAAC7S,OAAO,IAAI7kC,GAAG,EAAE;EAChDgjI,QAAAA,SAAS,CAAC17H,IAAI,CAACowC,GAAG,CAAC;EACrB,MAAA,CAAC,MAAM,IAAIA,GAAG,CAAC9S,SAAS,GAAG5kC,GAAG,EAAE;EAC9B,QAAA,OAAOgjI,SAAS;EAClB,MAAA;EACF,IAAA;EACF,EAAA;EACA,EAAA,OAAOA,SAAS;EAClB;EAEO,SAASE,oBAAoBA,CAClCC,aAA4B,EACf;IACb,IAAM7zH,MAAmB,GAAG,EAAE;EAC9B,EAAA,KAAK,IAAI3Q,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwkI,aAAa,CAAC1lI,MAAM,EAAEkB,CAAC,EAAE,EAAE;EAC7C,IAAA,IAAM6L,KAAK,GAAG24H,aAAa,CAACxkI,CAAC,CAAC;EAC9B;EACA,IAAA,IACE,CAAC6L,KAAK,CAAC44H,IAAI,KAAK,WAAW,IAAI54H,KAAK,CAAC44H,IAAI,KAAK,UAAU,KACxD54H,KAAK,CAAC1P,KAAK,EACX;EACAwU,MAAAA,MAAM,CAAChI,IAAI,CAAC67H,aAAa,CAACxkI,CAAC,CAAC,CAAC;EAC/B,IAAA;EACF,EAAA;EACA,EAAA,OAAO2Q,MAAM;EACf;;ECjKkC,IAkB5B+zH,uBAAuB,0BAAA7uC,qBAAA,EAAA;IAe3B,SAAA6uC,uBAAAA,CAAYx2G,GAAQ,EAAE;EAAA,IAAA,IAAA7qB,KAAA;MACpBA,KAAA,GAAAwyF,qBAAA,CAAAvyF,IAAA,OAAM4qB,GAAG,EAAE,2BAA2B,CAAC,IAAA,IAAA;MAAC7qB,KAAA,CAflC+kB,KAAK,GAA4B,IAAI;MAAA/kB,KAAA,CACrCsN,MAAM,GAAoB,EAAE;MAAAtN,KAAA,CAC5ByyF,QAAQ,GAAkC,IAAI;MAAAzyF,KAAA,CAC9C0yF,aAAa,GAAoB,EAAE;EAAA1yF,IAAAA,KAAA,CACnC6H,OAAO,GAAW,EAAE;MAAA7H,KAAA,CACpB2yF,YAAY,GAAyB,IAAI;MAAA3yF,KAAA,CACzC4yF,kBAAkB,GAAY,IAAI;EAAA5yF,IAAAA,KAAA,CAClCshI,kBAAkB,GAAW,EAAE;MAAAthI,KAAA,CAC/BuhI,mBAAmB,GAAY,KAAK;EAAAvhI,IAAAA,KAAA,CACpCwhI,uBAAuB,GAAW,EAAE;MAAAxhI,KAAA,CACpCyhI,gBAAgB,GAAY,IAAI;MAAAzhI,KAAA,CAEhC0hI,oBAAoB,GAAG,YAAA;EAAA,MAAA,OAAM1hI,KAAA,CAAK2hI,eAAe,CAAC,CAAC,CAAC;EAAA,IAAA,CAAA;MAAA3hI,KAAA,CAqgBpD4hI,mBAAmB,GAAG,YAAM;EAClC,MAAA,IAAI,CAAC5hI,KAAA,CAAKuhI,mBAAmB,EAAE;EAC7BznI,QAAAA,IAAI,CAACm4B,aAAa,CAACjyB,KAAA,CAAKwhI,uBAAuB,CAAC;EAClD,MAAA;EACA;EACA,MAAA,IAAI,CAACxhI,KAAA,CAAK+kB,KAAK,IAAI,CAAC/kB,KAAA,CAAK6qB,GAAG,CAACrJ,MAAM,CAACqgH,wBAAwB,EAAE;EAC5D,QAAA;EACF,MAAA;QAEA,IAAI5/D,SAA2B,GAAG,IAAI;QACtC,IAAM30D,MAAM,GAAG4zH,oBAAoB,CAAClhI,KAAA,CAAK+kB,KAAK,CAAC+8G,UAAU,CAAC;EAC1D,MAAA,KAAK,IAAInlI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,CAAC,EAAE,EAAE;UACtC,IAAI2Q,MAAM,CAAC3Q,CAAC,CAAC,CAACujI,IAAI,KAAK,QAAQ,EAAE;EAC/B;EACAj+D,UAAAA,SAAS,GAAG30D,MAAM,CAAC3Q,CAAC,CAAC;UACvB,CAAC,MAAM,IAAI2Q,MAAM,CAAC3Q,CAAC,CAAC,CAACujI,IAAI,KAAK,SAAS,EAAE;EACvCj+D,UAAAA,SAAS,GAAG30D,MAAM,CAAC3Q,CAAC,CAAC;EACrB,UAAA;EACF,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAMkL,OAAO,GAAG7H,KAAA,CAAK+hI,qBAAqB,CAAC9/D,SAAS,CAAC;EACrD,MAAA,IAAIjiE,KAAA,CAAKqyF,aAAa,KAAKxqF,OAAO,EAAE;EAClC7H,QAAAA,KAAA,CAAKgiI,gBAAgB,CAACn6H,OAAO,CAAC;EAChC,MAAA;MACF,CAAC;MA3hBC7H,KAAA,CAAKivB,iBAAiB,EAAE;EAAC,IAAA,OAAAjvB,KAAA;EAC3B,EAAA;IAAC6B,cAAA,CAAAw/H,uBAAA,EAAA7uC,qBAAA,CAAA;EAAA,EAAA,IAAAj8F,MAAA,GAAA8qI,uBAAA,CAAA7qI,SAAA;EAAAD,EAAAA,MAAA,CAEMkC,OAAO,GAAd,SAAOA,OAAOA,GAAG;MACf,IAAI,CAAC+3B,mBAAmB,EAAE;EAC1B,IAAA,IAAI,CAACljB,MAAM,CAAC7R,MAAM,GAAG,CAAC;EACtB,IAAA,IAAI,CAACi3F,aAAa,CAACj3F,MAAM,GAAG,CAAC;MAC7B,IAAI,CAACk3F,YAAY,GAAG,IAAI;EACxB;EACA,IAAA,IAAI,CAACivC,mBAAmB,GAAG,IAAI,CAACF,oBAAoB,GAAG,IAAI;EAC3DlvC,IAAAA,qBAAA,CAAAh8F,SAAA,CAAMiC,OAAO,CAAAwH,IAAA,CAAA,IAAA,CAAA;IACf,CAAC;EAAA1J,EAAAA,MAAA,CAaO04B,iBAAiB,GAAzB,SAAQA,iBAAiBA,GAAG;EAC1B,IAAA,IAAQpE,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EACzD9jC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DhkC,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC7D1E,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DjoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC29F,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACvDnoE,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC3DlF,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACwxH,qBAAqB,EAAE,IAAI,CAACmY,qBAAqB,EAAE,IAAI,CAAC;EACtEl0G,IAAAA,GAAG,CAACwE,EAAE,CAACj6B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;IAC1C,CAAC;EAAAh6B,EAAAA,MAAA,CAEOi6B,mBAAmB,GAA3B,SAAQA,mBAAmBA,GAAG;EAC5B,IAAA,IAAQ3F,GAAG,GAAK,IAAI,CAAZA,GAAG;EACXA,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACs5D,cAAc,EAAE,IAAI,CAACC,eAAe,EAAE,IAAI,CAAC;EAC1D9jC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACw5D,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DhkC,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk6B,gBAAgB,EAAE,IAAI,CAACC,iBAAiB,EAAE,IAAI,CAAC;EAC9D1E,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACy9F,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DjoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC29F,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;EACxDnoE,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAAC06B,eAAe,EAAE,IAAI,CAACC,gBAAgB,EAAE,IAAI,CAAC;EAC5DlF,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACwxH,qBAAqB,EAAE,IAAI,CAACmY,qBAAqB,EAAE,IAAI,CAAC;EACvEl0G,IAAAA,GAAG,CAAC4F,GAAG,CAACr7B,MAAM,CAACk7B,KAAK,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAAC;EAC3C,EAAA;;EAEA;EAAA;IAAAh6B,MAAA,CACUo4D,eAAe,GAAzB,SAAUA,eAAeA,CACvBj+B,KAA4B,EAC5BpvB,IAAuB,EACjB;EACN,IAAA,IAAI,CAACyjB,KAAK,GAAGzjB,IAAI,CAACyjB,KAAK;EACvB,IAAA,IAAI,CAAC,IAAI,CAACA,KAAK,EAAE;EACf,MAAA;EACF,IAAA;EAEA,IAAA,IAAI,IAAI,CAACu8G,kBAAkB,GAAG,EAAE,EAAE;EAChC,MAAA,IAAI,CAACjvC,aAAa,GAAG,IAAI,CAACivC,kBAAkB;EAC5C,MAAA,IAAI,CAACA,kBAAkB,GAAG,EAAE;EAC9B,IAAA;EAEA,IAAA,IAAI,CAACC,mBAAmB,GAAG,EACzB,IAAI,CAACx8G,KAAK,CAAC+8G,UAAU,IAAI,UAAU,IAAI,IAAI,CAAC/8G,KAAK,CAAC+8G,UAAU,CAC7D;MACD,IAAI,IAAI,CAACP,mBAAmB,EAAE;EAC5B,MAAA,IAAI,CAACI,eAAe,CAAC,GAAG,CAAC;EAC3B,IAAA,CAAC,MAAM;EACL,MAAA,IAAI,CAAC58G,KAAK,CAAC+8G,UAAU,CAACl2E,gBAAgB,CACpC,QAAQ,EACR,IAAI,CAAC81E,oBACP,CAAC;EACH,IAAA;IACF,CAAC;EAAAnrI,EAAAA,MAAA,CAEOorI,eAAe,GAAvB,SAAQA,eAAeA,CAACv1F,OAAe,EAAE;EACvCtyC,IAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAACuvG,uBAAuB,CAAC;EAChD,IAAA,IAAI,CAACA,uBAAuB,GAAG1nI,IAAI,CAAC+0B,WAAW,CAC7C,IAAI,CAAC+yG,mBAAmB,EACxBx1F,OACF,CAAC;IACH,CAAC;IAAA71C,MAAA,CAESs4D,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBn+B,KAA6B,EAC7BpvB,IAAwB,EACxB;EACA,IAAA,IAAMyjB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAI,CAACA,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EAEA,IAAA,IAAM4qC,iBAAiB,GAAG,CAAC,CAACruD,IAAI,CAACsuD,aAAa;EAC9C91D,IAAAA,IAAI,CAACm4B,aAAa,CAAC,IAAI,CAACuvG,uBAAuB,CAAC;EAChD,IAAA,IAAI,CAAC,IAAI,CAACD,mBAAmB,EAAE;QAC7Bx8G,KAAK,CAAC+8G,UAAU,CAACh2E,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC41E,oBAAoB,CAAC;EAC3E,IAAA;EAEA,IAAA,IAAI,IAAI,CAAC75H,OAAO,GAAG,EAAE,EAAE;EACrB,MAAA,IAAI,CAACy5H,kBAAkB,GAAG,IAAI,CAACz5H,OAAO;EACxC,IAAA;;EAEA;EACA,IAAA,IAAI,CAACwqF,aAAa,GAAG,EAAE;MACvB,IAAI,CAACttE,KAAK,GAAG,IAAI;EACjB,IAAA,IAAI4qC,iBAAiB,EAAE;EACrB,MAAA;EACF,IAAA;EAEA,IAAA,IAAMmyE,UAAU,GAAGZ,oBAAoB,CAACn8G,KAAK,CAAC+8G,UAAU,CAAC;EACzD;EACAA,IAAAA,UAAU,CAACvnI,OAAO,CAAC,UAACiO,KAAK,EAAK;QAC5Bi4H,gBAAgB,CAACj4H,KAAK,CAAC;EACzB,IAAA,CAAC,CAAC;IACJ,CAAC;EAAAjS,EAAAA,MAAA,CAESg5B,iBAAiB,GAA3B,SAAUA,iBAAiBA,GAAS;MAClC,IAAI,CAACjiB,MAAM,GAAG,EAAE;MAChB,IAAI,CAACmlF,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACC,aAAa,GAAG,EAAE;EACvB,IAAA,IAAI,CAAC7qF,OAAO,GAAG,EAAE;MACjB,IAAI,CAAC8qF,YAAY,GAAG,IAAI;MACxB,IAAI,CAACC,kBAAkB,GAAG,IAAI;EAChC,EAAA;;EAEA;EAAA;IAAAr8F,MAAA,CACUu8F,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBpiE,KAA6B,EAC7BpvB,IAAwB,EAClB;EACN,IAAA,IAAI,CAACgM,MAAM,GAAGhM,IAAI,CAACizG,cAAc;IACnC,CAAC;IAAAh+G,MAAA,CAESwoI,qBAAqB,GAA/B,SAAUA,qBAAqBA,CAC7BruG,KAAmC,EACnCpvB,IAAqB,EACf;EACN,IAAA,IAAQ1H,EAAE,GAAuB0H,IAAI,CAA7B1H,EAAE;QAAE2kB,OAAO,GAAcjd,IAAI,CAAzBid,OAAO;QAAE2D,OAAO,GAAK5gB,IAAI,CAAhB4gB,OAAO;EAC5B,IAAA,IAAM+wE,kBAAkB,GAAG,IAAI,CAACP,aAAa,CAAC94F,EAAE,CAAC;MAEjD,IAAI,CAACq5F,kBAAkB,IAAIA,kBAAkB,CAAC10E,OAAO,KAAKA,OAAO,EAAE;EACjE,MAAA,IAAI,CAACrlB,IAAI,CAAA,yBAAA,GACmBU,EAAE,GAAA,aAAA,GAAc2kB,OAAO,GAAA,6BAAA,IAA8B00E,kBAAkB,IAAA,IAAA,GAAA,MAAA,GAAlBA,kBAAkB,CAAE10E,OAAO,CAC5G,CAAC;EACD,MAAA;EACF,IAAA;EAEA,IAAA,IAAM20E,UAAU,GAAGD,kBAAkB,CAAC/wE,OAAO;EAC7C+wE,IAAAA,kBAAkB,CAAC/wE,OAAO,GAAG5gB,IAAI,CAAC4gB,OAAO;MACzC,IAAI,CAAC5rB,GAAG,CAAA,iBAAA,GACYsD,EAAE,WAAKq5F,kBAAkB,CAACr3F,IAAI,GAAA,UAAA,GAAUq3F,kBAAkB,CAAClqE,IAAI,GAAA,SAAA,GAAUxK,OAAO,GAAA,WAAA,GAAY2D,OAAO,CAACw0B,OAAO,SAAIx0B,OAAO,CAAC+zB,KAAK,GAAA,GAChJ,CAAC;EAED,IAAA,IAAIr8C,EAAE,KAAK,IAAI,CAACiO,OAAO,EAAE;QACvB,IAAI,CAACwoF,cAAc,CAACz2F,EAAE,EAAE0H,IAAI,EAAE4xF,UAAU,CAAC;EAC3C,IAAA;IACF,CAAC;IAAA38F,MAAA,CAESy8F,cAAc,GAAxB,SAAUA,cAAcA,CACtBtiE,KAA2B,EAC3BpvB,IAAsB,EAChB;EACN,IAAA,IAAI,CAAC29B,WAAW,CAAC39B,IAAI,CAACV,KAAK,CAAC;IAC9B,CAAC;IAAArK,MAAA,CAESw5B,gBAAgB,GAA1B,SAAUA,gBAAgBA,CACxBW,KAA6B,EAC7BpvB,IAAwB,EAClB;EACN,IAAA,IAAI,CAAC29B,WAAW,CAAC39B,IAAI,CAACV,KAAK,CAAC;IAC9B,CAAC;EAAArK,EAAAA,MAAA,CAEO0oC,WAAW,GAAnB,SAAQA,WAAWA,CAACrD,UAAkB,EAAE;MACtC,IAAMlK,SAAS,GAAG,IAAI,CAAC7G,GAAG,CAACxC,MAAM,CAACuT,UAAU,CAAC;MAC7C,IAAI,CAAClK,SAAS,EAAE;EACd,MAAA;EACF,IAAA;EACA,IAAA,IAAMrN,cAAc,GAAGqN,SAAS,CAACrN,cAAc,IAAI,IAAI;EACvD,IAAA,IAAM8uE,aAAa,GAAG,IAAI,CAACV,QAAQ;EACnC,IAAA,IAAIE,YAAY,GAAG,IAAI,CAACA,YAAY;MACpC,IACE,CAACtuE,cAAc,IACf,CAAA8uE,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAE13F,MAAM,OAAK4oB,cAAc,oBAAdA,cAAc,CAAE5oB,MAAM,CAAA,IAChD4oB,cAAc,IAAA,IAAA,IAAdA,cAAc,CAAE1oB,IAAI,CAAC,UAAC4iB,OAAO,EAAA;QAAA,OAAK,CAAA40E,aAAa,IAAA,IAAA,GAAA,MAAA,GAAbA,aAAa,CAAEt3F,OAAO,CAAC0iB,OAAO,CAAC,MAAK,EAAE;EAAA,IAAA,CAAA,CAAC,EACzE;QACA,IAAI,CAACk0E,QAAQ,GAAGpuE,cAAc;EAC9B,MAAA,IAAI,CAACxc,OAAO,GAAG,EAAE;QACjB,IAAI,CAAC8qF,YAAY,GAAG,IAAI;QAExB,IAAM4hB,cAAc,GAAG,IAAI,CAACjnG,MAAM,CAACsW,MAAM,CACvC,UAACpb,KAAK,EAAA;EAAA,QAAA,OACJ,CAAC6b,cAAc,IAAIA,cAAc,CAACxoB,OAAO,CAAC2M,KAAK,CAAC+V,OAAO,CAAC,KAAK,EAAE;EAAA,MAAA,CACnE,CAAC;QACD,IAAIg2F,cAAc,CAAC94G,MAAM,EAAE;EACzB;UACA,IACE,IAAI,CAACm3F,kBAAkB,IACvB,CAAC2hB,cAAc,CAAC54G,IAAI,CAAC,UAAC6M,KAAK,EAAA;YAAA,OAAKA,KAAK,CAACC,OAAO;EAAA,QAAA,CAAA,CAAC,EAC9C;YACA,IAAI,CAACmqF,kBAAkB,GAAG,KAAK;EACjC,QAAA;EACA;EACA2hB,QAAAA,cAAc,CAACh6G,OAAO,CAAC,UAACiO,KAAK,EAAE7L,CAAC,EAAK;YACnC6L,KAAK,CAAC5O,EAAE,GAAG+C,CAAC;EACd,QAAA,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,CAACg2F,YAAY,IAAI,CAAC,IAAI,CAACD,aAAa,CAACj3F,MAAM,EAAE;EACtD;EACA,QAAA;EACF,MAAA;QACA,IAAI,CAACi3F,aAAa,GAAG6hB,cAAc;;EAEnC;QACA,IAAMmlB,kBAAkB,GAAG,IAAI,CAAC7uG,GAAG,CAACrJ,MAAM,CAACk4G,kBAAkB;EAC7D,MAAA,IAAI,CAAC/mC,YAAY,IAAI+mC,kBAAkB,EAAE;UACvC,IAAI,CAAC9mC,kBAAkB,GAAG,KAAK;EAC/B,QAAA,IAAMQ,UAAU,GAAGlqE,kBAAkB,CACnCwwG,kBAAkB,EAClBnlB,cACF,CAAC;EACD,QAAA,IAAInhB,UAAU,GAAG,EAAE,EAAE;EACnBT,UAAAA,YAAY,GAAG4hB,cAAc,CAACnhB,UAAU,CAAC;EAC3C,QAAA,CAAC,MAAM;YACL,IAAMC,QAAQ,GAAGnqE,kBAAkB,CAACwwG,kBAAkB,EAAE,IAAI,CAACpsH,MAAM,CAAC;EACpEqlF,UAAAA,YAAY,GAAG,IAAI,CAACrlF,MAAM,CAAC+lF,QAAQ,CAAC;EACtC,QAAA;EACF,MAAA;;EAEA;EACA,MAAA,IAAIxrF,OAAO,GAAG,IAAI,CAACyrF,WAAW,CAACX,YAAY,CAAC;EAC5C,MAAA,IAAI9qF,OAAO,KAAK,EAAE,IAAI8qF,YAAY,EAAE;EAClC9qF,QAAAA,OAAO,GAAG,IAAI,CAACyrF,WAAW,CAAC,IAAI,CAAC;EAClC,MAAA;;EAEA;EACA,MAAA,IAAM2uC,qBAAgD,GAAG;EACvD1tB,QAAAA,cAAc,EAAdA;SACD;EACD,MAAA,IAAI,CAACj+G,GAAG,CAAA,4BAAA,GAEJi+G,cAAc,CAAC94G,MAAM,GAAA,uBAAA,IACA4oB,cAAc,IAAA,IAAA,GAAA,MAAA,GAAdA,cAAc,CAAE7Q,IAAI,CAAC,GAAG,CAAC,iBAClD,CAAC;QACD,IAAI,CAACqX,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACypI,uBAAuB,EAAEoD,qBAAqB,CAAC;QAEvE,IAAIp6H,OAAO,KAAK,EAAE,IAAI,IAAI,CAACA,OAAO,KAAK,EAAE,EAAE;EACzC,QAAA,IAAI,CAACm6H,gBAAgB,CAACn6H,OAAO,CAAC;EAChC,MAAA;EACF,IAAA;IACF,CAAC;EAAAtR,EAAAA,MAAA,CAEO+8F,WAAW,GAAnB,SAAQA,WAAWA,CAACX,YAAkC,EAAU;EAC9D,IAAA,IAAMrlF,MAAM,GAAG,IAAI,CAAColF,aAAa;EACjC,IAAA,IAAMwvC,aAAa,GAAG,IAAI,CAACtvC,kBAAkB;EAC7C,IAAA,KAAK,IAAIj2F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,MAAA,IAAM6L,KAAK,GAAG8E,MAAM,CAAC3Q,CAAC,CAAC;EACvB,MAAA,IACGulI,aAAa,IAAI,CAAC15H,KAAK,CAACC,OAAO,IAC/B,CAACy5H,aAAa,IAAI,CAACvvC,YAAa,EACjC;EACA,QAAA;EACF,MAAA;QACA,IAAI,CAACA,YAAY,IAAIvpE,aAAa,CAAC5gB,KAAK,EAAEmqF,YAAY,CAAC,EAAE;EACvD,QAAA,OAAOh2F,CAAC;EACV,MAAA;EACF,IAAA;EACA,IAAA,IAAIg2F,YAAY,EAAE;EAChB,MAAA,KAAK,IAAIh2F,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,EAAC,EAAE,EAAE;EACtC,QAAA,IAAM6L,MAAK,GAAG8E,MAAM,CAAC3Q,EAAC,CAAC;EACvB,QAAA,IACEm1F,wBAAwB,CAACa,YAAY,CAAClvE,KAAK,EAAEjb,MAAK,CAACib,KAAK,EAAE,CACxD,UAAU,EACV,gBAAgB,EAChB,iBAAiB,CAClB,CAAC,EACF;EACA,UAAA,OAAO9mB,EAAC;EACV,QAAA;EACF,MAAA;EACA,MAAA,KAAK,IAAIA,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,GAAC,EAAE,EAAE;EACtC,QAAA,IAAM6L,OAAK,GAAG8E,MAAM,CAAC3Q,GAAC,CAAC;EACvB,QAAA,IACEm1F,wBAAwB,CAACa,YAAY,CAAClvE,KAAK,EAAEjb,OAAK,CAACib,KAAK,EAAE,CACxD,UAAU,CACX,CAAC,EACF;EACA,UAAA,OAAO9mB,GAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;EAAApG,EAAAA,MAAA,CAEOwrI,qBAAqB,GAA7B,SAAQA,qBAAqBA,CAAC9/D,SAA2B,EAAU;EACjE,IAAA,IAAIA,SAAS,EAAE;EACb,MAAA,IAAM30D,MAAM,GAAG,IAAI,CAAColF,aAAa;EACjC,MAAA,KAAK,IAAI/1F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2Q,MAAM,CAAC7R,MAAM,EAAEkB,CAAC,EAAE,EAAE;EACtC,QAAA,IAAM6L,KAAK,GAAG8E,MAAM,CAAC3Q,CAAC,CAAC;EACvB,QAAA,IAAIy1F,6BAA6B,CAAC5pF,KAAK,EAAEy5D,SAAS,CAAC,EAAE;EACnD,UAAA,OAAOtlE,CAAC;EACV,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,EAAE;IACX,CAAC;IAAApG,MAAA,CAESg6B,OAAO,GAAjB,SAAUA,OAAOA,CAACG,KAAmB,EAAEpvB,IAAe,EAAQ;MAC5D,IAAIA,IAAI,CAACuvB,KAAK,IAAI,CAACvvB,IAAI,CAAClH,OAAO,EAAE;EAC/B,MAAA;EACF,IAAA;EAEA,IAAA,IACEkH,IAAI,CAAClH,OAAO,CAACT,IAAI,KAAKtE,mBAAmB,CAACI,cAAc,IACxD6L,IAAI,CAAClH,OAAO,CAACR,EAAE,KAAK,IAAI,CAACiO,OAAO,KAC/B,CAAC,IAAI,CAAC4qF,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC52F,OAAO,CAACyF,IAAI,CAAClH,OAAO,CAACmkB,OAAO,CAAC,KAAK,EAAE,CAAC,EACtE;EACA,MAAA,IAAI,CAACgzE,UAAU,CAACjwF,IAAI,CAAC;EACvB,IAAA;IACF,CAAC;EAAA/K,EAAAA,MAAA,CAqBM2gI,iBAAiB,GAAxB,SAAOA,iBAAiBA,CACtBD,cAAmE,EAC7C;EACtB,IAAA,IAAI,CAACpsG,GAAG,CAACrJ,MAAM,CAACk4G,kBAAkB,GAAGzC,cAAc;EACnD,IAAA,IAAIA,cAAc,EAAE;EAClB,MAAA,IAAIA,cAAc,CAACr9H,EAAE,KAAK,EAAE,EAAE;EAC5B,QAAA,IAAI,CAACooI,gBAAgB,CAAC,EAAE,CAAC;EACzB,QAAA,OAAO,IAAI;EACb,MAAA;EACA,MAAA,IAAMna,iBAAiB,GAAG,IAAI,CAACA,iBAAiB;QAChD,IAAI,CAACj1B,kBAAkB,GAAG,KAAK;QAC/B,IAAIi1B,iBAAiB,CAACpsH,MAAM,EAAE;EAC5B;EACA,QAAA,IAAMk3F,YAAY,GAAG,IAAI,CAACA,YAAY;UACtC,IAAIA,YAAY,IAAIvpE,aAAa,CAAC6tG,cAAc,EAAEtkC,YAAY,CAAC,EAAE;EAC/D,UAAA,OAAOA,YAAY;EACrB,QAAA;EACA;UACA,IAAMS,UAAU,GAAGlqE,kBAAkB,CACnC+tG,cAAc,EACd,IAAI,CAACvkC,aACP,CAAC;EACD,QAAA,IAAIU,UAAU,GAAG,EAAE,EAAE;EACnB,UAAA,IAAM5qF,KAAK,GAAG,IAAI,CAACkqF,aAAa,CAACU,UAAU,CAAC;EAC5C,UAAA,IAAI,CAAC4uC,gBAAgB,CAAC5uC,UAAU,CAAC;EACjC,UAAA,OAAO5qF,KAAK;UACd,CAAC,MAAM,IAAImqF,YAAY,EAAE;EACvB;EACA;EACA,UAAA,OAAO,IAAI;EACb,QAAA,CAAC,MAAM;EACL;EACA,UAAA,IAAMU,QAAQ,GAAGnqE,kBAAkB,CACjC+tG,cAAc,EACdpP,iBACF,CAAC;EACD,UAAA,IAAIx0B,QAAQ,GAAG,EAAE,EAAE;cACjB,OAAOw0B,iBAAiB,CAACx0B,QAAQ,CAAC;EACpC,UAAA;EACF,QAAA;EACF,MAAA;EACF,IAAA;EACA,IAAA,OAAO,IAAI;IACb,CAAC;EAAA98F,EAAAA,MAAA,CAESm5F,YAAY,GAAtB,SAAUA,YAAYA,CAACM,gBAAmC,EAAQ;EAChEwC,IAAAA,qBAAA,CAAAh8F,SAAA,CAAMk5F,YAAY,CAAAzvF,IAAA,CAAA,IAAA,CAAA;MAClB,IAAI,IAAI,CAACkwF,kBAAkB,CAAC,IAAI,CAACwC,YAAY,CAAC,EAAE;QAC9C,IAAI,CAACxB,eAAe,CAAC,IAAI,CAACwB,YAAY,EAAE3C,gBAAgB,CAAC;EAC3D,IAAA;IACF,CAAC;IAAAz5F,MAAA,CAES05F,eAAe,GAAzB,SAAUA,eAAeA,CACvB0C,YAA2B,EAC3B3C,gBAA8C,EAC9C;MACAwC,qBAAA,CAAAh8F,SAAA,CAAMy5F,eAAe,CAAAhwF,IAAA,CAAA,IAAA,EAAC0yF,YAAY,EAAE3C,gBAAgB,CAAA;EACpD,IAAA,IAAMp2F,EAAE,GAAG+4F,YAAY,CAAC/4F,EAAE;EAC1B,IAAA,IAAM2kB,OAAO,GAAGo0E,YAAY,CAACp0E,OAAiB;MAC9C,IAAM7qB,GAAG,GAAG,IAAI,CAAC08F,oBAAoB,CAACuC,YAAY,CAACj/F,GAAG,EAAEs8F,gBAAgB,CAAC;EACzE,IAAA,IAAM9tE,OAAO,GAAGywE,YAAY,CAACzwE,OAAO;EACpC,IAAA,IAAMG,GAAG,GAAGH,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEG,GAAG;EACxB,IAAA,IAAI,CAAC/rB,GAAG,CAAA,mBAAA,GACcsD,EAAE,WAAK+4F,YAAY,CAAC/2F,IAAI,GAAA,UAAA,GAAU+2F,YAAY,CAAC5pE,IAAI,GAAA,SAAA,GAAUxK,OAAO,IACtF,CAAAyxE,gBAAgB,IAAA,IAAA,GAAA,MAAA,GAAhBA,gBAAgB,CAAExtE,GAAG,MAAK7nB,SAAS,GAC/B,SAAS,GAAGq1F,gBAAgB,CAACxtE,GAAG,GAAG,QAAQ,GAAGwtE,gBAAgB,CAACvtE,IAAI,GACnE,EAAE,CAAA,IACLJ,GAAG,IAAIH,OAAO,CAACuL,IAAI,GAAG,OAAO,GAAGpL,GAAG,CAACkM,OAAO,CAAC,CAAC,CAAC,IAAIrM,OAAO,CAACvoB,IAAI,GAAG,GAAG,GAAGuoB,OAAO,CAACvoB,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAA,GAAA,GAAA,GAAIjG,GAC7G,CAAC;MACD,IAAI,CAACm3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAAC+sI,sBAAsB,EAAE;EAC9CzuI,MAAAA,GAAG,EAAHA,GAAG;EACHkG,MAAAA,EAAE,EAAFA,EAAE;EACF2kB,MAAAA,OAAO,EAAPA,OAAO;QACPmyE,kBAAkB,EAAEV,gBAAgB,IAAI,IAAI;EAC5CxnF,MAAAA,KAAK,EAAEmqF;EACT,KAAC,CAAC;EACJ,EAAA;;EAEA;EACF;EACA;EACA;EACA;EAJEp8F,EAAAA,MAAA,CAKQ6rI,gBAAgB,GAAxB,SAAQA,gBAAgBA,GAAS;EAC/B,IAAA,IAAQr9G,KAAK,GAAK,IAAI,CAAdA,KAAK;MACb,IAAI,CAACA,KAAK,EAAE;EACV,MAAA;EACF,IAAA;EAEA,IAAA,IAAM+8G,UAAU,GAAGZ,oBAAoB,CAACn8G,KAAK,CAAC+8G,UAAU,CAAC;EACzD,IAAA,IAAMnvC,YAAY,GAAG,IAAI,CAACA,YAAY;EACtC,IAAA,IAAI0vC,SAAS;EACb,IAAA,IAAI1vC,YAAY,EAAE;EAChB0vC,MAAAA,SAAS,GAAGP,UAAU,CAACl+G,MAAM,CAAC,UAACq+C,SAAS,EAAA;EAAA,QAAA,OACtCmwB,6BAA6B,CAACO,YAAY,EAAE1wB,SAAS,CAAC;QAAA,CACxD,CAAC,CAAC,CAAC,CAAC;QACJ,IAAI,CAACogE,SAAS,EAAE;UACd,IAAI,CAACnpI,IAAI,CAAA,gDAAA,GACyCy5F,YAAY,CAAC/2F,IAAI,GAAA,oBAAA,GAAmB+2F,YAAY,CAAC5pE,IAAI,GAAA,IACvG,CAAC;EACH,MAAA;EACF,IAAA;EACA,IAAA,EAAE,CAAC/0B,KAAK,CAACiM,IAAI,CAAC6hI,UAAU,CAAC,CAACvnI,OAAO,CAAC,UAACiO,KAAK,EAAK;QAC3C,IAAIA,KAAK,CAAC03H,IAAI,KAAK,UAAU,IAAI13H,KAAK,KAAK65H,SAAS,EAAE;UACpD75H,KAAK,CAAC03H,IAAI,GAAG,UAAU;EACzB,MAAA;EACF,IAAA,CAAC,CAAC;EACF,IAAA,IAAImC,SAAS,EAAE;QACb,IAAMnC,IAAI,GAAG,IAAI,CAACoC,eAAe,GAAG,SAAS,GAAG,QAAQ;EACxD,MAAA,IAAID,SAAS,CAACnC,IAAI,KAAKA,IAAI,EAAE;UAC3BmC,SAAS,CAACnC,IAAI,GAAGA,IAAI;EACvB,MAAA;EACF,IAAA;EACF,EAAA;;EAEA;EACF;EACA;EACA;EAHE3pI,EAAAA,MAAA,CAIQyrI,gBAAgB,GAAxB,SAAQA,gBAAgBA,CAACjuC,KAAa,EAAQ;EAC5C,IAAA,IAAMzmF,MAAM,GAAG,IAAI,CAAColF,aAAa;;EAEjC;EACA;EACA;EACA;EACA,IAAA,IAAI,CAAC,IAAI,CAAC3tE,KAAK,EAAE;QACf,IAAI,CAACu8G,kBAAkB,GAAGvtC,KAAK;EAC/B,MAAA;EACF,IAAA;;EAEA;EACA,IAAA,IAAIA,KAAK,GAAG,EAAE,IAAIA,KAAK,IAAIzmF,MAAM,CAAC7R,MAAM,IAAI,CAACsH,cAAA,CAAgBgxF,KAAK,CAAC,EAAE;EACnE,MAAA,IAAI,CAAC76F,IAAI,CAAA,6BAAA,GAA+B66F,KAAO,CAAC;EAChD,MAAA;EACF,IAAA;MAEA,IAAI,CAACnB,kBAAkB,GAAG,KAAK;EAC/B,IAAA,IAAMoB,SAAS,GAAG,IAAI,CAACrB,YAAY;EACnC,IAAA,IAAMnqF,KAA2B,GAAG8E,MAAM,CAACymF,KAAK,CAAC,IAAI,IAAI;MACzD,IAAI,CAAClsF,OAAO,GAAGksF,KAAK;MACpB,IAAI,CAACpB,YAAY,GAAGnqF,KAAK;MACzB,IAAI,CAAC45H,gBAAgB,EAAE;MACvB,IAAI,CAAC55H,KAAK,EAAE;EACV;QACA,IAAI,CAACqiB,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACg8H,qBAAqB,EAAE;EAAEx3H,QAAAA,EAAE,EAAEm6F;EAAM,OAAC,CAAC;EAC7D,MAAA;EACF,IAAA;EACA,IAAA,IAAME,WAAW,GAAG,CAAC,CAACzrF,KAAK,CAAC0Z,OAAO,IAAI,CAAC1Z,KAAK,CAAC0Z,OAAO,CAACuL,IAAI;MAC1D,IAAIsmE,KAAK,KAAK,IAAI,CAAClsF,OAAO,IAAIW,KAAK,KAAKwrF,SAAS,IAAIC,WAAW,EAAE;EAChE,MAAA;EACF,IAAA;MACA,IAAI,CAAC39F,GAAG,CACN,8BAAA,GAA+By9F,KAAK,IACjCvrF,KAAK,GAAA,KAAA,GACGA,KAAK,CAAC5M,IAAI,gBAAU4M,KAAK,CAACugB,IAAI,GAAA,SAAA,GAAUvgB,KAAK,CAAC+V,OAAO,GAC1D,EAAE,CACV,CAAC;EACD,IAAA,IAAQ3kB,EAAE,GAAoC4O,KAAK,CAA3C5O,EAAE;QAAA2oI,cAAA,GAAoC/5H,KAAK,CAAvC+V,OAAO;EAAPA,MAAAA,OAAO,GAAAgkH,cAAA,KAAA,MAAA,GAAG,EAAE,GAAAA,cAAA;QAAE3mI,IAAI,GAAgB4M,KAAK,CAAzB5M,IAAI;QAAEjC,IAAI,GAAU6O,KAAK,CAAnB7O,IAAI;QAAEjG,GAAG,GAAK8U,KAAK,CAAb9U,GAAG;MACzC,IAAI,CAACm3B,GAAG,CAACiE,OAAO,CAAC15B,MAAM,CAACg8H,qBAAqB,EAAE;EAC7Cx3H,MAAAA,EAAE,EAAFA,EAAE;EACF2kB,MAAAA,OAAO,EAAPA,OAAO;EACP3iB,MAAAA,IAAI,EAAJA,IAAI;EACJjC,MAAAA,IAAI,EAAJA,IAAI;EACJjG,MAAAA,GAAG,EAAHA;EACF,KAAC,CAAC;EACF,IAAA,IAAMs8F,gBAAgB,GAAG,IAAI,CAACL,YAAY,CACxCnnF,KAAK,CAAC9U,GAAG,EACTsgG,SAAS,IAAA,IAAA,GAAA,MAAA,GAATA,SAAS,CAAE9xE,OAAO,EAClB1Z,KAAK,CAAC0Z,OACR,CAAC;EACD,IAAA,IAAI,CAACwtE,YAAY,CAACM,gBAAgB,CAAC;IACrC,CAAC;IAAA,OAAAt3F,YAAA,CAAA2oI,uBAAA,EAAA,CAAA;MAAA1oI,GAAA,EAAA,iBAAA;MAAAC,GAAA,EAlfD,SAAAA,GAAAA,GAAsC;QACpC,OAAO,IAAI,CAAC6oI,gBAAgB;MAC9B,CAAC;EAAAliI,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAA2BzK,KAAc,EAAE;QACzC,IAAI,CAAC2sI,gBAAgB,GAAG3sI,KAAK;EAC7B,MAAA,IAAI,IAAI,CAAC+S,OAAO,GAAG,EAAE,EAAE;UACrB,IAAI,CAACu6H,gBAAgB,EAAE;EACzB,MAAA;EACF,IAAA;EAAC,GAAA,EAAA;MAAAzpI,GAAA,EAAA,mBAAA;MAAAC,GAAA,EA0SD,SAAAA,GAAAA,GAAyC;QACvC,OAAO,IAAI,CAAC0U,MAAM;EACpB,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAA3U,GAAA,EAAA,gBAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAAsC;QACpC,OAAO,IAAI,CAAC85F,aAAa;EAC3B,IAAA;;EAEA;EAAA,GAAA,EAAA;MAAA/5F,GAAA,EAAA,eAAA;MAAAC,GAAA,EACA,SAAAA,GAAAA,GAA4B;QAC1B,OAAO,IAAI,CAACiP,OAAO;MACrB,CAAC;EAAAtI,IAAAA,GAAA,EAED,SAAAA,GAAAA,CAAkBw0F,KAAa,EAAE;QAC/B,IAAI,CAACnB,kBAAkB,GAAG,KAAK;EAC/B,MAAA,IAAI,CAACovC,gBAAgB,CAACjuC,KAAK,CAAC;EAC9B,IAAA;EAAC,GAAA,CAAA,CAAA;EAAA,CAAA,CAlWmCvE,sBAAsB,CAAA;;ECzB5D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAMgzC,uBAAuB,GAAG;EAC9B,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd;EACA;EACA;EACA,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ;EACA;EACA,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,MAAM;EAAE;EACd,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ;EACA;EACA,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE;EACZ,EAAA,IAAI,EAAE,IAAI;EAAE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","x_google_ignoreList":[0,1,2,11,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173]}