{"version":3,"file":"index.js","sources":["../../src/src/core/utils.ts","../../src/src/core/cache.ts","../../src/src/core/environment.ts","../../src/src/core/store.ts","../../src/src/core/scroller.ts","../../src/src/core/resizer.ts","../../src/src/solid/ListItem.tsx","../../src/src/solid/utils.ts","../../src/src/solid/Virtualizer.tsx","../../src/src/solid/VList.tsx","../../src/src/solid/WindowVirtualizer.tsx"],"sourcesContent":["/** @internal */\nexport const NULL = null;\n\n/** @internal */\nexport const { min, max, abs, floor } = Math;\n\n/**\n * @internal\n */\nexport const clamp = (\n  value: number,\n  minValue: number,\n  maxValue: number\n): number => min(maxValue, max(minValue, value));\n\n/**\n * @internal\n */\nexport const sort = <T extends number>(arr: readonly T[]): T[] => {\n  return [...arr].sort((a, b) => a - b);\n};\n\n/**\n * @internal\n */\nexport const microtask: (fn: () => void) => void =\n  typeof queueMicrotask === \"function\"\n    ? queueMicrotask\n    : (fn) => {\n        Promise.resolve().then(fn);\n      };\n\n/**\n * @internal\n */\nexport const once = <T>(fn: () => T): (() => T) => {\n  let cache: T;\n\n  return () => {\n    if (fn) {\n      cache = fn();\n      fn = undefined!;\n    }\n    return cache;\n  };\n};\n","import { type InternalCacheSnapshot, type ItemsRange } from \"./types\";\nimport { clamp, floor, max, min, sort } from \"./utils\";\n\ntype Writeable<T> = {\n  -readonly [key in keyof T]: Writeable<T[key]>;\n};\n\n/** @internal */\nexport const UNCACHED = -1;\n\n/**\n * @internal\n */\nexport type Cache = {\n  readonly _length: number;\n  // sizes\n  readonly _sizes: number[];\n  readonly _defaultItemSize: number;\n  // offsets\n  readonly _computedOffsetIndex: number;\n  readonly _offsets: number[];\n};\n\nconst fill = (array: number[], length: number, prepend?: boolean): number[] => {\n  const key = prepend ? \"unshift\" : \"push\";\n  for (let i = 0; i < length; i++) {\n    array[key](UNCACHED);\n  }\n  return array;\n};\n\n/**\n * @internal\n */\nexport const getItemSize = (cache: Cache, index: number): number => {\n  const size = cache._sizes[index]!;\n  return size === UNCACHED ? cache._defaultItemSize : size;\n};\n\n/**\n * @internal\n */\nexport const setItemSize = (\n  cache: Writeable<Cache>,\n  index: number,\n  size: number\n): boolean => {\n  const isInitialMeasurement = cache._sizes[index] === UNCACHED;\n  cache._sizes[index] = size;\n  // mark as dirty\n  cache._computedOffsetIndex = min(index, cache._computedOffsetIndex);\n  return isInitialMeasurement;\n};\n\n/**\n * @internal\n */\nexport const computeOffset = (\n  cache: Writeable<Cache>,\n  index: number\n): number => {\n  if (!cache._length) return 0;\n  if (cache._computedOffsetIndex >= index) {\n    return cache._offsets[index]!;\n  }\n\n  if (cache._computedOffsetIndex < 0) {\n    // first offset must be 0 to avoid returning NaN, which can cause infinite rerender.\n    // https://github.com/inokawa/virtua/pull/160\n    cache._offsets[0] = 0;\n    cache._computedOffsetIndex = 0;\n  }\n  let i = cache._computedOffsetIndex;\n  let top = cache._offsets[i]!;\n  while (i < index) {\n    top += getItemSize(cache, i);\n    cache._offsets[++i] = top;\n  }\n  // mark as measured\n  cache._computedOffsetIndex = index;\n  return top;\n};\n\n/**\n * @internal\n */\nexport const computeTotalSize = (cache: Cache): number => {\n  if (!cache._length) return 0;\n  return (\n    computeOffset(cache, cache._length - 1) +\n    getItemSize(cache, cache._length - 1)\n  );\n};\n\n/**\n * Finds the index of an item in the cache whose computed offset is closest to the specified offset.\n *\n * @internal\n */\nexport const findIndex = (\n  cache: Cache,\n  offset: number,\n  low: number = 0,\n  high: number = cache._length - 1\n): number => {\n  // Find with binary search\n  while (low <= high) {\n    const mid = floor((low + high) / 2);\n    const itemOffset = computeOffset(cache, mid);\n    if (itemOffset <= offset) {\n      if (itemOffset + getItemSize(cache, mid) > offset) {\n        return mid;\n      }\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n  return clamp(low, 0, cache._length - 1);\n};\n\n/**\n * @internal\n */\nexport const computeRange = (\n  cache: Cache,\n  scrollOffset: number,\n  viewportSize: number,\n  prevStartIndex: number\n): ItemsRange => {\n  // Clamp because prevStartIndex may exceed the limit when children decreased a lot after scrolling\n  prevStartIndex = min(prevStartIndex, cache._length - 1);\n\n  if (computeOffset(cache, prevStartIndex) <= scrollOffset) {\n    // search forward\n    // start <= end, prevStartIndex <= start\n    const end = findIndex(cache, scrollOffset + viewportSize, prevStartIndex);\n    return [findIndex(cache, scrollOffset, prevStartIndex, end), end];\n  } else {\n    // search backward\n    // start <= end, start <= prevStartIndex\n    const start = findIndex(cache, scrollOffset, undefined, prevStartIndex);\n    return [start, findIndex(cache, scrollOffset + viewportSize, start)];\n  }\n};\n\n/**\n * @internal\n */\nexport const estimateDefaultItemSize = (\n  cache: Writeable<Cache>,\n  startIndex: number\n): number => {\n  let measuredCountBeforeStart = 0;\n  // This function will be called after measurement so measured size array must be longer than 0\n  const measuredSizes: number[] = [];\n  cache._sizes.forEach((s, i) => {\n    if (s !== UNCACHED) {\n      measuredSizes.push(s);\n      if (i < startIndex) {\n        measuredCountBeforeStart++;\n      }\n    }\n  });\n\n  // Discard cache for now\n  cache._computedOffsetIndex = -1;\n\n  // Calculate median\n  const sorted = sort(measuredSizes);\n  const len = sorted.length;\n  const mid = (len / 2) | 0;\n  const median =\n    len % 2 === 0 ? (sorted[mid - 1]! + sorted[mid]!) / 2 : sorted[mid]!;\n\n  const prevDefaultItemSize = cache._defaultItemSize;\n\n  // Calculate diff of unmeasured items before start\n  return (\n    ((cache._defaultItemSize = median) - prevDefaultItemSize) *\n    max(startIndex - measuredCountBeforeStart, 0)\n  );\n};\n\n/**\n * @internal\n */\nexport const initCache = (\n  length: number,\n  itemSize: number,\n  snapshot?: InternalCacheSnapshot\n): Cache => {\n  return {\n    _defaultItemSize: snapshot ? snapshot[1] : itemSize,\n    _sizes:\n      snapshot && snapshot[0]\n        ? // https://github.com/inokawa/virtua/issues/441\n          fill(\n            snapshot[0].slice(0, min(length, snapshot[0].length)),\n            max(0, length - snapshot[0].length)\n          )\n        : fill([], length),\n    _length: length,\n    _computedOffsetIndex: -1,\n    _offsets: fill([], length),\n  };\n};\n\n/**\n * @internal\n */\nexport const takeCacheSnapshot = (cache: Cache): InternalCacheSnapshot => {\n  return [cache._sizes.slice(), cache._defaultItemSize];\n};\n\n/**\n * @internal\n */\nexport const updateCacheLength = (\n  cache: Writeable<Cache>,\n  length: number,\n  isShift?: boolean\n): number => {\n  const diff = length - cache._length;\n\n  cache._computedOffsetIndex = isShift\n    ? // Discard cache for now\n      -1\n    : min(length - 1, cache._computedOffsetIndex);\n  cache._length = length;\n\n  if (diff > 0) {\n    // Added\n    fill(cache._offsets, diff);\n    fill(cache._sizes, diff, isShift);\n    return cache._defaultItemSize * diff;\n  } else {\n    // Removed\n    cache._offsets.splice(diff);\n    return (\n      isShift ? cache._sizes.splice(0, -diff) : cache._sizes.splice(diff)\n    ).reduce(\n      (acc, removed) =>\n        acc - (removed === UNCACHED ? cache._defaultItemSize : removed),\n      0\n    );\n  }\n};\n","import { once } from \"./utils\";\n\n/**\n * @internal\n */\nexport const isBrowser = typeof window !== \"undefined\";\n\nconst getDocumentElement = () => document.documentElement;\n\n/**\n * @internal\n */\nexport const getCurrentDocument = (node: HTMLElement): Document =>\n  node.ownerDocument;\n\n/**\n * @internal\n */\nexport const getCurrentWindow = (doc: Document) => doc.defaultView!;\n\n/**\n * @internal\n */\nexport const isRTLDocument = /*#__PURE__*/ once((): boolean => {\n  // TODO support SSR in rtl\n  return isBrowser\n    ? getComputedStyle(getDocumentElement()).direction === \"rtl\"\n    : false;\n});\n\n/**\n * Currently, all browsers on iOS/iPadOS are WebKit, including WebView.\n * @internal\n */\nexport const isIOSWebKit = /*#__PURE__*/ once((): boolean => {\n  return /iP(hone|od|ad)/.test(navigator.userAgent);\n});\n\n/**\n * @internal\n */\nexport const isSmoothScrollSupported = /*#__PURE__*/ once((): boolean => {\n  return \"scrollBehavior\" in getDocumentElement().style;\n});\n","import {\n  initCache,\n  getItemSize as _getItemSize,\n  computeTotalSize,\n  computeOffset as computeStartOffset,\n  UNCACHED,\n  setItemSize,\n  estimateDefaultItemSize,\n  updateCacheLength,\n  computeRange,\n  takeCacheSnapshot,\n  findIndex,\n} from \"./cache\";\nimport { isIOSWebKit } from \"./environment\";\nimport type {\n  CacheSnapshot,\n  InternalCacheSnapshot,\n  ItemResize,\n  ItemsRange,\n} from \"./types\";\nimport { abs, max, min, NULL } from \"./utils\";\n\nconst MAX_INT_32 = 0x7fffffff;\n\nconst SCROLL_IDLE = 0;\nconst SCROLL_DOWN = 1;\nconst SCROLL_UP = 2;\ntype ScrollDirection =\n  | typeof SCROLL_IDLE\n  | typeof SCROLL_DOWN\n  | typeof SCROLL_UP;\n\nconst SCROLL_BY_NATIVE = 0;\nconst SCROLL_BY_MANUAL_SCROLL = 1;\nconst SCROLL_BY_SHIFT = 2;\ntype ScrollMode =\n  | typeof SCROLL_BY_NATIVE\n  | typeof SCROLL_BY_MANUAL_SCROLL\n  | typeof SCROLL_BY_SHIFT;\n\n/** @internal */\nexport const ACTION_SCROLL = 1;\n/** @internal */\nexport const ACTION_SCROLL_END = 2;\n/** @internal */\nexport const ACTION_ITEM_RESIZE = 3;\n/** @internal */\nexport const ACTION_VIEWPORT_RESIZE = 4;\n/** @internal */\nexport const ACTION_ITEMS_LENGTH_CHANGE = 5;\n/** @internal */\nexport const ACTION_START_OFFSET_CHANGE = 6;\n/** @internal */\nexport const ACTION_MANUAL_SCROLL = 7;\n/** @internal */\nexport const ACTION_BEFORE_MANUAL_SMOOTH_SCROLL = 8;\n\ntype Actions =\n  | [type: typeof ACTION_SCROLL, offset: number]\n  | [type: typeof ACTION_SCROLL_END, dummy?: void]\n  | [type: typeof ACTION_ITEM_RESIZE, entries: ItemResize[]]\n  | [type: typeof ACTION_VIEWPORT_RESIZE, size: number]\n  | [\n      type: typeof ACTION_ITEMS_LENGTH_CHANGE,\n      arg: [length: number, isShift?: boolean | undefined],\n    ]\n  | [type: typeof ACTION_START_OFFSET_CHANGE, offset: number]\n  | [type: typeof ACTION_MANUAL_SCROLL, dummy?: void]\n  | [type: typeof ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, offset: number];\n\n/** @internal */\nexport const UPDATE_VIRTUAL_STATE = 0b0001;\n/** @internal */\nexport const UPDATE_SIZE_EVENT = 0b0010;\n/** @internal */\nexport const UPDATE_SCROLL_EVENT = 0b0100;\n/** @internal */\nexport const UPDATE_SCROLL_END_EVENT = 0b1000;\n\n/**\n * @internal\n */\nexport const getScrollSize = (store: VirtualStore): number => {\n  return max(store.$getTotalSize(), store.$getViewportSize());\n};\n\n/**\n * @internal\n */\nexport const isInitialMeasurementDone = (store: VirtualStore): boolean => {\n  return !!store.$getViewportSize();\n};\n\ntype Subscriber = (sync?: boolean) => void;\n\n/** @internal */\nexport type StateVersion =\n  number & {} /* hack for typescript to pretend as not falsy */;\n\n/**\n * @internal\n */\nexport type VirtualStore = {\n  $getStateVersion(): StateVersion;\n  $getCacheSnapshot(): CacheSnapshot;\n  $getRange(): ItemsRange;\n  $findStartIndex(): number;\n  $findEndIndex(): number;\n  $isUnmeasuredItem(index: number): boolean;\n  $getItemOffset(index: number): number;\n  $getItemSize(index: number): number;\n  $getItemsLength(): number;\n  $getScrollOffset(): number;\n  $isScrolling(): boolean;\n  $getViewportSize(): number;\n  $getStartSpacerSize(): number;\n  $getTotalSize(): number;\n  _flushJump(): [number, boolean];\n  $subscribe(target: number, cb: Subscriber): () => void;\n  $update(...action: Actions): void;\n  _hasUnmeasuredItemsInFrozenRange(): boolean;\n};\n\n/**\n * @internal\n */\nexport const createVirtualStore = (\n  elementsCount: number,\n  itemSize: number = 40,\n  overscan: number = 4,\n  ssrCount: number = 0,\n  cacheSnapshot?: CacheSnapshot | undefined,\n  shouldAutoEstimateItemSize: boolean = false\n): VirtualStore => {\n  let isSSR = !!ssrCount;\n  let stateVersion: StateVersion = 1;\n  let viewportSize = 0;\n  let startSpacerSize = 0;\n  let scrollOffset = 0;\n  let jump = 0;\n  let pendingJump = 0;\n  let _flushedJump = 0;\n  let _scrollDirection: ScrollDirection = SCROLL_IDLE;\n  let _scrollMode: ScrollMode = SCROLL_BY_NATIVE;\n  let _frozenRange: ItemsRange | null = isSSR\n    ? [0, max(ssrCount - 1, 0)]\n    : NULL;\n  let _prevRange: ItemsRange = [0, 0];\n  let _totalMeasuredSize = 0;\n\n  const cache = initCache(\n    elementsCount,\n    itemSize,\n    cacheSnapshot as unknown as InternalCacheSnapshot | undefined\n  );\n  const subscribers = new Set<[number, Subscriber]>();\n  const getRelativeScrollOffset = () => scrollOffset - startSpacerSize;\n  const getVisibleOffset = () => getRelativeScrollOffset() + pendingJump + jump;\n  const getRange = (offset: number) => {\n    return computeRange(cache, offset, viewportSize, _prevRange[0]);\n  };\n  const getTotalSize = (): number => computeTotalSize(cache);\n  const getItemOffset = (index: number): number => {\n    return computeStartOffset(cache, index) - pendingJump;\n  };\n  const getItemSize = (index: number): number => {\n    return _getItemSize(cache, index);\n  };\n\n  const applyJump = (j: number) => {\n    if (j) {\n      // In iOS WebKit browsers, updating scroll position will stop scrolling so it have to be deferred during scrolling.\n      if (isIOSWebKit() && _scrollDirection !== SCROLL_IDLE) {\n        pendingJump += j;\n      } else {\n        jump += j;\n      }\n    }\n  };\n\n  return {\n    $getStateVersion: () => stateVersion,\n    $getCacheSnapshot: () => {\n      return takeCacheSnapshot(cache) as unknown as CacheSnapshot;\n    },\n    $getRange: () => {\n      let startIndex: number;\n      let endIndex: number;\n      if (_flushedJump) {\n        // Return previous range for consistent render until next scroll event comes in.\n        // And it must be clamped. https://github.com/inokawa/virtua/issues/597\n        [startIndex, endIndex] = _prevRange;\n      } else {\n        [startIndex, endIndex] = _prevRange = getRange(\n          max(0, getVisibleOffset())\n        );\n        if (_frozenRange) {\n          startIndex = min(startIndex, _frozenRange[0]);\n          endIndex = max(endIndex, _frozenRange[1]);\n        }\n      }\n\n      if (_scrollDirection !== SCROLL_DOWN) {\n        startIndex -= max(0, overscan);\n      }\n      if (_scrollDirection !== SCROLL_UP) {\n        endIndex += max(0, overscan);\n      }\n      return [max(startIndex, 0), min(endIndex, cache._length - 1)];\n    },\n    $findStartIndex: () => findIndex(cache, getVisibleOffset()),\n    $findEndIndex: () => findIndex(cache, getVisibleOffset() + viewportSize),\n    $isUnmeasuredItem: (index) => cache._sizes[index] === UNCACHED,\n    _hasUnmeasuredItemsInFrozenRange: () => {\n      if (!_frozenRange) return false;\n      return cache._sizes\n        .slice(\n          max(0, _frozenRange[0] - 1),\n          min(cache._length - 1, _frozenRange[1] + 1) + 1\n        )\n        .includes(UNCACHED);\n    },\n    $getItemOffset: getItemOffset,\n    $getItemSize: getItemSize,\n    $getItemsLength: () => cache._length,\n    $getScrollOffset: () => scrollOffset,\n    $isScrolling: () => _scrollDirection !== SCROLL_IDLE,\n    $getViewportSize: () => viewportSize,\n    $getStartSpacerSize: () => startSpacerSize,\n    $getTotalSize: getTotalSize,\n    _flushJump: () => {\n      _flushedJump = jump;\n      jump = 0;\n      return [\n        _flushedJump,\n        // Use absolute position not to exceed scrollable bounds\n        _scrollMode === SCROLL_BY_SHIFT ||\n          // https://github.com/inokawa/virtua/discussions/475\n          getRelativeScrollOffset() + viewportSize >= getTotalSize(),\n      ];\n    },\n    $subscribe: (target, cb) => {\n      const sub: [number, Subscriber] = [target, cb];\n      subscribers.add(sub);\n      return () => {\n        subscribers.delete(sub);\n      };\n    },\n    $update: (type, payload): void => {\n      let shouldFlushPendingJump: boolean | undefined;\n      let shouldSync: boolean | undefined;\n      let mutated = 0;\n\n      switch (type) {\n        case ACTION_SCROLL: {\n          const flushedJump = _flushedJump;\n          _flushedJump = 0;\n\n          const delta = payload - scrollOffset;\n          const distance = abs(delta);\n\n          // Scroll event after jump compensation is not reliable because it may result in the opposite direction.\n          // The delta of artificial scroll may not be equal with the jump because it may be batched with other scrolls.\n          // And at least in latest Chrome/Firefox/Safari in 2023, setting value to scrollTop/scrollLeft can lose subpixel because its integer (sometimes float probably depending on dpr).\n          const isJustJumped = flushedJump && distance < abs(flushedJump) + 1;\n\n          // Scroll events are dispatched enough so it's ok to skip some of them.\n          if (\n            !isJustJumped &&\n            // Ignore until manual scrolling\n            _scrollMode === SCROLL_BY_NATIVE\n          ) {\n            _scrollDirection = delta < 0 ? SCROLL_UP : SCROLL_DOWN;\n          }\n\n          // TODO This will cause glitch in reverse infinite scrolling. Disable this until better solution is found.\n          // if (\n          //   pendingJump &&\n          //   ((_scrollDirection === SCROLL_UP &&\n          //     payload - max(pendingJump, 0) <= 0) ||\n          //     (_scrollDirection === SCROLL_DOWN &&\n          //       payload - min(pendingJump, 0) >= getScrollOffsetMax()))\n          // ) {\n          //   // Flush if almost reached to start or end\n          //   shouldFlushPendingJump = true;\n          // }\n\n          if (isSSR) {\n            _frozenRange = NULL;\n            isSSR = false;\n          }\n\n          scrollOffset = payload;\n          mutated = UPDATE_SCROLL_EVENT;\n\n          // Skip if offset is not changed\n          // Scroll offset may exceed min or max especially in Safari's elastic scrolling.\n          const relativeOffset = getRelativeScrollOffset();\n          if (\n            relativeOffset >= -viewportSize &&\n            relativeOffset <= getTotalSize()\n          ) {\n            mutated += UPDATE_VIRTUAL_STATE;\n\n            // Update synchronously if scrolled a lot\n            shouldSync = distance > viewportSize;\n          }\n          break;\n        }\n        case ACTION_SCROLL_END: {\n          mutated = UPDATE_SCROLL_END_EVENT;\n          if (_scrollDirection !== SCROLL_IDLE) {\n            shouldFlushPendingJump = true;\n            mutated += UPDATE_VIRTUAL_STATE;\n          }\n          _scrollDirection = SCROLL_IDLE;\n          _scrollMode = SCROLL_BY_NATIVE;\n          _frozenRange = NULL;\n          break;\n        }\n        case ACTION_ITEM_RESIZE: {\n          const updated = payload.filter(\n            ([index, size]) => cache._sizes[index] !== size\n          );\n\n          // Skip if all items are cached and not updated\n          if (!updated.length) {\n            break;\n          }\n\n          // Calculate jump by resize to minimize junks in appearance\n          applyJump(\n            updated.reduce((acc, [index, size]) => {\n              if (\n                // Keep distance from end during shifting\n                _scrollMode === SCROLL_BY_SHIFT ||\n                (_frozenRange\n                  ? // https://github.com/inokawa/virtua/issues/380\n                    // https://github.com/inokawa/virtua/issues/590\n                    !isSSR && index < _frozenRange[0]\n                  : // Otherwise we should maintain visible position\n                    getItemOffset(index) +\n                      // https://github.com/inokawa/virtua/issues/385\n                      (_scrollDirection === SCROLL_IDLE &&\n                      _scrollMode === SCROLL_BY_NATIVE\n                        ? getItemSize(index)\n                        : 0) <\n                    getRelativeScrollOffset())\n              ) {\n                acc += size - getItemSize(index);\n              }\n              return acc;\n            }, 0)\n          );\n\n          // Update item sizes\n          for (const [index, size] of updated) {\n            const prevSize = getItemSize(index);\n            const isInitialMeasurement = setItemSize(cache, index, size);\n\n            if (shouldAutoEstimateItemSize) {\n              _totalMeasuredSize += isInitialMeasurement\n                ? size\n                : size - prevSize;\n            }\n          }\n\n          // Estimate initial item size from measured sizes\n          if (\n            shouldAutoEstimateItemSize &&\n            viewportSize &&\n            // If the total size is lower than the viewport, the item may be a empty state\n            _totalMeasuredSize > viewportSize\n          ) {\n            applyJump(\n              estimateDefaultItemSize(\n                cache,\n                findIndex(cache, getVisibleOffset())\n              )\n            );\n            shouldAutoEstimateItemSize = false;\n          }\n\n          mutated = UPDATE_VIRTUAL_STATE + UPDATE_SIZE_EVENT;\n\n          // Synchronous update is necessary in current design to minimize visible glitch in concurrent rendering.\n          // However this seems to be the main cause of the errors from ResizeObserver.\n          // https://github.com/inokawa/virtua/issues/470\n          //\n          // And in React, synchronous update with flushSync after asynchronous update will overtake the asynchronous one.\n          // If items resize happens just after scroll, race condition can occur depending on implementation.\n          shouldSync = true;\n          break;\n        }\n        case ACTION_VIEWPORT_RESIZE: {\n          if (viewportSize !== payload) {\n            viewportSize = payload;\n            mutated = UPDATE_VIRTUAL_STATE + UPDATE_SIZE_EVENT;\n          }\n          break;\n        }\n        case ACTION_ITEMS_LENGTH_CHANGE: {\n          if (payload[1]) {\n            applyJump(updateCacheLength(cache, payload[0], true));\n            _scrollMode = SCROLL_BY_SHIFT;\n            mutated = UPDATE_VIRTUAL_STATE;\n          } else {\n            updateCacheLength(cache, payload[0]);\n            // https://github.com/inokawa/virtua/issues/552\n            // https://github.com/inokawa/virtua/issues/557\n            mutated = UPDATE_VIRTUAL_STATE;\n          }\n          break;\n        }\n        case ACTION_START_OFFSET_CHANGE: {\n          startSpacerSize = payload;\n          break;\n        }\n        case ACTION_MANUAL_SCROLL: {\n          _scrollMode = SCROLL_BY_MANUAL_SCROLL;\n          break;\n        }\n        case ACTION_BEFORE_MANUAL_SMOOTH_SCROLL: {\n          _frozenRange = getRange(payload);\n          mutated = UPDATE_VIRTUAL_STATE;\n          break;\n        }\n      }\n\n      if (mutated) {\n        stateVersion = (stateVersion & MAX_INT_32) + 1;\n\n        if (shouldFlushPendingJump && pendingJump) {\n          jump += pendingJump;\n          pendingJump = 0;\n        }\n\n        subscribers.forEach(([target, cb]) => {\n          // Early return to skip React's computation\n          if (!(mutated & target)) {\n            return;\n          }\n          // https://github.com/facebook/react/issues/25191\n          // https://github.com/facebook/react/blob/a5fc797db14c6e05d4d5c4dbb22a0dd70d41f5d5/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1443-L1447\n          cb(shouldSync);\n        });\n      }\n    },\n  };\n};\n","import {\n  getCurrentDocument,\n  getCurrentWindow,\n  isIOSWebKit,\n  isRTLDocument,\n  isSmoothScrollSupported,\n} from \"./environment\";\nimport {\n  ACTION_SCROLL,\n  type VirtualStore,\n  ACTION_SCROLL_END,\n  UPDATE_SIZE_EVENT,\n  ACTION_MANUAL_SCROLL,\n  ACTION_BEFORE_MANUAL_SMOOTH_SCROLL,\n  ACTION_START_OFFSET_CHANGE,\n  isInitialMeasurementDone,\n} from \"./store\";\nimport { type ScrollToIndexOpts } from \"./types\";\nimport { clamp, microtask, NULL } from \"./utils\";\n\nconst timeout = setTimeout;\n\nconst debounce = <T extends () => void>(fn: T, ms: number) => {\n  let id: ReturnType<typeof setTimeout> | undefined | null;\n\n  const cancel = () => {\n    if (id != NULL) {\n      clearTimeout(id);\n    }\n  };\n  const debouncedFn = () => {\n    cancel();\n    id = timeout(() => {\n      id = NULL;\n      fn();\n    }, ms);\n  };\n  debouncedFn._cancel = cancel;\n  return debouncedFn;\n};\n\n/**\n * scrollLeft is negative value in rtl direction.\n *\n * left  right\n * 0     100    spec compliant (ltr)\n * -100  0      spec compliant (rtl)\n * https://github.com/othree/jquery.rtl-scroll-type\n */\nconst normalizeOffset = (offset: number, isHorizontal: boolean): number => {\n  if (isHorizontal && isRTLDocument()) {\n    return -offset;\n  } else {\n    return offset;\n  }\n};\n\nconst createScrollObserver = (\n  store: VirtualStore,\n  viewport: HTMLElement | Window,\n  isHorizontal: boolean,\n  getScrollOffset: () => number,\n  updateScrollOffset: (\n    value: number,\n    shift: boolean,\n    isMomentumScrolling: boolean\n  ) => void,\n  getStartOffset?: () => number\n) => {\n  const now = Date.now;\n\n  let lastScrollTime = 0;\n  let wheeling = false;\n  let touching = false;\n  let justTouchEnded = false;\n  let stillMomentumScrolling = false;\n\n  const onScrollEnd = debounce(() => {\n    if (wheeling || touching) {\n      wheeling = false;\n\n      // Wait while wheeling or touching\n      onScrollEnd();\n      return;\n    }\n\n    justTouchEnded = false;\n\n    store.$update(ACTION_SCROLL_END);\n  }, 150);\n\n  const onScroll = () => {\n    lastScrollTime = now();\n\n    if (justTouchEnded) {\n      stillMomentumScrolling = true;\n    }\n\n    if (getStartOffset) {\n      store.$update(ACTION_START_OFFSET_CHANGE, getStartOffset());\n    }\n    store.$update(ACTION_SCROLL, getScrollOffset());\n\n    onScrollEnd();\n  };\n\n  // Infer scroll state also from wheel events\n  // Sometimes scroll events do not fire when frame dropped even if the visual have been already scrolled\n  const onWheel = ((e: WheelEvent) => {\n    if (\n      wheeling ||\n      // Scroll start should be detected with scroll event\n      !store.$isScrolling() ||\n      // Probably a pinch-to-zoom gesture\n      e.ctrlKey\n    ) {\n      return;\n    }\n\n    const timeDelta = now() - lastScrollTime;\n    if (\n      // Check if wheel event occurs some time after scrolling\n      150 > timeDelta &&\n      50 < timeDelta &&\n      // Get delta before checking deltaMode for firefox behavior\n      // https://github.com/w3c/uievents/issues/181#issuecomment-392648065\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460#c34\n      (isHorizontal ? e.deltaX : e.deltaY)\n    ) {\n      wheeling = true;\n    }\n  }) as (e: Event) => void; // FIXME type error. why only here?\n\n  const onTouchStart = () => {\n    touching = true;\n    justTouchEnded = stillMomentumScrolling = false;\n  };\n  const onTouchEnd = () => {\n    touching = false;\n    if (isIOSWebKit()) {\n      justTouchEnded = true;\n    }\n  };\n\n  viewport.addEventListener(\"scroll\", onScroll);\n  viewport.addEventListener(\"wheel\", onWheel, { passive: true });\n  viewport.addEventListener(\"touchstart\", onTouchStart, { passive: true });\n  viewport.addEventListener(\"touchend\", onTouchEnd, { passive: true });\n\n  return {\n    _dispose: () => {\n      viewport.removeEventListener(\"scroll\", onScroll);\n      viewport.removeEventListener(\"wheel\", onWheel);\n      viewport.removeEventListener(\"touchstart\", onTouchStart);\n      viewport.removeEventListener(\"touchend\", onTouchEnd);\n      onScrollEnd._cancel();\n    },\n    _fixScrollJump: () => {\n      const [jump, shift] = store._flushJump();\n      if (!jump) return;\n      updateScrollOffset(\n        normalizeOffset(jump, isHorizontal),\n        shift,\n        stillMomentumScrolling\n      );\n      stillMomentumScrolling = false;\n\n      if (shift && store.$getViewportSize() > store.$getTotalSize()) {\n        // In this case applying jump may not cause scroll.\n        // Current logic expects scroll event occurs after applying jump so we dispatch it manually.\n        store.$update(ACTION_SCROLL, getScrollOffset());\n      }\n    },\n  };\n};\n\ntype ScrollObserver = ReturnType<typeof createScrollObserver>;\n\n/**\n * @internal\n */\nexport type Scroller = {\n  $observe: (viewportElement: HTMLElement) => void;\n  $dispose(): void;\n  $scrollTo: (offset: number) => void;\n  $scrollBy: (offset: number) => void;\n  $scrollToIndex: (index: number, opts?: ScrollToIndexOpts) => void;\n  $fixScrollJump: () => void;\n};\n\n/**\n * @internal\n */\nexport const createScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): Scroller => {\n  let viewportElement: HTMLElement | undefined;\n  let scrollObserver: ScrollObserver | undefined;\n  let cancelScroll: (() => void) | undefined;\n  const scrollOffsetKey = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n  const overflowKey = isHorizontal ? \"overflowX\" : \"overflowY\";\n\n  // The given offset will be clamped by browser\n  // https://drafts.csswg.org/cssom-view/#dom-element-scrolltop\n  const scheduleImperativeScroll = async (\n    getTargetOffset: () => number,\n    smooth?: boolean\n  ) => {\n    if (!viewportElement) {\n      // Wait for element assign. The element may be undefined if scrollRef prop is used and scroll is scheduled on mount.\n      microtask(() => scheduleImperativeScroll(getTargetOffset, smooth));\n      return;\n    }\n\n    if (cancelScroll) {\n      // Cancel waiting scrollTo\n      cancelScroll();\n    }\n\n    const waitForMeasurement = (): [Promise<void>, () => void] => {\n      // Wait for the scroll destination items to be measured.\n      // The measurement will be done asynchronously and the timing is not predictable so we use promise.\n      let queue: (() => void) | undefined;\n      return [\n        new Promise<void>((resolve, reject) => {\n          queue = resolve;\n          cancelScroll = reject;\n\n          // Resize event may not happen when the window/tab is not visible, or during browser back in Safari.\n          // We have to wait for the initial measurement to avoid failing imperative scroll on mount.\n          // https://github.com/inokawa/virtua/issues/450\n          if (isInitialMeasurementDone(store)) {\n            // Reject when items around scroll destination completely measured\n            timeout(reject, 150);\n          }\n        }),\n        store.$subscribe(UPDATE_SIZE_EVENT, () => {\n          queue && queue();\n        }),\n      ];\n    };\n\n    if (smooth && isSmoothScrollSupported()) {\n      while (true) {\n        store.$update(ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, getTargetOffset());\n\n        if (!store._hasUnmeasuredItemsInFrozenRange()) {\n          break;\n        }\n\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          await promise;\n        } catch (e) {\n          // canceled\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n\n      viewportElement.scrollTo({\n        [isHorizontal ? \"left\" : \"top\"]: normalizeOffset(\n          getTargetOffset(),\n          isHorizontal\n        ),\n        behavior: \"smooth\",\n      });\n    } else {\n      while (true) {\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          viewportElement[scrollOffsetKey] = normalizeOffset(\n            getTargetOffset(),\n            isHorizontal\n          );\n          store.$update(ACTION_MANUAL_SCROLL);\n\n          await promise;\n        } catch (e) {\n          // canceled or finished\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n    }\n  };\n\n  return {\n    $observe(viewport) {\n      viewportElement = viewport;\n\n      scrollObserver = createScrollObserver(\n        store,\n        viewport,\n        isHorizontal,\n        () => normalizeOffset(viewport[scrollOffsetKey], isHorizontal),\n        (jump, shift, isMomentumScrolling) => {\n          // If we update scroll position while touching on iOS, the position will be reverted.\n          // However iOS WebKit fires touch events only once at the beginning of momentum scrolling.\n          // That means we have no reliable way to confirm still touched or not if user touches more than once during momentum scrolling...\n          // This is a hack for the suspectable situations, inspired by https://github.com/prud/ios-overflow-scroll-to-top\n          if (isMomentumScrolling) {\n            const style = viewport.style;\n            const prev = style[overflowKey];\n            style[overflowKey] = \"hidden\";\n            timeout(() => {\n              style[overflowKey] = prev;\n            });\n          }\n\n          if (shift) {\n            viewport[scrollOffsetKey] = store.$getScrollOffset() + jump;\n            // https://github.com/inokawa/virtua/issues/357\n            cancelScroll && cancelScroll();\n          } else {\n            viewport[scrollOffsetKey] += jump;\n          }\n        }\n      );\n    },\n    $dispose() {\n      scrollObserver && scrollObserver._dispose();\n    },\n    $scrollTo(offset) {\n      scheduleImperativeScroll(() => offset);\n    },\n    $scrollBy(offset) {\n      offset += store.$getScrollOffset();\n      scheduleImperativeScroll(() => offset);\n    },\n    $scrollToIndex(index, { align, smooth, offset = 0 } = {}) {\n      index = clamp(index, 0, store.$getItemsLength() - 1);\n\n      if (align === \"nearest\") {\n        const itemOffset = store.$getItemOffset(index);\n        const scrollOffset = store.$getScrollOffset();\n\n        if (itemOffset < scrollOffset) {\n          align = \"start\";\n        } else if (\n          itemOffset + store.$getItemSize(index) >\n          scrollOffset + store.$getViewportSize()\n        ) {\n          align = \"end\";\n        } else {\n          // already completely visible\n          return;\n        }\n      }\n\n      scheduleImperativeScroll(() => {\n        return (\n          offset +\n          store.$getStartSpacerSize() +\n          store.$getItemOffset(index) +\n          (align === \"end\"\n            ? store.$getItemSize(index) - store.$getViewportSize()\n            : align === \"center\"\n              ? (store.$getItemSize(index) - store.$getViewportSize()) / 2\n              : 0)\n        );\n      }, smooth);\n    },\n    $fixScrollJump: () => {\n      scrollObserver && scrollObserver._fixScrollJump();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type WindowScroller = {\n  $observe(containerElement: HTMLElement): void;\n  $dispose(): void;\n  $scrollToIndex: (index: number, opts?: ScrollToIndexOpts) => void;\n  $fixScrollJump: () => void;\n};\n\n/**\n * @internal\n */\nexport const createWindowScroller = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): WindowScroller => {\n  let containerElement: HTMLElement | undefined;\n  let scrollObserver: ScrollObserver | undefined;\n  let cancelScroll: (() => void) | undefined;\n\n  const calcOffsetToViewport = (\n    node: HTMLElement,\n    viewport: HTMLElement,\n    window: Window,\n    isHorizontal: boolean,\n    offset: number = 0\n  ): number => {\n    // TODO calc offset only when it changes (maybe impossible)\n    const offsetKey = isHorizontal ? \"offsetLeft\" : \"offsetTop\";\n    const offsetSum =\n      offset +\n      (isHorizontal && isRTLDocument()\n        ? window.innerWidth - node[offsetKey] - node.offsetWidth\n        : node[offsetKey]);\n\n    const parent = node.offsetParent;\n    if (node === viewport || !parent) {\n      return offsetSum;\n    }\n\n    return calcOffsetToViewport(\n      parent as HTMLElement,\n      viewport,\n      window,\n      isHorizontal,\n      offsetSum\n    );\n  };\n\n  const scheduleImperativeScroll = async (\n    getTargetOffset: () => number,\n    smooth?: boolean\n  ) => {\n    if (!containerElement) {\n      // Wait for element assign\n      microtask(() => scheduleImperativeScroll(getTargetOffset, smooth));\n      return;\n    }\n\n    if (cancelScroll) {\n      cancelScroll();\n    }\n\n    const waitForMeasurement = (): [Promise<void>, () => void] => {\n      let queue: (() => void) | undefined;\n      return [\n        new Promise<void>((resolve, reject) => {\n          queue = resolve;\n          cancelScroll = reject;\n\n          if (isInitialMeasurementDone(store)) {\n            timeout(reject, 150);\n          }\n        }),\n        store.$subscribe(UPDATE_SIZE_EVENT, () => {\n          queue && queue();\n        }),\n      ];\n    };\n\n    const window = getCurrentWindow(getCurrentDocument(containerElement));\n\n    if (smooth && isSmoothScrollSupported()) {\n      while (true) {\n        store.$update(ACTION_BEFORE_MANUAL_SMOOTH_SCROLL, getTargetOffset());\n\n        if (!store._hasUnmeasuredItemsInFrozenRange()) {\n          break;\n        }\n\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          await promise;\n        } catch (e) {\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n\n      window.scroll({\n        [isHorizontal ? \"left\" : \"top\"]: normalizeOffset(\n          getTargetOffset(),\n          isHorizontal\n        ),\n        behavior: \"smooth\",\n      });\n    } else {\n      while (true) {\n        const [promise, unsubscribe] = waitForMeasurement();\n\n        try {\n          window.scroll({\n            [isHorizontal ? \"left\" : \"top\"]: normalizeOffset(\n              getTargetOffset(),\n              isHorizontal\n            ),\n          });\n          store.$update(ACTION_MANUAL_SCROLL);\n\n          await promise;\n        } catch (e) {\n          return;\n        } finally {\n          unsubscribe();\n        }\n      }\n    }\n  };\n\n  return {\n    $observe(container) {\n      containerElement = container;\n      const scrollOffsetKey = isHorizontal ? \"scrollX\" : \"scrollY\";\n\n      const document = getCurrentDocument(container);\n      const window = getCurrentWindow(document);\n      const documentBody = document.body;\n\n      scrollObserver = createScrollObserver(\n        store,\n        window,\n        isHorizontal,\n        () => normalizeOffset(window[scrollOffsetKey], isHorizontal),\n        (jump, shift) => {\n          // TODO support case two window scrollers exist in the same view\n          if (shift) {\n            window.scroll({\n              [isHorizontal ? \"left\" : \"top\"]: store.$getScrollOffset() + jump,\n            });\n          } else {\n            window.scrollBy(isHorizontal ? jump : 0, isHorizontal ? 0 : jump);\n          }\n        },\n        () =>\n          calcOffsetToViewport(container, documentBody, window, isHorizontal)\n      );\n    },\n    $dispose() {\n      scrollObserver && scrollObserver._dispose();\n      containerElement = undefined;\n    },\n    $fixScrollJump: () => {\n      scrollObserver && scrollObserver._fixScrollJump();\n    },\n    $scrollToIndex(index, { align, smooth, offset = 0 } = {}) {\n      if (!containerElement) return;\n\n      index = clamp(index, 0, store.$getItemsLength() - 1);\n\n      if (align === \"nearest\") {\n        const itemOffset = store.$getItemOffset(index);\n        const scrollOffset = store.$getScrollOffset();\n\n        if (itemOffset < scrollOffset) {\n          align = \"start\";\n        } else if (\n          itemOffset + store.$getItemSize(index) >\n          scrollOffset + store.$getViewportSize()\n        ) {\n          align = \"end\";\n        } else {\n          return;\n        }\n      }\n\n      const document = getCurrentDocument(containerElement);\n      const window = getCurrentWindow(document);\n      const html = document.documentElement;\n      const getScrollbarSize = () =>\n        store.$getViewportSize() -\n        (isHorizontal ? html.clientWidth : html.clientHeight);\n\n      scheduleImperativeScroll(() => {\n        return (\n          offset +\n          // Calculate target scroll position including container's offset from document\n          calcOffsetToViewport(\n            containerElement!,\n            document.body,\n            window,\n            isHorizontal\n          ) +\n          // store._getStartSpacerSize() +\n          store.$getItemOffset(index) +\n          (align === \"end\"\n            ? store.$getItemSize(index) -\n              (store.$getViewportSize() - getScrollbarSize())\n            : align === \"center\"\n              ? (store.$getItemSize(index) -\n                  (store.$getViewportSize() - getScrollbarSize())) /\n                2\n              : 0)\n        );\n      }, smooth);\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type GridScroller = {\n  $observe: (viewportElement: HTMLElement) => void;\n  $dispose(): void;\n  $scrollTo: (offsetX: number, offsetY: number) => void;\n  $scrollBy: (offsetX: number, offsetY: number) => void;\n  $scrollToIndex: (indexX: number, indexY: number) => void;\n  $fixScrollJump: () => void;\n};\n\n/**\n * @internal\n */\nexport const createGridScroller = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n): GridScroller => {\n  const vScroller = createScroller(vStore, false);\n  const hScroller = createScroller(hStore, true);\n  return {\n    $observe(viewportElement) {\n      vScroller.$observe(viewportElement);\n      hScroller.$observe(viewportElement);\n    },\n    $dispose() {\n      vScroller.$dispose();\n      hScroller.$dispose();\n    },\n    $scrollTo(offsetX, offsetY) {\n      vScroller.$scrollTo(offsetY);\n      hScroller.$scrollTo(offsetX);\n    },\n    $scrollBy(offsetX, offsetY) {\n      vScroller.$scrollBy(offsetY);\n      hScroller.$scrollBy(offsetX);\n    },\n    $scrollToIndex(indexX, indexY) {\n      vScroller.$scrollToIndex(indexY);\n      hScroller.$scrollToIndex(indexX);\n    },\n    $fixScrollJump() {\n      vScroller.$fixScrollJump();\n      hScroller.$fixScrollJump();\n    },\n  };\n};\n","import { getCurrentDocument, getCurrentWindow } from \"./environment\";\nimport {\n  ACTION_ITEM_RESIZE,\n  ACTION_VIEWPORT_RESIZE,\n  type VirtualStore,\n} from \"./store\";\nimport { type ItemResize } from \"./types\";\nimport { max, NULL } from \"./utils\";\n\nconst createResizeObserver = (cb: ResizeObserverCallback) => {\n  let ro: ResizeObserver | undefined;\n\n  return {\n    _observe(e: HTMLElement) {\n      // Initialize ResizeObserver lazily for SSR\n      // https://www.w3.org/TR/resize-observer/#intro\n      (\n        ro ||\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1491739\n        (ro = new (getCurrentWindow(getCurrentDocument(e)).ResizeObserver)(cb))\n      ).observe(e);\n    },\n    _unobserve(e: HTMLElement) {\n      ro!.unobserve(e);\n    },\n    _dispose() {\n      ro && ro.disconnect();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport type ItemResizeObserver = (el: HTMLElement, i: number) => () => void;\n\ninterface ListResizer {\n  $observeRoot(viewportElement: HTMLElement): void;\n  $observeItem: ItemResizeObserver;\n  $dispose(): void;\n}\n\n/**\n * @internal\n */\nexport const createResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): ListResizer => {\n  let viewportElement: HTMLElement | undefined;\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizes: ItemResize[] = [];\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      if (target === viewportElement) {\n        store.$update(ACTION_VIEWPORT_RESIZE, contentRect[sizeKey]);\n      } else {\n        const index = mountedIndexes.get(target);\n        if (index != NULL) {\n          resizes.push([index, contentRect[sizeKey]]);\n        }\n      }\n    }\n\n    if (resizes.length) {\n      store.$update(ACTION_ITEM_RESIZE, resizes);\n    }\n  });\n\n  return {\n    $observeRoot(viewport: HTMLElement) {\n      resizeObserver._observe((viewportElement = viewport));\n    },\n    $observeItem: (el: HTMLElement, i: number) => {\n      mountedIndexes.set(el, i);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    $dispose: resizeObserver._dispose,\n  };\n};\n\ninterface WindowListResizer {\n  $observeRoot(container: HTMLElement): void;\n  $observeItem: ItemResizeObserver;\n  $dispose(): void;\n}\n\n/**\n * @internal\n */\nexport const createWindowResizer = (\n  store: VirtualStore,\n  isHorizontal: boolean\n): WindowListResizer => {\n  const sizeKey = isHorizontal ? \"width\" : \"height\";\n  const windowSizeKey = isHorizontal ? \"innerWidth\" : \"innerHeight\";\n  const mountedIndexes = new WeakMap<Element, number>();\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizes: ItemResize[] = [];\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      const index = mountedIndexes.get(target);\n      if (index != NULL) {\n        resizes.push([index, contentRect[sizeKey]]);\n      }\n    }\n\n    if (resizes.length) {\n      store.$update(ACTION_ITEM_RESIZE, resizes);\n    }\n  });\n\n  let cleanupOnWindowResize: (() => void) | undefined;\n\n  return {\n    $observeRoot(container) {\n      const window = getCurrentWindow(getCurrentDocument(container));\n      const onWindowResize = () => {\n        store.$update(ACTION_VIEWPORT_RESIZE, window[windowSizeKey]);\n      };\n      window.addEventListener(\"resize\", onWindowResize);\n      onWindowResize();\n\n      cleanupOnWindowResize = () => {\n        window.removeEventListener(\"resize\", onWindowResize);\n      };\n    },\n    $observeItem: (el: HTMLElement, i: number) => {\n      mountedIndexes.set(el, i);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    $dispose() {\n      cleanupOnWindowResize && cleanupOnWindowResize();\n      resizeObserver._dispose();\n    },\n  };\n};\n\n/**\n * @internal\n */\nexport const createGridResizer = (\n  vStore: VirtualStore,\n  hStore: VirtualStore\n) => {\n  let viewportElement: HTMLElement | undefined;\n\n  const heightKey = \"height\";\n  const widthKey = \"width\";\n  const mountedIndexes = new WeakMap<\n    Element,\n    [rowIndex: number, colIndex: number]\n  >();\n\n  type CellSize = [height: number, width: number];\n  const maybeCachedRowIndexes = new Set<number>();\n  const maybeCachedColIndexes = new Set<number>();\n  const sizeCache = new Map<string, CellSize>();\n  const getKey = (rowIndex: number, colIndex: number): string =>\n    `${rowIndex}-${colIndex}`;\n\n  const resizeObserver = createResizeObserver((entries) => {\n    const resizedRows = new Set<number>();\n    const resizedCols = new Set<number>();\n    for (const { target, contentRect } of entries) {\n      // Skip zero-sized rects that may be observed under `display: none` style\n      if (!(target as HTMLElement).offsetParent) continue;\n\n      if (target === viewportElement) {\n        vStore.$update(ACTION_VIEWPORT_RESIZE, contentRect[heightKey]);\n        hStore.$update(ACTION_VIEWPORT_RESIZE, contentRect[widthKey]);\n      } else {\n        const cell = mountedIndexes.get(target);\n        if (cell) {\n          const [rowIndex, colIndex] = cell;\n          const key = getKey(rowIndex, colIndex);\n          const prevSize = sizeCache.get(key);\n          const size: CellSize = [\n            contentRect[heightKey],\n            contentRect[widthKey],\n          ];\n          let rowResized: boolean | undefined;\n          let colResized: boolean | undefined;\n          if (!prevSize) {\n            rowResized = colResized = true;\n          } else {\n            if (prevSize[0] !== size[0]) {\n              rowResized = true;\n            }\n            if (prevSize[1] !== size[1]) {\n              colResized = true;\n            }\n          }\n          if (rowResized) {\n            resizedRows.add(rowIndex);\n          }\n          if (colResized) {\n            resizedCols.add(colIndex);\n          }\n          if (rowResized || colResized) {\n            sizeCache.set(key, size);\n          }\n        }\n      }\n    }\n\n    if (resizedRows.size) {\n      const heightResizes: ItemResize[] = [];\n      resizedRows.forEach((rowIndex) => {\n        let maxHeight = 0;\n        maybeCachedColIndexes.forEach((colIndex) => {\n          const size = sizeCache.get(getKey(rowIndex, colIndex));\n          if (size) {\n            maxHeight = max(maxHeight, size[0]);\n          }\n        });\n        if (maxHeight) {\n          heightResizes.push([rowIndex, maxHeight]);\n        }\n      });\n      vStore.$update(ACTION_ITEM_RESIZE, heightResizes);\n    }\n    if (resizedCols.size) {\n      const widthResizes: ItemResize[] = [];\n      resizedCols.forEach((colIndex) => {\n        let maxWidth = 0;\n        maybeCachedRowIndexes.forEach((rowIndex) => {\n          const size = sizeCache.get(getKey(rowIndex, colIndex));\n          if (size) {\n            maxWidth = max(maxWidth, size[1]);\n          }\n        });\n        if (maxWidth) {\n          widthResizes.push([colIndex, maxWidth]);\n        }\n      });\n      hStore.$update(ACTION_ITEM_RESIZE, widthResizes);\n    }\n  });\n\n  return {\n    $observeRoot(viewport: HTMLElement) {\n      resizeObserver._observe((viewportElement = viewport));\n    },\n    $observeItem(el: HTMLElement, rowIndex: number, colIndex: number) {\n      mountedIndexes.set(el, [rowIndex, colIndex]);\n      maybeCachedRowIndexes.add(rowIndex);\n      maybeCachedColIndexes.add(colIndex);\n      resizeObserver._observe(el);\n      return () => {\n        mountedIndexes.delete(el);\n        resizeObserver._unobserve(el);\n      };\n    },\n    $dispose: resizeObserver._dispose,\n  };\n};\n\n/**\n * @internal\n */\nexport type GridResizer = ReturnType<typeof createGridResizer>;\n","/**\n * @jsxImportSource solid-js\n */\nimport { ItemResizeObserver, isRTLDocument } from \"../core\";\nimport {\n  Component,\n  JSX,\n  createEffect,\n  createMemo,\n  mergeProps,\n  onCleanup,\n  type ValidComponent,\n} from \"solid-js\";\nimport { Dynamic } from \"solid-js/web\";\n\ninterface ListItemProps {\n  _children: JSX.Element;\n  _resizer: ItemResizeObserver;\n  _index: number;\n  _offset: number;\n  _hide: boolean;\n  _isHorizontal: boolean;\n  _as?: ValidComponent;\n}\n\n/**\n * @internal\n */\nexport const ListItem: Component<ListItemProps> = (props) => {\n  let elementRef: HTMLDivElement | undefined;\n  props = mergeProps<[Partial<ListItemProps>, ListItemProps]>(\n    { _as: \"div\" },\n    props\n  );\n\n  // The index may be changed if elements are inserted to or removed from the start of props.children\n  createEffect(() => {\n    if (!elementRef) return;\n    onCleanup(props._resizer(elementRef, props._index));\n  });\n\n  const style = createMemo(() => {\n    const isHorizontal = props._isHorizontal;\n    const style: JSX.CSSProperties = {\n      position: \"absolute\",\n      [isHorizontal ? \"height\" : \"width\"]: \"100%\",\n      [isHorizontal ? \"top\" : \"left\"]: \"0px\",\n      [isHorizontal ? (isRTLDocument() ? \"right\" : \"left\") : \"top\"]:\n        props._offset + \"px\",\n      visibility: props._hide ? \"hidden\" : \"visible\",\n    };\n    if (isHorizontal) {\n      style.display = \"flex\";\n    }\n    return style;\n  });\n\n  return (\n    <Dynamic component={props._as} index={props._index} ref={elementRef} style={style()}>\n      {props._children}\n    </Dynamic>\n  );\n};\n","import { ItemsRange } from \"../core\";\n\n/**\n * @internal\n */\nexport const isSameRange = (prev: ItemsRange, next: ItemsRange): boolean => {\n  return prev[0] === next[0] && prev[1] === next[1];\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport {\n  onMount,\n  onCleanup,\n  createEffect,\n  createSignal,\n  createMemo,\n  JSX,\n  on,\n  createComputed,\n  type ValidComponent,\n  mergeProps,\n  For,\n  Accessor,\n  untrack,\n} from \"solid-js\";\nimport { Dynamic } from \"solid-js/web\";\nimport {\n  UPDATE_SCROLL_EVENT,\n  UPDATE_SCROLL_END_EVENT,\n  UPDATE_VIRTUAL_STATE,\n  createVirtualStore,\n  ACTION_ITEMS_LENGTH_CHANGE,\n  getScrollSize,\n  ACTION_START_OFFSET_CHANGE,\n  createResizer,\n  createScroller,\n  ItemsRange,\n  ScrollToIndexOpts,\n  CacheSnapshot,\n  sort,\n} from \"../core\";\nimport { ListItem } from \"./ListItem\";\nimport { isSameRange } from \"./utils\";\n\n/**\n * Methods of {@link Virtualizer}.\n */\nexport interface VirtualizerHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n  /**\n   * Get current scrollTop, or scrollLeft if horizontal: true.\n   */\n  readonly scrollOffset: number;\n  /**\n   * Get current scrollHeight, or scrollWidth if horizontal: true.\n   */\n  readonly scrollSize: number;\n  /**\n   * Get current offsetHeight, or offsetWidth if horizontal: true.\n   */\n  readonly viewportSize: number;\n  /**\n   * Find the start index of visible range of items.\n   */\n  findStartIndex: () => number;\n  /**\n   * Find the end index of visible range of items.\n   */\n  findEndIndex: () => number;\n  /**\n   * Get item offset from start.\n   * @param index index of item\n   */\n  getItemOffset(index: number): number;\n  /**\n   * Get item size.\n   * @param index index of item\n   */\n  getItemSize(index: number): number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   * @param opts options\n   */\n  scrollToIndex(index: number, opts?: ScrollToIndexOpts): void;\n  /**\n   * Scroll to the given offset.\n   * @param offset offset from start\n   */\n  scrollTo(offset: number): void;\n  /**\n   * Scroll by the given offset.\n   * @param offset offset from current position\n   */\n  scrollBy(offset: number): void;\n}\n\n/**\n * Props of {@link Virtualizer}.\n */\nexport interface VirtualizerProps<T> {\n  /**\n   * Get reference to {@link VirtualizerHandle}.\n   */\n  ref?: (handle?: VirtualizerHandle) => void;\n  /**\n   * The data items rendered by this component.\n   */\n  data: T[];\n  /**\n   * The elements renderer function.\n   */\n  children: (data: T, index: Accessor<number>) => JSX.Element;\n  /**\n   * Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Component or element type for container element.\n   * @defaultValue \"div\"\n   */\n  as?: ValidComponent;\n  /**\n   * Component or element type for item element.\n   * @defaultValue \"div\"\n   */\n  item?: ValidComponent;\n  /**\n   * Reference to the scrollable element. The default will get the direct parent element of virtualizer.\n   */\n  scrollRef?: HTMLElement;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  itemSize?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * List of indexes that should be always mounted, even when off screen.\n   */\n  keepMounted?: number[];\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link VirtualizerHandle.cache}.\n   *\n   * **The length of items should be the same as when you take the snapshot, otherwise restoration may not work as expected.**\n   */\n  cache?: CacheSnapshot;\n  /**\n   * If you put an element before virtualizer, you have to define its height with this prop.\n   */\n  startMargin?: number;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   * @param offset Current scrollTop, or scrollLeft if horizontal: true.\n   */\n  onScroll?: (offset: number) => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollEnd?: () => void;\n}\n\n/**\n * Customizable list virtualizer for advanced usage. See {@link VirtualizerProps} and {@link VirtualizerHandle}.\n */\nexport const Virtualizer = <T,>(props: VirtualizerProps<T>): JSX.Element => {\n  let containerRef: HTMLDivElement | undefined;\n  const { itemSize, horizontal = false, overscan, cache } = props;\n  props = mergeProps<[Partial<VirtualizerProps<T>>, VirtualizerProps<T>]>(\n    { as: \"div\" },\n    props\n  );\n\n  const store = createVirtualStore(\n    props.data.length,\n    itemSize,\n    overscan,\n    undefined,\n    cache,\n    !itemSize\n  );\n  const resizer = createResizer(store, horizontal);\n  const scroller = createScroller(store, horizontal);\n\n  const [stateVersion, setRerender] = createSignal(store.$getStateVersion());\n\n  const unsubscribeStore = store.$subscribe(UPDATE_VIRTUAL_STATE, () => {\n    setRerender(store.$getStateVersion());\n  });\n\n  const unsubscribeOnScroll = store.$subscribe(UPDATE_SCROLL_EVENT, () => {\n    props.onScroll?.(store.$getScrollOffset());\n  });\n  const unsubscribeOnScrollEnd = store.$subscribe(\n    UPDATE_SCROLL_END_EVENT,\n    () => {\n      props.onScrollEnd?.();\n    }\n  );\n\n  const range = createMemo<ItemsRange>((prev) => {\n    stateVersion();\n    const next = store.$getRange();\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n  const isScrolling = createMemo(() => stateVersion() && store.$isScrolling());\n  const totalSize = createMemo(() => stateVersion() && store.$getTotalSize());\n\n  onMount(() => {\n    if (props.ref) {\n      props.ref({\n        get cache() {\n          return store.$getCacheSnapshot();\n        },\n        get scrollOffset() {\n          return store.$getScrollOffset();\n        },\n        get scrollSize() {\n          return getScrollSize(store);\n        },\n        get viewportSize() {\n          return store.$getViewportSize();\n        },\n        findStartIndex: store.$findStartIndex,\n        findEndIndex: store.$findEndIndex,\n        getItemOffset: store.$getItemOffset,\n        getItemSize: store.$getItemSize,\n        scrollToIndex: scroller.$scrollToIndex,\n        scrollTo: scroller.$scrollTo,\n        scrollBy: scroller.$scrollBy,\n      });\n    }\n\n    const scrollable = props.scrollRef || containerRef!.parentElement!;\n    resizer.$observeRoot(scrollable);\n    scroller.$observe(scrollable);\n\n    onCleanup(() => {\n      if (props.ref) {\n        props.ref();\n      }\n\n      unsubscribeStore();\n      unsubscribeOnScroll();\n      unsubscribeOnScrollEnd();\n      resizer.$dispose();\n      scroller.$dispose();\n    });\n  });\n\n  createComputed(\n    on(\n      () => props.startMargin || 0,\n      (value) => {\n        if (value !== store.$getStartSpacerSize()) {\n          store.$update(ACTION_START_OFFSET_CHANGE, value);\n        }\n      }\n    )\n  );\n\n  createEffect(\n    on(stateVersion, () => {\n      scroller.$fixScrollJump();\n    })\n  );\n\n  const dataSlice = createMemo(() => {\n    const count = props.data.length;\n    untrack(() => {\n      if (count !== store.$getItemsLength()) {\n        store.$update(ACTION_ITEMS_LENGTH_CHANGE, [count, props.shift]);\n      }\n    });\n    const [start, end] = range();\n    const items = end >= 0 ? props.data.slice(start, end + 1) : [];\n    const indexes = items.map((_, index) => start + index);\n\n    if (props.keepMounted) {\n      const startItems: T[] = [];\n      const startIndexes: number[] = [];\n      const endItems: T[] = [];\n      const endIndexes: number[] = [];\n      sort(props.keepMounted).forEach((index) => {\n        if (index < 0 || index >= props.data.length) return;\n        if (index < start) {\n          startItems.push(props.data[index]!);\n          startIndexes.push(index);\n        }\n        if (index > end) {\n          endItems.push(props.data[index]!);\n          endIndexes.push(index);\n        }\n      });\n      items.unshift(...startItems);\n      indexes.unshift(...startIndexes);\n      items.push(...endItems);\n      indexes.push(...endIndexes);\n    }\n\n    return { _items: items, _indexes: indexes };\n  });\n\n  const renderItem = (data: T, index: Accessor<number>) => {\n    const offset = createMemo(() => {\n      stateVersion();\n      return store.$getItemOffset(index());\n    });\n    const hide = createMemo(() => {\n      stateVersion();\n      return store.$isUnmeasuredItem(index());\n    });\n    const children = createMemo(() => {\n      return untrack(() => props.children(data, index));\n    });\n\n    return (\n      <ListItem\n        _as={props.item}\n        _index={index()}\n        _resizer={resizer.$observeItem}\n        _offset={offset()}\n        _hide={hide()}\n        _children={children()}\n        _isHorizontal={horizontal}\n      />\n    );\n  };\n\n  return (\n    <Dynamic\n      component={props.as}\n      ref={containerRef}\n      style={{\n        // contain: \"content\",\n        \"overflow-anchor\": \"none\", // opt out browser's scroll anchoring because it will conflict to scroll anchoring of virtualizer\n        flex: \"none\", // flex style can break layout\n        position: \"relative\",\n        visibility: \"hidden\", // TODO replace with other optimization methods\n        width: horizontal ? totalSize() + \"px\" : \"100%\",\n        height: horizontal ? \"100%\" : totalSize() + \"px\",\n        \"pointer-events\": isScrolling() ? \"none\" : undefined,\n      }}\n    >\n      <For each={dataSlice()._items}>\n        {(data, index) => {\n          const itemIndex = createMemo(() => dataSlice()._indexes[index()]!);\n          // eslint-disable-next-line solid/reactivity\n          return renderItem(data, itemIndex);\n        }}\n      </For>\n    </Dynamic>\n  );\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport { JSX, splitProps } from \"solid-js\";\nimport { ViewportComponentAttributes } from \"./types\";\nimport {\n  Virtualizer,\n  VirtualizerHandle,\n  VirtualizerProps,\n} from \"./Virtualizer\";\n\n/**\n * Methods of {@link VList}.\n */\nexport interface VListHandle extends VirtualizerHandle {}\n\n/**\n * Props of {@link VList}.\n */\nexport interface VListProps<T>\n  extends Pick<\n      VirtualizerProps<T>,\n      | \"ref\"\n      | \"data\"\n      | \"children\"\n      | \"overscan\"\n      | \"itemSize\"\n      | \"shift\"\n      | \"horizontal\"\n      | \"cache\"\n      | \"item\"\n      | \"onScroll\"\n      | \"onScrollEnd\"\n      | \"keepMounted\"\n    >,\n    ViewportComponentAttributes {}\n\n/**\n * Virtualized list component. See {@link VListProps} and {@link VListHandle}.\n */\nexport const VList = <T,>(props: VListProps<T>): JSX.Element => {\n  const [local, others] = splitProps(props, [\n    \"ref\",\n    \"data\",\n    \"children\",\n    \"overscan\",\n    \"itemSize\",\n    \"shift\",\n    \"horizontal\",\n    \"keepMounted\",\n    \"cache\",\n    \"item\",\n    \"onScroll\",\n    \"onScrollEnd\",\n    \"style\",\n  ]);\n\n  return (\n    <div\n      {...others}\n      style={{\n        display: local.horizontal ? \"inline-block\" : \"block\",\n        [local.horizontal ? \"overflow-x\" : \"overflow-y\"]: \"auto\",\n        contain: \"strict\",\n        width: \"100%\",\n        height: \"100%\",\n        ...local.style,\n      }}\n    >\n      <Virtualizer\n        ref={local.ref}\n        data={local.data}\n        overscan={local.overscan}\n        itemSize={local.itemSize}\n        shift={local.shift}\n        horizontal={local.horizontal}\n        keepMounted={local.keepMounted}\n        cache={local.cache}\n        item={local.item}\n        onScroll={local.onScroll}\n        onScrollEnd={local.onScrollEnd}\n      >\n        {local.children}\n      </Virtualizer>\n    </div>\n  );\n};\n","/**\n * @jsxImportSource solid-js\n */\nimport {\n  onMount,\n  onCleanup,\n  createEffect,\n  createSignal,\n  createMemo,\n  JSX,\n  Accessor,\n  on,\n  For,\n  untrack,\n} from \"solid-js\";\nimport {\n  UPDATE_SCROLL_END_EVENT,\n  UPDATE_VIRTUAL_STATE,\n  createVirtualStore,\n  ACTION_ITEMS_LENGTH_CHANGE,\n  UPDATE_SCROLL_EVENT,\n  createWindowResizer,\n  createWindowScroller,\n  ItemsRange,\n  ScrollToIndexOpts,\n  CacheSnapshot,\n} from \"../core\";\nimport { ListItem } from \"./ListItem\";\nimport { isSameRange } from \"./utils\";\n\n/**\n * Methods of {@link WindowVirtualizer}.\n */\nexport interface WindowVirtualizerHandle {\n  /**\n   * Get current {@link CacheSnapshot}.\n   */\n  readonly cache: CacheSnapshot;\n  /**\n   * Find the start index of visible range of items.\n   */\n  findStartIndex: () => number;\n  /**\n   * Find the end index of visible range of items.\n   */\n  findEndIndex: () => number;\n  /**\n   * Scroll to the item specified by index.\n   * @param index index of item\n   * @param opts options\n   */\n  scrollToIndex(index: number, opts?: ScrollToIndexOpts): void;\n}\n\n/**\n * Props of {@link WindowVirtualizer}.\n */\nexport interface WindowVirtualizerProps<T> {\n  /**\n   * Get reference to {@link WindowVirtualizerHandle}.\n   */\n  ref?: (handle?: WindowVirtualizerHandle) => void;\n  /**\n   * The data items rendered by this component.\n   */\n  data: T[];\n  /**\n   * The elements renderer function.\n   */\n  children: (data: T, index: Accessor<number>) => JSX.Element;\n  /**\n   * Number of items to render above/below the visible bounds of the list. Lower value will give better performance but you can increase to avoid showing blank items in fast scrolling.\n   * @defaultValue 4\n   */\n  overscan?: number;\n  /**\n   * Item size hint for unmeasured items. It will help to reduce scroll jump when items are measured if used properly.\n   *\n   * - If not set, initial item sizes will be automatically estimated from measured sizes. This is recommended for most cases.\n   * - If set, you can opt out estimation and use the value as initial item size.\n   */\n  itemSize?: number;\n  /**\n   * While true is set, scroll position will be maintained from the end not usual start when items are added to/removed from start. It's recommended to set false if you add to/remove from mid/end of the list because it can cause unexpected behavior. This prop is useful for reverse infinite scrolling.\n   */\n  shift?: boolean;\n  /**\n   * If true, rendered as a horizontally scrollable list. Otherwise rendered as a vertically scrollable list.\n   */\n  horizontal?: boolean;\n  /**\n   * You can restore cache by passing a {@link CacheSnapshot} on mount. This is useful when you want to restore scroll position after navigation. The snapshot can be obtained from {@link WindowVirtualizerHandle.cache}.\n   *\n   * **The length of items should be the same as when you take the snapshot, otherwise restoration may not work as expected.**\n   */\n  cache?: CacheSnapshot;\n  /**\n   * Callback invoked whenever scroll offset changes.\n   */\n  onScroll?: () => void;\n  /**\n   * Callback invoked when scrolling stops.\n   */\n  onScrollEnd?: () => void;\n}\n\n/**\n * {@link Virtualizer} controlled by the window scrolling. See {@link WindowVirtualizerProps} and {@link WindowVirtualizerHandle}.\n */\nexport const WindowVirtualizer = <T,>(\n  props: WindowVirtualizerProps<T>\n): JSX.Element => {\n  let containerRef: HTMLDivElement | undefined;\n\n  const {\n    ref: _ref,\n    data: _data,\n    children: _children,\n    overscan,\n    itemSize,\n    shift: _shift,\n    horizontal = false,\n    cache,\n    onScrollEnd: _onScrollEnd,\n  } = props;\n\n  const store = createVirtualStore(\n    props.data.length,\n    itemSize,\n    overscan,\n    undefined,\n    cache,\n    !itemSize\n  );\n  const resizer = createWindowResizer(store, horizontal);\n  const scroller = createWindowScroller(store, horizontal);\n\n  const [stateVersion, setRerender] = createSignal(store.$getStateVersion());\n\n  const unsubscribeStore = store.$subscribe(UPDATE_VIRTUAL_STATE, () => {\n    setRerender(store.$getStateVersion());\n  });\n\n  const unsubscribeOnScroll = store.$subscribe(UPDATE_SCROLL_EVENT, () => {\n    // https://github.com/inokawa/virtua/discussions/580\n    props.onScroll?.();\n  });\n  const unsubscribeOnScrollEnd = store.$subscribe(\n    UPDATE_SCROLL_END_EVENT,\n    () => {\n      props.onScrollEnd?.();\n    }\n  );\n\n  const range = createMemo<ItemsRange>((prev) => {\n    stateVersion();\n    const next = store.$getRange();\n    if (prev && isSameRange(prev, next)) {\n      return prev;\n    }\n    return next;\n  });\n  const isScrolling = createMemo(() => stateVersion() && store.$isScrolling());\n  const totalSize = createMemo(() => stateVersion() && store.$getTotalSize());\n\n  onMount(() => {\n    if (props.ref) {\n      props.ref({\n        get cache() {\n          return store.$getCacheSnapshot();\n        },\n        findStartIndex: store.$findStartIndex,\n        findEndIndex: store.$findEndIndex,\n        scrollToIndex: scroller.$scrollToIndex,\n      });\n    }\n\n    resizer.$observeRoot(containerRef!);\n    scroller.$observe(containerRef!);\n\n    onCleanup(() => {\n      if (props.ref) {\n        props.ref();\n      }\n\n      unsubscribeStore();\n      unsubscribeOnScroll();\n      unsubscribeOnScrollEnd();\n      resizer.$dispose();\n      scroller.$dispose();\n    });\n  });\n\n  createEffect(\n    on(stateVersion, () => {\n      scroller.$fixScrollJump();\n    })\n  );\n\n  const dataSlice = createMemo<T[]>(() => {\n    const count = props.data.length;\n    untrack(() => {\n      if (count !== store.$getItemsLength()) {\n        store.$update(ACTION_ITEMS_LENGTH_CHANGE, [count, props.shift]);\n      }\n    });\n    const [start, end] = range();\n    return end >= 0 ? props.data.slice(start, end + 1) : [];\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        // contain: \"content\",\n        \"overflow-anchor\": \"none\", // opt out browser's scroll anchoring because it will conflict to scroll anchoring of virtualizer\n        flex: \"none\", // flex style can break layout\n        position: \"relative\",\n        visibility: \"hidden\", // TODO replace with other optimization methods\n        width: horizontal ? totalSize() + \"px\" : \"100%\",\n        height: horizontal ? \"100%\" : totalSize() + \"px\",\n        \"pointer-events\": isScrolling() ? \"none\" : undefined,\n      }}\n    >\n      <For each={dataSlice()}>\n        {(data, index) => {\n          const itemIndex = createMemo(() => range()[0] + index());\n          const offset = createMemo(() => {\n            stateVersion();\n            return store.$getItemOffset(itemIndex());\n          });\n          const hide = createMemo(() => {\n            stateVersion();\n            return store.$isUnmeasuredItem(itemIndex());\n          });\n          const children = createMemo(() => {\n            return untrack(() => props.children(data, itemIndex));\n          });\n\n          return (\n            <ListItem\n              _index={itemIndex()}\n              _resizer={resizer.$observeItem}\n              _offset={offset()}\n              _hide={hide()}\n              _children={children()}\n              _isHorizontal={horizontal}\n            />\n          );\n        }}\n      </For>\n    </div>\n  );\n};\n"],"names":["NULL","min","max","abs","floor","Math","clamp","value","minValue","maxValue","sort","arr","a","b","microtask","queueMicrotask","fn","Promise","resolve","then","once","cache","undefined","UNCACHED","fill","array","length","prepend","key","i","getItemSize","index","size","_sizes","_defaultItemSize","setItemSize","isInitialMeasurement","_computedOffsetIndex","computeOffset","_length","_offsets","top","findIndex","offset","low","high","mid","itemOffset","updateCacheLength","isShift","diff","splice","reduce","acc","removed","isBrowser","window","getDocumentElement","document","documentElement","getCurrentDocument","node","ownerDocument","getCurrentWindow","doc","defaultView","isRTLDocument","getComputedStyle","direction","isIOSWebKit","test","navigator","userAgent","isSmoothScrollSupported","style","isInitialMeasurementDone","store","$getViewportSize","createVirtualStore","elementsCount","itemSize","overscan","ssrCount","cacheSnapshot","shouldAutoEstimateItemSize","isSSR","stateVersion","viewportSize","startSpacerSize","scrollOffset","jump","pendingJump","_flushedJump","_scrollDirection","_scrollMode","_frozenRange","_prevRange","_totalMeasuredSize","snapshot","slice","initCache","subscribers","Set","getRelativeScrollOffset","getVisibleOffset","getRange","prevStartIndex","end","start","computeRange","getTotalSize","computeTotalSize","getItemOffset","computeStartOffset","_getItemSize","applyJump","j","$getStateVersion","$getCacheSnapshot","takeCacheSnapshot","$getRange","startIndex","endIndex","$findStartIndex","$findEndIndex","$isUnmeasuredItem","_hasUnmeasuredItemsInFrozenRange","includes","$getItemOffset","$getItemSize","$getItemsLength","$getScrollOffset","$isScrolling","$getStartSpacerSize","$getTotalSize","_flushJump","$subscribe","target","cb","sub","add","delete","$update","type","payload","shouldFlushPendingJump","shouldSync","mutated","flushedJump","delta","distance","relativeOffset","updated","filter","prevSize","measuredCountBeforeStart","measuredSizes","forEach","s","push","sorted","len","median","prevDefaultItemSize","estimateDefaultItemSize","UPDATE_VIRTUAL_STATE","timeout","setTimeout","normalizeOffset","isHorizontal","createScrollObserver","viewport","getScrollOffset","updateScrollOffset","getStartOffset","now","Date","lastScrollTime","wheeling","touching","justTouchEnded","stillMomentumScrolling","onScrollEnd","id","cancel","clearTimeout","debouncedFn","_cancel","debounce","onScroll","onWheel","e","ctrlKey","timeDelta","deltaX","deltaY","onTouchStart","onTouchEnd","addEventListener","passive","_dispose","removeEventListener","_fixScrollJump","shift","createResizeObserver","ro","_observe","observe","_unobserve","unobserve","disconnect","ListItem","props","elementRef","mergeProps","_as","createEffect","onCleanup","_resizer","_index","createMemo","_isHorizontal","position","_offset","visibility","_hide","display","_$createComponent","Dynamic","component","ref","r$","children","_children","isSameRange","prev","next","Virtualizer","containerRef","horizontal","as","data","resizer","viewportElement","sizeKey","mountedIndexes","WeakMap","resizeObserver","entries","resizes","contentRect","offsetParent","get","$observeRoot","$observeItem","el","set","$dispose","createResizer","scroller","scrollObserver","cancelScroll","scrollOffsetKey","overflowKey","scheduleImperativeScroll","async","getTargetOffset","smooth","waitForMeasurement","queue","reject","promise","unsubscribe","scrollTo","behavior","$observe","isMomentumScrolling","$scrollTo","$scrollBy","$scrollToIndex","align","$fixScrollJump","createScroller","setRerender","createSignal","unsubscribeStore","unsubscribeOnScroll","_a","call","unsubscribeOnScrollEnd","range","isScrolling","totalSize","onMount","scrollSize","getScrollSize","findStartIndex","findEndIndex","scrollToIndex","scrollBy","scrollable","scrollRef","parentElement","createComputed","on","startMargin","dataSlice","count","untrack","items","indexes","map","_","keepMounted","startItems","startIndexes","endItems","endIndexes","unshift","_items","_indexes","flex","width","height","For","each","renderItem","hide","item","local","others","splitProps","_el$","_tmpl$","_$spread","_$mergeProps","contain","_$insert","createComponent","_ref$","_ref","_data","_shift","_onScrollEnd","windowSizeKey","cleanupOnWindowResize","container","onWindowResize","createWindowResizer","containerElement","calcOffsetToViewport","offsetKey","offsetSum","innerWidth","offsetWidth","parent","scroll","documentBody","body","html","getScrollbarSize","clientWidth","clientHeight","createWindowScroller","_$use","use","setProperty","itemIndex","_$effect","_p$","_v$","_v$2","_v$3","removeProperty","t"],"mappings":"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"}