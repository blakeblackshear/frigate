import { LongPressCallback, LongPressEmptyHandlers, LongPressEventType, LongPressHandlers, LongPressMouseHandlers, LongPressOptions, LongPressPointerHandlers, LongPressResult, LongPressTouchHandlers } from './use-long-press.types';
export declare function useLongPress<Target extends Element = Element, Context = unknown>(callback: null, options?: LongPressOptions<Target, Context>): LongPressResult<LongPressEmptyHandlers, Context>;
export declare function useLongPress<Target extends Element = Element, Context = unknown, Callback extends LongPressCallback<Target, Context> = LongPressCallback<Target, Context>>(callback: Callback, options: LongPressOptions<Target, Context, LongPressEventType.Touch>): LongPressResult<LongPressTouchHandlers<Target>, Context>;
export declare function useLongPress<Target extends Element = Element, Context = unknown, Callback extends LongPressCallback<Target, Context> = LongPressCallback<Target, Context>>(callback: Callback, options: LongPressOptions<Target, Context, LongPressEventType.Mouse>): LongPressResult<LongPressMouseHandlers<Target>, Context>;
export declare function useLongPress<Target extends Element = Element, Context = unknown, Callback extends LongPressCallback<Target, Context> = LongPressCallback<Target, Context>>(callback: Callback, options: LongPressOptions<Target, Context, LongPressEventType.Pointer>): LongPressResult<LongPressPointerHandlers<Target>, Context>;
export declare function useLongPress<Target extends Element = Element, Context = unknown, Callback extends LongPressCallback<Target, Context> = LongPressCallback<Target, Context>>(callback: Callback): LongPressResult<LongPressPointerHandlers<Target>, Context>;
export declare function useLongPress<Target extends Element = Element, Context = unknown, Callback extends LongPressCallback<Target, Context> = LongPressCallback<Target, Context>>(callback: Callback | null, options?: LongPressOptions<Target, Context>): LongPressResult<LongPressHandlers<Target>, Context>;
