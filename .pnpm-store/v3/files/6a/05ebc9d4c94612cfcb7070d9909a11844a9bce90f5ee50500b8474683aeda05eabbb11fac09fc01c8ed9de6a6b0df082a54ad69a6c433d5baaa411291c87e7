{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/fonts.ts","vs/base/browser/fonts.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAEzC,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAE3E;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,SAAS,CAAC,CAAC,CAAC,qCAAqC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,+CAA+C,CAAC,CAAC,CAAC,+CAA+C,CAAC;AAMvM,MAAM,CAAC,MAAM,QAAQ,GAAG,KAAK,IAAuB,EAAE;IACrD,IAAI,CAAC;QACJ,aAAa;QACb,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,eAAe,EAAgB,CAAC;QAC/D,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;QAC9B,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrD,OAAO,QAAQ,CAAC;IACjB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QAChB,OAAO,CAAC,KAAK,CAAC,0BAA0B,KAAK,EAAE,CAAC,CAAC;QACjD,OAAO,EAAE,CAAC;IACX,CAAC;AACF,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,eAAe,GAAG,KAAK,IAAmC,EAAE;IACxE,IAAI,CAAC,UAAU,EAAE,CAAC;QACjB,OAAO,EAAE,CAAC;IACX,CAAC;IACD,MAAM,KAAK,GAAG,MAAM,QAAQ,EAAE,CAAC;IAC/B,MAAM,QAAQ,GAAyB,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACvD,OAAO;YACN,IAAI,EAAE,GAAG,IAAI,EAAE;SACf,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AACjB,CAAC,CAAC","file":"fonts.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from './window.js';\nimport { IJSONSchemaSnippet } from '../common/jsonSchema.js';\nimport { isElectron, isMacintosh, isWindows } from '../common/platform.js';\n\n/**\n * The best font-family to be used in CSS based on the platform:\n * - Windows: Segoe preferred, fallback to sans-serif\n * - macOS: standard system font, fallback to sans-serif\n * - Linux: standard system font preferred, fallback to Ubuntu fonts\n *\n * Note: this currently does not adjust for different locales.\n */\nexport const DEFAULT_FONT_FAMILY = isWindows ? '\"Segoe WPC\", \"Segoe UI\", sans-serif' : isMacintosh ? '-apple-system, BlinkMacSystemFont, sans-serif' : 'system-ui, \"Ubuntu\", \"Droid Sans\", sans-serif';\n\ninterface FontData {\n\treadonly family: string;\n}\n\nexport const getFonts = async (): Promise<string[]> => {\n\ttry {\n\t\t// @ts-ignore\n\t\tconst fonts = await mainWindow.queryLocalFonts() as FontData[];\n\t\tconst fontsArray = [...fonts];\n\t\tconst families = fontsArray.map(font => font.family);\n\t\treturn families;\n\t} catch (error) {\n\t\tconsole.error(`Failed to query fonts: ${error}`);\n\t\treturn [];\n\t}\n};\n\n\nexport const getFontSnippets = async (): Promise<IJSONSchemaSnippet[]> => {\n\tif (!isElectron) {\n\t\treturn [];\n\t}\n\tconst fonts = await getFonts();\n\tconst snippets: IJSONSchemaSnippet[] = fonts.map(font => {\n\t\treturn {\n\t\t\tbody: `${font}`\n\t\t};\n\t});\n\treturn snippets;\n};\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from './window.js';\nimport { IJSONSchemaSnippet } from '../common/jsonSchema.js';\nimport { isElectron, isMacintosh, isWindows } from '../common/platform.js';\n\n/**\n * The best font-family to be used in CSS based on the platform:\n * - Windows: Segoe preferred, fallback to sans-serif\n * - macOS: standard system font, fallback to sans-serif\n * - Linux: standard system font preferred, fallback to Ubuntu fonts\n *\n * Note: this currently does not adjust for different locales.\n */\nexport const DEFAULT_FONT_FAMILY = isWindows ? '\"Segoe WPC\", \"Segoe UI\", sans-serif' : isMacintosh ? '-apple-system, BlinkMacSystemFont, sans-serif' : 'system-ui, \"Ubuntu\", \"Droid Sans\", sans-serif';\n\ninterface FontData {\n\treadonly family: string;\n}\n\nexport const getFonts = async (): Promise<string[]> => {\n\ttry {\n\t\t// @ts-ignore\n\t\tconst fonts = await mainWindow.queryLocalFonts() as FontData[];\n\t\tconst fontsArray = [...fonts];\n\t\tconst families = fontsArray.map(font => font.family);\n\t\treturn families;\n\t} catch (error) {\n\t\tconsole.error(`Failed to query fonts: ${error}`);\n\t\treturn [];\n\t}\n};\n\n\nexport const getFontSnippets = async (): Promise<IJSONSchemaSnippet[]> => {\n\tif (!isElectron) {\n\t\treturn [];\n\t}\n\tconst fonts = await getFonts();\n\tconst snippets: IJSONSchemaSnippet[] = fonts.map(font => {\n\t\treturn {\n\t\t\tbody: `${font}`\n\t\t};\n\t});\n\treturn snippets;\n};\n"]}