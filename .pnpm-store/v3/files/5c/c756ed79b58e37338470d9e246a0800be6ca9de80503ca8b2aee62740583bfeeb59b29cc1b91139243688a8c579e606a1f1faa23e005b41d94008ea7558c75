{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/tokens/common.ts","vs/editor/common/tokens/common.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,MAAM,OAAO,WAAW;IAIvB,YAA4B,iBAAyB,CAAC;QAA1B,mBAAc,GAAd,cAAc,CAAY;QACrD,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,uBAAuB,GAAG,IAAI,GAAG,cAAc,CAAC;IACtD,CAAC;IAEM,eAAe,CAAC,QAAoB;QAC1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACzD,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,QAAQ,EAAE,CAAC;QACZ,CAAC;IACF,CAAC;CACD","file":"common.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class RateLimiter {\n\tprivate _lastRun: number;\n\tprivate readonly _minimumTimeBetweenRuns: number;\n\n\tconstructor(public readonly timesPerSecond: number = 5) {\n\t\tthis._lastRun = 0;\n\t\tthis._minimumTimeBetweenRuns = 1000 / timesPerSecond;\n\t}\n\n\tpublic runIfNotLimited(callback: () => void): void {\n\t\tconst now = Date.now();\n\t\tif (now - this._lastRun >= this._minimumTimeBetweenRuns) {\n\t\t\tthis._lastRun = now;\n\t\t\tcallback();\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class RateLimiter {\n\tprivate _lastRun: number;\n\tprivate readonly _minimumTimeBetweenRuns: number;\n\n\tconstructor(public readonly timesPerSecond: number = 5) {\n\t\tthis._lastRun = 0;\n\t\tthis._minimumTimeBetweenRuns = 1000 / timesPerSecond;\n\t}\n\n\tpublic runIfNotLimited(callback: () => void): void {\n\t\tconst now = Date.now();\n\t\tif (now - this._lastRun >= this._minimumTimeBetweenRuns) {\n\t\t\tthis._lastRun = now;\n\t\t\tcallback();\n\t\t}\n\t}\n}\n"]}