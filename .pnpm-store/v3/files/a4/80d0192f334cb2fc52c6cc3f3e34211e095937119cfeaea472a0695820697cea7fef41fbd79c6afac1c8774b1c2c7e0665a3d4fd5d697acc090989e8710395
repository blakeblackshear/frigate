{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/hover/browser/hoverTypes.ts","vs/editor/contrib/hover/browser/hoverTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AA2ChG,MAAM,OAAO,gBAAgB;IAE5B,YACiB,QAAgB,EAChB,KAAY,EACZ,gBAAoC,EACpC,gBAAoC;QAHpC,aAAQ,GAAR,QAAQ,CAAQ;QAChB,UAAK,GAAL,KAAK,CAAO;QACZ,qBAAgB,GAAhB,gBAAgB,CAAoB;QACpC,qBAAgB,GAAhB,gBAAgB,CAAoB;QALrC,SAAI,iCAAyB;IAO7C,CAAC;IACM,MAAM,CAAC,KAAkB;QAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,kCAA0B,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACtF,CAAC;IACM,oBAAoB,CAAC,UAAuB,EAAE,cAAwB;QAC5E,OAAO,CAAC,UAAU,CAAC,IAAI,kCAA0B,IAAI,cAAc,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAChH,CAAC;CACD;AAED,MAAM,OAAO,yBAAyB;IAErC,YACiB,QAAgB,EAChB,KAA8B,EAC9B,KAAY,EACZ,gBAAoC,EACpC,gBAAoC,EACpC,mBAAwC;QALxC,aAAQ,GAAR,QAAQ,CAAQ;QAChB,UAAK,GAAL,KAAK,CAAyB;QAC9B,UAAK,GAAL,KAAK,CAAO;QACZ,qBAAgB,GAAhB,gBAAgB,CAAoB;QACpC,qBAAgB,GAAhB,gBAAgB,CAAoB;QACpC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAPzC,SAAI,0CAAkC;IAStD,CAAC;IACM,MAAM,CAAC,KAAkB;QAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,2CAAmC,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;IACtF,CAAC;IACM,oBAAoB,CAAC,UAAuB,EAAE,cAAwB;QAC5E,OAAO,CAAC,UAAU,CAAC,IAAI,2CAAmC,IAAI,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC;IAChG,CAAC;CACD;AA+DD;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAE9B,YAA4B,kBAA2C,EAAmB,WAAyB;QAAvF,uBAAkB,GAAlB,kBAAkB,CAAyB;QAAmB,gBAAW,GAAX,WAAW,CAAc;IAAI,CAAC;IAExH,OAAO;QACN,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;IAC7B,CAAC;CACD;AAiBD,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,IAAI,MAAM,wBAAwB;IAA9B;QAE5C,kBAAa,GAAkC,EAAE,CAAC;IAUnD,CAAC;IARO,QAAQ,CAAoC,IAAkF;QACpI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAmC,CAAC,CAAC;IAC9D,CAAC;IAEM,MAAM;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;CAED,EAAE,CAAC,CAAC","file":"hoverTypes.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from '../../../../base/browser/dom.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ScrollEvent } from '../../../../base/common/scrollable.js';\nimport { BrandedService, IConstructorSignature } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor, IEditorMouseEvent } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IModelDecoration } from '../../../common/model.js';\nimport { HoverStartSource } from './hoverOperation.js';\n\nexport interface IHoverPart {\n\t/**\n\t * The creator of this hover part.\n\t */\n\treadonly owner: IEditorHoverParticipant;\n\t/**\n\t * The range where this hover part applies.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\treadonly forceShowAtRange?: boolean;\n\n\t/**\n\t * If true, the hover item should appear before content\n\t */\n\treadonly isBeforeContent?: boolean;\n\t/**\n\t * Is this hover part still valid for this new anchor?\n\t */\n\tisValidForHoverAnchor(anchor: HoverAnchor): boolean;\n}\n\nexport const enum HoverAnchorType {\n\tRange = 1,\n\tForeignElement = 2\n}\n\nexport class HoverRangeAnchor {\n\tpublic readonly type = HoverAnchorType.Range;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.Range && this.range.equalsRange(other.range));\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.Range && showAtPosition.lineNumber === this.range.startLineNumber);\n\t}\n}\n\nexport class HoverForeignElementAnchor {\n\tpublic readonly type = HoverAnchorType.ForeignElement;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly owner: IEditorHoverParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t\tpublic readonly supportsMarkerHover: boolean | undefined\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.ForeignElement && this.owner === other.owner);\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.ForeignElement && this.owner === lastAnchor.owner);\n\t}\n}\n\nexport type HoverAnchor = HoverRangeAnchor | HoverForeignElementAnchor;\n\nexport interface IEditorHoverStatusBar {\n\taddAction(actionOptions: { label: string; iconClass?: string; run: (target: HTMLElement) => void; commandId: string }): IEditorHoverAction;\n\tappend(element: HTMLElement): HTMLElement;\n}\n\nexport interface IEditorHoverAction {\n}\n\nexport interface IEditorHoverColorPickerWidget {\n}\n\nexport interface IEditorHoverContext {\n\t/**\n\t * The contents rendered inside the fragment have been changed, which means that the hover should relayout.\n\t */\n\tonContentsChanged(): void;\n\t/**\n\t * Set the minimum dimensions of the resizable hover\n\t */\n\tsetMinimumDimensions(dimensions: Dimension): void;\n\t/**\n\t * Hide the hover.\n\t */\n\thide(): void;\n\t/**\n\t * Focus the hover.\n\t */\n\tfocus(): void;\n}\n\nexport interface IEditorHoverRenderContext extends IEditorHoverContext {\n\t/**\n\t * The fragment where dom elements should be attached.\n\t */\n\treadonly fragment: DocumentFragment;\n\t/**\n\t * The status bar for actions for this hover.\n\t */\n\treadonly statusBar: IEditorHoverStatusBar;\n}\n\nexport interface IRenderedHoverPart<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * The rendered hover part.\n\t */\n\thoverPart: T;\n\t/**\n\t * The HTML element containing the hover part.\n\t */\n\thoverElement: HTMLElement;\n}\n\nexport interface IRenderedHoverParts<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * Array of rendered hover parts.\n\t */\n\trenderedHoverParts: IRenderedHoverPart<T>[];\n}\n\n/**\n * Default implementation of IRenderedHoverParts.\n */\nexport class RenderedHoverParts<T extends IHoverPart> implements IRenderedHoverParts<T> {\n\n\tconstructor(public readonly renderedHoverParts: IRenderedHoverPart<T>[], private readonly disposables?: IDisposable) { }\n\n\tdispose() {\n\t\tfor (const part of this.renderedHoverParts) {\n\t\t\tpart.dispose();\n\t\t}\n\t\tthis.disposables?.dispose();\n\t}\n}\n\nexport interface IEditorHoverParticipant<T extends IHoverPart = IHoverPart> {\n\treadonly hoverOrdinal: number;\n\tsuggestHoverAnchor?(mouseEvent: IEditorMouseEvent): HoverAnchor | null;\n\tcomputeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[], source: HoverStartSource): T[];\n\tcomputeAsync?(anchor: HoverAnchor, lineDecorations: IModelDecoration[], source: HoverStartSource, token: CancellationToken): AsyncIterable<T>;\n\tcreateLoadingMessage?(anchor: HoverAnchor): T | null;\n\trenderHoverParts(context: IEditorHoverRenderContext, hoverParts: T[]): IRenderedHoverParts<T>;\n\thandleResize?(): void;\n\thandleHide?(): void;\n\thandleContentsChanged?(): void;\n\thandleScroll?(e: ScrollEvent): void;\n}\n\nexport type IEditorHoverParticipantCtor = IConstructorSignature<IEditorHoverParticipant, [ICodeEditor]>;\n\nexport const HoverParticipantRegistry = (new class HoverParticipantRegistry {\n\n\t_participants: IEditorHoverParticipantCtor[] = [];\n\n\tpublic register<Services extends BrandedService[]>(ctor: { new(editor: ICodeEditor, ...services: Services): IEditorHoverParticipant }): void {\n\t\tthis._participants.push(ctor as IEditorHoverParticipantCtor);\n\t}\n\n\tpublic getAll(): IEditorHoverParticipantCtor[] {\n\t\treturn this._participants;\n\t}\n\n}());\n\nexport interface IHoverWidget {\n\t/**\n\t * Returns whether the hover widget is shown or should show in the future.\n\t * If the widget should show, this triggers the display.\n\t * @param mouseEvent editor mouse event\n\t */\n\tshowsOrWillShow(mouseEvent: IEditorMouseEvent): boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from '../../../../base/browser/dom.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ScrollEvent } from '../../../../base/common/scrollable.js';\nimport { BrandedService, IConstructorSignature } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor, IEditorMouseEvent } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { IModelDecoration } from '../../../common/model.js';\nimport { HoverStartSource } from './hoverOperation.js';\n\nexport interface IHoverPart {\n\t/**\n\t * The creator of this hover part.\n\t */\n\treadonly owner: IEditorHoverParticipant;\n\t/**\n\t * The range where this hover part applies.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\treadonly forceShowAtRange?: boolean;\n\n\t/**\n\t * If true, the hover item should appear before content\n\t */\n\treadonly isBeforeContent?: boolean;\n\t/**\n\t * Is this hover part still valid for this new anchor?\n\t */\n\tisValidForHoverAnchor(anchor: HoverAnchor): boolean;\n}\n\nexport const enum HoverAnchorType {\n\tRange = 1,\n\tForeignElement = 2\n}\n\nexport class HoverRangeAnchor {\n\tpublic readonly type = HoverAnchorType.Range;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.Range && this.range.equalsRange(other.range));\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.Range && showAtPosition.lineNumber === this.range.startLineNumber);\n\t}\n}\n\nexport class HoverForeignElementAnchor {\n\tpublic readonly type = HoverAnchorType.ForeignElement;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly owner: IEditorHoverParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t\tpublic readonly supportsMarkerHover: boolean | undefined\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.ForeignElement && this.owner === other.owner);\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.ForeignElement && this.owner === lastAnchor.owner);\n\t}\n}\n\nexport type HoverAnchor = HoverRangeAnchor | HoverForeignElementAnchor;\n\nexport interface IEditorHoverStatusBar {\n\taddAction(actionOptions: { label: string; iconClass?: string; run: (target: HTMLElement) => void; commandId: string }): IEditorHoverAction;\n\tappend(element: HTMLElement): HTMLElement;\n}\n\nexport interface IEditorHoverAction {\n}\n\nexport interface IEditorHoverColorPickerWidget {\n}\n\nexport interface IEditorHoverContext {\n\t/**\n\t * The contents rendered inside the fragment have been changed, which means that the hover should relayout.\n\t */\n\tonContentsChanged(): void;\n\t/**\n\t * Set the minimum dimensions of the resizable hover\n\t */\n\tsetMinimumDimensions(dimensions: Dimension): void;\n\t/**\n\t * Hide the hover.\n\t */\n\thide(): void;\n\t/**\n\t * Focus the hover.\n\t */\n\tfocus(): void;\n}\n\nexport interface IEditorHoverRenderContext extends IEditorHoverContext {\n\t/**\n\t * The fragment where dom elements should be attached.\n\t */\n\treadonly fragment: DocumentFragment;\n\t/**\n\t * The status bar for actions for this hover.\n\t */\n\treadonly statusBar: IEditorHoverStatusBar;\n}\n\nexport interface IRenderedHoverPart<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * The rendered hover part.\n\t */\n\thoverPart: T;\n\t/**\n\t * The HTML element containing the hover part.\n\t */\n\thoverElement: HTMLElement;\n}\n\nexport interface IRenderedHoverParts<T extends IHoverPart> extends IDisposable {\n\t/**\n\t * Array of rendered hover parts.\n\t */\n\trenderedHoverParts: IRenderedHoverPart<T>[];\n}\n\n/**\n * Default implementation of IRenderedHoverParts.\n */\nexport class RenderedHoverParts<T extends IHoverPart> implements IRenderedHoverParts<T> {\n\n\tconstructor(public readonly renderedHoverParts: IRenderedHoverPart<T>[], private readonly disposables?: IDisposable) { }\n\n\tdispose() {\n\t\tfor (const part of this.renderedHoverParts) {\n\t\t\tpart.dispose();\n\t\t}\n\t\tthis.disposables?.dispose();\n\t}\n}\n\nexport interface IEditorHoverParticipant<T extends IHoverPart = IHoverPart> {\n\treadonly hoverOrdinal: number;\n\tsuggestHoverAnchor?(mouseEvent: IEditorMouseEvent): HoverAnchor | null;\n\tcomputeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[], source: HoverStartSource): T[];\n\tcomputeAsync?(anchor: HoverAnchor, lineDecorations: IModelDecoration[], source: HoverStartSource, token: CancellationToken): AsyncIterable<T>;\n\tcreateLoadingMessage?(anchor: HoverAnchor): T | null;\n\trenderHoverParts(context: IEditorHoverRenderContext, hoverParts: T[]): IRenderedHoverParts<T>;\n\thandleResize?(): void;\n\thandleHide?(): void;\n\thandleContentsChanged?(): void;\n\thandleScroll?(e: ScrollEvent): void;\n}\n\nexport type IEditorHoverParticipantCtor = IConstructorSignature<IEditorHoverParticipant, [ICodeEditor]>;\n\nexport const HoverParticipantRegistry = (new class HoverParticipantRegistry {\n\n\t_participants: IEditorHoverParticipantCtor[] = [];\n\n\tpublic register<Services extends BrandedService[]>(ctor: { new(editor: ICodeEditor, ...services: Services): IEditorHoverParticipant }): void {\n\t\tthis._participants.push(ctor as IEditorHoverParticipantCtor);\n\t}\n\n\tpublic getAll(): IEditorHoverParticipantCtor[] {\n\t\treturn this._participants;\n\t}\n\n}());\n\nexport interface IHoverWidget {\n\t/**\n\t * Returns whether the hover widget is shown or should show in the future.\n\t * If the widget should show, this triggers the display.\n\t * @param mouseEvent editor mouse event\n\t */\n\tshowsOrWillShow(mouseEvent: IEditorMouseEvent): boolean;\n}\n"]}