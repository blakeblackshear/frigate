{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsInsertionView.ts","vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/inlineEditsViews/inlineEditsInsertionView.ts"],"names":[],"mappings":"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","file":"inlineEditsInsertionView.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, n } from '../../../../../../../base/browser/dom.js';\nimport { IMouseEvent } from '../../../../../../../base/browser/mouseEvent.js';\nimport { Emitter } from '../../../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../../../base/common/lifecycle.js';\nimport { constObservable, derived, IObservable, observableValue } from '../../../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../../../platform/instantiation/common/instantiation.js';\nimport { editorBackground } from '../../../../../../../platform/theme/common/colorRegistry.js';\nimport { asCssVariable } from '../../../../../../../platform/theme/common/colorUtils.js';\nimport { ICodeEditor } from '../../../../../../browser/editorBrowser.js';\nimport { ObservableCodeEditor, observableCodeEditor } from '../../../../../../browser/observableCodeEditor.js';\nimport { LineSource, renderLines, RenderOptions } from '../../../../../../browser/widget/diffEditor/components/diffEditorViewZones/renderLines.js';\nimport { Rect } from '../../../../../../common/core/2d/rect.js';\nimport { Position } from '../../../../../../common/core/position.js';\nimport { Range } from '../../../../../../common/core/range.js';\nimport { LineRange } from '../../../../../../common/core/ranges/lineRange.js';\nimport { OffsetRange } from '../../../../../../common/core/ranges/offsetRange.js';\nimport { ILanguageService } from '../../../../../../common/languages/language.js';\nimport { LineTokens, TokenArray } from '../../../../../../common/tokens/lineTokens.js';\nimport { InlineDecoration, InlineDecorationType } from '../../../../../../common/viewModel/inlineDecorations.js';\nimport { GhostText, GhostTextPart } from '../../../model/ghostText.js';\nimport { GhostTextView } from '../../ghostText/ghostTextView.js';\nimport { IInlineEditsView, InlineEditTabAction } from '../inlineEditsViewInterface.js';\nimport { getModifiedBorderColor, modifiedBackgroundColor } from '../theme.js';\nimport { getPrefixTrim, mapOutFalsy } from '../utils/utils.js';\n\nconst BORDER_WIDTH = 1;\nconst WIDGET_SEPARATOR_WIDTH = 1;\nconst WIDGET_SEPARATOR_DIFF_EDITOR_WIDTH = 3;\nconst BORDER_RADIUS = 4;\n\nexport class InlineEditsInsertionView extends Disposable implements IInlineEditsView {\n\tprivate readonly _editorObs: ObservableCodeEditor;\n\n\tprivate readonly _onDidClick = this._register(new Emitter<IMouseEvent>());\n\treadonly onDidClick = this._onDidClick.event;\n\n\tprivate readonly _state = derived(this, reader => {\n\t\tconst state = this._input.read(reader);\n\t\tif (!state) { return undefined; }\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tif (state.startColumn === 1 && state.lineNumber > 1 && textModel.getLineLength(state.lineNumber) !== 0 && state.text.endsWith(eol) && !state.text.startsWith(eol)) {\n\t\t\tconst endOfLineColumn = textModel.getLineLength(state.lineNumber - 1) + 1;\n\t\t\treturn { lineNumber: state.lineNumber - 1, column: endOfLineColumn, text: eol + state.text.slice(0, -eol.length) };\n\t\t}\n\n\t\treturn { lineNumber: state.lineNumber, column: state.startColumn, text: state.text };\n\t});\n\n\tprivate readonly _trimVertically = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tconst text = state?.text;\n\t\tif (!text || text.trim() === '') {\n\t\t\treturn { topOffset: 0, bottomOffset: 0, linesTop: 0, linesBottom: 0 };\n\t\t}\n\n\t\t// Adjust for leading/trailing newlines\n\t\tconst lineHeight = this._editor.getLineHeightForPosition(new Position(state.lineNumber, 1));\n\t\tconst eol = this._editor.getModel()!.getEOL();\n\t\tlet linesTop = 0;\n\t\tlet linesBottom = 0;\n\n\t\tlet i = 0;\n\t\tfor (; i < text.length && text.startsWith(eol, i); i += eol.length) {\n\t\t\tlinesTop += 1;\n\t\t}\n\n\t\tfor (let j = text.length; j > i && text.endsWith(eol, j); j -= eol.length) {\n\t\t\tlinesBottom += 1;\n\t\t}\n\n\t\treturn { topOffset: linesTop * lineHeight, bottomOffset: linesBottom * lineHeight, linesTop, linesBottom };\n\t});\n\n\tprivate readonly _maxPrefixTrim = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn { prefixLeftOffset: 0, prefixTrim: 0 };\n\t\t}\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tconst trimVertically = this._trimVertically.read(reader);\n\n\t\tconst lines = state.text.split(eol);\n\t\tconst modifiedLines = lines.slice(trimVertically.linesTop, lines.length - trimVertically.linesBottom);\n\t\tif (trimVertically.linesTop === 0) {\n\t\t\tmodifiedLines[0] = textModel.getLineContent(state.lineNumber) + modifiedLines[0];\n\t\t}\n\n\t\tconst originalRange = new LineRange(state.lineNumber, state.lineNumber + (trimVertically.linesTop > 0 ? 0 : 1));\n\n\t\treturn getPrefixTrim([], originalRange, modifiedLines, this._editor);\n\t});\n\n\tprivate readonly _ghostText = derived<GhostText | undefined>(reader => {\n\t\tconst state = this._state.read(reader);\n\t\tconst prefixTrim = this._maxPrefixTrim.read(reader);\n\t\tif (!state) { return undefined; }\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\t\tconst modifiedLines = state.text.split(eol);\n\n\t\tconst inlineDecorations = modifiedLines.map((line, i) => new InlineDecoration(\n\t\t\tnew Range(i + 1, i === 0 ? 1 : prefixTrim.prefixTrim + 1, i + 1, line.length + 1),\n\t\t\t'modified-background',\n\t\t\tInlineDecorationType.Regular\n\t\t));\n\n\t\treturn new GhostText(state.lineNumber, [new GhostTextPart(state.column, state.text, false, inlineDecorations)]);\n\t});\n\n\tprotected readonly _ghostTextView: GhostTextView;\n\treadonly isHovered: IObservable<boolean>;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _input: IObservable<{\n\t\t\tlineNumber: number;\n\t\t\tstartColumn: number;\n\t\t\ttext: string;\n\t\t\tinDiffEditor: boolean;\n\t\t} | undefined>,\n\t\tprivate readonly _tabAction: IObservable<InlineEditTabAction>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\n\t\tthis._ghostTextView = this._register(instantiationService.createInstance(GhostTextView,\n\t\t\tthis._editor,\n\t\t\t{\n\t\t\t\tghostText: this._ghostText,\n\t\t\t\tminReservedLineCount: constObservable(0),\n\t\t\t\ttargetTextModel: this._editorObs.model.map(model => model ?? undefined),\n\t\t\t\twarning: constObservable(undefined),\n\t\t\t\thandleInlineCompletionShown: constObservable(() => {\n\t\t\t\t\t// This is a no-op for the insertion view, as it is handled by the InlineEditsView.\n\t\t\t\t}),\n\t\t\t},\n\t\t\tobservableValue(this, { syntaxHighlightingEnabled: true, extraClasses: ['inline-edit'] }),\n\t\t\ttrue,\n\t\t\ttrue\n\t\t));\n\n\t\tthis.isHovered = this._ghostTextView.isHovered;\n\n\t\tthis._register(this._ghostTextView.onDidClick((e) => {\n\t\t\tthis._onDidClick.fire(e);\n\t\t}));\n\n\t\tthis._register(this._editorObs.createOverlayWidget({\n\t\t\tdomNode: this._view.element,\n\t\t\tposition: constObservable(null),\n\t\t\tallowEditorOverflow: false,\n\t\t\tminContentWidthInPx: derived(this, reader => {\n\t\t\t\tconst info = this._overlayLayout.read(reader);\n\t\t\t\tif (info === null) { return 0; }\n\t\t\t\treturn info.minContentWidthRequired;\n\t\t\t}),\n\t\t}));\n\t}\n\n\tprivate readonly _display = derived(this, reader => !!this._state.read(reader) ? 'block' : 'none');\n\n\tprivate readonly _editorMaxContentWidthInRange = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn 0;\n\t\t}\n\t\tthis._editorObs.versionId.read(reader);\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tconst textBeforeInsertion = state.text.startsWith(eol) ? '' : textModel.getValueInRange(new Range(state.lineNumber, 1, state.lineNumber, state.column));\n\t\tconst textAfterInsertion = textModel.getValueInRange(new Range(state.lineNumber, state.column, state.lineNumber, textModel.getLineLength(state.lineNumber) + 1));\n\t\tconst text = textBeforeInsertion + state.text + textAfterInsertion;\n\t\tconst lines = text.split(eol);\n\n\t\tconst renderOptions = RenderOptions.fromEditor(this._editor).withSetWidth(false).withScrollBeyondLastColumn(0);\n\t\tconst lineWidths = lines.map(line => {\n\t\t\tconst t = textModel.tokenization.tokenizeLinesAt(state.lineNumber, [line])?.[0];\n\t\t\tlet tokens: LineTokens;\n\t\t\tif (t) {\n\t\t\t\ttokens = TokenArray.fromLineTokens(t).toLineTokens(line, this._languageService.languageIdCodec);\n\t\t\t} else {\n\t\t\t\ttokens = LineTokens.createEmpty(line, this._languageService.languageIdCodec);\n\t\t\t}\n\n\t\t\treturn renderLines(new LineSource([tokens]), renderOptions, [], $('div'), true).minWidthInPx;\n\t\t});\n\n\t\t// Take the max value that we observed.\n\t\t// Reset when either the edit changes or the editor text version.\n\t\treturn Math.max(...lineWidths);\n\t});\n\n\tpublic readonly startLineOffset = this._trimVertically.map(v => v.topOffset);\n\tpublic readonly originalLines = this._state.map(s => s ?\n\t\tnew LineRange(\n\t\t\ts.lineNumber,\n\t\t\tMath.min(s.lineNumber + 2, this._editor.getModel()!.getLineCount() + 1)\n\t\t) : undefined\n\t);\n\n\tprivate readonly _overlayLayout = derived(this, (reader) => {\n\t\tthis._ghostText.read(reader);\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Update the overlay when the position changes\n\t\tthis._editorObs.observePosition(observableValue(this, new Position(state.lineNumber, state.column)), reader.store).read(reader);\n\n\t\tconst editorLayout = this._editorObs.layoutInfo.read(reader);\n\t\tconst horizontalScrollOffset = this._editorObs.scrollLeft.read(reader);\n\t\tconst verticalScrollbarWidth = this._editorObs.layoutInfoVerticalScrollbarWidth.read(reader);\n\n\t\tconst right = editorLayout.contentLeft + this._editorMaxContentWidthInRange.read(reader) - horizontalScrollOffset;\n\t\tconst prefixLeftOffset = this._maxPrefixTrim.read(reader).prefixLeftOffset ?? 0 /* fix due to observable bug? */;\n\t\tconst left = editorLayout.contentLeft + prefixLeftOffset - horizontalScrollOffset;\n\t\tif (right <= left) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst { topOffset: topTrim, bottomOffset: bottomTrim } = this._trimVertically.read(reader);\n\n\t\tconst scrollTop = this._editorObs.scrollTop.read(reader);\n\t\tconst height = this._ghostTextView.height.read(reader) - topTrim - bottomTrim;\n\t\tconst top = this._editor.getTopForLineNumber(state.lineNumber) - scrollTop + topTrim;\n\t\tconst bottom = top + height;\n\n\t\tconst overlay = new Rect(left, top, right, bottom);\n\n\t\treturn {\n\t\t\toverlay,\n\t\t\tstartsAtContentLeft: prefixLeftOffset === 0,\n\t\t\tcontentLeft: editorLayout.contentLeft,\n\t\t\tminContentWidthRequired: prefixLeftOffset + overlay.width + verticalScrollbarWidth,\n\t\t};\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprivate readonly _modifiedOverlay = n.div({\n\t\tstyle: { pointerEvents: 'none', }\n\t}, derived(this, reader => {\n\t\tconst overlayLayoutObs = mapOutFalsy(this._overlayLayout).read(reader);\n\t\tif (!overlayLayoutObs) { return undefined; }\n\n\t\t// Create an overlay which hides the left hand side of the original overlay when it overflows to the left\n\t\t// such that there is a smooth transition at the edge of content left\n\t\tconst overlayHider = overlayLayoutObs.map(layoutInfo => Rect.fromLeftTopRightBottom(\n\t\t\tlayoutInfo.contentLeft - BORDER_RADIUS - BORDER_WIDTH,\n\t\t\tlayoutInfo.overlay.top,\n\t\t\tlayoutInfo.contentLeft,\n\t\t\tlayoutInfo.overlay.bottom\n\t\t)).read(reader);\n\n\t\tconst separatorWidth = this._input.map(i => i?.inDiffEditor ? WIDGET_SEPARATOR_DIFF_EDITOR_WIDTH : WIDGET_SEPARATOR_WIDTH).read(reader);\n\t\tconst overlayRect = overlayLayoutObs.map(l => l.overlay.withMargin(0, BORDER_WIDTH, 0, l.startsAtContentLeft ? 0 : BORDER_WIDTH).intersectHorizontal(new OffsetRange(overlayHider.left, Number.MAX_SAFE_INTEGER)));\n\t\tconst underlayRect = overlayRect.map(rect => rect.withMargin(separatorWidth, separatorWidth));\n\n\t\treturn [\n\t\t\tn.div({\n\t\t\t\tclass: 'originalUnderlayInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...underlayRect.read(reader).toStyles(),\n\t\t\t\t\tborderRadius: BORDER_RADIUS,\n\t\t\t\t\tborder: `${BORDER_WIDTH + separatorWidth}px solid ${asCssVariable(editorBackground)}`,\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t}\n\t\t\t}),\n\t\t\tn.div({\n\t\t\t\tclass: 'originalOverlayInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...overlayRect.read(reader).toStyles(),\n\t\t\t\t\tborderRadius: BORDER_RADIUS,\n\t\t\t\t\tborder: getModifiedBorderColor(this._tabAction).map(bc => `${BORDER_WIDTH}px solid ${asCssVariable(bc)}`),\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\tbackgroundColor: asCssVariable(modifiedBackgroundColor),\n\t\t\t\t}\n\t\t\t}),\n\t\t\tn.div({\n\t\t\t\tclass: 'originalOverlayHiderInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...overlayHider.toStyles(),\n\t\t\t\t\tbackgroundColor: asCssVariable(editorBackground),\n\t\t\t\t}\n\t\t\t})\n\t\t];\n\t})).keepUpdated(this._store);\n\n\tprivate readonly _view = n.div({\n\t\tclass: 'inline-edits-view',\n\t\tstyle: {\n\t\t\tposition: 'absolute',\n\t\t\toverflow: 'visible',\n\t\t\ttop: '0px',\n\t\t\tleft: '0px',\n\t\t\tdisplay: this._display,\n\t\t},\n\t}, [\n\t\t[this._modifiedOverlay],\n\t]).keepUpdated(this._store);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, n } from '../../../../../../../base/browser/dom.js';\nimport { IMouseEvent } from '../../../../../../../base/browser/mouseEvent.js';\nimport { Emitter } from '../../../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../../../base/common/lifecycle.js';\nimport { constObservable, derived, IObservable, observableValue } from '../../../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../../../platform/instantiation/common/instantiation.js';\nimport { editorBackground } from '../../../../../../../platform/theme/common/colorRegistry.js';\nimport { asCssVariable } from '../../../../../../../platform/theme/common/colorUtils.js';\nimport { ICodeEditor } from '../../../../../../browser/editorBrowser.js';\nimport { ObservableCodeEditor, observableCodeEditor } from '../../../../../../browser/observableCodeEditor.js';\nimport { LineSource, renderLines, RenderOptions } from '../../../../../../browser/widget/diffEditor/components/diffEditorViewZones/renderLines.js';\nimport { Rect } from '../../../../../../common/core/2d/rect.js';\nimport { Position } from '../../../../../../common/core/position.js';\nimport { Range } from '../../../../../../common/core/range.js';\nimport { LineRange } from '../../../../../../common/core/ranges/lineRange.js';\nimport { OffsetRange } from '../../../../../../common/core/ranges/offsetRange.js';\nimport { ILanguageService } from '../../../../../../common/languages/language.js';\nimport { LineTokens, TokenArray } from '../../../../../../common/tokens/lineTokens.js';\nimport { InlineDecoration, InlineDecorationType } from '../../../../../../common/viewModel/inlineDecorations.js';\nimport { GhostText, GhostTextPart } from '../../../model/ghostText.js';\nimport { GhostTextView } from '../../ghostText/ghostTextView.js';\nimport { IInlineEditsView, InlineEditTabAction } from '../inlineEditsViewInterface.js';\nimport { getModifiedBorderColor, modifiedBackgroundColor } from '../theme.js';\nimport { getPrefixTrim, mapOutFalsy } from '../utils/utils.js';\n\nconst BORDER_WIDTH = 1;\nconst WIDGET_SEPARATOR_WIDTH = 1;\nconst WIDGET_SEPARATOR_DIFF_EDITOR_WIDTH = 3;\nconst BORDER_RADIUS = 4;\n\nexport class InlineEditsInsertionView extends Disposable implements IInlineEditsView {\n\tprivate readonly _editorObs: ObservableCodeEditor;\n\n\tprivate readonly _onDidClick = this._register(new Emitter<IMouseEvent>());\n\treadonly onDidClick = this._onDidClick.event;\n\n\tprivate readonly _state = derived(this, reader => {\n\t\tconst state = this._input.read(reader);\n\t\tif (!state) { return undefined; }\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tif (state.startColumn === 1 && state.lineNumber > 1 && textModel.getLineLength(state.lineNumber) !== 0 && state.text.endsWith(eol) && !state.text.startsWith(eol)) {\n\t\t\tconst endOfLineColumn = textModel.getLineLength(state.lineNumber - 1) + 1;\n\t\t\treturn { lineNumber: state.lineNumber - 1, column: endOfLineColumn, text: eol + state.text.slice(0, -eol.length) };\n\t\t}\n\n\t\treturn { lineNumber: state.lineNumber, column: state.startColumn, text: state.text };\n\t});\n\n\tprivate readonly _trimVertically = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tconst text = state?.text;\n\t\tif (!text || text.trim() === '') {\n\t\t\treturn { topOffset: 0, bottomOffset: 0, linesTop: 0, linesBottom: 0 };\n\t\t}\n\n\t\t// Adjust for leading/trailing newlines\n\t\tconst lineHeight = this._editor.getLineHeightForPosition(new Position(state.lineNumber, 1));\n\t\tconst eol = this._editor.getModel()!.getEOL();\n\t\tlet linesTop = 0;\n\t\tlet linesBottom = 0;\n\n\t\tlet i = 0;\n\t\tfor (; i < text.length && text.startsWith(eol, i); i += eol.length) {\n\t\t\tlinesTop += 1;\n\t\t}\n\n\t\tfor (let j = text.length; j > i && text.endsWith(eol, j); j -= eol.length) {\n\t\t\tlinesBottom += 1;\n\t\t}\n\n\t\treturn { topOffset: linesTop * lineHeight, bottomOffset: linesBottom * lineHeight, linesTop, linesBottom };\n\t});\n\n\tprivate readonly _maxPrefixTrim = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn { prefixLeftOffset: 0, prefixTrim: 0 };\n\t\t}\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tconst trimVertically = this._trimVertically.read(reader);\n\n\t\tconst lines = state.text.split(eol);\n\t\tconst modifiedLines = lines.slice(trimVertically.linesTop, lines.length - trimVertically.linesBottom);\n\t\tif (trimVertically.linesTop === 0) {\n\t\t\tmodifiedLines[0] = textModel.getLineContent(state.lineNumber) + modifiedLines[0];\n\t\t}\n\n\t\tconst originalRange = new LineRange(state.lineNumber, state.lineNumber + (trimVertically.linesTop > 0 ? 0 : 1));\n\n\t\treturn getPrefixTrim([], originalRange, modifiedLines, this._editor);\n\t});\n\n\tprivate readonly _ghostText = derived<GhostText | undefined>(reader => {\n\t\tconst state = this._state.read(reader);\n\t\tconst prefixTrim = this._maxPrefixTrim.read(reader);\n\t\tif (!state) { return undefined; }\n\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\t\tconst modifiedLines = state.text.split(eol);\n\n\t\tconst inlineDecorations = modifiedLines.map((line, i) => new InlineDecoration(\n\t\t\tnew Range(i + 1, i === 0 ? 1 : prefixTrim.prefixTrim + 1, i + 1, line.length + 1),\n\t\t\t'modified-background',\n\t\t\tInlineDecorationType.Regular\n\t\t));\n\n\t\treturn new GhostText(state.lineNumber, [new GhostTextPart(state.column, state.text, false, inlineDecorations)]);\n\t});\n\n\tprotected readonly _ghostTextView: GhostTextView;\n\treadonly isHovered: IObservable<boolean>;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _input: IObservable<{\n\t\t\tlineNumber: number;\n\t\t\tstartColumn: number;\n\t\t\ttext: string;\n\t\t\tinDiffEditor: boolean;\n\t\t} | undefined>,\n\t\tprivate readonly _tabAction: IObservable<InlineEditTabAction>,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\n\t\tthis._ghostTextView = this._register(instantiationService.createInstance(GhostTextView,\n\t\t\tthis._editor,\n\t\t\t{\n\t\t\t\tghostText: this._ghostText,\n\t\t\t\tminReservedLineCount: constObservable(0),\n\t\t\t\ttargetTextModel: this._editorObs.model.map(model => model ?? undefined),\n\t\t\t\twarning: constObservable(undefined),\n\t\t\t\thandleInlineCompletionShown: constObservable(() => {\n\t\t\t\t\t// This is a no-op for the insertion view, as it is handled by the InlineEditsView.\n\t\t\t\t}),\n\t\t\t},\n\t\t\tobservableValue(this, { syntaxHighlightingEnabled: true, extraClasses: ['inline-edit'] }),\n\t\t\ttrue,\n\t\t\ttrue\n\t\t));\n\n\t\tthis.isHovered = this._ghostTextView.isHovered;\n\n\t\tthis._register(this._ghostTextView.onDidClick((e) => {\n\t\t\tthis._onDidClick.fire(e);\n\t\t}));\n\n\t\tthis._register(this._editorObs.createOverlayWidget({\n\t\t\tdomNode: this._view.element,\n\t\t\tposition: constObservable(null),\n\t\t\tallowEditorOverflow: false,\n\t\t\tminContentWidthInPx: derived(this, reader => {\n\t\t\t\tconst info = this._overlayLayout.read(reader);\n\t\t\t\tif (info === null) { return 0; }\n\t\t\t\treturn info.minContentWidthRequired;\n\t\t\t}),\n\t\t}));\n\t}\n\n\tprivate readonly _display = derived(this, reader => !!this._state.read(reader) ? 'block' : 'none');\n\n\tprivate readonly _editorMaxContentWidthInRange = derived(this, reader => {\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn 0;\n\t\t}\n\t\tthis._editorObs.versionId.read(reader);\n\t\tconst textModel = this._editor.getModel()!;\n\t\tconst eol = textModel.getEOL();\n\n\t\tconst textBeforeInsertion = state.text.startsWith(eol) ? '' : textModel.getValueInRange(new Range(state.lineNumber, 1, state.lineNumber, state.column));\n\t\tconst textAfterInsertion = textModel.getValueInRange(new Range(state.lineNumber, state.column, state.lineNumber, textModel.getLineLength(state.lineNumber) + 1));\n\t\tconst text = textBeforeInsertion + state.text + textAfterInsertion;\n\t\tconst lines = text.split(eol);\n\n\t\tconst renderOptions = RenderOptions.fromEditor(this._editor).withSetWidth(false).withScrollBeyondLastColumn(0);\n\t\tconst lineWidths = lines.map(line => {\n\t\t\tconst t = textModel.tokenization.tokenizeLinesAt(state.lineNumber, [line])?.[0];\n\t\t\tlet tokens: LineTokens;\n\t\t\tif (t) {\n\t\t\t\ttokens = TokenArray.fromLineTokens(t).toLineTokens(line, this._languageService.languageIdCodec);\n\t\t\t} else {\n\t\t\t\ttokens = LineTokens.createEmpty(line, this._languageService.languageIdCodec);\n\t\t\t}\n\n\t\t\treturn renderLines(new LineSource([tokens]), renderOptions, [], $('div'), true).minWidthInPx;\n\t\t});\n\n\t\t// Take the max value that we observed.\n\t\t// Reset when either the edit changes or the editor text version.\n\t\treturn Math.max(...lineWidths);\n\t});\n\n\tpublic readonly startLineOffset = this._trimVertically.map(v => v.topOffset);\n\tpublic readonly originalLines = this._state.map(s => s ?\n\t\tnew LineRange(\n\t\t\ts.lineNumber,\n\t\t\tMath.min(s.lineNumber + 2, this._editor.getModel()!.getLineCount() + 1)\n\t\t) : undefined\n\t);\n\n\tprivate readonly _overlayLayout = derived(this, (reader) => {\n\t\tthis._ghostText.read(reader);\n\t\tconst state = this._state.read(reader);\n\t\tif (!state) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Update the overlay when the position changes\n\t\tthis._editorObs.observePosition(observableValue(this, new Position(state.lineNumber, state.column)), reader.store).read(reader);\n\n\t\tconst editorLayout = this._editorObs.layoutInfo.read(reader);\n\t\tconst horizontalScrollOffset = this._editorObs.scrollLeft.read(reader);\n\t\tconst verticalScrollbarWidth = this._editorObs.layoutInfoVerticalScrollbarWidth.read(reader);\n\n\t\tconst right = editorLayout.contentLeft + this._editorMaxContentWidthInRange.read(reader) - horizontalScrollOffset;\n\t\tconst prefixLeftOffset = this._maxPrefixTrim.read(reader).prefixLeftOffset ?? 0 /* fix due to observable bug? */;\n\t\tconst left = editorLayout.contentLeft + prefixLeftOffset - horizontalScrollOffset;\n\t\tif (right <= left) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst { topOffset: topTrim, bottomOffset: bottomTrim } = this._trimVertically.read(reader);\n\n\t\tconst scrollTop = this._editorObs.scrollTop.read(reader);\n\t\tconst height = this._ghostTextView.height.read(reader) - topTrim - bottomTrim;\n\t\tconst top = this._editor.getTopForLineNumber(state.lineNumber) - scrollTop + topTrim;\n\t\tconst bottom = top + height;\n\n\t\tconst overlay = new Rect(left, top, right, bottom);\n\n\t\treturn {\n\t\t\toverlay,\n\t\t\tstartsAtContentLeft: prefixLeftOffset === 0,\n\t\t\tcontentLeft: editorLayout.contentLeft,\n\t\t\tminContentWidthRequired: prefixLeftOffset + overlay.width + verticalScrollbarWidth,\n\t\t};\n\t}).recomputeInitiallyAndOnChange(this._store);\n\n\tprivate readonly _modifiedOverlay = n.div({\n\t\tstyle: { pointerEvents: 'none', }\n\t}, derived(this, reader => {\n\t\tconst overlayLayoutObs = mapOutFalsy(this._overlayLayout).read(reader);\n\t\tif (!overlayLayoutObs) { return undefined; }\n\n\t\t// Create an overlay which hides the left hand side of the original overlay when it overflows to the left\n\t\t// such that there is a smooth transition at the edge of content left\n\t\tconst overlayHider = overlayLayoutObs.map(layoutInfo => Rect.fromLeftTopRightBottom(\n\t\t\tlayoutInfo.contentLeft - BORDER_RADIUS - BORDER_WIDTH,\n\t\t\tlayoutInfo.overlay.top,\n\t\t\tlayoutInfo.contentLeft,\n\t\t\tlayoutInfo.overlay.bottom\n\t\t)).read(reader);\n\n\t\tconst separatorWidth = this._input.map(i => i?.inDiffEditor ? WIDGET_SEPARATOR_DIFF_EDITOR_WIDTH : WIDGET_SEPARATOR_WIDTH).read(reader);\n\t\tconst overlayRect = overlayLayoutObs.map(l => l.overlay.withMargin(0, BORDER_WIDTH, 0, l.startsAtContentLeft ? 0 : BORDER_WIDTH).intersectHorizontal(new OffsetRange(overlayHider.left, Number.MAX_SAFE_INTEGER)));\n\t\tconst underlayRect = overlayRect.map(rect => rect.withMargin(separatorWidth, separatorWidth));\n\n\t\treturn [\n\t\t\tn.div({\n\t\t\t\tclass: 'originalUnderlayInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...underlayRect.read(reader).toStyles(),\n\t\t\t\t\tborderRadius: BORDER_RADIUS,\n\t\t\t\t\tborder: `${BORDER_WIDTH + separatorWidth}px solid ${asCssVariable(editorBackground)}`,\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t}\n\t\t\t}),\n\t\t\tn.div({\n\t\t\t\tclass: 'originalOverlayInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...overlayRect.read(reader).toStyles(),\n\t\t\t\t\tborderRadius: BORDER_RADIUS,\n\t\t\t\t\tborder: getModifiedBorderColor(this._tabAction).map(bc => `${BORDER_WIDTH}px solid ${asCssVariable(bc)}`),\n\t\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\tbackgroundColor: asCssVariable(modifiedBackgroundColor),\n\t\t\t\t}\n\t\t\t}),\n\t\t\tn.div({\n\t\t\t\tclass: 'originalOverlayHiderInsertion',\n\t\t\t\tstyle: {\n\t\t\t\t\t...overlayHider.toStyles(),\n\t\t\t\t\tbackgroundColor: asCssVariable(editorBackground),\n\t\t\t\t}\n\t\t\t})\n\t\t];\n\t})).keepUpdated(this._store);\n\n\tprivate readonly _view = n.div({\n\t\tclass: 'inline-edits-view',\n\t\tstyle: {\n\t\t\tposition: 'absolute',\n\t\t\toverflow: 'visible',\n\t\t\ttop: '0px',\n\t\t\tleft: '0px',\n\t\t\tdisplay: this._display,\n\t\t},\n\t}, [\n\t\t[this._modifiedOverlay],\n\t]).keepUpdated(this._store);\n}\n"]}