{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/placeholderText/browser/placeholderTextContribution.ts","vs/editor/contrib/placeholderText/browser/placeholderTextContribution.ts"],"names":[],"mappings":"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","file":"placeholderTextContribution.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h } from '../../../../base/browser/dom.js';\nimport { structuralEquals } from '../../../../base/common/equals.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, DebugOwner, derivedObservableWithCache, derivedOpts, derived, IObservable, IReader } from '../../../../base/common/observable.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\n\n/**\n * Use the editor option to set the placeholder text.\n*/\nexport class PlaceholderTextContribution extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.placeholderText';\n\tprivate readonly _editorObs;\n\n\tprivate readonly _placeholderText;\n\n\tprivate readonly _state;\n\n\tprivate readonly _shouldViewBeAlive;\n\n\tprivate readonly _view;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t) {\n\t\tsuper();\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\t\tthis._placeholderText = this._editorObs.getOption(EditorOption.placeholder);\n\t\tthis._state = derivedOpts<{ placeholder: string } | undefined>({ owner: this, equalsFn: structuralEquals }, reader => {\n\t\t\tconst p = this._placeholderText.read(reader);\n\t\t\tif (!p) { return undefined; }\n\t\t\tif (!this._editorObs.valueIsEmpty.read(reader)) { return undefined; }\n\t\t\treturn { placeholder: p };\n\t\t});\n\t\tthis._shouldViewBeAlive = isOrWasTrue(this, reader => this._state.read(reader)?.placeholder !== undefined);\n\t\tthis._view = derived((reader) => {\n\t\t\tif (!this._shouldViewBeAlive.read(reader)) { return; }\n\n\t\t\tconst element = h('div.editorPlaceholder');\n\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\tconst data = this._state.read(reader);\n\t\t\t\tconst shouldBeVisibile = data?.placeholder !== undefined;\n\t\t\t\telement.root.style.display = shouldBeVisibile ? 'block' : 'none';\n\t\t\t\telement.root.innerText = data?.placeholder ?? '';\n\t\t\t}));\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\tconst info = this._editorObs.layoutInfo.read(reader);\n\t\t\t\telement.root.style.left = `${info.contentLeft}px`;\n\t\t\t\telement.root.style.width = (info.contentWidth - info.verticalScrollbarWidth) + 'px';\n\t\t\t\telement.root.style.top = `${this._editor.getTopForLineNumber(0)}px`;\n\t\t\t}));\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\telement.root.style.fontFamily = this._editorObs.getOption(EditorOption.fontFamily).read(reader);\n\t\t\t\telement.root.style.fontSize = this._editorObs.getOption(EditorOption.fontSize).read(reader) + 'px';\n\t\t\t\telement.root.style.lineHeight = this._editorObs.getOption(EditorOption.lineHeight).read(reader) + 'px';\n\t\t\t}));\n\t\t\treader.store.add(this._editorObs.createOverlayWidget({\n\t\t\t\tallowEditorOverflow: false,\n\t\t\t\tminContentWidthInPx: constObservable(0),\n\t\t\t\tposition: constObservable(null),\n\t\t\t\tdomNode: element.root,\n\t\t\t}));\n\t\t});\n\t\tthis._view.recomputeInitiallyAndOnChange(this._store);\n\t}\n}\n\nfunction isOrWasTrue(owner: DebugOwner, fn: (reader: IReader) => boolean): IObservable<boolean> {\n\treturn derivedObservableWithCache<boolean>(owner, (reader, lastValue) => {\n\t\tif (lastValue === true) { return true; }\n\t\treturn fn(reader);\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h } from '../../../../base/browser/dom.js';\nimport { structuralEquals } from '../../../../base/common/equals.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { autorun, constObservable, DebugOwner, derivedObservableWithCache, derivedOpts, derived, IObservable, IReader } from '../../../../base/common/observable.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\n\n/**\n * Use the editor option to set the placeholder text.\n*/\nexport class PlaceholderTextContribution extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.placeholderText';\n\tprivate readonly _editorObs;\n\n\tprivate readonly _placeholderText;\n\n\tprivate readonly _state;\n\n\tprivate readonly _shouldViewBeAlive;\n\n\tprivate readonly _view;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t) {\n\t\tsuper();\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\t\tthis._placeholderText = this._editorObs.getOption(EditorOption.placeholder);\n\t\tthis._state = derivedOpts<{ placeholder: string } | undefined>({ owner: this, equalsFn: structuralEquals }, reader => {\n\t\t\tconst p = this._placeholderText.read(reader);\n\t\t\tif (!p) { return undefined; }\n\t\t\tif (!this._editorObs.valueIsEmpty.read(reader)) { return undefined; }\n\t\t\treturn { placeholder: p };\n\t\t});\n\t\tthis._shouldViewBeAlive = isOrWasTrue(this, reader => this._state.read(reader)?.placeholder !== undefined);\n\t\tthis._view = derived((reader) => {\n\t\t\tif (!this._shouldViewBeAlive.read(reader)) { return; }\n\n\t\t\tconst element = h('div.editorPlaceholder');\n\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\tconst data = this._state.read(reader);\n\t\t\t\tconst shouldBeVisibile = data?.placeholder !== undefined;\n\t\t\t\telement.root.style.display = shouldBeVisibile ? 'block' : 'none';\n\t\t\t\telement.root.innerText = data?.placeholder ?? '';\n\t\t\t}));\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\tconst info = this._editorObs.layoutInfo.read(reader);\n\t\t\t\telement.root.style.left = `${info.contentLeft}px`;\n\t\t\t\telement.root.style.width = (info.contentWidth - info.verticalScrollbarWidth) + 'px';\n\t\t\t\telement.root.style.top = `${this._editor.getTopForLineNumber(0)}px`;\n\t\t\t}));\n\t\t\treader.store.add(autorun(reader => {\n\t\t\t\telement.root.style.fontFamily = this._editorObs.getOption(EditorOption.fontFamily).read(reader);\n\t\t\t\telement.root.style.fontSize = this._editorObs.getOption(EditorOption.fontSize).read(reader) + 'px';\n\t\t\t\telement.root.style.lineHeight = this._editorObs.getOption(EditorOption.lineHeight).read(reader) + 'px';\n\t\t\t}));\n\t\t\treader.store.add(this._editorObs.createOverlayWidget({\n\t\t\t\tallowEditorOverflow: false,\n\t\t\t\tminContentWidthInPx: constObservable(0),\n\t\t\t\tposition: constObservable(null),\n\t\t\t\tdomNode: element.root,\n\t\t\t}));\n\t\t});\n\t\tthis._view.recomputeInitiallyAndOnChange(this._store);\n\t}\n}\n\nfunction isOrWasTrue(owner: DebugOwner, fn: (reader: IReader) => boolean): IObservable<boolean> {\n\treturn derivedObservableWithCache<boolean>(owner, (reader, lastValue) => {\n\t\tif (lastValue === true) { return true; }\n\t\treturn fn(reader);\n\t});\n}\n"]}