{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/ui/hover/hover.ts","vs/base/browser/ui/hover/hover.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAoYhG,MAAM,UAAU,mCAAmC,CAAC,GAAY;IAC/D,MAAM,SAAS,GAAG,GAAyC,CAAC;IAC5D,OAAO,OAAO,SAAS,KAAK,QAAQ,IAAI,UAAU,IAAI,SAAS,IAAI,8BAA8B,IAAI,SAAS,CAAC;AAChH,CAAC;AA8BD,2BAA2B","file":"hover.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverDelegate } from './hoverDelegate.js';\nimport { HoverPosition } from './hoverWidget.js';\nimport { CancellationToken } from '../../../common/cancellation.js';\nimport { IMarkdownString } from '../../../common/htmlContent.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\n/**\n * Enables the convenient display of rich markdown-based hovers in the workbench.\n */\nexport interface IHoverDelegate2 {\n\t/**\n\t * Shows a hover after a delay, or immediately if the {@link groupId} matches the currently\n\t * shown hover.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Control showing the hover yourself.\n\t * - Show the hover after the standard delay.\n\t *\n\t * @param options The options of the hover.\n\t * @param groupId The group ID of the hover. If the group ID is the same as the currently shown\n\t * hover, the hover will be shown immediately, skipping the delay.\n\t */\n\tshowDelayedHover(\n\t\toptions: IHoverOptions,\n\t\tlifecycleOptions: Pick<IHoverLifecycleOptions, 'groupId'>,\n\t): IHoverWidget | undefined;\n\n\t/**\n\t * A simple wrapper around showDelayedHover that includes listening to events on the\n\t * {@link target} element that shows the hover.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Let the hover service handle showing the hover.\n\t * - Show the hover after the standard delay.\n\t * - Want the hover positioned beside the {@link target} element.\n\t *\n\t * @param target The target element to listener for mouseover events on.\n\t * @param hoverOptions The options of the hover.\n\t * @param lifecycleOptions The options of the hover's lifecycle.\n\t */\n\tsetupDelayedHover(\n\t\ttarget: HTMLElement,\n\t\thoverOptions: (() => IDelayedHoverOptions) | IDelayedHoverOptions,\n\t\tlifecycleOptions?: IHoverLifecycleOptions,\n\t): IDisposable;\n\n\t/**\n\t * A simple wrapper around showDelayedHover that includes listening to events on the\n\t * {@link target} element that shows the hover. This differs from {@link setupDelayedHover} in\n\t * that the hover will be shown at the mouse position instead of the\n\t * {@link target target} element's position, ignoring any\n\t * {@link IHoverOptions.position position options} that are passed in.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Let the hover service handle showing the hover.\n\t * - Show the hover after the standard delay.\n\t * - Want the hover positioned beside the mouse.\n\t *\n\t * @param target The target element to listener for mouseover events on.\n\t * @param hoverOptions The options of the hover.\n\t * @param lifecycleOptions The options of the hover's lifecycle.\n\t */\n\tsetupDelayedHoverAtMouse(\n\t\ttarget: HTMLElement,\n\t\thoverOptions: (() => IDelayedHoverAtMouseOptions) | IDelayedHoverAtMouseOptions,\n\t\tlifecycleOptions?: IHoverLifecycleOptions,\n\t): IDisposable;\n\n\t/**\n\t * Shows a hover immediately, provided a hover with the same {@link options} object is not\n\t * already visible.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Control showing the hover yourself.\n\t * - Show the hover immediately.\n\t *\n\t * @param options A set of options defining the characteristics of the hover.\n\t * @param focus Whether to focus the hover (useful for keyboard accessibility).\n\t *\n\t * @example A simple usage with a single element target.\n\t *\n\t * ```typescript\n\t * showInstantHover({\n\t *   text: new MarkdownString('Hello world'),\n\t *   target: someElement\n\t * });\n\t * ```\n\t */\n\tshowInstantHover(\n\t\toptions: IHoverOptions,\n\t\tfocus?: boolean\n\t): IHoverWidget | undefined;\n\n\t/**\n\t * Hides the hover if it was visible. This call will be ignored if the hover is currently\n\t * \"locked\" via the alt/option key unless `force` is set.\n\t */\n\thideHover(force?: boolean): void;\n\n\t/**\n\t * This should only be used until we have the ability to show multiple context views\n\t * simultaneously. #188822\n\t */\n\tshowAndFocusLastHover(): void;\n\n\t/**\n\t * Sets up a managed hover for the given element. A managed hover will set up listeners for\n\t * mouse events, show the hover after a delay and provide hooks to easily update the content.\n\t *\n\t * This should be used over {@link showInstantHover} when fine-grained control is not needed. The\n\t * managed hover also does not scale well, consider using {@link showInstantHover} when showing hovers\n\t * for many elements.\n\t *\n\t * @param hoverDelegate The hover delegate containing hooks and configuration for the hover.\n\t * @param targetElement The target element to show the hover for.\n\t * @param content The content of the hover or a factory that creates it at the time it's shown.\n\t * @param options Additional options for the managed hover.\n\t *\n\t * @deprecated Use {@link setupDelayedHover} or {@link setupDelayedHoverAtMouse} instead where\n\t * possible.\n\t */\n\tsetupManagedHover(hoverDelegate: IHoverDelegate, targetElement: HTMLElement, content: IManagedHoverContentOrFactory, options?: IManagedHoverOptions): IManagedHover;\n\n\t/**\n\t * Shows the hover for the given element if one has been setup.\n\t *\n\t * @param targetElement The target element of the hover, as set up in {@link setupManagedHover}.\n\t *\n\t * @deprecated Use {@link setupDelayedHover} or {@link setupDelayedHoverAtMouse} instead where\n\t * possible.\n\t */\n\tshowManagedHover(targetElement: HTMLElement): void;\n}\n\nexport interface IHoverWidget extends IDisposable {\n\t/**\n\t * Whether the hover widget has been disposed.\n\t */\n\treadonly isDisposed: boolean;\n}\n\nexport interface IHoverOptions {\n\t/**\n\t * The content to display in the primary section of the hover. The type of text determines the\n\t * default `hideOnHover` behavior.\n\t */\n\tcontent: IMarkdownString | string | HTMLElement;\n\n\t/**\n\t * The target for the hover. This determines the position of the hover and it will only be\n\t * hidden when the mouse leaves both the hover and the target. A HTMLElement can be used for\n\t * simple cases and a IHoverTarget for more complex cases where multiple elements and/or a\n\t * dispose method is required.\n\t */\n\ttarget: IHoverTarget | HTMLElement;\n\n\t/*\n\t * The container to pass to {@link IContextViewProvider.showContextView} which renders the hover\n\t * in. This is particularly useful for more natural tab focusing behavior, where the hover is\n\t * created as the next tab index after the element being hovered and/or to workaround the\n\t * element's container hiding on `focusout`.\n\t */\n\tcontainer?: HTMLElement;\n\n\t/**\n\t * An ID to associate with the hover to be used as an equality check. Normally when calling\n\t * {@link IHoverService.showHover} the options object itself is used to determine if the hover\n\t * is the same one that is already showing, when this is set, the ID will be used instead.\n\t *\n\t * When `undefined`, this will default to a serialized version of {@link content}. In this case\n\t * it will remain `undefined` if {@link content} is a `HTMLElement`.\n\t */\n\tid?: string;\n\n\t/**\n\t * A set of actions for the hover's \"status bar\".\n\t */\n\tactions?: IHoverAction[];\n\n\t/**\n\t * An optional array of classes to add to the hover element.\n\t */\n\tadditionalClasses?: string[];\n\n\t/**\n\t * An optional link handler for markdown links, if this is not provided the IOpenerService will\n\t * be used to open the links using its default options.\n\t */\n\tlinkHandler?(url: string): void;\n\n\t/**\n\t * Whether to trap focus in the following ways:\n\t * - When the hover closes, focus goes to the element that had focus before the hover opened\n\t * - If there are elements in the hover to focus, focus stays inside of the hover when tabbing\n\t * Note that this is overridden to true when in screen reader optimized mode.\n\t */\n\ttrapFocus?: boolean;\n\n\t/**\n\t * Options that defines where the hover is positioned.\n\t */\n\tposition?: IHoverPositionOptions;\n\n\t/**\n\t * Options that defines how long the hover is shown and when it hides.\n\t */\n\tpersistence?: IHoverPersistenceOptions;\n\n\t/**\n\t * Options that define how the hover looks.\n\t */\n\tappearance?: IHoverAppearanceOptions;\n}\n\n// `target` is ignored for delayed hover methods as it's included in the method and added\n// automatically when the hover options get resolved.\nexport type IDelayedHoverOptions = Omit<IHoverOptions, 'target'>;\n\n// `position` is ignored for delayed at mouse hover methods as it's overwritten by the mouse event.\n// `showPointer` is always false when using mouse positioning\nexport type IDelayedHoverAtMouseOptions = Omit<IDelayedHoverOptions, 'position' | 'appearance'> & { appearance?: Omit<IHoverAppearanceOptions, 'showPointer'> };\n\nexport interface IHoverLifecycleOptions {\n\t/**\n\t * The group ID of the hover. If the group ID is the same as the currently shown hover, the\n\t * hover will be shown immediately, skipping the delay.\n\t *\n\t * @example Use a UUID to set a unique `groupId` for related hovers\n\t *\n\t * ```typescript\n\t * const groupId = generateUuid();\n\t * showDelayedHover({ content: 'Button 1', target: someElement1 }, { groupId });\n\t * showDelayedHover({ content: 'Button 2', target: someElement2 }, { groupId });\n\t * ```\n\t *\n\t * @example Use a feature-specific string to set a unqiue `groupId` for related hovers\n\t *\n\t * ```typescript\n\t * showDelayedHover({ content: 'Button 1', target: someElement1 }, { groupId: 'my-feature-items' });\n\t * showDelayedHover({ content: 'Button 2', target: someElement2 }, { groupId: 'my-feature-items' });\n\t * ```\n\t */\n\tgroupId?: string;\n\n\t/**\n\t * Whether to set up space and enter keyboard events for the hover, when these are pressed when\n\t * the hover's target is focused it will show and focus the hover.\n\t *\n\t * Typically this should _not_ be used when the space or enter events are already handled by\n\t * something else.\n\t */\n\tsetupKeyboardEvents?: boolean;\n}\n\nexport interface IHoverPositionOptions {\n\t/**\n\t * Position of the hover. The default is to show above the target. This option will be ignored\n\t * if there is not enough room to layout the hover in the specified position, unless the\n\t * forcePosition option is set.\n\t */\n\thoverPosition?: HoverPosition | MouseEvent;\n\n\t/**\n\t * Force the hover position, reducing the size of the hover instead of adjusting the hover\n\t * position.\n\t */\n\tforcePosition?: boolean;\n}\n\nexport interface IHoverPersistenceOptions {\n\t/**\n\t * Whether to hide the hover when the mouse leaves the `target` and enters the actual hover.\n\t * This is false by default when text is an `IMarkdownString` and true when `text` is a\n\t * `string`. Note that this will be ignored if any `actions` are provided as hovering is\n\t * required to make them accessible.\n\t *\n\t * In general hiding on hover is desired for:\n\t * - Regular text where selection is not important\n\t * - Markdown that contains no links where selection is not important\n\t */\n\thideOnHover?: boolean;\n\n\t/**\n\t * Whether to hide the hover when a key is pressed.\n\t */\n\thideOnKeyDown?: boolean;\n\n\t/**\n\t * Whether to make the hover sticky, this means it will not be hidden when the mouse leaves the\n\t * hover.\n\t */\n\tsticky?: boolean;\n}\n\nexport interface IHoverAppearanceOptions {\n\t/**\n\t * Whether to show the hover pointer, a little arrow that connects the target and the hover.\n\t */\n\tshowPointer?: boolean;\n\n\t/**\n\t * Whether to show a compact hover, reducing the font size and padding of the hover.\n\t */\n\tcompact?: boolean;\n\n\t/**\n\t * When {@link hideOnHover} is explicitly true or undefined and its auto value is detected to\n\t * hide, show a hint at the bottom of the hover explaining how to mouse over the widget. This\n\t * should be used in the cases where despite the hover having no interactive content, it's\n\t * likely the user may want to interact with it somehow.\n\t */\n\tshowHoverHint?: boolean;\n\n\t/**\n\t * Whether to skip the fade in animation, this should be used when hovering from one hover to\n\t * another in the same group so it looks like the hover is moving from one element to the other.\n\t */\n\tskipFadeInAnimation?: boolean;\n\n\t/**\n\t * The max height of the hover relative to the window height.\n\t * Accepted values: (0,1]\n\t * Default: 0.5\n\t */\n\tmaxHeightRatio?: number;\n}\n\nexport interface IHoverAction {\n\t/**\n\t * The label to use in the hover's status bar.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The command ID of the action, this is used to resolve the keybinding to display after the\n\t * action label.\n\t */\n\tcommandId: string;\n\n\t/**\n\t * An optional class of an icon that will be displayed before the label.\n\t */\n\ticonClass?: string;\n\n\t/**\n\t * The callback to run the action.\n\t * @param target The action element that was activated.\n\t */\n\trun(target: HTMLElement): void;\n}\n\n/**\n * A target for a hover.\n */\nexport interface IHoverTarget extends Partial<IDisposable> {\n\t/**\n\t * A set of target elements used to position the hover. If multiple elements are used the hover\n\t * will try to not overlap any target element. An example use case for this is show a hover for\n\t * wrapped text.\n\t */\n\treadonly targetElements: readonly HTMLElement[];\n\n\t/**\n\t * An optional absolute x coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageX`.\n\t */\n\treadonly x?: number;\n\n\t/**\n\t * An optional absolute y coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageY`.\n\t */\n\treadonly y?: number;\n}\n\n// #region Managed hover\n\nexport interface IManagedHoverTooltipMarkdownString {\n\tmarkdown: IMarkdownString | string | undefined | ((token: CancellationToken) => Promise<IMarkdownString | string | undefined>);\n\tmarkdownNotSupportedFallback: string | undefined;\n}\n\nexport function isManagedHoverTooltipMarkdownString(obj: unknown): obj is IManagedHoverTooltipMarkdownString {\n\tconst candidate = obj as IManagedHoverTooltipMarkdownString;\n\treturn typeof candidate === 'object' && 'markdown' in candidate && 'markdownNotSupportedFallback' in candidate;\n}\n\nexport interface IManagedHoverTooltipHTMLElement {\n\telement: (token: CancellationToken) => HTMLElement | Promise<HTMLElement>;\n}\n\nexport type IManagedHoverContent = string | IManagedHoverTooltipMarkdownString | IManagedHoverTooltipHTMLElement | HTMLElement | undefined;\nexport type IManagedHoverContentOrFactory = IManagedHoverContent | (() => IManagedHoverContent);\n\nexport interface IManagedHoverOptions extends Pick<IHoverOptions, 'actions' | 'linkHandler' | 'trapFocus'> {\n\tappearance?: Pick<IHoverAppearanceOptions, 'showHoverHint'>;\n}\n\nexport interface IManagedHover extends IDisposable {\n\t/**\n\t * Allows to programmatically open the hover.\n\t */\n\tshow(focus?: boolean): void;\n\n\t/**\n\t * Allows to programmatically hide the hover.\n\t */\n\thide(): void;\n\n\t/**\n\t * Updates the contents of the hover.\n\t */\n\tupdate(tooltip: IManagedHoverContent, options?: IManagedHoverOptions): void;\n}\n\n// #endregion Managed hover\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverDelegate } from './hoverDelegate.js';\nimport { HoverPosition } from './hoverWidget.js';\nimport { CancellationToken } from '../../../common/cancellation.js';\nimport { IMarkdownString } from '../../../common/htmlContent.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\n/**\n * Enables the convenient display of rich markdown-based hovers in the workbench.\n */\nexport interface IHoverDelegate2 {\n\t/**\n\t * Shows a hover after a delay, or immediately if the {@link groupId} matches the currently\n\t * shown hover.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Control showing the hover yourself.\n\t * - Show the hover after the standard delay.\n\t *\n\t * @param options The options of the hover.\n\t * @param groupId The group ID of the hover. If the group ID is the same as the currently shown\n\t * hover, the hover will be shown immediately, skipping the delay.\n\t */\n\tshowDelayedHover(\n\t\toptions: IHoverOptions,\n\t\tlifecycleOptions: Pick<IHoverLifecycleOptions, 'groupId'>,\n\t): IHoverWidget | undefined;\n\n\t/**\n\t * A simple wrapper around showDelayedHover that includes listening to events on the\n\t * {@link target} element that shows the hover.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Let the hover service handle showing the hover.\n\t * - Show the hover after the standard delay.\n\t * - Want the hover positioned beside the {@link target} element.\n\t *\n\t * @param target The target element to listener for mouseover events on.\n\t * @param hoverOptions The options of the hover.\n\t * @param lifecycleOptions The options of the hover's lifecycle.\n\t */\n\tsetupDelayedHover(\n\t\ttarget: HTMLElement,\n\t\thoverOptions: (() => IDelayedHoverOptions) | IDelayedHoverOptions,\n\t\tlifecycleOptions?: IHoverLifecycleOptions,\n\t): IDisposable;\n\n\t/**\n\t * A simple wrapper around showDelayedHover that includes listening to events on the\n\t * {@link target} element that shows the hover. This differs from {@link setupDelayedHover} in\n\t * that the hover will be shown at the mouse position instead of the\n\t * {@link target target} element's position, ignoring any\n\t * {@link IHoverOptions.position position options} that are passed in.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Let the hover service handle showing the hover.\n\t * - Show the hover after the standard delay.\n\t * - Want the hover positioned beside the mouse.\n\t *\n\t * @param target The target element to listener for mouseover events on.\n\t * @param hoverOptions The options of the hover.\n\t * @param lifecycleOptions The options of the hover's lifecycle.\n\t */\n\tsetupDelayedHoverAtMouse(\n\t\ttarget: HTMLElement,\n\t\thoverOptions: (() => IDelayedHoverAtMouseOptions) | IDelayedHoverAtMouseOptions,\n\t\tlifecycleOptions?: IHoverLifecycleOptions,\n\t): IDisposable;\n\n\t/**\n\t * Shows a hover immediately, provided a hover with the same {@link options} object is not\n\t * already visible.\n\t *\n\t * Use this method when you want to:\n\t *\n\t * - Control showing the hover yourself.\n\t * - Show the hover immediately.\n\t *\n\t * @param options A set of options defining the characteristics of the hover.\n\t * @param focus Whether to focus the hover (useful for keyboard accessibility).\n\t *\n\t * @example A simple usage with a single element target.\n\t *\n\t * ```typescript\n\t * showInstantHover({\n\t *   text: new MarkdownString('Hello world'),\n\t *   target: someElement\n\t * });\n\t * ```\n\t */\n\tshowInstantHover(\n\t\toptions: IHoverOptions,\n\t\tfocus?: boolean\n\t): IHoverWidget | undefined;\n\n\t/**\n\t * Hides the hover if it was visible. This call will be ignored if the hover is currently\n\t * \"locked\" via the alt/option key unless `force` is set.\n\t */\n\thideHover(force?: boolean): void;\n\n\t/**\n\t * This should only be used until we have the ability to show multiple context views\n\t * simultaneously. #188822\n\t */\n\tshowAndFocusLastHover(): void;\n\n\t/**\n\t * Sets up a managed hover for the given element. A managed hover will set up listeners for\n\t * mouse events, show the hover after a delay and provide hooks to easily update the content.\n\t *\n\t * This should be used over {@link showInstantHover} when fine-grained control is not needed. The\n\t * managed hover also does not scale well, consider using {@link showInstantHover} when showing hovers\n\t * for many elements.\n\t *\n\t * @param hoverDelegate The hover delegate containing hooks and configuration for the hover.\n\t * @param targetElement The target element to show the hover for.\n\t * @param content The content of the hover or a factory that creates it at the time it's shown.\n\t * @param options Additional options for the managed hover.\n\t *\n\t * @deprecated Use {@link setupDelayedHover} or {@link setupDelayedHoverAtMouse} instead where\n\t * possible.\n\t */\n\tsetupManagedHover(hoverDelegate: IHoverDelegate, targetElement: HTMLElement, content: IManagedHoverContentOrFactory, options?: IManagedHoverOptions): IManagedHover;\n\n\t/**\n\t * Shows the hover for the given element if one has been setup.\n\t *\n\t * @param targetElement The target element of the hover, as set up in {@link setupManagedHover}.\n\t *\n\t * @deprecated Use {@link setupDelayedHover} or {@link setupDelayedHoverAtMouse} instead where\n\t * possible.\n\t */\n\tshowManagedHover(targetElement: HTMLElement): void;\n}\n\nexport interface IHoverWidget extends IDisposable {\n\t/**\n\t * Whether the hover widget has been disposed.\n\t */\n\treadonly isDisposed: boolean;\n}\n\nexport interface IHoverOptions {\n\t/**\n\t * The content to display in the primary section of the hover. The type of text determines the\n\t * default `hideOnHover` behavior.\n\t */\n\tcontent: IMarkdownString | string | HTMLElement;\n\n\t/**\n\t * The target for the hover. This determines the position of the hover and it will only be\n\t * hidden when the mouse leaves both the hover and the target. A HTMLElement can be used for\n\t * simple cases and a IHoverTarget for more complex cases where multiple elements and/or a\n\t * dispose method is required.\n\t */\n\ttarget: IHoverTarget | HTMLElement;\n\n\t/*\n\t * The container to pass to {@link IContextViewProvider.showContextView} which renders the hover\n\t * in. This is particularly useful for more natural tab focusing behavior, where the hover is\n\t * created as the next tab index after the element being hovered and/or to workaround the\n\t * element's container hiding on `focusout`.\n\t */\n\tcontainer?: HTMLElement;\n\n\t/**\n\t * An ID to associate with the hover to be used as an equality check. Normally when calling\n\t * {@link IHoverService.showHover} the options object itself is used to determine if the hover\n\t * is the same one that is already showing, when this is set, the ID will be used instead.\n\t *\n\t * When `undefined`, this will default to a serialized version of {@link content}. In this case\n\t * it will remain `undefined` if {@link content} is a `HTMLElement`.\n\t */\n\tid?: string;\n\n\t/**\n\t * A set of actions for the hover's \"status bar\".\n\t */\n\tactions?: IHoverAction[];\n\n\t/**\n\t * An optional array of classes to add to the hover element.\n\t */\n\tadditionalClasses?: string[];\n\n\t/**\n\t * An optional link handler for markdown links, if this is not provided the IOpenerService will\n\t * be used to open the links using its default options.\n\t */\n\tlinkHandler?(url: string): void;\n\n\t/**\n\t * Whether to trap focus in the following ways:\n\t * - When the hover closes, focus goes to the element that had focus before the hover opened\n\t * - If there are elements in the hover to focus, focus stays inside of the hover when tabbing\n\t * Note that this is overridden to true when in screen reader optimized mode.\n\t */\n\ttrapFocus?: boolean;\n\n\t/**\n\t * Options that defines where the hover is positioned.\n\t */\n\tposition?: IHoverPositionOptions;\n\n\t/**\n\t * Options that defines how long the hover is shown and when it hides.\n\t */\n\tpersistence?: IHoverPersistenceOptions;\n\n\t/**\n\t * Options that define how the hover looks.\n\t */\n\tappearance?: IHoverAppearanceOptions;\n}\n\n// `target` is ignored for delayed hover methods as it's included in the method and added\n// automatically when the hover options get resolved.\nexport type IDelayedHoverOptions = Omit<IHoverOptions, 'target'>;\n\n// `position` is ignored for delayed at mouse hover methods as it's overwritten by the mouse event.\n// `showPointer` is always false when using mouse positioning\nexport type IDelayedHoverAtMouseOptions = Omit<IDelayedHoverOptions, 'position' | 'appearance'> & { appearance?: Omit<IHoverAppearanceOptions, 'showPointer'> };\n\nexport interface IHoverLifecycleOptions {\n\t/**\n\t * The group ID of the hover. If the group ID is the same as the currently shown hover, the\n\t * hover will be shown immediately, skipping the delay.\n\t *\n\t * @example Use a UUID to set a unique `groupId` for related hovers\n\t *\n\t * ```typescript\n\t * const groupId = generateUuid();\n\t * showDelayedHover({ content: 'Button 1', target: someElement1 }, { groupId });\n\t * showDelayedHover({ content: 'Button 2', target: someElement2 }, { groupId });\n\t * ```\n\t *\n\t * @example Use a feature-specific string to set a unqiue `groupId` for related hovers\n\t *\n\t * ```typescript\n\t * showDelayedHover({ content: 'Button 1', target: someElement1 }, { groupId: 'my-feature-items' });\n\t * showDelayedHover({ content: 'Button 2', target: someElement2 }, { groupId: 'my-feature-items' });\n\t * ```\n\t */\n\tgroupId?: string;\n\n\t/**\n\t * Whether to set up space and enter keyboard events for the hover, when these are pressed when\n\t * the hover's target is focused it will show and focus the hover.\n\t *\n\t * Typically this should _not_ be used when the space or enter events are already handled by\n\t * something else.\n\t */\n\tsetupKeyboardEvents?: boolean;\n}\n\nexport interface IHoverPositionOptions {\n\t/**\n\t * Position of the hover. The default is to show above the target. This option will be ignored\n\t * if there is not enough room to layout the hover in the specified position, unless the\n\t * forcePosition option is set.\n\t */\n\thoverPosition?: HoverPosition | MouseEvent;\n\n\t/**\n\t * Force the hover position, reducing the size of the hover instead of adjusting the hover\n\t * position.\n\t */\n\tforcePosition?: boolean;\n}\n\nexport interface IHoverPersistenceOptions {\n\t/**\n\t * Whether to hide the hover when the mouse leaves the `target` and enters the actual hover.\n\t * This is false by default when text is an `IMarkdownString` and true when `text` is a\n\t * `string`. Note that this will be ignored if any `actions` are provided as hovering is\n\t * required to make them accessible.\n\t *\n\t * In general hiding on hover is desired for:\n\t * - Regular text where selection is not important\n\t * - Markdown that contains no links where selection is not important\n\t */\n\thideOnHover?: boolean;\n\n\t/**\n\t * Whether to hide the hover when a key is pressed.\n\t */\n\thideOnKeyDown?: boolean;\n\n\t/**\n\t * Whether to make the hover sticky, this means it will not be hidden when the mouse leaves the\n\t * hover.\n\t */\n\tsticky?: boolean;\n}\n\nexport interface IHoverAppearanceOptions {\n\t/**\n\t * Whether to show the hover pointer, a little arrow that connects the target and the hover.\n\t */\n\tshowPointer?: boolean;\n\n\t/**\n\t * Whether to show a compact hover, reducing the font size and padding of the hover.\n\t */\n\tcompact?: boolean;\n\n\t/**\n\t * When {@link hideOnHover} is explicitly true or undefined and its auto value is detected to\n\t * hide, show a hint at the bottom of the hover explaining how to mouse over the widget. This\n\t * should be used in the cases where despite the hover having no interactive content, it's\n\t * likely the user may want to interact with it somehow.\n\t */\n\tshowHoverHint?: boolean;\n\n\t/**\n\t * Whether to skip the fade in animation, this should be used when hovering from one hover to\n\t * another in the same group so it looks like the hover is moving from one element to the other.\n\t */\n\tskipFadeInAnimation?: boolean;\n\n\t/**\n\t * The max height of the hover relative to the window height.\n\t * Accepted values: (0,1]\n\t * Default: 0.5\n\t */\n\tmaxHeightRatio?: number;\n}\n\nexport interface IHoverAction {\n\t/**\n\t * The label to use in the hover's status bar.\n\t */\n\tlabel: string;\n\n\t/**\n\t * The command ID of the action, this is used to resolve the keybinding to display after the\n\t * action label.\n\t */\n\tcommandId: string;\n\n\t/**\n\t * An optional class of an icon that will be displayed before the label.\n\t */\n\ticonClass?: string;\n\n\t/**\n\t * The callback to run the action.\n\t * @param target The action element that was activated.\n\t */\n\trun(target: HTMLElement): void;\n}\n\n/**\n * A target for a hover.\n */\nexport interface IHoverTarget extends Partial<IDisposable> {\n\t/**\n\t * A set of target elements used to position the hover. If multiple elements are used the hover\n\t * will try to not overlap any target element. An example use case for this is show a hover for\n\t * wrapped text.\n\t */\n\treadonly targetElements: readonly HTMLElement[];\n\n\t/**\n\t * An optional absolute x coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageX`.\n\t */\n\treadonly x?: number;\n\n\t/**\n\t * An optional absolute y coordinate to position the hover with, for example to position the\n\t * hover using `MouseEvent.pageY`.\n\t */\n\treadonly y?: number;\n}\n\n// #region Managed hover\n\nexport interface IManagedHoverTooltipMarkdownString {\n\tmarkdown: IMarkdownString | string | undefined | ((token: CancellationToken) => Promise<IMarkdownString | string | undefined>);\n\tmarkdownNotSupportedFallback: string | undefined;\n}\n\nexport function isManagedHoverTooltipMarkdownString(obj: unknown): obj is IManagedHoverTooltipMarkdownString {\n\tconst candidate = obj as IManagedHoverTooltipMarkdownString;\n\treturn typeof candidate === 'object' && 'markdown' in candidate && 'markdownNotSupportedFallback' in candidate;\n}\n\nexport interface IManagedHoverTooltipHTMLElement {\n\telement: (token: CancellationToken) => HTMLElement | Promise<HTMLElement>;\n}\n\nexport type IManagedHoverContent = string | IManagedHoverTooltipMarkdownString | IManagedHoverTooltipHTMLElement | HTMLElement | undefined;\nexport type IManagedHoverContentOrFactory = IManagedHoverContent | (() => IManagedHoverContent);\n\nexport interface IManagedHoverOptions extends Pick<IHoverOptions, 'actions' | 'linkHandler' | 'trapFocus'> {\n\tappearance?: Pick<IHoverAppearanceOptions, 'showHoverHint'>;\n}\n\nexport interface IManagedHover extends IDisposable {\n\t/**\n\t * Allows to programmatically open the hover.\n\t */\n\tshow(focus?: boolean): void;\n\n\t/**\n\t * Allows to programmatically hide the hover.\n\t */\n\thide(): void;\n\n\t/**\n\t * Updates the contents of the hover.\n\t */\n\tupdate(tooltip: IManagedHoverContent, options?: IManagedHoverOptions): void;\n}\n\n// #endregion Managed hover\n"]}