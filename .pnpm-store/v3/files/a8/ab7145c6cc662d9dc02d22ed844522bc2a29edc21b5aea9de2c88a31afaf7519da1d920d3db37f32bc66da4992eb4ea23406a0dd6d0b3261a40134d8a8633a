{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/ui/hover/hoverDelegateFactory.ts","vs/base/browser/ui/hover/hoverDelegateFactory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,IAAI,EAAE,MAAM,yBAAyB,CAAC;AAE/C,MAAM,wBAAwB,GAAG,GAAG,EAAE,CAAC,CAAC;IACvC,IAAI,KAAK,KAAa,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;IAClB,SAAS,EAAE,GAAG,EAAE,GAAG,OAAO,SAAS,CAAC,CAAC,CAAC;CACtC,CAAC,CAAC;AAEH,IAAI,oBAAoB,GAA0F,wBAAwB,CAAC;AAC3I,MAAM,yBAAyB,GAAG,IAAI,IAAI,CAAiB,GAAG,EAAE,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;AACvG,MAAM,2BAA2B,GAAG,IAAI,IAAI,CAAiB,GAAG,EAAE,CAAC,oBAAoB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;AAE3G,8DAA8D;AAC9D,MAAM,UAAU,uBAAuB,CAAC,qBAA8G;IACrJ,oBAAoB,GAAG,qBAAqB,CAAC;AAC9C,CAAC;AAED,2DAA2D;AAC3D,MAAM,UAAU,uBAAuB,CAAC,SAA8B;IACrE,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;QAC7B,OAAO,2BAA2B,CAAC,KAAK,CAAC;IAC1C,CAAC;IACD,OAAO,yBAAyB,CAAC,KAAK,CAAC;AACxC,CAAC;AAED,2CAA2C;AAC3C,MAAM,UAAU,0BAA0B;IACzC,uDAAuD;IACvD,0EAA0E;IAC1E,0DAA0D;IAC1D,OAAO,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC","file":"hoverDelegateFactory.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverDelegate, IScopedHoverDelegate } from './hoverDelegate.js';\nimport { Lazy } from '../../../common/lazy.js';\n\nconst nullHoverDelegateFactory = () => ({\n\tget delay(): number { return -1; },\n\tdispose: () => { },\n\tshowHover: () => { return undefined; },\n});\n\nlet hoverDelegateFactory: (placement: 'mouse' | 'element', enableInstantHover: boolean) => IScopedHoverDelegate = nullHoverDelegateFactory;\nconst defaultHoverDelegateMouse = new Lazy<IHoverDelegate>(() => hoverDelegateFactory('mouse', false));\nconst defaultHoverDelegateElement = new Lazy<IHoverDelegate>(() => hoverDelegateFactory('element', false));\n\n// TODO: Remove when getDefaultHoverDelegate is no longer used\nexport function setHoverDelegateFactory(hoverDelegateProvider: ((placement: 'mouse' | 'element', enableInstantHover: boolean) => IScopedHoverDelegate)): void {\n\thoverDelegateFactory = hoverDelegateProvider;\n}\n\n// TODO: Refine type for use in new IHoverService interface\nexport function getDefaultHoverDelegate(placement: 'mouse' | 'element'): IHoverDelegate {\n\tif (placement === 'element') {\n\t\treturn defaultHoverDelegateElement.value;\n\t}\n\treturn defaultHoverDelegateMouse.value;\n}\n\n// TODO: Create equivalent in IHoverService\nexport function createInstantHoverDelegate(): IScopedHoverDelegate {\n\t// Creates a hover delegate with instant hover enabled.\n\t// This hover belongs to the consumer and requires the them to dispose it.\n\t// Instant hover only makes sense for 'element' placement.\n\treturn hoverDelegateFactory('element', true);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverDelegate, IScopedHoverDelegate } from './hoverDelegate.js';\nimport { Lazy } from '../../../common/lazy.js';\n\nconst nullHoverDelegateFactory = () => ({\n\tget delay(): number { return -1; },\n\tdispose: () => { },\n\tshowHover: () => { return undefined; },\n});\n\nlet hoverDelegateFactory: (placement: 'mouse' | 'element', enableInstantHover: boolean) => IScopedHoverDelegate = nullHoverDelegateFactory;\nconst defaultHoverDelegateMouse = new Lazy<IHoverDelegate>(() => hoverDelegateFactory('mouse', false));\nconst defaultHoverDelegateElement = new Lazy<IHoverDelegate>(() => hoverDelegateFactory('element', false));\n\n// TODO: Remove when getDefaultHoverDelegate is no longer used\nexport function setHoverDelegateFactory(hoverDelegateProvider: ((placement: 'mouse' | 'element', enableInstantHover: boolean) => IScopedHoverDelegate)): void {\n\thoverDelegateFactory = hoverDelegateProvider;\n}\n\n// TODO: Refine type for use in new IHoverService interface\nexport function getDefaultHoverDelegate(placement: 'mouse' | 'element'): IHoverDelegate {\n\tif (placement === 'element') {\n\t\treturn defaultHoverDelegateElement.value;\n\t}\n\treturn defaultHoverDelegateMouse.value;\n}\n\n// TODO: Create equivalent in IHoverService\nexport function createInstantHoverDelegate(): IScopedHoverDelegate {\n\t// Creates a hover delegate with instant hover enabled.\n\t// This hover belongs to the consumer and requires the them to dispose it.\n\t// Instant hover only makes sense for 'element' placement.\n\treturn hoverDelegateFactory('element', true);\n}\n"]}