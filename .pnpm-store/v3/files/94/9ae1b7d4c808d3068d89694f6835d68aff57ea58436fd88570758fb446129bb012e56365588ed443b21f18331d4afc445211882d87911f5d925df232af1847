{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/progress/common/progress.ts","vs/platform/progress/common/progress.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAE9E,MAAM,CAAC,MAAM,gBAAgB,GAAG,eAAe,CAAmB,iBAAiB,CAAC,CAAC;AAkErF,MAAM,CAAC,MAAM,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAkB;IACjE,KAAK,KAAK,CAAC;IACX,MAAM,KAAK,CAAC;IACZ,IAAI,KAAK,CAAC;CACV,CAAC,CAAC;AAMH,MAAM,OAAO,QAAQ;aAEJ,SAAI,GAAG,MAAM,CAAC,MAAM,CAAqB,EAAE,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC;IAI3E,YAAoB,QAA8B;QAA9B,aAAQ,GAAR,QAAQ,CAAsB;IAClD,CAAC;IAED,MAAM,CAAC,IAAO;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;;AAGF,MAAM,CAAC,MAAM,sBAAsB,GAAG,eAAe,CAAyB,uBAAuB,CAAC,CAAC","file":"progress.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n}\n\nexport interface IProgressStep {\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() { } });\n\n\tprivate _value?: T;\n\n\tconstructor(private callback: (data: T) => unknown) {\n\t}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n","\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const IProgressService = createDecorator<IProgressService>('progressService');\n\n/**\n * A progress service that can be used to report progress to various locations of the UI.\n */\nexport interface IProgressService {\n\n\treadonly _serviceBrand: undefined;\n\n\twithProgress<R>(\n\t\toptions: IProgressOptions | IProgressDialogOptions | IProgressNotificationOptions | IProgressWindowOptions | IProgressCompositeOptions,\n\t\ttask: (progress: IProgress<IProgressStep>) => Promise<R>,\n\t\tonDidCancel?: (choice?: number) => void\n\t): Promise<R>;\n}\n\nexport interface IProgressIndicator {\n\n\t/**\n\t * Show progress customized with the provided flags.\n\t */\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\n\t/**\n\t * Indicate progress for the duration of the provided promise. Progress will stop in\n\t * any case of promise completion, error or cancellation.\n\t */\n\tshowWhile(promise: Promise<unknown>, delay?: number): Promise<void>;\n}\n\nexport const enum ProgressLocation {\n\tExplorer = 1,\n\tScm = 3,\n\tExtensions = 5,\n\tWindow = 10,\n\tNotification = 15,\n\tDialog = 20\n}\n\nexport interface IProgressOptions {\n\treadonly location: ProgressLocation | string;\n\treadonly title?: string;\n}\n\nexport interface IProgressNotificationOptions extends IProgressOptions {\n}\n\nexport interface IProgressDialogOptions extends IProgressOptions {\n}\n\nexport interface IProgressWindowOptions extends IProgressOptions {\n}\n\nexport interface IProgressCompositeOptions extends IProgressOptions {\n}\n\nexport interface IProgressStep {\n}\n\nexport interface IProgressRunner {\n\ttotal(value: number): void;\n\tworked(value: number): void;\n\tdone(): void;\n}\n\nexport const emptyProgressRunner = Object.freeze<IProgressRunner>({\n\ttotal() { },\n\tworked() { },\n\tdone() { }\n});\n\nexport interface IProgress<T> {\n\treport(item: T): void;\n}\n\nexport class Progress<T> implements IProgress<T> {\n\n\tstatic readonly None = Object.freeze<IProgress<unknown>>({ report() { } });\n\n\tprivate _value?: T;\n\n\tconstructor(private callback: (data: T) => unknown) {\n\t}\n\n\treport(item: T) {\n\t\tthis._value = item;\n\t\tthis.callback(this._value);\n\t}\n}\n\nexport const IEditorProgressService = createDecorator<IEditorProgressService>('editorProgressService');\n\n/**\n * A progress service that will report progress local to the editor triggered from.\n */\nexport interface IEditorProgressService extends IProgressIndicator {\n\n\treadonly _serviceBrand: undefined;\n}\n"]}