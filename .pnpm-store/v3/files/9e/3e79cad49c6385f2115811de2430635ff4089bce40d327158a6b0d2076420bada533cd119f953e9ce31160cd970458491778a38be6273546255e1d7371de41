{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewModel/glyphLanesModel.ts","vs/editor/common/viewModel/glyphLanesModel.ts"],"names":[],"mappings":"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","file":"glyphLanesModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { GlyphMarginLane, IGlyphMarginLanesModel } from '../model.js';\n\n\nconst MAX_LANE = GlyphMarginLane.Right;\n\nexport class GlyphMarginLanesModel implements IGlyphMarginLanesModel {\n\tprivate lanes: Uint8Array;\n\tprivate persist = 0;\n\tprivate _requiredLanes = 1; // always render at least one lane\n\n\tconstructor(maxLine: number) {\n\t\tthis.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n\t}\n\n\tpublic reset(maxLine: number) {\n\t\tconst bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n\t\tif (this.lanes.length < bytes) {\n\t\t\tthis.lanes = new Uint8Array(bytes);\n\t\t} else {\n\t\t\tthis.lanes.fill(0);\n\t\t}\n\t\tthis._requiredLanes = 1;\n\t}\n\n\tpublic get requiredLanes() {\n\t\treturn this._requiredLanes;\n\t}\n\n\tpublic push(lane: GlyphMarginLane, range: Range, persist?: boolean): void {\n\t\tif (persist) {\n\t\t\tthis.persist |= (1 << (lane - 1));\n\t\t}\n\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\tconst bit = (MAX_LANE * i) + (lane - 1);\n\t\t\tthis.lanes[bit >>> 3] |= (1 << (bit % 8));\n\t\t\tthis._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n\t\t}\n\t}\n\n\tpublic getLanesAtLine(lineNumber: number): GlyphMarginLane[] {\n\t\tconst lanes: GlyphMarginLane[] = [];\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tlanes.push(i + 1);\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\n\t\treturn lanes.length ? lanes : [GlyphMarginLane.Center];\n\t}\n\n\tprivate countAtLine(lineNumber: number): number {\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\t\treturn count;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { GlyphMarginLane, IGlyphMarginLanesModel } from '../model.js';\n\n\nconst MAX_LANE = GlyphMarginLane.Right;\n\nexport class GlyphMarginLanesModel implements IGlyphMarginLanesModel {\n\tprivate lanes: Uint8Array;\n\tprivate persist = 0;\n\tprivate _requiredLanes = 1; // always render at least one lane\n\n\tconstructor(maxLine: number) {\n\t\tthis.lanes = new Uint8Array(Math.ceil(((maxLine + 1) * MAX_LANE) / 8));\n\t}\n\n\tpublic reset(maxLine: number) {\n\t\tconst bytes = Math.ceil(((maxLine + 1) * MAX_LANE) / 8);\n\t\tif (this.lanes.length < bytes) {\n\t\t\tthis.lanes = new Uint8Array(bytes);\n\t\t} else {\n\t\t\tthis.lanes.fill(0);\n\t\t}\n\t\tthis._requiredLanes = 1;\n\t}\n\n\tpublic get requiredLanes() {\n\t\treturn this._requiredLanes;\n\t}\n\n\tpublic push(lane: GlyphMarginLane, range: Range, persist?: boolean): void {\n\t\tif (persist) {\n\t\t\tthis.persist |= (1 << (lane - 1));\n\t\t}\n\t\tfor (let i = range.startLineNumber; i <= range.endLineNumber; i++) {\n\t\t\tconst bit = (MAX_LANE * i) + (lane - 1);\n\t\t\tthis.lanes[bit >>> 3] |= (1 << (bit % 8));\n\t\t\tthis._requiredLanes = Math.max(this._requiredLanes, this.countAtLine(i));\n\t\t}\n\t}\n\n\tpublic getLanesAtLine(lineNumber: number): GlyphMarginLane[] {\n\t\tconst lanes: GlyphMarginLane[] = [];\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tlanes.push(i + 1);\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\n\t\treturn lanes.length ? lanes : [GlyphMarginLane.Center];\n\t}\n\n\tprivate countAtLine(lineNumber: number): number {\n\t\tlet bit = MAX_LANE * lineNumber;\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < MAX_LANE; i++) {\n\t\t\tif (this.persist & (1 << i) || this.lanes[bit >>> 3] & (1 << (bit % 8))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tbit++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"]}