{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/services/treeSitter/treeSitterLibraryService.ts","vs/editor/common/services/treeSitter/treeSitterLibraryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,eAAe,EAAE,MAAM,4DAA4D,CAAC;AAG7F,MAAM,CAAC,MAAM,yBAAyB,GAAG,eAAe,CAA4B,0BAA0B,CAAC,CAAC","file":"treeSitterLibraryService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Language, Parser, Query } from '@vscode/tree-sitter-wasm';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IReader } from '../../../../base/common/observable.js';\n\nexport const ITreeSitterLibraryService = createDecorator<ITreeSitterLibraryService>('treeSitterLibraryService');\n\nexport interface ITreeSitterLibraryService {\n\treadonly _serviceBrand: undefined;\n\n\tgetParserClass(): Promise<typeof Parser>;\n\n\tsupportsLanguage(languageId: string, reader: IReader | undefined): boolean;\n\tgetLanguage(languageId: string, reader: IReader | undefined): Language | undefined;\n\t/**\n\t * Return value of null indicates that there are no injection queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetInjectionQueries(languageId: string, reader: IReader | undefined): Query | null | undefined;\n\t/**\n\t * Return value of null indicates that there are no highlights queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetHighlightingQueries(languageId: string, reader: IReader | undefined): Query | null | undefined;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Language, Parser, Query } from '@vscode/tree-sitter-wasm';\nimport { createDecorator } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IReader } from '../../../../base/common/observable.js';\n\nexport const ITreeSitterLibraryService = createDecorator<ITreeSitterLibraryService>('treeSitterLibraryService');\n\nexport interface ITreeSitterLibraryService {\n\treadonly _serviceBrand: undefined;\n\n\tgetParserClass(): Promise<typeof Parser>;\n\n\tsupportsLanguage(languageId: string, reader: IReader | undefined): boolean;\n\tgetLanguage(languageId: string, reader: IReader | undefined): Language | undefined;\n\t/**\n\t * Return value of null indicates that there are no injection queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetInjectionQueries(languageId: string, reader: IReader | undefined): Query | null | undefined;\n\t/**\n\t * Return value of null indicates that there are no highlights queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetHighlightingQueries(languageId: string, reader: IReader | undefined): Query | null | undefined;\n}\n"]}