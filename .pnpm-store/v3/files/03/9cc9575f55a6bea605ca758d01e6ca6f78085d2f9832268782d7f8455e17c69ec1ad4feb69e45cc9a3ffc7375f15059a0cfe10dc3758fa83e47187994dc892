{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/hover/browser/glyphHoverComputer.ts","vs/editor/contrib/hover/browser/glyphHoverComputer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAC5D,OAAO,EAAmB,qBAAqB,EAAE,MAAM,wCAAwC,CAAC;AAGhG,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAa3D,MAAM,OAAO,kBAAkB;IAE9B,YACkB,OAAoB;QAApB,YAAO,GAAP,OAAO,CAAa;IAEtC,CAAC;IAEM,WAAW,CAAC,IAA+B;QAEjD,MAAM,cAAc,GAAG,CAAC,QAAyB,EAAiB,EAAE;YACnE,OAAO;gBACN,KAAK,EAAE,QAAQ;aACf,CAAC;QACH,CAAC,CAAC;QAEF,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEzE,MAAM,MAAM,GAAoB,EAAE,CAAC;QACnC,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,KAAK,QAAQ,CAAC;QACjD,IAAI,CAAC,eAAe,EAAE,CAAC;YACtB,OAAO,MAAM,CAAC;QACf,CAAC;QAED,KAAK,MAAM,CAAC,IAAI,eAAe,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,IAAI,eAAe,CAAC,MAAM,CAAC;YACvE,IAAI,CAAC,WAAW,IAAI,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC;gBAC9C,SAAS;YACV,CAAC;YAED,MAAM,YAAY,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC;YACxG,IAAI,CAAC,YAAY,IAAI,qBAAqB,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC1D,SAAS;YACV,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC;QAC3D,CAAC;QAED,OAAO,MAAM,CAAC;IACf,CAAC;CACD","file":"glyphHoverComputer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { IMarkdownString, isEmptyMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { IHoverComputer } from './hoverOperation.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n\nexport type LaneOrLineNumber = GlyphMarginLane | 'lineNo';\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nexport interface GlyphHoverComputerOptions {\n\tlineNumber: number;\n\tlaneOrLine: LaneOrLineNumber;\n}\n\nexport class GlyphHoverComputer implements IHoverComputer<GlyphHoverComputerOptions, IHoverMessage> {\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor\n\t) {\n\t}\n\n\tpublic computeSync(opts: GlyphHoverComputerOptions): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(opts.lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tconst isLineHover = opts.laneOrLine === 'lineNo';\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tconst lane = d.options.glyphMargin?.position ?? GlyphMarginLane.Center;\n\t\t\tif (!isLineHover && lane !== opts.laneOrLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = isLineHover ? d.options.lineNumberHoverMessage : d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from '../../../../base/common/arrays.js';\nimport { IMarkdownString, isEmptyMarkdownString } from '../../../../base/common/htmlContent.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { IHoverComputer } from './hoverOperation.js';\nimport { GlyphMarginLane } from '../../../common/model.js';\n\nexport type LaneOrLineNumber = GlyphMarginLane | 'lineNo';\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nexport interface GlyphHoverComputerOptions {\n\tlineNumber: number;\n\tlaneOrLine: LaneOrLineNumber;\n}\n\nexport class GlyphHoverComputer implements IHoverComputer<GlyphHoverComputerOptions, IHoverMessage> {\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor\n\t) {\n\t}\n\n\tpublic computeSync(opts: GlyphHoverComputerOptions): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(opts.lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tconst isLineHover = opts.laneOrLine === 'lineNo';\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tconst lane = d.options.glyphMargin?.position ?? GlyphMarginLane.Center;\n\t\t\tif (!isLineHover && lane !== opts.laneOrLine) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = isLineHover ? d.options.lineNumberHoverMessage : d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}