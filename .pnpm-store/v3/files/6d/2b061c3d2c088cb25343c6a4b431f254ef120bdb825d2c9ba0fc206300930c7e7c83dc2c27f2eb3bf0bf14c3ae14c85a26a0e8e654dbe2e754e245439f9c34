{"version":3,"sources":["vs/editor/browser/controller/editContext/screenReaderUtils.ts"],"names":[],"mappings":"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","file":"screenReaderUtils.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EndOfLinePreference } from '../../../common/model.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection, SelectionDirection } from '../../../common/core/selection.js';\nimport { EditorOption, IComputedEditorOptions } from '../../../common/config/editorOptions.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AccessibilitySupport } from '../../../../platform/accessibility/common/accessibility.js';\nimport * as nls from '../../../../nls.js';\nimport { ISimpleModel } from '../../../common/viewModel/screenReaderSimpleModel.js';\n\nexport interface IPagedScreenReaderStrategy<T> {\n}\n\nexport interface ISimpleScreenReaderContentState {\n\tvalue: string;\n\n\t/** the offset where selection starts inside `value` */\n\tselectionStart: number;\n\n\t/** the offset where selection ends inside `value` */\n\tselectionEnd: number;\n\n\t/** the editor range in the view coordinate system that matches the selection inside `value` */\n\tselection: Range;\n\n\t/** the position of the start of the `value` in the editor */\n\tstartPositionWithinEditor: Position;\n\n\t/** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n\tnewlineCountBeforeSelection: number;\n}\n\nexport class SimplePagedScreenReaderStrategy implements IPagedScreenReaderStrategy<ISimpleScreenReaderContentState> {\n\tprivate _getPageOfLine(lineNumber: number, linesPerPage: number): number {\n\t\treturn Math.floor((lineNumber - 1) / linesPerPage);\n\t}\n\n\tprivate _getRangeForPage(page: number, linesPerPage: number): Range {\n\t\tconst offset = page * linesPerPage;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = offset + linesPerPage;\n\t\treturn new Range(startLineNumber, 1, endLineNumber + 1, 1);\n\t}\n\n\tpublic fromEditorSelection(model: ISimpleModel, selection: Selection, linesPerPage: number, trimLongText: boolean): ISimpleScreenReaderContentState {\n\t\t// Chromium handles very poorly text even of a few thousand chars\n\t\t// Cut text to avoid stalling the entire UI\n\t\tconst LIMIT_CHARS = 500;\n\n\t\tconst selectionStartPage = this._getPageOfLine(selection.startLineNumber, linesPerPage);\n\t\tconst selectionStartPageRange = this._getRangeForPage(selectionStartPage, linesPerPage);\n\n\t\tconst selectionEndPage = this._getPageOfLine(selection.endLineNumber, linesPerPage);\n\t\tconst selectionEndPageRange = this._getRangeForPage(selectionEndPage, linesPerPage);\n\n\t\tlet pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn))!;\n\t\tif (trimLongText && model.getValueLengthInRange(pretextRange, EndOfLinePreference.LF) > LIMIT_CHARS) {\n\t\t\tconst pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n\t\t\tpretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n\t\t}\n\t\tconst pretext = model.getValueInRange(pretextRange, EndOfLinePreference.LF);\n\n\t\tconst lastLine = model.getLineCount();\n\t\tconst lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n\t\tlet posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn))!;\n\t\tif (trimLongText && model.getValueLengthInRange(posttextRange, EndOfLinePreference.LF) > LIMIT_CHARS) {\n\t\t\tconst posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n\t\t\tposttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n\t\t}\n\t\tconst posttext = model.getValueInRange(posttextRange, EndOfLinePreference.LF);\n\n\n\t\tlet text: string;\n\t\tif (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n\t\t\t// take full selection\n\t\t\ttext = model.getValueInRange(selection, EndOfLinePreference.LF);\n\t\t} else {\n\t\t\tconst selectionRange1 = selectionStartPageRange.intersectRanges(selection)!;\n\t\t\tconst selectionRange2 = selectionEndPageRange.intersectRanges(selection)!;\n\t\t\ttext = (\n\t\t\t\tmodel.getValueInRange(selectionRange1, EndOfLinePreference.LF)\n\t\t\t\t+ String.fromCharCode(8230)\n\t\t\t\t+ model.getValueInRange(selectionRange2, EndOfLinePreference.LF)\n\t\t\t);\n\t\t}\n\t\tif (trimLongText && text.length > 2 * LIMIT_CHARS) {\n\t\t\ttext = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n\t\t}\n\n\t\tlet selectionStart: number;\n\t\tlet selectionEnd: number;\n\t\tif (selection.getDirection() === SelectionDirection.LTR) {\n\t\t\tselectionStart = pretext.length;\n\t\t\tselectionEnd = pretext.length + text.length;\n\t\t} else {\n\t\t\tselectionEnd = pretext.length;\n\t\t\tselectionStart = pretext.length + text.length;\n\t\t}\n\t\treturn {\n\t\t\tvalue: pretext + text + posttext,\n\t\t\tselection: selection,\n\t\t\tselectionStart,\n\t\t\tselectionEnd,\n\t\t\tstartPositionWithinEditor: pretextRange.getStartPosition(),\n\t\t\tnewlineCountBeforeSelection: pretextRange.endLineNumber - pretextRange.startLineNumber,\n\t\t};\n\t}\n}\n\nexport function ariaLabelForScreenReaderContent(options: IComputedEditorOptions, keybindingService: IKeybindingService) {\n\tconst accessibilitySupport = options.get(EditorOption.accessibilitySupport);\n\tif (accessibilitySupport === AccessibilitySupport.Disabled) {\n\n\t\tconst toggleKeybindingLabel = keybindingService.lookupKeybinding('editor.action.toggleScreenReaderAccessibilityMode')?.getAriaLabel();\n\t\tconst runCommandKeybindingLabel = keybindingService.lookupKeybinding('workbench.action.showCommands')?.getAriaLabel();\n\t\tconst keybindingEditorKeybindingLabel = keybindingService.lookupKeybinding('workbench.action.openGlobalKeybindings')?.getAriaLabel();\n\t\tconst editorNotAccessibleMessage = nls.localize('accessibilityModeOff', \"The editor is not accessible at this time.\");\n\t\tif (toggleKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabel', \"{0} To enable screen reader optimized mode, use {1}\", editorNotAccessibleMessage, toggleKeybindingLabel);\n\t\t} else if (runCommandKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabelNoKb', \"{0} To enable screen reader optimized mode, open the quick pick with {1} and run the command Toggle Screen Reader Accessibility Mode, which is currently not triggerable via keyboard.\", editorNotAccessibleMessage, runCommandKeybindingLabel);\n\t\t} else if (keybindingEditorKeybindingLabel) {\n\t\t\treturn nls.localize('accessibilityOffAriaLabelNoKbs', \"{0} Please assign a keybinding for the command Toggle Screen Reader Accessibility Mode by accessing the keybindings editor with {1} and run it.\", editorNotAccessibleMessage, keybindingEditorKeybindingLabel);\n\t\t} else {\n\t\t\t// SOS\n\t\t\treturn editorNotAccessibleMessage;\n\t\t}\n\t}\n\treturn options.get(EditorOption.ariaLabel);\n}\n\nexport function newlinecount(text: string): number {\n\tlet result = 0;\n\tlet startIndex = -1;\n\tdo {\n\t\tstartIndex = text.indexOf('\\n', startIndex + 1);\n\t\tif (startIndex === -1) {\n\t\t\tbreak;\n\t\t}\n\t\tresult++;\n\t} while (true);\n\treturn result;\n}\n"]}