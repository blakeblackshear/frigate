{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/gpu.ts","vs/editor/browser/gpu/gpu.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"gpu.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewLineOptions } from '../viewParts/viewLines/viewLineOptions.js';\nimport { IGlyphRasterizer } from './raster/raster.js';\n\nexport const enum BindingId {\n\tGlyphInfo,\n\tCells,\n\tTextureSampler,\n\tTexture,\n\tLayoutInfoUniform,\n\tAtlasDimensionsUniform,\n\tScrollOffset,\n}\n\nexport interface IGpuRenderStrategy extends IDisposable {\n\treadonly type: string;\n\treadonly wgsl: string;\n\treadonly bindGroupEntries: GPUBindGroupEntry[];\n\treadonly glyphRasterizer: IGlyphRasterizer;\n\n\t/**\n\t * Resets the render strategy, clearing all data and setting up for a new frame.\n\t */\n\treset(): void;\n\tupdate(viewportData: ViewportData, viewLineOptions: ViewLineOptions): number;\n\tdraw(pass: GPURenderPassEncoder, viewportData: ViewportData): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewLineOptions } from '../viewParts/viewLines/viewLineOptions.js';\nimport { IGlyphRasterizer } from './raster/raster.js';\n\nexport const enum BindingId {\n\tGlyphInfo,\n\tCells,\n\tTextureSampler,\n\tTexture,\n\tLayoutInfoUniform,\n\tAtlasDimensionsUniform,\n\tScrollOffset,\n}\n\nexport interface IGpuRenderStrategy extends IDisposable {\n\treadonly type: string;\n\treadonly wgsl: string;\n\treadonly bindGroupEntries: GPUBindGroupEntry[];\n\treadonly glyphRasterizer: IGlyphRasterizer;\n\n\t/**\n\t * Resets the render strategy, clearing all data and setting up for a new frame.\n\t */\n\treset(): void;\n\tupdate(viewportData: ViewportData, viewLineOptions: ViewLineOptions): number;\n\tdraw(pass: GPURenderPassEncoder, viewportData: ViewportData): void;\n}\n"]}