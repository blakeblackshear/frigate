{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/cssValue.ts","vs/base/browser/cssValue.ts"],"names":[],"mappings":"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","file":"cssValue.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../common/color.js';\nimport { FileAccess } from '../common/network.js';\nimport { URI } from '../common/uri.js';\n\nexport type CssFragment = string & { readonly __cssFragment: unique symbol };\n\nfunction asFragment(raw: string): CssFragment {\n\treturn raw as CssFragment;\n}\n\nexport function asCssValueWithDefault(cssPropertyValue: string | undefined, dflt: string): string {\n\tif (cssPropertyValue !== undefined) {\n\t\tconst variableMatch = cssPropertyValue.match(/^\\s*var\\((.+)\\)$/);\n\t\tif (variableMatch) {\n\t\t\tconst varArguments = variableMatch[1].split(',', 2);\n\t\t\tif (varArguments.length === 2) {\n\t\t\t\tdflt = asCssValueWithDefault(varArguments[1].trim(), dflt);\n\t\t\t}\n\t\t\treturn `var(${varArguments[0]}, ${dflt})`;\n\t\t}\n\t\treturn cssPropertyValue;\n\t}\n\treturn dflt;\n}\n\nexport function identValue(value: string): CssFragment {\n\tconst out = value.replaceAll(/[^_\\-a-z0-9]/gi, '');\n\tif (out !== value) {\n\t\tconsole.warn(`CSS ident value ${value} modified to ${out} to be safe for CSS`);\n\t}\n\treturn asFragment(out);\n}\n\nexport function stringValue(value: string): CssFragment {\n\treturn asFragment(`'${value.replaceAll(/'/g, '\\\\000027')}'`);\n}\n\n/**\n * returns url('...')\n */\nexport function asCSSUrl(uri: URI | null | undefined): CssFragment {\n\tif (!uri) {\n\t\treturn asFragment(`url('')`);\n\t}\n\treturn inline`url('${asFragment(CSS.escape(FileAccess.uriToBrowserUri(uri).toString(true)))}')`;\n}\n\nexport function className(value: string, escapingExpected = false): CssFragment {\n\tconst out = CSS.escape(value);\n\tif (!escapingExpected && out !== value) {\n\t\tconsole.warn(`CSS class name ${value} modified to ${out} to be safe for CSS`);\n\t}\n\treturn asFragment(out);\n}\n\ntype InlineCssTemplateValue = CssFragment | Color;\n\n/**\n * Template string tag that that constructs a CSS fragment.\n *\n * All expressions in the template must be css safe values.\n */\nexport function inline(strings: TemplateStringsArray, ...values: InlineCssTemplateValue[]): CssFragment {\n\treturn asFragment(strings.reduce((result, str, i) => {\n\t\tconst value = values[i] || '';\n\t\treturn result + str + value;\n\t}, ''));\n}\n\n\nexport class Builder {\n\tprivate readonly _parts: CssFragment[] = [];\n\n\tpush(...parts: CssFragment[]): void {\n\t\tthis._parts.push(...parts);\n\t}\n\n\tjoin(joiner = '\\n'): CssFragment {\n\t\treturn asFragment(this._parts.join(joiner));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../common/color.js';\nimport { FileAccess } from '../common/network.js';\nimport { URI } from '../common/uri.js';\n\nexport type CssFragment = string & { readonly __cssFragment: unique symbol };\n\nfunction asFragment(raw: string): CssFragment {\n\treturn raw as CssFragment;\n}\n\nexport function asCssValueWithDefault(cssPropertyValue: string | undefined, dflt: string): string {\n\tif (cssPropertyValue !== undefined) {\n\t\tconst variableMatch = cssPropertyValue.match(/^\\s*var\\((.+)\\)$/);\n\t\tif (variableMatch) {\n\t\t\tconst varArguments = variableMatch[1].split(',', 2);\n\t\t\tif (varArguments.length === 2) {\n\t\t\t\tdflt = asCssValueWithDefault(varArguments[1].trim(), dflt);\n\t\t\t}\n\t\t\treturn `var(${varArguments[0]}, ${dflt})`;\n\t\t}\n\t\treturn cssPropertyValue;\n\t}\n\treturn dflt;\n}\n\nexport function identValue(value: string): CssFragment {\n\tconst out = value.replaceAll(/[^_\\-a-z0-9]/gi, '');\n\tif (out !== value) {\n\t\tconsole.warn(`CSS ident value ${value} modified to ${out} to be safe for CSS`);\n\t}\n\treturn asFragment(out);\n}\n\nexport function stringValue(value: string): CssFragment {\n\treturn asFragment(`'${value.replaceAll(/'/g, '\\\\000027')}'`);\n}\n\n/**\n * returns url('...')\n */\nexport function asCSSUrl(uri: URI | null | undefined): CssFragment {\n\tif (!uri) {\n\t\treturn asFragment(`url('')`);\n\t}\n\treturn inline`url('${asFragment(CSS.escape(FileAccess.uriToBrowserUri(uri).toString(true)))}')`;\n}\n\nexport function className(value: string, escapingExpected = false): CssFragment {\n\tconst out = CSS.escape(value);\n\tif (!escapingExpected && out !== value) {\n\t\tconsole.warn(`CSS class name ${value} modified to ${out} to be safe for CSS`);\n\t}\n\treturn asFragment(out);\n}\n\ntype InlineCssTemplateValue = CssFragment | Color;\n\n/**\n * Template string tag that that constructs a CSS fragment.\n *\n * All expressions in the template must be css safe values.\n */\nexport function inline(strings: TemplateStringsArray, ...values: InlineCssTemplateValue[]): CssFragment {\n\treturn asFragment(strings.reduce((result, str, i) => {\n\t\tconst value = values[i] || '';\n\t\treturn result + str + value;\n\t}, ''));\n}\n\n\nexport class Builder {\n\tprivate readonly _parts: CssFragment[] = [];\n\n\tpush(...parts: CssFragment[]): void {\n\t\tthis._parts.push(...parts);\n\t}\n\n\tjoin(joiner = '\\n'): CssFragment {\n\t\treturn asFragment(this._parts.join(joiner));\n\t}\n}\n"]}