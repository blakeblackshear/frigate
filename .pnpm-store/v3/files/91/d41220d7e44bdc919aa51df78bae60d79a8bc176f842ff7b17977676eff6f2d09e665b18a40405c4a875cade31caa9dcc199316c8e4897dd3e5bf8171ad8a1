{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.ts","vs/editor/browser/viewParts/currentLineHighlight/currentLineHighlight.ts"],"names":[],"mappings":"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","file":"currentLineHighlight.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport { RenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\n\nexport abstract class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n\tprivate readonly _context: ViewContext;\n\tprotected _renderLineHighlight: 'none' | 'gutter' | 'line' | 'all';\n\tprotected _wordWrap: boolean;\n\tprotected _contentLeft: number;\n\tprotected _contentWidth: number;\n\tprotected _selectionIsEmpty: boolean;\n\tprotected _renderLineHighlightOnlyWhenFocus: boolean;\n\tprotected _focused: boolean;\n\t/**\n\t * Unique sorted list of view line numbers which have cursors sitting on them.\n\t */\n\tprivate _cursorLineNumbers: number[];\n\tprivate _selections: Selection[];\n\tprivate _renderData: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\tthis._selectionIsEmpty = true;\n\t\tthis._focused = false;\n\t\tthis._cursorLineNumbers = [1];\n\t\tthis._selections = [new Selection(1, 1, 1, 1)];\n\t\tthis._renderData = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tsuper.dispose();\n\t}\n\n\tprivate _readFromSelections(): boolean {\n\t\tlet hasChanged = false;\n\n\t\tconst lineNumbers = new Set<number>();\n\t\tfor (const selection of this._selections) {\n\t\t\tlineNumbers.add(selection.positionLineNumber);\n\t\t}\n\t\tconst cursorsLineNumbers = Array.from(lineNumbers);\n\t\tcursorsLineNumbers.sort((a, b) => a - b);\n\t\tif (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n\t\t\tthis._cursorLineNumbers = cursorsLineNumbers;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst selectionIsEmpty = this._selections.every(s => s.isEmpty());\n\t\tif (this._selectionIsEmpty !== selectionIsEmpty) {\n\t\t\tthis._selectionIsEmpty = selectionIsEmpty;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\treturn hasChanged;\n\t}\n\n\t// --- begin event handlers\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections;\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollWidthChanged || e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\tif (!this._renderLineHighlightOnlyWhenFocus) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._focused = e.isFocused;\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._shouldRenderThis()) {\n\t\t\tthis._renderData = null;\n\t\t\treturn;\n\t\t}\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\t// initialize renderData\n\t\tconst renderData: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = '';\n\t\t}\n\n\t\tif (this._wordWrap) {\n\t\t\t// do a first pass to render wrapped lines\n\t\t\tconst renderedLineWrapped = this._renderOne(ctx, false);\n\t\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\n\t\t\t\tconst coordinatesConverter = this._context.viewModel.coordinatesConverter;\n\t\t\t\tconst modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n\t\t\t\tconst firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n\t\t\t\tconst lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n\n\t\t\t\tconst firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n\t\t\t\tconst lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n\t\t\t\tfor (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n\t\t\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\t\t\trenderData[lineIndex] = renderedLineWrapped;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// do a second pass to render exact lines\n\t\tconst renderedLineExact = this._renderOne(ctx, true);\n\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\t\t\tif (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineIndex = cursorLineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = renderedLineExact;\n\t\t}\n\n\t\tthis._renderData = renderData;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderData) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex >= this._renderData.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderData[lineIndex];\n\t}\n\n\tprotected _shouldRenderInMargin(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected _shouldRenderInContent(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n\t\t\t&& this._selectionIsEmpty\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected abstract _shouldRenderThis(): boolean;\n\tprotected abstract _shouldRenderOther(): boolean;\n\tprotected abstract _renderOne(ctx: RenderingContext, exact: boolean): string;\n}\n\n/**\n * Emphasizes the current line by drawing a border around it.\n */\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px;\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInMargin();\n\t}\n}\n\n/**\n * Emphasizes the current line margin/gutter by drawing a border around it.\n */\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${this._contentLeft}px\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn true;\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst lineHighlight = theme.getColor(editorLineHighlight);\n\tif (lineHighlight) {\n\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n\t}\n\tif (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n\t\tconst lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\t\tif (lineHighlightBorder) {\n\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tif (isHighContrast(theme.type)) {\n\t\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n\t\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n\t\t\t}\n\t\t}\n\t}\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/core/editorColorRegistry.js';\nimport { RenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport * as arrays from '../../../../base/common/arrays.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { isHighContrast } from '../../../../platform/theme/common/theme.js';\nimport { Position } from '../../../common/core/position.js';\n\nexport abstract class AbstractLineHighlightOverlay extends DynamicViewOverlay {\n\tprivate readonly _context: ViewContext;\n\tprotected _renderLineHighlight: 'none' | 'gutter' | 'line' | 'all';\n\tprotected _wordWrap: boolean;\n\tprotected _contentLeft: number;\n\tprotected _contentWidth: number;\n\tprotected _selectionIsEmpty: boolean;\n\tprotected _renderLineHighlightOnlyWhenFocus: boolean;\n\tprotected _focused: boolean;\n\t/**\n\t * Unique sorted list of view line numbers which have cursors sitting on them.\n\t */\n\tprivate _cursorLineNumbers: number[];\n\tprivate _selections: Selection[];\n\tprivate _renderData: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\tthis._selectionIsEmpty = true;\n\t\tthis._focused = false;\n\t\tthis._cursorLineNumbers = [1];\n\t\tthis._selections = [new Selection(1, 1, 1, 1)];\n\t\tthis._renderData = null;\n\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tsuper.dispose();\n\t}\n\n\tprivate _readFromSelections(): boolean {\n\t\tlet hasChanged = false;\n\n\t\tconst lineNumbers = new Set<number>();\n\t\tfor (const selection of this._selections) {\n\t\t\tlineNumbers.add(selection.positionLineNumber);\n\t\t}\n\t\tconst cursorsLineNumbers = Array.from(lineNumbers);\n\t\tcursorsLineNumbers.sort((a, b) => a - b);\n\t\tif (!arrays.equals(this._cursorLineNumbers, cursorsLineNumbers)) {\n\t\t\tthis._cursorLineNumbers = cursorsLineNumbers;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\tconst selectionIsEmpty = this._selections.every(s => s.isEmpty());\n\t\tif (this._selectionIsEmpty !== selectionIsEmpty) {\n\t\t\tthis._selectionIsEmpty = selectionIsEmpty;\n\t\t\thasChanged = true;\n\t\t}\n\n\t\treturn hasChanged;\n\t}\n\n\t// --- begin event handlers\n\tpublic override onThemeChanged(e: viewEvents.ViewThemeChangedEvent): boolean {\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tthis._renderLineHighlight = options.get(EditorOption.renderLineHighlight);\n\t\tthis._renderLineHighlightOnlyWhenFocus = options.get(EditorOption.renderLineHighlightOnlyWhenFocus);\n\t\tthis._wordWrap = layoutInfo.isViewportWrapping;\n\t\tthis._contentLeft = layoutInfo.contentLeft;\n\t\tthis._contentWidth = layoutInfo.contentWidth;\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections;\n\t\treturn this._readFromSelections();\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollWidthChanged || e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFocusChanged(e: viewEvents.ViewFocusChangedEvent): boolean {\n\t\tif (!this._renderLineHighlightOnlyWhenFocus) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._focused = e.isFocused;\n\t\treturn true;\n\t}\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._shouldRenderThis()) {\n\t\t\tthis._renderData = null;\n\t\t\treturn;\n\t\t}\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\t// initialize renderData\n\t\tconst renderData: string[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = '';\n\t\t}\n\n\t\tif (this._wordWrap) {\n\t\t\t// do a first pass to render wrapped lines\n\t\t\tconst renderedLineWrapped = this._renderOne(ctx, false);\n\t\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\n\t\t\t\tconst coordinatesConverter = this._context.viewModel.coordinatesConverter;\n\t\t\t\tconst modelLineNumber = coordinatesConverter.convertViewPositionToModelPosition(new Position(cursorLineNumber, 1)).lineNumber;\n\t\t\t\tconst firstViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, 1)).lineNumber;\n\t\t\t\tconst lastViewLineNumber = coordinatesConverter.convertModelPositionToViewPosition(new Position(modelLineNumber, this._context.viewModel.model.getLineMaxColumn(modelLineNumber))).lineNumber;\n\n\t\t\t\tconst firstLine = Math.max(firstViewLineNumber, visibleStartLineNumber);\n\t\t\t\tconst lastLine = Math.min(lastViewLineNumber, visibleEndLineNumber);\n\t\t\t\tfor (let lineNumber = firstLine; lineNumber <= lastLine; lineNumber++) {\n\t\t\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\t\t\trenderData[lineIndex] = renderedLineWrapped;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// do a second pass to render exact lines\n\t\tconst renderedLineExact = this._renderOne(ctx, true);\n\t\tfor (const cursorLineNumber of this._cursorLineNumbers) {\n\t\t\tif (cursorLineNumber < visibleStartLineNumber || cursorLineNumber > visibleEndLineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst lineIndex = cursorLineNumber - visibleStartLineNumber;\n\t\t\trenderData[lineIndex] = renderedLineExact;\n\t\t}\n\n\t\tthis._renderData = renderData;\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderData) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex >= this._renderData.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderData[lineIndex];\n\t}\n\n\tprotected _shouldRenderInMargin(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all')\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected _shouldRenderInContent(): boolean {\n\t\treturn (\n\t\t\t(this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all')\n\t\t\t&& this._selectionIsEmpty\n\t\t\t&& (!this._renderLineHighlightOnlyWhenFocus || this._focused)\n\t\t);\n\t}\n\n\tprotected abstract _shouldRenderThis(): boolean;\n\tprotected abstract _shouldRenderOther(): boolean;\n\tprotected abstract _renderOne(ctx: RenderingContext, exact: boolean): string;\n}\n\n/**\n * Emphasizes the current line by drawing a border around it.\n */\nexport class CurrentLineHighlightOverlay extends AbstractLineHighlightOverlay {\n\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-both' : '') + (exact ? ' current-line-exact' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${Math.max(ctx.scrollWidth, this._contentWidth)}px;\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInMargin();\n\t}\n}\n\n/**\n * Emphasizes the current line margin/gutter by drawing a border around it.\n */\nexport class CurrentLineMarginHighlightOverlay extends AbstractLineHighlightOverlay {\n\tprotected _renderOne(ctx: RenderingContext, exact: boolean): string {\n\t\tconst className = 'current-line' + (this._shouldRenderInMargin() ? ' current-line-margin' : '') + (this._shouldRenderOther() ? ' current-line-margin-both' : '') + (this._shouldRenderInMargin() && exact ? ' current-line-exact-margin' : '');\n\t\treturn `<div class=\"${className}\" style=\"width:${this._contentLeft}px\"></div>`;\n\t}\n\tprotected _shouldRenderThis(): boolean {\n\t\treturn true;\n\t}\n\tprotected _shouldRenderOther(): boolean {\n\t\treturn this._shouldRenderInContent();\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst lineHighlight = theme.getColor(editorLineHighlight);\n\tif (lineHighlight) {\n\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line { background-color: ${lineHighlight}; }`);\n\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-margin { background-color: ${lineHighlight}; border: none; }`);\n\t}\n\tif (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n\t\tconst lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\t\tif (lineHighlightBorder) {\n\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border: 2px solid ${lineHighlightBorder}; }`);\n\t\t\tif (isHighContrast(theme.type)) {\n\t\t\t\tcollector.addRule(`.monaco-editor .view-overlays .current-line-exact { border-width: 1px; }`);\n\t\t\t\tcollector.addRule(`.monaco-editor .margin-view-overlays .current-line-exact-margin { border-width: 1px; }`);\n\t\t\t}\n\t\t}\n\t}\n});\n"]}