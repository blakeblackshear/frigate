{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/gpuDisposable.ts","vs/editor/browser/gpu/gpuDisposable.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAE3D,MAAM,KAAW,YAAY,CA8B5B;AA9BD,WAAiB,YAAY;IACrB,KAAK,UAAU,aAAa,CAAC,QAAoC;QACvE,IAAI,CAAC;YACJ,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;YACzD,CAAC;YACD,MAAM,OAAO,GAAG,CAAC,MAAM,SAAS,CAAC,GAAG,CAAC,cAAc,EAAE,CAAE,CAAC;YACxD,IAAI,CAAC,OAAO,EAAE,CAAC;gBACd,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;YAC/E,CAAC;YACD,OAAO,2BAA2B,CAAC,MAAM,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC;QACnE,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACZ,IAAI,QAAQ,EAAE,CAAC;gBACd,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACrB,CAAC;YACD,MAAM,CAAC,CAAC;QACT,CAAC;IACF,CAAC;IAhBqB,0BAAa,gBAgBlC,CAAA;IAED,SAAgB,YAAY,CAAC,MAAiB,EAAE,UAA+B,EAAE,aAAmD;QACnI,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,aAAa,EAAE,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,aAAa,CAA8B,CAAC,CAAC;QACjI,CAAC;QACD,OAAO,2BAA2B,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IANe,yBAAY,eAM3B,CAAA;IAED,SAAgB,aAAa,CAAC,MAAiB,EAAE,UAAgC;QAChF,OAAO,2BAA2B,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;IACtE,CAAC;IAFe,0BAAa,gBAE5B,CAAA;AACF,CAAC,EA9BgB,YAAY,KAAZ,YAAY,QA8B5B;AAED,SAAS,2BAA2B,CAAgC,KAAQ;IAC3E,OAAO;QACN,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE;KAC9B,CAAC;AACH,CAAC","file":"gpuDisposable.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IReference } from '../../../base/common/lifecycle.js';\nimport { isFunction } from '../../../base/common/types.js';\n\nexport namespace GPULifecycle {\n\texport async function requestDevice(fallback?: (message: string) => void): Promise<IReference<GPUDevice>> {\n\t\ttry {\n\t\t\tif (!navigator.gpu) {\n\t\t\t\tthrow new Error('This browser does not support WebGPU');\n\t\t\t}\n\t\t\tconst adapter = (await navigator.gpu.requestAdapter())!;\n\t\t\tif (!adapter) {\n\t\t\t\tthrow new Error('This browser supports WebGPU but it appears to be disabled');\n\t\t\t}\n\t\t\treturn wrapDestroyableInDisposable(await adapter.requestDevice());\n\t\t} catch (e) {\n\t\t\tif (fallback) {\n\t\t\t\tfallback(e.message);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\texport function createBuffer(device: GPUDevice, descriptor: GPUBufferDescriptor, initialValues?: Float32Array | (() => Float32Array)): IReference<GPUBuffer> {\n\t\tconst buffer = device.createBuffer(descriptor);\n\t\tif (initialValues) {\n\t\t\tdevice.queue.writeBuffer(buffer, 0, (isFunction(initialValues) ? initialValues() : initialValues) as Float32Array<ArrayBuffer>);\n\t\t}\n\t\treturn wrapDestroyableInDisposable(buffer);\n\t}\n\n\texport function createTexture(device: GPUDevice, descriptor: GPUTextureDescriptor): IReference<GPUTexture> {\n\t\treturn wrapDestroyableInDisposable(device.createTexture(descriptor));\n\t}\n}\n\nfunction wrapDestroyableInDisposable<T extends { destroy(): void }>(value: T): IReference<T> {\n\treturn {\n\t\tobject: value,\n\t\tdispose: () => value.destroy()\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IReference } from '../../../base/common/lifecycle.js';\nimport { isFunction } from '../../../base/common/types.js';\n\nexport namespace GPULifecycle {\n\texport async function requestDevice(fallback?: (message: string) => void): Promise<IReference<GPUDevice>> {\n\t\ttry {\n\t\t\tif (!navigator.gpu) {\n\t\t\t\tthrow new Error('This browser does not support WebGPU');\n\t\t\t}\n\t\t\tconst adapter = (await navigator.gpu.requestAdapter())!;\n\t\t\tif (!adapter) {\n\t\t\t\tthrow new Error('This browser supports WebGPU but it appears to be disabled');\n\t\t\t}\n\t\t\treturn wrapDestroyableInDisposable(await adapter.requestDevice());\n\t\t} catch (e) {\n\t\t\tif (fallback) {\n\t\t\t\tfallback(e.message);\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\texport function createBuffer(device: GPUDevice, descriptor: GPUBufferDescriptor, initialValues?: Float32Array | (() => Float32Array)): IReference<GPUBuffer> {\n\t\tconst buffer = device.createBuffer(descriptor);\n\t\tif (initialValues) {\n\t\t\tdevice.queue.writeBuffer(buffer, 0, (isFunction(initialValues) ? initialValues() : initialValues) as Float32Array<ArrayBuffer>);\n\t\t}\n\t\treturn wrapDestroyableInDisposable(buffer);\n\t}\n\n\texport function createTexture(device: GPUDevice, descriptor: GPUTextureDescriptor): IReference<GPUTexture> {\n\t\treturn wrapDestroyableInDisposable(device.createTexture(descriptor));\n\t}\n}\n\nfunction wrapDestroyableInDisposable<T extends { destroy(): void }>(value: T): IReference<T> {\n\treturn {\n\t\tobject: value,\n\t\tdispose: () => value.destroy()\n\t};\n}\n"]}