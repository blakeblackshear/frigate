{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/standalone/browser/standaloneTreeSitterLibraryService.ts","vs/editor/standalone/browser/standaloneTreeSitterLibraryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAMhG,MAAM,OAAO,kCAAkC;IAG9C,cAAc;QACb,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;IAC5F,CAAC;IAED,gBAAgB,CAAC,UAAkB,EAAE,MAA2B;QAC/D,OAAO,KAAK,CAAC;IACd,CAAC;IAED,WAAW,CAAC,UAAkB,EAAE,MAA2B;QAC1D,OAAO,SAAS,CAAC;IAClB,CAAC;IACD;;;;OAIG;IACH,mBAAmB,CAAC,UAAkB,EAAE,MAA2B;QAClE,OAAO,IAAI,CAAC;IACb,CAAC;IACD;;;;OAIG;IACH,sBAAsB,CAAC,UAAkB,EAAE,MAA2B;QACrE,OAAO,IAAI,CAAC;IACb,CAAC;CACD","file":"standaloneTreeSitterLibraryService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser, Language, Query } from '@vscode/tree-sitter-wasm';\nimport { IReader } from '../../../base/common/observable.js';\nimport { ITreeSitterLibraryService } from '../../../editor/common/services/treeSitter/treeSitterLibraryService.js';\n\nexport class StandaloneTreeSitterLibraryService implements ITreeSitterLibraryService {\n\treadonly _serviceBrand: undefined;\n\n\tgetParserClass(): Promise<typeof Parser> {\n\t\tthrow new Error('getParserClass is not implemented in StandaloneTreeSitterLibraryService');\n\t}\n\n\tsupportsLanguage(languageId: string, reader: IReader | undefined): boolean {\n\t\treturn false;\n\t}\n\n\tgetLanguage(languageId: string, reader: IReader | undefined): Language | undefined {\n\t\treturn undefined;\n\t}\n\t/**\n\t * Return value of null indicates that there are no injection queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetInjectionQueries(languageId: string, reader: IReader | undefined): Query | null | undefined {\n\t\treturn null;\n\t}\n\t/**\n\t * Return value of null indicates that there are no highlights queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetHighlightingQueries(languageId: string, reader: IReader | undefined): Query | null | undefined {\n\t\treturn null;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Parser, Language, Query } from '@vscode/tree-sitter-wasm';\nimport { IReader } from '../../../base/common/observable.js';\nimport { ITreeSitterLibraryService } from '../../../editor/common/services/treeSitter/treeSitterLibraryService.js';\n\nexport class StandaloneTreeSitterLibraryService implements ITreeSitterLibraryService {\n\treadonly _serviceBrand: undefined;\n\n\tgetParserClass(): Promise<typeof Parser> {\n\t\tthrow new Error('getParserClass is not implemented in StandaloneTreeSitterLibraryService');\n\t}\n\n\tsupportsLanguage(languageId: string, reader: IReader | undefined): boolean {\n\t\treturn false;\n\t}\n\n\tgetLanguage(languageId: string, reader: IReader | undefined): Language | undefined {\n\t\treturn undefined;\n\t}\n\t/**\n\t * Return value of null indicates that there are no injection queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetInjectionQueries(languageId: string, reader: IReader | undefined): Query | null | undefined {\n\t\treturn null;\n\t}\n\t/**\n\t * Return value of null indicates that there are no highlights queries for this language.\n\t * @param languageId\n\t * @param reader\n\t */\n\tgetHighlightingQueries(languageId: string, reader: IReader | undefined): Query | null | undefined {\n\t\treturn null;\n\t}\n}\n"]}