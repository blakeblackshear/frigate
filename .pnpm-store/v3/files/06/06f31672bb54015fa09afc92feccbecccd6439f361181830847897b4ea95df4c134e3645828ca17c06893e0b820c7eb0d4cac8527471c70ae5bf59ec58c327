{"version":3,"file":"useDocSearchKeyboardEvents.js","sources":["../../src/constants/keyboardShortcuts.ts","../../src/useDocSearchKeyboardEvents.ts"],"sourcesContent":["import type { KeyboardShortcuts } from '../types';\n\n/**\n * Default keyboard shortcuts configuration for DocSearch.\n * These values are used when no keyboardShortcuts prop is provided\n * or when specific shortcuts are not configured.\n */\nexport const DEFAULT_KEYBOARD_SHORTCUTS: Required<KeyboardShortcuts> = {\n  'Ctrl/Cmd+K': true,\n  '/': true,\n} as const;\n\n/**\n * Merges user-provided keyboard shortcuts with defaults.\n *\n * @param userShortcuts - Optional user configuration.\n * @returns Complete keyboard shortcuts configuration with defaults applied.\n */\nexport function getKeyboardShortcuts(userShortcuts?: KeyboardShortcuts): Required<KeyboardShortcuts> {\n  return {\n    ...DEFAULT_KEYBOARD_SHORTCUTS,\n    ...userShortcuts,\n  };\n}\n","import React from 'react';\n\nimport { getKeyboardShortcuts } from './constants/keyboardShortcuts';\nimport type { KeyboardShortcuts } from './types';\n\nexport interface UseDocSearchKeyboardEventsProps {\n  isOpen: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onInput?: (event: KeyboardEvent) => void;\n  searchButtonRef: React.RefObject<HTMLButtonElement | null>;\n  isAskAiActive: boolean;\n  onAskAiToggle: (toggle: boolean) => void;\n  keyboardShortcuts?: KeyboardShortcuts;\n}\n\nfunction isEditingContent(event: KeyboardEvent): boolean {\n  const element = event.composedPath()[0] as HTMLElement;\n  const tagName = element.tagName;\n\n  return element.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA';\n}\n\nexport function useDocSearchKeyboardEvents({\n  isOpen,\n  onOpen,\n  onClose,\n  onInput,\n  isAskAiActive,\n  onAskAiToggle,\n  searchButtonRef,\n  keyboardShortcuts,\n}: UseDocSearchKeyboardEventsProps): void {\n  const resolvedShortcuts = getKeyboardShortcuts(keyboardShortcuts);\n\n  React.useEffect(() => {\n    function onKeyDown(event: KeyboardEvent): void {\n      if (isOpen && event.code === 'Escape' && isAskAiActive) {\n        onAskAiToggle(false);\n        return;\n      }\n\n      const isCmdK =\n        resolvedShortcuts['Ctrl/Cmd+K'] && event.key?.toLowerCase() === 'k' && (event.metaKey || event.ctrlKey);\n      const isSlash = resolvedShortcuts['/'] && event.key === '/';\n\n      if (\n        (event.code === 'Escape' && isOpen) ||\n        // The `Cmd+K` shortcut both opens and closes the modal.\n        // We need to check for `event.key` because it can be `undefined` with\n        // Chrome's autofill feature.\n        // See https://github.com/paperjs/paper.js/issues/1398\n        isCmdK ||\n        // The `/` shortcut opens but doesn't close the modal because it's\n        // a character.\n        (!isEditingContent(event) && isSlash && !isOpen)\n      ) {\n        event.preventDefault();\n\n        if (isOpen) {\n          onClose();\n        } else if (!document.body.classList.contains('DocSearch--active')) {\n          // We check that no other DocSearch modal is showing before opening\n          // another one.\n          onOpen();\n        }\n\n        return;\n      }\n\n      if (searchButtonRef && searchButtonRef.current === document.activeElement && onInput) {\n        if (/[a-zA-Z0-9]/.test(String.fromCharCode(event.keyCode))) {\n          onInput(event);\n        }\n      }\n    }\n\n    window.addEventListener('keydown', onKeyDown);\n\n    return (): void => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [isOpen, onOpen, onClose, onInput, searchButtonRef, isAskAiActive, onAskAiToggle, resolvedShortcuts]);\n}\n"],"names":["DEFAULT_KEYBOARD_SHORTCUTS","_ref","userShortcuts","isOpen","onOpen","onClose","onInput","isAskAiActive","onAskAiToggle","searchButtonRef","keyboardShortcuts","resolvedShortcuts","_objectSpread","React","useEffect","onKeyDown","event","_event$key","code","isCmdK","key","toLowerCase","metaKey","ctrlKey","isSlash","element","composedPath","tagName","isContentEditable","isEditingContent","preventDefault","document","body","classList","contains","current","activeElement","test","String","fromCharCode","keyCode","window","addEventListener","removeEventListener"],"mappings":";mxCAOO,IAAMA,EAA0D,CACrE,cAAc,EACd,KAAK,gCCcA,SAAmCC,GASA,IDdLC,ECMnCC,EAAMF,EAANE,OACAC,EAAMH,EAANG,OACAC,EAAOJ,EAAPI,QACAC,EAAOL,EAAPK,QACAC,EAAaN,EAAbM,cACAC,EAAaP,EAAbO,cACAC,EAAeR,EAAfQ,gBACAC,EAAiBT,EAAjBS,kBAEMC,GDf6BT,ECeYQ,EDd/CE,EAAAA,EACKZ,CAAAA,EAAAA,GACAE,ICcLW,EAAMC,UAAU,WACd,SAASC,EAAUC,GAA4B,IAAAC,EAC7C,GAAId,GAAyB,WAAfa,EAAME,MAAqBX,EACvCC,GAAc,OADhB,CAKA,IAAMW,EACJR,EAAkB,eAA8C,OAApBM,QAATA,EAAAD,EAAMI,WAANH,IAASA,OAATA,EAAAA,EAAWI,iBAA0BL,EAAMM,SAAWN,EAAMO,SAC3FC,EAAUb,EAAkB,MAAsB,MAAdK,EAAMI,IAEhD,GACkB,WAAfJ,EAAME,MAAqBf,GAK5BgB,IApCR,SAA0BH,GACxB,IAAMS,EAAUT,EAAMU,eAAe,GAC/BC,EAAUF,EAAQE,QAExB,OAAOF,EAAQG,mBAAiC,UAAZD,GAAmC,WAAZA,GAAoC,aAAZA,CACrF,CAkCUE,CAAiBb,IAAUQ,IAAYrB,EAYzC,OAVAa,EAAMc,sBAEF3B,EACFE,IACU0B,SAASC,KAAKC,UAAUC,SAAS,sBAG3C9B,KAMAK,GAAmBA,EAAgB0B,UAAYJ,SAASK,eAAiB9B,GACvE,cAAc+B,KAAKC,OAAOC,aAAavB,EAAMwB,WAC/ClC,EAAQU,EAhCZ,CAmCF,CAIA,OAFAyB,OAAOC,iBAAiB,UAAW3B,GAE5B,WACL0B,OAAOE,oBAAoB,UAAW5B,EACvC,CACH,EAAG,CAACZ,EAAQC,EAAQC,EAASC,EAASG,EAAiBF,EAAeC,EAAeG,GACvF"}