{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/core/ranges/columnRange.ts","vs/editor/common/core/ranges/columnRange.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAEpC;;;EAGE;AACF,MAAM,OAAO,WAAW;IAEvB;IACC,cAAc;IACE,WAAmB,EACnB,kBAA0B;QAD1B,gBAAW,GAAX,WAAW,CAAQ;QACnB,uBAAkB,GAAlB,kBAAkB,CAAQ;QAE1C,IAAI,WAAW,GAAG,kBAAkB,EAAE,CAAC;YACtC,MAAM,IAAI,kBAAkB,CAAC,eAAe,WAAW,uCAAuC,kBAAkB,EAAE,CAAC,CAAC;QACrH,CAAC;IACF,CAAC;IAED,OAAO,CAAC,UAAkB;QACzB,OAAO,IAAI,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACrF,CAAC;IAED,MAAM,CAAC,KAAkB;QACxB,OAAO,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW;eACzC,IAAI,CAAC,kBAAkB,KAAK,KAAK,CAAC,kBAAkB,CAAC;IAC1D,CAAC;IAED,sBAAsB;QACrB,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAC;CACD","file":"columnRange.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { OffsetRange } from './offsetRange.js';\nimport { Range } from '../range.js';\n\n/**\n * Represents a 1-based range of columns.\n * Use {@lik OffsetRange} to represent a 0-based range.\n*/\nexport class ColumnRange {\n\n\tconstructor(\n\t\t/** 1-based */\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumnExclusive: number\n\t) {\n\t\tif (startColumn > endColumnExclusive) {\n\t\t\tthrow new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);\n\t\t}\n\t}\n\n\ttoRange(lineNumber: number): Range {\n\t\treturn new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);\n\t}\n\n\tequals(other: ColumnRange): boolean {\n\t\treturn this.startColumn === other.startColumn\n\t\t\t&& this.endColumnExclusive === other.endColumnExclusive;\n\t}\n\n\ttoZeroBasedOffsetRange(): OffsetRange {\n\t\treturn new OffsetRange(this.startColumn - 1, this.endColumnExclusive - 1);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { OffsetRange } from './offsetRange.js';\nimport { Range } from '../range.js';\n\n/**\n * Represents a 1-based range of columns.\n * Use {@lik OffsetRange} to represent a 0-based range.\n*/\nexport class ColumnRange {\n\n\tconstructor(\n\t\t/** 1-based */\n\t\tpublic readonly startColumn: number,\n\t\tpublic readonly endColumnExclusive: number\n\t) {\n\t\tif (startColumn > endColumnExclusive) {\n\t\t\tthrow new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);\n\t\t}\n\t}\n\n\ttoRange(lineNumber: number): Range {\n\t\treturn new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);\n\t}\n\n\tequals(other: ColumnRange): boolean {\n\t\treturn this.startColumn === other.startColumn\n\t\t\t&& this.endColumnExclusive === other.endColumnExclusive;\n\t}\n\n\ttoZeroBasedOffsetRange(): OffsetRange {\n\t\treturn new OffsetRange(this.startColumn - 1, this.endColumnExclusive - 1);\n\t}\n}\n"]}