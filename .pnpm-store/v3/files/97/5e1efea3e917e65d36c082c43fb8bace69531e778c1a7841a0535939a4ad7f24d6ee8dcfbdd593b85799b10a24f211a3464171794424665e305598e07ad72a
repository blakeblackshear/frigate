{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/controller/editContext/native/screenReaderContentSimple.ts","vs/editor/browser/controller/editContext/native/screenReaderContentSimple.ts"],"names":[],"mappings":"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","file":"screenReaderContentSimple.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { AccessibilitySupport, IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { EditorOption, IComputedEditorOptions } from '../../../../common/config/editorOptions.js';\nimport { EndOfLineSequence } from '../../../../common/model.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { SimplePagedScreenReaderStrategy, ISimpleScreenReaderContentState } from '../screenReaderUtils.js';\nimport { PositionOffsetTransformer } from '../../../../common/core/text/positionToOffset.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IME } from '../../../../../base/common/ime.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { IScreenReaderContent } from './screenReaderUtils.js';\n\nexport class SimpleScreenReaderContent extends Disposable implements IScreenReaderContent {\n\n\tprivate readonly _selectionChangeListener = this._register(new MutableDisposable());\n\n\tprivate _accessibilityPageSize: number = 1;\n\tprivate _ignoreSelectionChangeTime: number = 0;\n\n\tprivate _state: ISimpleScreenReaderContentState | undefined;\n\tprivate _strategy: SimplePagedScreenReaderStrategy = new SimplePagedScreenReaderStrategy();\n\n\tconstructor(\n\t\tprivate readonly _domNode: FastDomNode<HTMLElement>,\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _viewController: ViewController,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper();\n\t\tthis.onConfigurationChanged(this._context.configuration.options);\n\t}\n\n\tpublic updateScreenReaderContent(primarySelection: Selection): void {\n\t\tconst domNode = this._domNode.domNode;\n\t\tconst focusedElement = getActiveWindow().document.activeElement;\n\t\tif (!focusedElement || focusedElement !== domNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\tif (isScreenReaderOptimized) {\n\t\t\tthis._state = this._getScreenReaderContentState(primarySelection);\n\t\t\tif (domNode.textContent !== this._state.value) {\n\t\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\t\tdomNode.textContent = this._state.value;\n\t\t\t}\n\t\t\tconst selection = getActiveWindow().document.getSelection();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst data = this._getScreenReaderRange(this._state.selectionStart, this._state.selectionEnd);\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._setIgnoreSelectionChangeTime('setRange');\n\t\t\tselection.setBaseAndExtent(\n\t\t\t\tdata.anchorNode,\n\t\t\t\tdata.anchorOffset,\n\t\t\t\tdata.focusNode,\n\t\t\t\tdata.focusOffset\n\t\t\t);\n\t\t} else {\n\t\t\tthis._state = undefined;\n\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\tthis._domNode.domNode.textContent = '';\n\t\t}\n\t}\n\n\tpublic updateScrollTop(primarySelection: Selection): void {\n\t\tif (!this._state) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewLayout = this._context.viewModel.viewLayout;\n\t\tconst stateStartLineNumber = this._state.startPositionWithinEditor.lineNumber;\n\t\tconst verticalOffsetOfStateStartLineNumber = viewLayout.getVerticalOffsetForLineNumber(stateStartLineNumber);\n\t\tconst verticalOffsetOfPositionLineNumber = viewLayout.getVerticalOffsetForLineNumber(primarySelection.positionLineNumber);\n\t\tthis._domNode.domNode.scrollTop = verticalOffsetOfPositionLineNumber - verticalOffsetOfStateStartLineNumber;\n\t}\n\n\tpublic onFocusChange(newFocusValue: boolean): void {\n\t\tif (newFocusValue) {\n\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener();\n\t\t} else {\n\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t}\n\t}\n\n\tpublic onConfigurationChanged(options: IComputedEditorOptions): void {\n\t\tthis._accessibilityPageSize = options.get(EditorOption.accessibilityPageSize);\n\t}\n\n\tpublic onWillCut(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onCut');\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\t// --- private methods\n\n\tpublic _setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tprivate _setSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this._domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!this._state || !isScreenReaderOptimized || !IME.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeElement = getActiveWindow().document.activeElement;\n\t\t\tconst isFocused = activeElement === this._domNode.domNode;\n\t\t\tif (!isFocused) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = getActiveWindow().document.getSelection();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rangeCount = selection.rangeCount;\n\t\t\tif (rangeCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst range = selection.getRangeAt(0);\n\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._ignoreSelectionChangeTime;\n\t\t\tthis._ignoreSelectionChangeTime = 0;\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the hidden div\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._viewController.setSelection(this._getEditorSelectionFromDomRange(this._context, this._state, selection.direction, range));\n\t\t});\n\t}\n\n\tprivate _getScreenReaderContentState(primarySelection: Selection): ISimpleScreenReaderContentState {\n\t\tconst state = this._strategy.fromEditorSelection(\n\t\t\tthis._context.viewModel,\n\t\t\tprimarySelection,\n\t\t\tthis._accessibilityPageSize,\n\t\t\tthis._accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Unknown\n\t\t);\n\t\tconst endPosition = this._context.viewModel.model.getPositionAt(Infinity);\n\t\tlet value = state.value;\n\t\tif (endPosition.column === 1 && primarySelection.getEndPosition().equals(endPosition)) {\n\t\t\tvalue += '\\n';\n\t\t}\n\t\tstate.value = value;\n\t\treturn state;\n\t}\n\n\tprivate _getScreenReaderRange(selectionOffsetStart: number, selectionOffsetEnd: number): { anchorNode: Node; anchorOffset: number; focusNode: Node; focusOffset: number } | undefined {\n\t\tconst textContent = this._domNode.domNode.firstChild;\n\t\tif (!textContent) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = new globalThis.Range();\n\t\trange.setStart(textContent, selectionOffsetStart);\n\t\trange.setEnd(textContent, selectionOffsetEnd);\n\t\treturn {\n\t\t\tanchorNode: textContent,\n\t\t\tanchorOffset: selectionOffsetStart,\n\t\t\tfocusNode: textContent,\n\t\t\tfocusOffset: selectionOffsetEnd\n\t\t};\n\t}\n\n\tprivate _getEditorSelectionFromDomRange(context: ViewContext, state: ISimpleScreenReaderContentState, direction: string, range: globalThis.Range): Selection {\n\t\tconst viewModel = context.viewModel;\n\t\tconst model = viewModel.model;\n\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\tconst modelScreenReaderContentStartPositionWithinEditor = coordinatesConverter.convertViewPositionToModelPosition(state.startPositionWithinEditor);\n\t\tconst offsetOfStartOfScreenReaderContent = model.getOffsetAt(modelScreenReaderContentStartPositionWithinEditor);\n\t\tlet offsetOfSelectionStart = range.startOffset + offsetOfStartOfScreenReaderContent;\n\t\tlet offsetOfSelectionEnd = range.endOffset + offsetOfStartOfScreenReaderContent;\n\t\tconst modelUsesCRLF = model.getEndOfLineSequence() === EndOfLineSequence.CRLF;\n\t\tif (modelUsesCRLF) {\n\t\t\tconst screenReaderContentText = state.value;\n\t\t\tconst offsetTransformer = new PositionOffsetTransformer(screenReaderContentText);\n\t\t\tconst positionOfStartWithinText = offsetTransformer.getPosition(range.startOffset);\n\t\t\tconst positionOfEndWithinText = offsetTransformer.getPosition(range.endOffset);\n\t\t\toffsetOfSelectionStart += positionOfStartWithinText.lineNumber - 1;\n\t\t\toffsetOfSelectionEnd += positionOfEndWithinText.lineNumber - 1;\n\t\t}\n\t\tconst positionOfSelectionStart = model.getPositionAt(offsetOfSelectionStart);\n\t\tconst positionOfSelectionEnd = model.getPositionAt(offsetOfSelectionEnd);\n\t\tconst selectionStart = direction === 'forward' ? positionOfSelectionStart : positionOfSelectionEnd;\n\t\tconst selectionEnd = direction === 'forward' ? positionOfSelectionEnd : positionOfSelectionStart;\n\t\treturn Selection.fromPositions(selectionStart, selectionEnd);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { AccessibilitySupport, IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { EditorOption, IComputedEditorOptions } from '../../../../common/config/editorOptions.js';\nimport { EndOfLineSequence } from '../../../../common/model.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { SimplePagedScreenReaderStrategy, ISimpleScreenReaderContentState } from '../screenReaderUtils.js';\nimport { PositionOffsetTransformer } from '../../../../common/core/text/positionToOffset.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IME } from '../../../../../base/common/ime.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { IScreenReaderContent } from './screenReaderUtils.js';\n\nexport class SimpleScreenReaderContent extends Disposable implements IScreenReaderContent {\n\n\tprivate readonly _selectionChangeListener = this._register(new MutableDisposable());\n\n\tprivate _accessibilityPageSize: number = 1;\n\tprivate _ignoreSelectionChangeTime: number = 0;\n\n\tprivate _state: ISimpleScreenReaderContentState | undefined;\n\tprivate _strategy: SimplePagedScreenReaderStrategy = new SimplePagedScreenReaderStrategy();\n\n\tconstructor(\n\t\tprivate readonly _domNode: FastDomNode<HTMLElement>,\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _viewController: ViewController,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper();\n\t\tthis.onConfigurationChanged(this._context.configuration.options);\n\t}\n\n\tpublic updateScreenReaderContent(primarySelection: Selection): void {\n\t\tconst domNode = this._domNode.domNode;\n\t\tconst focusedElement = getActiveWindow().document.activeElement;\n\t\tif (!focusedElement || focusedElement !== domNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\tif (isScreenReaderOptimized) {\n\t\t\tthis._state = this._getScreenReaderContentState(primarySelection);\n\t\t\tif (domNode.textContent !== this._state.value) {\n\t\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\t\tdomNode.textContent = this._state.value;\n\t\t\t}\n\t\t\tconst selection = getActiveWindow().document.getSelection();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst data = this._getScreenReaderRange(this._state.selectionStart, this._state.selectionEnd);\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._setIgnoreSelectionChangeTime('setRange');\n\t\t\tselection.setBaseAndExtent(\n\t\t\t\tdata.anchorNode,\n\t\t\t\tdata.anchorOffset,\n\t\t\t\tdata.focusNode,\n\t\t\t\tdata.focusOffset\n\t\t\t);\n\t\t} else {\n\t\t\tthis._state = undefined;\n\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\tthis._domNode.domNode.textContent = '';\n\t\t}\n\t}\n\n\tpublic updateScrollTop(primarySelection: Selection): void {\n\t\tif (!this._state) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewLayout = this._context.viewModel.viewLayout;\n\t\tconst stateStartLineNumber = this._state.startPositionWithinEditor.lineNumber;\n\t\tconst verticalOffsetOfStateStartLineNumber = viewLayout.getVerticalOffsetForLineNumber(stateStartLineNumber);\n\t\tconst verticalOffsetOfPositionLineNumber = viewLayout.getVerticalOffsetForLineNumber(primarySelection.positionLineNumber);\n\t\tthis._domNode.domNode.scrollTop = verticalOffsetOfPositionLineNumber - verticalOffsetOfStateStartLineNumber;\n\t}\n\n\tpublic onFocusChange(newFocusValue: boolean): void {\n\t\tif (newFocusValue) {\n\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener();\n\t\t} else {\n\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t}\n\t}\n\n\tpublic onConfigurationChanged(options: IComputedEditorOptions): void {\n\t\tthis._accessibilityPageSize = options.get(EditorOption.accessibilityPageSize);\n\t}\n\n\tpublic onWillCut(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onCut');\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\t// --- private methods\n\n\tpublic _setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tprivate _setSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this._domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!this._state || !isScreenReaderOptimized || !IME.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeElement = getActiveWindow().document.activeElement;\n\t\t\tconst isFocused = activeElement === this._domNode.domNode;\n\t\t\tif (!isFocused) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = getActiveWindow().document.getSelection();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rangeCount = selection.rangeCount;\n\t\t\tif (rangeCount === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst range = selection.getRangeAt(0);\n\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._ignoreSelectionChangeTime;\n\t\t\tthis._ignoreSelectionChangeTime = 0;\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the hidden div\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._viewController.setSelection(this._getEditorSelectionFromDomRange(this._context, this._state, selection.direction, range));\n\t\t});\n\t}\n\n\tprivate _getScreenReaderContentState(primarySelection: Selection): ISimpleScreenReaderContentState {\n\t\tconst state = this._strategy.fromEditorSelection(\n\t\t\tthis._context.viewModel,\n\t\t\tprimarySelection,\n\t\t\tthis._accessibilityPageSize,\n\t\t\tthis._accessibilityService.getAccessibilitySupport() === AccessibilitySupport.Unknown\n\t\t);\n\t\tconst endPosition = this._context.viewModel.model.getPositionAt(Infinity);\n\t\tlet value = state.value;\n\t\tif (endPosition.column === 1 && primarySelection.getEndPosition().equals(endPosition)) {\n\t\t\tvalue += '\\n';\n\t\t}\n\t\tstate.value = value;\n\t\treturn state;\n\t}\n\n\tprivate _getScreenReaderRange(selectionOffsetStart: number, selectionOffsetEnd: number): { anchorNode: Node; anchorOffset: number; focusNode: Node; focusOffset: number } | undefined {\n\t\tconst textContent = this._domNode.domNode.firstChild;\n\t\tif (!textContent) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = new globalThis.Range();\n\t\trange.setStart(textContent, selectionOffsetStart);\n\t\trange.setEnd(textContent, selectionOffsetEnd);\n\t\treturn {\n\t\t\tanchorNode: textContent,\n\t\t\tanchorOffset: selectionOffsetStart,\n\t\t\tfocusNode: textContent,\n\t\t\tfocusOffset: selectionOffsetEnd\n\t\t};\n\t}\n\n\tprivate _getEditorSelectionFromDomRange(context: ViewContext, state: ISimpleScreenReaderContentState, direction: string, range: globalThis.Range): Selection {\n\t\tconst viewModel = context.viewModel;\n\t\tconst model = viewModel.model;\n\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\tconst modelScreenReaderContentStartPositionWithinEditor = coordinatesConverter.convertViewPositionToModelPosition(state.startPositionWithinEditor);\n\t\tconst offsetOfStartOfScreenReaderContent = model.getOffsetAt(modelScreenReaderContentStartPositionWithinEditor);\n\t\tlet offsetOfSelectionStart = range.startOffset + offsetOfStartOfScreenReaderContent;\n\t\tlet offsetOfSelectionEnd = range.endOffset + offsetOfStartOfScreenReaderContent;\n\t\tconst modelUsesCRLF = model.getEndOfLineSequence() === EndOfLineSequence.CRLF;\n\t\tif (modelUsesCRLF) {\n\t\t\tconst screenReaderContentText = state.value;\n\t\t\tconst offsetTransformer = new PositionOffsetTransformer(screenReaderContentText);\n\t\t\tconst positionOfStartWithinText = offsetTransformer.getPosition(range.startOffset);\n\t\t\tconst positionOfEndWithinText = offsetTransformer.getPosition(range.endOffset);\n\t\t\toffsetOfSelectionStart += positionOfStartWithinText.lineNumber - 1;\n\t\t\toffsetOfSelectionEnd += positionOfEndWithinText.lineNumber - 1;\n\t\t}\n\t\tconst positionOfSelectionStart = model.getPositionAt(offsetOfSelectionStart);\n\t\tconst positionOfSelectionEnd = model.getPositionAt(offsetOfSelectionEnd);\n\t\tconst selectionStart = direction === 'forward' ? positionOfSelectionStart : positionOfSelectionEnd;\n\t\tconst selectionEnd = direction === 'forward' ? positionOfSelectionEnd : positionOfSelectionStart;\n\t\treturn Selection.fromPositions(selectionStart, selectionEnd);\n\t}\n}\n"]}