{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/codicons.ts","vs/base/common/codicons.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD;;;GAGG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG;IAC9B,WAAW,EAAE,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC;IAC9C,aAAa,EAAE,QAAQ,CAAC,gBAAgB,EAAE,SAAS,CAAC;IACpD,UAAU,EAAE,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC;IAC3C,WAAW,EAAE,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC;IAC9C,gBAAgB,EAAE,QAAQ,CAAC,oBAAoB,EAAE,cAAc,CAAC,EAAE,kCAAkC;IACpG,kBAAkB,EAAE,QAAQ,CAAC,wBAAwB,EAAE,aAAa,CAAC;IACrE,mBAAmB,EAAE,QAAQ,CAAC,yBAAyB,EAAE,gBAAgB,CAAC;IAC1E,eAAe,EAAE,QAAQ,CAAC,mBAAmB,EAAE,OAAO,CAAC;IACvD,eAAe,EAAE,QAAQ,CAAC,mBAAmB,EAAE,SAAS,CAAC;IACzD,aAAa,EAAE,QAAQ,CAAC,gBAAgB,EAAE,OAAO,CAAC;IAClD,WAAW,EAAE,QAAQ,CAAC,cAAc,EAAE,eAAe,CAAC;IACtD,WAAW,EAAE,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC;IAC7C,mBAAmB,EAAE,QAAQ,CAAC,uBAAuB,EAAE,eAAe,CAAC;IACvE,oBAAoB,EAAE,QAAQ,CAAC,wBAAwB,EAAE,gBAAgB,CAAC;IAC1E,iBAAiB,EAAE,QAAQ,CAAC,qBAAqB,EAAE,aAAa,CAAC;IACjE,mBAAmB,EAAE,QAAQ,CAAC,uBAAuB,EAAE,eAAe,CAAC;IACvE,WAAW,EAAE,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC;IAC7C,cAAc,EAAE,QAAQ,CAAC,kBAAkB,EAAE,YAAY,CAAC;IAC1D,cAAc,EAAE,QAAQ,CAAC,kBAAkB,EAAE,MAAM,CAAC;IACpD,iBAAiB,EAAE,QAAQ,CAAC,oBAAoB,EAAE,MAAM,CAAC;IACzD,UAAU,EAAE,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC;IACtC,oBAAoB,EAAE,QAAQ,CAAC,uBAAuB,EAAE,MAAM,CAAC;IAC/D,OAAO,EAAE,QAAQ,CAAC,SAAS,EAAE,MAAM,CAAC;IACpC,gBAAgB,EAAE,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC;IACvD,cAAc,EAAE,QAAQ,CAAC,iBAAiB,EAAE,MAAM,CAAC;IACnD,QAAQ,EAAE,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC;IACvC,uBAAuB,EAAE,QAAQ,CAAC,2BAA2B,EAAE,MAAM,CAAC;IACtE,sBAAsB,EAAE,QAAQ,CAAC,0BAA0B,EAAE,MAAM,CAAC;CAE3D,CAAC;AAEX;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG;IACtB,GAAG,eAAe;IAClB,GAAG,eAAe;CAET,CAAC","file":"codicons.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["\nimport { register } from './codiconsUtil.js';\nimport { codiconsLibrary } from './codiconsLibrary.js';\n\n/**\n * Derived icons, that could become separate icons.\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\n */\nexport const codiconsDerived = {\n\tdialogError: register('dialog-error', 'error'),\n\tdialogWarning: register('dialog-warning', 'warning'),\n\tdialogInfo: register('dialog-info', 'info'),\n\tdialogClose: register('dialog-close', 'close'),\n\ttreeItemExpanded: register('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation\n\ttreeFilterOnTypeOn: register('tree-filter-on-type-on', 'list-filter'),\n\ttreeFilterOnTypeOff: register('tree-filter-on-type-off', 'list-selection'),\n\ttreeFilterClear: register('tree-filter-clear', 'close'),\n\ttreeItemLoading: register('tree-item-loading', 'loading'),\n\tmenuSelection: register('menu-selection', 'check'),\n\tmenuSubmenu: register('menu-submenu', 'chevron-right'),\n\tmenuBarMore: register('menubar-more', 'more'),\n\tscrollbarButtonLeft: register('scrollbar-button-left', 'triangle-left'),\n\tscrollbarButtonRight: register('scrollbar-button-right', 'triangle-right'),\n\tscrollbarButtonUp: register('scrollbar-button-up', 'triangle-up'),\n\tscrollbarButtonDown: register('scrollbar-button-down', 'triangle-down'),\n\ttoolBarMore: register('toolbar-more', 'more'),\n\tquickInputBack: register('quick-input-back', 'arrow-left'),\n\tdropDownButton: register('drop-down-button', 0xeab4),\n\tsymbolCustomColor: register('symbol-customcolor', 0xeb5c),\n\texportIcon: register('export', 0xebac),\n\tworkspaceUnspecified: register('workspace-unspecified', 0xebc3),\n\tnewLine: register('newline', 0xebea),\n\tthumbsDownFilled: register('thumbsdown-filled', 0xec13),\n\tthumbsUpFilled: register('thumbsup-filled', 0xec14),\n\tgitFetch: register('git-fetch', 0xec1d),\n\tlightbulbSparkleAutofix: register('lightbulb-sparkle-autofix', 0xec1f),\n\tdebugBreakpointPending: register('debug-breakpoint-pending', 0xebd9),\n\n} as const;\n\n/**\n * The Codicon library is a set of default icons that are built-in in VS Code.\n *\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\n * In that call a Codicon can be named as default.\n */\nexport const Codicon = {\n\t...codiconsLibrary,\n\t...codiconsDerived\n\n} as const;\n","\nimport { register } from './codiconsUtil.js';\nimport { codiconsLibrary } from './codiconsLibrary.js';\n\n/**\n * Derived icons, that could become separate icons.\n * These mappings should be moved into the mapping file in the vscode-codicons repo at some point.\n */\nexport const codiconsDerived = {\n\tdialogError: register('dialog-error', 'error'),\n\tdialogWarning: register('dialog-warning', 'warning'),\n\tdialogInfo: register('dialog-info', 'info'),\n\tdialogClose: register('dialog-close', 'close'),\n\ttreeItemExpanded: register('tree-item-expanded', 'chevron-down'), // collapsed is done with rotation\n\ttreeFilterOnTypeOn: register('tree-filter-on-type-on', 'list-filter'),\n\ttreeFilterOnTypeOff: register('tree-filter-on-type-off', 'list-selection'),\n\ttreeFilterClear: register('tree-filter-clear', 'close'),\n\ttreeItemLoading: register('tree-item-loading', 'loading'),\n\tmenuSelection: register('menu-selection', 'check'),\n\tmenuSubmenu: register('menu-submenu', 'chevron-right'),\n\tmenuBarMore: register('menubar-more', 'more'),\n\tscrollbarButtonLeft: register('scrollbar-button-left', 'triangle-left'),\n\tscrollbarButtonRight: register('scrollbar-button-right', 'triangle-right'),\n\tscrollbarButtonUp: register('scrollbar-button-up', 'triangle-up'),\n\tscrollbarButtonDown: register('scrollbar-button-down', 'triangle-down'),\n\ttoolBarMore: register('toolbar-more', 'more'),\n\tquickInputBack: register('quick-input-back', 'arrow-left'),\n\tdropDownButton: register('drop-down-button', 0xeab4),\n\tsymbolCustomColor: register('symbol-customcolor', 0xeb5c),\n\texportIcon: register('export', 0xebac),\n\tworkspaceUnspecified: register('workspace-unspecified', 0xebc3),\n\tnewLine: register('newline', 0xebea),\n\tthumbsDownFilled: register('thumbsdown-filled', 0xec13),\n\tthumbsUpFilled: register('thumbsup-filled', 0xec14),\n\tgitFetch: register('git-fetch', 0xec1d),\n\tlightbulbSparkleAutofix: register('lightbulb-sparkle-autofix', 0xec1f),\n\tdebugBreakpointPending: register('debug-breakpoint-pending', 0xebd9),\n\n} as const;\n\n/**\n * The Codicon library is a set of default icons that are built-in in VS Code.\n *\n * In the product (outside of base) Codicons should only be used as defaults. In order to have all icons in VS Code\n * themeable, component should define new, UI component specific icons using `iconRegistry.registerIcon`.\n * In that call a Codicon can be named as default.\n */\nexport const Codicon = {\n\t...codiconsLibrary,\n\t...codiconsDerived\n\n} as const;\n"]}