{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/core/2d/point.ts","vs/editor/common/core/2d/point.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,MAAM,OAAO,KAAK;IACjB,MAAM,CAAC,MAAM,CAAC,CAAQ,EAAE,CAAQ;QAC/B,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,YACiB,CAAS,EACT,CAAS;QADT,MAAC,GAAD,CAAC,CAAQ;QACT,MAAC,GAAD,CAAC,CAAQ;IACtB,CAAC;IAEE,GAAG,CAAC,KAAY;QACtB,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAEM,MAAM,CAAC,KAAa;QAC1B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM,CAAC,KAAa;QAC1B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;IAC1C,CAAC;IAEM,QAAQ;QACd,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC;IAChC,CAAC;IAEM,QAAQ,CAAC,KAAY;QAC3B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAEM,KAAK,CAAC,MAAc;QAC1B,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACpD,CAAC;IAEM,aAAa,CAAC,GAA8B;QAClD,OAAO,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IAEM,MAAM;QACZ,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,aAAa,CAAC,SAAiB;QACrC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;YACnC,IAAI,OAAO,GAAG,SAAS,EAAE,CAAC;gBACzB,OAAO,OAAO,GAAG,SAAS,CAAC;YAC5B,CAAC;iBAAM,IAAI,OAAO,GAAG,CAAC,SAAS,EAAE,CAAC;gBACjC,OAAO,OAAO,GAAG,SAAS,CAAC;YAC5B,CAAC;YACD,OAAO,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;IACJ,CAAC;CACD","file":"point.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class Point {\n\tstatic equals(a: Point, b: Point): boolean {\n\t\treturn a.x === b.x && a.y === b.y;\n\t}\n\n\tconstructor(\n\t\tpublic readonly x: number,\n\t\tpublic readonly y: number,\n\t) { }\n\n\tpublic add(other: Point): Point {\n\t\treturn new Point(this.x + other.x, this.y + other.y);\n\t}\n\n\tpublic deltaX(delta: number): Point {\n\t\treturn new Point(this.x + delta, this.y);\n\t}\n\n\tpublic deltaY(delta: number): Point {\n\t\treturn new Point(this.x, this.y + delta);\n\t}\n\n\tpublic toString() {\n\t\treturn `(${this.x},${this.y})`;\n\t}\n\n\tpublic subtract(other: Point): Point {\n\t\treturn new Point(this.x - other.x, this.y - other.y);\n\t}\n\n\tpublic scale(factor: number): Point {\n\t\treturn new Point(this.x * factor, this.y * factor);\n\t}\n\n\tpublic mapComponents(map: (value: number) => number): Point {\n\t\treturn new Point(map(this.x), map(this.y));\n\t}\n\n\tpublic isZero(): boolean {\n\t\treturn this.x === 0 && this.y === 0;\n\t}\n\n\tpublic withThreshold(threshold: number): Point {\n\t\treturn this.mapComponents(axisVal => {\n\t\t\tif (axisVal > threshold) {\n\t\t\t\treturn axisVal - threshold;\n\t\t\t} else if (axisVal < -threshold) {\n\t\t\t\treturn axisVal + threshold;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class Point {\n\tstatic equals(a: Point, b: Point): boolean {\n\t\treturn a.x === b.x && a.y === b.y;\n\t}\n\n\tconstructor(\n\t\tpublic readonly x: number,\n\t\tpublic readonly y: number,\n\t) { }\n\n\tpublic add(other: Point): Point {\n\t\treturn new Point(this.x + other.x, this.y + other.y);\n\t}\n\n\tpublic deltaX(delta: number): Point {\n\t\treturn new Point(this.x + delta, this.y);\n\t}\n\n\tpublic deltaY(delta: number): Point {\n\t\treturn new Point(this.x, this.y + delta);\n\t}\n\n\tpublic toString() {\n\t\treturn `(${this.x},${this.y})`;\n\t}\n\n\tpublic subtract(other: Point): Point {\n\t\treturn new Point(this.x - other.x, this.y - other.y);\n\t}\n\n\tpublic scale(factor: number): Point {\n\t\treturn new Point(this.x * factor, this.y * factor);\n\t}\n\n\tpublic mapComponents(map: (value: number) => number): Point {\n\t\treturn new Point(map(this.x), map(this.y));\n\t}\n\n\tpublic isZero(): boolean {\n\t\treturn this.x === 0 && this.y === 0;\n\t}\n\n\tpublic withThreshold(threshold: number): Point {\n\t\treturn this.mapComponents(axisVal => {\n\t\t\tif (axisVal > threshold) {\n\t\t\t\treturn axisVal - threshold;\n\t\t\t} else if (axisVal < -threshold) {\n\t\t\t\treturn axisVal + threshold;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t}\n}\n"]}