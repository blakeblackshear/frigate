{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/logging/debugger/devToolsLogger.ts","vs/base/common/observableInternal/logging/debugger/devToolsLogger.ts"],"names":[],"mappings":"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","file":"devToolsLogger.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AutorunObserver, AutorunState } from '../../reactions/autorunImpl.js';\nimport { TransactionImpl } from '../../transaction.js';\nimport { IChangeInformation, IObservableLogger } from '../logging.js';\nimport { formatValue } from '../consoleObservableLogger.js';\nimport { ObsDebuggerApi, IObsDeclaration, ObsInstanceId, ObsStateUpdate, ITransactionState, ObserverInstanceState } from './debuggerApi.js';\nimport { registerDebugChannel } from './debuggerRpc.js';\nimport { deepAssign, deepAssignDeleteNulls, Throttler } from './utils.js';\nimport { isDefined } from '../../../types.js';\nimport { FromEventObservable } from '../../observables/observableFromEvent.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../errors.js';\nimport { IObservable, IObserver } from '../../base.js';\nimport { BaseObservable } from '../../observables/baseObservable.js';\nimport { Derived, DerivedState } from '../../observables/derivedImpl.js';\nimport { ObservableValue } from '../../observables/observableValue.js';\nimport { DebugLocation } from '../../debugLocation.js';\n\ninterface IInstanceInfo {\n\tdeclarationId: number;\n\tinstanceId: number;\n}\n\ninterface IObservableInfo extends IInstanceInfo {\n\tlistenerCount: number;\n\tlastValue: string | undefined;\n\tupdateCount: number;\n\tchangedObservables: Set<IObservable<any>>;\n}\n\ninterface IAutorunInfo extends IInstanceInfo {\n\tupdateCount: number;\n\tchangedObservables: Set<IObservable<any>>;\n}\n\nexport class DevToolsLogger implements IObservableLogger {\n\tprivate static _instance: DevToolsLogger | undefined = undefined;\n\tpublic static getInstance(): DevToolsLogger {\n\t\tif (DevToolsLogger._instance === undefined) {\n\t\t\tDevToolsLogger._instance = new DevToolsLogger();\n\t\t}\n\t\treturn DevToolsLogger._instance;\n\t}\n\n\tprivate _declarationId = 0;\n\tprivate _instanceId = 0;\n\n\tprivate readonly _declarations = new Map</* declarationId + type */string, IObsDeclaration>();\n\tprivate readonly _instanceInfos = new WeakMap<object, IObservableInfo | IAutorunInfo>();\n\tprivate readonly _aliveInstances = new Map<ObsInstanceId, IObservable<any> | AutorunObserver>();\n\tprivate readonly _activeTransactions = new Set<TransactionImpl>();\n\n\tprivate readonly _channel = registerDebugChannel<ObsDebuggerApi>('observableDevTools', () => {\n\t\treturn {\n\t\t\tnotifications: {\n\t\t\t\tsetDeclarationIdFilter: declarationIds => {\n\n\t\t\t\t},\n\t\t\t\tlogObservableValue: (observableId) => {\n\t\t\t\t\tconsole.log('logObservableValue', observableId);\n\t\t\t\t},\n\t\t\t\tflushUpdates: () => {\n\t\t\t\t\tthis._flushUpdates();\n\t\t\t\t},\n\t\t\t\tresetUpdates: () => {\n\t\t\t\t\tthis._pendingChanges = null;\n\t\t\t\t\tthis._channel.api.notifications.handleChange(this._fullState, true);\n\t\t\t\t},\n\t\t\t},\n\t\t\trequests: {\n\t\t\t\tgetDeclarations: () => {\n\t\t\t\t\tconst result: Record<string, IObsDeclaration> = {};\n\t\t\t\t\tfor (const decl of this._declarations.values()) {\n\t\t\t\t\t\tresult[decl.id] = decl;\n\t\t\t\t\t}\n\t\t\t\t\treturn { decls: result };\n\t\t\t\t},\n\t\t\t\tgetSummarizedInstances: () => {\n\t\t\t\t\treturn null!;\n\t\t\t\t},\n\t\t\t\tgetObservableValueInfo: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tobservers: [...obs.debugGetObservers()].map(d => this._formatObserver(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetDerivedInfo: instanceId => {\n\t\t\t\t\tconst d = this._aliveInstances.get(instanceId) as Derived<any>;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdependencies: [...d.debugGetState().dependencies].map(d => this._formatObservable(d)).filter(isDefined),\n\t\t\t\t\t\tobservers: [...d.debugGetObservers()].map(d => this._formatObserver(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetAutorunInfo: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as AutorunObserver;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdependencies: [...obs.debugGetState().dependencies].map(d => this._formatObservable(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetTransactionState: () => {\n\t\t\t\t\treturn this.getTransactionState();\n\t\t\t\t},\n\t\t\t\tsetValue: (instanceId, jsonValue) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else if (obs instanceof ObservableValue) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else if (obs instanceof FromEventObservable) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst observers = [...obs.debugGetObservers()];\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.beginUpdate(obs);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.handleChange(obs, undefined);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.endUpdate(obs);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetValue: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\treturn formatValue(obs.debugGetState().value, 200);\n\t\t\t\t\t} else if (obs instanceof ObservableValue) {\n\t\t\t\t\t\treturn formatValue(obs.debugGetState().value, 200);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tlogValue: (instanceId) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId);\n\t\t\t\t\tif (obs && 'get' in obs) {\n\t\t\t\t\t\tconsole.log('Logged Value:', obs.get());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trerun: (instanceId) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId);\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\tobs.debugRecompute();\n\t\t\t\t\t} else if (obs instanceof AutorunObserver) {\n\t\t\t\t\t\tobs.debugRerun();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t};\n\t});\n\n\tprivate getTransactionState(): ITransactionState | undefined {\n\t\tconst affected: ObserverInstanceState[] = [];\n\t\tconst txs = [...this._activeTransactions];\n\t\tif (txs.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst observerQueue = txs.flatMap(t => t.debugGetUpdatingObservers() ?? []).map(o => o.observer);\n\t\tconst processedObservers = new Set<IObserver>();\n\t\twhile (observerQueue.length > 0) {\n\t\t\tconst observer = observerQueue.shift()!;\n\t\t\tif (processedObservers.has(observer)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprocessedObservers.add(observer);\n\n\t\t\tconst state = this._getInfo(observer, d => {\n\t\t\t\tif (!processedObservers.has(d)) {\n\t\t\t\t\tobserverQueue.push(d);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (state) {\n\t\t\t\taffected.push(state);\n\t\t\t}\n\t\t}\n\n\t\treturn { names: txs.map(t => t.getDebugName() ?? 'tx'), affected };\n\t}\n\n\tprivate _getObservableInfo(observable: IObservable<any>): IObservableInfo | undefined {\n\t\tconst info = this._instanceInfos.get(observable);\n\t\tif (!info) {\n\t\t\tonUnexpectedError(new BugIndicatingError('No info found'));\n\t\t\treturn undefined;\n\t\t}\n\t\treturn info as IObservableInfo;\n\t}\n\n\tprivate _getAutorunInfo(autorun: AutorunObserver): IAutorunInfo | undefined {\n\t\tconst info = this._instanceInfos.get(autorun);\n\t\tif (!info) {\n\t\t\tonUnexpectedError(new BugIndicatingError('No info found'));\n\t\t\treturn undefined;\n\t\t}\n\t\treturn info as IAutorunInfo;\n\t}\n\n\tprivate _getInfo(observer: IObserver, queue: (observer: IObserver) => void): ObserverInstanceState | undefined {\n\t\tif (observer instanceof Derived) {\n\t\t\tconst observersToUpdate = [...observer.debugGetObservers()];\n\t\t\tfor (const o of observersToUpdate) {\n\t\t\t\tqueue(o);\n\t\t\t}\n\n\t\t\tconst info = this._getObservableInfo(observer);\n\t\t\tif (!info) { return; }\n\n\t\t\tconst observerState = observer.debugGetState();\n\n\t\t\tconst base = { name: observer.debugName, instanceId: info.instanceId, updateCount: observerState.updateCount };\n\t\t\tconst changedDependencies = [...info.changedObservables].map(o => this._instanceInfos.get(o)?.instanceId).filter(isDefined);\n\t\t\tif (observerState.isComputing) {\n\t\t\t\treturn { ...base, type: 'observable/derived', state: 'updating', changedDependencies, initialComputation: false };\n\t\t\t}\n\t\t\tswitch (observerState.state) {\n\t\t\t\tcase DerivedState.initial:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'noValue' };\n\t\t\t\tcase DerivedState.upToDate:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'upToDate' };\n\t\t\t\tcase DerivedState.stale:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'stale', changedDependencies };\n\t\t\t\tcase DerivedState.dependenciesMightHaveChanged:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'possiblyStale' };\n\t\t\t}\n\t\t} else if (observer instanceof AutorunObserver) {\n\t\t\tconst info = this._getAutorunInfo(observer);\n\t\t\tif (!info) { return undefined; }\n\n\t\t\tconst base = { name: observer.debugName, instanceId: info.instanceId, updateCount: info.updateCount };\n\t\t\tconst changedDependencies = [...info.changedObservables].map(o => this._instanceInfos.get(o)!.instanceId);\n\t\t\tif (observer.debugGetState().isRunning) {\n\t\t\t\treturn { ...base, type: 'autorun', state: 'updating', changedDependencies };\n\t\t\t}\n\t\t\tswitch (observer.debugGetState().state) {\n\t\t\t\tcase AutorunState.upToDate:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'upToDate' };\n\t\t\t\tcase AutorunState.stale:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'stale', changedDependencies };\n\t\t\t\tcase AutorunState.dependenciesMightHaveChanged:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'possiblyStale' };\n\t\t\t}\n\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _formatObservable(obs: IObservable<any>): { name: string; instanceId: ObsInstanceId } | undefined {\n\t\tconst info = this._getObservableInfo(obs);\n\t\tif (!info) { return undefined; }\n\t\treturn { name: obs.debugName, instanceId: info.instanceId };\n\t}\n\n\tprivate _formatObserver(obs: IObserver): { name: string; instanceId: ObsInstanceId } | undefined {\n\t\tif (obs instanceof Derived) {\n\t\t\treturn { name: obs.toString(), instanceId: this._getObservableInfo(obs)?.instanceId! };\n\t\t}\n\t\tconst autorunInfo = this._getAutorunInfo(obs as AutorunObserver);\n\t\tif (autorunInfo) {\n\t\t\treturn { name: obs.toString(), instanceId: autorunInfo.instanceId };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate constructor() {\n\t\tDebugLocation.enable();\n\t}\n\n\tprivate _pendingChanges: ObsStateUpdate | null = null;\n\tprivate readonly _changeThrottler = new Throttler();\n\n\tprivate readonly _fullState = {};\n\n\tprivate _handleChange(update: ObsStateUpdate): void {\n\t\tdeepAssignDeleteNulls(this._fullState, update);\n\n\t\tif (this._pendingChanges === null) {\n\t\t\tthis._pendingChanges = update;\n\t\t} else {\n\t\t\tdeepAssign(this._pendingChanges, update);\n\t\t}\n\n\t\tthis._changeThrottler.throttle(this._flushUpdates, 10);\n\t}\n\n\tprivate readonly _flushUpdates = () => {\n\t\tif (this._pendingChanges !== null) {\n\t\t\tthis._channel.api.notifications.handleChange(this._pendingChanges, false);\n\t\t\tthis._pendingChanges = null;\n\t\t}\n\t};\n\n\tprivate _getDeclarationId(type: IObsDeclaration['type'], location: DebugLocation): number {\n\t\tif (!location) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet decInfo = this._declarations.get(location.id);\n\t\tif (decInfo === undefined) {\n\t\t\tdecInfo = {\n\t\t\t\tid: this._declarationId++,\n\t\t\t\ttype,\n\t\t\t\turl: location.fileName,\n\t\t\t\tline: location.line,\n\t\t\t\tcolumn: location.column,\n\t\t\t};\n\t\t\tthis._declarations.set(location.id, decInfo);\n\n\t\t\tthis._handleChange({ decls: { [decInfo.id]: decInfo } });\n\t\t}\n\t\treturn decInfo.id;\n\t}\n\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void {\n\t\tconst declarationId = this._getDeclarationId('observable/value', location);\n\n\t\tconst info: IObservableInfo = {\n\t\t\tdeclarationId,\n\t\t\tinstanceId: this._instanceId++,\n\t\t\tlistenerCount: 0,\n\t\t\tlastValue: undefined,\n\t\t\tupdateCount: 0,\n\t\t\tchangedObservables: new Set(),\n\t\t};\n\t\tthis._instanceInfos.set(observable, info);\n\t}\n\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tif (info.listenerCount === 0 && newCount > 0) {\n\t\t\tconst type: IObsDeclaration['type'] =\n\t\t\t\tobservable instanceof Derived ? 'observable/derived' : 'observable/value';\n\t\t\tthis._aliveInstances.set(info.instanceId, observable);\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tinstanceId: info.instanceId,\n\t\t\t\t\t\tdeclarationId: info.declarationId,\n\t\t\t\t\t\tformattedValue: info.lastValue,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tname: observable.debugName,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (info.listenerCount > 0 && newCount === 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: { [info.instanceId]: null }\n\t\t\t});\n\t\t\tthis._aliveInstances.delete(info.instanceId);\n\t\t}\n\t\tinfo.listenerCount = newCount;\n\t}\n\n\thandleObservableUpdated(observable: IObservable<any>, changeInfo: IChangeInformation): void {\n\t\tif (observable instanceof Derived) {\n\t\t\tthis._handleDerivedRecomputed(observable, changeInfo);\n\t\t\treturn;\n\t\t}\n\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (info) {\n\t\t\tif (changeInfo.didChange) {\n\t\t\t\tinfo.lastValue = formatValue(changeInfo.newValue, 30);\n\t\t\t\tif (info.listenerCount > 0) {\n\t\t\t\t\tthis._handleChange({\n\t\t\t\t\t\tinstances: { [info.instanceId]: { formattedValue: info.lastValue } }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void {\n\t\tconst declarationId = this._getDeclarationId('autorun', location);\n\t\tconst info: IAutorunInfo = {\n\t\t\tdeclarationId,\n\t\t\tinstanceId: this._instanceId++,\n\t\t\tupdateCount: 0,\n\t\t\tchangedObservables: new Set(),\n\t\t};\n\t\tthis._instanceInfos.set(autorun, info);\n\t\tthis._aliveInstances.set(info.instanceId, autorun);\n\t\tif (info) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tinstanceId: info.instanceId,\n\t\t\t\t\t\tdeclarationId: info.declarationId,\n\t\t\t\t\t\trunCount: 0,\n\t\t\t\t\t\ttype: 'autorun',\n\t\t\t\t\t\tname: autorun.debugName,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tthis._handleChange({\n\t\t\tinstances: { [info.instanceId]: null }\n\t\t});\n\t\tthis._instanceInfos.delete(autorun);\n\t\tthis._aliveInstances.delete(info.instanceId);\n\t}\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tinfo.changedObservables.add(observable);\n\t}\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\n\t}\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tinfo.changedObservables.clear();\n\t\tinfo.updateCount++;\n\t\tthis._handleChange({\n\t\t\tinstances: { [info.instanceId]: { runCount: info.updateCount } }\n\t\t});\n\t}\n\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tconst info = this._getObservableInfo(derived);\n\t\tif (info) {\n\t\t\tinfo.changedObservables.add(observable);\n\t\t}\n\t}\n\t_handleDerivedRecomputed(observable: Derived<any>, changeInfo: IChangeInformation): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tconst formattedValue = formatValue(changeInfo.newValue, 30);\n\t\tinfo.updateCount++;\n\t\tinfo.changedObservables.clear();\n\n\t\tinfo.lastValue = formattedValue;\n\t\tif (info.listenerCount > 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: { [info.instanceId]: { formattedValue: formattedValue, recomputationCount: info.updateCount } }\n\t\t\t});\n\t\t}\n\t}\n\thandleDerivedCleared(observable: Derived<any>): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tinfo.lastValue = undefined;\n\t\tinfo.changedObservables.clear();\n\t\tif (info.listenerCount > 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tformattedValue: undefined,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tthis._activeTransactions.add(transaction);\n\t}\n\thandleEndTransaction(transaction: TransactionImpl): void {\n\t\tthis._activeTransactions.delete(transaction);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AutorunObserver, AutorunState } from '../../reactions/autorunImpl.js';\nimport { TransactionImpl } from '../../transaction.js';\nimport { IChangeInformation, IObservableLogger } from '../logging.js';\nimport { formatValue } from '../consoleObservableLogger.js';\nimport { ObsDebuggerApi, IObsDeclaration, ObsInstanceId, ObsStateUpdate, ITransactionState, ObserverInstanceState } from './debuggerApi.js';\nimport { registerDebugChannel } from './debuggerRpc.js';\nimport { deepAssign, deepAssignDeleteNulls, Throttler } from './utils.js';\nimport { isDefined } from '../../../types.js';\nimport { FromEventObservable } from '../../observables/observableFromEvent.js';\nimport { BugIndicatingError, onUnexpectedError } from '../../../errors.js';\nimport { IObservable, IObserver } from '../../base.js';\nimport { BaseObservable } from '../../observables/baseObservable.js';\nimport { Derived, DerivedState } from '../../observables/derivedImpl.js';\nimport { ObservableValue } from '../../observables/observableValue.js';\nimport { DebugLocation } from '../../debugLocation.js';\n\ninterface IInstanceInfo {\n\tdeclarationId: number;\n\tinstanceId: number;\n}\n\ninterface IObservableInfo extends IInstanceInfo {\n\tlistenerCount: number;\n\tlastValue: string | undefined;\n\tupdateCount: number;\n\tchangedObservables: Set<IObservable<any>>;\n}\n\ninterface IAutorunInfo extends IInstanceInfo {\n\tupdateCount: number;\n\tchangedObservables: Set<IObservable<any>>;\n}\n\nexport class DevToolsLogger implements IObservableLogger {\n\tprivate static _instance: DevToolsLogger | undefined = undefined;\n\tpublic static getInstance(): DevToolsLogger {\n\t\tif (DevToolsLogger._instance === undefined) {\n\t\t\tDevToolsLogger._instance = new DevToolsLogger();\n\t\t}\n\t\treturn DevToolsLogger._instance;\n\t}\n\n\tprivate _declarationId = 0;\n\tprivate _instanceId = 0;\n\n\tprivate readonly _declarations = new Map</* declarationId + type */string, IObsDeclaration>();\n\tprivate readonly _instanceInfos = new WeakMap<object, IObservableInfo | IAutorunInfo>();\n\tprivate readonly _aliveInstances = new Map<ObsInstanceId, IObservable<any> | AutorunObserver>();\n\tprivate readonly _activeTransactions = new Set<TransactionImpl>();\n\n\tprivate readonly _channel = registerDebugChannel<ObsDebuggerApi>('observableDevTools', () => {\n\t\treturn {\n\t\t\tnotifications: {\n\t\t\t\tsetDeclarationIdFilter: declarationIds => {\n\n\t\t\t\t},\n\t\t\t\tlogObservableValue: (observableId) => {\n\t\t\t\t\tconsole.log('logObservableValue', observableId);\n\t\t\t\t},\n\t\t\t\tflushUpdates: () => {\n\t\t\t\t\tthis._flushUpdates();\n\t\t\t\t},\n\t\t\t\tresetUpdates: () => {\n\t\t\t\t\tthis._pendingChanges = null;\n\t\t\t\t\tthis._channel.api.notifications.handleChange(this._fullState, true);\n\t\t\t\t},\n\t\t\t},\n\t\t\trequests: {\n\t\t\t\tgetDeclarations: () => {\n\t\t\t\t\tconst result: Record<string, IObsDeclaration> = {};\n\t\t\t\t\tfor (const decl of this._declarations.values()) {\n\t\t\t\t\t\tresult[decl.id] = decl;\n\t\t\t\t\t}\n\t\t\t\t\treturn { decls: result };\n\t\t\t\t},\n\t\t\t\tgetSummarizedInstances: () => {\n\t\t\t\t\treturn null!;\n\t\t\t\t},\n\t\t\t\tgetObservableValueInfo: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tobservers: [...obs.debugGetObservers()].map(d => this._formatObserver(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetDerivedInfo: instanceId => {\n\t\t\t\t\tconst d = this._aliveInstances.get(instanceId) as Derived<any>;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdependencies: [...d.debugGetState().dependencies].map(d => this._formatObservable(d)).filter(isDefined),\n\t\t\t\t\t\tobservers: [...d.debugGetObservers()].map(d => this._formatObserver(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetAutorunInfo: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as AutorunObserver;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdependencies: [...obs.debugGetState().dependencies].map(d => this._formatObservable(d)).filter(isDefined),\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\tgetTransactionState: () => {\n\t\t\t\t\treturn this.getTransactionState();\n\t\t\t\t},\n\t\t\t\tsetValue: (instanceId, jsonValue) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else if (obs instanceof ObservableValue) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else if (obs instanceof FromEventObservable) {\n\t\t\t\t\t\tobs.debugSetValue(jsonValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\n\t\t\t\t\tconst observers = [...obs.debugGetObservers()];\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.beginUpdate(obs);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.handleChange(obs, undefined);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const d of observers) {\n\t\t\t\t\t\td.endUpdate(obs);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tgetValue: instanceId => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId) as BaseObservable<any>;\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\treturn formatValue(obs.debugGetState().value, 200);\n\t\t\t\t\t} else if (obs instanceof ObservableValue) {\n\t\t\t\t\t\treturn formatValue(obs.debugGetState().value, 200);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tlogValue: (instanceId) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId);\n\t\t\t\t\tif (obs && 'get' in obs) {\n\t\t\t\t\t\tconsole.log('Logged Value:', obs.get());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trerun: (instanceId) => {\n\t\t\t\t\tconst obs = this._aliveInstances.get(instanceId);\n\t\t\t\t\tif (obs instanceof Derived) {\n\t\t\t\t\t\tobs.debugRecompute();\n\t\t\t\t\t} else if (obs instanceof AutorunObserver) {\n\t\t\t\t\t\tobs.debugRerun();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new BugIndicatingError('Observable is not supported');\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t};\n\t});\n\n\tprivate getTransactionState(): ITransactionState | undefined {\n\t\tconst affected: ObserverInstanceState[] = [];\n\t\tconst txs = [...this._activeTransactions];\n\t\tif (txs.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst observerQueue = txs.flatMap(t => t.debugGetUpdatingObservers() ?? []).map(o => o.observer);\n\t\tconst processedObservers = new Set<IObserver>();\n\t\twhile (observerQueue.length > 0) {\n\t\t\tconst observer = observerQueue.shift()!;\n\t\t\tif (processedObservers.has(observer)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprocessedObservers.add(observer);\n\n\t\t\tconst state = this._getInfo(observer, d => {\n\t\t\t\tif (!processedObservers.has(d)) {\n\t\t\t\t\tobserverQueue.push(d);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (state) {\n\t\t\t\taffected.push(state);\n\t\t\t}\n\t\t}\n\n\t\treturn { names: txs.map(t => t.getDebugName() ?? 'tx'), affected };\n\t}\n\n\tprivate _getObservableInfo(observable: IObservable<any>): IObservableInfo | undefined {\n\t\tconst info = this._instanceInfos.get(observable);\n\t\tif (!info) {\n\t\t\tonUnexpectedError(new BugIndicatingError('No info found'));\n\t\t\treturn undefined;\n\t\t}\n\t\treturn info as IObservableInfo;\n\t}\n\n\tprivate _getAutorunInfo(autorun: AutorunObserver): IAutorunInfo | undefined {\n\t\tconst info = this._instanceInfos.get(autorun);\n\t\tif (!info) {\n\t\t\tonUnexpectedError(new BugIndicatingError('No info found'));\n\t\t\treturn undefined;\n\t\t}\n\t\treturn info as IAutorunInfo;\n\t}\n\n\tprivate _getInfo(observer: IObserver, queue: (observer: IObserver) => void): ObserverInstanceState | undefined {\n\t\tif (observer instanceof Derived) {\n\t\t\tconst observersToUpdate = [...observer.debugGetObservers()];\n\t\t\tfor (const o of observersToUpdate) {\n\t\t\t\tqueue(o);\n\t\t\t}\n\n\t\t\tconst info = this._getObservableInfo(observer);\n\t\t\tif (!info) { return; }\n\n\t\t\tconst observerState = observer.debugGetState();\n\n\t\t\tconst base = { name: observer.debugName, instanceId: info.instanceId, updateCount: observerState.updateCount };\n\t\t\tconst changedDependencies = [...info.changedObservables].map(o => this._instanceInfos.get(o)?.instanceId).filter(isDefined);\n\t\t\tif (observerState.isComputing) {\n\t\t\t\treturn { ...base, type: 'observable/derived', state: 'updating', changedDependencies, initialComputation: false };\n\t\t\t}\n\t\t\tswitch (observerState.state) {\n\t\t\t\tcase DerivedState.initial:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'noValue' };\n\t\t\t\tcase DerivedState.upToDate:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'upToDate' };\n\t\t\t\tcase DerivedState.stale:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'stale', changedDependencies };\n\t\t\t\tcase DerivedState.dependenciesMightHaveChanged:\n\t\t\t\t\treturn { ...base, type: 'observable/derived', state: 'possiblyStale' };\n\t\t\t}\n\t\t} else if (observer instanceof AutorunObserver) {\n\t\t\tconst info = this._getAutorunInfo(observer);\n\t\t\tif (!info) { return undefined; }\n\n\t\t\tconst base = { name: observer.debugName, instanceId: info.instanceId, updateCount: info.updateCount };\n\t\t\tconst changedDependencies = [...info.changedObservables].map(o => this._instanceInfos.get(o)!.instanceId);\n\t\t\tif (observer.debugGetState().isRunning) {\n\t\t\t\treturn { ...base, type: 'autorun', state: 'updating', changedDependencies };\n\t\t\t}\n\t\t\tswitch (observer.debugGetState().state) {\n\t\t\t\tcase AutorunState.upToDate:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'upToDate' };\n\t\t\t\tcase AutorunState.stale:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'stale', changedDependencies };\n\t\t\t\tcase AutorunState.dependenciesMightHaveChanged:\n\t\t\t\t\treturn { ...base, type: 'autorun', state: 'possiblyStale' };\n\t\t\t}\n\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _formatObservable(obs: IObservable<any>): { name: string; instanceId: ObsInstanceId } | undefined {\n\t\tconst info = this._getObservableInfo(obs);\n\t\tif (!info) { return undefined; }\n\t\treturn { name: obs.debugName, instanceId: info.instanceId };\n\t}\n\n\tprivate _formatObserver(obs: IObserver): { name: string; instanceId: ObsInstanceId } | undefined {\n\t\tif (obs instanceof Derived) {\n\t\t\treturn { name: obs.toString(), instanceId: this._getObservableInfo(obs)?.instanceId! };\n\t\t}\n\t\tconst autorunInfo = this._getAutorunInfo(obs as AutorunObserver);\n\t\tif (autorunInfo) {\n\t\t\treturn { name: obs.toString(), instanceId: autorunInfo.instanceId };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate constructor() {\n\t\tDebugLocation.enable();\n\t}\n\n\tprivate _pendingChanges: ObsStateUpdate | null = null;\n\tprivate readonly _changeThrottler = new Throttler();\n\n\tprivate readonly _fullState = {};\n\n\tprivate _handleChange(update: ObsStateUpdate): void {\n\t\tdeepAssignDeleteNulls(this._fullState, update);\n\n\t\tif (this._pendingChanges === null) {\n\t\t\tthis._pendingChanges = update;\n\t\t} else {\n\t\t\tdeepAssign(this._pendingChanges, update);\n\t\t}\n\n\t\tthis._changeThrottler.throttle(this._flushUpdates, 10);\n\t}\n\n\tprivate readonly _flushUpdates = () => {\n\t\tif (this._pendingChanges !== null) {\n\t\t\tthis._channel.api.notifications.handleChange(this._pendingChanges, false);\n\t\t\tthis._pendingChanges = null;\n\t\t}\n\t};\n\n\tprivate _getDeclarationId(type: IObsDeclaration['type'], location: DebugLocation): number {\n\t\tif (!location) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet decInfo = this._declarations.get(location.id);\n\t\tif (decInfo === undefined) {\n\t\t\tdecInfo = {\n\t\t\t\tid: this._declarationId++,\n\t\t\t\ttype,\n\t\t\t\turl: location.fileName,\n\t\t\t\tline: location.line,\n\t\t\t\tcolumn: location.column,\n\t\t\t};\n\t\t\tthis._declarations.set(location.id, decInfo);\n\n\t\t\tthis._handleChange({ decls: { [decInfo.id]: decInfo } });\n\t\t}\n\t\treturn decInfo.id;\n\t}\n\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void {\n\t\tconst declarationId = this._getDeclarationId('observable/value', location);\n\n\t\tconst info: IObservableInfo = {\n\t\t\tdeclarationId,\n\t\t\tinstanceId: this._instanceId++,\n\t\t\tlistenerCount: 0,\n\t\t\tlastValue: undefined,\n\t\t\tupdateCount: 0,\n\t\t\tchangedObservables: new Set(),\n\t\t};\n\t\tthis._instanceInfos.set(observable, info);\n\t}\n\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tif (info.listenerCount === 0 && newCount > 0) {\n\t\t\tconst type: IObsDeclaration['type'] =\n\t\t\t\tobservable instanceof Derived ? 'observable/derived' : 'observable/value';\n\t\t\tthis._aliveInstances.set(info.instanceId, observable);\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tinstanceId: info.instanceId,\n\t\t\t\t\t\tdeclarationId: info.declarationId,\n\t\t\t\t\t\tformattedValue: info.lastValue,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tname: observable.debugName,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (info.listenerCount > 0 && newCount === 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: { [info.instanceId]: null }\n\t\t\t});\n\t\t\tthis._aliveInstances.delete(info.instanceId);\n\t\t}\n\t\tinfo.listenerCount = newCount;\n\t}\n\n\thandleObservableUpdated(observable: IObservable<any>, changeInfo: IChangeInformation): void {\n\t\tif (observable instanceof Derived) {\n\t\t\tthis._handleDerivedRecomputed(observable, changeInfo);\n\t\t\treturn;\n\t\t}\n\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (info) {\n\t\t\tif (changeInfo.didChange) {\n\t\t\t\tinfo.lastValue = formatValue(changeInfo.newValue, 30);\n\t\t\t\tif (info.listenerCount > 0) {\n\t\t\t\t\tthis._handleChange({\n\t\t\t\t\t\tinstances: { [info.instanceId]: { formattedValue: info.lastValue } }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void {\n\t\tconst declarationId = this._getDeclarationId('autorun', location);\n\t\tconst info: IAutorunInfo = {\n\t\t\tdeclarationId,\n\t\t\tinstanceId: this._instanceId++,\n\t\t\tupdateCount: 0,\n\t\t\tchangedObservables: new Set(),\n\t\t};\n\t\tthis._instanceInfos.set(autorun, info);\n\t\tthis._aliveInstances.set(info.instanceId, autorun);\n\t\tif (info) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tinstanceId: info.instanceId,\n\t\t\t\t\t\tdeclarationId: info.declarationId,\n\t\t\t\t\t\trunCount: 0,\n\t\t\t\t\t\ttype: 'autorun',\n\t\t\t\t\t\tname: autorun.debugName,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tthis._handleChange({\n\t\t\tinstances: { [info.instanceId]: null }\n\t\t});\n\t\tthis._instanceInfos.delete(autorun);\n\t\tthis._aliveInstances.delete(info.instanceId);\n\t}\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tinfo.changedObservables.add(observable);\n\t}\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\n\t}\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tconst info = this._getAutorunInfo(autorun);\n\t\tif (!info) { return; }\n\n\t\tinfo.changedObservables.clear();\n\t\tinfo.updateCount++;\n\t\tthis._handleChange({\n\t\t\tinstances: { [info.instanceId]: { runCount: info.updateCount } }\n\t\t});\n\t}\n\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tconst info = this._getObservableInfo(derived);\n\t\tif (info) {\n\t\t\tinfo.changedObservables.add(observable);\n\t\t}\n\t}\n\t_handleDerivedRecomputed(observable: Derived<any>, changeInfo: IChangeInformation): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tconst formattedValue = formatValue(changeInfo.newValue, 30);\n\t\tinfo.updateCount++;\n\t\tinfo.changedObservables.clear();\n\n\t\tinfo.lastValue = formattedValue;\n\t\tif (info.listenerCount > 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: { [info.instanceId]: { formattedValue: formattedValue, recomputationCount: info.updateCount } }\n\t\t\t});\n\t\t}\n\t}\n\thandleDerivedCleared(observable: Derived<any>): void {\n\t\tconst info = this._getObservableInfo(observable);\n\t\tif (!info) { return; }\n\n\t\tinfo.lastValue = undefined;\n\t\tinfo.changedObservables.clear();\n\t\tif (info.listenerCount > 0) {\n\t\t\tthis._handleChange({\n\t\t\t\tinstances: {\n\t\t\t\t\t[info.instanceId]: {\n\t\t\t\t\t\tformattedValue: undefined,\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tthis._activeTransactions.add(transaction);\n\t}\n\thandleEndTransaction(transaction: TransactionImpl): void {\n\t\tthis._activeTransactions.delete(transaction);\n\t}\n}\n"]}