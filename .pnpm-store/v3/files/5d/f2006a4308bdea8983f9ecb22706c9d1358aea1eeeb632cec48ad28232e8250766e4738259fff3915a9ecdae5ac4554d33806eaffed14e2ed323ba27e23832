{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/viewParts/rulersGpu/rulersGpu.ts","vs/editor/browser/viewParts/rulersGpu/rulersGpu.ts"],"names":[],"mappings":"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","file":"rulersGpu.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewPart } from '../../view/viewPart.js';\nimport { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { ViewGpuContext } from '../../gpu/viewGpuContext.js';\nimport { IObjectCollectionBufferEntry } from '../../gpu/objectCollectionBuffer.js';\nimport { RectangleRenderer, RectangleRendererEntrySpec } from '../../gpu/rectangleRenderer.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { editorRuler } from '../../../common/core/editorColorRegistry.js';\nimport { autorun, type IReader } from '../../../../base/common/observable.js';\n\n/**\n * Rulers are vertical lines that appear at certain columns in the editor. There can be >= 0 rulers\n * at a time.\n */\nexport class RulersGpu extends ViewPart {\n\n\tprivate readonly _gpuShapes: IObjectCollectionBufferEntry<RectangleRendererEntrySpec>[] = [];\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tprivate readonly _viewGpuContext: ViewGpuContext\n\t) {\n\t\tsuper(context);\n\t\tthis._register(autorun(reader => this._updateEntries(reader)));\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tthis._updateEntries(undefined);\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\t// Nothing to read\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\t// Rendering is handled by RectangleRenderer\n\t}\n\n\tprivate _updateEntries(reader: IReader | undefined) {\n\t\tconst options = this._context.configuration.options;\n\t\tconst rulers = options.get(EditorOption.rulers);\n\t\tconst typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tconst devicePixelRatio = this._viewGpuContext.devicePixelRatio.read(reader);\n\t\tfor (let i = 0, len = rulers.length; i < len; i++) {\n\t\t\tconst ruler = rulers[i];\n\t\t\tconst shape = this._gpuShapes[i];\n\t\t\tconst color = ruler.color ? Color.fromHex(ruler.color) : this._context.theme.getColor(editorRuler) ?? Color.white;\n\t\t\tconst rulerData: Parameters<RectangleRenderer['register']> = [\n\t\t\t\truler.column * typicalHalfwidthCharacterWidth * devicePixelRatio,\n\t\t\t\t0,\n\t\t\t\tMath.max(1, Math.ceil(devicePixelRatio)),\n\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\tcolor.rgba.r / 255,\n\t\t\t\tcolor.rgba.g / 255,\n\t\t\t\tcolor.rgba.b / 255,\n\t\t\t\tcolor.rgba.a,\n\t\t\t];\n\t\t\tif (!shape) {\n\t\t\t\tthis._gpuShapes[i] = this._viewGpuContext.rectangleRenderer.register(...rulerData);\n\t\t\t} else {\n\t\t\t\tshape.setRaw(rulerData);\n\t\t\t}\n\t\t}\n\t\twhile (this._gpuShapes.length > rulers.length) {\n\t\t\tthis._gpuShapes.splice(-1, 1)[0].dispose();\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewPart } from '../../view/viewPart.js';\nimport { RenderingContext, RestrictedRenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { ViewGpuContext } from '../../gpu/viewGpuContext.js';\nimport { IObjectCollectionBufferEntry } from '../../gpu/objectCollectionBuffer.js';\nimport { RectangleRenderer, RectangleRendererEntrySpec } from '../../gpu/rectangleRenderer.js';\nimport { Color } from '../../../../base/common/color.js';\nimport { editorRuler } from '../../../common/core/editorColorRegistry.js';\nimport { autorun, type IReader } from '../../../../base/common/observable.js';\n\n/**\n * Rulers are vertical lines that appear at certain columns in the editor. There can be >= 0 rulers\n * at a time.\n */\nexport class RulersGpu extends ViewPart {\n\n\tprivate readonly _gpuShapes: IObjectCollectionBufferEntry<RectangleRendererEntrySpec>[] = [];\n\n\tconstructor(\n\t\tcontext: ViewContext,\n\t\tprivate readonly _viewGpuContext: ViewGpuContext\n\t) {\n\t\tsuper(context);\n\t\tthis._register(autorun(reader => this._updateEntries(reader)));\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tthis._updateEntries(undefined);\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\t// Nothing to read\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\t// Rendering is handled by RectangleRenderer\n\t}\n\n\tprivate _updateEntries(reader: IReader | undefined) {\n\t\tconst options = this._context.configuration.options;\n\t\tconst rulers = options.get(EditorOption.rulers);\n\t\tconst typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tconst devicePixelRatio = this._viewGpuContext.devicePixelRatio.read(reader);\n\t\tfor (let i = 0, len = rulers.length; i < len; i++) {\n\t\t\tconst ruler = rulers[i];\n\t\t\tconst shape = this._gpuShapes[i];\n\t\t\tconst color = ruler.color ? Color.fromHex(ruler.color) : this._context.theme.getColor(editorRuler) ?? Color.white;\n\t\t\tconst rulerData: Parameters<RectangleRenderer['register']> = [\n\t\t\t\truler.column * typicalHalfwidthCharacterWidth * devicePixelRatio,\n\t\t\t\t0,\n\t\t\t\tMath.max(1, Math.ceil(devicePixelRatio)),\n\t\t\t\tNumber.MAX_SAFE_INTEGER,\n\t\t\t\tcolor.rgba.r / 255,\n\t\t\t\tcolor.rgba.g / 255,\n\t\t\t\tcolor.rgba.b / 255,\n\t\t\t\tcolor.rgba.a,\n\t\t\t];\n\t\t\tif (!shape) {\n\t\t\t\tthis._gpuShapes[i] = this._viewGpuContext.rectangleRenderer.register(...rulerData);\n\t\t\t} else {\n\t\t\t\tshape.setRaw(rulerData);\n\t\t\t}\n\t\t}\n\t\twhile (this._gpuShapes.length > rulers.length) {\n\t\t\tthis._gpuShapes.splice(-1, 1)[0].dispose();\n\t\t}\n\t}\n}\n"]}