{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.ts"],"names":[],"mappings":"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","file":"copyPasteContribution.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { IJSONSchema, SchemaToType } from '../../../../base/common/jsonSchema.js';\nimport { KeyCode, KeyMod } from '../../../../base/common/keyCodes.js';\nimport * as nls from '../../../../nls.js';\nimport { KeybindingWeight } from '../../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorAction, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { CopyPasteController, PastePreference, changePasteTypeCommandId, pasteWidgetVisibleCtx } from './copyPasteController.js';\nimport { DefaultPasteProvidersFeature, DefaultTextPasteOrDropEditProvider } from './defaultProviders.js';\n\nexport const pasteAsCommandId = 'editor.action.pasteAs';\n\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, EditorContributionInstantiation.Eager); // eager because it listens to events on the container dom node of the editor\nregisterEditorFeature(DefaultPasteProvidersFeature);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changePasteTypeCommandId,\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\treturn CopyPasteController.get(editor)?.changePasteType();\n\t}\n});\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.hidePasteWidget',\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tCopyPasteController.get(editor)?.clearWidgets();\n\t}\n});\n\nregisterEditorAction(class PasteAsAction extends EditorAction {\n\tprivate static readonly argsSchema = {\n\t\toneOf: [\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['kind'],\n\t\t\t\tproperties: {\n\t\t\t\t\tkind: {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('pasteAs.kind', \"The kind of the paste edit to try pasting with.\\nIf there are multiple edits for this kind, the editor will show a picker. If there are no edits of this kind, the editor will show an error message.\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'object',\n\t\t\t\trequired: ['preferences'],\n\t\t\t\tproperties: {\n\t\t\t\t\tpreferences: {\n\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\tdescription: nls.localize('pasteAs.preferences', \"List of preferred paste edit kind to try applying.\\nThe first edit matching the preferences will be applied.\"),\n\t\t\t\t\t\titems: { type: 'string' }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t}\n\t\t]\n\t} as const satisfies IJSONSchema;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: pasteAsCommandId,\n\t\t\tlabel: nls.localize2('pasteAs', \"Paste As...\"),\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tmetadata: {\n\t\t\t\tdescription: 'Paste as',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: PasteAsAction.argsSchema\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor, args?: SchemaToType<typeof PasteAsAction.argsSchema>) {\n\t\tlet preference: PastePreference | undefined;\n\t\tif (args) {\n\t\t\tif ('kind' in args) {\n\t\t\t\tpreference = { only: new HierarchicalKind(args.kind) };\n\t\t\t} else if ('preferences' in args) {\n\t\t\t\tpreference = { preferences: args.preferences.map(kind => new HierarchicalKind(kind)) };\n\t\t\t}\n\t\t}\n\t\treturn CopyPasteController.get(editor)?.pasteAs(preference);\n\t}\n});\n\nregisterEditorAction(class extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAsText',\n\t\t\tlabel: nls.localize2('pasteAsText', \"Paste as Text\"),\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\treturn CopyPasteController.get(editor)?.pasteAs({ providerId: DefaultTextPasteOrDropEditProvider.id });\n\t}\n});\n\nexport type PreferredPasteConfiguration = string;\n"]}