{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/encodedTokenAttributes.ts","vs/editor/common/encodedTokenAttributes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AA6FhG;GACG;AACH,MAAM,OAAO,aAAa;IAElB,MAAM,CAAC,aAAa,CAAC,QAAgB;QAC3C,OAAO,CAAC,QAAQ,2CAAiC,CAAC,6CAAqC,CAAC;IACzF,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,QAAgB;QAC1C,OAAO,CAAC,QAAQ,2CAAiC,CAAC,6CAAqC,CAAC;IACzF,CAAC;IAEM,MAAM,CAAC,wBAAwB,CAAC,QAAgB;QACtD,OAAO,CAAC,QAAQ,mDAAwC,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,QAAgB;QAC1C,OAAO,CAAC,QAAQ,6CAAiC,CAAC,8CAAqC,CAAC;IACzF,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,QAAgB;QAC3C,OAAO,CAAC,QAAQ,gDAAiC,CAAC,8CAAqC,CAAC;IACzF,CAAC;IAEM,MAAM,CAAC,aAAa,CAAC,QAAgB;QAC3C,OAAO,CAAC,QAAQ,kDAAiC,CAAC,8CAAqC,CAAC;IACzF,CAAC;IAEM,MAAM,CAAC,wBAAwB,CAAC,QAAgB;QACtD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,SAAS,GAAG,KAAK,GAAG,UAAU,CAAC;QAEnC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAC9C,IAAI,SAAS,2BAAmB,EAAE,CAAC;YAClC,SAAS,IAAI,OAAO,CAAC;QACtB,CAAC;QACD,IAAI,SAAS,yBAAiB,EAAE,CAAC;YAChC,SAAS,IAAI,OAAO,CAAC;QACtB,CAAC;QACD,IAAI,SAAS,8BAAsB,EAAE,CAAC;YACrC,SAAS,IAAI,OAAO,CAAC;QACtB,CAAC;QACD,IAAI,SAAS,kCAA0B,EAAE,CAAC;YACzC,SAAS,IAAI,OAAO,CAAC;QACtB,CAAC;QAED,OAAO,SAAS,CAAC;IAClB,CAAC;IAEM,MAAM,CAAC,0BAA0B,CAAC,QAAgB,EAAE,QAAkB;QAC5E,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE9C,IAAI,MAAM,GAAG,UAAU,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC;QAC/C,IAAI,SAAS,2BAAmB,EAAE,CAAC;YAClC,MAAM,IAAI,qBAAqB,CAAC;QACjC,CAAC;QACD,IAAI,SAAS,yBAAiB,EAAE,CAAC;YAChC,MAAM,IAAI,oBAAoB,CAAC;QAChC,CAAC;QACD,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,SAAS,8BAAsB,EAAE,CAAC;YACrC,cAAc,IAAI,YAAY,CAAC;QAChC,CAAC;QACD,IAAI,SAAS,kCAA0B,EAAE,CAAC;YACzC,cAAc,IAAI,eAAe,CAAC;QACnC,CAAC;QACD,IAAI,cAAc,EAAE,CAAC;YACpB,MAAM,IAAI,mBAAmB,cAAc,GAAG,CAAC;QAEhD,CAAC;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,MAAM,CAAC,2BAA2B,CAAC,QAAgB;QACzD,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE9C,OAAO;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,OAAO,CAAC,SAAS,2BAAmB,CAAC;YAC7C,IAAI,EAAE,OAAO,CAAC,SAAS,yBAAiB,CAAC;YACzC,SAAS,EAAE,OAAO,CAAC,SAAS,8BAAsB,CAAC;YACnD,aAAa,EAAE,OAAO,CAAC,SAAS,kCAA0B,CAAC;SAC3D,CAAC;IACH,CAAC;CACD","file":"encodedTokenAttributes.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (8 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK /*            */ = 0b00000000_00000000_00000000_11111111,\n\tTOKEN_TYPE_MASK /*            */ = 0b00000000_00000000_00000011_00000000,\n\tBALANCED_BRACKETS_MASK /*     */ = 0b00000000_00000000_00000100_00000000,\n\tFONT_STYLE_MASK /*            */ = 0b00000000_00000000_01111000_00000000,\n\tFOREGROUND_MASK /*            */ = 0b00000000_11111111_10000000_00000000,\n\tBACKGROUND_MASK /*            */ = 0b11111111_00000000_00000000_00000000,\n\n\tITALIC_MASK /*                */ = 0b00000000_00000000_00001000_00000000,\n\tBOLD_MASK /*                  */ = 0b00000000_00000000_00010000_00000000,\n\tUNDERLINE_MASK /*             */ = 0b00000000_00000000_00100000_00000000,\n\tSTRIKETHROUGH_MASK /*         */ = 0b00000000_00000000_01000000_00000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC /*        */ = 0b00000000_00000000_00000000_00000001,\n\tSEMANTIC_USE_BOLD /*          */ = 0b00000000_00000000_00000000_00000010,\n\tSEMANTIC_USE_UNDERLINE  /*    */ = 0b00000000_00000000_00000000_00000100,\n\tSEMANTIC_USE_STRIKETHROUGH /* */ = 0b00000000_00000000_00000000_00001000,\n\tSEMANTIC_USE_FOREGROUND /*    */ = 0b00000000_00000000_00000000_00010000,\n\tSEMANTIC_USE_BACKGROUND /*    */ = 0b00000000_00000000_00000000_00100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (8 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK /*            */ = 0b00000000_00000000_00000000_11111111,\n\tTOKEN_TYPE_MASK /*            */ = 0b00000000_00000000_00000011_00000000,\n\tBALANCED_BRACKETS_MASK /*     */ = 0b00000000_00000000_00000100_00000000,\n\tFONT_STYLE_MASK /*            */ = 0b00000000_00000000_01111000_00000000,\n\tFOREGROUND_MASK /*            */ = 0b00000000_11111111_10000000_00000000,\n\tBACKGROUND_MASK /*            */ = 0b11111111_00000000_00000000_00000000,\n\n\tITALIC_MASK /*                */ = 0b00000000_00000000_00001000_00000000,\n\tBOLD_MASK /*                  */ = 0b00000000_00000000_00010000_00000000,\n\tUNDERLINE_MASK /*             */ = 0b00000000_00000000_00100000_00000000,\n\tSTRIKETHROUGH_MASK /*         */ = 0b00000000_00000000_01000000_00000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC /*        */ = 0b00000000_00000000_00000000_00000001,\n\tSEMANTIC_USE_BOLD /*          */ = 0b00000000_00000000_00000000_00000010,\n\tSEMANTIC_USE_UNDERLINE  /*    */ = 0b00000000_00000000_00000000_00000100,\n\tSEMANTIC_USE_STRIKETHROUGH /* */ = 0b00000000_00000000_00000000_00001000,\n\tSEMANTIC_USE_FOREGROUND /*    */ = 0b00000000_00000000_00000000_00010000,\n\tSEMANTIC_USE_BACKGROUND /*    */ = 0b00000000_00000000_00000000_00100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n"]}