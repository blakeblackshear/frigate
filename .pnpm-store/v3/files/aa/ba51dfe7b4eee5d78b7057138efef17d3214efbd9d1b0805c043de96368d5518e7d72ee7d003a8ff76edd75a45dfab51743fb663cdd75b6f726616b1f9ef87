{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/hotReloadHelpers.ts","vs/base/common/hotReloadHelpers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,MAAM,gBAAgB,CAAC;AAC9E,OAAO,EAAE,eAAe,EAA6C,yBAAyB,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAEzI,MAAM,UAAU,uBAAuB,CAAI,KAAQ,EAAE,MAA2B;IAC/E,2BAA2B,CAAC,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;IAC7C,OAAO,KAAK,CAAC;AACd,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,MAAa,EAAE,MAA2B;IACrF,IAAI,kBAAkB,EAAE,EAAE,CAAC;QAC1B,MAAM,CAAC,GAAG,yBAAyB,CAClC,QAAQ,EACR,KAAK,CAAC,EAAE,CAAC,wBAAwB,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE;YACpD,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnE,OAAO,SAAS,CAAC;YAClB,CAAC;YACD,OAAO,CAAC,WAAW,EAAE,EAAE;gBACtB,KAAK,CAAC,SAAS,CAAC,CAAC;gBACjB,OAAO,IAAI,CAAC;YACb,CAAC,CAAC;QACH,CAAC,CAAC,CACF,CAAC;QACF,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChB,CAAC;AACF,CAAC;AAED,MAAM,OAAO,GAAG,IAAI,GAAG,EAAwC,CAAC;AAEhE,MAAM,UAAU,cAAc,CAAI,KAAQ;IACzC,IAAI,CAAC,kBAAkB,EAAE,EAAE,CAAC;QAC3B,OAAO,eAAe,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,EAAE,GAAI,KAAa,CAAC,IAAI,CAAC;IAE/B,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACf,QAAQ,GAAG,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC3B,CAAC;SAAM,CAAC;QACP,UAAU,CAAC,GAAG,EAAE;YACf,QAAS,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACjC,CAAC,EAAE,CAAC,CAAC,CAAC;IACP,CAAC;IACD,OAAO,QAA0B,CAAC;AACnC,CAAC","file":"hotReloadHelpers.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isHotReloadEnabled, registerHotReloadHandler } from './hotReload.js';\nimport { constObservable, IObservable, IReader, ISettableObservable, observableSignalFromEvent, observableValue } from './observable.js';\n\nexport function readHotReloadableExport<T>(value: T, reader: IReader | undefined): T {\n\tobserveHotReloadableExports([value], reader);\n\treturn value;\n}\n\nexport function observeHotReloadableExports(values: any[], reader: IReader | undefined): void {\n\tif (isHotReloadEnabled()) {\n\t\tconst o = observableSignalFromEvent(\n\t\t\t'reload',\n\t\t\tevent => registerHotReloadHandler(({ oldExports }) => {\n\t\t\t\tif (![...Object.values(oldExports)].some(v => values.includes(v))) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn (_newExports) => {\n\t\t\t\t\tevent(undefined);\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t\to.read(reader);\n\t}\n}\n\nconst classes = new Map<string, ISettableObservable<unknown>>();\n\nexport function createHotClass<T>(clazz: T): IObservable<T> {\n\tif (!isHotReloadEnabled()) {\n\t\treturn constObservable(clazz);\n\t}\n\n\tconst id = (clazz as any).name;\n\n\tlet existing = classes.get(id);\n\tif (!existing) {\n\t\texisting = observableValue(id, clazz);\n\t\tclasses.set(id, existing);\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\texisting!.set(clazz, undefined);\n\t\t}, 0);\n\t}\n\treturn existing as IObservable<T>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isHotReloadEnabled, registerHotReloadHandler } from './hotReload.js';\nimport { constObservable, IObservable, IReader, ISettableObservable, observableSignalFromEvent, observableValue } from './observable.js';\n\nexport function readHotReloadableExport<T>(value: T, reader: IReader | undefined): T {\n\tobserveHotReloadableExports([value], reader);\n\treturn value;\n}\n\nexport function observeHotReloadableExports(values: any[], reader: IReader | undefined): void {\n\tif (isHotReloadEnabled()) {\n\t\tconst o = observableSignalFromEvent(\n\t\t\t'reload',\n\t\t\tevent => registerHotReloadHandler(({ oldExports }) => {\n\t\t\t\tif (![...Object.values(oldExports)].some(v => values.includes(v))) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn (_newExports) => {\n\t\t\t\t\tevent(undefined);\n\t\t\t\t\treturn true;\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t\to.read(reader);\n\t}\n}\n\nconst classes = new Map<string, ISettableObservable<unknown>>();\n\nexport function createHotClass<T>(clazz: T): IObservable<T> {\n\tif (!isHotReloadEnabled()) {\n\t\treturn constObservable(clazz);\n\t}\n\n\tconst id = (clazz as any).name;\n\n\tlet existing = classes.get(id);\n\tif (!existing) {\n\t\texisting = observableValue(id, clazz);\n\t\tclasses.set(id, existing);\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\texisting!.set(clazz, undefined);\n\t\t}, 0);\n\t}\n\treturn existing as IObservable<T>;\n}\n"]}