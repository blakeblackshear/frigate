{"version":3,"sources":["vs/editor/common/editorContextKeys.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,gDAAgD,CAAC;AAE/E,MAAM,KAAW,iBAAiB,CAmFjC;AAnFD,WAAiB,iBAAiB;IAEpB,mCAAiB,GAAG,IAAI,aAAa,CAAU,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC9F;;;OAGG;IACU,iCAAe,GAAG,IAAI,aAAa,CAAU,iBAAiB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAiB,EAAE,wDAAwD,CAAC,CAAC,CAAC;IAC/K;;OAEG;IACU,uBAAK,GAAG,IAAI,aAAa,CAAU,aAAa,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAa,EAAE,qFAAqF,CAAC,CAAC,CAAC;IAE1L;;OAEG;IACU,gCAAc,GAAG,IAAI,aAAa,CAAU,gBAAgB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAgB,EAAE,uEAAuE,CAAC,CAAC,CAAC;IAE9K,0BAAQ,GAAG,IAAI,aAAa,CAAU,gBAAgB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAgB,EAAE,iCAAiC,CAAC,CAAC,CAAC;IAClI,8BAAY,GAAG,IAAI,aAAa,CAAU,cAAc,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAc,EAAE,sCAAsC,CAAC,CAAC,CAAC;IACvI,sCAAoB,GAAG,IAAI,aAAa,CAAU,sBAAsB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAsB,EAAE,gDAAgD,CAAC,CAAC,CAAC;IACzK,6CAA2B,GAAG,IAAI,aAAa,CAAU,6BAA6B,EAAE,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6B,EAAE,sDAAsD,CAAC,CAAC,CAAC;IACxM,4BAAU,GAAG,IAAI,aAAa,CAAU,sBAAsB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAsB,EAAE,qCAAqC,CAAC,CAAC,CAAC;IACpJ,oCAAkB,GAAG,IAAI,aAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAoB,EAAE,uDAAuD,CAAC,CAAC,CAAC;IAC1K,6CAA2B,GAAG,IAAI,aAAa,CAAU,6BAA6B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6B,EAAE,+CAA+C,CAAC,CAAC,CAAC;IAC7L,mEAAiD,GAAG,IAAI,aAAa,CAAU,mDAAmD,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAmD,EAAE,0EAA0E,CAAC,CAAC,CAAC;IAC1R,sCAAoB,GAAG,IAAI,aAAa,CAAU,sBAAsB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAsB,EAAE,+BAA+B,CAAC,CAAC,CAAC;IAExJ,4CAA0B,GAAG,IAAI,aAAa,CAAU,4BAA4B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA4B,EAAE,iDAAiD,CAAC,CAAC,CAAC;IAC5L,4CAA0B,GAAG,IAAI,aAAa,CAAU,4BAA4B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA4B,EAAE,iDAAiD,CAAC,CAAC,CAAC;IAC5L,uCAAqB,GAAG,IAAI,aAAa,CAAS,uBAAuB,EAAE,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAuB,EAAE,kCAAkC,CAAC,CAAC,CAAC;IAC1J,uCAAqB,GAAG,IAAI,aAAa,CAAS,uBAAuB,EAAE,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAuB,EAAE,kCAAkC,CAAC,CAAC,CAAC;IAE1J,iCAAe,GAAG,IAAI,aAAa,CAAU,uBAAuB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAuB,EAAE,6CAA6C,CAAC,CAAC,CAAC;IACnK,0BAAQ,GAAG,kBAAA,QAAQ,CAAC,SAAS,EAAE,CAAC;IAChC,sCAAoB,GAAG,IAAI,aAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAoB,EAAE,sCAAsC,CAAC,CAAC,CAAC;IAC3J,uCAAqB,GAAG,kBAAA,oBAAoB,CAAC,SAAS,EAAE,CAAC;IACzD,uCAAqB,GAAG,IAAI,aAAa,CAAU,6BAA6B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6B,EAAE,4CAA4C,CAAC,CAAC,CAAC;IACpL,oCAAkB,GAAG,kBAAA,qBAAqB,CAAC,SAAS,EAAE,CAAC;IACvD,+BAAa,GAAG,IAAI,aAAa,CAAU,qBAAqB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAqB,EAAE,iDAAiD,CAAC,CAAC,CAAC;IACjK,qCAAmB,GAAG,kBAAA,aAAa,CAAC,SAAS,EAAE,CAAC;IAChD,oCAAkB,GAAG,IAAI,aAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACnF,yBAAO,GAAG,IAAI,aAAa,CAAU,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7D,yBAAO,GAAG,IAAI,aAAa,CAAU,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAE7D,8BAAY,GAAG,IAAI,aAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAoB,EAAE,qCAAqC,CAAC,CAAC,CAAC;IAClJ,8BAAY,GAAG,IAAI,aAAa,CAAU,oBAAoB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAoB,EAAE,qCAAqC,CAAC,CAAC,CAAC;IAElJ,qCAAmB,GAAG,IAAI,aAAa,CAAU,qBAAqB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAqB,EAAE,sCAAsC,CAAC,CAAC,CAAC;IAC5J,qCAAmB,GAAG,IAAI,aAAa,CAAU,qBAAqB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAqB,EAAE,sCAAsC,CAAC,CAAC,CAAC;IAE5J,8CAA4B,GAAG,IAAI,aAAa,CAAU,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA8B,EAAE,gDAAgD,CAAC,CAAC,CAAC;IACjM,8CAA4B,GAAG,IAAI,aAAa,CAAU,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA8B,EAAE,gDAAgD,CAAC,CAAC,CAAC;IAC9M;;;OAGG;IACU,mCAAiB,GAAG,IAAI,aAAa,CAAU,mBAAmB,EAAE,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAmB,EAAE,gEAAgE,CAAC,CAAC,CAAC;IACpL,sCAAoB,GAAG,kBAAA,iBAAiB,CAAC,SAAS,EAAE,CAAC;IAElE,uBAAuB;IACV,4BAAU,GAAG,IAAI,aAAa,CAAS,cAAc,EAAE,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAc,EAAE,uCAAuC,CAAC,CAAC,CAAC;IAClI,2CAAyB,GAAG,IAAI,aAAa,CAAU,iCAAiC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAiC,EAAE,mDAAmD,CAAC,CAAC,CAAC;IACvM,wCAAsB,GAAG,IAAI,aAAa,CAAU,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA8B,EAAE,gDAAgD,CAAC,CAAC,CAAC;IAC3L,qCAAmB,GAAG,IAAI,aAAa,CAAU,2BAA2B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA2B,EAAE,6CAA6C,CAAC,CAAC,CAAC;IAC/K,uCAAqB,GAAG,IAAI,aAAa,CAAU,6BAA6B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6B,EAAE,8CAA8C,CAAC,CAAC,CAAC;IACtL,wCAAsB,GAAG,IAAI,aAAa,CAAU,8BAA8B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA8B,EAAE,+CAA+C,CAAC,CAAC,CAAC;IAC1L,2CAAyB,GAAG,IAAI,aAAa,CAAU,iCAAiC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAiC,EAAE,mDAAmD,CAAC,CAAC,CAAC;IACvM,2CAAyB,GAAG,IAAI,aAAa,CAAU,iCAAiC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAiC,EAAE,mDAAmD,CAAC,CAAC,CAAC;IACvM,kCAAgB,GAAG,IAAI,aAAa,CAAU,wBAAwB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAwB,EAAE,yCAAyC,CAAC,CAAC,CAAC;IAClK,8CAA4B,GAAG,IAAI,aAAa,CAAU,oCAAoC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAoC,EAAE,sDAAsD,CAAC,CAAC,CAAC;IACnN,2CAAyB,GAAG,IAAI,aAAa,CAAU,iCAAiC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAiC,EAAE,mDAAmD,CAAC,CAAC,CAAC;IACvM,sCAAoB,GAAG,IAAI,aAAa,CAAU,4BAA4B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA4B,EAAE,6CAA6C,CAAC,CAAC,CAAC;IAClL,mCAAiB,GAAG,IAAI,aAAa,CAAU,yBAAyB,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAyB,EAAE,0CAA0C,CAAC,CAAC,CAAC;IACtK,0CAAwB,GAAG,IAAI,aAAa,CAAU,gCAAgC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAgC,EAAE,kDAAkD,CAAC,CAAC,CAAC;IACnM,uCAAqB,GAAG,IAAI,aAAa,CAAU,6BAA6B,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6B,EAAE,iDAAiD,CAAC,CAAC,CAAC;IAEtM,mCAAmC;IACtB,+CAA6B,GAAG,IAAI,aAAa,CAAU,qCAAqC,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAqC,EAAE,uDAAuD,CAAC,CAAC,CAAC;IACvN,wDAAsC,GAAG,IAAI,aAAa,CAAU,8CAA8C,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA8C,EAAE,iEAAiE,CAAC,CAAC,CAAC;IAC5P,uDAAqC,GAAG,IAAI,aAAa,CAAU,6CAA6C,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAA6C,EAAE,+DAA+D,CAAC,CAAC,CAAC;IACvP,gEAA8C,GAAG,IAAI,aAAa,CAAU,sDAAsD,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAsD,EAAE,yEAAyE,CAAC,CAAC,CAAC;AAE1S,CAAC,EAnFgB,iBAAiB,KAAjB,iBAAiB,QAmFjC","file":"editorContextKeys.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from '../../nls.js';\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\n\nexport namespace EditorContextKeys {\n\n\texport const editorSimpleInput = new RawContextKey<boolean>('editorSimpleInput', false, true);\n\t/**\n\t * A context key that is set when the editor's text has focus (cursor is blinking).\n\t * Is false when focus is in simple editor widgets (repl input, scm commit input).\n\t */\n\texport const editorTextFocus = new RawContextKey<boolean>('editorTextFocus', false, nls.localize('editorTextFocus', \"Whether the editor text has focus (cursor is blinking)\"));\n\t/**\n\t * A context key that is set when the editor's text or an editor's widget has focus.\n\t */\n\texport const focus = new RawContextKey<boolean>('editorFocus', false, nls.localize('editorFocus', \"Whether the editor or an editor widget has focus (e.g. focus is in the find widget)\"));\n\n\t/**\n\t * A context key that is set when any editor input has focus (regular editor, repl input...).\n\t */\n\texport const textInputFocus = new RawContextKey<boolean>('textInputFocus', false, nls.localize('textInputFocus', \"Whether an editor or a rich text input has focus (cursor is blinking)\"));\n\n\texport const readOnly = new RawContextKey<boolean>('editorReadonly', false, nls.localize('editorReadonly', \"Whether the editor is read-only\"));\n\texport const inDiffEditor = new RawContextKey<boolean>('inDiffEditor', false, nls.localize('inDiffEditor', \"Whether the context is a diff editor\"));\n\texport const isEmbeddedDiffEditor = new RawContextKey<boolean>('isEmbeddedDiffEditor', false, nls.localize('isEmbeddedDiffEditor', \"Whether the context is an embedded diff editor\"));\n\texport const multiDiffEditorAllCollapsed = new RawContextKey<boolean>('multiDiffEditorAllCollapsed', undefined, nls.localize('multiDiffEditorAllCollapsed', \"Whether all files in multi diff editor are collapsed\"));\n\texport const hasChanges = new RawContextKey<boolean>('diffEditorHasChanges', false, nls.localize('diffEditorHasChanges', \"Whether the diff editor has changes\"));\n\texport const comparingMovedCode = new RawContextKey<boolean>('comparingMovedCode', false, nls.localize('comparingMovedCode', \"Whether a moved code block is selected for comparison\"));\n\texport const accessibleDiffViewerVisible = new RawContextKey<boolean>('accessibleDiffViewerVisible', false, nls.localize('accessibleDiffViewerVisible', \"Whether the accessible diff viewer is visible\"));\n\texport const diffEditorRenderSideBySideInlineBreakpointReached = new RawContextKey<boolean>('diffEditorRenderSideBySideInlineBreakpointReached', false, nls.localize('diffEditorRenderSideBySideInlineBreakpointReached', \"Whether the diff editor render side by side inline breakpoint is reached\"));\n\texport const diffEditorInlineMode = new RawContextKey<boolean>('diffEditorInlineMode', false, nls.localize('diffEditorInlineMode', \"Whether inline mode is active\"));\n\n\texport const diffEditorOriginalWritable = new RawContextKey<boolean>('diffEditorOriginalWritable', false, nls.localize('diffEditorOriginalWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorModifiedWritable = new RawContextKey<boolean>('diffEditorModifiedWritable', false, nls.localize('diffEditorModifiedWritable', \"Whether modified is writable in the diff editor\"));\n\texport const diffEditorOriginalUri = new RawContextKey<string>('diffEditorOriginalUri', '', nls.localize('diffEditorOriginalUri', \"The uri of the original document\"));\n\texport const diffEditorModifiedUri = new RawContextKey<string>('diffEditorModifiedUri', '', nls.localize('diffEditorModifiedUri', \"The uri of the modified document\"));\n\n\texport const columnSelection = new RawContextKey<boolean>('editorColumnSelection', false, nls.localize('editorColumnSelection', \"Whether `editor.columnSelection` is enabled\"));\n\texport const writable = readOnly.toNegated();\n\texport const hasNonEmptySelection = new RawContextKey<boolean>('editorHasSelection', false, nls.localize('editorHasSelection', \"Whether the editor has text selected\"));\n\texport const hasOnlyEmptySelection = hasNonEmptySelection.toNegated();\n\texport const hasMultipleSelections = new RawContextKey<boolean>('editorHasMultipleSelections', false, nls.localize('editorHasMultipleSelections', \"Whether the editor has multiple selections\"));\n\texport const hasSingleSelection = hasMultipleSelections.toNegated();\n\texport const tabMovesFocus = new RawContextKey<boolean>('editorTabMovesFocus', false, nls.localize('editorTabMovesFocus', \"Whether `Tab` will move focus out of the editor\"));\n\texport const tabDoesNotMoveFocus = tabMovesFocus.toNegated();\n\texport const isInEmbeddedEditor = new RawContextKey<boolean>('isInEmbeddedEditor', false, true);\n\texport const canUndo = new RawContextKey<boolean>('canUndo', false, true);\n\texport const canRedo = new RawContextKey<boolean>('canRedo', false, true);\n\n\texport const hoverVisible = new RawContextKey<boolean>('editorHoverVisible', false, nls.localize('editorHoverVisible', \"Whether the editor hover is visible\"));\n\texport const hoverFocused = new RawContextKey<boolean>('editorHoverFocused', false, nls.localize('editorHoverFocused', \"Whether the editor hover is focused\"));\n\n\texport const stickyScrollFocused = new RawContextKey<boolean>('stickyScrollFocused', false, nls.localize('stickyScrollFocused', \"Whether the sticky scroll is focused\"));\n\texport const stickyScrollVisible = new RawContextKey<boolean>('stickyScrollVisible', false, nls.localize('stickyScrollVisible', \"Whether the sticky scroll is visible\"));\n\n\texport const standaloneColorPickerVisible = new RawContextKey<boolean>('standaloneColorPickerVisible', false, nls.localize('standaloneColorPickerVisible', \"Whether the standalone color picker is visible\"));\n\texport const standaloneColorPickerFocused = new RawContextKey<boolean>('standaloneColorPickerFocused', false, nls.localize('standaloneColorPickerFocused', \"Whether the standalone color picker is focused\"));\n\t/**\n\t * A context key that is set when an editor is part of a larger editor, like notebooks or\n\t * (future) a diff editor\n\t */\n\texport const inCompositeEditor = new RawContextKey<boolean>('inCompositeEditor', undefined, nls.localize('inCompositeEditor', \"Whether the editor is part of a larger editor (e.g. notebooks)\"));\n\texport const notInCompositeEditor = inCompositeEditor.toNegated();\n\n\t// -- mode context keys\n\texport const languageId = new RawContextKey<string>('editorLangId', '', nls.localize('editorLangId', \"The language identifier of the editor\"));\n\texport const hasCompletionItemProvider = new RawContextKey<boolean>('editorHasCompletionItemProvider', false, nls.localize('editorHasCompletionItemProvider', \"Whether the editor has a completion item provider\"));\n\texport const hasCodeActionsProvider = new RawContextKey<boolean>('editorHasCodeActionsProvider', false, nls.localize('editorHasCodeActionsProvider', \"Whether the editor has a code actions provider\"));\n\texport const hasCodeLensProvider = new RawContextKey<boolean>('editorHasCodeLensProvider', false, nls.localize('editorHasCodeLensProvider', \"Whether the editor has a code lens provider\"));\n\texport const hasDefinitionProvider = new RawContextKey<boolean>('editorHasDefinitionProvider', false, nls.localize('editorHasDefinitionProvider', \"Whether the editor has a definition provider\"));\n\texport const hasDeclarationProvider = new RawContextKey<boolean>('editorHasDeclarationProvider', false, nls.localize('editorHasDeclarationProvider', \"Whether the editor has a declaration provider\"));\n\texport const hasImplementationProvider = new RawContextKey<boolean>('editorHasImplementationProvider', false, nls.localize('editorHasImplementationProvider', \"Whether the editor has an implementation provider\"));\n\texport const hasTypeDefinitionProvider = new RawContextKey<boolean>('editorHasTypeDefinitionProvider', false, nls.localize('editorHasTypeDefinitionProvider', \"Whether the editor has a type definition provider\"));\n\texport const hasHoverProvider = new RawContextKey<boolean>('editorHasHoverProvider', false, nls.localize('editorHasHoverProvider', \"Whether the editor has a hover provider\"));\n\texport const hasDocumentHighlightProvider = new RawContextKey<boolean>('editorHasDocumentHighlightProvider', false, nls.localize('editorHasDocumentHighlightProvider', \"Whether the editor has a document highlight provider\"));\n\texport const hasDocumentSymbolProvider = new RawContextKey<boolean>('editorHasDocumentSymbolProvider', false, nls.localize('editorHasDocumentSymbolProvider', \"Whether the editor has a document symbol provider\"));\n\texport const hasReferenceProvider = new RawContextKey<boolean>('editorHasReferenceProvider', false, nls.localize('editorHasReferenceProvider', \"Whether the editor has a reference provider\"));\n\texport const hasRenameProvider = new RawContextKey<boolean>('editorHasRenameProvider', false, nls.localize('editorHasRenameProvider', \"Whether the editor has a rename provider\"));\n\texport const hasSignatureHelpProvider = new RawContextKey<boolean>('editorHasSignatureHelpProvider', false, nls.localize('editorHasSignatureHelpProvider', \"Whether the editor has a signature help provider\"));\n\texport const hasInlayHintsProvider = new RawContextKey<boolean>('editorHasInlayHintsProvider', false, nls.localize('editorHasInlayHintsProvider', \"Whether the editor has an inline hints provider\"));\n\n\t// -- mode context keys: formatting\n\texport const hasDocumentFormattingProvider = new RawContextKey<boolean>('editorHasDocumentFormattingProvider', false, nls.localize('editorHasDocumentFormattingProvider', \"Whether the editor has a document formatting provider\"));\n\texport const hasDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasDocumentSelectionFormattingProvider', false, nls.localize('editorHasDocumentSelectionFormattingProvider', \"Whether the editor has a document selection formatting provider\"));\n\texport const hasMultipleDocumentFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentFormattingProvider', false, nls.localize('editorHasMultipleDocumentFormattingProvider', \"Whether the editor has multiple document formatting providers\"));\n\texport const hasMultipleDocumentSelectionFormattingProvider = new RawContextKey<boolean>('editorHasMultipleDocumentSelectionFormattingProvider', false, nls.localize('editorHasMultipleDocumentSelectionFormattingProvider', \"Whether the editor has multiple document selection formatting providers\"));\n\n}\n"]}