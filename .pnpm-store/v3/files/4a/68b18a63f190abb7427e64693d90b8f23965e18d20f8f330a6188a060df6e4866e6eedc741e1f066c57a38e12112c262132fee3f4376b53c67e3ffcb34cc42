{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/logging/debugger/debuggerRpc.ts","vs/base/common/observableInternal/logging/debugger/debuggerRpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAwC,wBAAwB,EAAiB,MAAM,UAAU,CAAC;AAEzG,MAAM,UAAU,oBAAoB,CACnC,SAAyB,EACzB,YAA+B;IAE/B,MAAM,CAAC,GAAG,UAA8B,CAAC;IAEzC,IAAI,mBAAmB,GAAc,EAAE,CAAC;IACxC,IAAI,OAAO,GAAsB,SAAS,CAAC;IAE3C,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,oCAAoC,CAAC;QACjE,gBAAgB,EAAE,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,OAAO,EAAE,CAAC;gBACb,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAChC,CAAC;iBAAM,CAAC;gBACP,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,CAAC;QACF,CAAC;KACD,CAAC,CAAC;IAEH,IAAI,SAAS,GAA4B,SAAS,CAAC;IAEnD,CAAC,CAAC,CAAC,gCAAgC,IAAI,CAAC,CAAC,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE;QACvG,SAAS,GAAG,YAAY,EAAE,CAAC;QAC3B,OAAO,GAAG,IAAI,CAAC;QACf,KAAK,MAAM,CAAC,IAAI,mBAAmB,EAAE,CAAC;YACrC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC;QACD,mBAAmB,GAAG,EAAE,CAAC;QACzB,OAAO,OAAO,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO,wBAAwB,CAAC,YAAY,CAAI,OAAO,EAAE,GAAG,EAAE;QAC7D,IAAI,CAAC,SAAS,EAAE,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QAAC,CAAC;QACrD,OAAO,SAAS,CAAC;IAClB,CAAC,CAAC,CAAC;AACJ,CAAC;AAUD,SAAS,oCAAoC,CAAC,IAAW;IACxD,IAAI,CAA8B,CAAC;IACnC,MAAM,OAAO,GAAmB,CAAC,OAAO,EAAE,EAAE;QAC3C,CAAC,GAAG,OAAO,CAAC;QACZ,OAAO;YACN,gBAAgB,EAAE,IAAI,CAAC,EAAE;gBACxB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAC7B,CAAC;YACD,WAAW,EAAE,IAAI,CAAC,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;YAClC,CAAC;SACD,CAAC;IACH,CAAC,CAAC;IACF,OAAO;QACN,OAAO,EAAE,OAAO;QAChB,OAAO,EAAE;YACR,aAAa,EAAE,CAAC,IAAS,EAAE,EAAE;gBAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;oBAClC,OAAO,CAAC,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,CAAC;qBAAM,CAAC;oBACP,OAAO,CAAC,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpC,CAAC;YACF,CAAC;SACD;KACD,CAAC;AACH,CAAC","file":"debuggerRpc.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChannelFactory, IChannelHandler, API, SimpleTypedRpcConnection, MakeSideAsync } from './rpc.js';\n\nexport function registerDebugChannel<T extends { channelId: string } & API>(\n\tchannelId: T['channelId'],\n\tcreateClient: () => T['client'],\n): SimpleTypedRpcConnection<MakeSideAsync<T['host']>> {\n\tconst g = globalThis as any as GlobalObj;\n\n\tlet queuedNotifications: unknown[] = [];\n\tlet curHost: IHost | undefined = undefined;\n\n\tconst { channel, handler } = createChannelFactoryFromDebugChannel({\n\t\tsendNotification: (data) => {\n\t\t\tif (curHost) {\n\t\t\t\tcurHost.sendNotification(data);\n\t\t\t} else {\n\t\t\t\tqueuedNotifications.push(data);\n\t\t\t}\n\t\t},\n\t});\n\n\tlet curClient: T['client'] | undefined = undefined;\n\n\t(g.$$debugValueEditor_debugChannels ?? (g.$$debugValueEditor_debugChannels = {}))[channelId] = (host) => {\n\t\tcurClient = createClient();\n\t\tcurHost = host;\n\t\tfor (const n of queuedNotifications) {\n\t\t\thost.sendNotification(n);\n\t\t}\n\t\tqueuedNotifications = [];\n\t\treturn handler;\n\t};\n\n\treturn SimpleTypedRpcConnection.createClient<T>(channel, () => {\n\t\tif (!curClient) { throw new Error('Not supported'); }\n\t\treturn curClient;\n\t});\n}\n\ninterface GlobalObj {\n\t$$debugValueEditor_debugChannels: Record<string, (host: IHost) => { handleRequest: (data: unknown) => unknown }>;\n}\n\ninterface IHost {\n\tsendNotification: (data: unknown) => void;\n}\n\nfunction createChannelFactoryFromDebugChannel(host: IHost): { channel: ChannelFactory; handler: { handleRequest: (data: unknown) => unknown } } {\n\tlet h: IChannelHandler | undefined;\n\tconst channel: ChannelFactory = (handler) => {\n\t\th = handler;\n\t\treturn {\n\t\t\tsendNotification: data => {\n\t\t\t\thost.sendNotification(data);\n\t\t\t},\n\t\t\tsendRequest: data => {\n\t\t\t\tthrow new Error('not supported');\n\t\t\t},\n\t\t};\n\t};\n\treturn {\n\t\tchannel: channel,\n\t\thandler: {\n\t\t\thandleRequest: (data: any) => {\n\t\t\t\tif (data.type === 'notification') {\n\t\t\t\t\treturn h?.handleNotification(data.data);\n\t\t\t\t} else {\n\t\t\t\t\treturn h?.handleRequest(data.data);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChannelFactory, IChannelHandler, API, SimpleTypedRpcConnection, MakeSideAsync } from './rpc.js';\n\nexport function registerDebugChannel<T extends { channelId: string } & API>(\n\tchannelId: T['channelId'],\n\tcreateClient: () => T['client'],\n): SimpleTypedRpcConnection<MakeSideAsync<T['host']>> {\n\tconst g = globalThis as any as GlobalObj;\n\n\tlet queuedNotifications: unknown[] = [];\n\tlet curHost: IHost | undefined = undefined;\n\n\tconst { channel, handler } = createChannelFactoryFromDebugChannel({\n\t\tsendNotification: (data) => {\n\t\t\tif (curHost) {\n\t\t\t\tcurHost.sendNotification(data);\n\t\t\t} else {\n\t\t\t\tqueuedNotifications.push(data);\n\t\t\t}\n\t\t},\n\t});\n\n\tlet curClient: T['client'] | undefined = undefined;\n\n\t(g.$$debugValueEditor_debugChannels ?? (g.$$debugValueEditor_debugChannels = {}))[channelId] = (host) => {\n\t\tcurClient = createClient();\n\t\tcurHost = host;\n\t\tfor (const n of queuedNotifications) {\n\t\t\thost.sendNotification(n);\n\t\t}\n\t\tqueuedNotifications = [];\n\t\treturn handler;\n\t};\n\n\treturn SimpleTypedRpcConnection.createClient<T>(channel, () => {\n\t\tif (!curClient) { throw new Error('Not supported'); }\n\t\treturn curClient;\n\t});\n}\n\ninterface GlobalObj {\n\t$$debugValueEditor_debugChannels: Record<string, (host: IHost) => { handleRequest: (data: unknown) => unknown }>;\n}\n\ninterface IHost {\n\tsendNotification: (data: unknown) => void;\n}\n\nfunction createChannelFactoryFromDebugChannel(host: IHost): { channel: ChannelFactory; handler: { handleRequest: (data: unknown) => unknown } } {\n\tlet h: IChannelHandler | undefined;\n\tconst channel: ChannelFactory = (handler) => {\n\t\th = handler;\n\t\treturn {\n\t\t\tsendNotification: data => {\n\t\t\t\thost.sendNotification(data);\n\t\t\t},\n\t\t\tsendRequest: data => {\n\t\t\t\tthrow new Error('not supported');\n\t\t\t},\n\t\t};\n\t};\n\treturn {\n\t\tchannel: channel,\n\t\thandler: {\n\t\t\thandleRequest: (data: any) => {\n\t\t\t\tif (data.type === 'notification') {\n\t\t\t\t\treturn h?.handleNotification(data.data);\n\t\t\t\t} else {\n\t\t\t\t\treturn h?.handleRequest(data.data);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n}\n"]}