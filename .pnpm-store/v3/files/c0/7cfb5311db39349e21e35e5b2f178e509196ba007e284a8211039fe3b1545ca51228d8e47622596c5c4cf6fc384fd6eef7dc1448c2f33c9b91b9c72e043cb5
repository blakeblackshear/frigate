{"version":3,"sources":["vs/editor/contrib/gpu/browser/gpuActions.ts"],"names":[],"mappings":"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","file":"gpuActions.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from '../../../../base/browser/dom.js';\nimport { VSBuffer } from '../../../../base/common/buffer.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { localize, localize2 } from '../../../../nls.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IFileService } from '../../../../platform/files/common/files.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { IQuickInputService } from '../../../../platform/quickinput/common/quickInput.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorAction, registerEditorAction, type ServicesAccessor } from '../../../browser/editorExtensions.js';\nimport { ensureNonNullable } from '../../../browser/gpu/gpuUtils.js';\nimport { GlyphRasterizer } from '../../../browser/gpu/raster/glyphRasterizer.js';\nimport { ViewGpuContext } from '../../../browser/gpu/viewGpuContext.js';\n\nclass DebugEditorGpuRendererAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.debugEditorGpuRenderer',\n\t\t\tlabel: localize2('gpuDebug.label', \"Developer: Debug Editor GPU Renderer\"),\n\t\t\t// TODO: Why doesn't `ContextKeyExpr.equals('config:editor.experimentalGpuAcceleration', 'on')` work?\n\t\t\tprecondition: ContextKeyExpr.true(),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst choice = await quickInputService.pick([\n\t\t\t{\n\t\t\t\tlabel: localize('logTextureAtlasStats.label', \"Log Texture Atlas Stats\"),\n\t\t\t\tid: 'logTextureAtlasStats',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('saveTextureAtlas.label', \"Save Texture Atlas\"),\n\t\t\t\tid: 'saveTextureAtlas',\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('drawGlyph.label', \"Draw Glyph\"),\n\t\t\t\tid: 'drawGlyph',\n\t\t\t},\n\t\t], { canPickMany: false });\n\t\tif (!choice) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (choice.id) {\n\t\t\tcase 'logTextureAtlasStats':\n\t\t\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\tif (!ViewGpuContext.atlas) {\n\t\t\t\t\t\tlogService.error('No texture atlas found');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst stats = atlas.getStats();\n\t\t\t\t\tlogService.info(['Texture atlas stats', ...stats].join('\\n\\n'));\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'saveTextureAtlas':\n\t\t\t\tinstantiationService.invokeFunction(async accessor => {\n\t\t\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length > 0) {\n\t\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\t\tconst promises = [];\n\t\t\t\t\t\tfor (const [layerIndex, page] of atlas.pages.entries()) {\n\t\t\t\t\t\t\tpromises.push(...[\n\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\tURI.joinPath(folders[0].uri, `textureAtlasPage${layerIndex}_actual.png`),\n\t\t\t\t\t\t\t\t\tVSBuffer.wrap(new Uint8Array(await (await page.source.convertToBlob()).arrayBuffer()))\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tfileService.writeFile(\n\t\t\t\t\t\t\t\t\tURI.joinPath(folders[0].uri, `textureAtlasPage${layerIndex}_usage.png`),\n\t\t\t\t\t\t\t\t\tVSBuffer.wrap(new Uint8Array(await (await page.getUsagePreview()).arrayBuffer()))\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.all(promises);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'drawGlyph':\n\t\t\t\tinstantiationService.invokeFunction(async accessor => {\n\t\t\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\t\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\n\t\t\t\t\tconst folders = workspaceContextService.getWorkspace().folders;\n\t\t\t\t\tif (folders.length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst atlas = ViewGpuContext.atlas;\n\t\t\t\t\tconst fontFamily = configurationService.getValue<string>('editor.fontFamily');\n\t\t\t\t\tconst fontSize = configurationService.getValue<number>('editor.fontSize');\n\t\t\t\t\tconst rasterizer = new GlyphRasterizer(fontSize, fontFamily, getActiveWindow().devicePixelRatio, ViewGpuContext.decorationStyleCache);\n\t\t\t\t\tlet chars = await quickInputService.input({\n\t\t\t\t\t\tprompt: 'Enter a character to draw (prefix with 0x for code point))'\n\t\t\t\t\t});\n\t\t\t\t\tif (!chars) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst codePoint = chars.match(/0x(?<codePoint>[0-9a-f]+)/i)?.groups?.codePoint;\n\t\t\t\t\tif (codePoint !== undefined) {\n\t\t\t\t\t\tchars = String.fromCodePoint(parseInt(codePoint, 16));\n\t\t\t\t\t}\n\t\t\t\t\tconst tokenMetadata = 0;\n\t\t\t\t\tconst charMetadata = 0;\n\t\t\t\t\tconst rasterizedGlyph = atlas.getGlyph(rasterizer, chars, tokenMetadata, charMetadata, 0);\n\t\t\t\t\tif (!rasterizedGlyph) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst imageData = atlas.pages[rasterizedGlyph.pageIndex].source.getContext('2d')?.getImageData(\n\t\t\t\t\t\trasterizedGlyph.x,\n\t\t\t\t\t\trasterizedGlyph.y,\n\t\t\t\t\t\trasterizedGlyph.w,\n\t\t\t\t\t\trasterizedGlyph.h\n\t\t\t\t\t);\n\t\t\t\t\tif (!imageData) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst canvas = new OffscreenCanvas(imageData.width, imageData.height);\n\t\t\t\t\tconst ctx = ensureNonNullable(canvas.getContext('2d'));\n\t\t\t\t\tctx.putImageData(imageData, 0, 0);\n\t\t\t\t\tconst blob = await canvas.convertToBlob({ type: 'image/png' });\n\t\t\t\t\tconst resource = URI.joinPath(folders[0].uri, `glyph_${chars}_${tokenMetadata}_${fontSize}px_${fontFamily.replaceAll(/[,\\\\\\/\\.'\\s]/g, '_')}.png`);\n\t\t\t\t\tawait fileService.writeFile(resource, VSBuffer.wrap(new Uint8Array(await blob.arrayBuffer())));\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nregisterEditorAction(DebugEditorGpuRendererAction);\n"]}