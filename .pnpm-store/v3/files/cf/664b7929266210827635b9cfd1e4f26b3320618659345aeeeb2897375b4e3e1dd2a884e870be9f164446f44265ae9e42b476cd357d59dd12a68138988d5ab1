{"version":3,"sources":["vs/editor/contrib/inlineCompletions/browser/controller/inlineCompletionContextKeys.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,aAAa,EAAE,MAAM,yDAAyD,CAAC;AACxF,OAAO,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACjD,OAAO,KAAK,GAAG,MAAM,uBAAuB,CAAC;AAE7C,MAAM,OAAgB,2BAA2B;aAEzB,4BAAuB,GAAG,IAAI,aAAa,CAAU,yBAAyB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAyB,EAAE,yCAAyC,CAAC,CAAC,CAAC;aACvK,mCAA8B,GAAG,IAAI,aAAa,CAAU,gCAAgC,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAgC,EAAE,sDAAsD,CAAC,CAAC,CAAC;aACzM,kDAA6C,GAAG,IAAI,aAAa,CAAU,+CAA+C,EAAE,IAAI,EAAE,QAAQ,CAAC,IAA+C,EAAE,sGAAsG,CAAC,CAAC,CAAC;aACrS,wBAAmB,GAAG,IAAI,aAAa,CAAsB,qCAAqC,EAAE,SAAS,EAAE,QAAQ,CAAC,IAAqB,EAAE,qEAAqE,CAAC,CAAC,CAAC;aAEvN,0BAAqB,GAAG,IAAI,aAAa,CAAsB,uBAAuB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAuB,EAAE,qCAAqC,CAAC,CAAC,CAAC;aAEzK,wBAAmB,GAAG,IAAI,aAAa,CAAsB,qBAAqB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAqB,EAAE,sCAAsC,CAAC,CAAC,CAAC;aACpK,iBAAY,GAAG,IAAI,aAAa,CAAsB,qBAAqB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAqB,EAAE,oCAAoC,CAAC,CAAC,CAAC;aAC3J,uBAAkB,GAAG,IAAI,aAAa,CAAsB,oBAAoB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAoB,EAAE,yCAAyC,CAAC,CAAC,CAAC;aACpK,sBAAiB,GAAG,IAAI,aAAa,CAAU,qBAAqB,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAmB,EAAE,mCAAmC,CAAC,CAAC,CAAC;aACjJ,8BAAyB,GAAG,IAAI,aAAa,CAAsB,2BAA2B,EAAE,KAAK,EAAE,QAAQ,CAAC,IAA2B,EAAE,4CAA4C,CAAC,CAAC,CAAC;aAC5L,8BAAyB,GAAG,IAAI,aAAa,CAAsB,2BAA2B,EAAE,KAAK,EAAE,QAAQ,CAAC,IAA2B,EAAE,4CAA4C,CAAC,CAAC,CAAC;aAE5L,+BAA0B,GAAG,IAAI,aAAa,CAAU,4BAA4B,EAAE,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,IAA4B,EAAE,oEAAoE,CAAC,CAAC,CAAC","file":"inlineCompletionContextKeys.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RawContextKey } from '../../../../../platform/contextkey/common/contextkey.js';\nimport { localize } from '../../../../../nls.js';\nimport * as nls from '../../../../../nls.js';\n\nexport abstract class InlineCompletionContextKeys {\n\n\tpublic static readonly inlineSuggestionVisible = new RawContextKey<boolean>('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\n\tpublic static readonly inlineSuggestionHasIndentation = new RawContextKey<boolean>('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\n\tpublic static readonly inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey<boolean>('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\n\tpublic static readonly suppressSuggestions = new RawContextKey<boolean | undefined>('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n\n\tpublic static readonly cursorBeforeGhostText = new RawContextKey<boolean | undefined>('cursorBeforeGhostText', false, localize('cursorBeforeGhostText', \"Whether the cursor is at ghost text\"));\n\n\tpublic static readonly cursorInIndentation = new RawContextKey<boolean | undefined>('cursorInIndentation', false, localize('cursorInIndentation', \"Whether the cursor is in indentation\"));\n\tpublic static readonly hasSelection = new RawContextKey<boolean | undefined>('editor.hasSelection', false, localize('editor.hasSelection', \"Whether the editor has a selection\"));\n\tpublic static readonly cursorAtInlineEdit = new RawContextKey<boolean | undefined>('cursorAtInlineEdit', false, localize('cursorAtInlineEdit', \"Whether the cursor is at an inline edit\"));\n\tpublic static readonly inlineEditVisible = new RawContextKey<boolean>('inlineEditIsVisible', false, localize('inlineEditVisible', \"Whether an inline edit is visible\"));\n\tpublic static readonly tabShouldJumpToInlineEdit = new RawContextKey<boolean | undefined>('tabShouldJumpToInlineEdit', false, localize('tabShouldJumpToInlineEdit', \"Whether tab should jump to an inline edit.\"));\n\tpublic static readonly tabShouldAcceptInlineEdit = new RawContextKey<boolean | undefined>('tabShouldAcceptInlineEdit', false, localize('tabShouldAcceptInlineEdit', \"Whether tab should accept the inline edit.\"));\n\n\tpublic static readonly inInlineEditsPreviewEditor = new RawContextKey<boolean>('inInlineEditsPreviewEditor', true, nls.localize('inInlineEditsPreviewEditor', \"Whether the current code editor is showing an inline edits preview\"));\n}\n"]}