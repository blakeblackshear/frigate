{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/multiDiffEditor/objectPool.ts","vs/editor/browser/widget/multiDiffEditor/objectPool.ts"],"names":[],"mappings":"AAMA,MAAM,OAAO,UAAU;IAKtB,YACkB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;QAL5B,YAAO,GAAG,IAAI,GAAG,EAAK,CAAC;QACvB,UAAK,GAAG,IAAI,GAAG,EAAK,CAAC;QACrB,cAAS,GAAG,IAAI,GAAG,EAAY,CAAC;IAI7C,CAAC;IAEE,YAAY,CAAC,IAAW;QAC9B,IAAI,GAAM,CAAC;QAEX,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YAC7B,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC/B,CAAC;aAAM,CAAC;YACP,MAAM,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1C,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;YACzF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAC9B,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,OAAO;YACN,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,GAAG,EAAE;gBACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;oBAC3B,GAAG,CAAC,OAAO,EAAE,CAAC;gBACf,CAAC;qBAAM,CAAC;oBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACvB,CAAC;YACF,CAAC;SACD,CAAC;IACH,CAAC;IAED,OAAO;QACN,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC9B,GAAG,CAAC,OAAO,EAAE,CAAC;QACf,CAAC;QACD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAChC,GAAG,CAAC,OAAO,EAAE,CAAC;QACf,CAAC;QACD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;CACD","file":"objectPool.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IDisposable, IReference } from '../../../../base/common/lifecycle.js';\n\nexport class ObjectPool<TData extends IObjectData, T extends IPooledObject<TData>> implements IDisposable {\n\tprivate readonly _unused = new Set<T>();\n\tprivate readonly _used = new Set<T>();\n\tprivate readonly _itemData = new Map<T, TData>();\n\n\tconstructor(\n\t\tprivate readonly _create: (data: TData) => T,\n\t) { }\n\n\tpublic getUnusedObj(data: TData): IReference<T> {\n\t\tlet obj: T;\n\n\t\tif (this._unused.size === 0) {\n\t\t\tobj = this._create(data);\n\t\t\tthis._itemData.set(obj, data);\n\t\t} else {\n\t\t\tconst values = [...this._unused.values()];\n\t\t\tobj = values.find(obj => this._itemData.get(obj)!.getId() === data.getId()) ?? values[0];\n\t\t\tthis._unused.delete(obj);\n\t\t\tthis._itemData.set(obj, data);\n\t\t\tobj.setData(data);\n\t\t}\n\t\tthis._used.add(obj);\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tdispose: () => {\n\t\t\t\tthis._used.delete(obj);\n\t\t\t\tif (this._unused.size > 5) {\n\t\t\t\t\tobj.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tthis._unused.add(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tfor (const obj of this._used) {\n\t\t\tobj.dispose();\n\t\t}\n\t\tfor (const obj of this._unused) {\n\t\t\tobj.dispose();\n\t\t}\n\t\tthis._used.clear();\n\t\tthis._unused.clear();\n\t}\n}\n\nexport interface IObjectData {\n\tgetId(): unknown;\n}\n\nexport interface IPooledObject<TData> extends IDisposable {\n\tsetData(data: TData): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { IDisposable, IReference } from '../../../../base/common/lifecycle.js';\n\nexport class ObjectPool<TData extends IObjectData, T extends IPooledObject<TData>> implements IDisposable {\n\tprivate readonly _unused = new Set<T>();\n\tprivate readonly _used = new Set<T>();\n\tprivate readonly _itemData = new Map<T, TData>();\n\n\tconstructor(\n\t\tprivate readonly _create: (data: TData) => T,\n\t) { }\n\n\tpublic getUnusedObj(data: TData): IReference<T> {\n\t\tlet obj: T;\n\n\t\tif (this._unused.size === 0) {\n\t\t\tobj = this._create(data);\n\t\t\tthis._itemData.set(obj, data);\n\t\t} else {\n\t\t\tconst values = [...this._unused.values()];\n\t\t\tobj = values.find(obj => this._itemData.get(obj)!.getId() === data.getId()) ?? values[0];\n\t\t\tthis._unused.delete(obj);\n\t\t\tthis._itemData.set(obj, data);\n\t\t\tobj.setData(data);\n\t\t}\n\t\tthis._used.add(obj);\n\t\treturn {\n\t\t\tobject: obj,\n\t\t\tdispose: () => {\n\t\t\t\tthis._used.delete(obj);\n\t\t\t\tif (this._unused.size > 5) {\n\t\t\t\t\tobj.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tthis._unused.add(obj);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tdispose(): void {\n\t\tfor (const obj of this._used) {\n\t\t\tobj.dispose();\n\t\t}\n\t\tfor (const obj of this._unused) {\n\t\t\tobj.dispose();\n\t\t}\n\t\tthis._used.clear();\n\t\tthis._unused.clear();\n\t}\n}\n\nexport interface IObjectData {\n\tgetId(): unknown;\n}\n\nexport interface IPooledObject<TData> extends IDisposable {\n\tsetData(data: TData): void;\n}\n"]}