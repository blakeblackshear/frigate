{"version":3,"sources":["vs/base/common/keybindingLabels.ts"],"names":[],"mappings":"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","file":"keybindingLabels.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Modifiers } from './keybindings.js';\nimport { OperatingSystem } from './platform.js';\nimport * as nls from '../../nls.js';\n\nexport interface ModifierLabels {\n\treadonly ctrlKey: string;\n\treadonly shiftKey: string;\n\treadonly altKey: string;\n\treadonly metaKey: string;\n\treadonly separator: string;\n}\n\nexport interface KeyLabelProvider<T extends Modifiers> {\n\t(keybinding: T): string | null;\n}\n\nexport class ModifierLabelProvider {\n\n\tpublic readonly modifierLabels: ModifierLabels[];\n\n\tconstructor(mac: ModifierLabels, windows: ModifierLabels, linux: ModifierLabels = windows) {\n\t\tthis.modifierLabels = [null!]; // index 0 will never me accessed.\n\t\tthis.modifierLabels[OperatingSystem.Macintosh] = mac;\n\t\tthis.modifierLabels[OperatingSystem.Windows] = windows;\n\t\tthis.modifierLabels[OperatingSystem.Linux] = linux;\n\t}\n\n\tpublic toLabel<T extends Modifiers>(OS: OperatingSystem, chords: readonly T[], keyLabelProvider: KeyLabelProvider<T>): string | null {\n\t\tif (chords.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tfor (let i = 0, len = chords.length; i < len; i++) {\n\t\t\tconst chord = chords[i];\n\t\t\tconst keyLabel = keyLabelProvider(chord);\n\t\t\tif (keyLabel === null) {\n\t\t\t\t// this keybinding cannot be expressed...\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresult[i] = _simpleAsString(chord, keyLabel, this.modifierLabels[OS]);\n\t\t}\n\t\treturn result.join(' ');\n\t}\n}\n\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\nexport const UILabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: '\\u2303',\n\t\tshiftKey: '⇧',\n\t\taltKey: '⌥',\n\t\tmetaKey: '⌘',\n\t\tseparator: '',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey', comment: ['This is the short form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey', comment: ['This is the short form for the Control key on the keyboard'] }, \"Ctrl\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey', comment: ['This is the short form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey', comment: ['This is the short form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey', comment: ['This is the short form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\nexport const AriaLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'optKey.long', comment: ['This is the long form for the Alt/Option key on the keyboard'] }, \"Option\"),\n\t\tmetaKey: nls.localize({ key: 'cmdKey.long', comment: ['This is the long form for the Command key on the keyboard'] }, \"Command\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'windowsKey.long', comment: ['This is the long form for the Windows key on the keyboard'] }, \"Windows\"),\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: nls.localize({ key: 'ctrlKey.long', comment: ['This is the long form for the Control key on the keyboard'] }, \"Control\"),\n\t\tshiftKey: nls.localize({ key: 'shiftKey.long', comment: ['This is the long form for the Shift key on the keyboard'] }, \"Shift\"),\n\t\taltKey: nls.localize({ key: 'altKey.long', comment: ['This is the long form for the Alt key on the keyboard'] }, \"Alt\"),\n\t\tmetaKey: nls.localize({ key: 'superKey.long', comment: ['This is the long form for the Super key on the keyboard'] }, \"Super\"),\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for Electron Accelerators.\n * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n */\nexport const ElectronAcceleratorLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'Ctrl',\n\t\tshiftKey: 'Shift',\n\t\taltKey: 'Alt',\n\t\tmetaKey: 'Super',\n\t\tseparator: '+',\n\t}\n);\n\n/**\n * A label provider that prints modifiers in a suitable format for user settings.\n */\nexport const UserSettingsLabelProvider = new ModifierLabelProvider(\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'cmd',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'win',\n\t\tseparator: '+',\n\t},\n\t{\n\t\tctrlKey: 'ctrl',\n\t\tshiftKey: 'shift',\n\t\taltKey: 'alt',\n\t\tmetaKey: 'meta',\n\t\tseparator: '+',\n\t}\n);\n\nfunction _simpleAsString(modifiers: Modifiers, key: string, labels: ModifierLabels): string {\n\tif (key === null) {\n\t\treturn '';\n\t}\n\n\tconst result: string[] = [];\n\n\t// translate modifier keys: Ctrl-Shift-Alt-Meta\n\tif (modifiers.ctrlKey) {\n\t\tresult.push(labels.ctrlKey);\n\t}\n\n\tif (modifiers.shiftKey) {\n\t\tresult.push(labels.shiftKey);\n\t}\n\n\tif (modifiers.altKey) {\n\t\tresult.push(labels.altKey);\n\t}\n\n\tif (modifiers.metaKey) {\n\t\tresult.push(labels.metaKey);\n\t}\n\n\t// the actual key\n\tif (key !== '') {\n\t\tresult.push(key);\n\t}\n\n\treturn result.join(labels.separator);\n}\n"]}