{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/model/singleTextEditHelpers.ts","vs/editor/contrib/inlineCompletions/browser/model/singleTextEditHelpers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,kBAAkB,EAAE,MAAM,uCAAuC,CAAC;AAC3E,OAAO,EAAE,KAAK,EAAE,MAAM,kCAAkC,CAAC;AACzD,OAAO,EAAE,UAAU,EAAE,MAAM,4CAA4C,CAAC;AACxE,OAAO,EAAE,eAAe,EAAE,MAAM,2CAA2C,CAAC;AAG5E,MAAM,UAAU,4BAA4B,CAAC,IAAqB,EAAE,KAAiB,EAAE,eAAuB;IAC7G,MAAM,UAAU,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IAC9F,IAAI,CAAC,UAAU,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACb,CAAC;IACD,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC1D,MAAM,cAAc,GAAG,KAAK,CAAC,eAAe,CAAC,UAAU,iCAAyB,CAAC;IACjF,MAAM,eAAe,GAAG,kBAAkB,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IAC3E,MAAM,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAC3H,MAAM,IAAI,GAAG,cAAc,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IACvD,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;IACtE,OAAO,IAAI,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACzC,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,IAAqB,EAAE,IAAqB;IAClF,kFAAkF;IAClF,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAChF,CAAC;AAED,SAAS,YAAY,CAAC,cAAqB,EAAE,aAAoB;IAChE,OAAO,aAAa,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;WAC7E,aAAa,CAAC,cAAc,EAAE,CAAC,eAAe,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC,CAAC;AACrF,CAAC","file":"singleTextEditHelpers.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { commonPrefixLength } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { TextLength } from '../../../../common/core/text/textLength.js';\nimport { TextReplacement } from '../../../../common/core/edits/textEdit.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\n\nexport function singleTextRemoveCommonPrefix(edit: TextReplacement, model: ITextModel, validModelRange?: Range): TextReplacement {\n\tconst modelRange = validModelRange ? edit.range.intersectRanges(validModelRange) : edit.range;\n\tif (!modelRange) {\n\t\treturn edit;\n\t}\n\tconst normalizedText = edit.text.replaceAll('\\r\\n', '\\n');\n\tconst valueToReplace = model.getValueInRange(modelRange, EndOfLinePreference.LF);\n\tconst commonPrefixLen = commonPrefixLength(valueToReplace, normalizedText);\n\tconst start = TextLength.ofText(valueToReplace.substring(0, commonPrefixLen)).addToPosition(edit.range.getStartPosition());\n\tconst text = normalizedText.substring(commonPrefixLen);\n\tconst range = Range.fromPositions(start, edit.range.getEndPosition());\n\treturn new TextReplacement(range, text);\n}\n\nexport function singleTextEditAugments(edit: TextReplacement, base: TextReplacement): boolean {\n\t// The augmented completion must replace the base range, but can replace even more\n\treturn edit.text.startsWith(base.text) && rangeExtends(edit.range, base.range);\n}\n\nfunction rangeExtends(extendingRange: Range, rangeToExtend: Range): boolean {\n\treturn rangeToExtend.getStartPosition().equals(extendingRange.getStartPosition())\n\t\t&& rangeToExtend.getEndPosition().isBeforeOrEqual(extendingRange.getEndPosition());\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { commonPrefixLength } from '../../../../../base/common/strings.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { TextLength } from '../../../../common/core/text/textLength.js';\nimport { TextReplacement } from '../../../../common/core/edits/textEdit.js';\nimport { EndOfLinePreference, ITextModel } from '../../../../common/model.js';\n\nexport function singleTextRemoveCommonPrefix(edit: TextReplacement, model: ITextModel, validModelRange?: Range): TextReplacement {\n\tconst modelRange = validModelRange ? edit.range.intersectRanges(validModelRange) : edit.range;\n\tif (!modelRange) {\n\t\treturn edit;\n\t}\n\tconst normalizedText = edit.text.replaceAll('\\r\\n', '\\n');\n\tconst valueToReplace = model.getValueInRange(modelRange, EndOfLinePreference.LF);\n\tconst commonPrefixLen = commonPrefixLength(valueToReplace, normalizedText);\n\tconst start = TextLength.ofText(valueToReplace.substring(0, commonPrefixLen)).addToPosition(edit.range.getStartPosition());\n\tconst text = normalizedText.substring(commonPrefixLen);\n\tconst range = Range.fromPositions(start, edit.range.getEndPosition());\n\treturn new TextReplacement(range, text);\n}\n\nexport function singleTextEditAugments(edit: TextReplacement, base: TextReplacement): boolean {\n\t// The augmented completion must replace the base range, but can replace even more\n\treturn edit.text.startsWith(base.text) && rangeExtends(edit.range, base.range);\n}\n\nfunction rangeExtends(extendingRange: Range, rangeToExtend: Range): boolean {\n\treturn rangeToExtend.getStartPosition().equals(extendingRange.getStartPosition())\n\t\t&& rangeToExtend.getEndPosition().isBeforeOrEqual(extendingRange.getEndPosition());\n}\n"]}