{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/ui/hover/hoverDelegate.ts","vs/base/browser/ui/hover/hoverDelegate.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"hoverDelegate.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverWidget, IManagedHoverContentOrFactory, IManagedHoverOptions } from './hover.js';\nimport { HoverPosition } from './hoverWidget.js';\nimport { IMarkdownString } from '../../../common/htmlContent.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\nexport interface IHoverDelegateTarget extends IDisposable {\n\treadonly targetElements: readonly HTMLElement[];\n\tx?: number;\n}\n\nexport interface IHoverDelegateOptions extends IManagedHoverOptions {\n\t/**\n\t * The content to display in the primary section of the hover. The type of text determines the\n\t * default `hideOnHover` behavior.\n\t */\n\tcontent: IMarkdownString | string | HTMLElement;\n\t/**\n\t * The target for the hover. This determines the position of the hover and it will only be\n\t * hidden when the mouse leaves both the hover and the target. A HTMLElement can be used for\n\t * simple cases and a IHoverDelegateTarget for more complex cases where multiple elements and/or a\n\t * dispose method is required.\n\t */\n\ttarget: IHoverDelegateTarget | HTMLElement;\n\t/**\n\t * The container to pass to {@link IContextViewProvider.showContextView} which renders the hover\n\t * in. This is particularly useful for more natural tab focusing behavior, where the hover is\n\t * created as the next tab index after the element being hovered and/or to workaround the\n\t * element's container hiding on `focusout`.\n\t */\n\tcontainer?: HTMLElement;\n\t/**\n\t * Options that defines where the hover is positioned.\n\t */\n\tposition?: {\n\t\t/**\n\t\t * Position of the hover. The default is to show above the target. This option will be ignored\n\t\t * if there is not enough room to layout the hover in the specified position, unless the\n\t\t * forcePosition option is set.\n\t\t */\n\t\thoverPosition?: HoverPosition;\n\t};\n\tappearance?: {\n\t\t/**\n\t\t * Whether to show the hover pointer\n\t\t */\n\t\tshowPointer?: boolean;\n\t\t/**\n\t\t * When {@link hideOnHover} is explicitly true or undefined and its auto value is detected to\n\t\t * hide, show a hint at the bottom of the hover explaining how to mouse over the widget. This\n\t\t * should be used in the cases where despite the hover having no interactive content, it's\n\t\t * likely the user may want to interact with it somehow.\n\t\t */\n\t\tshowHoverHint?: boolean;\n\t\t/**\n\t\t * Whether to skip the fade in animation, this should be used when hovering from one hover to\n\t\t * another in the same group so it looks like the hover is moving from one element to the other.\n\t\t */\n\t\tskipFadeInAnimation?: boolean;\n\t};\n}\n\nexport interface IHoverDelegate {\n\tshowHover(options: IHoverDelegateOptions, focus?: boolean): IHoverWidget | undefined;\n\tonDidHideHover?: () => void;\n\tdelay: number | ((content?: IManagedHoverContentOrFactory) => number);\n\tplacement?: 'mouse' | 'element';\n\tshowNativeHover?: boolean; // TODO@benibenj remove this, only temp fix for contextviews\n}\n\nexport interface IScopedHoverDelegate extends IHoverDelegate, IDisposable { }\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IHoverWidget, IManagedHoverContentOrFactory, IManagedHoverOptions } from './hover.js';\nimport { HoverPosition } from './hoverWidget.js';\nimport { IMarkdownString } from '../../../common/htmlContent.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\nexport interface IHoverDelegateTarget extends IDisposable {\n\treadonly targetElements: readonly HTMLElement[];\n\tx?: number;\n}\n\nexport interface IHoverDelegateOptions extends IManagedHoverOptions {\n\t/**\n\t * The content to display in the primary section of the hover. The type of text determines the\n\t * default `hideOnHover` behavior.\n\t */\n\tcontent: IMarkdownString | string | HTMLElement;\n\t/**\n\t * The target for the hover. This determines the position of the hover and it will only be\n\t * hidden when the mouse leaves both the hover and the target. A HTMLElement can be used for\n\t * simple cases and a IHoverDelegateTarget for more complex cases where multiple elements and/or a\n\t * dispose method is required.\n\t */\n\ttarget: IHoverDelegateTarget | HTMLElement;\n\t/**\n\t * The container to pass to {@link IContextViewProvider.showContextView} which renders the hover\n\t * in. This is particularly useful for more natural tab focusing behavior, where the hover is\n\t * created as the next tab index after the element being hovered and/or to workaround the\n\t * element's container hiding on `focusout`.\n\t */\n\tcontainer?: HTMLElement;\n\t/**\n\t * Options that defines where the hover is positioned.\n\t */\n\tposition?: {\n\t\t/**\n\t\t * Position of the hover. The default is to show above the target. This option will be ignored\n\t\t * if there is not enough room to layout the hover in the specified position, unless the\n\t\t * forcePosition option is set.\n\t\t */\n\t\thoverPosition?: HoverPosition;\n\t};\n\tappearance?: {\n\t\t/**\n\t\t * Whether to show the hover pointer\n\t\t */\n\t\tshowPointer?: boolean;\n\t\t/**\n\t\t * When {@link hideOnHover} is explicitly true or undefined and its auto value is detected to\n\t\t * hide, show a hint at the bottom of the hover explaining how to mouse over the widget. This\n\t\t * should be used in the cases where despite the hover having no interactive content, it's\n\t\t * likely the user may want to interact with it somehow.\n\t\t */\n\t\tshowHoverHint?: boolean;\n\t\t/**\n\t\t * Whether to skip the fade in animation, this should be used when hovering from one hover to\n\t\t * another in the same group so it looks like the hover is moving from one element to the other.\n\t\t */\n\t\tskipFadeInAnimation?: boolean;\n\t};\n}\n\nexport interface IHoverDelegate {\n\tshowHover(options: IHoverDelegateOptions, focus?: boolean): IHoverWidget | undefined;\n\tonDidHideHover?: () => void;\n\tdelay: number | ((content?: IManagedHoverContentOrFactory) => number);\n\tplacement?: 'mouse' | 'element';\n\tshowNativeHover?: boolean; // TODO@benibenj remove this, only temp fix for contextviews\n}\n\nexport interface IScopedHoverDelegate extends IHoverDelegate, IDisposable { }\n"]}