{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/model/tokens/abstractSyntaxTokenBackend.ts","vs/editor/common/model/tokens/abstractSyntaxTokenBackend.ts"],"names":[],"mappings":"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","file":"abstractSyntaxTokenBackend.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { LineRange } from '../../core/ranges/lineRange.js';\nimport { StandardTokenType } from '../../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../../languages.js';\nimport { IAttachedView } from '../../model.js';\nimport { TextModel } from '../textModel.js';\nimport { IModelContentChangedEvent, IModelTokensChangedEvent } from '../../textModelEvents.js';\nimport { BackgroundTokenizationState } from '../../tokenizationTextModelPart.js';\nimport { LineTokens } from '../../tokens/lineTokens.js';\nimport { derivedOpts, IObservable, ISettableObservable, observableSignal, observableValueOpts } from '../../../../base/common/observable.js';\nimport { equalsIfDefined, itemEquals, itemsEquals } from '../../../../base/common/equals.js';\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{ view: IAttachedView; state: AttachedViewState | undefined }>();\n\tpublic readonly onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\tprivate readonly _viewsChanged = observableSignal(this);\n\n\tpublic readonly visibleLineRanges: IObservable<readonly LineRange[]>;\n\n\tconstructor() {\n\t\tthis.visibleLineRanges = derivedOpts({\n\t\t\towner: this,\n\t\t\tequalsFn: itemsEquals(itemEquals())\n\t\t}, reader => {\n\t\t\tthis._viewsChanged.read(reader);\n\t\t\tconst ranges = LineRange.joinMany(\n\t\t\t\t[...this._views].map(view => view.state.read(reader)?.visibleLineRanges ?? [])\n\t\t\t);\n\t\t\treturn ranges;\n\t\t});\n\t}\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\tthis._viewsChanged.trigger(undefined);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t\tthis._viewsChanged.trigger(undefined);\n\t}\n}\n\n/**\n * @internal\n */\nexport class AttachedViewState {\n\tconstructor(\n\t\treadonly visibleLineRanges: readonly LineRange[],\n\t\treadonly stabilized: boolean,\n\t) { }\n\n\tpublic equals(other: AttachedViewState): boolean {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!equals(this.visibleLineRanges, other.visibleLineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.stabilized !== other.stabilized) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tprivate readonly _state: ISettableObservable<AttachedViewState | undefined>;\n\tpublic get state(): IObservable<AttachedViewState | undefined> { return this._state; }\n\n\tconstructor(\n\t\tprivate readonly handleStateChange: (state: AttachedViewState) => void\n\t) {\n\t\tthis._state = observableValueOpts<AttachedViewState | undefined>({ owner: this, equalsFn: equalsIfDefined((a, b) => a.equals(b)) }, undefined);\n\t}\n\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void {\n\t\tconst visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n\t\tconst state = new AttachedViewState(visibleLineRanges, stabilized);\n\t\tthis._state.set(state, undefined, undefined);\n\t\tthis.handleStateChange(state);\n\t}\n}\n\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: AttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractSyntaxTokenBackend extends Disposable {\n\tprotected abstract _backgroundTokenizationState: BackgroundTokenizationState;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected abstract readonly _onDidChangeBackgroundTokenizationState: Emitter<void>;\n\t/** @internal, should not be exposed by the text model! */\n\tpublic abstract readonly onDidChangeBackgroundTokenizationState: Event<void>;\n\n\tprotected readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract todo_resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;\n\n\tpublic abstract tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from '../../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../../base/common/async.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { LineRange } from '../../core/ranges/lineRange.js';\nimport { StandardTokenType } from '../../encodedTokenAttributes.js';\nimport { ILanguageIdCodec } from '../../languages.js';\nimport { IAttachedView } from '../../model.js';\nimport { TextModel } from '../textModel.js';\nimport { IModelContentChangedEvent, IModelTokensChangedEvent } from '../../textModelEvents.js';\nimport { BackgroundTokenizationState } from '../../tokenizationTextModelPart.js';\nimport { LineTokens } from '../../tokens/lineTokens.js';\nimport { derivedOpts, IObservable, ISettableObservable, observableSignal, observableValueOpts } from '../../../../base/common/observable.js';\nimport { equalsIfDefined, itemEquals, itemsEquals } from '../../../../base/common/equals.js';\n\n/**\n * @internal\n */\nexport class AttachedViews {\n\tprivate readonly _onDidChangeVisibleRanges = new Emitter<{ view: IAttachedView; state: AttachedViewState | undefined }>();\n\tpublic readonly onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n\n\tprivate readonly _views = new Set<AttachedViewImpl>();\n\tprivate readonly _viewsChanged = observableSignal(this);\n\n\tpublic readonly visibleLineRanges: IObservable<readonly LineRange[]>;\n\n\tconstructor() {\n\t\tthis.visibleLineRanges = derivedOpts({\n\t\t\towner: this,\n\t\t\tequalsFn: itemsEquals(itemEquals())\n\t\t}, reader => {\n\t\t\tthis._viewsChanged.read(reader);\n\t\t\tconst ranges = LineRange.joinMany(\n\t\t\t\t[...this._views].map(view => view.state.read(reader)?.visibleLineRanges ?? [])\n\t\t\t);\n\t\t\treturn ranges;\n\t\t});\n\t}\n\n\tpublic attachView(): IAttachedView {\n\t\tconst view = new AttachedViewImpl((state) => {\n\t\t\tthis._onDidChangeVisibleRanges.fire({ view, state });\n\t\t});\n\t\tthis._views.add(view);\n\t\tthis._viewsChanged.trigger(undefined);\n\t\treturn view;\n\t}\n\n\tpublic detachView(view: IAttachedView): void {\n\t\tthis._views.delete(view as AttachedViewImpl);\n\t\tthis._onDidChangeVisibleRanges.fire({ view, state: undefined });\n\t\tthis._viewsChanged.trigger(undefined);\n\t}\n}\n\n/**\n * @internal\n */\nexport class AttachedViewState {\n\tconstructor(\n\t\treadonly visibleLineRanges: readonly LineRange[],\n\t\treadonly stabilized: boolean,\n\t) { }\n\n\tpublic equals(other: AttachedViewState): boolean {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!equals(this.visibleLineRanges, other.visibleLineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.stabilized !== other.stabilized) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass AttachedViewImpl implements IAttachedView {\n\tprivate readonly _state: ISettableObservable<AttachedViewState | undefined>;\n\tpublic get state(): IObservable<AttachedViewState | undefined> { return this._state; }\n\n\tconstructor(\n\t\tprivate readonly handleStateChange: (state: AttachedViewState) => void\n\t) {\n\t\tthis._state = observableValueOpts<AttachedViewState | undefined>({ owner: this, equalsFn: equalsIfDefined((a, b) => a.equals(b)) }, undefined);\n\t}\n\n\tsetVisibleLines(visibleLines: { startLineNumber: number; endLineNumber: number }[], stabilized: boolean): void {\n\t\tconst visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n\t\tconst state = new AttachedViewState(visibleLineRanges, stabilized);\n\t\tthis._state.set(state, undefined, undefined);\n\t\tthis.handleStateChange(state);\n\t}\n}\n\n\nexport class AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: AttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n\nexport abstract class AbstractSyntaxTokenBackend extends Disposable {\n\tprotected abstract _backgroundTokenizationState: BackgroundTokenizationState;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprotected abstract readonly _onDidChangeBackgroundTokenizationState: Emitter<void>;\n\t/** @internal, should not be exposed by the text model! */\n\tpublic abstract readonly onDidChangeBackgroundTokenizationState: Event<void>;\n\n\tprotected readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tconstructor(\n\t\tprotected readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprotected readonly _textModel: TextModel,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic abstract todo_resetTokenization(fireTokenChangeEvent?: boolean): void;\n\n\tpublic abstract handleDidChangeAttached(): void;\n\n\tpublic abstract handleDidChangeContent(e: IModelContentChangedEvent): void;\n\n\tpublic abstract forceTokenization(lineNumber: number): void;\n\n\tpublic abstract hasAccurateTokensForLine(lineNumber: number): boolean;\n\n\tpublic abstract isCheapToTokenize(lineNumber: number): boolean;\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic abstract getLineTokens(lineNumber: number): LineTokens;\n\n\tpublic abstract getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType;\n\n\tpublic abstract tokenizeLinesAt(lineNumber: number, lines: string[]): LineTokens[] | null;\n\n\tpublic abstract get hasTokens(): boolean;\n}\n"]}