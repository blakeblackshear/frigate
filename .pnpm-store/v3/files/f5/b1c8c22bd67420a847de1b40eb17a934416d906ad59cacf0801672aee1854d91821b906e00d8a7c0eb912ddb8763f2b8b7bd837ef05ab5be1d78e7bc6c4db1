{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/hierarchicalKind.ts","vs/base/common/hierarchicalKind.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,MAAM,OAAO,gBAAgB;aACL,QAAG,GAAG,GAAG,CAAC;aAEV,SAAI,GAAG,IAAI,gBAAgB,CAAC,UAAU,CAAC,CAAC,GAAC,oCAAoC;aAC7E,UAAK,GAAG,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC;IAExD,YACiB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAC1B,CAAC;IAEE,MAAM,CAAC,KAAuB;QACpC,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;IACnC,CAAC;IAEM,QAAQ,CAAC,KAAuB;QACtC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC7G,CAAC;IAEM,UAAU,CAAC,KAAuB;QACxC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAEM,MAAM,CAAC,GAAG,KAAe;QAC/B,OAAO,IAAI,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;IACvG,CAAC","file":"hierarchicalKind.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class HierarchicalKind {\n\tpublic static readonly sep = '.';\n\n\tpublic static readonly None = new HierarchicalKind('@@none@@'); // Special kind that matches nothing\n\tpublic static readonly Empty = new HierarchicalKind('');\n\n\tconstructor(\n\t\tpublic readonly value: string\n\t) { }\n\n\tpublic equals(other: HierarchicalKind): boolean {\n\t\treturn this.value === other.value;\n\t}\n\n\tpublic contains(other: HierarchicalKind): boolean {\n\t\treturn this.equals(other) || this.value === '' || other.value.startsWith(this.value + HierarchicalKind.sep);\n\t}\n\n\tpublic intersects(other: HierarchicalKind): boolean {\n\t\treturn this.contains(other) || other.contains(this);\n\t}\n\n\tpublic append(...parts: string[]): HierarchicalKind {\n\t\treturn new HierarchicalKind((this.value ? [this.value, ...parts] : parts).join(HierarchicalKind.sep));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport class HierarchicalKind {\n\tpublic static readonly sep = '.';\n\n\tpublic static readonly None = new HierarchicalKind('@@none@@'); // Special kind that matches nothing\n\tpublic static readonly Empty = new HierarchicalKind('');\n\n\tconstructor(\n\t\tpublic readonly value: string\n\t) { }\n\n\tpublic equals(other: HierarchicalKind): boolean {\n\t\treturn this.value === other.value;\n\t}\n\n\tpublic contains(other: HierarchicalKind): boolean {\n\t\treturn this.equals(other) || this.value === '' || other.value.startsWith(this.value + HierarchicalKind.sep);\n\t}\n\n\tpublic intersects(other: HierarchicalKind): boolean {\n\t\treturn this.contains(other) || other.contains(this);\n\t}\n\n\tpublic append(...parts: string[]): HierarchicalKind {\n\t\treturn new HierarchicalKind((this.value ? [this.value, ...parts] : parts).join(HierarchicalKind.sep));\n\t}\n}\n"]}