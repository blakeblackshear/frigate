{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/renderLines.ts","vs/editor/browser/widget/diffEditor/components/diffEditorViewZones/renderLines.ts"],"names":[],"mappings":"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","file":"renderLines.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../../editorBrowser.js';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById } from '../../../../../common/config/editorOptions.js';\nimport { FontInfo } from '../../../../../common/config/fontInfo.js';\nimport { StringBuilder } from '../../../../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../../../../common/modelLineProjectionData.js';\nimport { IViewLineTokens, LineTokens } from '../../../../../common/tokens/lineTokens.js';\nimport { LineDecoration } from '../../../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../../../common/viewModel.js';\nimport { InlineDecoration } from '../../../../../common/viewModel/inlineDecorations.js';\n\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\n\nexport function renderLines(source: LineSource, options: RenderOptions, decorations: InlineDecoration[], domNode: HTMLElement, noExtra = false): RenderLinesResult {\n\tapplyFontInfo(domNode, options.fontInfo);\n\n\tconst hasCharChanges = (decorations.length > 0);\n\n\tconst sb = new StringBuilder(10000);\n\tlet maxCharsPerLine = 0;\n\tlet renderedLineCount = 0;\n\tconst viewLineCounts: number[] = [];\n\tfor (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n\t\tconst lineNumber = lineIndex + 1;\n\t\tconst lineTokens = source.lineTokens[lineIndex];\n\t\tconst lineBreakData = source.lineBreakData[lineIndex];\n\t\tconst actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n\n\t\tif (lineBreakData) {\n\t\t\tlet lastBreakOffset = 0;\n\t\t\tfor (const breakOffset of lineBreakData.breakOffsets) {\n\t\t\t\tconst viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n\t\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\t\trenderedLineCount,\n\t\t\t\t\tviewLineTokens,\n\t\t\t\t\tLineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset),\n\t\t\t\t\thasCharChanges,\n\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\toptions,\n\t\t\t\t\tsb,\n\t\t\t\t\tnoExtra,\n\t\t\t\t));\n\t\t\t\trenderedLineCount++;\n\t\t\t\tlastBreakOffset = breakOffset;\n\t\t\t}\n\t\t\tviewLineCounts.push(lineBreakData.breakOffsets.length);\n\t\t} else {\n\t\t\tviewLineCounts.push(1);\n\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\trenderedLineCount,\n\t\t\t\tlineTokens,\n\t\t\t\tactualDecorations,\n\t\t\t\thasCharChanges,\n\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\tsource.mightContainRTL,\n\t\t\t\toptions,\n\t\t\t\tsb,\n\t\t\t\tnoExtra,\n\t\t\t));\n\t\t\trenderedLineCount++;\n\t\t}\n\t}\n\tmaxCharsPerLine += options.scrollBeyondLastColumn;\n\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n\tconst minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n\n\treturn {\n\t\theightInLines: renderedLineCount,\n\t\tminWidthInPx,\n\t\tviewLineCounts,\n\t};\n}\n\n\nexport class LineSource {\n\tconstructor(\n\t\tpublic readonly lineTokens: LineTokens[],\n\t\tpublic readonly lineBreakData: (ModelLineProjectionData | null)[] = lineTokens.map(t => null),\n\t\tpublic readonly mightContainNonBasicASCII: boolean = true,\n\t\tpublic readonly mightContainRTL: boolean = true,\n\t) { }\n}\n\nexport class RenderOptions {\n\tpublic static fromEditor(editor: ICodeEditor): RenderOptions {\n\n\t\tconst modifiedEditorOptions = editor.getOptions();\n\t\tconst fontInfo = modifiedEditorOptions.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = modifiedEditorOptions.get(EditorOption.layoutInfo);\n\n\t\treturn new RenderOptions(\n\t\t\teditor.getModel()?.getOptions().tabSize || 0,\n\t\t\tfontInfo,\n\t\t\tmodifiedEditorOptions.get(EditorOption.disableMonospaceOptimizations),\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollBeyondLastColumn),\n\n\t\t\tmodifiedEditorOptions.get(EditorOption.lineHeight),\n\n\t\t\tlayoutInfo.decorationsWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.stopRenderingLineAfter),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderWhitespace),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderControlCharacters),\n\t\t\tmodifiedEditorOptions.get(EditorOption.fontLigatures),\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollbar).verticalScrollbarSize,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly fontInfo: FontInfo,\n\t\tpublic readonly disableMonospaceOptimizations: boolean,\n\t\tpublic readonly typicalHalfwidthCharacterWidth: number,\n\t\tpublic readonly scrollBeyondLastColumn: number,\n\t\tpublic readonly lineHeight: number,\n\t\tpublic readonly lineDecorationsWidth: number,\n\t\tpublic readonly stopRenderingLineAfter: number,\n\t\tpublic readonly renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t\tpublic readonly fontLigatures: FindComputedEditorOptionValueById<EditorOption.fontLigatures>,\n\t\tpublic readonly verticalScrollbarSize: number,\n\t\tpublic readonly setWidth = true,\n\t) { }\n\n\tpublic withSetWidth(setWidth: boolean): RenderOptions {\n\t\treturn new RenderOptions(\n\t\t\tthis.tabSize,\n\t\t\tthis.fontInfo,\n\t\t\tthis.disableMonospaceOptimizations,\n\t\t\tthis.typicalHalfwidthCharacterWidth,\n\t\t\tthis.scrollBeyondLastColumn,\n\t\t\tthis.lineHeight,\n\t\t\tthis.lineDecorationsWidth,\n\t\t\tthis.stopRenderingLineAfter,\n\t\t\tthis.renderWhitespace,\n\t\t\tthis.renderControlCharacters,\n\t\t\tthis.fontLigatures,\n\t\t\tthis.verticalScrollbarSize,\n\t\t\tsetWidth,\n\t\t);\n\t}\n\n\tpublic withScrollBeyondLastColumn(scrollBeyondLastColumn: number): RenderOptions {\n\t\treturn new RenderOptions(\n\t\t\tthis.tabSize,\n\t\t\tthis.fontInfo,\n\t\t\tthis.disableMonospaceOptimizations,\n\t\t\tthis.typicalHalfwidthCharacterWidth,\n\t\t\tscrollBeyondLastColumn,\n\t\t\tthis.lineHeight,\n\t\t\tthis.lineDecorationsWidth,\n\t\t\tthis.stopRenderingLineAfter,\n\t\t\tthis.renderWhitespace,\n\t\t\tthis.renderControlCharacters,\n\t\t\tthis.fontLigatures,\n\t\t\tthis.verticalScrollbarSize,\n\t\t\tthis.setWidth,\n\t\t);\n\t}\n}\n\nexport interface RenderLinesResult {\n\tminWidthInPx: number;\n\theightInLines: number;\n\tviewLineCounts: number[];\n}\n\nfunction renderOriginalLine(\n\tviewLineIdx: number,\n\tlineTokens: IViewLineTokens,\n\tdecorations: LineDecoration[],\n\thasCharChanges: boolean,\n\tmightContainNonBasicASCII: boolean,\n\tmightContainRTL: boolean,\n\toptions: RenderOptions,\n\tsb: StringBuilder,\n\tnoExtra: boolean,\n): number {\n\n\tsb.appendString('<div class=\"view-line');\n\tif (!noExtra && !hasCharChanges) {\n\t\t// No char changes\n\t\tsb.appendString(' char-delete');\n\t}\n\tsb.appendString('\" style=\"top:');\n\tsb.appendString(String(viewLineIdx * options.lineHeight));\n\tif (options.setWidth) {\n\t\tsb.appendString('px;width:1000000px;\">');\n\t} else {\n\t\tsb.appendString('px;\">');\n\t}\n\n\tconst lineContent = lineTokens.getLineContent();\n\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n\tconst containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n\tconst output = renderViewLine(new RenderLineInput(\n\t\t(options.fontInfo.isMonospace && !options.disableMonospaceOptimizations),\n\t\toptions.fontInfo.canUseHalfwidthRightwardsArrow,\n\t\tlineContent,\n\t\tfalse,\n\t\tisBasicASCII,\n\t\tcontainsRTL,\n\t\t0,\n\t\tlineTokens,\n\t\tdecorations,\n\t\toptions.tabSize,\n\t\t0,\n\t\toptions.fontInfo.spaceWidth,\n\t\toptions.fontInfo.middotWidth,\n\t\toptions.fontInfo.wsmiddotWidth,\n\t\toptions.stopRenderingLineAfter,\n\t\toptions.renderWhitespace,\n\t\toptions.renderControlCharacters,\n\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\tnull, // Send no selections, original line cannot be selected\n\t\tnull,\n\t\toptions.verticalScrollbarSize\n\t), sb);\n\n\tsb.appendString('</div>');\n\n\treturn output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from '../../../../../../base/browser/trustedTypes.js';\nimport { applyFontInfo } from '../../../../config/domFontInfo.js';\nimport { ICodeEditor } from '../../../../editorBrowser.js';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById } from '../../../../../common/config/editorOptions.js';\nimport { FontInfo } from '../../../../../common/config/fontInfo.js';\nimport { StringBuilder } from '../../../../../common/core/stringBuilder.js';\nimport { ModelLineProjectionData } from '../../../../../common/modelLineProjectionData.js';\nimport { IViewLineTokens, LineTokens } from '../../../../../common/tokens/lineTokens.js';\nimport { LineDecoration } from '../../../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../../../../common/viewModel.js';\nimport { InlineDecoration } from '../../../../../common/viewModel/inlineDecorations.js';\n\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\n\nexport function renderLines(source: LineSource, options: RenderOptions, decorations: InlineDecoration[], domNode: HTMLElement, noExtra = false): RenderLinesResult {\n\tapplyFontInfo(domNode, options.fontInfo);\n\n\tconst hasCharChanges = (decorations.length > 0);\n\n\tconst sb = new StringBuilder(10000);\n\tlet maxCharsPerLine = 0;\n\tlet renderedLineCount = 0;\n\tconst viewLineCounts: number[] = [];\n\tfor (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n\t\tconst lineNumber = lineIndex + 1;\n\t\tconst lineTokens = source.lineTokens[lineIndex];\n\t\tconst lineBreakData = source.lineBreakData[lineIndex];\n\t\tconst actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n\n\t\tif (lineBreakData) {\n\t\t\tlet lastBreakOffset = 0;\n\t\t\tfor (const breakOffset of lineBreakData.breakOffsets) {\n\t\t\t\tconst viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n\t\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\t\trenderedLineCount,\n\t\t\t\t\tviewLineTokens,\n\t\t\t\t\tLineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset),\n\t\t\t\t\thasCharChanges,\n\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\toptions,\n\t\t\t\t\tsb,\n\t\t\t\t\tnoExtra,\n\t\t\t\t));\n\t\t\t\trenderedLineCount++;\n\t\t\t\tlastBreakOffset = breakOffset;\n\t\t\t}\n\t\t\tviewLineCounts.push(lineBreakData.breakOffsets.length);\n\t\t} else {\n\t\t\tviewLineCounts.push(1);\n\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\trenderedLineCount,\n\t\t\t\tlineTokens,\n\t\t\t\tactualDecorations,\n\t\t\t\thasCharChanges,\n\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\tsource.mightContainRTL,\n\t\t\t\toptions,\n\t\t\t\tsb,\n\t\t\t\tnoExtra,\n\t\t\t));\n\t\t\trenderedLineCount++;\n\t\t}\n\t}\n\tmaxCharsPerLine += options.scrollBeyondLastColumn;\n\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n\tconst minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n\n\treturn {\n\t\theightInLines: renderedLineCount,\n\t\tminWidthInPx,\n\t\tviewLineCounts,\n\t};\n}\n\n\nexport class LineSource {\n\tconstructor(\n\t\tpublic readonly lineTokens: LineTokens[],\n\t\tpublic readonly lineBreakData: (ModelLineProjectionData | null)[] = lineTokens.map(t => null),\n\t\tpublic readonly mightContainNonBasicASCII: boolean = true,\n\t\tpublic readonly mightContainRTL: boolean = true,\n\t) { }\n}\n\nexport class RenderOptions {\n\tpublic static fromEditor(editor: ICodeEditor): RenderOptions {\n\n\t\tconst modifiedEditorOptions = editor.getOptions();\n\t\tconst fontInfo = modifiedEditorOptions.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = modifiedEditorOptions.get(EditorOption.layoutInfo);\n\n\t\treturn new RenderOptions(\n\t\t\teditor.getModel()?.getOptions().tabSize || 0,\n\t\t\tfontInfo,\n\t\t\tmodifiedEditorOptions.get(EditorOption.disableMonospaceOptimizations),\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollBeyondLastColumn),\n\n\t\t\tmodifiedEditorOptions.get(EditorOption.lineHeight),\n\n\t\t\tlayoutInfo.decorationsWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.stopRenderingLineAfter),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderWhitespace),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderControlCharacters),\n\t\t\tmodifiedEditorOptions.get(EditorOption.fontLigatures),\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollbar).verticalScrollbarSize,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly fontInfo: FontInfo,\n\t\tpublic readonly disableMonospaceOptimizations: boolean,\n\t\tpublic readonly typicalHalfwidthCharacterWidth: number,\n\t\tpublic readonly scrollBeyondLastColumn: number,\n\t\tpublic readonly lineHeight: number,\n\t\tpublic readonly lineDecorationsWidth: number,\n\t\tpublic readonly stopRenderingLineAfter: number,\n\t\tpublic readonly renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t\tpublic readonly fontLigatures: FindComputedEditorOptionValueById<EditorOption.fontLigatures>,\n\t\tpublic readonly verticalScrollbarSize: number,\n\t\tpublic readonly setWidth = true,\n\t) { }\n\n\tpublic withSetWidth(setWidth: boolean): RenderOptions {\n\t\treturn new RenderOptions(\n\t\t\tthis.tabSize,\n\t\t\tthis.fontInfo,\n\t\t\tthis.disableMonospaceOptimizations,\n\t\t\tthis.typicalHalfwidthCharacterWidth,\n\t\t\tthis.scrollBeyondLastColumn,\n\t\t\tthis.lineHeight,\n\t\t\tthis.lineDecorationsWidth,\n\t\t\tthis.stopRenderingLineAfter,\n\t\t\tthis.renderWhitespace,\n\t\t\tthis.renderControlCharacters,\n\t\t\tthis.fontLigatures,\n\t\t\tthis.verticalScrollbarSize,\n\t\t\tsetWidth,\n\t\t);\n\t}\n\n\tpublic withScrollBeyondLastColumn(scrollBeyondLastColumn: number): RenderOptions {\n\t\treturn new RenderOptions(\n\t\t\tthis.tabSize,\n\t\t\tthis.fontInfo,\n\t\t\tthis.disableMonospaceOptimizations,\n\t\t\tthis.typicalHalfwidthCharacterWidth,\n\t\t\tscrollBeyondLastColumn,\n\t\t\tthis.lineHeight,\n\t\t\tthis.lineDecorationsWidth,\n\t\t\tthis.stopRenderingLineAfter,\n\t\t\tthis.renderWhitespace,\n\t\t\tthis.renderControlCharacters,\n\t\t\tthis.fontLigatures,\n\t\t\tthis.verticalScrollbarSize,\n\t\t\tthis.setWidth,\n\t\t);\n\t}\n}\n\nexport interface RenderLinesResult {\n\tminWidthInPx: number;\n\theightInLines: number;\n\tviewLineCounts: number[];\n}\n\nfunction renderOriginalLine(\n\tviewLineIdx: number,\n\tlineTokens: IViewLineTokens,\n\tdecorations: LineDecoration[],\n\thasCharChanges: boolean,\n\tmightContainNonBasicASCII: boolean,\n\tmightContainRTL: boolean,\n\toptions: RenderOptions,\n\tsb: StringBuilder,\n\tnoExtra: boolean,\n): number {\n\n\tsb.appendString('<div class=\"view-line');\n\tif (!noExtra && !hasCharChanges) {\n\t\t// No char changes\n\t\tsb.appendString(' char-delete');\n\t}\n\tsb.appendString('\" style=\"top:');\n\tsb.appendString(String(viewLineIdx * options.lineHeight));\n\tif (options.setWidth) {\n\t\tsb.appendString('px;width:1000000px;\">');\n\t} else {\n\t\tsb.appendString('px;\">');\n\t}\n\n\tconst lineContent = lineTokens.getLineContent();\n\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n\tconst containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n\tconst output = renderViewLine(new RenderLineInput(\n\t\t(options.fontInfo.isMonospace && !options.disableMonospaceOptimizations),\n\t\toptions.fontInfo.canUseHalfwidthRightwardsArrow,\n\t\tlineContent,\n\t\tfalse,\n\t\tisBasicASCII,\n\t\tcontainsRTL,\n\t\t0,\n\t\tlineTokens,\n\t\tdecorations,\n\t\toptions.tabSize,\n\t\t0,\n\t\toptions.fontInfo.spaceWidth,\n\t\toptions.fontInfo.middotWidth,\n\t\toptions.fontInfo.wsmiddotWidth,\n\t\toptions.stopRenderingLineAfter,\n\t\toptions.renderWhitespace,\n\t\toptions.renderControlCharacters,\n\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\tnull, // Send no selections, original line cannot be selected\n\t\tnull,\n\t\toptions.verticalScrollbarSize\n\t), sb);\n\n\tsb.appendString('</div>');\n\n\treturn output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n"]}