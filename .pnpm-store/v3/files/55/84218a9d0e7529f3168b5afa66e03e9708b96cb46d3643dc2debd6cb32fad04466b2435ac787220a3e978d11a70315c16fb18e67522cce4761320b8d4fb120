{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/model/changeRecorder.ts","vs/editor/contrib/inlineCompletions/browser/model/changeRecorder.ts"],"names":[],"mappings":"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","file":"changeRecorder.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, observableFromEvent } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { canLog, ILoggerService, LogLevel } from '../../../../../platform/log/common/log.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../browser/widget/codeEditor/codeEditorWidget.js';\nimport { IDocumentEventDataSetChangeReason, IRecordableEditorLogEntry, StructuredLogger } from '../structuredLogger.js';\n\nexport class TextModelChangeRecorder extends Disposable {\n\tprivate readonly _structuredLogger;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis._structuredLogger = this._register(this._instantiationService.createInstance(StructuredLogger.cast<IRecordableEditorLogEntry & IDocumentEventDataSetChangeReason>(),\n\t\t\t'editor.inlineSuggest.logChangeReason.commandId'\n\t\t));\n\n\t\tconst logger = this._loggerService?.createLogger('textModelChanges', { hidden: false, name: 'Text Model Changes Reason' });\n\n\t\tconst loggingLevel = observableFromEvent(this, logger.onDidChangeLogLevel, () => logger.getLevel());\n\n\t\tthis._register(autorun(reader => {\n\t\t\tif (!canLog(loggingLevel.read(reader), LogLevel.Trace)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treader.store.add(this._editor.onDidChangeModelContent((e) => {\n\t\t\t\tif (this._editor.getModel()?.uri.scheme === 'output') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.trace('onDidChangeModelContent: ' + e.detailedReasons.map(r => r.toKey(Number.MAX_VALUE)).join(', '));\n\t\t\t}));\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tif (!(this._editor instanceof CodeEditorWidget)) { return; }\n\t\t\tif (!this._structuredLogger.isEnabled.read(reader)) { return; }\n\n\t\t\treader.store.add(this._editor.onDidChangeModelContent(e => {\n\t\t\t\tconst tm = this._editor.getModel();\n\t\t\t\tif (!tm) { return; }\n\n\t\t\t\tconst reason = e.detailedReasons[0];\n\n\t\t\t\tconst data: IRecordableEditorLogEntry & IDocumentEventDataSetChangeReason = {\n\t\t\t\t\t...reason.metadata,\n\t\t\t\t\tsourceId: 'TextModel.setChangeReason',\n\t\t\t\t\tsource: reason.metadata.source,\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\tmodelUri: tm.uri,\n\t\t\t\t\tmodelVersion: tm.getVersionId(),\n\t\t\t\t};\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// To ensure that this reaches the extension host after the content change event.\n\t\t\t\t\t// (Without the setTimeout, I observed this command being called before the content change event arrived)\n\t\t\t\t\tthis._structuredLogger.log(data);\n\t\t\t\t}, 0);\n\t\t\t}));\n\t\t}));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, observableFromEvent } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { canLog, ILoggerService, LogLevel } from '../../../../../platform/log/common/log.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { CodeEditorWidget } from '../../../../browser/widget/codeEditor/codeEditorWidget.js';\nimport { IDocumentEventDataSetChangeReason, IRecordableEditorLogEntry, StructuredLogger } from '../structuredLogger.js';\n\nexport class TextModelChangeRecorder extends Disposable {\n\tprivate readonly _structuredLogger;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis._structuredLogger = this._register(this._instantiationService.createInstance(StructuredLogger.cast<IRecordableEditorLogEntry & IDocumentEventDataSetChangeReason>(),\n\t\t\t'editor.inlineSuggest.logChangeReason.commandId'\n\t\t));\n\n\t\tconst logger = this._loggerService?.createLogger('textModelChanges', { hidden: false, name: 'Text Model Changes Reason' });\n\n\t\tconst loggingLevel = observableFromEvent(this, logger.onDidChangeLogLevel, () => logger.getLevel());\n\n\t\tthis._register(autorun(reader => {\n\t\t\tif (!canLog(loggingLevel.read(reader), LogLevel.Trace)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treader.store.add(this._editor.onDidChangeModelContent((e) => {\n\t\t\t\tif (this._editor.getModel()?.uri.scheme === 'output') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.trace('onDidChangeModelContent: ' + e.detailedReasons.map(r => r.toKey(Number.MAX_VALUE)).join(', '));\n\t\t\t}));\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tif (!(this._editor instanceof CodeEditorWidget)) { return; }\n\t\t\tif (!this._structuredLogger.isEnabled.read(reader)) { return; }\n\n\t\t\treader.store.add(this._editor.onDidChangeModelContent(e => {\n\t\t\t\tconst tm = this._editor.getModel();\n\t\t\t\tif (!tm) { return; }\n\n\t\t\t\tconst reason = e.detailedReasons[0];\n\n\t\t\t\tconst data: IRecordableEditorLogEntry & IDocumentEventDataSetChangeReason = {\n\t\t\t\t\t...reason.metadata,\n\t\t\t\t\tsourceId: 'TextModel.setChangeReason',\n\t\t\t\t\tsource: reason.metadata.source,\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\tmodelUri: tm.uri,\n\t\t\t\t\tmodelVersion: tm.getVersionId(),\n\t\t\t\t};\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// To ensure that this reaches the extension host after the content change event.\n\t\t\t\t\t// (Without the setTimeout, I observed this command being called before the content change event arrived)\n\t\t\t\t\tthis._structuredLogger.log(data);\n\t\t\t\t}, 0);\n\t\t\t}));\n\t\t}));\n\t}\n}\n"]}