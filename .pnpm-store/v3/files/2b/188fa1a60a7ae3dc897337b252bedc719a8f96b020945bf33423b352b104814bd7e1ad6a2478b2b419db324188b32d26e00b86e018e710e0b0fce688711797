{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/worker/webWorkerBootstrap.ts","vs/base/common/worker/webWorkerBootstrap.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAyE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AAWxH,IAAI,WAAW,GAAG,KAAK,CAAC;AAExB,MAAM,UAAU,UAAU,CAA2C,OAAiD;IACrH,IAAI,WAAW,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACnD,CAAC;IACD,WAAW,GAAG,IAAI,CAAC;IAEnB,MAAM,eAAe,GAAG,IAAI,eAAe,CAC1C,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,EAClC,CAAC,YAAY,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CACvC,CAAC;IAEF,UAAU,CAAC,SAAS,GAAG,CAAC,CAAe,EAAE,EAAE;QAC1C,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,OAAO,eAAe,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,OAAmD;IACrF,UAAU,CAAC,SAAS,GAAG,CAAC,EAAgB,EAAE,EAAE;QAC3C,0EAA0E;QAC1E,IAAI,CAAC,WAAW,EAAE,CAAC;YAClB,UAAU,CAAC,OAAO,CAAC,CAAC;QACrB,CAAC;IACF,CAAC,CAAC;AACH,CAAC","file":"webWorkerBootstrap.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWebWorkerServerRequestHandler, IWebWorkerServerRequestHandlerFactory, WebWorkerServer } from './webWorker.js';\n\ntype MessageEvent = {\n\tdata: unknown;\n};\n\ndeclare const globalThis: {\n\tpostMessage: (message: any) => void;\n\tonmessage: (event: MessageEvent) => void;\n};\n\nlet initialized = false;\n\nexport function initialize<T extends IWebWorkerServerRequestHandler>(factory: IWebWorkerServerRequestHandlerFactory<T>) {\n\tif (initialized) {\n\t\tthrow new Error('WebWorker already initialized!');\n\t}\n\tinitialized = true;\n\n\tconst webWorkerServer = new WebWorkerServer<T>(\n\t\tmsg => globalThis.postMessage(msg),\n\t\t(workerServer) => factory(workerServer)\n\t);\n\n\tglobalThis.onmessage = (e: MessageEvent) => {\n\t\twebWorkerServer.onmessage(e.data);\n\t};\n\n\treturn webWorkerServer;\n}\n\nexport function bootstrapWebWorker(factory: IWebWorkerServerRequestHandlerFactory<any>) {\n\tglobalThis.onmessage = (_e: MessageEvent) => {\n\t\t// Ignore first message in this case and initialize if not yet initialized\n\t\tif (!initialized) {\n\t\t\tinitialize(factory);\n\t\t}\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWebWorkerServerRequestHandler, IWebWorkerServerRequestHandlerFactory, WebWorkerServer } from './webWorker.js';\n\ntype MessageEvent = {\n\tdata: unknown;\n};\n\ndeclare const globalThis: {\n\tpostMessage: (message: any) => void;\n\tonmessage: (event: MessageEvent) => void;\n};\n\nlet initialized = false;\n\nexport function initialize<T extends IWebWorkerServerRequestHandler>(factory: IWebWorkerServerRequestHandlerFactory<T>) {\n\tif (initialized) {\n\t\tthrow new Error('WebWorker already initialized!');\n\t}\n\tinitialized = true;\n\n\tconst webWorkerServer = new WebWorkerServer<T>(\n\t\tmsg => globalThis.postMessage(msg),\n\t\t(workerServer) => factory(workerServer)\n\t);\n\n\tglobalThis.onmessage = (e: MessageEvent) => {\n\t\twebWorkerServer.onmessage(e.data);\n\t};\n\n\treturn webWorkerServer;\n}\n\nexport function bootstrapWebWorker(factory: IWebWorkerServerRequestHandlerFactory<any>) {\n\tglobalThis.onmessage = (_e: MessageEvent) => {\n\t\t// Ignore first message in this case and initialize if not yet initialized\n\t\tif (!initialized) {\n\t\t\tinitialize(factory);\n\t\t}\n\t};\n}\n"]}