{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/controller/editContext/native/screenReaderContentRich.ts","vs/editor/browser/controller/editContext/native/screenReaderContentRich.ts"],"names":[],"mappings":"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","file":"screenReaderContentRich.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow, isHTMLElement } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById, IComputedEditorOptions } from '../../../../common/config/editorOptions.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { StringBuilder } from '../../../../common/core/stringBuilder.js';\nimport { LineDecoration } from '../../../../common/viewLayout/lineDecorations.js';\nimport { CharacterMapping, RenderLineInput, renderViewLine } from '../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { IPagedScreenReaderStrategy } from '../screenReaderUtils.js';\nimport { ISimpleModel } from '../../../../common/viewModel/screenReaderSimpleModel.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IME } from '../../../../../base/common/ime.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { IScreenReaderContent } from './screenReaderUtils.js';\nimport { getColumnOfNodeOffset } from '../../../viewParts/viewLines/viewLine.js';\n\nconst ttPolicy = createTrustedTypesPolicy('richScreenReaderContent', { createHTML: value => value });\n\nconst LINE_NUMBER_ATTRIBUTE = 'data-line-number';\n\nexport class RichScreenReaderContent extends Disposable implements IScreenReaderContent {\n\n\tprivate readonly _selectionChangeListener = this._register(new MutableDisposable());\n\n\tprivate _accessibilityPageSize: number = 1;\n\tprivate _ignoreSelectionChangeTime: number = 0;\n\n\tprivate _state: RichScreenReaderState = new RichScreenReaderState([]);\n\tprivate _strategy: RichPagedScreenReaderStrategy = new RichPagedScreenReaderStrategy();\n\n\tprivate _renderedLines: Map<number, RichRenderedScreenReaderLine> = new Map();\n\tprivate _renderedSelection: Selection = new Selection(1, 1, 1, 1);\n\n\tconstructor(\n\t\tprivate readonly _domNode: FastDomNode<HTMLElement>,\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _viewController: ViewController,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper();\n\t\tthis.onConfigurationChanged(this._context.configuration.options);\n\t}\n\n\tpublic updateScreenReaderContent(primarySelection: Selection): void {\n\t\tconst focusedElement = getActiveWindow().document.activeElement;\n\t\tif (!focusedElement || focusedElement !== this._domNode.domNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\tif (isScreenReaderOptimized) {\n\t\t\tconst state = this._getScreenReaderContentLineIntervals(primarySelection);\n\t\t\tif (!this._state.equals(state)) {\n\t\t\t\tthis._state = state;\n\t\t\t\tthis._renderedLines = this._renderScreenReaderContent(state);\n\t\t\t}\n\t\t\tif (!this._renderedSelection.equalsSelection(primarySelection)) {\n\t\t\t\tthis._renderedSelection = primarySelection;\n\t\t\t\tthis._setSelectionOnScreenReaderContent(this._context, this._renderedLines, primarySelection);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._state = new RichScreenReaderState([]);\n\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\tthis._domNode.domNode.textContent = '';\n\t\t}\n\t}\n\n\tpublic updateScrollTop(primarySelection: Selection): void {\n\t\tconst intervals = this._state.intervals;\n\t\tif (!intervals.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewLayout = this._context.viewModel.viewLayout;\n\t\tconst stateStartLineNumber = intervals[0].startLine;\n\t\tconst verticalOffsetOfStateStartLineNumber = viewLayout.getVerticalOffsetForLineNumber(stateStartLineNumber);\n\t\tconst verticalOffsetOfPositionLineNumber = viewLayout.getVerticalOffsetForLineNumber(primarySelection.positionLineNumber);\n\t\tthis._domNode.domNode.scrollTop = verticalOffsetOfPositionLineNumber - verticalOffsetOfStateStartLineNumber;\n\t}\n\n\tpublic onFocusChange(newFocusValue: boolean): void {\n\t\tif (newFocusValue) {\n\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener();\n\t\t} else {\n\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t}\n\t}\n\n\tpublic onConfigurationChanged(options: IComputedEditorOptions): void {\n\t\tthis._accessibilityPageSize = options.get(EditorOption.accessibilityPageSize);\n\t}\n\n\tpublic onWillCut(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onCut');\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\t// --- private methods\n\n\tprivate _setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tprivate _setSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this._domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst activeElement = getActiveWindow().document.activeElement;\n\t\t\tconst isFocused = activeElement === this._domNode.domNode;\n\t\t\tif (!isFocused) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!isScreenReaderOptimized || !IME.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._ignoreSelectionChangeTime;\n\t\t\tthis._ignoreSelectionChangeTime = 0;\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the hidden div\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = this._getEditorSelectionFromDomRange();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._viewController.setSelection(selection);\n\t\t});\n\t}\n\n\tprivate _renderScreenReaderContent(state: RichScreenReaderState): Map<number, RichRenderedScreenReaderLine> {\n\t\tconst nodes: HTMLDivElement[] = [];\n\t\tconst renderedLines = new Map<number, RichRenderedScreenReaderLine>();\n\t\tfor (const interval of state.intervals) {\n\t\t\tfor (let lineNumber = interval.startLine; lineNumber <= interval.endLine; lineNumber++) {\n\t\t\t\tconst renderedLine = this._renderLine(lineNumber);\n\t\t\t\trenderedLines.set(lineNumber, renderedLine);\n\t\t\t\tnodes.push(renderedLine.domNode);\n\t\t\t}\n\t\t}\n\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\tthis._domNode.domNode.replaceChildren(...nodes);\n\t\treturn renderedLines;\n\t}\n\n\tprivate _renderLine(viewLineNumber: number): RichRenderedScreenReaderLine {\n\t\tconst viewModel = this._context.viewModel;\n\t\tconst positionLineData = viewModel.getViewLineRenderingData(viewLineNumber);\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst stopRenderingLineAfter = options.get(EditorOption.stopRenderingLineAfter);\n\t\tconst renderControlCharacters = options.get(EditorOption.renderControlCharacters);\n\t\tconst fontLigatures = options.get(EditorOption.fontLigatures);\n\t\tconst disableMonospaceOptimizations = options.get(EditorOption.disableMonospaceOptimizations);\n\t\tconst lineDecorations = LineDecoration.filter(positionLineData.inlineDecorations, viewLineNumber, positionLineData.minColumn, positionLineData.maxColumn);\n\t\tconst useMonospaceOptimizations = fontInfo.isMonospace && !disableMonospaceOptimizations;\n\t\tconst useFontLigatures = fontLigatures !== EditorFontLigatures.OFF;\n\t\tlet renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>;\n\t\tconst experimentalWhitespaceRendering = options.get(EditorOption.experimentalWhitespaceRendering);\n\t\tif (experimentalWhitespaceRendering === 'off') {\n\t\t\trenderWhitespace = options.get(EditorOption.renderWhitespace);\n\t\t} else {\n\t\t\trenderWhitespace = 'none';\n\t\t}\n\t\tconst renderLineInput = new RenderLineInput(\n\t\t\tuseMonospaceOptimizations,\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tpositionLineData.content,\n\t\t\tpositionLineData.continuesWithWrappedLine,\n\t\t\tpositionLineData.isBasicASCII,\n\t\t\tpositionLineData.containsRTL,\n\t\t\tpositionLineData.minColumn - 1,\n\t\t\tpositionLineData.tokens,\n\t\t\tlineDecorations,\n\t\t\tpositionLineData.tabSize,\n\t\t\tpositionLineData.startVisibleColumn,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tuseFontLigatures,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\t0,\n\t\t\ttrue\n\t\t);\n\t\tconst htmlBuilder = new StringBuilder(10000);\n\t\tconst renderOutput = renderViewLine(renderLineInput, htmlBuilder);\n\t\tconst html = htmlBuilder.build();\n\t\tconst trustedhtml = ttPolicy?.createHTML(html) ?? html;\n\t\tconst lineHeight = viewModel.viewLayout.getLineHeightForLineNumber(viewLineNumber) + 'px';\n\t\tconst domNode = document.createElement('div');\n\t\tdomNode.innerHTML = trustedhtml as string;\n\t\tdomNode.style.lineHeight = lineHeight;\n\t\tdomNode.style.height = lineHeight;\n\t\tdomNode.setAttribute(LINE_NUMBER_ATTRIBUTE, viewLineNumber.toString());\n\t\treturn new RichRenderedScreenReaderLine(domNode, renderOutput.characterMapping);\n\t}\n\n\tprivate _setSelectionOnScreenReaderContent(context: ViewContext, renderedLines: Map<number, RichRenderedScreenReaderLine>, viewSelection: Selection): void {\n\t\tconst activeDocument = getActiveWindow().document;\n\t\tconst activeDocumentSelection = activeDocument.getSelection();\n\t\tif (!activeDocumentSelection) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumber = viewSelection.startLineNumber;\n\t\tconst endLineNumber = viewSelection.endLineNumber;\n\t\tconst startRenderedLine = renderedLines.get(startLineNumber);\n\t\tconst endRenderedLine = renderedLines.get(endLineNumber);\n\t\tif (!startRenderedLine || !endRenderedLine) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = context.viewModel;\n\t\tconst model = viewModel.model;\n\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\tconst startRange = new Range(startLineNumber, 1, startLineNumber, viewSelection.selectionStartColumn);\n\t\tconst modelStartRange = coordinatesConverter.convertViewRangeToModelRange(startRange);\n\t\tconst characterCountForStart = model.getCharacterCountInRange(modelStartRange);\n\t\tconst endRange = new Range(endLineNumber, 1, endLineNumber, viewSelection.positionColumn);\n\t\tconst modelEndRange = coordinatesConverter.convertViewRangeToModelRange(endRange);\n\t\tconst characterCountForEnd = model.getCharacterCountInRange(modelEndRange);\n\t\tconst startDomPosition = startRenderedLine.characterMapping.getDomPosition(characterCountForStart);\n\t\tconst endDomPosition = endRenderedLine.characterMapping.getDomPosition(characterCountForEnd);\n\t\tconst startDomNode = startRenderedLine.domNode.firstChild!;\n\t\tconst endDomNode = endRenderedLine.domNode.firstChild!;\n\t\tconst startChildren = startDomNode.childNodes;\n\t\tconst endChildren = endDomNode.childNodes;\n\t\tconst startNode = startChildren.item(startDomPosition.partIndex);\n\t\tconst endNode = endChildren.item(endDomPosition.partIndex);\n\t\tif (!startNode.firstChild || !endNode.firstChild) {\n\t\t\treturn;\n\t\t}\n\t\tthis._setIgnoreSelectionChangeTime('setRange');\n\t\tactiveDocumentSelection.setBaseAndExtent(\n\t\t\tstartNode.firstChild,\n\t\t\tviewSelection.startColumn === 1 ? 0 : startDomPosition.charIndex + 1,\n\t\t\tendNode.firstChild,\n\t\t\tviewSelection.endColumn === 1 ? 0 : endDomPosition.charIndex + 1\n\t\t);\n\t}\n\n\tprivate _getScreenReaderContentLineIntervals(primarySelection: Selection): RichScreenReaderState {\n\t\treturn this._strategy.fromEditorSelection(this._context.viewModel, primarySelection, this._accessibilityPageSize);\n\t}\n\n\tprivate _getEditorSelectionFromDomRange(): Selection | undefined {\n\t\tif (!this._renderedLines) {\n\t\t\treturn;\n\t\t}\n\t\tconst selection = getActiveWindow().document.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst rangeCount = selection.rangeCount;\n\t\tif (rangeCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = selection.getRangeAt(0);\n\t\tconst startContainer = range.startContainer;\n\t\tconst endContainer = range.endContainer;\n\t\tconst startSpanElement = startContainer.parentElement;\n\t\tconst endSpanElement = endContainer.parentElement;\n\t\tif (!startSpanElement || !isHTMLElement(startSpanElement) || !endSpanElement || !isHTMLElement(endSpanElement)) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineDomNode = startSpanElement.parentElement?.parentElement;\n\t\tconst endLineDomNode = endSpanElement.parentElement?.parentElement;\n\t\tif (!startLineDomNode || !endLineDomNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumberAttribute = startLineDomNode.getAttribute(LINE_NUMBER_ATTRIBUTE);\n\t\tconst endLineNumberAttribute = endLineDomNode.getAttribute(LINE_NUMBER_ATTRIBUTE);\n\t\tif (!startLineNumberAttribute || !endLineNumberAttribute) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumber = parseInt(startLineNumberAttribute);\n\t\tconst endLineNumber = parseInt(endLineNumberAttribute);\n\t\tconst startMapping = this._renderedLines.get(startLineNumber)?.characterMapping;\n\t\tconst endMapping = this._renderedLines.get(endLineNumber)?.characterMapping;\n\t\tif (!startMapping || !endMapping) {\n\t\t\treturn;\n\t\t}\n\t\tconst startColumn = getColumnOfNodeOffset(startMapping, startSpanElement, range.startOffset);\n\t\tconst endColumn = getColumnOfNodeOffset(endMapping, endSpanElement, range.endOffset);\n\t\tif (selection.direction === 'forward') {\n\t\t\treturn new Selection(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn\n\t\t\t);\n\t\t} else {\n\t\t\treturn new Selection(\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass RichRenderedScreenReaderLine {\n\tconstructor(\n\t\tpublic readonly domNode: HTMLDivElement,\n\t\tpublic readonly characterMapping: CharacterMapping\n\t) { }\n}\n\nclass LineInterval {\n\tconstructor(\n\t\tpublic readonly startLine: number,\n\t\tpublic readonly endLine: number\n\t) { }\n}\n\nclass RichScreenReaderState {\n\n\tconstructor(public readonly intervals: LineInterval[]) { }\n\n\tequals(other: RichScreenReaderState): boolean {\n\t\tif (this.intervals.length !== other.intervals.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tif (this.intervals[i].startLine !== other.intervals[i].startLine || this.intervals[i].endLine !== other.intervals[i].endLine) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass RichPagedScreenReaderStrategy implements IPagedScreenReaderStrategy<RichScreenReaderState> {\n\n\tconstructor() { }\n\n\tprivate _getPageOfLine(lineNumber: number, linesPerPage: number): number {\n\t\treturn Math.floor((lineNumber - 1) / linesPerPage);\n\t}\n\n\tprivate _getRangeForPage(context: ISimpleModel, page: number, linesPerPage: number): LineInterval {\n\t\tconst offset = page * linesPerPage;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = Math.min(offset + linesPerPage, context.getLineCount());\n\t\treturn new LineInterval(startLineNumber, endLineNumber);\n\t}\n\n\tpublic fromEditorSelection(context: ISimpleModel, viewSelection: Selection, linesPerPage: number): RichScreenReaderState {\n\t\tconst selectionStartPage = this._getPageOfLine(viewSelection.startLineNumber, linesPerPage);\n\t\tconst selectionStartPageRange = this._getRangeForPage(context, selectionStartPage, linesPerPage);\n\t\tconst selectionEndPage = this._getPageOfLine(viewSelection.endLineNumber, linesPerPage);\n\t\tconst selectionEndPageRange = this._getRangeForPage(context, selectionEndPage, linesPerPage);\n\t\tconst lineIntervals: LineInterval[] = [{ startLine: selectionStartPageRange.startLine, endLine: selectionStartPageRange.endLine }];\n\t\tif (selectionStartPage + 1 < selectionEndPage) {\n\t\t\tlineIntervals.push({ startLine: selectionEndPageRange.startLine, endLine: selectionEndPageRange.endLine });\n\t\t}\n\t\treturn new RichScreenReaderState(lineIntervals);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveWindow, isHTMLElement } from '../../../../../base/browser/dom.js';\nimport { FastDomNode } from '../../../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../../../base/browser/trustedTypes.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById, IComputedEditorOptions } from '../../../../common/config/editorOptions.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { StringBuilder } from '../../../../common/core/stringBuilder.js';\nimport { LineDecoration } from '../../../../common/viewLayout/lineDecorations.js';\nimport { CharacterMapping, RenderLineInput, renderViewLine } from '../../../../common/viewLayout/viewLineRenderer.js';\nimport { ViewContext } from '../../../../common/viewModel/viewContext.js';\nimport { IPagedScreenReaderStrategy } from '../screenReaderUtils.js';\nimport { ISimpleModel } from '../../../../common/viewModel/screenReaderSimpleModel.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../../base/common/lifecycle.js';\nimport { IME } from '../../../../../base/common/ime.js';\nimport { ViewController } from '../../../view/viewController.js';\nimport { IScreenReaderContent } from './screenReaderUtils.js';\nimport { getColumnOfNodeOffset } from '../../../viewParts/viewLines/viewLine.js';\n\nconst ttPolicy = createTrustedTypesPolicy('richScreenReaderContent', { createHTML: value => value });\n\nconst LINE_NUMBER_ATTRIBUTE = 'data-line-number';\n\nexport class RichScreenReaderContent extends Disposable implements IScreenReaderContent {\n\n\tprivate readonly _selectionChangeListener = this._register(new MutableDisposable());\n\n\tprivate _accessibilityPageSize: number = 1;\n\tprivate _ignoreSelectionChangeTime: number = 0;\n\n\tprivate _state: RichScreenReaderState = new RichScreenReaderState([]);\n\tprivate _strategy: RichPagedScreenReaderStrategy = new RichPagedScreenReaderStrategy();\n\n\tprivate _renderedLines: Map<number, RichRenderedScreenReaderLine> = new Map();\n\tprivate _renderedSelection: Selection = new Selection(1, 1, 1, 1);\n\n\tconstructor(\n\t\tprivate readonly _domNode: FastDomNode<HTMLElement>,\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _viewController: ViewController,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService\n\t) {\n\t\tsuper();\n\t\tthis.onConfigurationChanged(this._context.configuration.options);\n\t}\n\n\tpublic updateScreenReaderContent(primarySelection: Selection): void {\n\t\tconst focusedElement = getActiveWindow().document.activeElement;\n\t\tif (!focusedElement || focusedElement !== this._domNode.domNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\tif (isScreenReaderOptimized) {\n\t\t\tconst state = this._getScreenReaderContentLineIntervals(primarySelection);\n\t\t\tif (!this._state.equals(state)) {\n\t\t\t\tthis._state = state;\n\t\t\t\tthis._renderedLines = this._renderScreenReaderContent(state);\n\t\t\t}\n\t\t\tif (!this._renderedSelection.equalsSelection(primarySelection)) {\n\t\t\t\tthis._renderedSelection = primarySelection;\n\t\t\t\tthis._setSelectionOnScreenReaderContent(this._context, this._renderedLines, primarySelection);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._state = new RichScreenReaderState([]);\n\t\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\t\tthis._domNode.domNode.textContent = '';\n\t\t}\n\t}\n\n\tpublic updateScrollTop(primarySelection: Selection): void {\n\t\tconst intervals = this._state.intervals;\n\t\tif (!intervals.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewLayout = this._context.viewModel.viewLayout;\n\t\tconst stateStartLineNumber = intervals[0].startLine;\n\t\tconst verticalOffsetOfStateStartLineNumber = viewLayout.getVerticalOffsetForLineNumber(stateStartLineNumber);\n\t\tconst verticalOffsetOfPositionLineNumber = viewLayout.getVerticalOffsetForLineNumber(primarySelection.positionLineNumber);\n\t\tthis._domNode.domNode.scrollTop = verticalOffsetOfPositionLineNumber - verticalOffsetOfStateStartLineNumber;\n\t}\n\n\tpublic onFocusChange(newFocusValue: boolean): void {\n\t\tif (newFocusValue) {\n\t\t\tthis._selectionChangeListener.value = this._setSelectionChangeListener();\n\t\t} else {\n\t\t\tthis._selectionChangeListener.value = undefined;\n\t\t}\n\t}\n\n\tpublic onConfigurationChanged(options: IComputedEditorOptions): void {\n\t\tthis._accessibilityPageSize = options.get(EditorOption.accessibilityPageSize);\n\t}\n\n\tpublic onWillCut(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onCut');\n\t}\n\n\tpublic onWillPaste(): void {\n\t\tthis._setIgnoreSelectionChangeTime('onWillPaste');\n\t}\n\n\t// --- private methods\n\n\tprivate _setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tprivate _setSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display or NVDA for example, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event and needs to be reflected within the editor.\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn addDisposableListener(this._domNode.domNode.ownerDocument, 'selectionchange', () => {\n\t\t\tconst activeElement = getActiveWindow().document.activeElement;\n\t\t\tconst isFocused = activeElement === this._domNode.domNode;\n\t\t\tif (!isFocused) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst isScreenReaderOptimized = this._accessibilityService.isScreenReaderOptimized();\n\t\t\tif (!isScreenReaderOptimized || !IME.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst now = Date.now();\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst delta2 = now - this._ignoreSelectionChangeTime;\n\t\t\tthis._ignoreSelectionChangeTime = 0;\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the hidden div\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selection = this._getEditorSelectionFromDomRange();\n\t\t\tif (!selection) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._viewController.setSelection(selection);\n\t\t});\n\t}\n\n\tprivate _renderScreenReaderContent(state: RichScreenReaderState): Map<number, RichRenderedScreenReaderLine> {\n\t\tconst nodes: HTMLDivElement[] = [];\n\t\tconst renderedLines = new Map<number, RichRenderedScreenReaderLine>();\n\t\tfor (const interval of state.intervals) {\n\t\t\tfor (let lineNumber = interval.startLine; lineNumber <= interval.endLine; lineNumber++) {\n\t\t\t\tconst renderedLine = this._renderLine(lineNumber);\n\t\t\t\trenderedLines.set(lineNumber, renderedLine);\n\t\t\t\tnodes.push(renderedLine.domNode);\n\t\t\t}\n\t\t}\n\t\tthis._setIgnoreSelectionChangeTime('setValue');\n\t\tthis._domNode.domNode.replaceChildren(...nodes);\n\t\treturn renderedLines;\n\t}\n\n\tprivate _renderLine(viewLineNumber: number): RichRenderedScreenReaderLine {\n\t\tconst viewModel = this._context.viewModel;\n\t\tconst positionLineData = viewModel.getViewLineRenderingData(viewLineNumber);\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\t\tconst stopRenderingLineAfter = options.get(EditorOption.stopRenderingLineAfter);\n\t\tconst renderControlCharacters = options.get(EditorOption.renderControlCharacters);\n\t\tconst fontLigatures = options.get(EditorOption.fontLigatures);\n\t\tconst disableMonospaceOptimizations = options.get(EditorOption.disableMonospaceOptimizations);\n\t\tconst lineDecorations = LineDecoration.filter(positionLineData.inlineDecorations, viewLineNumber, positionLineData.minColumn, positionLineData.maxColumn);\n\t\tconst useMonospaceOptimizations = fontInfo.isMonospace && !disableMonospaceOptimizations;\n\t\tconst useFontLigatures = fontLigatures !== EditorFontLigatures.OFF;\n\t\tlet renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>;\n\t\tconst experimentalWhitespaceRendering = options.get(EditorOption.experimentalWhitespaceRendering);\n\t\tif (experimentalWhitespaceRendering === 'off') {\n\t\t\trenderWhitespace = options.get(EditorOption.renderWhitespace);\n\t\t} else {\n\t\t\trenderWhitespace = 'none';\n\t\t}\n\t\tconst renderLineInput = new RenderLineInput(\n\t\t\tuseMonospaceOptimizations,\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tpositionLineData.content,\n\t\t\tpositionLineData.continuesWithWrappedLine,\n\t\t\tpositionLineData.isBasicASCII,\n\t\t\tpositionLineData.containsRTL,\n\t\t\tpositionLineData.minColumn - 1,\n\t\t\tpositionLineData.tokens,\n\t\t\tlineDecorations,\n\t\t\tpositionLineData.tabSize,\n\t\t\tpositionLineData.startVisibleColumn,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tuseFontLigatures,\n\t\t\tnull,\n\t\t\tnull,\n\t\t\t0,\n\t\t\ttrue\n\t\t);\n\t\tconst htmlBuilder = new StringBuilder(10000);\n\t\tconst renderOutput = renderViewLine(renderLineInput, htmlBuilder);\n\t\tconst html = htmlBuilder.build();\n\t\tconst trustedhtml = ttPolicy?.createHTML(html) ?? html;\n\t\tconst lineHeight = viewModel.viewLayout.getLineHeightForLineNumber(viewLineNumber) + 'px';\n\t\tconst domNode = document.createElement('div');\n\t\tdomNode.innerHTML = trustedhtml as string;\n\t\tdomNode.style.lineHeight = lineHeight;\n\t\tdomNode.style.height = lineHeight;\n\t\tdomNode.setAttribute(LINE_NUMBER_ATTRIBUTE, viewLineNumber.toString());\n\t\treturn new RichRenderedScreenReaderLine(domNode, renderOutput.characterMapping);\n\t}\n\n\tprivate _setSelectionOnScreenReaderContent(context: ViewContext, renderedLines: Map<number, RichRenderedScreenReaderLine>, viewSelection: Selection): void {\n\t\tconst activeDocument = getActiveWindow().document;\n\t\tconst activeDocumentSelection = activeDocument.getSelection();\n\t\tif (!activeDocumentSelection) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumber = viewSelection.startLineNumber;\n\t\tconst endLineNumber = viewSelection.endLineNumber;\n\t\tconst startRenderedLine = renderedLines.get(startLineNumber);\n\t\tconst endRenderedLine = renderedLines.get(endLineNumber);\n\t\tif (!startRenderedLine || !endRenderedLine) {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = context.viewModel;\n\t\tconst model = viewModel.model;\n\t\tconst coordinatesConverter = viewModel.coordinatesConverter;\n\t\tconst startRange = new Range(startLineNumber, 1, startLineNumber, viewSelection.selectionStartColumn);\n\t\tconst modelStartRange = coordinatesConverter.convertViewRangeToModelRange(startRange);\n\t\tconst characterCountForStart = model.getCharacterCountInRange(modelStartRange);\n\t\tconst endRange = new Range(endLineNumber, 1, endLineNumber, viewSelection.positionColumn);\n\t\tconst modelEndRange = coordinatesConverter.convertViewRangeToModelRange(endRange);\n\t\tconst characterCountForEnd = model.getCharacterCountInRange(modelEndRange);\n\t\tconst startDomPosition = startRenderedLine.characterMapping.getDomPosition(characterCountForStart);\n\t\tconst endDomPosition = endRenderedLine.characterMapping.getDomPosition(characterCountForEnd);\n\t\tconst startDomNode = startRenderedLine.domNode.firstChild!;\n\t\tconst endDomNode = endRenderedLine.domNode.firstChild!;\n\t\tconst startChildren = startDomNode.childNodes;\n\t\tconst endChildren = endDomNode.childNodes;\n\t\tconst startNode = startChildren.item(startDomPosition.partIndex);\n\t\tconst endNode = endChildren.item(endDomPosition.partIndex);\n\t\tif (!startNode.firstChild || !endNode.firstChild) {\n\t\t\treturn;\n\t\t}\n\t\tthis._setIgnoreSelectionChangeTime('setRange');\n\t\tactiveDocumentSelection.setBaseAndExtent(\n\t\t\tstartNode.firstChild,\n\t\t\tviewSelection.startColumn === 1 ? 0 : startDomPosition.charIndex + 1,\n\t\t\tendNode.firstChild,\n\t\t\tviewSelection.endColumn === 1 ? 0 : endDomPosition.charIndex + 1\n\t\t);\n\t}\n\n\tprivate _getScreenReaderContentLineIntervals(primarySelection: Selection): RichScreenReaderState {\n\t\treturn this._strategy.fromEditorSelection(this._context.viewModel, primarySelection, this._accessibilityPageSize);\n\t}\n\n\tprivate _getEditorSelectionFromDomRange(): Selection | undefined {\n\t\tif (!this._renderedLines) {\n\t\t\treturn;\n\t\t}\n\t\tconst selection = getActiveWindow().document.getSelection();\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tconst rangeCount = selection.rangeCount;\n\t\tif (rangeCount === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst range = selection.getRangeAt(0);\n\t\tconst startContainer = range.startContainer;\n\t\tconst endContainer = range.endContainer;\n\t\tconst startSpanElement = startContainer.parentElement;\n\t\tconst endSpanElement = endContainer.parentElement;\n\t\tif (!startSpanElement || !isHTMLElement(startSpanElement) || !endSpanElement || !isHTMLElement(endSpanElement)) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineDomNode = startSpanElement.parentElement?.parentElement;\n\t\tconst endLineDomNode = endSpanElement.parentElement?.parentElement;\n\t\tif (!startLineDomNode || !endLineDomNode) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumberAttribute = startLineDomNode.getAttribute(LINE_NUMBER_ATTRIBUTE);\n\t\tconst endLineNumberAttribute = endLineDomNode.getAttribute(LINE_NUMBER_ATTRIBUTE);\n\t\tif (!startLineNumberAttribute || !endLineNumberAttribute) {\n\t\t\treturn;\n\t\t}\n\t\tconst startLineNumber = parseInt(startLineNumberAttribute);\n\t\tconst endLineNumber = parseInt(endLineNumberAttribute);\n\t\tconst startMapping = this._renderedLines.get(startLineNumber)?.characterMapping;\n\t\tconst endMapping = this._renderedLines.get(endLineNumber)?.characterMapping;\n\t\tif (!startMapping || !endMapping) {\n\t\t\treturn;\n\t\t}\n\t\tconst startColumn = getColumnOfNodeOffset(startMapping, startSpanElement, range.startOffset);\n\t\tconst endColumn = getColumnOfNodeOffset(endMapping, endSpanElement, range.endOffset);\n\t\tif (selection.direction === 'forward') {\n\t\t\treturn new Selection(\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn\n\t\t\t);\n\t\t} else {\n\t\t\treturn new Selection(\n\t\t\t\tendLineNumber,\n\t\t\t\tendColumn,\n\t\t\t\tstartLineNumber,\n\t\t\t\tstartColumn\n\t\t\t);\n\t\t}\n\t}\n}\n\nclass RichRenderedScreenReaderLine {\n\tconstructor(\n\t\tpublic readonly domNode: HTMLDivElement,\n\t\tpublic readonly characterMapping: CharacterMapping\n\t) { }\n}\n\nclass LineInterval {\n\tconstructor(\n\t\tpublic readonly startLine: number,\n\t\tpublic readonly endLine: number\n\t) { }\n}\n\nclass RichScreenReaderState {\n\n\tconstructor(public readonly intervals: LineInterval[]) { }\n\n\tequals(other: RichScreenReaderState): boolean {\n\t\tif (this.intervals.length !== other.intervals.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tif (this.intervals[i].startLine !== other.intervals[i].startLine || this.intervals[i].endLine !== other.intervals[i].endLine) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass RichPagedScreenReaderStrategy implements IPagedScreenReaderStrategy<RichScreenReaderState> {\n\n\tconstructor() { }\n\n\tprivate _getPageOfLine(lineNumber: number, linesPerPage: number): number {\n\t\treturn Math.floor((lineNumber - 1) / linesPerPage);\n\t}\n\n\tprivate _getRangeForPage(context: ISimpleModel, page: number, linesPerPage: number): LineInterval {\n\t\tconst offset = page * linesPerPage;\n\t\tconst startLineNumber = offset + 1;\n\t\tconst endLineNumber = Math.min(offset + linesPerPage, context.getLineCount());\n\t\treturn new LineInterval(startLineNumber, endLineNumber);\n\t}\n\n\tpublic fromEditorSelection(context: ISimpleModel, viewSelection: Selection, linesPerPage: number): RichScreenReaderState {\n\t\tconst selectionStartPage = this._getPageOfLine(viewSelection.startLineNumber, linesPerPage);\n\t\tconst selectionStartPageRange = this._getRangeForPage(context, selectionStartPage, linesPerPage);\n\t\tconst selectionEndPage = this._getPageOfLine(viewSelection.endLineNumber, linesPerPage);\n\t\tconst selectionEndPageRange = this._getRangeForPage(context, selectionEndPage, linesPerPage);\n\t\tconst lineIntervals: LineInterval[] = [{ startLine: selectionStartPageRange.startLine, endLine: selectionStartPageRange.endLine }];\n\t\tif (selectionStartPage + 1 < selectionEndPage) {\n\t\t\tlineIntervals.push({ startLine: selectionEndPageRange.startLine, endLine: selectionEndPageRange.endLine });\n\t\t}\n\t\treturn new RichScreenReaderState(lineIntervals);\n\t}\n}\n"]}