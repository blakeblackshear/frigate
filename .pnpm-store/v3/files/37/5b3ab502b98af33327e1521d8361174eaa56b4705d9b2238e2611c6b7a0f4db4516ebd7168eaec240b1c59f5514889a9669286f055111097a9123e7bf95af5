{"version":3,"file":"combine-promises.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["type UnwrapPromise<P extends unknown> = P extends PromiseLike<infer V> ? V : P;\n\ntype Input = Record<string | number | symbol, unknown>;\n\ntype Result<Obj extends Input> = {\n  [P in keyof Obj]: UnwrapPromise<Obj[P]>;\n};\n\nexport default function combinePromises<Obj extends Input>(\n  obj: Obj\n): Promise<Result<Obj>> {\n  if (obj === null) {\n    return Promise.reject(\n      new Error('combinePromises does not handle null argument')\n    );\n  }\n  if (typeof obj !== 'object') {\n    return Promise.reject(\n      new Error(\n        `combinePromises does not handle argument of type ${typeof obj}`\n      )\n    );\n  }\n\n  const keys = Object.keys(obj);\n\n  // not using async/await on purpose, otherwise lib outputs large _asyncToGenerator code in dist\n  return Promise.all(Object.values(obj)).then(values => {\n    const result: any = {};\n    values.forEach((v, i) => {\n      result[keys[i]] = v;\n    });\n    return result;\n  });\n}\n"],"names":["combinePromises","obj","Promise","reject","Error","keys","Object","all","values","then","result","forEach","v","i"],"mappings":";;;;SAQwBA,gBACtBC;AAEA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,WAAOC,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CAAU,+CAAV,CADK,CAAP;AAGD;;AACD,MAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOC,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,uDACsD,OAAOH,GAD7D,CADK,CAAP;AAKD;;AAED,MAAMI,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,GAAZ,CAAb;;AAGA,SAAOC,OAAO,CAACK,GAAR,CAAYD,MAAM,CAACE,MAAP,CAAcP,GAAd,CAAZ,EAAgCQ,IAAhC,CAAqC,UAAAD,MAAM;AAChD,QAAME,MAAM,GAAQ,EAApB;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,UAACC,CAAD,EAAIC,CAAJ;AACbH,MAAAA,MAAM,CAACL,IAAI,CAACQ,CAAD,CAAL,CAAN,GAAkBD,CAAlB;AACD,KAFD;AAGA,WAAOF,MAAP;AACD,GANM,CAAP;AAOD;;;;"}