{"version":3,"sources":["vs/editor/contrib/inlineCompletions/browser/view/inlineEdits/theme.ts"],"names":[],"mappings":"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","file":"theme.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from '../../../../../../base/common/color.js';\nimport { BugIndicatingError } from '../../../../../../base/common/errors.js';\nimport { IObservable, observableFromEventOpts } from '../../../../../../base/common/observable.js';\nimport { localize } from '../../../../../../nls.js';\nimport { buttonBackground, buttonForeground, buttonSecondaryBackground, buttonSecondaryForeground, diffInserted, diffInsertedLine, diffRemoved, editorBackground } from '../../../../../../platform/theme/common/colorRegistry.js';\nimport { ColorIdentifier, darken, registerColor, transparent } from '../../../../../../platform/theme/common/colorUtils.js';\nimport { IThemeService } from '../../../../../../platform/theme/common/themeService.js';\nimport { InlineEditTabAction } from './inlineEditsViewInterface.js';\n\nexport const originalBackgroundColor = registerColor(\n\t'inlineEdit.originalBackground',\n\ttransparent(diffRemoved, 0.2),\n\tlocalize('inlineEdit.originalBackground', 'Background color for the original text in inline edits.'),\n\ttrue\n);\nexport const modifiedBackgroundColor = registerColor(\n\t'inlineEdit.modifiedBackground',\n\ttransparent(diffInserted, 0.3),\n\tlocalize('inlineEdit.modifiedBackground', 'Background color for the modified text in inline edits.'),\n\ttrue\n);\n\nexport const originalChangedLineBackgroundColor = registerColor(\n\t'inlineEdit.originalChangedLineBackground',\n\ttransparent(diffRemoved, 0.8),\n\tlocalize('inlineEdit.originalChangedLineBackground', 'Background color for the changed lines in the original text of inline edits.'),\n\ttrue\n);\n\nexport const originalChangedTextOverlayColor = registerColor(\n\t'inlineEdit.originalChangedTextBackground',\n\ttransparent(diffRemoved, 0.8),\n\tlocalize('inlineEdit.originalChangedTextBackground', 'Overlay color for the changed text in the original text of inline edits.'),\n\ttrue\n);\n\nexport const modifiedChangedLineBackgroundColor = registerColor(\n\t'inlineEdit.modifiedChangedLineBackground',\n\t{\n\t\tlight: transparent(diffInsertedLine, 0.7),\n\t\tdark: transparent(diffInsertedLine, 0.7),\n\t\thcDark: diffInsertedLine,\n\t\thcLight: diffInsertedLine\n\t},\n\tlocalize('inlineEdit.modifiedChangedLineBackground', 'Background color for the changed lines in the modified text of inline edits.'),\n\ttrue\n);\n\nexport const modifiedChangedTextOverlayColor = registerColor(\n\t'inlineEdit.modifiedChangedTextBackground',\n\ttransparent(diffInserted, 0.7),\n\tlocalize('inlineEdit.modifiedChangedTextBackground', 'Overlay color for the changed text in the modified text of inline edits.'),\n\ttrue\n);\n\n// ------- GUTTER INDICATOR -------\n\nexport const inlineEditIndicatorPrimaryForeground = registerColor(\n\t'inlineEdit.gutterIndicator.primaryForeground',\n\tbuttonForeground,\n\tlocalize('inlineEdit.gutterIndicator.primaryForeground', 'Foreground color for the primary inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorPrimaryBorder = registerColor(\n\t'inlineEdit.gutterIndicator.primaryBorder',\n\tbuttonBackground,\n\tlocalize('inlineEdit.gutterIndicator.primaryBorder', 'Border color for the primary inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorPrimaryBackground = registerColor(\n\t'inlineEdit.gutterIndicator.primaryBackground',\n\t{\n\t\tlight: transparent(inlineEditIndicatorPrimaryBorder, 0.5),\n\t\tdark: transparent(inlineEditIndicatorPrimaryBorder, 0.4),\n\t\thcDark: transparent(inlineEditIndicatorPrimaryBorder, 0.4),\n\t\thcLight: transparent(inlineEditIndicatorPrimaryBorder, 0.5),\n\t},\n\tlocalize('inlineEdit.gutterIndicator.primaryBackground', 'Background color for the primary inline edit gutter indicator.')\n);\n\nexport const inlineEditIndicatorSecondaryForeground = registerColor(\n\t'inlineEdit.gutterIndicator.secondaryForeground',\n\tbuttonSecondaryForeground,\n\tlocalize('inlineEdit.gutterIndicator.secondaryForeground', 'Foreground color for the secondary inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorSecondaryBorder = registerColor(\n\t'inlineEdit.gutterIndicator.secondaryBorder',\n\tbuttonSecondaryBackground,\n\tlocalize('inlineEdit.gutterIndicator.secondaryBorder', 'Border color for the secondary inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorSecondaryBackground = registerColor(\n\t'inlineEdit.gutterIndicator.secondaryBackground',\n\tinlineEditIndicatorSecondaryBorder,\n\tlocalize('inlineEdit.gutterIndicator.secondaryBackground', 'Background color for the secondary inline edit gutter indicator.')\n);\n\nexport const inlineEditIndicatorsuccessfulForeground = registerColor(\n\t'inlineEdit.gutterIndicator.successfulForeground',\n\tbuttonForeground,\n\tlocalize('inlineEdit.gutterIndicator.successfulForeground', 'Foreground color for the successful inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorsuccessfulBorder = registerColor(\n\t'inlineEdit.gutterIndicator.successfulBorder',\n\tbuttonBackground,\n\tlocalize('inlineEdit.gutterIndicator.successfulBorder', 'Border color for the successful inline edit gutter indicator.')\n);\nexport const inlineEditIndicatorsuccessfulBackground = registerColor(\n\t'inlineEdit.gutterIndicator.successfulBackground',\n\tinlineEditIndicatorsuccessfulBorder,\n\tlocalize('inlineEdit.gutterIndicator.successfulBackground', 'Background color for the successful inline edit gutter indicator.')\n);\n\nexport const inlineEditIndicatorBackground = registerColor(\n\t'inlineEdit.gutterIndicator.background',\n\t{\n\t\thcDark: transparent('tab.inactiveBackground', 0.5),\n\t\thcLight: transparent('tab.inactiveBackground', 0.5),\n\t\tdark: transparent('tab.inactiveBackground', 0.5),\n\t\tlight: '#5f5f5f18',\n\t},\n\tlocalize('inlineEdit.gutterIndicator.background', 'Background color for the inline edit gutter indicator.')\n);\n\n// ------- BORDER COLORS -------\n\nconst originalBorder = registerColor(\n\t'inlineEdit.originalBorder',\n\t{\n\t\tlight: diffRemoved,\n\t\tdark: diffRemoved,\n\t\thcDark: diffRemoved,\n\t\thcLight: diffRemoved\n\t},\n\tlocalize('inlineEdit.originalBorder', 'Border color for the original text in inline edits.')\n);\n\nconst modifiedBorder = registerColor(\n\t'inlineEdit.modifiedBorder',\n\t{\n\t\tlight: darken(diffInserted, 0.6),\n\t\tdark: diffInserted,\n\t\thcDark: diffInserted,\n\t\thcLight: diffInserted\n\t},\n\tlocalize('inlineEdit.modifiedBorder', 'Border color for the modified text in inline edits.')\n);\n\nconst tabWillAcceptModifiedBorder = registerColor(\n\t'inlineEdit.tabWillAcceptModifiedBorder',\n\t{\n\t\tlight: darken(modifiedBorder, 0),\n\t\tdark: darken(modifiedBorder, 0),\n\t\thcDark: darken(modifiedBorder, 0),\n\t\thcLight: darken(modifiedBorder, 0)\n\t},\n\tlocalize('inlineEdit.tabWillAcceptModifiedBorder', 'Modified border color for the inline edits widget when tab will accept it.')\n);\n\nconst tabWillAcceptOriginalBorder = registerColor(\n\t'inlineEdit.tabWillAcceptOriginalBorder',\n\t{\n\t\tlight: darken(originalBorder, 0),\n\t\tdark: darken(originalBorder, 0),\n\t\thcDark: darken(originalBorder, 0),\n\t\thcLight: darken(originalBorder, 0)\n\t},\n\tlocalize('inlineEdit.tabWillAcceptOriginalBorder', 'Original border color for the inline edits widget over the original text when tab will accept it.')\n);\n\nexport function getModifiedBorderColor(tabAction: IObservable<InlineEditTabAction>): IObservable<string> {\n\treturn tabAction.map(a => a === InlineEditTabAction.Accept ? tabWillAcceptModifiedBorder : modifiedBorder);\n}\n\nexport function getOriginalBorderColor(tabAction: IObservable<InlineEditTabAction>): IObservable<string> {\n\treturn tabAction.map(a => a === InlineEditTabAction.Accept ? tabWillAcceptOriginalBorder : originalBorder);\n}\n\nexport function getEditorBlendedColor(colorIdentifier: ColorIdentifier | IObservable<ColorIdentifier>, themeService: IThemeService): IObservable<Color> {\n\tlet color: IObservable<Color>;\n\tif (typeof colorIdentifier === 'string') {\n\t\tcolor = observeColor(colorIdentifier, themeService);\n\t} else {\n\t\tcolor = colorIdentifier.map((identifier, reader) => observeColor(identifier, themeService).read(reader));\n\t}\n\n\tconst backgroundColor = observeColor(editorBackground, themeService);\n\n\treturn color.map((c, reader) => c.makeOpaque(backgroundColor.read(reader)));\n}\n\nexport function observeColor(colorIdentifier: ColorIdentifier, themeService: IThemeService): IObservable<Color> {\n\treturn observableFromEventOpts(\n\t\t{\n\t\t\towner: { observeColor: colorIdentifier },\n\t\t\tequalsFn: (a: Color, b: Color) => a.equals(b),\n\t\t},\n\t\tthemeService.onDidColorThemeChange,\n\t\t() => {\n\t\t\tconst color = themeService.getColorTheme().getColor(colorIdentifier);\n\t\t\tif (!color) {\n\t\t\t\tthrow new BugIndicatingError(`Missing color: ${colorIdentifier}`);\n\t\t\t}\n\t\t\treturn color;\n\t\t}\n\t);\n}\n"]}