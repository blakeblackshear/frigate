#!/command/with-contenv bash
# shellcheck shell=bash
# Start the go2rtc service

set -o errexit -o nounset -o pipefail

# Logs should be sent to stdout so that s6 can collect them

function get_ip_and_port_from_supervisor() {
    local ip_address
    # Example: 192.168.1.10/24
    local ip_regex='^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})/[0-9]{1,2}$'
    if ip_address=$(
        curl -fsSL \
            -H "Authorization: Bearer ${SUPERVISOR_TOKEN}" \
            -H "Content-Type: application/json" \
            http://supervisor/network/interface/default/info |
            jq --exit-status --raw-output '.data.ipv4.address[0]'
    ) && [[ "${ip_address}" =~ ${ip_regex} ]]; then
        ip_address="${BASH_REMATCH[1]}"
        echo "[INFO] Got IP address from supervisor: ${ip_address}"
    else
        echo "[WARN] Failed to get IP address from supervisor"
        return 0
    fi

    local webrtc_port
    local port_regex='^([0-9]{1,5})$'
    if webrtc_port=$(
        curl -fsSL \
            -H "Authorization: Bearer ${SUPERVISOR_TOKEN}" \
            -H "Content-Type: application/json" \
            http://supervisor/addons/self/info |
            jq --exit-status --raw-output '.data.network["8555/tcp"]'
    ) && [[ "${webrtc_port}" =~ ${port_regex} ]]; then
        webrtc_port="${BASH_REMATCH[1]}"
        echo "[INFO] Got WebRTC port from supervisor: ${webrtc_port}"
    else
        echo "[WARN] Failed to get WebRTC port from supervisor"
        return 0
    fi

    export FRIGATE_GO2RTC_WEBRTC_CANDIDATE_INTERNAL="${ip_address}:${webrtc_port}"
}

if [[ ! -f "/dev/shm/go2rtc.yaml" ]]; then
    echo "[INFO] Preparing go2rtc config..."

    if [[ -n "${SUPERVISOR_TOKEN:-}" ]]; then
        # Running as a Home Assistant add-on, infer the IP address and port
        get_ip_and_port_from_supervisor
    fi

    python3 /usr/local/go2rtc/create_config.py
fi

readonly config_path="/config"

if [[ -x "${config_path}/go2rtc" ]]; then
  readonly binary_path="${config_path}/go2rtc"
  echo "[WARN] Using go2rtc binary from '${binary_path}' instead of the embedded one"
else
  readonly binary_path="/usr/local/go2rtc/bin/go2rtc"
fi

echo "[INFO] Starting go2rtc..."

# Replace the bash process with the go2rtc process, redirecting stderr to stdout
exec 2>&1
exec "${binary_path}" -config=/dev/shm/go2rtc.yaml
