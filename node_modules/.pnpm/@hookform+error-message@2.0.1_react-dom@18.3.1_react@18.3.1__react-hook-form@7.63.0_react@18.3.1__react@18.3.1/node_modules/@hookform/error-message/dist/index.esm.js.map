{"version":3,"file":"index.esm.js","sources":["../src/ErrorMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFormContext, get, FieldErrors } from 'react-hook-form';\nimport { Props } from './types';\n\nconst ErrorMessage = <\n  TFieldErrors extends FieldErrors,\n  TAs extends\n    | undefined\n    | React.ReactElement\n    | React.ComponentType<any>\n    | keyof JSX.IntrinsicElements = undefined\n>({\n  as,\n  errors,\n  name,\n  message,\n  render,\n  ...rest\n}: Props<TFieldErrors, TAs>) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.formState.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const { message: messageFromRegister, types } = error;\n  const props = Object.assign({}, rest, {\n    children: messageFromRegister || message,\n  });\n\n  return React.isValidElement(as)\n    ? React.cloneElement(as, props)\n    : render\n    ? (render({\n        message: messageFromRegister || message,\n        messages: types,\n      }) as React.ReactElement)\n    : React.createElement((as as string) || React.Fragment, props);\n};\n\nexport { ErrorMessage };\n"],"names":["ErrorMessage","as","errors","name","message","render","rest","methods","useFormContext","error","get","formState","messageFromRegister","types","props","Object","assign","children","React","isValidElement","cloneElement","messages","createElement","Fragment"],"mappings":"kFAIMA,IAAAA,EAAe,gBAQnBC,IAAAA,GACAC,IAAAA,OACAC,IAAAA,KACAC,IAAAA,QACAC,IAAAA,OACGC,kLAEGC,EAAUC,IACVC,EAAQC,EAAIR,GAAUK,EAAQI,UAAUT,OAAQC,GAEtD,IAAKM,EACH,YAGF,IAAiBG,EAA+BH,EAAxCL,QAA8BS,EAAUJ,EAAVI,MAChCC,EAAQC,OAAOC,OAAO,GAAIV,EAAM,CACpCW,SAAUL,GAAuBR,IAGnC,OAAOc,EAAMC,eAAelB,GACxBiB,EAAME,aAAanB,EAAIa,GACvBT,EACCA,EAAO,CACND,QAASQ,GAAuBR,EAChCiB,SAAUR,IAEZK,EAAMI,cAAerB,GAAiBiB,EAAMK,SAAUT"}