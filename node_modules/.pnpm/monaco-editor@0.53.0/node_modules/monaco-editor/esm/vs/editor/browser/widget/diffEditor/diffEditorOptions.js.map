{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/diffEditor/diffEditorOptions.ts","vs/editor/browser/widget/diffEditor/diffEditorOptions.ts"],"names":[],"mappings":"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","file":"diffEditorOptions.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, IObservableWithChange, ISettableObservable, derived, derivedConstOnceDefined, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { diffEditorDefaultOptions } from '../../../common/config/diffEditor.js';\nimport { IDiffEditorBaseOptions, IDiffEditorOptions, IEditorOptions, ValidDiffEditorBaseOptions, clampedFloat, clampedInt, boolean as validateBooleanOption, stringSet as validateStringSetOption } from '../../../common/config/editorOptions.js';\nimport { LineRangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { allowsTrueInlineDiffRendering } from './components/diffEditorViewZones/diffEditorViewZones.js';\nimport { DiffEditorViewModel, DiffState } from './diffEditorViewModel.js';\n\nexport class DiffEditorOptions {\n\tprivate readonly _options: ISettableObservable<IEditorOptions & Required<IDiffEditorBaseOptions>, { changedOptions: IDiffEditorOptions }>;\n\n\tpublic get editorOptions(): IObservableWithChange<IEditorOptions, { changedOptions: IEditorOptions }> { return this._options; }\n\n\tprivate readonly _diffEditorWidth;\n\n\tprivate readonly _screenReaderMode;\n\n\tconstructor(\n\t\toptions: Readonly<IDiffEditorOptions>,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t) {\n\t\tthis._diffEditorWidth = observableValue<number>(this, 0);\n\t\tthis._screenReaderMode = observableFromEvent(this, this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized());\n\t\tthis.couldShowInlineViewBecauseOfSize = derived(this, reader =>\n\t\t\tthis._options.read(reader).renderSideBySide && this._diffEditorWidth.read(reader) <= this._options.read(reader).renderSideBySideInlineBreakpoint\n\t\t);\n\t\tthis.renderOverviewRuler = derived(this, reader => this._options.read(reader).renderOverviewRuler);\n\t\tthis.renderSideBySide = derived(this, reader => {\n\t\t\tif (this.compactMode.read(reader)) {\n\t\t\t\tif (this.shouldRenderInlineViewInSmartMode.read(reader)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._options.read(reader).renderSideBySide\n\t\t\t\t&& !(this._options.read(reader).useInlineViewWhenSpaceIsLimited && this.couldShowInlineViewBecauseOfSize.read(reader) && !this._screenReaderMode.read(reader));\n\t\t});\n\t\tthis.readOnly = derived(this, reader => this._options.read(reader).readOnly);\n\t\tthis.shouldRenderOldRevertArrows = derived(this, reader => {\n\t\t\tif (!this._options.read(reader).renderMarginRevertIcon) { return false; }\n\t\t\tif (!this.renderSideBySide.read(reader)) { return false; }\n\t\t\tif (this.readOnly.read(reader)) { return false; }\n\t\t\tif (this.shouldRenderGutterMenu.read(reader)) { return false; }\n\t\t\treturn true;\n\t\t});\n\t\tthis.shouldRenderGutterMenu = derived(this, reader => this._options.read(reader).renderGutterMenu);\n\t\tthis.renderIndicators = derived(this, reader => this._options.read(reader).renderIndicators);\n\t\tthis.enableSplitViewResizing = derived(this, reader => this._options.read(reader).enableSplitViewResizing);\n\t\tthis.splitViewDefaultRatio = derived(this, reader => this._options.read(reader).splitViewDefaultRatio);\n\t\tthis.ignoreTrimWhitespace = derived(this, reader => this._options.read(reader).ignoreTrimWhitespace);\n\t\tthis.maxComputationTimeMs = derived(this, reader => this._options.read(reader).maxComputationTime);\n\t\tthis.showMoves = derived(this, reader => this._options.read(reader).experimental.showMoves! && this.renderSideBySide.read(reader));\n\t\tthis.isInEmbeddedEditor = derived(this, reader => this._options.read(reader).isInEmbeddedEditor);\n\t\tthis.diffWordWrap = derived(this, reader => this._options.read(reader).diffWordWrap);\n\t\tthis.originalEditable = derived(this, reader => this._options.read(reader).originalEditable);\n\t\tthis.diffCodeLens = derived(this, reader => this._options.read(reader).diffCodeLens);\n\t\tthis.accessibilityVerbose = derived(this, reader => this._options.read(reader).accessibilityVerbose);\n\t\tthis.diffAlgorithm = derived(this, reader => this._options.read(reader).diffAlgorithm);\n\t\tthis.showEmptyDecorations = derived(this, reader => this._options.read(reader).experimental.showEmptyDecorations!);\n\t\tthis.onlyShowAccessibleDiffViewer = derived(this, reader => this._options.read(reader).onlyShowAccessibleDiffViewer);\n\t\tthis.compactMode = derived(this, reader => this._options.read(reader).compactMode);\n\t\tthis.trueInlineDiffRenderingEnabled = derived(this, reader =>\n\t\t\tthis._options.read(reader).experimental.useTrueInlineView!\n\t\t);\n\t\tthis.useTrueInlineDiffRendering = derived(this, reader =>\n\t\t\t!this.renderSideBySide.read(reader) && this.trueInlineDiffRenderingEnabled.read(reader)\n\t\t);\n\t\tthis.hideUnchangedRegions = derived(this, reader => this._options.read(reader).hideUnchangedRegions.enabled!);\n\t\tthis.hideUnchangedRegionsRevealLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.revealLineCount!);\n\t\tthis.hideUnchangedRegionsContextLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.contextLineCount!);\n\t\tthis.hideUnchangedRegionsMinimumLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.minimumLineCount!);\n\t\tthis._model = observableValue<DiffEditorViewModel | undefined>(this, undefined);\n\t\tthis.shouldRenderInlineViewInSmartMode = this._model\n\t\t\t.map(this, model => derivedConstOnceDefined(this, reader => {\n\t\t\t\tconst diffs = model?.diff.read(reader);\n\t\t\t\treturn diffs ? isSimpleDiff(diffs, this.trueInlineDiffRenderingEnabled.read(reader)) : undefined;\n\t\t\t}))\n\t\t\t.flatten()\n\t\t\t.map(this, v => !!v);\n\t\tthis.inlineViewHideOriginalLineNumbers = this.compactMode;\n\t\tconst optionsCopy = { ...options, ...validateDiffEditorOptions(options, diffEditorDefaultOptions) };\n\t\tthis._options = observableValue(this, optionsCopy);\n\t}\n\n\tpublic readonly couldShowInlineViewBecauseOfSize;\n\n\tpublic readonly renderOverviewRuler;\n\tpublic readonly renderSideBySide;\n\tpublic readonly readOnly;\n\n\tpublic readonly shouldRenderOldRevertArrows;\n\n\tpublic readonly shouldRenderGutterMenu;\n\tpublic readonly renderIndicators;\n\tpublic readonly enableSplitViewResizing;\n\tpublic readonly splitViewDefaultRatio;\n\tpublic readonly ignoreTrimWhitespace;\n\tpublic readonly maxComputationTimeMs;\n\tpublic readonly showMoves;\n\tpublic readonly isInEmbeddedEditor;\n\tpublic readonly diffWordWrap;\n\tpublic readonly originalEditable;\n\tpublic readonly diffCodeLens;\n\tpublic readonly accessibilityVerbose;\n\tpublic readonly diffAlgorithm;\n\tpublic readonly showEmptyDecorations;\n\tpublic readonly onlyShowAccessibleDiffViewer;\n\tpublic readonly compactMode;\n\tprivate readonly trueInlineDiffRenderingEnabled: IObservable<boolean>;\n\n\tpublic readonly useTrueInlineDiffRendering: IObservable<boolean>;\n\n\tpublic readonly hideUnchangedRegions;\n\tpublic readonly hideUnchangedRegionsRevealLineCount;\n\tpublic readonly hideUnchangedRegionsContextLineCount;\n\tpublic readonly hideUnchangedRegionsMinimumLineCount;\n\n\tpublic updateOptions(changedOptions: IDiffEditorOptions): void {\n\t\tconst newDiffEditorOptions = validateDiffEditorOptions(changedOptions, this._options.get());\n\t\tconst newOptions = { ...this._options.get(), ...changedOptions, ...newDiffEditorOptions };\n\t\tthis._options.set(newOptions, undefined, { changedOptions: changedOptions });\n\t}\n\n\tpublic setWidth(width: number): void {\n\t\tthis._diffEditorWidth.set(width, undefined);\n\t}\n\n\tprivate readonly _model;\n\n\tpublic setModel(model: DiffEditorViewModel | undefined) {\n\t\tthis._model.set(model, undefined);\n\t}\n\n\tprivate readonly shouldRenderInlineViewInSmartMode;\n\n\tpublic readonly inlineViewHideOriginalLineNumbers;\n}\n\nfunction isSimpleDiff(diff: DiffState, supportsTrueDiffRendering: boolean): boolean {\n\treturn diff.mappings.every(m => isInsertion(m.lineRangeMapping) || isDeletion(m.lineRangeMapping) || (supportsTrueDiffRendering && allowsTrueInlineDiffRendering(m.lineRangeMapping)));\n}\n\nfunction isInsertion(mapping: LineRangeMapping): boolean {\n\treturn mapping.original.length === 0;\n}\n\nfunction isDeletion(mapping: LineRangeMapping): boolean {\n\treturn mapping.modified.length === 0;\n}\n\nfunction validateDiffEditorOptions(options: Readonly<IDiffEditorOptions>, defaults: typeof diffEditorDefaultOptions | ValidDiffEditorBaseOptions): ValidDiffEditorBaseOptions {\n\treturn {\n\t\tenableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n\t\tsplitViewDefaultRatio: clampedFloat(options.splitViewDefaultRatio, 0.5, 0.1, 0.9),\n\t\trenderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n\t\trenderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n\t\tmaxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tmaxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n\t\trenderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n\t\toriginalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n\t\tdiffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n\t\trenderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n\t\tdiffWordWrap: validateStringSetOption<'off' | 'on' | 'inherit'>(options.diffWordWrap, defaults.diffWordWrap, ['off', 'on', 'inherit']),\n\t\tdiffAlgorithm: validateStringSetOption(options.diffAlgorithm, defaults.diffAlgorithm, ['legacy', 'advanced'], { 'smart': 'legacy', 'experimental': 'advanced' }),\n\t\taccessibilityVerbose: validateBooleanOption(options.accessibilityVerbose, defaults.accessibilityVerbose),\n\t\texperimental: {\n\t\t\tshowMoves: validateBooleanOption(options.experimental?.showMoves, defaults.experimental.showMoves!),\n\t\t\tshowEmptyDecorations: validateBooleanOption(options.experimental?.showEmptyDecorations, defaults.experimental.showEmptyDecorations!),\n\t\t\tuseTrueInlineView: validateBooleanOption(options.experimental?.useTrueInlineView, defaults.experimental.useTrueInlineView!),\n\t\t},\n\t\thideUnchangedRegions: {\n\t\t\tenabled: validateBooleanOption(options.hideUnchangedRegions?.enabled ?? (options.experimental as any)?.collapseUnchangedRegions, defaults.hideUnchangedRegions.enabled!),\n\t\t\tcontextLineCount: clampedInt(options.hideUnchangedRegions?.contextLineCount, defaults.hideUnchangedRegions.contextLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\tminimumLineCount: clampedInt(options.hideUnchangedRegions?.minimumLineCount, defaults.hideUnchangedRegions.minimumLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\trevealLineCount: clampedInt(options.hideUnchangedRegions?.revealLineCount, defaults.hideUnchangedRegions.revealLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t},\n\t\tisInEmbeddedEditor: validateBooleanOption(options.isInEmbeddedEditor, defaults.isInEmbeddedEditor),\n\t\tonlyShowAccessibleDiffViewer: validateBooleanOption(options.onlyShowAccessibleDiffViewer, defaults.onlyShowAccessibleDiffViewer),\n\t\trenderSideBySideInlineBreakpoint: clampedInt(options.renderSideBySideInlineBreakpoint, defaults.renderSideBySideInlineBreakpoint, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tuseInlineViewWhenSpaceIsLimited: validateBooleanOption(options.useInlineViewWhenSpaceIsLimited, defaults.useInlineViewWhenSpaceIsLimited),\n\t\trenderGutterMenu: validateBooleanOption(options.renderGutterMenu, defaults.renderGutterMenu),\n\t\tcompactMode: validateBooleanOption(options.compactMode, defaults.compactMode),\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, IObservableWithChange, ISettableObservable, derived, derivedConstOnceDefined, observableFromEvent, observableValue } from '../../../../base/common/observable.js';\nimport { Constants } from '../../../../base/common/uint.js';\nimport { IAccessibilityService } from '../../../../platform/accessibility/common/accessibility.js';\nimport { diffEditorDefaultOptions } from '../../../common/config/diffEditor.js';\nimport { IDiffEditorBaseOptions, IDiffEditorOptions, IEditorOptions, ValidDiffEditorBaseOptions, clampedFloat, clampedInt, boolean as validateBooleanOption, stringSet as validateStringSetOption } from '../../../common/config/editorOptions.js';\nimport { LineRangeMapping } from '../../../common/diff/rangeMapping.js';\nimport { allowsTrueInlineDiffRendering } from './components/diffEditorViewZones/diffEditorViewZones.js';\nimport { DiffEditorViewModel, DiffState } from './diffEditorViewModel.js';\n\nexport class DiffEditorOptions {\n\tprivate readonly _options: ISettableObservable<IEditorOptions & Required<IDiffEditorBaseOptions>, { changedOptions: IDiffEditorOptions }>;\n\n\tpublic get editorOptions(): IObservableWithChange<IEditorOptions, { changedOptions: IEditorOptions }> { return this._options; }\n\n\tprivate readonly _diffEditorWidth;\n\n\tprivate readonly _screenReaderMode;\n\n\tconstructor(\n\t\toptions: Readonly<IDiffEditorOptions>,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t) {\n\t\tthis._diffEditorWidth = observableValue<number>(this, 0);\n\t\tthis._screenReaderMode = observableFromEvent(this, this._accessibilityService.onDidChangeScreenReaderOptimized, () => this._accessibilityService.isScreenReaderOptimized());\n\t\tthis.couldShowInlineViewBecauseOfSize = derived(this, reader =>\n\t\t\tthis._options.read(reader).renderSideBySide && this._diffEditorWidth.read(reader) <= this._options.read(reader).renderSideBySideInlineBreakpoint\n\t\t);\n\t\tthis.renderOverviewRuler = derived(this, reader => this._options.read(reader).renderOverviewRuler);\n\t\tthis.renderSideBySide = derived(this, reader => {\n\t\t\tif (this.compactMode.read(reader)) {\n\t\t\t\tif (this.shouldRenderInlineViewInSmartMode.read(reader)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._options.read(reader).renderSideBySide\n\t\t\t\t&& !(this._options.read(reader).useInlineViewWhenSpaceIsLimited && this.couldShowInlineViewBecauseOfSize.read(reader) && !this._screenReaderMode.read(reader));\n\t\t});\n\t\tthis.readOnly = derived(this, reader => this._options.read(reader).readOnly);\n\t\tthis.shouldRenderOldRevertArrows = derived(this, reader => {\n\t\t\tif (!this._options.read(reader).renderMarginRevertIcon) { return false; }\n\t\t\tif (!this.renderSideBySide.read(reader)) { return false; }\n\t\t\tif (this.readOnly.read(reader)) { return false; }\n\t\t\tif (this.shouldRenderGutterMenu.read(reader)) { return false; }\n\t\t\treturn true;\n\t\t});\n\t\tthis.shouldRenderGutterMenu = derived(this, reader => this._options.read(reader).renderGutterMenu);\n\t\tthis.renderIndicators = derived(this, reader => this._options.read(reader).renderIndicators);\n\t\tthis.enableSplitViewResizing = derived(this, reader => this._options.read(reader).enableSplitViewResizing);\n\t\tthis.splitViewDefaultRatio = derived(this, reader => this._options.read(reader).splitViewDefaultRatio);\n\t\tthis.ignoreTrimWhitespace = derived(this, reader => this._options.read(reader).ignoreTrimWhitespace);\n\t\tthis.maxComputationTimeMs = derived(this, reader => this._options.read(reader).maxComputationTime);\n\t\tthis.showMoves = derived(this, reader => this._options.read(reader).experimental.showMoves! && this.renderSideBySide.read(reader));\n\t\tthis.isInEmbeddedEditor = derived(this, reader => this._options.read(reader).isInEmbeddedEditor);\n\t\tthis.diffWordWrap = derived(this, reader => this._options.read(reader).diffWordWrap);\n\t\tthis.originalEditable = derived(this, reader => this._options.read(reader).originalEditable);\n\t\tthis.diffCodeLens = derived(this, reader => this._options.read(reader).diffCodeLens);\n\t\tthis.accessibilityVerbose = derived(this, reader => this._options.read(reader).accessibilityVerbose);\n\t\tthis.diffAlgorithm = derived(this, reader => this._options.read(reader).diffAlgorithm);\n\t\tthis.showEmptyDecorations = derived(this, reader => this._options.read(reader).experimental.showEmptyDecorations!);\n\t\tthis.onlyShowAccessibleDiffViewer = derived(this, reader => this._options.read(reader).onlyShowAccessibleDiffViewer);\n\t\tthis.compactMode = derived(this, reader => this._options.read(reader).compactMode);\n\t\tthis.trueInlineDiffRenderingEnabled = derived(this, reader =>\n\t\t\tthis._options.read(reader).experimental.useTrueInlineView!\n\t\t);\n\t\tthis.useTrueInlineDiffRendering = derived(this, reader =>\n\t\t\t!this.renderSideBySide.read(reader) && this.trueInlineDiffRenderingEnabled.read(reader)\n\t\t);\n\t\tthis.hideUnchangedRegions = derived(this, reader => this._options.read(reader).hideUnchangedRegions.enabled!);\n\t\tthis.hideUnchangedRegionsRevealLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.revealLineCount!);\n\t\tthis.hideUnchangedRegionsContextLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.contextLineCount!);\n\t\tthis.hideUnchangedRegionsMinimumLineCount = derived(this, reader => this._options.read(reader).hideUnchangedRegions.minimumLineCount!);\n\t\tthis._model = observableValue<DiffEditorViewModel | undefined>(this, undefined);\n\t\tthis.shouldRenderInlineViewInSmartMode = this._model\n\t\t\t.map(this, model => derivedConstOnceDefined(this, reader => {\n\t\t\t\tconst diffs = model?.diff.read(reader);\n\t\t\t\treturn diffs ? isSimpleDiff(diffs, this.trueInlineDiffRenderingEnabled.read(reader)) : undefined;\n\t\t\t}))\n\t\t\t.flatten()\n\t\t\t.map(this, v => !!v);\n\t\tthis.inlineViewHideOriginalLineNumbers = this.compactMode;\n\t\tconst optionsCopy = { ...options, ...validateDiffEditorOptions(options, diffEditorDefaultOptions) };\n\t\tthis._options = observableValue(this, optionsCopy);\n\t}\n\n\tpublic readonly couldShowInlineViewBecauseOfSize;\n\n\tpublic readonly renderOverviewRuler;\n\tpublic readonly renderSideBySide;\n\tpublic readonly readOnly;\n\n\tpublic readonly shouldRenderOldRevertArrows;\n\n\tpublic readonly shouldRenderGutterMenu;\n\tpublic readonly renderIndicators;\n\tpublic readonly enableSplitViewResizing;\n\tpublic readonly splitViewDefaultRatio;\n\tpublic readonly ignoreTrimWhitespace;\n\tpublic readonly maxComputationTimeMs;\n\tpublic readonly showMoves;\n\tpublic readonly isInEmbeddedEditor;\n\tpublic readonly diffWordWrap;\n\tpublic readonly originalEditable;\n\tpublic readonly diffCodeLens;\n\tpublic readonly accessibilityVerbose;\n\tpublic readonly diffAlgorithm;\n\tpublic readonly showEmptyDecorations;\n\tpublic readonly onlyShowAccessibleDiffViewer;\n\tpublic readonly compactMode;\n\tprivate readonly trueInlineDiffRenderingEnabled: IObservable<boolean>;\n\n\tpublic readonly useTrueInlineDiffRendering: IObservable<boolean>;\n\n\tpublic readonly hideUnchangedRegions;\n\tpublic readonly hideUnchangedRegionsRevealLineCount;\n\tpublic readonly hideUnchangedRegionsContextLineCount;\n\tpublic readonly hideUnchangedRegionsMinimumLineCount;\n\n\tpublic updateOptions(changedOptions: IDiffEditorOptions): void {\n\t\tconst newDiffEditorOptions = validateDiffEditorOptions(changedOptions, this._options.get());\n\t\tconst newOptions = { ...this._options.get(), ...changedOptions, ...newDiffEditorOptions };\n\t\tthis._options.set(newOptions, undefined, { changedOptions: changedOptions });\n\t}\n\n\tpublic setWidth(width: number): void {\n\t\tthis._diffEditorWidth.set(width, undefined);\n\t}\n\n\tprivate readonly _model;\n\n\tpublic setModel(model: DiffEditorViewModel | undefined) {\n\t\tthis._model.set(model, undefined);\n\t}\n\n\tprivate readonly shouldRenderInlineViewInSmartMode;\n\n\tpublic readonly inlineViewHideOriginalLineNumbers;\n}\n\nfunction isSimpleDiff(diff: DiffState, supportsTrueDiffRendering: boolean): boolean {\n\treturn diff.mappings.every(m => isInsertion(m.lineRangeMapping) || isDeletion(m.lineRangeMapping) || (supportsTrueDiffRendering && allowsTrueInlineDiffRendering(m.lineRangeMapping)));\n}\n\nfunction isInsertion(mapping: LineRangeMapping): boolean {\n\treturn mapping.original.length === 0;\n}\n\nfunction isDeletion(mapping: LineRangeMapping): boolean {\n\treturn mapping.modified.length === 0;\n}\n\nfunction validateDiffEditorOptions(options: Readonly<IDiffEditorOptions>, defaults: typeof diffEditorDefaultOptions | ValidDiffEditorBaseOptions): ValidDiffEditorBaseOptions {\n\treturn {\n\t\tenableSplitViewResizing: validateBooleanOption(options.enableSplitViewResizing, defaults.enableSplitViewResizing),\n\t\tsplitViewDefaultRatio: clampedFloat(options.splitViewDefaultRatio, 0.5, 0.1, 0.9),\n\t\trenderSideBySide: validateBooleanOption(options.renderSideBySide, defaults.renderSideBySide),\n\t\trenderMarginRevertIcon: validateBooleanOption(options.renderMarginRevertIcon, defaults.renderMarginRevertIcon),\n\t\tmaxComputationTime: clampedInt(options.maxComputationTime, defaults.maxComputationTime, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tmaxFileSize: clampedInt(options.maxFileSize, defaults.maxFileSize, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tignoreTrimWhitespace: validateBooleanOption(options.ignoreTrimWhitespace, defaults.ignoreTrimWhitespace),\n\t\trenderIndicators: validateBooleanOption(options.renderIndicators, defaults.renderIndicators),\n\t\toriginalEditable: validateBooleanOption(options.originalEditable, defaults.originalEditable),\n\t\tdiffCodeLens: validateBooleanOption(options.diffCodeLens, defaults.diffCodeLens),\n\t\trenderOverviewRuler: validateBooleanOption(options.renderOverviewRuler, defaults.renderOverviewRuler),\n\t\tdiffWordWrap: validateStringSetOption<'off' | 'on' | 'inherit'>(options.diffWordWrap, defaults.diffWordWrap, ['off', 'on', 'inherit']),\n\t\tdiffAlgorithm: validateStringSetOption(options.diffAlgorithm, defaults.diffAlgorithm, ['legacy', 'advanced'], { 'smart': 'legacy', 'experimental': 'advanced' }),\n\t\taccessibilityVerbose: validateBooleanOption(options.accessibilityVerbose, defaults.accessibilityVerbose),\n\t\texperimental: {\n\t\t\tshowMoves: validateBooleanOption(options.experimental?.showMoves, defaults.experimental.showMoves!),\n\t\t\tshowEmptyDecorations: validateBooleanOption(options.experimental?.showEmptyDecorations, defaults.experimental.showEmptyDecorations!),\n\t\t\tuseTrueInlineView: validateBooleanOption(options.experimental?.useTrueInlineView, defaults.experimental.useTrueInlineView!),\n\t\t},\n\t\thideUnchangedRegions: {\n\t\t\tenabled: validateBooleanOption(options.hideUnchangedRegions?.enabled ?? (options.experimental as any)?.collapseUnchangedRegions, defaults.hideUnchangedRegions.enabled!),\n\t\t\tcontextLineCount: clampedInt(options.hideUnchangedRegions?.contextLineCount, defaults.hideUnchangedRegions.contextLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\tminimumLineCount: clampedInt(options.hideUnchangedRegions?.minimumLineCount, defaults.hideUnchangedRegions.minimumLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\trevealLineCount: clampedInt(options.hideUnchangedRegions?.revealLineCount, defaults.hideUnchangedRegions.revealLineCount!, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t},\n\t\tisInEmbeddedEditor: validateBooleanOption(options.isInEmbeddedEditor, defaults.isInEmbeddedEditor),\n\t\tonlyShowAccessibleDiffViewer: validateBooleanOption(options.onlyShowAccessibleDiffViewer, defaults.onlyShowAccessibleDiffViewer),\n\t\trenderSideBySideInlineBreakpoint: clampedInt(options.renderSideBySideInlineBreakpoint, defaults.renderSideBySideInlineBreakpoint, 0, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\tuseInlineViewWhenSpaceIsLimited: validateBooleanOption(options.useInlineViewWhenSpaceIsLimited, defaults.useInlineViewWhenSpaceIsLimited),\n\t\trenderGutterMenu: validateBooleanOption(options.renderGutterMenu, defaults.renderGutterMenu),\n\t\tcompactMode: validateBooleanOption(options.compactMode, defaults.compactMode),\n\t};\n}\n"]}