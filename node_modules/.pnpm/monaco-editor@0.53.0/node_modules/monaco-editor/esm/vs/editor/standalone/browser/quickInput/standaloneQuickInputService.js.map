{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts","vs/editor/standalone/browser/quickInput/standaloneQuickInputService.ts"],"names":[],"mappings":"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","file":"standaloneQuickInputService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './standaloneQuickInput.css';\nimport { Event } from '../../../../base/common/event.js';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, OverlayWidgetPositionPreference } from '../../../browser/editorBrowser.js';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPick, IInputBox, IPickOptions, QuickPickInput, IInputOptions } from '../../../../platform/quickinput/common/quickInput.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { EditorScopedLayoutService } from '../standaloneLayoutService.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { QuickInputController, IQuickInputControllerHost } from '../../../../platform/quickinput/browser/quickInputController.js';\nimport { QuickInputService } from '../../../../platform/quickinput/browser/quickInputService.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nclass EditorScopedQuickInputService extends QuickInputService {\n\n\tprivate host: IQuickInputControllerHost | undefined = undefined;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(\n\t\t\tinstantiationService,\n\t\t\tcontextKeyService,\n\t\t\tthemeService,\n\t\t\tnew EditorScopedLayoutService(editor.getContainerDomNode(), codeEditorService),\n\t\t\tconfigurationService,\n\t\t);\n\n\t\t// Use the passed in code editor as host for the quick input widget\n\t\tconst contribution = QuickInputEditorContribution.get(editor);\n\t\tif (contribution) {\n\t\t\tconst widget = contribution.widget;\n\t\t\tthis.host = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tget mainContainer() { return widget.getDomNode(); },\n\t\t\t\tgetContainer() { return widget.getDomNode(); },\n\t\t\t\twhenContainerStylesLoaded() { return undefined; },\n\t\t\t\tget containers() { return [widget.getDomNode()]; },\n\t\t\t\tget activeContainer() { return widget.getDomNode(); },\n\t\t\t\tget mainContainerDimension() { return editor.getLayoutInfo(); },\n\t\t\t\tget activeContainerDimension() { return editor.getLayoutInfo(); },\n\t\t\t\tget onDidLayoutMainContainer() { return editor.onDidLayoutChange; },\n\t\t\t\tget onDidLayoutActiveContainer() { return editor.onDidLayoutChange; },\n\t\t\t\tget onDidLayoutContainer() { return Event.map(editor.onDidLayoutChange, dimension => ({ container: widget.getDomNode(), dimension })); },\n\t\t\t\tget onDidChangeActiveContainer() { return Event.None; },\n\t\t\t\tget onDidAddContainer() { return Event.None; },\n\t\t\t\tget mainContainerOffset() { return { top: 0, quickPickTop: 0 }; },\n\t\t\t\tget activeContainerOffset() { return { top: 0, quickPickTop: 0 }; },\n\t\t\t\tfocus: () => editor.focus()\n\t\t\t};\n\t\t} else {\n\t\t\tthis.host = undefined;\n\t\t}\n\t}\n\n\tprotected override createController(): QuickInputController {\n\t\treturn super.createController(this.host);\n\t}\n}\n\nexport class StandaloneQuickInputService implements IQuickInputService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate mapEditorToService = new Map<ICodeEditor, EditorScopedQuickInputService>();\n\tprivate get activeService(): IQuickInputService {\n\t\tconst editor = this.codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\tthrow new Error('Quick input service needs a focused editor to work.');\n\t\t}\n\n\t\t// Find the quick input implementation for the focused\n\t\t// editor or create it lazily if not yet created\n\t\tlet quickInputService = this.mapEditorToService.get(editor);\n\t\tif (!quickInputService) {\n\t\t\tconst newQuickInputService = quickInputService = this.instantiationService.createInstance(EditorScopedQuickInputService, editor);\n\t\t\tthis.mapEditorToService.set(editor, quickInputService);\n\n\t\t\tcreateSingleCallFunction(editor.onDidDispose)(() => {\n\t\t\t\tnewQuickInputService.dispose();\n\t\t\t\tthis.mapEditorToService.delete(editor);\n\t\t\t});\n\t\t}\n\n\t\treturn quickInputService;\n\t}\n\n\tget currentQuickInput() { return this.activeService.currentQuickInput; }\n\tget quickAccess() { return this.activeService.quickAccess; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t}\n\n\tpick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: O, token: CancellationToken = CancellationToken.None): Promise<(O extends { canPickMany: true } ? T[] : T) | undefined> {\n\t\treturn (this.activeService as unknown as QuickInputController /* TS fail */).pick(picks, options, token);\n\t}\n\n\tinput(options?: IInputOptions | undefined, token?: CancellationToken | undefined): Promise<string | undefined> {\n\t\treturn this.activeService.input(options, token);\n\t}\n\n\tcreateQuickPick<T extends IQuickPickItem>(options: { useSeparators: true }): IQuickPick<T, { useSeparators: true }>;\n\tcreateQuickPick<T extends IQuickPickItem>(options?: { useSeparators: boolean }): IQuickPick<T, { useSeparators: false }>;\n\tcreateQuickPick<T extends IQuickPickItem>(options: { useSeparators: boolean } = { useSeparators: false }): IQuickPick<T, { useSeparators: boolean }> {\n\t\treturn this.activeService.createQuickPick(options);\n\t}\n\n\tcreateInputBox(): IInputBox {\n\t\treturn this.activeService.createInputBox();\n\t}\n\n\ttoggleHover(): void {\n\t\treturn this.activeService.toggleHover();\n\t}\n}\n\nexport class QuickInputEditorContribution implements IEditorContribution {\n\n\tstatic readonly ID = 'editor.controller.quickInput';\n\n\tstatic get(editor: ICodeEditor): QuickInputEditorContribution | null {\n\t\treturn editor.getContribution<QuickInputEditorContribution>(QuickInputEditorContribution.ID);\n\t}\n\n\treadonly widget: QuickInputEditorWidget;\n\n\tconstructor(private editor: ICodeEditor) {\n\t\tthis.widget = new QuickInputEditorWidget(this.editor);\n\t}\n\n\tdispose(): void {\n\t\tthis.widget.dispose();\n\t}\n}\n\nexport class QuickInputEditorWidget implements IOverlayWidget {\n\n\tprivate static readonly ID = 'editor.contrib.quickInputWidget';\n\n\tprivate domNode: HTMLElement;\n\n\tconstructor(private codeEditor: ICodeEditor) {\n\t\tthis.domNode = document.createElement('div');\n\n\t\tthis.codeEditor.addOverlayWidget(this);\n\t}\n\n\tgetId(): string {\n\t\treturn QuickInputEditorWidget.ID;\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IOverlayWidgetPosition | null {\n\t\treturn { preference: OverlayWidgetPositionPreference.TOP_CENTER };\n\t}\n\n\tdispose(): void {\n\t\tthis.codeEditor.removeOverlayWidget(this);\n\t}\n}\n\nregisterEditorContribution(QuickInputEditorContribution.ID, QuickInputEditorContribution, EditorContributionInstantiation.Lazy);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './standaloneQuickInput.css';\nimport { Event } from '../../../../base/common/event.js';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition, OverlayWidgetPositionPreference } from '../../../browser/editorBrowser.js';\nimport { EditorContributionInstantiation, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\nimport { IQuickInputService, IQuickPickItem, IQuickPick, IInputBox, IPickOptions, QuickPickInput, IInputOptions } from '../../../../platform/quickinput/common/quickInput.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { EditorScopedLayoutService } from '../standaloneLayoutService.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { QuickInputController, IQuickInputControllerHost } from '../../../../platform/quickinput/browser/quickInputController.js';\nimport { QuickInputService } from '../../../../platform/quickinput/browser/quickInputService.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n\nclass EditorScopedQuickInputService extends QuickInputService {\n\n\tprivate host: IQuickInputControllerHost | undefined = undefined;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t) {\n\t\tsuper(\n\t\t\tinstantiationService,\n\t\t\tcontextKeyService,\n\t\t\tthemeService,\n\t\t\tnew EditorScopedLayoutService(editor.getContainerDomNode(), codeEditorService),\n\t\t\tconfigurationService,\n\t\t);\n\n\t\t// Use the passed in code editor as host for the quick input widget\n\t\tconst contribution = QuickInputEditorContribution.get(editor);\n\t\tif (contribution) {\n\t\t\tconst widget = contribution.widget;\n\t\t\tthis.host = {\n\t\t\t\t_serviceBrand: undefined,\n\t\t\t\tget mainContainer() { return widget.getDomNode(); },\n\t\t\t\tgetContainer() { return widget.getDomNode(); },\n\t\t\t\twhenContainerStylesLoaded() { return undefined; },\n\t\t\t\tget containers() { return [widget.getDomNode()]; },\n\t\t\t\tget activeContainer() { return widget.getDomNode(); },\n\t\t\t\tget mainContainerDimension() { return editor.getLayoutInfo(); },\n\t\t\t\tget activeContainerDimension() { return editor.getLayoutInfo(); },\n\t\t\t\tget onDidLayoutMainContainer() { return editor.onDidLayoutChange; },\n\t\t\t\tget onDidLayoutActiveContainer() { return editor.onDidLayoutChange; },\n\t\t\t\tget onDidLayoutContainer() { return Event.map(editor.onDidLayoutChange, dimension => ({ container: widget.getDomNode(), dimension })); },\n\t\t\t\tget onDidChangeActiveContainer() { return Event.None; },\n\t\t\t\tget onDidAddContainer() { return Event.None; },\n\t\t\t\tget mainContainerOffset() { return { top: 0, quickPickTop: 0 }; },\n\t\t\t\tget activeContainerOffset() { return { top: 0, quickPickTop: 0 }; },\n\t\t\t\tfocus: () => editor.focus()\n\t\t\t};\n\t\t} else {\n\t\t\tthis.host = undefined;\n\t\t}\n\t}\n\n\tprotected override createController(): QuickInputController {\n\t\treturn super.createController(this.host);\n\t}\n}\n\nexport class StandaloneQuickInputService implements IQuickInputService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate mapEditorToService = new Map<ICodeEditor, EditorScopedQuickInputService>();\n\tprivate get activeService(): IQuickInputService {\n\t\tconst editor = this.codeEditorService.getFocusedCodeEditor();\n\t\tif (!editor) {\n\t\t\tthrow new Error('Quick input service needs a focused editor to work.');\n\t\t}\n\n\t\t// Find the quick input implementation for the focused\n\t\t// editor or create it lazily if not yet created\n\t\tlet quickInputService = this.mapEditorToService.get(editor);\n\t\tif (!quickInputService) {\n\t\t\tconst newQuickInputService = quickInputService = this.instantiationService.createInstance(EditorScopedQuickInputService, editor);\n\t\t\tthis.mapEditorToService.set(editor, quickInputService);\n\n\t\t\tcreateSingleCallFunction(editor.onDidDispose)(() => {\n\t\t\t\tnewQuickInputService.dispose();\n\t\t\t\tthis.mapEditorToService.delete(editor);\n\t\t\t});\n\t\t}\n\n\t\treturn quickInputService;\n\t}\n\n\tget currentQuickInput() { return this.activeService.currentQuickInput; }\n\tget quickAccess() { return this.activeService.quickAccess; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t}\n\n\tpick<T extends IQuickPickItem, O extends IPickOptions<T>>(picks: Promise<QuickPickInput<T>[]> | QuickPickInput<T>[], options?: O, token: CancellationToken = CancellationToken.None): Promise<(O extends { canPickMany: true } ? T[] : T) | undefined> {\n\t\treturn (this.activeService as unknown as QuickInputController /* TS fail */).pick(picks, options, token);\n\t}\n\n\tinput(options?: IInputOptions | undefined, token?: CancellationToken | undefined): Promise<string | undefined> {\n\t\treturn this.activeService.input(options, token);\n\t}\n\n\tcreateQuickPick<T extends IQuickPickItem>(options: { useSeparators: true }): IQuickPick<T, { useSeparators: true }>;\n\tcreateQuickPick<T extends IQuickPickItem>(options?: { useSeparators: boolean }): IQuickPick<T, { useSeparators: false }>;\n\tcreateQuickPick<T extends IQuickPickItem>(options: { useSeparators: boolean } = { useSeparators: false }): IQuickPick<T, { useSeparators: boolean }> {\n\t\treturn this.activeService.createQuickPick(options);\n\t}\n\n\tcreateInputBox(): IInputBox {\n\t\treturn this.activeService.createInputBox();\n\t}\n\n\ttoggleHover(): void {\n\t\treturn this.activeService.toggleHover();\n\t}\n}\n\nexport class QuickInputEditorContribution implements IEditorContribution {\n\n\tstatic readonly ID = 'editor.controller.quickInput';\n\n\tstatic get(editor: ICodeEditor): QuickInputEditorContribution | null {\n\t\treturn editor.getContribution<QuickInputEditorContribution>(QuickInputEditorContribution.ID);\n\t}\n\n\treadonly widget: QuickInputEditorWidget;\n\n\tconstructor(private editor: ICodeEditor) {\n\t\tthis.widget = new QuickInputEditorWidget(this.editor);\n\t}\n\n\tdispose(): void {\n\t\tthis.widget.dispose();\n\t}\n}\n\nexport class QuickInputEditorWidget implements IOverlayWidget {\n\n\tprivate static readonly ID = 'editor.contrib.quickInputWidget';\n\n\tprivate domNode: HTMLElement;\n\n\tconstructor(private codeEditor: ICodeEditor) {\n\t\tthis.domNode = document.createElement('div');\n\n\t\tthis.codeEditor.addOverlayWidget(this);\n\t}\n\n\tgetId(): string {\n\t\treturn QuickInputEditorWidget.ID;\n\t}\n\n\tgetDomNode(): HTMLElement {\n\t\treturn this.domNode;\n\t}\n\n\tgetPosition(): IOverlayWidgetPosition | null {\n\t\treturn { preference: OverlayWidgetPositionPreference.TOP_CENTER };\n\t}\n\n\tdispose(): void {\n\t\tthis.codeEditor.removeOverlayWidget(this);\n\t}\n}\n\nregisterEditorContribution(QuickInputEditorContribution.ID, QuickInputEditorContribution, EditorContributionInstantiation.Lazy);\n"]}