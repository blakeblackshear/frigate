{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.ts","vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess.ts"],"names":[],"mappings":"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","file":"editorNavigationQuickAccess.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { IRange } from '../../../common/core/range.js';\nimport { IDiffEditor, IEditor, ScrollType } from '../../../common/editorCommon.js';\nimport { IModelDeltaDecoration, ITextModel, OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { IQuickAccessProvider, IQuickAccessProviderRunOptions } from '../../../../platform/quickinput/common/quickAccess.js';\nimport { IKeyMods, IQuickPick, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\nimport { TextEditorSelectionSource } from '../../../../platform/editor/common/editor.js';\n\ninterface IEditorLineDecoration {\n\treadonly rangeHighlightId: string;\n\treadonly overviewRulerDecorationId: string;\n}\n\nexport interface IEditorNavigationQuickAccessOptions {\n\tcanAcceptInBackground?: boolean;\n}\n\nexport interface IQuickAccessTextEditorContext {\n\n\t/**\n\t * The current active editor.\n\t */\n\treadonly editor: IEditor;\n\n\t/**\n\t * If defined, allows to restore the original view state\n\t * the text editor had before quick access opened.\n\t */\n\trestoreViewState?: () => void;\n}\n\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport abstract class AbstractEditorNavigationQuickAccessProvider implements IQuickAccessProvider {\n\n\tconstructor(protected options?: IEditorNavigationQuickAccessOptions) { }\n\n\t//#region Provider methods\n\n\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Provide based on current active editor\n\t\tconst pickerDisposable = disposables.add(new MutableDisposable());\n\t\tpickerDisposable.value = this.doProvide(picker, token, runOptions);\n\n\t\t// Re-create whenever the active editor changes\n\t\tdisposables.add(this.onDidActiveTextEditorControlChange(() => {\n\n\t\t\t// Clear old\n\t\t\tpickerDisposable.value = undefined;\n\n\t\t\t// Add new\n\t\t\tpickerDisposable.value = this.doProvide(picker, token);\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate doProvide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// With text control\n\t\tconst editor = this.activeTextEditorControl;\n\t\tif (editor && this.canProvideWithTextEditor(editor)) {\n\t\t\tconst context: IQuickAccessTextEditorContext = { editor };\n\n\t\t\t// Restore any view state if this picker was closed\n\t\t\t// without actually going to a line\n\t\t\tconst codeEditor = getCodeEditor(editor);\n\t\t\tif (codeEditor) {\n\n\t\t\t\t// Remember view state and update it when the cursor position\n\t\t\t\t// changes even later because it could be that the user has\n\t\t\t\t// configured quick access to remain open when focus is lost and\n\t\t\t\t// we always want to restore the current location.\n\t\t\t\tlet lastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\tdisposables.add(codeEditor.onDidChangeCursorPosition(() => {\n\t\t\t\t\tlastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\t}));\n\n\t\t\t\tcontext.restoreViewState = () => {\n\t\t\t\t\tif (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n\t\t\t\t\t\teditor.restoreViewState(lastKnownEditorViewState);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(createSingleCallFunction(token.onCancellationRequested)(() => context.restoreViewState?.()));\n\t\t\t}\n\n\t\t\t// Clean up decorations on dispose\n\t\t\tdisposables.add(toDisposable(() => this.clearDecorations(editor)));\n\n\t\t\t// Ask subclass for entries\n\t\t\tdisposables.add(this.provideWithTextEditor(context, picker, token, runOptions));\n\t\t}\n\n\t\t// Without text control\n\t\telse {\n\t\t\tdisposables.add(this.provideWithoutTextEditor(picker, token));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Subclasses to implement if they can operate on the text editor.\n\t */\n\tprotected canProvideWithTextEditor(editor: IEditor): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when an editor is active.\n\t */\n\tprotected abstract provideWithTextEditor(context: IQuickAccessTextEditorContext, picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable;\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when no editor is active.\n\t */\n\tprotected abstract provideWithoutTextEditor(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable;\n\n\tprotected gotoLocation({ editor }: IQuickAccessTextEditorContext, options: { range: IRange; keyMods: IKeyMods; forceSideBySide?: boolean; preserveFocus?: boolean }): void {\n\t\teditor.setSelection(options.range, TextEditorSelectionSource.JUMP);\n\t\teditor.revealRangeInCenter(options.range, ScrollType.Smooth);\n\t\tif (!options.preserveFocus) {\n\t\t\teditor.focus();\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (model && 'getLineContent' in model) {\n\t\t\tstatus(`${model.getLineContent(options.range.startLineNumber)}`);\n\t\t}\n\t}\n\n\tprotected getModel(editor: IEditor | IDiffEditor): ITextModel | undefined {\n\t\treturn isDiffEditor(editor) ?\n\t\t\teditor.getModel()?.modified :\n\t\t\teditor.getModel() as ITextModel;\n\t}\n\n\t//#endregion\n\n\n\t//#region Editor access\n\n\t/**\n\t * Subclasses to provide an event when the active editor control changes.\n\t */\n\tprotected abstract readonly onDidActiveTextEditorControlChange: Event<void>;\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\t//#endregion\n\n\n\t//#region Decorations Utils\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | undefined = undefined;\n\n\taddDecorations(editor: IEditor, range: IRange): void {\n\t\teditor.changeDecorations(changeAccessor => {\n\n\t\t\t// Reset old decorations if any\n\t\t\tconst deleteDecorations: string[] = [];\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n\n\t\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t\t}\n\n\t\t\t// Add new decorations for the range\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\n\t\t\t\t// highlight the entire line on the range\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight',\n\t\t\t\t\t\tclassName: 'rangeHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// also add overview ruler highlight\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight-overview',\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(overviewRulerRangeHighlight),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tconst [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n\n\t\t\tthis.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n\t\t});\n\t}\n\n\tclearDecorations(editor: IEditor): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\teditor.changeDecorations(changeAccessor => {\n\t\t\t\tchangeAccessor.deltaDecorations([\n\t\t\t\t\trangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId\n\t\t\t\t], []);\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t}\n\t}\n\n\t//#endregion\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Event } from '../../../../base/common/event.js';\nimport { createSingleCallFunction } from '../../../../base/common/functional.js';\nimport { DisposableStore, IDisposable, MutableDisposable, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { getCodeEditor, isDiffEditor } from '../../../browser/editorBrowser.js';\nimport { IRange } from '../../../common/core/range.js';\nimport { IDiffEditor, IEditor, ScrollType } from '../../../common/editorCommon.js';\nimport { IModelDeltaDecoration, ITextModel, OverviewRulerLane } from '../../../common/model.js';\nimport { overviewRulerRangeHighlight } from '../../../common/core/editorColorRegistry.js';\nimport { IQuickAccessProvider, IQuickAccessProviderRunOptions } from '../../../../platform/quickinput/common/quickAccess.js';\nimport { IKeyMods, IQuickPick, IQuickPickItem } from '../../../../platform/quickinput/common/quickInput.js';\nimport { themeColorFromId } from '../../../../platform/theme/common/themeService.js';\nimport { status } from '../../../../base/browser/ui/aria/aria.js';\nimport { TextEditorSelectionSource } from '../../../../platform/editor/common/editor.js';\n\ninterface IEditorLineDecoration {\n\treadonly rangeHighlightId: string;\n\treadonly overviewRulerDecorationId: string;\n}\n\nexport interface IEditorNavigationQuickAccessOptions {\n\tcanAcceptInBackground?: boolean;\n}\n\nexport interface IQuickAccessTextEditorContext {\n\n\t/**\n\t * The current active editor.\n\t */\n\treadonly editor: IEditor;\n\n\t/**\n\t * If defined, allows to restore the original view state\n\t * the text editor had before quick access opened.\n\t */\n\trestoreViewState?: () => void;\n}\n\n/**\n * A reusable quick access provider for the editor with support\n * for adding decorations for navigating in the currently active file\n * (for example \"Go to line\", \"Go to symbol\").\n */\nexport abstract class AbstractEditorNavigationQuickAccessProvider implements IQuickAccessProvider {\n\n\tconstructor(protected options?: IEditorNavigationQuickAccessOptions) { }\n\n\t//#region Provider methods\n\n\tprovide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Apply options if any\n\t\tpicker.canAcceptInBackground = !!this.options?.canAcceptInBackground;\n\n\t\t// Disable filtering & sorting, we control the results\n\t\tpicker.matchOnLabel = picker.matchOnDescription = picker.matchOnDetail = picker.sortByLabel = false;\n\n\t\t// Provide based on current active editor\n\t\tconst pickerDisposable = disposables.add(new MutableDisposable());\n\t\tpickerDisposable.value = this.doProvide(picker, token, runOptions);\n\n\t\t// Re-create whenever the active editor changes\n\t\tdisposables.add(this.onDidActiveTextEditorControlChange(() => {\n\n\t\t\t// Clear old\n\t\t\tpickerDisposable.value = undefined;\n\n\t\t\t// Add new\n\t\t\tpickerDisposable.value = this.doProvide(picker, token);\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate doProvide(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// With text control\n\t\tconst editor = this.activeTextEditorControl;\n\t\tif (editor && this.canProvideWithTextEditor(editor)) {\n\t\t\tconst context: IQuickAccessTextEditorContext = { editor };\n\n\t\t\t// Restore any view state if this picker was closed\n\t\t\t// without actually going to a line\n\t\t\tconst codeEditor = getCodeEditor(editor);\n\t\t\tif (codeEditor) {\n\n\t\t\t\t// Remember view state and update it when the cursor position\n\t\t\t\t// changes even later because it could be that the user has\n\t\t\t\t// configured quick access to remain open when focus is lost and\n\t\t\t\t// we always want to restore the current location.\n\t\t\t\tlet lastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\tdisposables.add(codeEditor.onDidChangeCursorPosition(() => {\n\t\t\t\t\tlastKnownEditorViewState = editor.saveViewState() ?? undefined;\n\t\t\t\t}));\n\n\t\t\t\tcontext.restoreViewState = () => {\n\t\t\t\t\tif (lastKnownEditorViewState && editor === this.activeTextEditorControl) {\n\t\t\t\t\t\teditor.restoreViewState(lastKnownEditorViewState);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tdisposables.add(createSingleCallFunction(token.onCancellationRequested)(() => context.restoreViewState?.()));\n\t\t\t}\n\n\t\t\t// Clean up decorations on dispose\n\t\t\tdisposables.add(toDisposable(() => this.clearDecorations(editor)));\n\n\t\t\t// Ask subclass for entries\n\t\t\tdisposables.add(this.provideWithTextEditor(context, picker, token, runOptions));\n\t\t}\n\n\t\t// Without text control\n\t\telse {\n\t\t\tdisposables.add(this.provideWithoutTextEditor(picker, token));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\t/**\n\t * Subclasses to implement if they can operate on the text editor.\n\t */\n\tprotected canProvideWithTextEditor(editor: IEditor): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when an editor is active.\n\t */\n\tprotected abstract provideWithTextEditor(context: IQuickAccessTextEditorContext, picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken, runOptions?: IQuickAccessProviderRunOptions): IDisposable;\n\n\t/**\n\t * Subclasses to implement to provide picks for the picker when no editor is active.\n\t */\n\tprotected abstract provideWithoutTextEditor(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, token: CancellationToken): IDisposable;\n\n\tprotected gotoLocation({ editor }: IQuickAccessTextEditorContext, options: { range: IRange; keyMods: IKeyMods; forceSideBySide?: boolean; preserveFocus?: boolean }): void {\n\t\teditor.setSelection(options.range, TextEditorSelectionSource.JUMP);\n\t\teditor.revealRangeInCenter(options.range, ScrollType.Smooth);\n\t\tif (!options.preserveFocus) {\n\t\t\teditor.focus();\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tif (model && 'getLineContent' in model) {\n\t\t\tstatus(`${model.getLineContent(options.range.startLineNumber)}`);\n\t\t}\n\t}\n\n\tprotected getModel(editor: IEditor | IDiffEditor): ITextModel | undefined {\n\t\treturn isDiffEditor(editor) ?\n\t\t\teditor.getModel()?.modified :\n\t\t\teditor.getModel() as ITextModel;\n\t}\n\n\t//#endregion\n\n\n\t//#region Editor access\n\n\t/**\n\t * Subclasses to provide an event when the active editor control changes.\n\t */\n\tprotected abstract readonly onDidActiveTextEditorControlChange: Event<void>;\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\t//#endregion\n\n\n\t//#region Decorations Utils\n\n\tprivate rangeHighlightDecorationId: IEditorLineDecoration | undefined = undefined;\n\n\taddDecorations(editor: IEditor, range: IRange): void {\n\t\teditor.changeDecorations(changeAccessor => {\n\n\t\t\t// Reset old decorations if any\n\t\t\tconst deleteDecorations: string[] = [];\n\t\t\tif (this.rangeHighlightDecorationId) {\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.overviewRulerDecorationId);\n\t\t\t\tdeleteDecorations.push(this.rangeHighlightDecorationId.rangeHighlightId);\n\n\t\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t\t}\n\n\t\t\t// Add new decorations for the range\n\t\t\tconst newDecorations: IModelDeltaDecoration[] = [\n\n\t\t\t\t// highlight the entire line on the range\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight',\n\t\t\t\t\t\tclassName: 'rangeHighlight',\n\t\t\t\t\t\tisWholeLine: true\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// also add overview ruler highlight\n\t\t\t\t{\n\t\t\t\t\trange,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tdescription: 'quick-access-range-highlight-overview',\n\t\t\t\t\t\toverviewRuler: {\n\t\t\t\t\t\t\tcolor: themeColorFromId(overviewRulerRangeHighlight),\n\t\t\t\t\t\t\tposition: OverviewRulerLane.Full\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tconst [rangeHighlightId, overviewRulerDecorationId] = changeAccessor.deltaDecorations(deleteDecorations, newDecorations);\n\n\t\t\tthis.rangeHighlightDecorationId = { rangeHighlightId, overviewRulerDecorationId };\n\t\t});\n\t}\n\n\tclearDecorations(editor: IEditor): void {\n\t\tconst rangeHighlightDecorationId = this.rangeHighlightDecorationId;\n\t\tif (rangeHighlightDecorationId) {\n\t\t\teditor.changeDecorations(changeAccessor => {\n\t\t\t\tchangeAccessor.deltaDecorations([\n\t\t\t\t\trangeHighlightDecorationId.overviewRulerDecorationId,\n\t\t\t\t\trangeHighlightDecorationId.rangeHighlightId\n\t\t\t\t], []);\n\t\t\t});\n\n\t\t\tthis.rangeHighlightDecorationId = undefined;\n\t\t}\n\t}\n\n\t//#endregion\n}\n"]}