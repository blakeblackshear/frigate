{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/hover/browser/hoverOperation.ts","vs/editor/contrib/hover/browser/hoverOperation.ts"],"names":[],"mappings":"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","file":"hoverOperation.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableProducer, CancelableAsyncIterableProducer, createCancelableAsyncIterableProducer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\n\nexport interface IHoverComputer<TArgs, TResult> {\n\t/**\n\t * This is called after half the hover time\n\t */\n\tcomputeAsync?: (args: TArgs, token: CancellationToken) => AsyncIterableProducer<TResult>;\n\t/**\n\t * This is called after all the hover time\n\t */\n\tcomputeSync?: (args: TArgs) => TResult[];\n}\n\nconst enum HoverOperationState {\n\tIdle,\n\tFirstWait,\n\tSecondWait,\n\tWaitingForAsync = 3,\n\tWaitingForAsyncShowingLoading = 4,\n}\n\nexport const enum HoverStartMode {\n\tDelayed = 0,\n\tImmediate = 1\n}\n\nexport const enum HoverStartSource {\n\tMouse = 0,\n\tClick = 1,\n\tKeyboard = 2\n}\n\nexport class HoverResult<TArgs, TResult> {\n\tconstructor(\n\t\tpublic readonly value: TResult[],\n\t\tpublic readonly isComplete: boolean,\n\t\tpublic readonly hasLoadingMessage: boolean,\n\t\tpublic readonly options: TArgs\n\t) { }\n}\n\n/**\n * Computing the hover is very fine tuned.\n *\n * Suppose the hover delay is 300ms (the default). Then, when resting the mouse at an anchor:\n * - at 150ms, the async computation is triggered (i.e. semantic hover)\n *   - if async results already come in, they are not rendered yet.\n * - at 300ms, the sync computation is triggered (i.e. decorations, markers)\n *   - if there are sync or async results, they are rendered.\n * - at 900ms, if the async computation hasn't finished, a \"Loading...\" result is added.\n */\nexport class HoverOperation<TArgs, TResult> extends Disposable {\n\n\tprivate readonly _onResult = this._register(new Emitter<HoverResult<TArgs, TResult>>());\n\tpublic readonly onResult = this._onResult.event;\n\n\tprivate readonly _asyncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerAsyncComputation(options), 0));\n\tprivate readonly _syncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerSyncComputation(options), 0));\n\tprivate readonly _loadingMessageScheduler = this._register(new Debouncer((options: TArgs) => this._triggerLoadingMessage(options), 0));\n\n\tprivate _state = HoverOperationState.Idle;\n\tprivate _asyncIterable: CancelableAsyncIterableProducer<TResult> | null = null;\n\tprivate _asyncIterableDone: boolean = false;\n\tprivate _result: TResult[] = [];\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _computer: IHoverComputer<TArgs, TResult>\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._options = undefined;\n\t\tsuper.dispose();\n\t}\n\n\tprivate get _hoverTime(): number {\n\t\treturn this._editor.getOption(EditorOption.hover).delay;\n\t}\n\n\tprivate get _firstWaitTime(): number {\n\t\treturn this._hoverTime / 2;\n\t}\n\n\tprivate get _secondWaitTime(): number {\n\t\treturn this._hoverTime - this._firstWaitTime;\n\t}\n\n\tprivate get _loadingMessageTime(): number {\n\t\treturn 3 * this._hoverTime;\n\t}\n\n\tprivate _setState(state: HoverOperationState, options: TArgs): void {\n\t\tthis._options = options;\n\t\tthis._state = state;\n\t\tthis._fireResult(options);\n\t}\n\n\tprivate _triggerAsyncComputation(options: TArgs): void {\n\t\tthis._setState(HoverOperationState.SecondWait, options);\n\t\tthis._syncComputationScheduler.schedule(options, this._secondWaitTime);\n\n\t\tif (this._computer.computeAsync) {\n\t\t\tthis._asyncIterableDone = false;\n\t\t\tthis._asyncIterable = createCancelableAsyncIterableProducer(token => this._computer.computeAsync!(options, token));\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tfor await (const item of this._asyncIterable!) {\n\t\t\t\t\t\tif (item) {\n\t\t\t\t\t\t\tthis._result.push(item);\n\t\t\t\t\t\t\tthis._fireResult(options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._asyncIterableDone = true;\n\n\t\t\t\t\tif (this._state === HoverOperationState.WaitingForAsync || this._state === HoverOperationState.WaitingForAsyncShowingLoading) {\n\t\t\t\t\t\tthis._setState(HoverOperationState.Idle, options);\n\t\t\t\t\t}\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t} else {\n\t\t\tthis._asyncIterableDone = true;\n\t\t}\n\t}\n\n\tprivate _triggerSyncComputation(options: TArgs): void {\n\t\tif (this._computer.computeSync) {\n\t\t\tthis._result = this._result.concat(this._computer.computeSync(options));\n\t\t}\n\t\tthis._setState(this._asyncIterableDone ? HoverOperationState.Idle : HoverOperationState.WaitingForAsync, options);\n\t}\n\n\tprivate _triggerLoadingMessage(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.WaitingForAsync) {\n\t\t\tthis._setState(HoverOperationState.WaitingForAsyncShowingLoading, options);\n\t\t}\n\t}\n\n\tprivate _fireResult(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.FirstWait || this._state === HoverOperationState.SecondWait) {\n\t\t\t// Do not send out results before the hover time\n\t\t\treturn;\n\t\t}\n\t\tconst isComplete = (this._state === HoverOperationState.Idle);\n\t\tconst hasLoadingMessage = (this._state === HoverOperationState.WaitingForAsyncShowingLoading);\n\t\tthis._onResult.fire(new HoverResult(this._result.slice(0), isComplete, hasLoadingMessage, options));\n\t}\n\n\tpublic start(mode: HoverStartMode, options: TArgs): void {\n\t\tif (mode === HoverStartMode.Delayed) {\n\t\t\tif (this._state === HoverOperationState.Idle) {\n\t\t\t\tthis._setState(HoverOperationState.FirstWait, options);\n\t\t\t\tthis._asyncComputationScheduler.schedule(options, this._firstWaitTime);\n\t\t\t\tthis._loadingMessageScheduler.schedule(options, this._loadingMessageTime);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (this._state) {\n\t\t\t\tcase HoverOperationState.Idle:\n\t\t\t\t\tthis._triggerAsyncComputation(options);\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase HoverOperationState.SecondWait:\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic cancel(): void {\n\t\tthis._asyncComputationScheduler.cancel();\n\t\tthis._syncComputationScheduler.cancel();\n\t\tthis._loadingMessageScheduler.cancel();\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._result = [];\n\t\tthis._options = undefined;\n\t\tthis._state = HoverOperationState.Idle;\n\t}\n\n\tpublic get options(): TArgs | undefined {\n\t\treturn this._options;\n\t}\n}\n\nclass Debouncer<TArgs> extends Disposable {\n\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(runner: (options: TArgs) => void, debounceTimeMs: number) {\n\t\tsuper();\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => runner(this._options!), debounceTimeMs));\n\t}\n\n\tschedule(options: TArgs, debounceTimeMs: number): void {\n\t\tthis._options = options;\n\t\tthis._scheduler.schedule(debounceTimeMs);\n\t}\n\n\tcancel(): void {\n\t\tthis._scheduler.cancel();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableProducer, CancelableAsyncIterableProducer, createCancelableAsyncIterableProducer, RunOnceScheduler } from '../../../../base/common/async.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\n\nexport interface IHoverComputer<TArgs, TResult> {\n\t/**\n\t * This is called after half the hover time\n\t */\n\tcomputeAsync?: (args: TArgs, token: CancellationToken) => AsyncIterableProducer<TResult>;\n\t/**\n\t * This is called after all the hover time\n\t */\n\tcomputeSync?: (args: TArgs) => TResult[];\n}\n\nconst enum HoverOperationState {\n\tIdle,\n\tFirstWait,\n\tSecondWait,\n\tWaitingForAsync = 3,\n\tWaitingForAsyncShowingLoading = 4,\n}\n\nexport const enum HoverStartMode {\n\tDelayed = 0,\n\tImmediate = 1\n}\n\nexport const enum HoverStartSource {\n\tMouse = 0,\n\tClick = 1,\n\tKeyboard = 2\n}\n\nexport class HoverResult<TArgs, TResult> {\n\tconstructor(\n\t\tpublic readonly value: TResult[],\n\t\tpublic readonly isComplete: boolean,\n\t\tpublic readonly hasLoadingMessage: boolean,\n\t\tpublic readonly options: TArgs\n\t) { }\n}\n\n/**\n * Computing the hover is very fine tuned.\n *\n * Suppose the hover delay is 300ms (the default). Then, when resting the mouse at an anchor:\n * - at 150ms, the async computation is triggered (i.e. semantic hover)\n *   - if async results already come in, they are not rendered yet.\n * - at 300ms, the sync computation is triggered (i.e. decorations, markers)\n *   - if there are sync or async results, they are rendered.\n * - at 900ms, if the async computation hasn't finished, a \"Loading...\" result is added.\n */\nexport class HoverOperation<TArgs, TResult> extends Disposable {\n\n\tprivate readonly _onResult = this._register(new Emitter<HoverResult<TArgs, TResult>>());\n\tpublic readonly onResult = this._onResult.event;\n\n\tprivate readonly _asyncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerAsyncComputation(options), 0));\n\tprivate readonly _syncComputationScheduler = this._register(new Debouncer((options: TArgs) => this._triggerSyncComputation(options), 0));\n\tprivate readonly _loadingMessageScheduler = this._register(new Debouncer((options: TArgs) => this._triggerLoadingMessage(options), 0));\n\n\tprivate _state = HoverOperationState.Idle;\n\tprivate _asyncIterable: CancelableAsyncIterableProducer<TResult> | null = null;\n\tprivate _asyncIterableDone: boolean = false;\n\tprivate _result: TResult[] = [];\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _computer: IHoverComputer<TArgs, TResult>\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._options = undefined;\n\t\tsuper.dispose();\n\t}\n\n\tprivate get _hoverTime(): number {\n\t\treturn this._editor.getOption(EditorOption.hover).delay;\n\t}\n\n\tprivate get _firstWaitTime(): number {\n\t\treturn this._hoverTime / 2;\n\t}\n\n\tprivate get _secondWaitTime(): number {\n\t\treturn this._hoverTime - this._firstWaitTime;\n\t}\n\n\tprivate get _loadingMessageTime(): number {\n\t\treturn 3 * this._hoverTime;\n\t}\n\n\tprivate _setState(state: HoverOperationState, options: TArgs): void {\n\t\tthis._options = options;\n\t\tthis._state = state;\n\t\tthis._fireResult(options);\n\t}\n\n\tprivate _triggerAsyncComputation(options: TArgs): void {\n\t\tthis._setState(HoverOperationState.SecondWait, options);\n\t\tthis._syncComputationScheduler.schedule(options, this._secondWaitTime);\n\n\t\tif (this._computer.computeAsync) {\n\t\t\tthis._asyncIterableDone = false;\n\t\t\tthis._asyncIterable = createCancelableAsyncIterableProducer(token => this._computer.computeAsync!(options, token));\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tfor await (const item of this._asyncIterable!) {\n\t\t\t\t\t\tif (item) {\n\t\t\t\t\t\t\tthis._result.push(item);\n\t\t\t\t\t\t\tthis._fireResult(options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._asyncIterableDone = true;\n\n\t\t\t\t\tif (this._state === HoverOperationState.WaitingForAsync || this._state === HoverOperationState.WaitingForAsyncShowingLoading) {\n\t\t\t\t\t\tthis._setState(HoverOperationState.Idle, options);\n\t\t\t\t\t}\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tonUnexpectedError(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t} else {\n\t\t\tthis._asyncIterableDone = true;\n\t\t}\n\t}\n\n\tprivate _triggerSyncComputation(options: TArgs): void {\n\t\tif (this._computer.computeSync) {\n\t\t\tthis._result = this._result.concat(this._computer.computeSync(options));\n\t\t}\n\t\tthis._setState(this._asyncIterableDone ? HoverOperationState.Idle : HoverOperationState.WaitingForAsync, options);\n\t}\n\n\tprivate _triggerLoadingMessage(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.WaitingForAsync) {\n\t\t\tthis._setState(HoverOperationState.WaitingForAsyncShowingLoading, options);\n\t\t}\n\t}\n\n\tprivate _fireResult(options: TArgs): void {\n\t\tif (this._state === HoverOperationState.FirstWait || this._state === HoverOperationState.SecondWait) {\n\t\t\t// Do not send out results before the hover time\n\t\t\treturn;\n\t\t}\n\t\tconst isComplete = (this._state === HoverOperationState.Idle);\n\t\tconst hasLoadingMessage = (this._state === HoverOperationState.WaitingForAsyncShowingLoading);\n\t\tthis._onResult.fire(new HoverResult(this._result.slice(0), isComplete, hasLoadingMessage, options));\n\t}\n\n\tpublic start(mode: HoverStartMode, options: TArgs): void {\n\t\tif (mode === HoverStartMode.Delayed) {\n\t\t\tif (this._state === HoverOperationState.Idle) {\n\t\t\t\tthis._setState(HoverOperationState.FirstWait, options);\n\t\t\t\tthis._asyncComputationScheduler.schedule(options, this._firstWaitTime);\n\t\t\t\tthis._loadingMessageScheduler.schedule(options, this._loadingMessageTime);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (this._state) {\n\t\t\t\tcase HoverOperationState.Idle:\n\t\t\t\t\tthis._triggerAsyncComputation(options);\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase HoverOperationState.SecondWait:\n\t\t\t\t\tthis._syncComputationScheduler.cancel();\n\t\t\t\t\tthis._triggerSyncComputation(options);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic cancel(): void {\n\t\tthis._asyncComputationScheduler.cancel();\n\t\tthis._syncComputationScheduler.cancel();\n\t\tthis._loadingMessageScheduler.cancel();\n\t\tif (this._asyncIterable) {\n\t\t\tthis._asyncIterable.cancel();\n\t\t\tthis._asyncIterable = null;\n\t\t}\n\t\tthis._result = [];\n\t\tthis._options = undefined;\n\t\tthis._state = HoverOperationState.Idle;\n\t}\n\n\tpublic get options(): TArgs | undefined {\n\t\treturn this._options;\n\t}\n}\n\nclass Debouncer<TArgs> extends Disposable {\n\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tprivate _options: TArgs | undefined;\n\n\tconstructor(runner: (options: TArgs) => void, debounceTimeMs: number) {\n\t\tsuper();\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => runner(this._options!), debounceTimeMs));\n\t}\n\n\tschedule(options: TArgs, debounceTimeMs: number): void {\n\t\tthis._options = options;\n\t\tthis._scheduler.schedule(debounceTimeMs);\n\t}\n\n\tcancel(): void {\n\t\tthis._scheduler.cancel();\n\t}\n}\n"]}