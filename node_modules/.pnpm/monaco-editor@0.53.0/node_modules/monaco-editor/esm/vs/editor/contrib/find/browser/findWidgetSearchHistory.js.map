{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/find/browser/findWidgetSearchHistory.ts","vs/editor/contrib/find/browser/findWidgetSearchHistory.ts"],"names":[],"mappings":"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","file":"findWidgetSearchHistory.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IHistory } from '../../../../base/common/history.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\n\nexport class FindWidgetSearchHistory implements IHistory<string> {\n\tpublic static readonly FIND_HISTORY_KEY = 'workbench.find.history';\n\tprivate inMemoryValues: Set<string> = new Set();\n\tpublic onDidChange?: Event<string[]>;\n\tprivate _onDidChangeEmitter: Emitter<string[]>;\n\n\tprivate static _instance: FindWidgetSearchHistory | null = null;\n\n\tstatic getOrCreate(\n\t\tstorageService: IStorageService,\n\t): FindWidgetSearchHistory {\n\t\tif (!FindWidgetSearchHistory._instance) {\n\t\t\tFindWidgetSearchHistory._instance = new FindWidgetSearchHistory(storageService);\n\t\t}\n\t\treturn FindWidgetSearchHistory._instance;\n\t}\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tthis._onDidChangeEmitter = new Emitter<string[]>();\n\t\tthis.onDidChange = this._onDidChangeEmitter.event;\n\t\tthis.load();\n\t}\n\n\tdelete(t: string): boolean {\n\t\tconst result = this.inMemoryValues.delete(t);\n\t\tthis.save();\n\t\treturn result;\n\t}\n\n\tadd(t: string): this {\n\t\tthis.inMemoryValues.add(t);\n\t\tthis.save();\n\t\treturn this;\n\t}\n\n\thas(t: string): boolean {\n\t\treturn this.inMemoryValues.has(t);\n\t}\n\n\tforEach(callbackfn: (value: string, value2: string, set: Set<string>) => void, thisArg?: any): void {\n\t\t// fetch latest from storage\n\t\tthis.load();\n\t\treturn this.inMemoryValues.forEach(callbackfn);\n\t}\n\treplace?(t: string[]): void {\n\t\tthis.inMemoryValues = new Set(t);\n\t\tthis.save();\n\t}\n\n\tload() {\n\t\tlet result: [] | undefined;\n\t\tconst raw = this.storageService.get(\n\t\t\tFindWidgetSearchHistory.FIND_HISTORY_KEY,\n\t\t\tStorageScope.WORKSPACE\n\t\t);\n\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tresult = JSON.parse(raw);\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid data\n\t\t\t}\n\t\t}\n\n\t\tthis.inMemoryValues = new Set(result || []);\n\t}\n\n\t// Run saves async\n\tsave(): Promise<void> {\n\t\tconst elements: string[] = [];\n\t\tthis.inMemoryValues.forEach(e => elements.push(e));\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.storageService.store(\n\t\t\t\tFindWidgetSearchHistory.FIND_HISTORY_KEY,\n\t\t\t\tJSON.stringify(elements),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tthis._onDidChangeEmitter.fire(elements);\n\t\t\tresolve();\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { IHistory } from '../../../../base/common/history.js';\nimport { IStorageService, StorageScope, StorageTarget } from '../../../../platform/storage/common/storage.js';\n\nexport class FindWidgetSearchHistory implements IHistory<string> {\n\tpublic static readonly FIND_HISTORY_KEY = 'workbench.find.history';\n\tprivate inMemoryValues: Set<string> = new Set();\n\tpublic onDidChange?: Event<string[]>;\n\tprivate _onDidChangeEmitter: Emitter<string[]>;\n\n\tprivate static _instance: FindWidgetSearchHistory | null = null;\n\n\tstatic getOrCreate(\n\t\tstorageService: IStorageService,\n\t): FindWidgetSearchHistory {\n\t\tif (!FindWidgetSearchHistory._instance) {\n\t\t\tFindWidgetSearchHistory._instance = new FindWidgetSearchHistory(storageService);\n\t\t}\n\t\treturn FindWidgetSearchHistory._instance;\n\t}\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tthis._onDidChangeEmitter = new Emitter<string[]>();\n\t\tthis.onDidChange = this._onDidChangeEmitter.event;\n\t\tthis.load();\n\t}\n\n\tdelete(t: string): boolean {\n\t\tconst result = this.inMemoryValues.delete(t);\n\t\tthis.save();\n\t\treturn result;\n\t}\n\n\tadd(t: string): this {\n\t\tthis.inMemoryValues.add(t);\n\t\tthis.save();\n\t\treturn this;\n\t}\n\n\thas(t: string): boolean {\n\t\treturn this.inMemoryValues.has(t);\n\t}\n\n\tforEach(callbackfn: (value: string, value2: string, set: Set<string>) => void, thisArg?: any): void {\n\t\t// fetch latest from storage\n\t\tthis.load();\n\t\treturn this.inMemoryValues.forEach(callbackfn);\n\t}\n\treplace?(t: string[]): void {\n\t\tthis.inMemoryValues = new Set(t);\n\t\tthis.save();\n\t}\n\n\tload() {\n\t\tlet result: [] | undefined;\n\t\tconst raw = this.storageService.get(\n\t\t\tFindWidgetSearchHistory.FIND_HISTORY_KEY,\n\t\t\tStorageScope.WORKSPACE\n\t\t);\n\n\t\tif (raw) {\n\t\t\ttry {\n\t\t\t\tresult = JSON.parse(raw);\n\t\t\t} catch (e) {\n\t\t\t\t// Invalid data\n\t\t\t}\n\t\t}\n\n\t\tthis.inMemoryValues = new Set(result || []);\n\t}\n\n\t// Run saves async\n\tsave(): Promise<void> {\n\t\tconst elements: string[] = [];\n\t\tthis.inMemoryValues.forEach(e => elements.push(e));\n\t\treturn new Promise<void>(resolve => {\n\t\t\tthis.storageService.store(\n\t\t\t\tFindWidgetSearchHistory.FIND_HISTORY_KEY,\n\t\t\t\tJSON.stringify(elements),\n\t\t\t\tStorageScope.WORKSPACE,\n\t\t\t\tStorageTarget.USER,\n\t\t\t);\n\t\t\tthis._onDidChangeEmitter.fire(elements);\n\t\t\tresolve();\n\t\t});\n\t}\n}\n"]}