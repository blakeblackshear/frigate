{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/codeEditor/codeEditorContributions.ts","vs/editor/browser/widget/codeEditor/codeEditorContributions.ts"],"names":[],"mappings":"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","file":"codeEditorContributions.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow, runWhenWindowIdle } from '../../../../base/browser/dom.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableMap, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../editorBrowser.js';\nimport { EditorContributionInstantiation, IEditorContributionDescription } from '../../editorExtensions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport class CodeEditorContributions extends Disposable {\n\n\tprivate _editor: ICodeEditor | null = null;\n\tprivate _instantiationService: IInstantiationService | null = null;\n\n\t/**\n\t * Contains all instantiated contributions.\n\t */\n\tprivate readonly _instances = this._register(new DisposableMap<string, IEditorContribution>());\n\t/**\n\t * Contains contributions which are not yet instantiated.\n\t */\n\tprivate readonly _pending = new Map<string, IEditorContributionDescription>();\n\t/**\n\t * Tracks which instantiation kinds are still left in `_pending`.\n\t */\n\tprivate readonly _finishedInstantiation: boolean[] = [];\n\n\tconstructor(\n\n\t) {\n\t\tsuper();\n\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eager] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.AfterFirstRender] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.BeforeFirstInteraction] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eventually] = false;\n\t}\n\n\tpublic initialize(editor: ICodeEditor, contributions: IEditorContributionDescription[], instantiationService: IInstantiationService) {\n\t\tthis._editor = editor;\n\t\tthis._instantiationService = instantiationService;\n\n\t\tfor (const desc of contributions) {\n\t\t\tif (this._pending.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pending.set(desc.id, desc);\n\t\t}\n\n\t\tthis._instantiateSome(EditorContributionInstantiation.Eager);\n\n\t\t// AfterFirstRender\n\t\t// - these extensions will be instantiated at the latest 50ms after the first render.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}));\n\n\t\t// BeforeFirstInteraction\n\t\t// - these extensions will be instantiated at the latest before a mouse or a keyboard event.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t\t}));\n\n\t\t// Eventually\n\t\t// - these extensions will only be instantiated when there is idle time.\n\t\t// - since there is no guarantee that there will ever be idle time, we set a timeout of 5s here.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.Eventually);\n\t\t}, 5000));\n\t}\n\n\tpublic saveViewState(): { [key: string]: any } {\n\t\tconst contributionsState: { [key: string]: any } = {};\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.saveViewState === 'function') {\n\t\t\t\tcontributionsState[id] = contribution.saveViewState();\n\t\t\t}\n\t\t}\n\t\treturn contributionsState;\n\t}\n\n\tpublic restoreViewState(contributionsState: { [key: string]: any }): void {\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.restoreViewState === 'function') {\n\t\t\t\tcontribution.restoreViewState(contributionsState[id]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get(id: string): IEditorContribution | null {\n\t\tthis._instantiateById(id);\n\t\treturn this._instances.get(id) || null;\n\t}\n\n\tpublic onBeforeInteractionEvent(): void {\n\t\t// this method is called very often by the editor!\n\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t}\n\n\tpublic onAfterModelAttached(): IDisposable {\n\t\treturn runWhenWindowIdle(getWindow(this._editor?.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}, 50);\n\t}\n\n\tprivate _instantiateSome(instantiation: EditorContributionInstantiation): void {\n\t\tif (this._finishedInstantiation[instantiation]) {\n\t\t\t// already done with this instantiation!\n\t\t\treturn;\n\t\t}\n\t\tthis._finishedInstantiation[instantiation] = true;\n\n\t\tconst contribs = this._findPendingContributionsByInstantiation(instantiation);\n\t\tfor (const contrib of contribs) {\n\t\t\tthis._instantiateById(contrib.id);\n\t\t}\n\t}\n\n\tprivate _findPendingContributionsByInstantiation(instantiation: EditorContributionInstantiation): readonly IEditorContributionDescription[] {\n\t\tconst result: IEditorContributionDescription[] = [];\n\t\tfor (const [, desc] of this._pending) {\n\t\t\tif (desc.instantiation === instantiation) {\n\t\t\t\tresult.push(desc);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _instantiateById(id: string): void {\n\t\tconst desc = this._pending.get(id);\n\t\tif (!desc) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._pending.delete(id);\n\n\t\tif (!this._instantiationService || !this._editor) {\n\t\t\tthrow new Error(`Cannot instantiate contributions before being initialized!`);\n\t\t}\n\n\t\ttry {\n\t\t\tconst instance = this._instantiationService.createInstance(desc.ctor, this._editor);\n\t\t\tthis._instances.set(desc.id, instance);\n\t\t\tif (typeof instance.restoreViewState === 'function' && desc.instantiation !== EditorContributionInstantiation.Eager) {\n\t\t\t\tconsole.warn(`Editor contribution '${desc.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getWindow, runWhenWindowIdle } from '../../../../base/browser/dom.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Disposable, DisposableMap, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../editorBrowser.js';\nimport { EditorContributionInstantiation, IEditorContributionDescription } from '../../editorExtensions.js';\nimport { IEditorContribution } from '../../../common/editorCommon.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\n\nexport class CodeEditorContributions extends Disposable {\n\n\tprivate _editor: ICodeEditor | null = null;\n\tprivate _instantiationService: IInstantiationService | null = null;\n\n\t/**\n\t * Contains all instantiated contributions.\n\t */\n\tprivate readonly _instances = this._register(new DisposableMap<string, IEditorContribution>());\n\t/**\n\t * Contains contributions which are not yet instantiated.\n\t */\n\tprivate readonly _pending = new Map<string, IEditorContributionDescription>();\n\t/**\n\t * Tracks which instantiation kinds are still left in `_pending`.\n\t */\n\tprivate readonly _finishedInstantiation: boolean[] = [];\n\n\tconstructor(\n\n\t) {\n\t\tsuper();\n\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eager] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.AfterFirstRender] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.BeforeFirstInteraction] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eventually] = false;\n\t}\n\n\tpublic initialize(editor: ICodeEditor, contributions: IEditorContributionDescription[], instantiationService: IInstantiationService) {\n\t\tthis._editor = editor;\n\t\tthis._instantiationService = instantiationService;\n\n\t\tfor (const desc of contributions) {\n\t\t\tif (this._pending.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pending.set(desc.id, desc);\n\t\t}\n\n\t\tthis._instantiateSome(EditorContributionInstantiation.Eager);\n\n\t\t// AfterFirstRender\n\t\t// - these extensions will be instantiated at the latest 50ms after the first render.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}));\n\n\t\t// BeforeFirstInteraction\n\t\t// - these extensions will be instantiated at the latest before a mouse or a keyboard event.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t\t}));\n\n\t\t// Eventually\n\t\t// - these extensions will only be instantiated when there is idle time.\n\t\t// - since there is no guarantee that there will ever be idle time, we set a timeout of 5s here.\n\t\tthis._register(runWhenWindowIdle(getWindow(this._editor.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.Eventually);\n\t\t}, 5000));\n\t}\n\n\tpublic saveViewState(): { [key: string]: any } {\n\t\tconst contributionsState: { [key: string]: any } = {};\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.saveViewState === 'function') {\n\t\t\t\tcontributionsState[id] = contribution.saveViewState();\n\t\t\t}\n\t\t}\n\t\treturn contributionsState;\n\t}\n\n\tpublic restoreViewState(contributionsState: { [key: string]: any }): void {\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.restoreViewState === 'function') {\n\t\t\t\tcontribution.restoreViewState(contributionsState[id]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get(id: string): IEditorContribution | null {\n\t\tthis._instantiateById(id);\n\t\treturn this._instances.get(id) || null;\n\t}\n\n\tpublic onBeforeInteractionEvent(): void {\n\t\t// this method is called very often by the editor!\n\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t}\n\n\tpublic onAfterModelAttached(): IDisposable {\n\t\treturn runWhenWindowIdle(getWindow(this._editor?.getDomNode()), () => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}, 50);\n\t}\n\n\tprivate _instantiateSome(instantiation: EditorContributionInstantiation): void {\n\t\tif (this._finishedInstantiation[instantiation]) {\n\t\t\t// already done with this instantiation!\n\t\t\treturn;\n\t\t}\n\t\tthis._finishedInstantiation[instantiation] = true;\n\n\t\tconst contribs = this._findPendingContributionsByInstantiation(instantiation);\n\t\tfor (const contrib of contribs) {\n\t\t\tthis._instantiateById(contrib.id);\n\t\t}\n\t}\n\n\tprivate _findPendingContributionsByInstantiation(instantiation: EditorContributionInstantiation): readonly IEditorContributionDescription[] {\n\t\tconst result: IEditorContributionDescription[] = [];\n\t\tfor (const [, desc] of this._pending) {\n\t\t\tif (desc.instantiation === instantiation) {\n\t\t\t\tresult.push(desc);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _instantiateById(id: string): void {\n\t\tconst desc = this._pending.get(id);\n\t\tif (!desc) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._pending.delete(id);\n\n\t\tif (!this._instantiationService || !this._editor) {\n\t\t\tthrow new Error(`Cannot instantiate contributions before being initialized!`);\n\t\t}\n\n\t\ttry {\n\t\t\tconst instance = this._instantiationService.createInstance(desc.ctor, this._editor);\n\t\t\tthis._instances.set(desc.id, instance);\n\t\t\tif (typeof instance.restoreViewState === 'function' && desc.instantiation !== EditorContributionInstantiation.Eager) {\n\t\t\t\tconsole.warn(`Editor contribution '${desc.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n"]}