{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/diff/documentDiffProvider.ts","vs/editor/common/diff/documentDiffProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AA0EhG,MAAM,CAAC,MAAM,gBAAgB,GAAkB,MAAM,CAAC,MAAM,CAAC;IAC5D,SAAS,EAAE,IAAI;IACf,SAAS,EAAE,KAAK;IAChB,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1B,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;CACxB,CAAC,CAAC","file":"documentDiffProvider.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { MovedText } from './linesDiffComputer.js';\nimport { DetailedLineRangeMapping } from './rangeMapping.js';\nimport { ITextModel } from '../model.js';\n\n/**\n * A document diff provider computes the diff between two text models.\n * @internal\n */\nexport interface IDocumentDiffProvider {\n\t/**\n\t * Computes the diff between the text models `original` and `modified`.\n\t */\n\tcomputeDiff(original: ITextModel, modified: ITextModel, options: IDocumentDiffProviderOptions, cancellationToken: CancellationToken): Promise<IDocumentDiff>;\n\n\t/**\n\t * Is fired when settings of the diff algorithm change that could alter the result of the diffing computation.\n\t * Any user of this provider should recompute the diff when this event is fired.\n\t */\n\tonDidChange: Event<void>;\n}\n\n/**\n * Options for the diff computation.\n * @internal\n */\nexport interface IDocumentDiffProviderOptions {\n\t/**\n\t * When set to true, the diff should ignore whitespace changes.\n\t */\n\tignoreTrimWhitespace: boolean;\n\n\t/**\n\t * A diff computation should throw if it takes longer than this value.\n\t */\n\tmaxComputationTimeMs: number;\n\n\t/**\n\t * If set, the diff computation should compute moves in addition to insertions and deletions.\n\t */\n\tcomputeMoves: boolean;\n}\n\n/**\n * Represents a diff between two text models.\n * @internal\n */\nexport interface IDocumentDiff {\n\t/**\n\t * If true, both text models are identical (byte-wise).\n\t */\n\treadonly identical: boolean;\n\n\t/**\n\t * If true, the diff computation timed out and the diff might not be accurate.\n\t */\n\treadonly quitEarly: boolean;\n\n\t/**\n\t * Maps all modified line ranges in the original to the corresponding line ranges in the modified text model.\n\t */\n\treadonly changes: readonly DetailedLineRangeMapping[];\n\n\t/**\n\t * Sorted by original line ranges.\n\t * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n\t */\n\treadonly moves: readonly MovedText[];\n}\n\n\nexport const nullDocumentDiff: IDocumentDiff = Object.freeze({\n\tidentical: true,\n\tquitEarly: false,\n\tchanges: Object.freeze([]),\n\tmoves: Object.freeze([])\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { MovedText } from './linesDiffComputer.js';\nimport { DetailedLineRangeMapping } from './rangeMapping.js';\nimport { ITextModel } from '../model.js';\n\n/**\n * A document diff provider computes the diff between two text models.\n * @internal\n */\nexport interface IDocumentDiffProvider {\n\t/**\n\t * Computes the diff between the text models `original` and `modified`.\n\t */\n\tcomputeDiff(original: ITextModel, modified: ITextModel, options: IDocumentDiffProviderOptions, cancellationToken: CancellationToken): Promise<IDocumentDiff>;\n\n\t/**\n\t * Is fired when settings of the diff algorithm change that could alter the result of the diffing computation.\n\t * Any user of this provider should recompute the diff when this event is fired.\n\t */\n\tonDidChange: Event<void>;\n}\n\n/**\n * Options for the diff computation.\n * @internal\n */\nexport interface IDocumentDiffProviderOptions {\n\t/**\n\t * When set to true, the diff should ignore whitespace changes.\n\t */\n\tignoreTrimWhitespace: boolean;\n\n\t/**\n\t * A diff computation should throw if it takes longer than this value.\n\t */\n\tmaxComputationTimeMs: number;\n\n\t/**\n\t * If set, the diff computation should compute moves in addition to insertions and deletions.\n\t */\n\tcomputeMoves: boolean;\n}\n\n/**\n * Represents a diff between two text models.\n * @internal\n */\nexport interface IDocumentDiff {\n\t/**\n\t * If true, both text models are identical (byte-wise).\n\t */\n\treadonly identical: boolean;\n\n\t/**\n\t * If true, the diff computation timed out and the diff might not be accurate.\n\t */\n\treadonly quitEarly: boolean;\n\n\t/**\n\t * Maps all modified line ranges in the original to the corresponding line ranges in the modified text model.\n\t */\n\treadonly changes: readonly DetailedLineRangeMapping[];\n\n\t/**\n\t * Sorted by original line ranges.\n\t * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n\t */\n\treadonly moves: readonly MovedText[];\n}\n\n\nexport const nullDocumentDiff: IDocumentDiff = Object.freeze({\n\tidentical: true,\n\tquitEarly: false,\n\tchanges: Object.freeze([]),\n\tmoves: Object.freeze([])\n});\n"]}