{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/suggest/browser/suggestInlineCompletions.ts","vs/editor/contrib/suggest/browser/suggestInlineCompletions.ts"],"names":[],"mappings":"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","file":"suggestInlineCompletions.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { IWordAtPosition } from '../../../common/core/wordHelper.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { Command, CompletionItemInsertTextRule, CompletionItemProvider, CompletionTriggerKind, InlineCompletion, InlineCompletionContext, InlineCompletions, InlineCompletionsProvider } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionItem, CompletionItemModel, CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\n\nclass SuggestInlineCompletion implements InlineCompletion {\n\n\tconstructor(\n\t\treadonly range: IRange,\n\t\treadonly insertText: string | { snippet: string },\n\t\treadonly filterText: string,\n\t\treadonly additionalTextEdits: ISingleEditOperation[] | undefined,\n\t\treadonly command: Command | undefined,\n\t\treadonly action: Command | undefined,\n\t\treadonly completion: CompletionItem,\n\t) { }\n}\n\nclass InlineCompletionResults extends RefCountedDisposable implements InlineCompletions<SuggestInlineCompletion> {\n\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\treadonly line: number,\n\t\treadonly word: IWordAtPosition,\n\t\treadonly completionModel: CompletionModel,\n\t\tcompletions: CompletionItemModel,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) {\n\t\tsuper(completions.disposable);\n\t}\n\n\tcanBeReused(model: ITextModel, line: number, word: IWordAtPosition) {\n\t\treturn this.model === model // same model\n\t\t\t&& this.line === line\n\t\t\t&& this.word.word.length > 0\n\t\t\t&& this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n\t\t\t&& this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n\t}\n\n\tget items(): SuggestInlineCompletion[] {\n\t\tconst result: SuggestInlineCompletion[] = [];\n\n\t\t// Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n\t\t// ranked items are before/after\n\t\tconst { items } = this.completionModel;\n\t\tconst selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n\t\tconst first = Iterable.slice(items, selectedIndex);\n\t\tconst second = Iterable.slice(items, 0, selectedIndex);\n\n\t\tlet resolveCount = 5;\n\n\t\tfor (const item of Iterable.concat(first, second)) {\n\n\t\t\tif (item.score === FuzzyScore.Default) {\n\t\t\t\t// skip items that have no overlap\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\titem.editStart.lineNumber, item.editStart.column,\n\t\t\t\titem.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n\t\t\t);\n\t\t\tconst insertText = item.completion.insertTextRules && (item.completion.insertTextRules & CompletionItemInsertTextRule.InsertAsSnippet)\n\t\t\t\t? { snippet: item.completion.insertText }\n\t\t\t\t: item.completion.insertText;\n\n\t\t\tresult.push(new SuggestInlineCompletion(\n\t\t\t\trange,\n\t\t\t\tinsertText,\n\t\t\t\titem.filterTextLow ?? item.labelLow,\n\t\t\t\titem.completion.additionalTextEdits,\n\t\t\t\titem.completion.command,\n\t\t\t\titem.completion.action,\n\t\t\t\titem\n\t\t\t));\n\n\t\t\t// resolve the first N suggestions eagerly\n\t\t\tif (resolveCount-- >= 0) {\n\t\t\t\titem.resolve(CancellationToken.None);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\nexport class SuggestInlineCompletions extends Disposable implements InlineCompletionsProvider<InlineCompletionResults> {\n\n\tprivate _lastResult?: InlineCompletionResults;\n\n\tconstructor(\n\t\t@ILanguageFeaturesService private readonly _languageFeatureService: ILanguageFeaturesService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n\t}\n\n\tasync provideInlineCompletions(model: ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): Promise<InlineCompletionResults | undefined> {\n\n\t\tif (context.selectedSuggestionInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editor: ICodeEditor | undefined;\n\t\tfor (const candidate of this._editorService.listCodeEditors()) {\n\t\t\tif (candidate.getModel() === model) {\n\t\t\t\teditor = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = editor.getOption(EditorOption.quickSuggestions);\n\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t// quick suggest is off (for this model/language)\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n\t\t\t// quick suggest is off (for this token)\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We consider non-empty leading words and trigger characters. The latter only\n\t\t// when no word is being typed (word characters superseed trigger characters)\n\t\tlet wordInfo = model.getWordAtPosition(position);\n\t\tlet triggerCharacterInfo: { ch: string; providers: Set<CompletionItemProvider> } | undefined;\n\n\t\tif (!wordInfo?.word) {\n\t\t\ttriggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n\t\t}\n\n\t\tif (!wordInfo?.word && !triggerCharacterInfo) {\n\t\t\t// not at word, not a trigger character\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that we have word information and that we are at the end of a word\n\t\t// otherwise we stop because we don't want to do quick suggestions inside words\n\t\tif (!wordInfo) {\n\t\t\twordInfo = model.getWordUntilPosition(position);\n\t\t}\n\t\tif (wordInfo.endColumn !== position.column) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InlineCompletionResults;\n\t\tconst leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n\t\tif (!triggerCharacterInfo && this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n\t\t\t// reuse a previous result iff possible, only a refilter is needed\n\t\t\t// TODO@jrieken this can be improved further and only incomplete results can be updated\n\t\t\t// console.log(`REUSE with ${wordInfo.word}`);\n\t\t\tconst newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n\t\t\tthis._lastResult.completionModel.lineContext = newLineContext;\n\t\t\tthis._lastResult.acquire();\n\t\t\tresult = this._lastResult;\n\n\t\t} else {\n\t\t\t// refesh model is required\n\t\t\tconst completions = await provideSuggestionItems(\n\t\t\t\tthis._languageFeatureService.completionProvider,\n\t\t\t\tmodel, position,\n\t\t\t\tnew CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo?.providers),\n\t\t\t\ttriggerCharacterInfo && { triggerKind: CompletionTriggerKind.TriggerCharacter, triggerCharacter: triggerCharacterInfo.ch },\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tconst completionModel = new CompletionModel(\n\t\t\t\tcompletions.items,\n\t\t\t\tposition.column,\n\t\t\t\tnew LineContext(leadingLineContents, 0),\n\t\t\t\tWordDistance.None,\n\t\t\t\teditor.getOption(EditorOption.suggest),\n\t\t\t\teditor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\t{ boostFullMatch: false, firstMatchCanBeWeak: false },\n\t\t\t\tclipboardText\n\t\t\t);\n\t\t\tresult = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n\t\t}\n\n\t\tthis._lastResult = result;\n\t\treturn result;\n\t}\n\n\thandleItemDidShow(_completions: InlineCompletionResults, item: SuggestInlineCompletion): void {\n\t\titem.completion.resolve(CancellationToken.None);\n\t}\n\n\tdisposeInlineCompletions(result: InlineCompletionResults): void {\n\t\tresult.release();\n\t}\n\n\tprivate _getTriggerCharacterInfo(model: ITextModel, position: IPosition) {\n\t\tconst ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n\t\tconst providers = new Set<CompletionItemProvider>();\n\t\tfor (const provider of this._languageFeatureService.completionProvider.all(model)) {\n\t\t\tif (provider.triggerCharacters?.includes(ch)) {\n\t\t\t\tproviders.add(provider);\n\t\t\t}\n\t\t}\n\t\tif (providers.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { providers, ch };\n\t}\n}\n\n\nregisterEditorFeature(SuggestInlineCompletions);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { FuzzyScore } from '../../../../base/common/filters.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { Disposable, RefCountedDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { ICodeEditorService } from '../../../browser/services/codeEditorService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { IRange, Range } from '../../../common/core/range.js';\nimport { IWordAtPosition } from '../../../common/core/wordHelper.js';\nimport { registerEditorFeature } from '../../../common/editorFeatures.js';\nimport { Command, CompletionItemInsertTextRule, CompletionItemProvider, CompletionTriggerKind, InlineCompletion, InlineCompletionContext, InlineCompletions, InlineCompletionsProvider } from '../../../common/languages.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { CompletionModel, LineContext } from './completionModel.js';\nimport { CompletionItem, CompletionItemModel, CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from './suggest.js';\nimport { ISuggestMemoryService } from './suggestMemory.js';\nimport { SuggestModel } from './suggestModel.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\n\nclass SuggestInlineCompletion implements InlineCompletion {\n\n\tconstructor(\n\t\treadonly range: IRange,\n\t\treadonly insertText: string | { snippet: string },\n\t\treadonly filterText: string,\n\t\treadonly additionalTextEdits: ISingleEditOperation[] | undefined,\n\t\treadonly command: Command | undefined,\n\t\treadonly action: Command | undefined,\n\t\treadonly completion: CompletionItem,\n\t) { }\n}\n\nclass InlineCompletionResults extends RefCountedDisposable implements InlineCompletions<SuggestInlineCompletion> {\n\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\treadonly line: number,\n\t\treadonly word: IWordAtPosition,\n\t\treadonly completionModel: CompletionModel,\n\t\tcompletions: CompletionItemModel,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) {\n\t\tsuper(completions.disposable);\n\t}\n\n\tcanBeReused(model: ITextModel, line: number, word: IWordAtPosition) {\n\t\treturn this.model === model // same model\n\t\t\t&& this.line === line\n\t\t\t&& this.word.word.length > 0\n\t\t\t&& this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n\t\t\t&& this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n\t}\n\n\tget items(): SuggestInlineCompletion[] {\n\t\tconst result: SuggestInlineCompletion[] = [];\n\n\t\t// Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n\t\t// ranked items are before/after\n\t\tconst { items } = this.completionModel;\n\t\tconst selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n\t\tconst first = Iterable.slice(items, selectedIndex);\n\t\tconst second = Iterable.slice(items, 0, selectedIndex);\n\n\t\tlet resolveCount = 5;\n\n\t\tfor (const item of Iterable.concat(first, second)) {\n\n\t\t\tif (item.score === FuzzyScore.Default) {\n\t\t\t\t// skip items that have no overlap\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\titem.editStart.lineNumber, item.editStart.column,\n\t\t\t\titem.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n\t\t\t);\n\t\t\tconst insertText = item.completion.insertTextRules && (item.completion.insertTextRules & CompletionItemInsertTextRule.InsertAsSnippet)\n\t\t\t\t? { snippet: item.completion.insertText }\n\t\t\t\t: item.completion.insertText;\n\n\t\t\tresult.push(new SuggestInlineCompletion(\n\t\t\t\trange,\n\t\t\t\tinsertText,\n\t\t\t\titem.filterTextLow ?? item.labelLow,\n\t\t\t\titem.completion.additionalTextEdits,\n\t\t\t\titem.completion.command,\n\t\t\t\titem.completion.action,\n\t\t\t\titem\n\t\t\t));\n\n\t\t\t// resolve the first N suggestions eagerly\n\t\t\tif (resolveCount-- >= 0) {\n\t\t\t\titem.resolve(CancellationToken.None);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\nexport class SuggestInlineCompletions extends Disposable implements InlineCompletionsProvider<InlineCompletionResults> {\n\n\tprivate _lastResult?: InlineCompletionResults;\n\n\tconstructor(\n\t\t@ILanguageFeaturesService private readonly _languageFeatureService: ILanguageFeaturesService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t\t@ICodeEditorService private readonly _editorService: ICodeEditorService,\n\t) {\n\t\tsuper();\n\t\tthis._store.add(_languageFeatureService.inlineCompletionsProvider.register('*', this));\n\t}\n\n\tasync provideInlineCompletions(model: ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): Promise<InlineCompletionResults | undefined> {\n\n\t\tif (context.selectedSuggestionInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet editor: ICodeEditor | undefined;\n\t\tfor (const candidate of this._editorService.listCodeEditors()) {\n\t\t\tif (candidate.getModel() === model) {\n\t\t\t\teditor = candidate;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = editor.getOption(EditorOption.quickSuggestions);\n\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t// quick suggest is off (for this model/language)\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n\t\t\t// quick suggest is off (for this token)\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We consider non-empty leading words and trigger characters. The latter only\n\t\t// when no word is being typed (word characters superseed trigger characters)\n\t\tlet wordInfo = model.getWordAtPosition(position);\n\t\tlet triggerCharacterInfo: { ch: string; providers: Set<CompletionItemProvider> } | undefined;\n\n\t\tif (!wordInfo?.word) {\n\t\t\ttriggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n\t\t}\n\n\t\tif (!wordInfo?.word && !triggerCharacterInfo) {\n\t\t\t// not at word, not a trigger character\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that we have word information and that we are at the end of a word\n\t\t// otherwise we stop because we don't want to do quick suggestions inside words\n\t\tif (!wordInfo) {\n\t\t\twordInfo = model.getWordUntilPosition(position);\n\t\t}\n\t\tif (wordInfo.endColumn !== position.column) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InlineCompletionResults;\n\t\tconst leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n\t\tif (!triggerCharacterInfo && this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n\t\t\t// reuse a previous result iff possible, only a refilter is needed\n\t\t\t// TODO@jrieken this can be improved further and only incomplete results can be updated\n\t\t\t// console.log(`REUSE with ${wordInfo.word}`);\n\t\t\tconst newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n\t\t\tthis._lastResult.completionModel.lineContext = newLineContext;\n\t\t\tthis._lastResult.acquire();\n\t\t\tresult = this._lastResult;\n\n\t\t} else {\n\t\t\t// refesh model is required\n\t\t\tconst completions = await provideSuggestionItems(\n\t\t\t\tthis._languageFeatureService.completionProvider,\n\t\t\t\tmodel, position,\n\t\t\t\tnew CompletionOptions(undefined, SuggestModel.createSuggestFilter(editor).itemKind, triggerCharacterInfo?.providers),\n\t\t\t\ttriggerCharacterInfo && { triggerKind: CompletionTriggerKind.TriggerCharacter, triggerCharacter: triggerCharacterInfo.ch },\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tconst completionModel = new CompletionModel(\n\t\t\t\tcompletions.items,\n\t\t\t\tposition.column,\n\t\t\t\tnew LineContext(leadingLineContents, 0),\n\t\t\t\tWordDistance.None,\n\t\t\t\teditor.getOption(EditorOption.suggest),\n\t\t\t\teditor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\t{ boostFullMatch: false, firstMatchCanBeWeak: false },\n\t\t\t\tclipboardText\n\t\t\t);\n\t\t\tresult = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n\t\t}\n\n\t\tthis._lastResult = result;\n\t\treturn result;\n\t}\n\n\thandleItemDidShow(_completions: InlineCompletionResults, item: SuggestInlineCompletion): void {\n\t\titem.completion.resolve(CancellationToken.None);\n\t}\n\n\tdisposeInlineCompletions(result: InlineCompletionResults): void {\n\t\tresult.release();\n\t}\n\n\tprivate _getTriggerCharacterInfo(model: ITextModel, position: IPosition) {\n\t\tconst ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n\t\tconst providers = new Set<CompletionItemProvider>();\n\t\tfor (const provider of this._languageFeatureService.completionProvider.all(model)) {\n\t\t\tif (provider.triggerCharacters?.includes(ch)) {\n\t\t\t\tproviders.add(provider);\n\t\t\t}\n\t\t}\n\t\tif (providers.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { providers, ch };\n\t}\n}\n\n\nregisterEditorFeature(SuggestInlineCompletions);\n"]}