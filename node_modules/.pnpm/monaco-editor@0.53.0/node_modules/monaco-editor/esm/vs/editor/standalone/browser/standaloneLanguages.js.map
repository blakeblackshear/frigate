{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/standalone/browser/standaloneLanguages.ts","vs/editor/standalone/browser/standaloneLanguages.ts"],"names":[],"mappings":"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","file":"standaloneLanguages.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { MetadataConsts } from '../../common/encodedTokenAttributes.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageExtensionPoint, ILanguageService } from '../../common/languages/language.js';\nimport { LanguageConfiguration } from '../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { LanguageSelector } from '../../common/languageSelector.js';\nimport * as model from '../../common/model.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IMonarchLanguage } from '../common/monarch/monarchTypes.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IMarkerData, IMarkerService } from '../../../platform/markers/common/markers.js';\n\n/**\n * Register information about a new language.\n */\nexport function register(language: ILanguageExtensionPoint): void {\n\t// Intentionally using the `ModesRegistry` here to avoid\n\t// instantiating services too quickly in the standalone editor.\n\tModesRegistry.registerLanguage(language);\n}\n\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages(): ILanguageExtensionPoint[] {\n\tlet result: ILanguageExtensionPoint[] = [];\n\tresult = result.concat(ModesRegistry.getLanguages());\n\treturn result;\n}\n\nexport function getEncodedLanguageId(languageId: string): number {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\treturn languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set configuration for unknown language ${languageId}`);\n\t}\n\tconst languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n\treturn languageConfigurationService.register(languageId, configuration, 100);\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tprivate readonly _languageId: string;\n\tprivate readonly _actual: EncodedTokensProvider;\n\n\tconstructor(languageId: string, actual: EncodedTokensProvider) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\tif (typeof this._actual.tokenize === 'function') {\n\t\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, <{ tokenize(line: string, state: languages.IState): ILineTokens }>this._actual, line, state);\n\t\t}\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst result = this._actual.tokenizeEncoded(line, state);\n\t\treturn new languages.EncodedTokenizationResult(result.tokens, result.endState);\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tconstructor(\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _actual: TokensProvider,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _standaloneThemeService: IStandaloneThemeService,\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tprivate static _toClassicTokens(tokens: IToken[], language: string): languages.Token[] {\n\t\tconst result: languages.Token[] = [];\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[i] = new languages.Token(startIndex, t.scopes, language);\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static adaptTokenize(language: string, actual: { tokenize(line: string, state: languages.IState): ILineTokens }, line: string, state: languages.IState): languages.TokenizationResult {\n\t\tconst actualResult = actual.tokenize(line, state);\n\t\tconst tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.TokenizationResult(tokens, endState);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n\t}\n\n\tprivate _toBinaryTokens(languageIdCodec: languages.ILanguageIdCodec, tokens: IToken[]): Uint32Array {\n\t\tconst languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\t\tconst tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tconst metadata = tokenTheme.match(languageId, t.scopes) | MetadataConsts.BALANCED_BRACKETS_MASK;\n\t\t\tif (resultLen > 0 && result[resultLen - 1] === metadata) {\n\t\t\t\t// same metadata\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[resultLen++] = startIndex;\n\t\t\tresult[resultLen++] = metadata;\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\n\t\tconst actualResult = new Uint32Array(resultLen);\n\t\tfor (let i = 0; i < resultLen; i++) {\n\t\t\tactualResult[i] = result[i];\n\t\t}\n\t\treturn actualResult;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst actualResult = this._actual.tokenize(line, state);\n\t\tconst tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.EncodedTokenizationResult(tokens, endState);\n\t}\n}\n\n/**\n * A token.\n */\nexport interface IToken {\n\tstartIndex: number;\n\tscopes: string;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface ILineTokens {\n\t/**\n\t * The list of tokens on the line.\n\t */\n\ttokens: IToken[];\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface IEncodedLineTokens {\n\t/**\n\t * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t * Meta data is in binary format:\n\t * - -------------------------------------------\n\t *     3322 2222 2222 1111 1111 1100 0000 0000\n\t *     1098 7654 3210 9876 5432 1098 7654 3210\n\t * - -------------------------------------------\n\t *     bbbb bbbb bfff ffff ffFF FFTT LLLL LLLL\n\t * - -------------------------------------------\n\t *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n\t *  - T = StandardTokenType (2 bits): Other = 0, Comment = 1, String = 2, RegEx = 3.\n\t *  - F = FontStyle (4 bits): None = 0, Italic = 1, Bold = 2, Underline = 4, Strikethrough = 8.\n\t *  - f = foreground ColorId (9 bits)\n\t *  - b = background ColorId (9 bits)\n\t *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n\t * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n\t * id = 1 is for the default foreground color, id = 2 for the default background.\n\t */\n\ttokens: Uint32Array;\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * A factory for token providers.\n */\nexport interface TokensProviderFactory {\n\tcreate(): languages.ProviderResult<TokensProvider | EncodedTokensProvider | IMonarchLanguage>;\n}\n\n/**\n * A \"manual\" provider of tokens.\n */\nexport interface TokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize(line: string, state: languages.IState): ILineTokens;\n}\n\n/**\n * A \"manual\" provider of tokens, returning tokens in a binary form.\n */\nexport interface EncodedTokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenizeEncoded(line: string, state: languages.IState): IEncodedLineTokens;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize?(line: string, state: languages.IState): ILineTokens;\n}\n\nfunction isATokensProvider(provider: TokensProvider | EncodedTokensProvider | IMonarchLanguage): provider is TokensProvider | EncodedTokensProvider {\n\treturn (typeof provider.getInitialState === 'function');\n}\n\nfunction isEncodedTokensProvider(provider: TokensProvider | EncodedTokensProvider): provider is EncodedTokensProvider {\n\treturn 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof obj.then === 'function';\n}\n\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap: string[] | null): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tif (colorMap) {\n\t\tconst result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\tstandaloneThemeService.setColorMapOverride(result);\n\t} else {\n\t\tstandaloneThemeService.setColorMapOverride(null);\n\t}\n}\n\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId: string, provider: TokensProvider | EncodedTokensProvider) {\n\tif (isEncodedTokensProvider(provider)) {\n\t\treturn new EncodedTokenizationSupportAdapter(languageId, provider);\n\t} else {\n\t\treturn new TokenizationSupportAdapter(\n\t\t\tlanguageId,\n\t\t\tprovider,\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t);\n\t}\n}\n\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId: string, factory: TokensProviderFactory): IDisposable {\n\tconst adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n\t\tconst result = await Promise.resolve(factory.create());\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isATokensProvider(result)) {\n\t\t\treturn createTokenizationSupportAdapter(languageId, result);\n\t\t}\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n\t});\n\treturn languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n\t}\n\tif (isThenable<TokensProvider | EncodedTokensProvider>(provider)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => provider });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable {\n\tconst create = (languageDef: IMonarchLanguage) => {\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n\t};\n\tif (isThenable<IMonarchLanguage>(languageDef)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => languageDef });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector: LanguageSelector, provider: languages.ReferenceProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector: LanguageSelector, provider: languages.RenameProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector: LanguageSelector, provider: languages.NewSymbolNamesProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector: LanguageSelector, provider: languages.SignatureHelpProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector: LanguageSelector, provider: languages.HoverProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.hoverProvider.register(languageSelector, {\n\t\tprovideHover: async (model: model.ITextModel, position: Position, token: CancellationToken, context?: languages.HoverContext<languages.Hover>): Promise<languages.Hover | undefined> => {\n\t\t\tconst word = model.getWordAtPosition(position);\n\n\t\t\treturn Promise.resolve<languages.Hover | null | undefined>(provider.provideHover(model, position, token, context)).then((value): languages.Hover | undefined => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!value.range && word) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\t\t\t\t}\n\t\t\t\tif (!value.range) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}\n\t});\n}\n\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector: LanguageSelector, provider: languages.DocumentSymbolProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector: LanguageSelector, provider: languages.DocumentHighlightProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector: LanguageSelector, provider: languages.LinkedEditingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector: LanguageSelector, provider: languages.DefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector: LanguageSelector, provider: languages.ImplementationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector: LanguageSelector, provider: languages.TypeDefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector: LanguageSelector, provider: languages.CodeLensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector: LanguageSelector, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeActionProvider.register(languageSelector, {\n\t\tprovidedCodeActionKinds: metadata?.providedCodeActionKinds,\n\t\tdocumentation: metadata?.documentation,\n\t\tprovideCodeActions: (model: model.ITextModel, range: Range, context: languages.CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList> => {\n\t\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\t\tconst markers = markerService.read({ resource: model.uri }).filter(m => {\n\t\t\t\treturn Range.areIntersectingOrTouching(m, range);\n\t\t\t});\n\t\t\treturn provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n\t\t},\n\t\tresolveCodeAction: provider.resolveCodeAction\n\t});\n}\n\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.OnTypeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector: LanguageSelector, provider: languages.LinkProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector: LanguageSelector, provider: languages.CompletionItemProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector: LanguageSelector, provider: languages.DocumentColorProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector: LanguageSelector, provider: languages.FoldingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector: LanguageSelector, provider: languages.DeclarationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector: LanguageSelector, provider: languages.SelectionRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector: LanguageSelector, provider: languages.InlineCompletionsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector: LanguageSelector, provider: languages.InlayHintsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n\n/**\n * Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.\n */\nexport interface CodeActionContext {\n\n\t/**\n\t * An array of diagnostics.\n\t */\n\treadonly markers: IMarkerData[];\n\n\t/**\n\t * Requested kind of actions to return.\n\t */\n\treadonly only?: string;\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\treadonly trigger: languages.CodeActionTriggerType;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: languages.CodeAction, token: CancellationToken): languages.ProviderResult<languages.CodeAction>;\n}\n\n\n\n/**\n * Metadata about the type of code actions that a {@link CodeActionProvider} provides.\n */\nexport interface CodeActionProviderMetadata {\n\t/**\n\t * List of code action kinds that a {@link CodeActionProvider} may return.\n\t *\n\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t * list of kinds may either be generic, such as `[\"quickfix\", \"refactor\", \"source\"]`, or list out every kind provided,\n\t * such as `[\"quickfix.removeLine\", \"source.fixAll\" ...]`.\n\t */\n\treadonly providedCodeActionKinds?: readonly string[];\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: languages.Command }>;\n}\n\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI(): typeof monaco.languages {\n\treturn {\n\t\tregister: <any>register,\n\t\tgetLanguages: <any>getLanguages,\n\t\tonLanguage: <any>onLanguage,\n\t\tonLanguageEncountered: <any>onLanguageEncountered,\n\t\tgetEncodedLanguageId: <any>getEncodedLanguageId,\n\n\t\t// provider methods\n\t\tsetLanguageConfiguration: <any>setLanguageConfiguration,\n\t\tsetColorMap: setColorMap,\n\t\tregisterTokensProviderFactory: <any>registerTokensProviderFactory,\n\t\tsetTokensProvider: <any>setTokensProvider,\n\t\tsetMonarchTokensProvider: <any>setMonarchTokensProvider,\n\t\tregisterReferenceProvider: <any>registerReferenceProvider,\n\t\tregisterRenameProvider: <any>registerRenameProvider,\n\t\tregisterNewSymbolNameProvider: <any>registerNewSymbolNameProvider,\n\t\tregisterCompletionItemProvider: <any>registerCompletionItemProvider,\n\t\tregisterSignatureHelpProvider: <any>registerSignatureHelpProvider,\n\t\tregisterHoverProvider: <any>registerHoverProvider,\n\t\tregisterDocumentSymbolProvider: <any>registerDocumentSymbolProvider,\n\t\tregisterDocumentHighlightProvider: <any>registerDocumentHighlightProvider,\n\t\tregisterLinkedEditingRangeProvider: <any>registerLinkedEditingRangeProvider,\n\t\tregisterDefinitionProvider: <any>registerDefinitionProvider,\n\t\tregisterImplementationProvider: <any>registerImplementationProvider,\n\t\tregisterTypeDefinitionProvider: <any>registerTypeDefinitionProvider,\n\t\tregisterCodeLensProvider: <any>registerCodeLensProvider,\n\t\tregisterCodeActionProvider: <any>registerCodeActionProvider,\n\t\tregisterDocumentFormattingEditProvider: <any>registerDocumentFormattingEditProvider,\n\t\tregisterDocumentRangeFormattingEditProvider: <any>registerDocumentRangeFormattingEditProvider,\n\t\tregisterOnTypeFormattingEditProvider: <any>registerOnTypeFormattingEditProvider,\n\t\tregisterLinkProvider: <any>registerLinkProvider,\n\t\tregisterColorProvider: <any>registerColorProvider,\n\t\tregisterFoldingRangeProvider: <any>registerFoldingRangeProvider,\n\t\tregisterDeclarationProvider: <any>registerDeclarationProvider,\n\t\tregisterSelectionRangeProvider: <any>registerSelectionRangeProvider,\n\t\tregisterDocumentSemanticTokensProvider: <any>registerDocumentSemanticTokensProvider,\n\t\tregisterDocumentRangeSemanticTokensProvider: <any>registerDocumentRangeSemanticTokensProvider,\n\t\tregisterInlineCompletionsProvider: <any>registerInlineCompletionsProvider,\n\t\tregisterInlayHintsProvider: <any>registerInlayHintsProvider,\n\n\t\t// enums\n\t\tDocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n\t\tCompletionItemKind: standaloneEnums.CompletionItemKind,\n\t\tCompletionItemTag: standaloneEnums.CompletionItemTag,\n\t\tCompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n\t\tSymbolKind: standaloneEnums.SymbolKind,\n\t\tSymbolTag: standaloneEnums.SymbolTag,\n\t\tIndentAction: standaloneEnums.IndentAction,\n\t\tCompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n\t\tSignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n\t\tInlayHintKind: standaloneEnums.InlayHintKind,\n\t\tInlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n\t\tCodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n\t\tNewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n\t\tNewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n\t\tPartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n\t\tHoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n\t\tInlineCompletionEndOfLifeReasonKind: standaloneEnums.InlineCompletionEndOfLifeReasonKind,\n\t\tInlineCompletionDisplayLocationKind: standaloneEnums.InlineCompletionDisplayLocationKind,\n\n\t\t// classes\n\t\tFoldingRangeKind: languages.FoldingRangeKind,\n\t\tSelectedSuggestionInfo: <any>languages.SelectedSuggestionInfo,\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Color } from '../../../base/common/color.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { MetadataConsts } from '../../common/encodedTokenAttributes.js';\nimport * as languages from '../../common/languages.js';\nimport { ILanguageExtensionPoint, ILanguageService } from '../../common/languages/language.js';\nimport { LanguageConfiguration } from '../../common/languages/languageConfiguration.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { ModesRegistry } from '../../common/languages/modesRegistry.js';\nimport { LanguageSelector } from '../../common/languageSelector.js';\nimport * as model from '../../common/model.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { StandaloneServices } from './standaloneServices.js';\nimport { compile } from '../common/monarch/monarchCompile.js';\nimport { MonarchTokenizer } from '../common/monarch/monarchLexer.js';\nimport { IMonarchLanguage } from '../common/monarch/monarchTypes.js';\nimport { IStandaloneThemeService } from '../common/standaloneTheme.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IMarkerData, IMarkerService } from '../../../platform/markers/common/markers.js';\n\n/**\n * Register information about a new language.\n */\nexport function register(language: ILanguageExtensionPoint): void {\n\t// Intentionally using the `ModesRegistry` here to avoid\n\t// instantiating services too quickly in the standalone editor.\n\tModesRegistry.registerLanguage(language);\n}\n\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages(): ILanguageExtensionPoint[] {\n\tlet result: ILanguageExtensionPoint[] = [];\n\tresult = result.concat(ModesRegistry.getLanguages());\n\treturn result;\n}\n\nexport function getEncodedLanguageId(languageId: string): number {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\treturn languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set configuration for unknown language ${languageId}`);\n\t}\n\tconst languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n\treturn languageConfigurationService.register(languageId, configuration, 100);\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tprivate readonly _languageId: string;\n\tprivate readonly _actual: EncodedTokensProvider;\n\n\tconstructor(languageId: string, actual: EncodedTokensProvider) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\tif (typeof this._actual.tokenize === 'function') {\n\t\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, <{ tokenize(line: string, state: languages.IState): ILineTokens }>this._actual, line, state);\n\t\t}\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst result = this._actual.tokenizeEncoded(line, state);\n\t\treturn new languages.EncodedTokenizationResult(result.tokens, result.endState);\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tconstructor(\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _actual: TokensProvider,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _standaloneThemeService: IStandaloneThemeService,\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tprivate static _toClassicTokens(tokens: IToken[], language: string): languages.Token[] {\n\t\tconst result: languages.Token[] = [];\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[i] = new languages.Token(startIndex, t.scopes, language);\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static adaptTokenize(language: string, actual: { tokenize(line: string, state: languages.IState): ILineTokens }, line: string, state: languages.IState): languages.TokenizationResult {\n\t\tconst actualResult = actual.tokenize(line, state);\n\t\tconst tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.TokenizationResult(tokens, endState);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n\t}\n\n\tprivate _toBinaryTokens(languageIdCodec: languages.ILanguageIdCodec, tokens: IToken[]): Uint32Array {\n\t\tconst languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\t\tconst tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tconst metadata = tokenTheme.match(languageId, t.scopes) | MetadataConsts.BALANCED_BRACKETS_MASK;\n\t\t\tif (resultLen > 0 && result[resultLen - 1] === metadata) {\n\t\t\t\t// same metadata\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[resultLen++] = startIndex;\n\t\t\tresult[resultLen++] = metadata;\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\n\t\tconst actualResult = new Uint32Array(resultLen);\n\t\tfor (let i = 0; i < resultLen; i++) {\n\t\t\tactualResult[i] = result[i];\n\t\t}\n\t\treturn actualResult;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst actualResult = this._actual.tokenize(line, state);\n\t\tconst tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.EncodedTokenizationResult(tokens, endState);\n\t}\n}\n\n/**\n * A token.\n */\nexport interface IToken {\n\tstartIndex: number;\n\tscopes: string;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface ILineTokens {\n\t/**\n\t * The list of tokens on the line.\n\t */\n\ttokens: IToken[];\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface IEncodedLineTokens {\n\t/**\n\t * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t * Meta data is in binary format:\n\t * - -------------------------------------------\n\t *     3322 2222 2222 1111 1111 1100 0000 0000\n\t *     1098 7654 3210 9876 5432 1098 7654 3210\n\t * - -------------------------------------------\n\t *     bbbb bbbb bfff ffff ffFF FFTT LLLL LLLL\n\t * - -------------------------------------------\n\t *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n\t *  - T = StandardTokenType (2 bits): Other = 0, Comment = 1, String = 2, RegEx = 3.\n\t *  - F = FontStyle (4 bits): None = 0, Italic = 1, Bold = 2, Underline = 4, Strikethrough = 8.\n\t *  - f = foreground ColorId (9 bits)\n\t *  - b = background ColorId (9 bits)\n\t *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n\t * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n\t * id = 1 is for the default foreground color, id = 2 for the default background.\n\t */\n\ttokens: Uint32Array;\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * A factory for token providers.\n */\nexport interface TokensProviderFactory {\n\tcreate(): languages.ProviderResult<TokensProvider | EncodedTokensProvider | IMonarchLanguage>;\n}\n\n/**\n * A \"manual\" provider of tokens.\n */\nexport interface TokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize(line: string, state: languages.IState): ILineTokens;\n}\n\n/**\n * A \"manual\" provider of tokens, returning tokens in a binary form.\n */\nexport interface EncodedTokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenizeEncoded(line: string, state: languages.IState): IEncodedLineTokens;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize?(line: string, state: languages.IState): ILineTokens;\n}\n\nfunction isATokensProvider(provider: TokensProvider | EncodedTokensProvider | IMonarchLanguage): provider is TokensProvider | EncodedTokensProvider {\n\treturn (typeof provider.getInitialState === 'function');\n}\n\nfunction isEncodedTokensProvider(provider: TokensProvider | EncodedTokensProvider): provider is EncodedTokensProvider {\n\treturn 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof obj.then === 'function';\n}\n\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap: string[] | null): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tif (colorMap) {\n\t\tconst result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\tstandaloneThemeService.setColorMapOverride(result);\n\t} else {\n\t\tstandaloneThemeService.setColorMapOverride(null);\n\t}\n}\n\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId: string, provider: TokensProvider | EncodedTokensProvider) {\n\tif (isEncodedTokensProvider(provider)) {\n\t\treturn new EncodedTokenizationSupportAdapter(languageId, provider);\n\t} else {\n\t\treturn new TokenizationSupportAdapter(\n\t\t\tlanguageId,\n\t\t\tprovider,\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t);\n\t}\n}\n\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId: string, factory: TokensProviderFactory): IDisposable {\n\tconst adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n\t\tconst result = await Promise.resolve(factory.create());\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isATokensProvider(result)) {\n\t\t\treturn createTokenizationSupportAdapter(languageId, result);\n\t\t}\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n\t});\n\treturn languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n\t}\n\tif (isThenable<TokensProvider | EncodedTokensProvider>(provider)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => provider });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable {\n\tconst create = (languageDef: IMonarchLanguage) => {\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n\t};\n\tif (isThenable<IMonarchLanguage>(languageDef)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => languageDef });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector: LanguageSelector, provider: languages.ReferenceProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector: LanguageSelector, provider: languages.RenameProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a new symbol-name provider (e.g., when a symbol is being renamed, show new possible symbol-names)\n */\nexport function registerNewSymbolNameProvider(languageSelector: LanguageSelector, provider: languages.NewSymbolNamesProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.newSymbolNamesProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector: LanguageSelector, provider: languages.SignatureHelpProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector: LanguageSelector, provider: languages.HoverProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.hoverProvider.register(languageSelector, {\n\t\tprovideHover: async (model: model.ITextModel, position: Position, token: CancellationToken, context?: languages.HoverContext<languages.Hover>): Promise<languages.Hover | undefined> => {\n\t\t\tconst word = model.getWordAtPosition(position);\n\n\t\t\treturn Promise.resolve<languages.Hover | null | undefined>(provider.provideHover(model, position, token, context)).then((value): languages.Hover | undefined => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!value.range && word) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\t\t\t\t}\n\t\t\t\tif (!value.range) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}\n\t});\n}\n\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector: LanguageSelector, provider: languages.DocumentSymbolProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector: LanguageSelector, provider: languages.DocumentHighlightProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector: LanguageSelector, provider: languages.LinkedEditingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector: LanguageSelector, provider: languages.DefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector: LanguageSelector, provider: languages.ImplementationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector: LanguageSelector, provider: languages.TypeDefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector: LanguageSelector, provider: languages.CodeLensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector: LanguageSelector, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeActionProvider.register(languageSelector, {\n\t\tprovidedCodeActionKinds: metadata?.providedCodeActionKinds,\n\t\tdocumentation: metadata?.documentation,\n\t\tprovideCodeActions: (model: model.ITextModel, range: Range, context: languages.CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList> => {\n\t\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\t\tconst markers = markerService.read({ resource: model.uri }).filter(m => {\n\t\t\t\treturn Range.areIntersectingOrTouching(m, range);\n\t\t\t});\n\t\t\treturn provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n\t\t},\n\t\tresolveCodeAction: provider.resolveCodeAction\n\t});\n}\n\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.OnTypeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector: LanguageSelector, provider: languages.LinkProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector: LanguageSelector, provider: languages.CompletionItemProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector: LanguageSelector, provider: languages.DocumentColorProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector: LanguageSelector, provider: languages.FoldingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector: LanguageSelector, provider: languages.DeclarationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector: LanguageSelector, provider: languages.SelectionRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector: LanguageSelector, provider: languages.InlineCompletionsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector: LanguageSelector, provider: languages.InlayHintsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n\n/**\n * Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.\n */\nexport interface CodeActionContext {\n\n\t/**\n\t * An array of diagnostics.\n\t */\n\treadonly markers: IMarkerData[];\n\n\t/**\n\t * Requested kind of actions to return.\n\t */\n\treadonly only?: string;\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\treadonly trigger: languages.CodeActionTriggerType;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: languages.CodeAction, token: CancellationToken): languages.ProviderResult<languages.CodeAction>;\n}\n\n\n\n/**\n * Metadata about the type of code actions that a {@link CodeActionProvider} provides.\n */\nexport interface CodeActionProviderMetadata {\n\t/**\n\t * List of code action kinds that a {@link CodeActionProvider} may return.\n\t *\n\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t * list of kinds may either be generic, such as `[\"quickfix\", \"refactor\", \"source\"]`, or list out every kind provided,\n\t * such as `[\"quickfix.removeLine\", \"source.fixAll\" ...]`.\n\t */\n\treadonly providedCodeActionKinds?: readonly string[];\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: languages.Command }>;\n}\n\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI(): typeof monaco.languages {\n\treturn {\n\t\tregister: <any>register,\n\t\tgetLanguages: <any>getLanguages,\n\t\tonLanguage: <any>onLanguage,\n\t\tonLanguageEncountered: <any>onLanguageEncountered,\n\t\tgetEncodedLanguageId: <any>getEncodedLanguageId,\n\n\t\t// provider methods\n\t\tsetLanguageConfiguration: <any>setLanguageConfiguration,\n\t\tsetColorMap: setColorMap,\n\t\tregisterTokensProviderFactory: <any>registerTokensProviderFactory,\n\t\tsetTokensProvider: <any>setTokensProvider,\n\t\tsetMonarchTokensProvider: <any>setMonarchTokensProvider,\n\t\tregisterReferenceProvider: <any>registerReferenceProvider,\n\t\tregisterRenameProvider: <any>registerRenameProvider,\n\t\tregisterNewSymbolNameProvider: <any>registerNewSymbolNameProvider,\n\t\tregisterCompletionItemProvider: <any>registerCompletionItemProvider,\n\t\tregisterSignatureHelpProvider: <any>registerSignatureHelpProvider,\n\t\tregisterHoverProvider: <any>registerHoverProvider,\n\t\tregisterDocumentSymbolProvider: <any>registerDocumentSymbolProvider,\n\t\tregisterDocumentHighlightProvider: <any>registerDocumentHighlightProvider,\n\t\tregisterLinkedEditingRangeProvider: <any>registerLinkedEditingRangeProvider,\n\t\tregisterDefinitionProvider: <any>registerDefinitionProvider,\n\t\tregisterImplementationProvider: <any>registerImplementationProvider,\n\t\tregisterTypeDefinitionProvider: <any>registerTypeDefinitionProvider,\n\t\tregisterCodeLensProvider: <any>registerCodeLensProvider,\n\t\tregisterCodeActionProvider: <any>registerCodeActionProvider,\n\t\tregisterDocumentFormattingEditProvider: <any>registerDocumentFormattingEditProvider,\n\t\tregisterDocumentRangeFormattingEditProvider: <any>registerDocumentRangeFormattingEditProvider,\n\t\tregisterOnTypeFormattingEditProvider: <any>registerOnTypeFormattingEditProvider,\n\t\tregisterLinkProvider: <any>registerLinkProvider,\n\t\tregisterColorProvider: <any>registerColorProvider,\n\t\tregisterFoldingRangeProvider: <any>registerFoldingRangeProvider,\n\t\tregisterDeclarationProvider: <any>registerDeclarationProvider,\n\t\tregisterSelectionRangeProvider: <any>registerSelectionRangeProvider,\n\t\tregisterDocumentSemanticTokensProvider: <any>registerDocumentSemanticTokensProvider,\n\t\tregisterDocumentRangeSemanticTokensProvider: <any>registerDocumentRangeSemanticTokensProvider,\n\t\tregisterInlineCompletionsProvider: <any>registerInlineCompletionsProvider,\n\t\tregisterInlayHintsProvider: <any>registerInlayHintsProvider,\n\n\t\t// enums\n\t\tDocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n\t\tCompletionItemKind: standaloneEnums.CompletionItemKind,\n\t\tCompletionItemTag: standaloneEnums.CompletionItemTag,\n\t\tCompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n\t\tSymbolKind: standaloneEnums.SymbolKind,\n\t\tSymbolTag: standaloneEnums.SymbolTag,\n\t\tIndentAction: standaloneEnums.IndentAction,\n\t\tCompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n\t\tSignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n\t\tInlayHintKind: standaloneEnums.InlayHintKind,\n\t\tInlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n\t\tCodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n\t\tNewSymbolNameTag: standaloneEnums.NewSymbolNameTag,\n\t\tNewSymbolNameTriggerKind: standaloneEnums.NewSymbolNameTriggerKind,\n\t\tPartialAcceptTriggerKind: standaloneEnums.PartialAcceptTriggerKind,\n\t\tHoverVerbosityAction: standaloneEnums.HoverVerbosityAction,\n\t\tInlineCompletionEndOfLifeReasonKind: standaloneEnums.InlineCompletionEndOfLifeReasonKind,\n\t\tInlineCompletionDisplayLocationKind: standaloneEnums.InlineCompletionDisplayLocationKind,\n\n\t\t// classes\n\t\tFoldingRangeKind: languages.FoldingRangeKind,\n\t\tSelectedSuggestionInfo: <any>languages.SelectedSuggestionInfo,\n\t};\n}\n"]}