{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/editor.worker.start.ts","vs/editor/editor.worker.start.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,6CAA6C,CAAC;AACzE,OAAO,EAAE,YAAY,EAAkB,MAAM,sCAAsC,CAAC;AACpF,OAAO,EAAE,gBAAgB,EAAE,MAAM,uCAAuC,CAAC;AAEzE;;;;GAIG;AACH,MAAM,UAAU,KAAK,CAA+C,YAAqD;IACxH,IAAI,MAA2B,CAAC;IAChC,MAAM,eAAe,GAAG,UAAU,CAAC,CAAC,YAAY,EAAE,EAAE;QACnD,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAEnE,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,EAAE,EAAE;YAC1B,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ;gBACzB,IAAI,IAAI,KAAK,MAAM,EAAE,CAAC;oBACrB,4GAA4G;oBAC5G,OAAO,SAAS,CAAC;gBAClB,CAAC;gBACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;oBAC9B,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;gBAClC,CAAC;gBACD,OAAO,CAAC,GAAG,IAAe,EAAE,EAAE;oBAC7B,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAC1C,CAAC,CAAC;YACH,CAAC;SACD,CAAC,CAAC;QAEH,MAAM,GAAG,GAA0B;YAClC,IAAI,EAAE,IAAa;YACnB,eAAe,EAAE,GAAG,EAAE;gBACrB,OAAO,eAAe,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;YACnD,CAAC;SACD,CAAC;QAEF,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;QAE3B,OAAO,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,OAAO,MAAO,CAAC;AAChB,CAAC","file":"editor.worker.start.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { initialize } from '../base/common/worker/webWorkerBootstrap.js';\nimport { EditorWorker, IWorkerContext } from './common/services/editorWebWorker.js';\nimport { EditorWorkerHost } from './common/services/editorWorkerHost.js';\n\n/**\n * Used by `monaco-editor` to hook up web worker rpc.\n * @skipMangle\n * @internal\n */\nexport function start<THost extends object, TClient extends object>(createClient: (ctx: IWorkerContext<THost>) => TClient): TClient {\n\tlet client: TClient | undefined;\n\tconst webWorkerServer = initialize((workerServer) => {\n\t\tconst editorWorkerHost = EditorWorkerHost.getChannel(workerServer);\n\n\t\tconst host = new Proxy({}, {\n\t\t\tget(target, prop, receiver) {\n\t\t\t\tif (prop === 'then') {\n\t\t\t\t\t// Don't forward the call when the proxy is returned in an async function and the runtime tries to .then it.\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (typeof prop !== 'string') {\n\t\t\t\t\tthrow new Error(`Not supported`);\n\t\t\t\t}\n\t\t\t\treturn (...args: unknown[]) => {\n\t\t\t\t\treturn editorWorkerHost.$fhr(prop, args);\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst ctx: IWorkerContext<THost> = {\n\t\t\thost: host as THost,\n\t\t\tgetMirrorModels: () => {\n\t\t\t\treturn webWorkerServer.requestHandler.getModels();\n\t\t\t}\n\t\t};\n\n\t\tclient = createClient(ctx);\n\n\t\treturn new EditorWorker(client);\n\t});\n\n\treturn client!;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { initialize } from '../base/common/worker/webWorkerBootstrap.js';\nimport { EditorWorker, IWorkerContext } from './common/services/editorWebWorker.js';\nimport { EditorWorkerHost } from './common/services/editorWorkerHost.js';\n\n/**\n * Used by `monaco-editor` to hook up web worker rpc.\n * @skipMangle\n * @internal\n */\nexport function start<THost extends object, TClient extends object>(createClient: (ctx: IWorkerContext<THost>) => TClient): TClient {\n\tlet client: TClient | undefined;\n\tconst webWorkerServer = initialize((workerServer) => {\n\t\tconst editorWorkerHost = EditorWorkerHost.getChannel(workerServer);\n\n\t\tconst host = new Proxy({}, {\n\t\t\tget(target, prop, receiver) {\n\t\t\t\tif (prop === 'then') {\n\t\t\t\t\t// Don't forward the call when the proxy is returned in an async function and the runtime tries to .then it.\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (typeof prop !== 'string') {\n\t\t\t\t\tthrow new Error(`Not supported`);\n\t\t\t\t}\n\t\t\t\treturn (...args: unknown[]) => {\n\t\t\t\t\treturn editorWorkerHost.$fhr(prop, args);\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tconst ctx: IWorkerContext<THost> = {\n\t\t\thost: host as THost,\n\t\t\tgetMirrorModels: () => {\n\t\t\t\treturn webWorkerServer.requestHandler.getModels();\n\t\t\t}\n\t\t};\n\n\t\tclient = createClient(ctx);\n\n\t\treturn new EditorWorker(client);\n\t});\n\n\treturn client!;\n}\n"]}