{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/atlas/textureAtlasShelfAllocator.ts","vs/editor/browser/gpu/atlas/textureAtlasShelfAllocator.ts"],"names":[],"mappings":"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","file":"textureAtlasShelfAllocator.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { ensureNonNullable } from '../gpuUtils.js';\nimport { IRasterizedGlyph } from '../raster/raster.js';\nimport { UsagePreviewColors, type ITextureAtlasAllocator, type ITextureAtlasPageGlyph } from './atlas.js';\n\n/**\n * The shelf allocator is a simple allocator that places glyphs in rows, starting a new row when the\n * current row is full. Due to its simplicity, it can waste space but it is very fast.\n */\nexport class TextureAtlasShelfAllocator implements ITextureAtlasAllocator {\n\n\tprivate readonly _ctx: OffscreenCanvasRenderingContext2D;\n\n\tprivate _currentRow: ITextureAtlasShelf = {\n\t\tx: 0,\n\t\ty: 0,\n\t\th: 0\n\t};\n\n\t/** A set of all glyphs allocated, this is only tracked to enable debug related functionality */\n\tprivate readonly _allocatedGlyphs: Set<Readonly<ITextureAtlasPageGlyph>> = new Set();\n\n\tprivate _nextIndex = 0;\n\n\tconstructor(\n\t\tprivate readonly _canvas: OffscreenCanvas,\n\t\tprivate readonly _textureIndex: number,\n\t) {\n\t\tthis._ctx = ensureNonNullable(this._canvas.getContext('2d', {\n\t\t\twillReadFrequently: true\n\t\t}));\n\t}\n\n\tpublic allocate(rasterizedGlyph: IRasterizedGlyph): ITextureAtlasPageGlyph | undefined {\n\t\t// The glyph does not fit into the atlas page\n\t\tconst glyphWidth = rasterizedGlyph.boundingBox.right - rasterizedGlyph.boundingBox.left + 1;\n\t\tconst glyphHeight = rasterizedGlyph.boundingBox.bottom - rasterizedGlyph.boundingBox.top + 1;\n\t\tif (glyphWidth > this._canvas.width || glyphHeight > this._canvas.height) {\n\t\t\tthrow new BugIndicatingError('Glyph is too large for the atlas page');\n\t\t}\n\n\t\t// Finalize and increment row if it doesn't fix horizontally\n\t\tif (rasterizedGlyph.boundingBox.right - rasterizedGlyph.boundingBox.left + 1 > this._canvas.width - this._currentRow.x) {\n\t\t\tthis._currentRow.x = 0;\n\t\t\tthis._currentRow.y += this._currentRow.h;\n\t\t\tthis._currentRow.h = 1;\n\t\t}\n\n\t\t// Return undefined if there isn't any room left\n\t\tif (this._currentRow.y + rasterizedGlyph.boundingBox.bottom - rasterizedGlyph.boundingBox.top + 1 > this._canvas.height) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Draw glyph\n\t\tthis._ctx.drawImage(\n\t\t\trasterizedGlyph.source,\n\t\t\t// source\n\t\t\trasterizedGlyph.boundingBox.left,\n\t\t\trasterizedGlyph.boundingBox.top,\n\t\t\tglyphWidth,\n\t\t\tglyphHeight,\n\t\t\t// destination\n\t\t\tthis._currentRow.x,\n\t\t\tthis._currentRow.y,\n\t\t\tglyphWidth,\n\t\t\tglyphHeight\n\t\t);\n\n\t\t// Create glyph object\n\t\tconst glyph: ITextureAtlasPageGlyph = {\n\t\t\tpageIndex: this._textureIndex,\n\t\t\tglyphIndex: this._nextIndex++,\n\t\t\tx: this._currentRow.x,\n\t\t\ty: this._currentRow.y,\n\t\t\tw: glyphWidth,\n\t\t\th: glyphHeight,\n\t\t\toriginOffsetX: rasterizedGlyph.originOffset.x,\n\t\t\toriginOffsetY: rasterizedGlyph.originOffset.y,\n\t\t\tfontBoundingBoxAscent: rasterizedGlyph.fontBoundingBoxAscent,\n\t\t\tfontBoundingBoxDescent: rasterizedGlyph.fontBoundingBoxDescent,\n\t\t};\n\n\t\t// Shift current row\n\t\tthis._currentRow.x += glyphWidth;\n\t\tthis._currentRow.h = Math.max(this._currentRow.h, glyphHeight);\n\n\t\t// Set the glyph\n\t\tthis._allocatedGlyphs.add(glyph);\n\n\t\treturn glyph;\n\t}\n\n\tpublic getUsagePreview(): Promise<Blob> {\n\t\tconst w = this._canvas.width;\n\t\tconst h = this._canvas.height;\n\t\tconst canvas = new OffscreenCanvas(w, h);\n\t\tconst ctx = ensureNonNullable(canvas.getContext('2d'));\n\t\tctx.fillStyle = UsagePreviewColors.Unused;\n\t\tctx.fillRect(0, 0, w, h);\n\n\t\tconst rowHeight: Map<number, number> = new Map(); // y -> h\n\t\tconst rowWidth: Map<number, number> = new Map(); // y -> w\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\trowHeight.set(g.y, Math.max(rowHeight.get(g.y) ?? 0, g.h));\n\t\t\trowWidth.set(g.y, Math.max(rowWidth.get(g.y) ?? 0, g.x + g.w));\n\t\t}\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\tctx.fillStyle = UsagePreviewColors.Used;\n\t\t\tctx.fillRect(g.x, g.y, g.w, g.h);\n\t\t\tctx.fillStyle = UsagePreviewColors.Wasted;\n\t\t\tctx.fillRect(g.x, g.y + g.h, g.w, rowHeight.get(g.y)! - g.h);\n\t\t}\n\t\tfor (const [rowY, rowW] of rowWidth.entries()) {\n\t\t\tif (rowY !== this._currentRow.y) {\n\t\t\t\tctx.fillStyle = UsagePreviewColors.Wasted;\n\t\t\t\tctx.fillRect(rowW, rowY, w - rowW, rowHeight.get(rowY)!);\n\t\t\t}\n\t\t}\n\t\treturn canvas.convertToBlob();\n\t}\n\n\tgetStats(): string {\n\t\tconst w = this._canvas.width;\n\t\tconst h = this._canvas.height;\n\n\t\tlet usedPixels = 0;\n\t\tlet wastedPixels = 0;\n\t\tconst totalPixels = w * h;\n\n\t\tconst rowHeight: Map<number, number> = new Map(); // y -> h\n\t\tconst rowWidth: Map<number, number> = new Map(); // y -> w\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\trowHeight.set(g.y, Math.max(rowHeight.get(g.y) ?? 0, g.h));\n\t\t\trowWidth.set(g.y, Math.max(rowWidth.get(g.y) ?? 0, g.x + g.w));\n\t\t}\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\tusedPixels += g.w * g.h;\n\t\t\twastedPixels += g.w * (rowHeight.get(g.y)! - g.h);\n\t\t}\n\t\tfor (const [rowY, rowW] of rowWidth.entries()) {\n\t\t\tif (rowY !== this._currentRow.y) {\n\t\t\t\twastedPixels += (w - rowW) * rowHeight.get(rowY)!;\n\t\t\t}\n\t\t}\n\t\treturn [\n\t\t\t`page${this._textureIndex}:`,\n\t\t\t`     Total: ${totalPixels} (${w}x${h})`,\n\t\t\t`      Used: ${usedPixels} (${((usedPixels / totalPixels) * 100).toPrecision(2)}%)`,\n\t\t\t`    Wasted: ${wastedPixels} (${((wastedPixels / totalPixels) * 100).toPrecision(2)}%)`,\n\t\t\t`Efficiency: ${((usedPixels / (usedPixels + wastedPixels)) * 100).toPrecision(2)}%`,\n\t\t].join('\\n');\n\t}\n}\n\ninterface ITextureAtlasShelf {\n\tx: number;\n\ty: number;\n\th: number;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nimport { ensureNonNullable } from '../gpuUtils.js';\nimport { IRasterizedGlyph } from '../raster/raster.js';\nimport { UsagePreviewColors, type ITextureAtlasAllocator, type ITextureAtlasPageGlyph } from './atlas.js';\n\n/**\n * The shelf allocator is a simple allocator that places glyphs in rows, starting a new row when the\n * current row is full. Due to its simplicity, it can waste space but it is very fast.\n */\nexport class TextureAtlasShelfAllocator implements ITextureAtlasAllocator {\n\n\tprivate readonly _ctx: OffscreenCanvasRenderingContext2D;\n\n\tprivate _currentRow: ITextureAtlasShelf = {\n\t\tx: 0,\n\t\ty: 0,\n\t\th: 0\n\t};\n\n\t/** A set of all glyphs allocated, this is only tracked to enable debug related functionality */\n\tprivate readonly _allocatedGlyphs: Set<Readonly<ITextureAtlasPageGlyph>> = new Set();\n\n\tprivate _nextIndex = 0;\n\n\tconstructor(\n\t\tprivate readonly _canvas: OffscreenCanvas,\n\t\tprivate readonly _textureIndex: number,\n\t) {\n\t\tthis._ctx = ensureNonNullable(this._canvas.getContext('2d', {\n\t\t\twillReadFrequently: true\n\t\t}));\n\t}\n\n\tpublic allocate(rasterizedGlyph: IRasterizedGlyph): ITextureAtlasPageGlyph | undefined {\n\t\t// The glyph does not fit into the atlas page\n\t\tconst glyphWidth = rasterizedGlyph.boundingBox.right - rasterizedGlyph.boundingBox.left + 1;\n\t\tconst glyphHeight = rasterizedGlyph.boundingBox.bottom - rasterizedGlyph.boundingBox.top + 1;\n\t\tif (glyphWidth > this._canvas.width || glyphHeight > this._canvas.height) {\n\t\t\tthrow new BugIndicatingError('Glyph is too large for the atlas page');\n\t\t}\n\n\t\t// Finalize and increment row if it doesn't fix horizontally\n\t\tif (rasterizedGlyph.boundingBox.right - rasterizedGlyph.boundingBox.left + 1 > this._canvas.width - this._currentRow.x) {\n\t\t\tthis._currentRow.x = 0;\n\t\t\tthis._currentRow.y += this._currentRow.h;\n\t\t\tthis._currentRow.h = 1;\n\t\t}\n\n\t\t// Return undefined if there isn't any room left\n\t\tif (this._currentRow.y + rasterizedGlyph.boundingBox.bottom - rasterizedGlyph.boundingBox.top + 1 > this._canvas.height) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Draw glyph\n\t\tthis._ctx.drawImage(\n\t\t\trasterizedGlyph.source,\n\t\t\t// source\n\t\t\trasterizedGlyph.boundingBox.left,\n\t\t\trasterizedGlyph.boundingBox.top,\n\t\t\tglyphWidth,\n\t\t\tglyphHeight,\n\t\t\t// destination\n\t\t\tthis._currentRow.x,\n\t\t\tthis._currentRow.y,\n\t\t\tglyphWidth,\n\t\t\tglyphHeight\n\t\t);\n\n\t\t// Create glyph object\n\t\tconst glyph: ITextureAtlasPageGlyph = {\n\t\t\tpageIndex: this._textureIndex,\n\t\t\tglyphIndex: this._nextIndex++,\n\t\t\tx: this._currentRow.x,\n\t\t\ty: this._currentRow.y,\n\t\t\tw: glyphWidth,\n\t\t\th: glyphHeight,\n\t\t\toriginOffsetX: rasterizedGlyph.originOffset.x,\n\t\t\toriginOffsetY: rasterizedGlyph.originOffset.y,\n\t\t\tfontBoundingBoxAscent: rasterizedGlyph.fontBoundingBoxAscent,\n\t\t\tfontBoundingBoxDescent: rasterizedGlyph.fontBoundingBoxDescent,\n\t\t};\n\n\t\t// Shift current row\n\t\tthis._currentRow.x += glyphWidth;\n\t\tthis._currentRow.h = Math.max(this._currentRow.h, glyphHeight);\n\n\t\t// Set the glyph\n\t\tthis._allocatedGlyphs.add(glyph);\n\n\t\treturn glyph;\n\t}\n\n\tpublic getUsagePreview(): Promise<Blob> {\n\t\tconst w = this._canvas.width;\n\t\tconst h = this._canvas.height;\n\t\tconst canvas = new OffscreenCanvas(w, h);\n\t\tconst ctx = ensureNonNullable(canvas.getContext('2d'));\n\t\tctx.fillStyle = UsagePreviewColors.Unused;\n\t\tctx.fillRect(0, 0, w, h);\n\n\t\tconst rowHeight: Map<number, number> = new Map(); // y -> h\n\t\tconst rowWidth: Map<number, number> = new Map(); // y -> w\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\trowHeight.set(g.y, Math.max(rowHeight.get(g.y) ?? 0, g.h));\n\t\t\trowWidth.set(g.y, Math.max(rowWidth.get(g.y) ?? 0, g.x + g.w));\n\t\t}\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\tctx.fillStyle = UsagePreviewColors.Used;\n\t\t\tctx.fillRect(g.x, g.y, g.w, g.h);\n\t\t\tctx.fillStyle = UsagePreviewColors.Wasted;\n\t\t\tctx.fillRect(g.x, g.y + g.h, g.w, rowHeight.get(g.y)! - g.h);\n\t\t}\n\t\tfor (const [rowY, rowW] of rowWidth.entries()) {\n\t\t\tif (rowY !== this._currentRow.y) {\n\t\t\t\tctx.fillStyle = UsagePreviewColors.Wasted;\n\t\t\t\tctx.fillRect(rowW, rowY, w - rowW, rowHeight.get(rowY)!);\n\t\t\t}\n\t\t}\n\t\treturn canvas.convertToBlob();\n\t}\n\n\tgetStats(): string {\n\t\tconst w = this._canvas.width;\n\t\tconst h = this._canvas.height;\n\n\t\tlet usedPixels = 0;\n\t\tlet wastedPixels = 0;\n\t\tconst totalPixels = w * h;\n\n\t\tconst rowHeight: Map<number, number> = new Map(); // y -> h\n\t\tconst rowWidth: Map<number, number> = new Map(); // y -> w\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\trowHeight.set(g.y, Math.max(rowHeight.get(g.y) ?? 0, g.h));\n\t\t\trowWidth.set(g.y, Math.max(rowWidth.get(g.y) ?? 0, g.x + g.w));\n\t\t}\n\t\tfor (const g of this._allocatedGlyphs) {\n\t\t\tusedPixels += g.w * g.h;\n\t\t\twastedPixels += g.w * (rowHeight.get(g.y)! - g.h);\n\t\t}\n\t\tfor (const [rowY, rowW] of rowWidth.entries()) {\n\t\t\tif (rowY !== this._currentRow.y) {\n\t\t\t\twastedPixels += (w - rowW) * rowHeight.get(rowY)!;\n\t\t\t}\n\t\t}\n\t\treturn [\n\t\t\t`page${this._textureIndex}:`,\n\t\t\t`     Total: ${totalPixels} (${w}x${h})`,\n\t\t\t`      Used: ${usedPixels} (${((usedPixels / totalPixels) * 100).toPrecision(2)}%)`,\n\t\t\t`    Wasted: ${wastedPixels} (${((wastedPixels / totalPixels) * 100).toPrecision(2)}%)`,\n\t\t\t`Efficiency: ${((usedPixels / (usedPixels + wastedPixels)) * 100).toPrecision(2)}%`,\n\t\t].join('\\n');\n\t}\n}\n\ninterface ITextureAtlasShelf {\n\tx: number;\n\ty: number;\n\th: number;\n}\n"]}