{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/rectangleRenderer.ts","vs/editor/browser/gpu/rectangleRenderer.ts"],"names":[],"mappings":"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","file":"rectangleRenderer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from '../../../base/browser/dom.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IReference, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { IObservable } from '../../../base/common/observable.js';\nimport { EditorOption } from '../../common/config/editorOptions.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nimport { ViewScrollChangedEvent } from '../../common/viewEvents.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { GPULifecycle } from './gpuDisposable.js';\nimport { observeDevicePixelDimensions, quadVertices } from './gpuUtils.js';\nimport { createObjectCollectionBuffer, type IObjectCollectionBuffer, type IObjectCollectionBufferEntry } from './objectCollectionBuffer.js';\nimport { RectangleRendererBindingId, rectangleRendererWgsl } from './rectangleRenderer.wgsl.js';\n\nexport type RectangleRendererEntrySpec = [\n\t{ name: 'x' },\n\t{ name: 'y' },\n\t{ name: 'width' },\n\t{ name: 'height' },\n\t{ name: 'red' },\n\t{ name: 'green' },\n\t{ name: 'blue' },\n\t{ name: 'alpha' },\n];\n\nexport class RectangleRenderer extends ViewEventHandler {\n\n\tprivate _device!: GPUDevice;\n\tprivate _renderPassDescriptor!: GPURenderPassDescriptor;\n\tprivate _renderPassColorAttachment!: GPURenderPassColorAttachment;\n\tprivate _bindGroup!: GPUBindGroup;\n\tprivate _pipeline!: GPURenderPipeline;\n\n\tprivate _vertexBuffer!: GPUBuffer;\n\tprivate readonly _shapeBindBuffer: MutableDisposable<IReference<GPUBuffer>> = this._register(new MutableDisposable());\n\n\tprivate _scrollOffsetBindBuffer!: GPUBuffer;\n\tprivate _scrollOffsetValueBuffer!: Float32Array;\n\n\tprivate _initialized: boolean = false;\n\n\tprivate readonly _shapeCollection: IObjectCollectionBuffer<RectangleRendererEntrySpec> = this._register(createObjectCollectionBuffer([\n\t\t{ name: 'x' },\n\t\t{ name: 'y' },\n\t\t{ name: 'width' },\n\t\t{ name: 'height' },\n\t\t{ name: 'red' },\n\t\t{ name: 'green' },\n\t\t{ name: 'blue' },\n\t\t{ name: 'alpha' },\n\t], 32));\n\n\tconstructor(\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _contentLeft: IObservable<number>,\n\t\tprivate readonly _devicePixelRatio: IObservable<number>,\n\t\tprivate readonly _canvas: HTMLCanvasElement,\n\t\tprivate readonly _ctx: GPUCanvasContext,\n\t\tdevice: Promise<GPUDevice>,\n\t) {\n\t\tsuper();\n\n\t\tthis._context.addEventHandler(this);\n\n\t\tthis._initWebgpu(device);\n\t}\n\n\tprivate async _initWebgpu(device: Promise<GPUDevice>) {\n\n\t\t// #region General\n\n\t\tthis._device = await device;\n\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\t\tthis._ctx.configure({\n\t\t\tdevice: this._device,\n\t\t\tformat: presentationFormat,\n\t\t\talphaMode: 'premultiplied',\n\t\t});\n\n\t\tthis._renderPassColorAttachment = {\n\t\t\tview: null!, // Will be filled at render time\n\t\t\tloadOp: 'load',\n\t\t\tstoreOp: 'store',\n\t\t};\n\t\tthis._renderPassDescriptor = {\n\t\t\tlabel: 'Monaco rectangle renderer render pass',\n\t\t\tcolorAttachments: [this._renderPassColorAttachment],\n\t\t};\n\n\t\t// #endregion General\n\n\t\t// #region Uniforms\n\n\t\tlet layoutInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tconst enum Info {\n\t\t\t\tFloatsPerEntry = 6,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_CanvasWidth____ = 0,\n\t\t\t\tOffset_CanvasHeight___ = 1,\n\t\t\t\tOffset_ViewportOffsetX = 2,\n\t\t\t\tOffset_ViewportOffsetY = 3,\n\t\t\t\tOffset_ViewportWidth__ = 4,\n\t\t\t\tOffset_ViewportHeight_ = 5,\n\t\t\t}\n\t\t\tconst bufferValues = new Float32Array(Info.FloatsPerEntry);\n\t\t\tconst updateBufferValues = (canvasDevicePixelWidth: number = this._canvas.width, canvasDevicePixelHeight: number = this._canvas.height) => {\n\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] = canvasDevicePixelWidth;\n\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] = canvasDevicePixelHeight;\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX] = Math.ceil(this._context.configuration.options.get(EditorOption.layoutInfo).contentLeft * getActiveWindow().devicePixelRatio);\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY] = 0;\n\t\t\t\tbufferValues[Info.Offset_ViewportWidth__] = bufferValues[Info.Offset_CanvasWidth____] - bufferValues[Info.Offset_ViewportOffsetX];\n\t\t\t\tbufferValues[Info.Offset_ViewportHeight_] = bufferValues[Info.Offset_CanvasHeight___] - bufferValues[Info.Offset_ViewportOffsetY];\n\t\t\t\treturn bufferValues;\n\t\t\t};\n\t\t\tlayoutInfoUniformBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer uniform buffer',\n\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t}, () => updateBufferValues())).object;\n\t\t\tthis._register(observeDevicePixelDimensions(this._canvas, getActiveWindow(), (w, h) => {\n\t\t\t\tthis._device.queue.writeBuffer(layoutInfoUniformBuffer, 0, updateBufferValues(w, h));\n\t\t\t}));\n\t\t}\n\n\t\tconst scrollOffsetBufferSize = 2;\n\t\tthis._scrollOffsetBindBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer scroll offset buffer',\n\t\t\tsize: scrollOffsetBufferSize * Float32Array.BYTES_PER_ELEMENT,\n\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t})).object;\n\t\tthis._scrollOffsetValueBuffer = new Float32Array(scrollOffsetBufferSize);\n\n\t\t// #endregion Uniforms\n\n\t\t// #region Storage buffers\n\n\t\tconst createShapeBindBuffer = () => {\n\t\t\treturn GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer shape buffer',\n\t\t\t\tsize: this._shapeCollection.buffer.byteLength,\n\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t\t});\n\t\t};\n\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\tthis._register(Event.runAndSubscribe(this._shapeCollection.onDidChangeBuffer, () => {\n\t\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\t\tif (this._pipeline) {\n\t\t\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\t\t\t}\n\t\t}));\n\n\t\t// #endregion Storage buffers\n\n\t\t// #region Vertex buffer\n\n\t\tthis._vertexBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer vertex buffer',\n\t\t\tsize: quadVertices.byteLength,\n\t\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t\t}, quadVertices)).object;\n\n\t\t// #endregion Vertex buffer\n\n\t\t// #region Shader module\n\n\t\tconst module = this._device.createShaderModule({\n\t\t\tlabel: 'Monaco rectangle renderer shader module',\n\t\t\tcode: rectangleRendererWgsl,\n\t\t});\n\n\t\t// #endregion Shader module\n\n\t\t// #region Pipeline\n\n\t\tthis._pipeline = this._device.createRenderPipeline({\n\t\t\tlabel: 'Monaco rectangle renderer render pipeline',\n\t\t\tlayout: 'auto',\n\t\t\tvertex: {\n\t\t\t\tmodule,\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tarrayStride: 2 * Float32Array.BYTES_PER_ELEMENT, // 2 floats, 4 bytes each\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{ shaderLocation: 0, offset: 0, format: 'float32x2' },  // position\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule,\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: presentationFormat,\n\t\t\t\t\t\tblend: {\n\t\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\talpha: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\t// #endregion Pipeline\n\n\t\t// #region Bind group\n\n\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\n\t\t// endregion Bind group\n\n\t\tthis._initialized = true;\n\t}\n\n\tprivate _updateBindGroup(pipeline: GPURenderPipeline, layoutInfoUniformBuffer: GPUBuffer) {\n\t\tthis._bindGroup = this._device.createBindGroup({\n\t\t\tlabel: 'Monaco rectangle renderer bind group',\n\t\t\tlayout: pipeline.getBindGroupLayout(0),\n\t\t\tentries: [\n\t\t\t\t{ binding: RectangleRendererBindingId.Shapes, resource: { buffer: this._shapeBindBuffer.value!.object } },\n\t\t\t\t{ binding: RectangleRendererBindingId.LayoutInfoUniform, resource: { buffer: layoutInfoUniformBuffer } },\n\t\t\t\t{ binding: RectangleRendererBindingId.ScrollOffset, resource: { buffer: this._scrollOffsetBindBuffer } },\n\t\t\t],\n\t\t});\n\t}\n\n\tregister(x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number): IObjectCollectionBufferEntry<RectangleRendererEntrySpec> {\n\t\treturn this._shapeCollection.createEntry({ x, y, width, height, red, green, blue, alpha });\n\t}\n\n\t// #region Event handlers\n\n\tpublic override onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\tif (this._device) {\n\t\t\tconst dpr = getActiveWindow().devicePixelRatio;\n\t\t\tthis._scrollOffsetValueBuffer[0] = this._context.viewLayout.getCurrentScrollLeft() * dpr;\n\t\t\tthis._scrollOffsetValueBuffer[1] = this._context.viewLayout.getCurrentScrollTop() * dpr;\n\t\t\tthis._device.queue.writeBuffer(this._scrollOffsetBindBuffer, 0, this._scrollOffsetValueBuffer as Float32Array<ArrayBuffer>);\n\t\t}\n\t\treturn true;\n\t}\n\n\t// #endregion\n\n\tprivate _update() {\n\t\tif (!this._device) {\n\t\t\treturn;\n\t\t}\n\t\tconst shapes = this._shapeCollection;\n\t\tif (shapes.dirtyTracker.isDirty) {\n\t\t\tthis._device.queue.writeBuffer(this._shapeBindBuffer.value!.object, 0, shapes.buffer, shapes.dirtyTracker.dataOffset, shapes.dirtyTracker.dirtySize! * shapes.view.BYTES_PER_ELEMENT);\n\t\t\tshapes.dirtyTracker.clear();\n\t\t}\n\t}\n\n\tdraw(viewportData: ViewportData) {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._update();\n\n\t\tconst encoder = this._device.createCommandEncoder({ label: 'Monaco rectangle renderer command encoder' });\n\n\t\tthis._renderPassColorAttachment.view = this._ctx.getCurrentTexture().createView();\n\t\tconst pass = encoder.beginRenderPass(this._renderPassDescriptor);\n\t\tpass.setPipeline(this._pipeline);\n\t\tpass.setVertexBuffer(0, this._vertexBuffer);\n\t\tpass.setBindGroup(0, this._bindGroup);\n\n\t\t// Only draw the content area\n\t\tconst contentLeft = Math.ceil(this._contentLeft.get() * this._devicePixelRatio.get());\n\t\tpass.setScissorRect(contentLeft, 0, this._canvas.width - contentLeft, this._canvas.height);\n\n\t\tpass.draw(quadVertices.length / 2, this._shapeCollection.entryCount);\n\t\tpass.end();\n\n\t\tconst commandBuffer = encoder.finish();\n\t\tthis._device.queue.submit([commandBuffer]);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getActiveWindow } from '../../../base/browser/dom.js';\nimport { Event } from '../../../base/common/event.js';\nimport { IReference, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { IObservable } from '../../../base/common/observable.js';\nimport { EditorOption } from '../../common/config/editorOptions.js';\nimport { ViewEventHandler } from '../../common/viewEventHandler.js';\nimport { ViewScrollChangedEvent } from '../../common/viewEvents.js';\nimport { ViewportData } from '../../common/viewLayout/viewLinesViewportData.js';\nimport { ViewContext } from '../../common/viewModel/viewContext.js';\nimport { GPULifecycle } from './gpuDisposable.js';\nimport { observeDevicePixelDimensions, quadVertices } from './gpuUtils.js';\nimport { createObjectCollectionBuffer, type IObjectCollectionBuffer, type IObjectCollectionBufferEntry } from './objectCollectionBuffer.js';\nimport { RectangleRendererBindingId, rectangleRendererWgsl } from './rectangleRenderer.wgsl.js';\n\nexport type RectangleRendererEntrySpec = [\n\t{ name: 'x' },\n\t{ name: 'y' },\n\t{ name: 'width' },\n\t{ name: 'height' },\n\t{ name: 'red' },\n\t{ name: 'green' },\n\t{ name: 'blue' },\n\t{ name: 'alpha' },\n];\n\nexport class RectangleRenderer extends ViewEventHandler {\n\n\tprivate _device!: GPUDevice;\n\tprivate _renderPassDescriptor!: GPURenderPassDescriptor;\n\tprivate _renderPassColorAttachment!: GPURenderPassColorAttachment;\n\tprivate _bindGroup!: GPUBindGroup;\n\tprivate _pipeline!: GPURenderPipeline;\n\n\tprivate _vertexBuffer!: GPUBuffer;\n\tprivate readonly _shapeBindBuffer: MutableDisposable<IReference<GPUBuffer>> = this._register(new MutableDisposable());\n\n\tprivate _scrollOffsetBindBuffer!: GPUBuffer;\n\tprivate _scrollOffsetValueBuffer!: Float32Array;\n\n\tprivate _initialized: boolean = false;\n\n\tprivate readonly _shapeCollection: IObjectCollectionBuffer<RectangleRendererEntrySpec> = this._register(createObjectCollectionBuffer([\n\t\t{ name: 'x' },\n\t\t{ name: 'y' },\n\t\t{ name: 'width' },\n\t\t{ name: 'height' },\n\t\t{ name: 'red' },\n\t\t{ name: 'green' },\n\t\t{ name: 'blue' },\n\t\t{ name: 'alpha' },\n\t], 32));\n\n\tconstructor(\n\t\tprivate readonly _context: ViewContext,\n\t\tprivate readonly _contentLeft: IObservable<number>,\n\t\tprivate readonly _devicePixelRatio: IObservable<number>,\n\t\tprivate readonly _canvas: HTMLCanvasElement,\n\t\tprivate readonly _ctx: GPUCanvasContext,\n\t\tdevice: Promise<GPUDevice>,\n\t) {\n\t\tsuper();\n\n\t\tthis._context.addEventHandler(this);\n\n\t\tthis._initWebgpu(device);\n\t}\n\n\tprivate async _initWebgpu(device: Promise<GPUDevice>) {\n\n\t\t// #region General\n\n\t\tthis._device = await device;\n\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst presentationFormat = navigator.gpu.getPreferredCanvasFormat();\n\t\tthis._ctx.configure({\n\t\t\tdevice: this._device,\n\t\t\tformat: presentationFormat,\n\t\t\talphaMode: 'premultiplied',\n\t\t});\n\n\t\tthis._renderPassColorAttachment = {\n\t\t\tview: null!, // Will be filled at render time\n\t\t\tloadOp: 'load',\n\t\t\tstoreOp: 'store',\n\t\t};\n\t\tthis._renderPassDescriptor = {\n\t\t\tlabel: 'Monaco rectangle renderer render pass',\n\t\t\tcolorAttachments: [this._renderPassColorAttachment],\n\t\t};\n\n\t\t// #endregion General\n\n\t\t// #region Uniforms\n\n\t\tlet layoutInfoUniformBuffer: GPUBuffer;\n\t\t{\n\t\t\tconst enum Info {\n\t\t\t\tFloatsPerEntry = 6,\n\t\t\t\tBytesPerEntry = Info.FloatsPerEntry * 4,\n\t\t\t\tOffset_CanvasWidth____ = 0,\n\t\t\t\tOffset_CanvasHeight___ = 1,\n\t\t\t\tOffset_ViewportOffsetX = 2,\n\t\t\t\tOffset_ViewportOffsetY = 3,\n\t\t\t\tOffset_ViewportWidth__ = 4,\n\t\t\t\tOffset_ViewportHeight_ = 5,\n\t\t\t}\n\t\t\tconst bufferValues = new Float32Array(Info.FloatsPerEntry);\n\t\t\tconst updateBufferValues = (canvasDevicePixelWidth: number = this._canvas.width, canvasDevicePixelHeight: number = this._canvas.height) => {\n\t\t\t\tbufferValues[Info.Offset_CanvasWidth____] = canvasDevicePixelWidth;\n\t\t\t\tbufferValues[Info.Offset_CanvasHeight___] = canvasDevicePixelHeight;\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetX] = Math.ceil(this._context.configuration.options.get(EditorOption.layoutInfo).contentLeft * getActiveWindow().devicePixelRatio);\n\t\t\t\tbufferValues[Info.Offset_ViewportOffsetY] = 0;\n\t\t\t\tbufferValues[Info.Offset_ViewportWidth__] = bufferValues[Info.Offset_CanvasWidth____] - bufferValues[Info.Offset_ViewportOffsetX];\n\t\t\t\tbufferValues[Info.Offset_ViewportHeight_] = bufferValues[Info.Offset_CanvasHeight___] - bufferValues[Info.Offset_ViewportOffsetY];\n\t\t\t\treturn bufferValues;\n\t\t\t};\n\t\t\tlayoutInfoUniformBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer uniform buffer',\n\t\t\t\tsize: Info.BytesPerEntry,\n\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t\t}, () => updateBufferValues())).object;\n\t\t\tthis._register(observeDevicePixelDimensions(this._canvas, getActiveWindow(), (w, h) => {\n\t\t\t\tthis._device.queue.writeBuffer(layoutInfoUniformBuffer, 0, updateBufferValues(w, h));\n\t\t\t}));\n\t\t}\n\n\t\tconst scrollOffsetBufferSize = 2;\n\t\tthis._scrollOffsetBindBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer scroll offset buffer',\n\t\t\tsize: scrollOffsetBufferSize * Float32Array.BYTES_PER_ELEMENT,\n\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n\t\t})).object;\n\t\tthis._scrollOffsetValueBuffer = new Float32Array(scrollOffsetBufferSize);\n\n\t\t// #endregion Uniforms\n\n\t\t// #region Storage buffers\n\n\t\tconst createShapeBindBuffer = () => {\n\t\t\treturn GPULifecycle.createBuffer(this._device, {\n\t\t\t\tlabel: 'Monaco rectangle renderer shape buffer',\n\t\t\t\tsize: this._shapeCollection.buffer.byteLength,\n\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n\t\t\t});\n\t\t};\n\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\tthis._register(Event.runAndSubscribe(this._shapeCollection.onDidChangeBuffer, () => {\n\t\t\tthis._shapeBindBuffer.value = createShapeBindBuffer();\n\t\t\tif (this._pipeline) {\n\t\t\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\t\t\t}\n\t\t}));\n\n\t\t// #endregion Storage buffers\n\n\t\t// #region Vertex buffer\n\n\t\tthis._vertexBuffer = this._register(GPULifecycle.createBuffer(this._device, {\n\t\t\tlabel: 'Monaco rectangle renderer vertex buffer',\n\t\t\tsize: quadVertices.byteLength,\n\t\t\tusage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n\t\t}, quadVertices)).object;\n\n\t\t// #endregion Vertex buffer\n\n\t\t// #region Shader module\n\n\t\tconst module = this._device.createShaderModule({\n\t\t\tlabel: 'Monaco rectangle renderer shader module',\n\t\t\tcode: rectangleRendererWgsl,\n\t\t});\n\n\t\t// #endregion Shader module\n\n\t\t// #region Pipeline\n\n\t\tthis._pipeline = this._device.createRenderPipeline({\n\t\t\tlabel: 'Monaco rectangle renderer render pipeline',\n\t\t\tlayout: 'auto',\n\t\t\tvertex: {\n\t\t\t\tmodule,\n\t\t\t\tbuffers: [\n\t\t\t\t\t{\n\t\t\t\t\t\tarrayStride: 2 * Float32Array.BYTES_PER_ELEMENT, // 2 floats, 4 bytes each\n\t\t\t\t\t\tattributes: [\n\t\t\t\t\t\t\t{ shaderLocation: 0, offset: 0, format: 'float32x2' },  // position\n\t\t\t\t\t\t],\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tfragment: {\n\t\t\t\tmodule,\n\t\t\t\ttargets: [\n\t\t\t\t\t{\n\t\t\t\t\t\tformat: presentationFormat,\n\t\t\t\t\t\tblend: {\n\t\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\talpha: {\n\t\t\t\t\t\t\t\tsrcFactor: 'src-alpha',\n\t\t\t\t\t\t\t\tdstFactor: 'one-minus-src-alpha'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\n\t\t// #endregion Pipeline\n\n\t\t// #region Bind group\n\n\t\tthis._updateBindGroup(this._pipeline, layoutInfoUniformBuffer);\n\n\t\t// endregion Bind group\n\n\t\tthis._initialized = true;\n\t}\n\n\tprivate _updateBindGroup(pipeline: GPURenderPipeline, layoutInfoUniformBuffer: GPUBuffer) {\n\t\tthis._bindGroup = this._device.createBindGroup({\n\t\t\tlabel: 'Monaco rectangle renderer bind group',\n\t\t\tlayout: pipeline.getBindGroupLayout(0),\n\t\t\tentries: [\n\t\t\t\t{ binding: RectangleRendererBindingId.Shapes, resource: { buffer: this._shapeBindBuffer.value!.object } },\n\t\t\t\t{ binding: RectangleRendererBindingId.LayoutInfoUniform, resource: { buffer: layoutInfoUniformBuffer } },\n\t\t\t\t{ binding: RectangleRendererBindingId.ScrollOffset, resource: { buffer: this._scrollOffsetBindBuffer } },\n\t\t\t],\n\t\t});\n\t}\n\n\tregister(x: number, y: number, width: number, height: number, red: number, green: number, blue: number, alpha: number): IObjectCollectionBufferEntry<RectangleRendererEntrySpec> {\n\t\treturn this._shapeCollection.createEntry({ x, y, width, height, red, green, blue, alpha });\n\t}\n\n\t// #region Event handlers\n\n\tpublic override onScrollChanged(e: ViewScrollChangedEvent): boolean {\n\t\tif (this._device) {\n\t\t\tconst dpr = getActiveWindow().devicePixelRatio;\n\t\t\tthis._scrollOffsetValueBuffer[0] = this._context.viewLayout.getCurrentScrollLeft() * dpr;\n\t\t\tthis._scrollOffsetValueBuffer[1] = this._context.viewLayout.getCurrentScrollTop() * dpr;\n\t\t\tthis._device.queue.writeBuffer(this._scrollOffsetBindBuffer, 0, this._scrollOffsetValueBuffer as Float32Array<ArrayBuffer>);\n\t\t}\n\t\treturn true;\n\t}\n\n\t// #endregion\n\n\tprivate _update() {\n\t\tif (!this._device) {\n\t\t\treturn;\n\t\t}\n\t\tconst shapes = this._shapeCollection;\n\t\tif (shapes.dirtyTracker.isDirty) {\n\t\t\tthis._device.queue.writeBuffer(this._shapeBindBuffer.value!.object, 0, shapes.buffer, shapes.dirtyTracker.dataOffset, shapes.dirtyTracker.dirtySize! * shapes.view.BYTES_PER_ELEMENT);\n\t\t\tshapes.dirtyTracker.clear();\n\t\t}\n\t}\n\n\tdraw(viewportData: ViewportData) {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._update();\n\n\t\tconst encoder = this._device.createCommandEncoder({ label: 'Monaco rectangle renderer command encoder' });\n\n\t\tthis._renderPassColorAttachment.view = this._ctx.getCurrentTexture().createView();\n\t\tconst pass = encoder.beginRenderPass(this._renderPassDescriptor);\n\t\tpass.setPipeline(this._pipeline);\n\t\tpass.setVertexBuffer(0, this._vertexBuffer);\n\t\tpass.setBindGroup(0, this._bindGroup);\n\n\t\t// Only draw the content area\n\t\tconst contentLeft = Math.ceil(this._contentLeft.get() * this._devicePixelRatio.get());\n\t\tpass.setScissorRect(contentLeft, 0, this._canvas.width - contentLeft, this._canvas.height);\n\n\t\tpass.draw(quadVertices.length / 2, this._shapeCollection.entryCount);\n\t\tpass.end();\n\n\t\tconst commandBuffer = encoder.finish();\n\t\tthis._device.queue.submit([commandBuffer]);\n\t}\n}\n"]}