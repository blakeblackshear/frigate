{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/colorPicker/browser/colorPickerParticipantUtils.ts","vs/editor/contrib/colorPicker/browser/colorPickerParticipantUtils.ts"],"names":[],"mappings":"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","file":"colorPickerParticipantUtils.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { DocumentColorProvider, IColorInformation } from '../../../common/languages.js';\nimport { ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { getColorPresentations } from './color.js';\nimport { ColorPickerModel } from './colorPickerModel.js';\nimport { Range } from '../../../common/core/range.js';\n\nexport const enum ColorPickerWidgetType {\n\tHover = 'hover',\n\tStandalone = 'standalone'\n}\n\nexport interface BaseColor {\n\treadonly range: Range;\n\treadonly model: ColorPickerModel;\n\treadonly provider: DocumentColorProvider;\n}\n\nexport async function createColorHover(editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<BaseColor> {\n\tconst originalText = editorModel.getValueInRange(colorInfo.range);\n\tconst { red, green, blue, alpha } = colorInfo.color;\n\tconst rgba = new RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);\n\tconst color = new Color(rgba);\n\n\tconst colorPresentations = await getColorPresentations(editorModel, colorInfo, provider, CancellationToken.None);\n\tconst model = new ColorPickerModel(color, [], 0);\n\tmodel.colorPresentations = colorPresentations || [];\n\tmodel.guessColorPresentation(color, originalText);\n\n\treturn {\n\t\trange: Range.lift(colorInfo.range),\n\t\tmodel,\n\t\tprovider\n\t};\n}\n\nexport function updateEditorModel(editor: IActiveCodeEditor, range: Range, model: ColorPickerModel): Range {\n\tconst textEdits: ISingleEditOperation[] = [];\n\tconst edit = model.presentation.textEdit ?? { range, text: model.presentation.label, forceMoveMarkers: false };\n\ttextEdits.push(edit);\n\n\tif (model.presentation.additionalTextEdits) {\n\t\ttextEdits.push(...model.presentation.additionalTextEdits);\n\t}\n\tconst replaceRange = Range.lift(edit.range);\n\tconst trackedRange = editor.getModel()._setTrackedRange(null, replaceRange, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter);\n\teditor.executeEdits('colorpicker', textEdits);\n\teditor.pushUndoStop();\n\treturn editor.getModel()._getTrackedRange(trackedRange) ?? replaceRange;\n}\n\nexport async function updateColorPresentations(editorModel: ITextModel, colorPickerModel: ColorPickerModel, color: Color, range: Range, colorHover: BaseColor): Promise<void> {\n\tconst colorPresentations = await getColorPresentations(editorModel, {\n\t\trange: range,\n\t\tcolor: {\n\t\t\tred: color.rgba.r / 255,\n\t\t\tgreen: color.rgba.g / 255,\n\t\t\tblue: color.rgba.b / 255,\n\t\t\talpha: color.rgba.a\n\t\t}\n\t}, colorHover.provider, CancellationToken.None);\n\tcolorPickerModel.colorPresentations = colorPresentations || [];\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { DocumentColorProvider, IColorInformation } from '../../../common/languages.js';\nimport { ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { getColorPresentations } from './color.js';\nimport { ColorPickerModel } from './colorPickerModel.js';\nimport { Range } from '../../../common/core/range.js';\n\nexport const enum ColorPickerWidgetType {\n\tHover = 'hover',\n\tStandalone = 'standalone'\n}\n\nexport interface BaseColor {\n\treadonly range: Range;\n\treadonly model: ColorPickerModel;\n\treadonly provider: DocumentColorProvider;\n}\n\nexport async function createColorHover(editorModel: ITextModel, colorInfo: IColorInformation, provider: DocumentColorProvider): Promise<BaseColor> {\n\tconst originalText = editorModel.getValueInRange(colorInfo.range);\n\tconst { red, green, blue, alpha } = colorInfo.color;\n\tconst rgba = new RGBA(Math.round(red * 255), Math.round(green * 255), Math.round(blue * 255), alpha);\n\tconst color = new Color(rgba);\n\n\tconst colorPresentations = await getColorPresentations(editorModel, colorInfo, provider, CancellationToken.None);\n\tconst model = new ColorPickerModel(color, [], 0);\n\tmodel.colorPresentations = colorPresentations || [];\n\tmodel.guessColorPresentation(color, originalText);\n\n\treturn {\n\t\trange: Range.lift(colorInfo.range),\n\t\tmodel,\n\t\tprovider\n\t};\n}\n\nexport function updateEditorModel(editor: IActiveCodeEditor, range: Range, model: ColorPickerModel): Range {\n\tconst textEdits: ISingleEditOperation[] = [];\n\tconst edit = model.presentation.textEdit ?? { range, text: model.presentation.label, forceMoveMarkers: false };\n\ttextEdits.push(edit);\n\n\tif (model.presentation.additionalTextEdits) {\n\t\ttextEdits.push(...model.presentation.additionalTextEdits);\n\t}\n\tconst replaceRange = Range.lift(edit.range);\n\tconst trackedRange = editor.getModel()._setTrackedRange(null, replaceRange, TrackedRangeStickiness.GrowsOnlyWhenTypingAfter);\n\teditor.executeEdits('colorpicker', textEdits);\n\teditor.pushUndoStop();\n\treturn editor.getModel()._getTrackedRange(trackedRange) ?? replaceRange;\n}\n\nexport async function updateColorPresentations(editorModel: ITextModel, colorPickerModel: ColorPickerModel, color: Color, range: Range, colorHover: BaseColor): Promise<void> {\n\tconst colorPresentations = await getColorPresentations(editorModel, {\n\t\trange: range,\n\t\tcolor: {\n\t\t\tred: color.rgba.r / 255,\n\t\t\tgreen: color.rgba.g / 255,\n\t\t\tblue: color.rgba.b / 255,\n\t\t\talpha: color.rgba.a\n\t\t}\n\t}, colorHover.provider, CancellationToken.None);\n\tcolorPickerModel.colorPresentations = colorPresentations || [];\n}\n"]}