{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/services/languageService.ts","vs/editor/common/services/languageService.ts"],"names":[],"mappings":"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","file":"languageService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { ILanguageSelection, ILanguageService } from '../languages/language.js';\nimport { ILanguageIdCodec, TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { IObservable, observableFromEvent } from '../../../base/common/observable.js';\n\nexport class LanguageService extends Disposable implements ILanguageService {\n\tpublic _serviceBrand: undefined;\n\n\tstatic instanceCount = 0;\n\n\tprivate readonly _onDidRequestBasicLanguageFeatures = this._register(new Emitter<string>());\n\tpublic readonly onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n\n\tprivate readonly _onDidRequestRichLanguageFeatures = this._register(new Emitter<string>());\n\tpublic readonly onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n\n\tprotected readonly _onDidChange = this._register(new Emitter<void>({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _requestedBasicLanguages = new Set<string>();\n\tprivate readonly _requestedRichLanguages = new Set<string>();\n\n\tprotected readonly _registry: LanguagesRegistry;\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(warnOnOverwrite = false) {\n\t\tsuper();\n\t\tLanguageService.instanceCount++;\n\t\tthis._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n\t\tthis.languageIdCodec = this._registry.languageIdCodec;\n\t\tthis._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n\t}\n\n\tpublic override dispose(): void {\n\t\tLanguageService.instanceCount--;\n\t\tsuper.dispose();\n\t}\n\n\tpublic isRegisteredLanguageId(languageId: string | null | undefined): boolean {\n\t\treturn this._registry.isRegisteredLanguageId(languageId);\n\t}\n\n\tpublic getLanguageIdByLanguageName(languageName: string): string | null {\n\t\treturn this._registry.getLanguageIdByLanguageName(languageName);\n\t}\n\n\tpublic getLanguageIdByMimeType(mimeType: string | null | undefined): string | null {\n\t\treturn this._registry.getLanguageIdByMimeType(mimeType);\n\t}\n\n\tpublic guessLanguageIdByFilepathOrFirstLine(resource: URI | null, firstLine?: string): string | null {\n\t\tconst languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n\t\treturn languageIds.at(0) ?? null;\n\t}\n\n\tpublic createById(languageId: string | null | undefined): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tpublic createByFilepathOrFirstLine(resource: URI | null, firstLine?: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\tconst languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tprivate _createAndGetLanguageIdentifier(languageId: string | null | undefined): string {\n\t\tif (!languageId || !this.isRegisteredLanguageId(languageId)) {\n\t\t\t// Fall back to plain text if language is unknown\n\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\n\t\treturn languageId;\n\t}\n\n\tpublic requestBasicLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedBasicLanguages.has(languageId)) {\n\t\t\tthis._requestedBasicLanguages.add(languageId);\n\t\t\tthis._onDidRequestBasicLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n\n\tpublic requestRichLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedRichLanguages.has(languageId)) {\n\t\t\tthis._requestedRichLanguages.add(languageId);\n\n\t\t\t// Ensure basic features are requested\n\t\t\tthis.requestBasicLanguageFeatures(languageId);\n\n\t\t\t// Ensure tokenizers are created\n\t\t\tTokenizationRegistry.getOrCreate(languageId);\n\n\t\t\tthis._onDidRequestRichLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n}\n\nclass LanguageSelection implements ILanguageSelection {\n\tprivate readonly _value: IObservable<string>;\n\tpublic readonly onDidChange: Event<string>;\n\n\tconstructor(onDidChangeLanguages: Event<void>, selector: () => string) {\n\t\tthis._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n\t\tthis.onDidChange = Event.fromObservable(this._value);\n\t}\n\n\tpublic get languageId(): string {\n\t\treturn this._value.get();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\nimport { ILanguageSelection, ILanguageService } from '../languages/language.js';\nimport { ILanguageIdCodec, TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { IObservable, observableFromEvent } from '../../../base/common/observable.js';\n\nexport class LanguageService extends Disposable implements ILanguageService {\n\tpublic _serviceBrand: undefined;\n\n\tstatic instanceCount = 0;\n\n\tprivate readonly _onDidRequestBasicLanguageFeatures = this._register(new Emitter<string>());\n\tpublic readonly onDidRequestBasicLanguageFeatures = this._onDidRequestBasicLanguageFeatures.event;\n\n\tprivate readonly _onDidRequestRichLanguageFeatures = this._register(new Emitter<string>());\n\tpublic readonly onDidRequestRichLanguageFeatures = this._onDidRequestRichLanguageFeatures.event;\n\n\tprotected readonly _onDidChange = this._register(new Emitter<void>({ leakWarningThreshold: 200 /* https://github.com/microsoft/vscode/issues/119968 */ }));\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _requestedBasicLanguages = new Set<string>();\n\tprivate readonly _requestedRichLanguages = new Set<string>();\n\n\tprotected readonly _registry: LanguagesRegistry;\n\tpublic readonly languageIdCodec: ILanguageIdCodec;\n\n\tconstructor(warnOnOverwrite = false) {\n\t\tsuper();\n\t\tLanguageService.instanceCount++;\n\t\tthis._registry = this._register(new LanguagesRegistry(true, warnOnOverwrite));\n\t\tthis.languageIdCodec = this._registry.languageIdCodec;\n\t\tthis._register(this._registry.onDidChange(() => this._onDidChange.fire()));\n\t}\n\n\tpublic override dispose(): void {\n\t\tLanguageService.instanceCount--;\n\t\tsuper.dispose();\n\t}\n\n\tpublic isRegisteredLanguageId(languageId: string | null | undefined): boolean {\n\t\treturn this._registry.isRegisteredLanguageId(languageId);\n\t}\n\n\tpublic getLanguageIdByLanguageName(languageName: string): string | null {\n\t\treturn this._registry.getLanguageIdByLanguageName(languageName);\n\t}\n\n\tpublic getLanguageIdByMimeType(mimeType: string | null | undefined): string | null {\n\t\treturn this._registry.getLanguageIdByMimeType(mimeType);\n\t}\n\n\tpublic guessLanguageIdByFilepathOrFirstLine(resource: URI | null, firstLine?: string): string | null {\n\t\tconst languageIds = this._registry.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n\t\treturn languageIds.at(0) ?? null;\n\t}\n\n\tpublic createById(languageId: string | null | undefined): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tpublic createByFilepathOrFirstLine(resource: URI | null, firstLine?: string): ILanguageSelection {\n\t\treturn new LanguageSelection(this.onDidChange, () => {\n\t\t\tconst languageId = this.guessLanguageIdByFilepathOrFirstLine(resource, firstLine);\n\t\t\treturn this._createAndGetLanguageIdentifier(languageId);\n\t\t});\n\t}\n\n\tprivate _createAndGetLanguageIdentifier(languageId: string | null | undefined): string {\n\t\tif (!languageId || !this.isRegisteredLanguageId(languageId)) {\n\t\t\t// Fall back to plain text if language is unknown\n\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t}\n\n\t\treturn languageId;\n\t}\n\n\tpublic requestBasicLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedBasicLanguages.has(languageId)) {\n\t\t\tthis._requestedBasicLanguages.add(languageId);\n\t\t\tthis._onDidRequestBasicLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n\n\tpublic requestRichLanguageFeatures(languageId: string): void {\n\t\tif (!this._requestedRichLanguages.has(languageId)) {\n\t\t\tthis._requestedRichLanguages.add(languageId);\n\n\t\t\t// Ensure basic features are requested\n\t\t\tthis.requestBasicLanguageFeatures(languageId);\n\n\t\t\t// Ensure tokenizers are created\n\t\t\tTokenizationRegistry.getOrCreate(languageId);\n\n\t\t\tthis._onDidRequestRichLanguageFeatures.fire(languageId);\n\t\t}\n\t}\n}\n\nclass LanguageSelection implements ILanguageSelection {\n\tprivate readonly _value: IObservable<string>;\n\tpublic readonly onDidChange: Event<string>;\n\n\tconstructor(onDidChangeLanguages: Event<void>, selector: () => string) {\n\t\tthis._value = observableFromEvent(this, onDidChangeLanguages, () => selector());\n\t\tthis.onDidChange = Event.fromObservable(this._value);\n\t}\n\n\tpublic get languageId(): string {\n\t\treturn this._value.get();\n\t}\n}\n"]}