{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts","vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AAGnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,8CAA8C,CAAC;AAKjF,OAAO,EAAE,mCAAmC,EAAkD,MAAM,gEAAgE,CAAC;AAGrK,MAAM,OAAgB,yCAA0C,SAAQ,mCAAmC;IAE1G,YACC,OAAoC,EACpC,oBAA2C,EAC3C,iBAAqC,EACrC,cAA+B,EAC/B,gBAAmC,EACnC,aAA6B;QAE7B,KAAK,CAAC,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;IAC1G,CAAC;IAOS,yBAAyB;QAClC,MAAM,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7D,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC9B,OAAO,EAAE,CAAC;QACX,CAAC;QAED,MAAM,kBAAkB,GAAwB,EAAE,CAAC;QACnD,KAAK,MAAM,YAAY,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,EAAE,CAAC;YAC1E,IAAI,kBAAgD,CAAC;YACrD,IAAI,YAAY,CAAC,QAAQ,EAAE,WAAW,EAAE,CAAC;gBACxC,IAAI,iBAAiB,CAAC,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;oBAC1D,kBAAkB,GAAG,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC;gBACxD,CAAC;qBAAM,CAAC;oBACP,kBAAkB,GAAG,EAAE,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;gBAChH,CAAC;YACF,CAAC;YACD,kBAAkB,CAAC,IAAI,CAAC;gBACvB,SAAS,EAAE,YAAY,CAAC,EAAE;gBAC1B,YAAY,EAAE,YAAY,CAAC,KAAK;gBAChC,kBAAkB;gBAClB,KAAK,EAAE,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,EAAE;aACxD,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,kBAAkB,CAAC;IAC3B,CAAC;CACD","file":"commandsQuickAccess.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { IEditor } from '../../../common/editorCommon.js';\nimport { ILocalizedString } from '../../../../nls.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from '../../../../platform/quickinput/browser/commandsQuickAccess.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\tlet commandDescription: undefined | ILocalizedString;\n\t\t\tif (editorAction.metadata?.description) {\n\t\t\t\tif (isLocalizedString(editorAction.metadata.description)) {\n\t\t\t\t\tcommandDescription = editorAction.metadata.description;\n\t\t\t\t} else {\n\t\t\t\t\tcommandDescription = { original: editorAction.metadata.description, value: editorAction.metadata.description };\n\t\t\t\t}\n\t\t\t}\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tcommandDescription,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from '../../../../base/common/iconLabels.js';\nimport { IEditor } from '../../../common/editorCommon.js';\nimport { ILocalizedString } from '../../../../nls.js';\nimport { isLocalizedString } from '../../../../platform/action/common/action.js';\nimport { ICommandService } from '../../../../platform/commands/common/commands.js';\nimport { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from '../../../../platform/quickinput/browser/commandsQuickAccess.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\tlet commandDescription: undefined | ILocalizedString;\n\t\t\tif (editorAction.metadata?.description) {\n\t\t\t\tif (isLocalizedString(editorAction.metadata.description)) {\n\t\t\t\t\tcommandDescription = editorAction.metadata.description;\n\t\t\t\t} else {\n\t\t\t\t\tcommandDescription = { original: editorAction.metadata.description, value: editorAction.metadata.description };\n\t\t\t\t}\n\t\t\t}\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tcommandDescription,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n"]}