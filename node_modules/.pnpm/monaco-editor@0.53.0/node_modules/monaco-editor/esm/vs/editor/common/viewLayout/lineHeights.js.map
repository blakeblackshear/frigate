{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/viewLayout/lineHeights.ts","vs/editor/common/viewLayout/lineHeights.ts"],"names":[],"mappings":"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","file":"lineHeights.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch2 } from '../../../base/common/arrays.js';\nimport { intersection } from '../../../base/common/collections.js';\n\nexport class CustomLine {\n\n\tpublic index: number;\n\tpublic lineNumber: number;\n\tpublic specialHeight: number;\n\tpublic prefixSum: number;\n\tpublic maximumSpecialHeight: number;\n\tpublic decorationId: string;\n\tpublic deleted: boolean;\n\n\tconstructor(decorationId: string, index: number, lineNumber: number, specialHeight: number, prefixSum: number) {\n\t\tthis.decorationId = decorationId;\n\t\tthis.index = index;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.specialHeight = specialHeight;\n\t\tthis.prefixSum = prefixSum;\n\t\tthis.maximumSpecialHeight = specialHeight;\n\t\tthis.deleted = false;\n\t}\n}\n\n/**\n * Manages line heights in the editor with support for custom line heights from decorations.\n *\n * This class maintains an ordered collection of line heights, where each line can have either\n * the default height or a custom height specified by decorations. It supports efficient querying\n * of individual line heights as well as accumulated heights up to a specific line.\n *\n * Line heights are stored in a sorted array for efficient binary search operations. Each line\n * with custom height is represented by a {@link CustomLine} object which tracks its special height,\n * accumulated height prefix sum, and associated decoration ID.\n *\n * The class optimizes performance by:\n * - Using binary search to locate lines in the ordered array\n * - Batching updates through a pending changes mechanism\n * - Computing prefix sums for O(1) accumulated height lookup\n * - Tracking maximum height for lines with multiple decorations\n * - Efficiently handling document changes (line insertions and deletions)\n *\n * When lines are inserted or deleted, the manager updates line numbers and prefix sums\n * for all affected lines. It also handles special cases like decorations that span\n * the insertion/deletion points by re-applying those decorations appropriately.\n *\n * All query operations automatically commit pending changes to ensure consistent results.\n * Clients can modify line heights by adding or removing custom line height decorations,\n * which are tracked by their unique decoration IDs.\n */\nexport class LineHeightsManager {\n\n\tprivate _decorationIDToCustomLine: ArrayMap<string, CustomLine> = new ArrayMap<string, CustomLine>();\n\tprivate _orderedCustomLines: CustomLine[] = [];\n\tprivate _pendingSpecialLinesToInsert: CustomLine[] = [];\n\tprivate _invalidIndex: number = 0;\n\tprivate _defaultLineHeight: number;\n\tprivate _hasPending: boolean = false;\n\n\tconstructor(defaultLineHeight: number, customLineHeightData: ICustomLineHeightData[]) {\n\t\tthis._defaultLineHeight = defaultLineHeight;\n\t\tif (customLineHeightData.length > 0) {\n\t\t\tfor (const data of customLineHeightData) {\n\t\t\t\tthis.insertOrChangeCustomLineHeight(data.decorationId, data.startLineNumber, data.endLineNumber, data.lineHeight);\n\t\t\t}\n\t\t\tthis.commit();\n\t\t}\n\t}\n\n\tset defaultLineHeight(defaultLineHeight: number) {\n\t\tthis._defaultLineHeight = defaultLineHeight;\n\t}\n\n\tget defaultLineHeight() {\n\t\treturn this._defaultLineHeight;\n\t}\n\n\tpublic removeCustomLineHeight(decorationID: string): void {\n\t\tconst customLines = this._decorationIDToCustomLine.get(decorationID);\n\t\tif (!customLines) {\n\t\t\treturn;\n\t\t}\n\t\tthis._decorationIDToCustomLine.delete(decorationID);\n\t\tfor (const customLine of customLines) {\n\t\t\tcustomLine.deleted = true;\n\t\t\tthis._invalidIndex = Math.min(this._invalidIndex, customLine.index);\n\t\t}\n\t\tthis._hasPending = true;\n\t}\n\n\tpublic insertOrChangeCustomLineHeight(decorationId: string, startLineNumber: number, endLineNumber: number, lineHeight: number): void {\n\t\tthis.removeCustomLineHeight(decorationId);\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst customLine = new CustomLine(decorationId, -1, lineNumber, lineHeight, 0);\n\t\t\tthis._pendingSpecialLinesToInsert.push(customLine);\n\t\t}\n\t\tthis._hasPending = true;\n\t}\n\n\tpublic heightForLineNumber(lineNumber: number): number {\n\t\tconst searchIndex = this._binarySearchOverOrderedCustomLinesArray(lineNumber);\n\t\tif (searchIndex >= 0) {\n\t\t\treturn this._orderedCustomLines[searchIndex].maximumSpecialHeight;\n\t\t}\n\t\treturn this._defaultLineHeight;\n\t}\n\n\tpublic getAccumulatedLineHeightsIncludingLineNumber(lineNumber: number): number {\n\t\tconst searchIndex = this._binarySearchOverOrderedCustomLinesArray(lineNumber);\n\t\tif (searchIndex >= 0) {\n\t\t\treturn this._orderedCustomLines[searchIndex].prefixSum + this._orderedCustomLines[searchIndex].maximumSpecialHeight;\n\t\t}\n\t\tif (searchIndex === -1) {\n\t\t\treturn this._defaultLineHeight * lineNumber;\n\t\t}\n\t\tconst modifiedIndex = -(searchIndex + 1);\n\t\tconst previousSpecialLine = this._orderedCustomLines[modifiedIndex - 1];\n\t\treturn previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (lineNumber - previousSpecialLine.lineNumber);\n\t}\n\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tconst deleteCount = toLineNumber - fromLineNumber + 1;\n\t\tconst numberOfCustomLines = this._orderedCustomLines.length;\n\t\tconst candidateStartIndexOfDeletion = this._binarySearchOverOrderedCustomLinesArray(fromLineNumber);\n\t\tlet startIndexOfDeletion: number;\n\t\tif (candidateStartIndexOfDeletion >= 0) {\n\t\t\tstartIndexOfDeletion = candidateStartIndexOfDeletion;\n\t\t\tfor (let i = candidateStartIndexOfDeletion - 1; i >= 0; i--) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\t\tstartIndexOfDeletion--;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tstartIndexOfDeletion = candidateStartIndexOfDeletion === -(numberOfCustomLines + 1) && candidateStartIndexOfDeletion !== -1 ? numberOfCustomLines - 1 : - (candidateStartIndexOfDeletion + 1);\n\t\t}\n\t\tconst candidateEndIndexOfDeletion = this._binarySearchOverOrderedCustomLinesArray(toLineNumber);\n\t\tlet endIndexOfDeletion: number;\n\t\tif (candidateEndIndexOfDeletion >= 0) {\n\t\t\tendIndexOfDeletion = candidateEndIndexOfDeletion;\n\t\t\tfor (let i = candidateEndIndexOfDeletion + 1; i < numberOfCustomLines; i++) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === toLineNumber) {\n\t\t\t\t\tendIndexOfDeletion++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tendIndexOfDeletion = candidateEndIndexOfDeletion === -(numberOfCustomLines + 1) && candidateEndIndexOfDeletion !== -1 ? numberOfCustomLines - 1 : - (candidateEndIndexOfDeletion + 1);\n\t\t}\n\t\tconst isEndIndexBiggerThanStartIndex = endIndexOfDeletion > startIndexOfDeletion;\n\t\tconst isEndIndexEqualToStartIndexAndCoversCustomLine = endIndexOfDeletion === startIndexOfDeletion\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion]\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion].lineNumber >= fromLineNumber\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion].lineNumber <= toLineNumber;\n\n\t\tif (isEndIndexBiggerThanStartIndex || isEndIndexEqualToStartIndexAndCoversCustomLine) {\n\t\t\tlet maximumSpecialHeightOnDeletedInterval = 0;\n\t\t\tfor (let i = startIndexOfDeletion; i <= endIndexOfDeletion; i++) {\n\t\t\t\tmaximumSpecialHeightOnDeletedInterval = Math.max(maximumSpecialHeightOnDeletedInterval, this._orderedCustomLines[i].maximumSpecialHeight);\n\t\t\t}\n\t\t\tlet prefixSumOnDeletedInterval = 0;\n\t\t\tif (startIndexOfDeletion > 0) {\n\t\t\t\tconst previousSpecialLine = this._orderedCustomLines[startIndexOfDeletion - 1];\n\t\t\t\tprefixSumOnDeletedInterval = previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (fromLineNumber - previousSpecialLine.lineNumber - 1);\n\t\t\t} else {\n\t\t\t\tprefixSumOnDeletedInterval = fromLineNumber > 0 ? (fromLineNumber - 1) * this._defaultLineHeight : 0;\n\t\t\t}\n\t\t\tconst firstSpecialLineDeleted = this._orderedCustomLines[startIndexOfDeletion];\n\t\t\tconst lastSpecialLineDeleted = this._orderedCustomLines[endIndexOfDeletion];\n\t\t\tconst firstSpecialLineAfterDeletion = this._orderedCustomLines[endIndexOfDeletion + 1];\n\t\t\tconst heightOfFirstLineAfterDeletion = firstSpecialLineAfterDeletion && firstSpecialLineAfterDeletion.lineNumber === toLineNumber + 1 ? firstSpecialLineAfterDeletion.maximumSpecialHeight : this._defaultLineHeight;\n\t\t\tconst totalHeightDeleted = lastSpecialLineDeleted.prefixSum\n\t\t\t\t+ lastSpecialLineDeleted.maximumSpecialHeight\n\t\t\t\t- firstSpecialLineDeleted.prefixSum\n\t\t\t\t+ this._defaultLineHeight * (toLineNumber - lastSpecialLineDeleted.lineNumber)\n\t\t\t\t+ this._defaultLineHeight * (firstSpecialLineDeleted.lineNumber - fromLineNumber)\n\t\t\t\t+ heightOfFirstLineAfterDeletion - maximumSpecialHeightOnDeletedInterval;\n\n\t\t\tconst decorationIdsSeen = new Set<string>();\n\t\t\tconst newOrderedCustomLines: CustomLine[] = [];\n\t\t\tconst newDecorationIDToSpecialLine = new ArrayMap<string, CustomLine>();\n\t\t\tlet numberOfDeletions = 0;\n\t\t\tfor (let i = 0; i < this._orderedCustomLines.length; i++) {\n\t\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\t\tif (i < startIndexOfDeletion) {\n\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t} else if (i >= startIndexOfDeletion && i <= endIndexOfDeletion) {\n\t\t\t\t\tconst decorationId = customLine.decorationId;\n\t\t\t\t\tif (!decorationIdsSeen.has(decorationId)) {\n\t\t\t\t\t\tcustomLine.index -= numberOfDeletions;\n\t\t\t\t\t\tcustomLine.lineNumber = fromLineNumber;\n\t\t\t\t\t\tcustomLine.prefixSum = prefixSumOnDeletedInterval;\n\t\t\t\t\t\tcustomLine.maximumSpecialHeight = maximumSpecialHeightOnDeletedInterval;\n\t\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumberOfDeletions++;\n\t\t\t\t\t}\n\t\t\t\t} else if (i > endIndexOfDeletion) {\n\t\t\t\t\tcustomLine.index -= numberOfDeletions;\n\t\t\t\t\tcustomLine.lineNumber -= deleteCount;\n\t\t\t\t\tcustomLine.prefixSum -= totalHeightDeleted;\n\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t}\n\t\t\t\tdecorationIdsSeen.add(customLine.decorationId);\n\t\t\t}\n\t\t\tthis._orderedCustomLines = newOrderedCustomLines;\n\t\t\tthis._decorationIDToCustomLine = newDecorationIDToSpecialLine;\n\t\t} else {\n\t\t\tconst totalHeightDeleted = deleteCount * this._defaultLineHeight;\n\t\t\tfor (let i = endIndexOfDeletion; i < this._orderedCustomLines.length; i++) {\n\t\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\t\tif (customLine.lineNumber > toLineNumber) {\n\t\t\t\t\tcustomLine.lineNumber -= deleteCount;\n\t\t\t\t\tcustomLine.prefixSum -= totalHeightDeleted;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tconst insertCount = toLineNumber - fromLineNumber + 1;\n\t\tconst candidateStartIndexOfInsertion = this._binarySearchOverOrderedCustomLinesArray(fromLineNumber);\n\t\tlet startIndexOfInsertion: number;\n\t\tif (candidateStartIndexOfInsertion >= 0) {\n\t\t\tstartIndexOfInsertion = candidateStartIndexOfInsertion;\n\t\t\tfor (let i = candidateStartIndexOfInsertion - 1; i >= 0; i--) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\t\tstartIndexOfInsertion--;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tstartIndexOfInsertion = -(candidateStartIndexOfInsertion + 1);\n\t\t}\n\t\tconst toReAdd: ICustomLineHeightData[] = [];\n\t\tconst decorationsImmediatelyAfter = new Set<string>();\n\t\tfor (let i = startIndexOfInsertion; i < this._orderedCustomLines.length; i++) {\n\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\tdecorationsImmediatelyAfter.add(this._orderedCustomLines[i].decorationId);\n\t\t\t}\n\t\t}\n\t\tconst decorationsImmediatelyBefore = new Set<string>();\n\t\tfor (let i = startIndexOfInsertion - 1; i >= 0; i--) {\n\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber - 1) {\n\t\t\t\tdecorationsImmediatelyBefore.add(this._orderedCustomLines[i].decorationId);\n\t\t\t}\n\t\t}\n\t\tconst decorationsWithGaps = intersection(decorationsImmediatelyBefore, decorationsImmediatelyAfter);\n\t\tfor (let i = startIndexOfInsertion; i < this._orderedCustomLines.length; i++) {\n\t\t\tthis._orderedCustomLines[i].lineNumber += insertCount;\n\t\t\tthis._orderedCustomLines[i].prefixSum += this._defaultLineHeight * insertCount;\n\t\t}\n\n\t\tif (decorationsWithGaps.size > 0) {\n\t\t\tfor (const decorationId of decorationsWithGaps) {\n\t\t\t\tconst decoration = this._decorationIDToCustomLine.get(decorationId);\n\t\t\t\tif (decoration) {\n\t\t\t\t\tconst startLineNumber = decoration.reduce((min, l) => Math.min(min, l.lineNumber), fromLineNumber); // min\n\t\t\t\t\tconst endLineNumber = decoration.reduce((max, l) => Math.max(max, l.lineNumber), fromLineNumber); // max\n\t\t\t\t\tconst lineHeight = decoration.reduce((max, l) => Math.max(max, l.specialHeight), 0);\n\t\t\t\t\ttoReAdd.push({\n\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tlineHeight\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const dec of toReAdd) {\n\t\t\t\tthis.insertOrChangeCustomLineHeight(dec.decorationId, dec.startLineNumber, dec.endLineNumber, dec.lineHeight);\n\t\t\t}\n\t\t\tthis.commit();\n\t\t}\n\t}\n\n\tpublic commit(): void {\n\t\tif (!this._hasPending) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const pendingChange of this._pendingSpecialLinesToInsert) {\n\t\t\tconst candidateInsertionIndex = this._binarySearchOverOrderedCustomLinesArray(pendingChange.lineNumber);\n\t\t\tconst insertionIndex = candidateInsertionIndex >= 0 ? candidateInsertionIndex : -(candidateInsertionIndex + 1);\n\t\t\tthis._orderedCustomLines.splice(insertionIndex, 0, pendingChange);\n\t\t\tthis._invalidIndex = Math.min(this._invalidIndex, insertionIndex);\n\t\t}\n\t\tthis._pendingSpecialLinesToInsert = [];\n\t\tconst newDecorationIDToSpecialLine = new ArrayMap<string, CustomLine>();\n\t\tconst newOrderedSpecialLines: CustomLine[] = [];\n\n\t\tfor (let i = 0; i < this._invalidIndex; i++) {\n\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\tnewOrderedSpecialLines.push(customLine);\n\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t}\n\n\t\tlet numberOfDeletions = 0;\n\t\tlet previousSpecialLine: CustomLine | undefined = (this._invalidIndex > 0) ? newOrderedSpecialLines[this._invalidIndex - 1] : undefined;\n\t\tfor (let i = this._invalidIndex; i < this._orderedCustomLines.length; i++) {\n\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\tif (customLine.deleted) {\n\t\t\t\tnumberOfDeletions++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcustomLine.index = i - numberOfDeletions;\n\t\t\tif (previousSpecialLine && previousSpecialLine.lineNumber === customLine.lineNumber) {\n\t\t\t\tcustomLine.maximumSpecialHeight = previousSpecialLine.maximumSpecialHeight;\n\t\t\t\tcustomLine.prefixSum = previousSpecialLine.prefixSum;\n\t\t\t} else {\n\t\t\t\tlet maximumSpecialHeight = customLine.specialHeight;\n\t\t\t\tfor (let j = i; j < this._orderedCustomLines.length; j++) {\n\t\t\t\t\tconst nextSpecialLine = this._orderedCustomLines[j];\n\t\t\t\t\tif (nextSpecialLine.deleted) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (nextSpecialLine.lineNumber !== customLine.lineNumber) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmaximumSpecialHeight = Math.max(maximumSpecialHeight, nextSpecialLine.specialHeight);\n\t\t\t\t}\n\t\t\t\tcustomLine.maximumSpecialHeight = maximumSpecialHeight;\n\n\t\t\t\tlet prefixSum: number;\n\t\t\t\tif (previousSpecialLine) {\n\t\t\t\t\tprefixSum = previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (customLine.lineNumber - previousSpecialLine.lineNumber - 1);\n\t\t\t\t} else {\n\t\t\t\t\tprefixSum = this._defaultLineHeight * (customLine.lineNumber - 1);\n\t\t\t\t}\n\t\t\t\tcustomLine.prefixSum = prefixSum;\n\t\t\t}\n\t\t\tpreviousSpecialLine = customLine;\n\t\t\tnewOrderedSpecialLines.push(customLine);\n\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t}\n\t\tthis._orderedCustomLines = newOrderedSpecialLines;\n\t\tthis._decorationIDToCustomLine = newDecorationIDToSpecialLine;\n\t\tthis._invalidIndex = Infinity;\n\t\tthis._hasPending = false;\n\t}\n\n\tprivate _binarySearchOverOrderedCustomLinesArray(lineNumber: number): number {\n\t\treturn binarySearch2(this._orderedCustomLines.length, (index) => {\n\t\t\tconst line = this._orderedCustomLines[index];\n\t\t\tif (line.lineNumber === lineNumber) {\n\t\t\t\treturn 0;\n\t\t\t} else if (line.lineNumber < lineNumber) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface ICustomLineHeightData {\n\treadonly decorationId: string;\n\treadonly startLineNumber: number;\n\treadonly endLineNumber: number;\n\treadonly lineHeight: number;\n}\n\nclass ArrayMap<K, T> {\n\n\tprivate _map: Map<K, T[]> = new Map<K, T[]>();\n\n\tconstructor() { }\n\n\tadd(key: K, value: T) {\n\t\tconst array = this._map.get(key);\n\t\tif (!array) {\n\t\t\tthis._map.set(key, [value]);\n\t\t} else {\n\t\t\tarray.push(value);\n\t\t}\n\t}\n\n\tget(key: K): T[] | undefined {\n\t\treturn this._map.get(key);\n\t}\n\n\tdelete(key: K): void {\n\t\tthis._map.delete(key);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch2 } from '../../../base/common/arrays.js';\nimport { intersection } from '../../../base/common/collections.js';\n\nexport class CustomLine {\n\n\tpublic index: number;\n\tpublic lineNumber: number;\n\tpublic specialHeight: number;\n\tpublic prefixSum: number;\n\tpublic maximumSpecialHeight: number;\n\tpublic decorationId: string;\n\tpublic deleted: boolean;\n\n\tconstructor(decorationId: string, index: number, lineNumber: number, specialHeight: number, prefixSum: number) {\n\t\tthis.decorationId = decorationId;\n\t\tthis.index = index;\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.specialHeight = specialHeight;\n\t\tthis.prefixSum = prefixSum;\n\t\tthis.maximumSpecialHeight = specialHeight;\n\t\tthis.deleted = false;\n\t}\n}\n\n/**\n * Manages line heights in the editor with support for custom line heights from decorations.\n *\n * This class maintains an ordered collection of line heights, where each line can have either\n * the default height or a custom height specified by decorations. It supports efficient querying\n * of individual line heights as well as accumulated heights up to a specific line.\n *\n * Line heights are stored in a sorted array for efficient binary search operations. Each line\n * with custom height is represented by a {@link CustomLine} object which tracks its special height,\n * accumulated height prefix sum, and associated decoration ID.\n *\n * The class optimizes performance by:\n * - Using binary search to locate lines in the ordered array\n * - Batching updates through a pending changes mechanism\n * - Computing prefix sums for O(1) accumulated height lookup\n * - Tracking maximum height for lines with multiple decorations\n * - Efficiently handling document changes (line insertions and deletions)\n *\n * When lines are inserted or deleted, the manager updates line numbers and prefix sums\n * for all affected lines. It also handles special cases like decorations that span\n * the insertion/deletion points by re-applying those decorations appropriately.\n *\n * All query operations automatically commit pending changes to ensure consistent results.\n * Clients can modify line heights by adding or removing custom line height decorations,\n * which are tracked by their unique decoration IDs.\n */\nexport class LineHeightsManager {\n\n\tprivate _decorationIDToCustomLine: ArrayMap<string, CustomLine> = new ArrayMap<string, CustomLine>();\n\tprivate _orderedCustomLines: CustomLine[] = [];\n\tprivate _pendingSpecialLinesToInsert: CustomLine[] = [];\n\tprivate _invalidIndex: number = 0;\n\tprivate _defaultLineHeight: number;\n\tprivate _hasPending: boolean = false;\n\n\tconstructor(defaultLineHeight: number, customLineHeightData: ICustomLineHeightData[]) {\n\t\tthis._defaultLineHeight = defaultLineHeight;\n\t\tif (customLineHeightData.length > 0) {\n\t\t\tfor (const data of customLineHeightData) {\n\t\t\t\tthis.insertOrChangeCustomLineHeight(data.decorationId, data.startLineNumber, data.endLineNumber, data.lineHeight);\n\t\t\t}\n\t\t\tthis.commit();\n\t\t}\n\t}\n\n\tset defaultLineHeight(defaultLineHeight: number) {\n\t\tthis._defaultLineHeight = defaultLineHeight;\n\t}\n\n\tget defaultLineHeight() {\n\t\treturn this._defaultLineHeight;\n\t}\n\n\tpublic removeCustomLineHeight(decorationID: string): void {\n\t\tconst customLines = this._decorationIDToCustomLine.get(decorationID);\n\t\tif (!customLines) {\n\t\t\treturn;\n\t\t}\n\t\tthis._decorationIDToCustomLine.delete(decorationID);\n\t\tfor (const customLine of customLines) {\n\t\t\tcustomLine.deleted = true;\n\t\t\tthis._invalidIndex = Math.min(this._invalidIndex, customLine.index);\n\t\t}\n\t\tthis._hasPending = true;\n\t}\n\n\tpublic insertOrChangeCustomLineHeight(decorationId: string, startLineNumber: number, endLineNumber: number, lineHeight: number): void {\n\t\tthis.removeCustomLineHeight(decorationId);\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst customLine = new CustomLine(decorationId, -1, lineNumber, lineHeight, 0);\n\t\t\tthis._pendingSpecialLinesToInsert.push(customLine);\n\t\t}\n\t\tthis._hasPending = true;\n\t}\n\n\tpublic heightForLineNumber(lineNumber: number): number {\n\t\tconst searchIndex = this._binarySearchOverOrderedCustomLinesArray(lineNumber);\n\t\tif (searchIndex >= 0) {\n\t\t\treturn this._orderedCustomLines[searchIndex].maximumSpecialHeight;\n\t\t}\n\t\treturn this._defaultLineHeight;\n\t}\n\n\tpublic getAccumulatedLineHeightsIncludingLineNumber(lineNumber: number): number {\n\t\tconst searchIndex = this._binarySearchOverOrderedCustomLinesArray(lineNumber);\n\t\tif (searchIndex >= 0) {\n\t\t\treturn this._orderedCustomLines[searchIndex].prefixSum + this._orderedCustomLines[searchIndex].maximumSpecialHeight;\n\t\t}\n\t\tif (searchIndex === -1) {\n\t\t\treturn this._defaultLineHeight * lineNumber;\n\t\t}\n\t\tconst modifiedIndex = -(searchIndex + 1);\n\t\tconst previousSpecialLine = this._orderedCustomLines[modifiedIndex - 1];\n\t\treturn previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (lineNumber - previousSpecialLine.lineNumber);\n\t}\n\n\tpublic onLinesDeleted(fromLineNumber: number, toLineNumber: number): void {\n\t\tconst deleteCount = toLineNumber - fromLineNumber + 1;\n\t\tconst numberOfCustomLines = this._orderedCustomLines.length;\n\t\tconst candidateStartIndexOfDeletion = this._binarySearchOverOrderedCustomLinesArray(fromLineNumber);\n\t\tlet startIndexOfDeletion: number;\n\t\tif (candidateStartIndexOfDeletion >= 0) {\n\t\t\tstartIndexOfDeletion = candidateStartIndexOfDeletion;\n\t\t\tfor (let i = candidateStartIndexOfDeletion - 1; i >= 0; i--) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\t\tstartIndexOfDeletion--;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tstartIndexOfDeletion = candidateStartIndexOfDeletion === -(numberOfCustomLines + 1) && candidateStartIndexOfDeletion !== -1 ? numberOfCustomLines - 1 : - (candidateStartIndexOfDeletion + 1);\n\t\t}\n\t\tconst candidateEndIndexOfDeletion = this._binarySearchOverOrderedCustomLinesArray(toLineNumber);\n\t\tlet endIndexOfDeletion: number;\n\t\tif (candidateEndIndexOfDeletion >= 0) {\n\t\t\tendIndexOfDeletion = candidateEndIndexOfDeletion;\n\t\t\tfor (let i = candidateEndIndexOfDeletion + 1; i < numberOfCustomLines; i++) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === toLineNumber) {\n\t\t\t\t\tendIndexOfDeletion++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tendIndexOfDeletion = candidateEndIndexOfDeletion === -(numberOfCustomLines + 1) && candidateEndIndexOfDeletion !== -1 ? numberOfCustomLines - 1 : - (candidateEndIndexOfDeletion + 1);\n\t\t}\n\t\tconst isEndIndexBiggerThanStartIndex = endIndexOfDeletion > startIndexOfDeletion;\n\t\tconst isEndIndexEqualToStartIndexAndCoversCustomLine = endIndexOfDeletion === startIndexOfDeletion\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion]\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion].lineNumber >= fromLineNumber\n\t\t\t&& this._orderedCustomLines[startIndexOfDeletion].lineNumber <= toLineNumber;\n\n\t\tif (isEndIndexBiggerThanStartIndex || isEndIndexEqualToStartIndexAndCoversCustomLine) {\n\t\t\tlet maximumSpecialHeightOnDeletedInterval = 0;\n\t\t\tfor (let i = startIndexOfDeletion; i <= endIndexOfDeletion; i++) {\n\t\t\t\tmaximumSpecialHeightOnDeletedInterval = Math.max(maximumSpecialHeightOnDeletedInterval, this._orderedCustomLines[i].maximumSpecialHeight);\n\t\t\t}\n\t\t\tlet prefixSumOnDeletedInterval = 0;\n\t\t\tif (startIndexOfDeletion > 0) {\n\t\t\t\tconst previousSpecialLine = this._orderedCustomLines[startIndexOfDeletion - 1];\n\t\t\t\tprefixSumOnDeletedInterval = previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (fromLineNumber - previousSpecialLine.lineNumber - 1);\n\t\t\t} else {\n\t\t\t\tprefixSumOnDeletedInterval = fromLineNumber > 0 ? (fromLineNumber - 1) * this._defaultLineHeight : 0;\n\t\t\t}\n\t\t\tconst firstSpecialLineDeleted = this._orderedCustomLines[startIndexOfDeletion];\n\t\t\tconst lastSpecialLineDeleted = this._orderedCustomLines[endIndexOfDeletion];\n\t\t\tconst firstSpecialLineAfterDeletion = this._orderedCustomLines[endIndexOfDeletion + 1];\n\t\t\tconst heightOfFirstLineAfterDeletion = firstSpecialLineAfterDeletion && firstSpecialLineAfterDeletion.lineNumber === toLineNumber + 1 ? firstSpecialLineAfterDeletion.maximumSpecialHeight : this._defaultLineHeight;\n\t\t\tconst totalHeightDeleted = lastSpecialLineDeleted.prefixSum\n\t\t\t\t+ lastSpecialLineDeleted.maximumSpecialHeight\n\t\t\t\t- firstSpecialLineDeleted.prefixSum\n\t\t\t\t+ this._defaultLineHeight * (toLineNumber - lastSpecialLineDeleted.lineNumber)\n\t\t\t\t+ this._defaultLineHeight * (firstSpecialLineDeleted.lineNumber - fromLineNumber)\n\t\t\t\t+ heightOfFirstLineAfterDeletion - maximumSpecialHeightOnDeletedInterval;\n\n\t\t\tconst decorationIdsSeen = new Set<string>();\n\t\t\tconst newOrderedCustomLines: CustomLine[] = [];\n\t\t\tconst newDecorationIDToSpecialLine = new ArrayMap<string, CustomLine>();\n\t\t\tlet numberOfDeletions = 0;\n\t\t\tfor (let i = 0; i < this._orderedCustomLines.length; i++) {\n\t\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\t\tif (i < startIndexOfDeletion) {\n\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t} else if (i >= startIndexOfDeletion && i <= endIndexOfDeletion) {\n\t\t\t\t\tconst decorationId = customLine.decorationId;\n\t\t\t\t\tif (!decorationIdsSeen.has(decorationId)) {\n\t\t\t\t\t\tcustomLine.index -= numberOfDeletions;\n\t\t\t\t\t\tcustomLine.lineNumber = fromLineNumber;\n\t\t\t\t\t\tcustomLine.prefixSum = prefixSumOnDeletedInterval;\n\t\t\t\t\t\tcustomLine.maximumSpecialHeight = maximumSpecialHeightOnDeletedInterval;\n\t\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumberOfDeletions++;\n\t\t\t\t\t}\n\t\t\t\t} else if (i > endIndexOfDeletion) {\n\t\t\t\t\tcustomLine.index -= numberOfDeletions;\n\t\t\t\t\tcustomLine.lineNumber -= deleteCount;\n\t\t\t\t\tcustomLine.prefixSum -= totalHeightDeleted;\n\t\t\t\t\tnewOrderedCustomLines.push(customLine);\n\t\t\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t\t\t}\n\t\t\t\tdecorationIdsSeen.add(customLine.decorationId);\n\t\t\t}\n\t\t\tthis._orderedCustomLines = newOrderedCustomLines;\n\t\t\tthis._decorationIDToCustomLine = newDecorationIDToSpecialLine;\n\t\t} else {\n\t\t\tconst totalHeightDeleted = deleteCount * this._defaultLineHeight;\n\t\t\tfor (let i = endIndexOfDeletion; i < this._orderedCustomLines.length; i++) {\n\t\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\t\tif (customLine.lineNumber > toLineNumber) {\n\t\t\t\t\tcustomLine.lineNumber -= deleteCount;\n\t\t\t\t\tcustomLine.prefixSum -= totalHeightDeleted;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic onLinesInserted(fromLineNumber: number, toLineNumber: number): void {\n\t\tconst insertCount = toLineNumber - fromLineNumber + 1;\n\t\tconst candidateStartIndexOfInsertion = this._binarySearchOverOrderedCustomLinesArray(fromLineNumber);\n\t\tlet startIndexOfInsertion: number;\n\t\tif (candidateStartIndexOfInsertion >= 0) {\n\t\t\tstartIndexOfInsertion = candidateStartIndexOfInsertion;\n\t\t\tfor (let i = candidateStartIndexOfInsertion - 1; i >= 0; i--) {\n\t\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\t\tstartIndexOfInsertion--;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tstartIndexOfInsertion = -(candidateStartIndexOfInsertion + 1);\n\t\t}\n\t\tconst toReAdd: ICustomLineHeightData[] = [];\n\t\tconst decorationsImmediatelyAfter = new Set<string>();\n\t\tfor (let i = startIndexOfInsertion; i < this._orderedCustomLines.length; i++) {\n\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber) {\n\t\t\t\tdecorationsImmediatelyAfter.add(this._orderedCustomLines[i].decorationId);\n\t\t\t}\n\t\t}\n\t\tconst decorationsImmediatelyBefore = new Set<string>();\n\t\tfor (let i = startIndexOfInsertion - 1; i >= 0; i--) {\n\t\t\tif (this._orderedCustomLines[i].lineNumber === fromLineNumber - 1) {\n\t\t\t\tdecorationsImmediatelyBefore.add(this._orderedCustomLines[i].decorationId);\n\t\t\t}\n\t\t}\n\t\tconst decorationsWithGaps = intersection(decorationsImmediatelyBefore, decorationsImmediatelyAfter);\n\t\tfor (let i = startIndexOfInsertion; i < this._orderedCustomLines.length; i++) {\n\t\t\tthis._orderedCustomLines[i].lineNumber += insertCount;\n\t\t\tthis._orderedCustomLines[i].prefixSum += this._defaultLineHeight * insertCount;\n\t\t}\n\n\t\tif (decorationsWithGaps.size > 0) {\n\t\t\tfor (const decorationId of decorationsWithGaps) {\n\t\t\t\tconst decoration = this._decorationIDToCustomLine.get(decorationId);\n\t\t\t\tif (decoration) {\n\t\t\t\t\tconst startLineNumber = decoration.reduce((min, l) => Math.min(min, l.lineNumber), fromLineNumber); // min\n\t\t\t\t\tconst endLineNumber = decoration.reduce((max, l) => Math.max(max, l.lineNumber), fromLineNumber); // max\n\t\t\t\t\tconst lineHeight = decoration.reduce((max, l) => Math.max(max, l.specialHeight), 0);\n\t\t\t\t\ttoReAdd.push({\n\t\t\t\t\t\tdecorationId,\n\t\t\t\t\t\tstartLineNumber,\n\t\t\t\t\t\tendLineNumber,\n\t\t\t\t\t\tlineHeight\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const dec of toReAdd) {\n\t\t\t\tthis.insertOrChangeCustomLineHeight(dec.decorationId, dec.startLineNumber, dec.endLineNumber, dec.lineHeight);\n\t\t\t}\n\t\t\tthis.commit();\n\t\t}\n\t}\n\n\tpublic commit(): void {\n\t\tif (!this._hasPending) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const pendingChange of this._pendingSpecialLinesToInsert) {\n\t\t\tconst candidateInsertionIndex = this._binarySearchOverOrderedCustomLinesArray(pendingChange.lineNumber);\n\t\t\tconst insertionIndex = candidateInsertionIndex >= 0 ? candidateInsertionIndex : -(candidateInsertionIndex + 1);\n\t\t\tthis._orderedCustomLines.splice(insertionIndex, 0, pendingChange);\n\t\t\tthis._invalidIndex = Math.min(this._invalidIndex, insertionIndex);\n\t\t}\n\t\tthis._pendingSpecialLinesToInsert = [];\n\t\tconst newDecorationIDToSpecialLine = new ArrayMap<string, CustomLine>();\n\t\tconst newOrderedSpecialLines: CustomLine[] = [];\n\n\t\tfor (let i = 0; i < this._invalidIndex; i++) {\n\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\tnewOrderedSpecialLines.push(customLine);\n\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t}\n\n\t\tlet numberOfDeletions = 0;\n\t\tlet previousSpecialLine: CustomLine | undefined = (this._invalidIndex > 0) ? newOrderedSpecialLines[this._invalidIndex - 1] : undefined;\n\t\tfor (let i = this._invalidIndex; i < this._orderedCustomLines.length; i++) {\n\t\t\tconst customLine = this._orderedCustomLines[i];\n\t\t\tif (customLine.deleted) {\n\t\t\t\tnumberOfDeletions++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcustomLine.index = i - numberOfDeletions;\n\t\t\tif (previousSpecialLine && previousSpecialLine.lineNumber === customLine.lineNumber) {\n\t\t\t\tcustomLine.maximumSpecialHeight = previousSpecialLine.maximumSpecialHeight;\n\t\t\t\tcustomLine.prefixSum = previousSpecialLine.prefixSum;\n\t\t\t} else {\n\t\t\t\tlet maximumSpecialHeight = customLine.specialHeight;\n\t\t\t\tfor (let j = i; j < this._orderedCustomLines.length; j++) {\n\t\t\t\t\tconst nextSpecialLine = this._orderedCustomLines[j];\n\t\t\t\t\tif (nextSpecialLine.deleted) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (nextSpecialLine.lineNumber !== customLine.lineNumber) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmaximumSpecialHeight = Math.max(maximumSpecialHeight, nextSpecialLine.specialHeight);\n\t\t\t\t}\n\t\t\t\tcustomLine.maximumSpecialHeight = maximumSpecialHeight;\n\n\t\t\t\tlet prefixSum: number;\n\t\t\t\tif (previousSpecialLine) {\n\t\t\t\t\tprefixSum = previousSpecialLine.prefixSum + previousSpecialLine.maximumSpecialHeight + this._defaultLineHeight * (customLine.lineNumber - previousSpecialLine.lineNumber - 1);\n\t\t\t\t} else {\n\t\t\t\t\tprefixSum = this._defaultLineHeight * (customLine.lineNumber - 1);\n\t\t\t\t}\n\t\t\t\tcustomLine.prefixSum = prefixSum;\n\t\t\t}\n\t\t\tpreviousSpecialLine = customLine;\n\t\t\tnewOrderedSpecialLines.push(customLine);\n\t\t\tnewDecorationIDToSpecialLine.add(customLine.decorationId, customLine);\n\t\t}\n\t\tthis._orderedCustomLines = newOrderedSpecialLines;\n\t\tthis._decorationIDToCustomLine = newDecorationIDToSpecialLine;\n\t\tthis._invalidIndex = Infinity;\n\t\tthis._hasPending = false;\n\t}\n\n\tprivate _binarySearchOverOrderedCustomLinesArray(lineNumber: number): number {\n\t\treturn binarySearch2(this._orderedCustomLines.length, (index) => {\n\t\t\tconst line = this._orderedCustomLines[index];\n\t\t\tif (line.lineNumber === lineNumber) {\n\t\t\t\treturn 0;\n\t\t\t} else if (line.lineNumber < lineNumber) {\n\t\t\t\treturn -1;\n\t\t\t} else {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface ICustomLineHeightData {\n\treadonly decorationId: string;\n\treadonly startLineNumber: number;\n\treadonly endLineNumber: number;\n\treadonly lineHeight: number;\n}\n\nclass ArrayMap<K, T> {\n\n\tprivate _map: Map<K, T[]> = new Map<K, T[]>();\n\n\tconstructor() { }\n\n\tadd(key: K, value: T) {\n\t\tconst array = this._map.get(key);\n\t\tif (!array) {\n\t\t\tthis._map.set(key, [value]);\n\t\t} else {\n\t\t\tarray.push(value);\n\t\t}\n\t}\n\n\tget(key: K): T[] | undefined {\n\t\treturn this._map.get(key);\n\t}\n\n\tdelete(key: K): void {\n\t\tthis._map.delete(key);\n\t}\n}\n"]}