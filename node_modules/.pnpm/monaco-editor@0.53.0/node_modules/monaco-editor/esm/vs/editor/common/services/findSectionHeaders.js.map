{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/services/findSectionHeaders.ts","vs/editor/common/services/findSectionHeaders.ts"],"names":[],"mappings":"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","file":"findSectionHeaders.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange } from '../core/range.js';\nimport { FoldingRules } from '../languages/languageConfiguration.js';\nimport { isMultilineRegexSource } from '../model/textModelSearch.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\n\nexport interface ISectionHeaderFinderTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface FindSectionHeaderOptions {\n\tfoldingRules?: FoldingRules;\n\tfindRegionSectionHeaders: boolean;\n\tfindMarkSectionHeaders: boolean;\n\tmarkSectionHeaderRegex: string;\n}\n\nexport interface SectionHeader {\n\t/**\n\t * The location of the header text in the text model.\n\t */\n\trange: IRange;\n\t/**\n\t * The section header text.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the section header includes a separator line.\n\t */\n\thasSeparatorLine: boolean;\n\t/**\n\t * This section should be omitted before rendering if it's not in a comment.\n\t */\n\tshouldBeInComments: boolean;\n}\n\nconst trimDashesRegex = /^-+|-+$/g;\n\nconst CHUNK_SIZE = 100;\nconst MAX_SECTION_LINES = 5;\n\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nexport function findSectionHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tlet headers: SectionHeader[] = [];\n\tif (options.findRegionSectionHeaders && options.foldingRules?.markers) {\n\t\tconst regionHeaders = collectRegionHeaders(model, options);\n\t\theaders = headers.concat(regionHeaders);\n\t}\n\tif (options.findMarkSectionHeaders) {\n\t\tconst markHeaders = collectMarkHeaders(model, options);\n\t\theaders = headers.concat(markHeaders);\n\t}\n\treturn headers;\n}\n\nfunction collectRegionHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tconst regionHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\tfor (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst match = lineContent.match(options.foldingRules!.markers!.start);\n\t\tif (match) {\n\t\t\tconst range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\n\t\t\tif (range.endColumn > range.startColumn) {\n\t\t\t\tconst sectionHeader = {\n\t\t\t\t\trange,\n\t\t\t\t\t...getHeaderText(lineContent.substring(match[0].length)),\n\t\t\t\t\tshouldBeInComments: false\n\t\t\t\t};\n\t\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\t\tregionHeaders.push(sectionHeader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn regionHeaders;\n}\n\nexport function collectMarkHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tconst markHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\n\t// Validate regex to prevent infinite loops\n\tif (!options.markSectionHeaderRegex || options.markSectionHeaderRegex.trim() === '') {\n\t\treturn markHeaders;\n\t}\n\n\t// Create regex with flags for:\n\t// - 'd' for indices to get proper match positions\n\t// - 'm' for multi-line mode so ^ and $ match line starts/ends\n\t// - 's' for dot-all mode so . matches newlines\n\tconst multiline = isMultilineRegexSource(options.markSectionHeaderRegex);\n\tconst regex = new RegExp(options.markSectionHeaderRegex, `gdm${multiline ? 's' : ''}`);\n\n\t// Check if the regex would lead to an endless loop\n\tif (regExpLeadsToEndlessLoop(regex)) {\n\t\treturn markHeaders;\n\t}\n\n\t// Process text in overlapping chunks for better performance\n\tfor (let startLine = 1; startLine <= endLineNumber; startLine += CHUNK_SIZE - MAX_SECTION_LINES) {\n\t\tconst endLine = Math.min(startLine + CHUNK_SIZE - 1, endLineNumber);\n\t\tconst lines: string[] = [];\n\n\t\t// Collect lines for the current chunk\n\t\tfor (let i = startLine; i <= endLine; i++) {\n\t\t\tlines.push(model.getLineContent(i));\n\t\t}\n\n\t\tconst text = lines.join('\\n');\n\t\tregex.lastIndex = 0;\n\n\t\tlet match: RegExpExecArray | null;\n\t\twhile ((match = regex.exec(text)) !== null) {\n\t\t\t// Calculate which line this match starts on by counting newlines before it\n\t\t\tconst precedingText = text.substring(0, match.index);\n\t\t\tconst lineOffset = (precedingText.match(/\\n/g) || []).length;\n\t\t\tconst lineNumber = startLine + lineOffset;\n\n\t\t\t// Calculate match height to check overlap properly\n\t\t\tconst matchLines = match[0].split('\\n');\n\t\t\tconst matchHeight = matchLines.length;\n\t\t\tconst matchEndLine = lineNumber + matchHeight - 1;\n\n\t\t\t// Calculate start column - need to find the start of the line containing the match\n\t\t\tconst lineStartIndex = precedingText.lastIndexOf('\\n') + 1;\n\t\t\tconst startColumn = match.index - lineStartIndex + 1;\n\n\t\t\t// Calculate end column - need to handle multi-line matches\n\t\t\tconst lastMatchLine = matchLines[matchLines.length - 1];\n\t\t\tconst endColumn = matchHeight === 1 ? startColumn + match[0].length : lastMatchLine.length + 1;\n\n\t\t\tconst range = {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber: matchEndLine,\n\t\t\t\tendColumn\n\t\t\t};\n\n\t\t\tconst text2 = (match.groups ?? {})['label'] ?? '';\n\t\t\tconst hasSeparatorLine = ((match.groups ?? {})['separator'] ?? '') !== '';\n\n\t\t\tconst sectionHeader = {\n\t\t\t\trange,\n\t\t\t\ttext: text2,\n\t\t\t\thasSeparatorLine,\n\t\t\t\tshouldBeInComments: true\n\t\t\t};\n\n\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\t// only push if the previous one doesn't have this same linbe\n\t\t\t\tif (markHeaders.length === 0 || markHeaders[markHeaders.length - 1].range.endLineNumber < sectionHeader.range.startLineNumber) {\n\t\t\t\t\tmarkHeaders.push(sectionHeader);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Move lastIndex past the current match to avoid infinite loop\n\t\t\tregex.lastIndex = match.index + match[0].length;\n\t\t}\n\t}\n\n\treturn markHeaders;\n}\n\nfunction getHeaderText(text: string): { text: string; hasSeparatorLine: boolean } {\n\ttext = text.trim();\n\tconst hasSeparatorLine = text.startsWith('-');\n\ttext = text.replace(trimDashesRegex, '');\n\treturn { text, hasSeparatorLine };\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange } from '../core/range.js';\nimport { FoldingRules } from '../languages/languageConfiguration.js';\nimport { isMultilineRegexSource } from '../model/textModelSearch.js';\nimport { regExpLeadsToEndlessLoop } from '../../../base/common/strings.js';\n\nexport interface ISectionHeaderFinderTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface FindSectionHeaderOptions {\n\tfoldingRules?: FoldingRules;\n\tfindRegionSectionHeaders: boolean;\n\tfindMarkSectionHeaders: boolean;\n\tmarkSectionHeaderRegex: string;\n}\n\nexport interface SectionHeader {\n\t/**\n\t * The location of the header text in the text model.\n\t */\n\trange: IRange;\n\t/**\n\t * The section header text.\n\t */\n\ttext: string;\n\t/**\n\t * Whether the section header includes a separator line.\n\t */\n\thasSeparatorLine: boolean;\n\t/**\n\t * This section should be omitted before rendering if it's not in a comment.\n\t */\n\tshouldBeInComments: boolean;\n}\n\nconst trimDashesRegex = /^-+|-+$/g;\n\nconst CHUNK_SIZE = 100;\nconst MAX_SECTION_LINES = 5;\n\n/**\n * Find section headers in the model.\n *\n * @param model the text model to search in\n * @param options options to search with\n * @returns an array of section headers\n */\nexport function findSectionHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tlet headers: SectionHeader[] = [];\n\tif (options.findRegionSectionHeaders && options.foldingRules?.markers) {\n\t\tconst regionHeaders = collectRegionHeaders(model, options);\n\t\theaders = headers.concat(regionHeaders);\n\t}\n\tif (options.findMarkSectionHeaders) {\n\t\tconst markHeaders = collectMarkHeaders(model, options);\n\t\theaders = headers.concat(markHeaders);\n\t}\n\treturn headers;\n}\n\nfunction collectRegionHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tconst regionHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\tfor (let lineNumber = 1; lineNumber <= endLineNumber; lineNumber++) {\n\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\tconst match = lineContent.match(options.foldingRules!.markers!.start);\n\t\tif (match) {\n\t\t\tconst range = { startLineNumber: lineNumber, startColumn: match[0].length + 1, endLineNumber: lineNumber, endColumn: lineContent.length + 1 };\n\t\t\tif (range.endColumn > range.startColumn) {\n\t\t\t\tconst sectionHeader = {\n\t\t\t\t\trange,\n\t\t\t\t\t...getHeaderText(lineContent.substring(match[0].length)),\n\t\t\t\t\tshouldBeInComments: false\n\t\t\t\t};\n\t\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\t\tregionHeaders.push(sectionHeader);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn regionHeaders;\n}\n\nexport function collectMarkHeaders(model: ISectionHeaderFinderTarget, options: FindSectionHeaderOptions): SectionHeader[] {\n\tconst markHeaders: SectionHeader[] = [];\n\tconst endLineNumber = model.getLineCount();\n\n\t// Validate regex to prevent infinite loops\n\tif (!options.markSectionHeaderRegex || options.markSectionHeaderRegex.trim() === '') {\n\t\treturn markHeaders;\n\t}\n\n\t// Create regex with flags for:\n\t// - 'd' for indices to get proper match positions\n\t// - 'm' for multi-line mode so ^ and $ match line starts/ends\n\t// - 's' for dot-all mode so . matches newlines\n\tconst multiline = isMultilineRegexSource(options.markSectionHeaderRegex);\n\tconst regex = new RegExp(options.markSectionHeaderRegex, `gdm${multiline ? 's' : ''}`);\n\n\t// Check if the regex would lead to an endless loop\n\tif (regExpLeadsToEndlessLoop(regex)) {\n\t\treturn markHeaders;\n\t}\n\n\t// Process text in overlapping chunks for better performance\n\tfor (let startLine = 1; startLine <= endLineNumber; startLine += CHUNK_SIZE - MAX_SECTION_LINES) {\n\t\tconst endLine = Math.min(startLine + CHUNK_SIZE - 1, endLineNumber);\n\t\tconst lines: string[] = [];\n\n\t\t// Collect lines for the current chunk\n\t\tfor (let i = startLine; i <= endLine; i++) {\n\t\t\tlines.push(model.getLineContent(i));\n\t\t}\n\n\t\tconst text = lines.join('\\n');\n\t\tregex.lastIndex = 0;\n\n\t\tlet match: RegExpExecArray | null;\n\t\twhile ((match = regex.exec(text)) !== null) {\n\t\t\t// Calculate which line this match starts on by counting newlines before it\n\t\t\tconst precedingText = text.substring(0, match.index);\n\t\t\tconst lineOffset = (precedingText.match(/\\n/g) || []).length;\n\t\t\tconst lineNumber = startLine + lineOffset;\n\n\t\t\t// Calculate match height to check overlap properly\n\t\t\tconst matchLines = match[0].split('\\n');\n\t\t\tconst matchHeight = matchLines.length;\n\t\t\tconst matchEndLine = lineNumber + matchHeight - 1;\n\n\t\t\t// Calculate start column - need to find the start of the line containing the match\n\t\t\tconst lineStartIndex = precedingText.lastIndexOf('\\n') + 1;\n\t\t\tconst startColumn = match.index - lineStartIndex + 1;\n\n\t\t\t// Calculate end column - need to handle multi-line matches\n\t\t\tconst lastMatchLine = matchLines[matchLines.length - 1];\n\t\t\tconst endColumn = matchHeight === 1 ? startColumn + match[0].length : lastMatchLine.length + 1;\n\n\t\t\tconst range = {\n\t\t\t\tstartLineNumber: lineNumber,\n\t\t\t\tstartColumn,\n\t\t\t\tendLineNumber: matchEndLine,\n\t\t\t\tendColumn\n\t\t\t};\n\n\t\t\tconst text2 = (match.groups ?? {})['label'] ?? '';\n\t\t\tconst hasSeparatorLine = ((match.groups ?? {})['separator'] ?? '') !== '';\n\n\t\t\tconst sectionHeader = {\n\t\t\t\trange,\n\t\t\t\ttext: text2,\n\t\t\t\thasSeparatorLine,\n\t\t\t\tshouldBeInComments: true\n\t\t\t};\n\n\t\t\tif (sectionHeader.text || sectionHeader.hasSeparatorLine) {\n\t\t\t\t// only push if the previous one doesn't have this same linbe\n\t\t\t\tif (markHeaders.length === 0 || markHeaders[markHeaders.length - 1].range.endLineNumber < sectionHeader.range.startLineNumber) {\n\t\t\t\t\tmarkHeaders.push(sectionHeader);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Move lastIndex past the current match to avoid infinite loop\n\t\t\tregex.lastIndex = match.index + match[0].length;\n\t\t}\n\t}\n\n\treturn markHeaders;\n}\n\nfunction getHeaderText(text: string): { text: string; hasSeparatorLine: boolean } {\n\ttext = text.trim();\n\tconst hasSeparatorLine = text.startsWith('-');\n\ttext = text.replace(trimDashesRegex, '');\n\treturn { text, hasSeparatorLine };\n}\n"]}