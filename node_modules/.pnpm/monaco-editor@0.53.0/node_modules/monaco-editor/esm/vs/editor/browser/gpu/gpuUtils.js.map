{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/gpuUtils.ts","vs/editor/browser/gpu/gpuUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AACpE,OAAO,EAAE,YAAY,EAAoB,MAAM,mCAAmC,CAAC;AAEnF,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC;IAC5C,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;CACJ,CAAC,CAAC;AAEH,MAAM,UAAU,iBAAiB,CAAI,KAAe;IACnD,IAAI,CAAC,KAAK,EAAE,CAAC;QACZ,MAAM,IAAI,KAAK,CAAC,UAAU,KAAK,kBAAkB,CAAC,CAAC;IACpD,CAAC;IACD,OAAO,KAAK,CAAC;AACd,CAAC;AAED,oDAAoD;AACpD,MAAM,UAAU,4BAA4B,CAAC,OAAoB,EAAE,YAAwC,EAAE,QAA6D;IACzK,6FAA6F;IAC7F,0FAA0F;IAC1F,4FAA4F;IAC5F,qCAAqC;IACrC,IAAI,QAAQ,GAA+B,IAAI,YAAY,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAAE;QACtF,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO;QACR,CAAC;QAED,yEAAyE;QACzE,IAAI,CAAC,CAAC,2BAA2B,IAAI,KAAK,CAAC,EAAE,CAAC;YAC7C,QAAQ,EAAE,UAAU,EAAE,CAAC;YACvB,QAAQ,GAAG,SAAS,CAAC;YACrB,OAAO;QACR,CAAC;QAED,+FAA+F;QAC/F,MAAM,KAAK,GAAG,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAC5D,MAAM,MAAM,GAAG,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC5D,IAAI,KAAK,GAAG,CAAC,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACzB,CAAC;IACF,CAAC,CAAC,CAAC;IACH,IAAI,CAAC;QACJ,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,CAAC,0BAA0B,CAAC,EAAS,CAAC,CAAC;IACzE,CAAC;IAAC,MAAM,CAAC;QACR,QAAQ,CAAC,UAAU,EAAE,CAAC;QACtB,QAAQ,GAAG,SAAS,CAAC;QACrB,MAAM,IAAI,kBAAkB,CAAC,2CAA2C,CAAC,CAAC;IAC3E,CAAC;IACD,OAAO,YAAY,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;AACnD,CAAC","file":"gpuUtils.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { toDisposable, type IDisposable } from '../../../base/common/lifecycle.js';\n\nexport const quadVertices = new Float32Array([\n\t1, 0,\n\t1, 1,\n\t0, 1,\n\t0, 0,\n\t0, 1,\n\t1, 0,\n]);\n\nexport function ensureNonNullable<T>(value: T | null): T {\n\tif (!value) {\n\t\tthrow new Error(`Value \"${value}\" cannot be null`);\n\t}\n\treturn value;\n}\n\n// TODO: Move capabilities into ElementSizeObserver?\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n\t// Observe any resizes to the element and extract the actual pixel size of the element if the\n\t// devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n\t// converting between CSS pixels and device pixels which causes blurry rendering when device\n\t// pixel ratio is not a round number.\n\tlet observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n\t\tconst entry = entries.find((entry) => entry.target === element);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Disconnect if devicePixelContentBoxSize isn't supported by the browser\n\t\tif (!('devicePixelContentBoxSize' in entry)) {\n\t\t\tobserver?.disconnect();\n\t\t\tobserver = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n\t\tconst width = entry.devicePixelContentBoxSize[0].inlineSize;\n\t\tconst height = entry.devicePixelContentBoxSize[0].blockSize;\n\t\tif (width > 0 && height > 0) {\n\t\t\tcallback(width, height);\n\t\t}\n\t});\n\ttry {\n\t\tobserver.observe(element, { box: ['device-pixel-content-box'] } as any);\n\t} catch {\n\t\tobserver.disconnect();\n\t\tobserver = undefined;\n\t\tthrow new BugIndicatingError('Could not observe device pixel dimensions');\n\t}\n\treturn toDisposable(() => observer?.disconnect());\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { toDisposable, type IDisposable } from '../../../base/common/lifecycle.js';\n\nexport const quadVertices = new Float32Array([\n\t1, 0,\n\t1, 1,\n\t0, 1,\n\t0, 0,\n\t0, 1,\n\t1, 0,\n]);\n\nexport function ensureNonNullable<T>(value: T | null): T {\n\tif (!value) {\n\t\tthrow new Error(`Value \"${value}\" cannot be null`);\n\t}\n\treturn value;\n}\n\n// TODO: Move capabilities into ElementSizeObserver?\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\n\t// Observe any resizes to the element and extract the actual pixel size of the element if the\n\t// devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\n\t// converting between CSS pixels and device pixels which causes blurry rendering when device\n\t// pixel ratio is not a round number.\n\tlet observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\n\t\tconst entry = entries.find((entry) => entry.target === element);\n\t\tif (!entry) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Disconnect if devicePixelContentBoxSize isn't supported by the browser\n\t\tif (!('devicePixelContentBoxSize' in entry)) {\n\t\t\tobserver?.disconnect();\n\t\t\tobserver = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\n\t\tconst width = entry.devicePixelContentBoxSize[0].inlineSize;\n\t\tconst height = entry.devicePixelContentBoxSize[0].blockSize;\n\t\tif (width > 0 && height > 0) {\n\t\t\tcallback(width, height);\n\t\t}\n\t});\n\ttry {\n\t\tobserver.observe(element, { box: ['device-pixel-content-box'] } as any);\n\t} catch {\n\t\tobserver.disconnect();\n\t\tobserver = undefined;\n\t\tthrow new BugIndicatingError('Could not observe device pixel dimensions');\n\t}\n\treturn toDisposable(() => observer?.disconnect());\n}\n"]}