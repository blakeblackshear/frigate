{"version":3,"sources":["vs/editor/common/languages.ts"],"names":[],"mappings":"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","file":"languages.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["\nimport { CancellationToken } from '../../base/common/cancellation.js';\nimport { Codicon } from '../../base/common/codicons.js';\nimport { Color } from '../../base/common/color.js';\nimport { IReadonlyVSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Event } from '../../base/common/event.js';\nimport { HierarchicalKind } from '../../base/common/hierarchicalKind.js';\nimport { IMarkdownString } from '../../base/common/htmlContent.js';\nimport { IDisposable } from '../../base/common/lifecycle.js';\nimport { ThemeIcon } from '../../base/common/themables.js';\nimport { URI, UriComponents } from '../../base/common/uri.js';\nimport { ISingleEditOperation } from './core/editOperation.js';\nimport { IPosition, Position } from './core/position.js';\nimport { IRange, Range } from './core/range.js';\nimport { Selection } from './core/selection.js';\nimport { LanguageId } from './encodedTokenAttributes.js';\nimport { LanguageSelector } from './languageSelector.js';\nimport * as model from './model.js';\nimport { TokenizationRegistry as TokenizationRegistryImpl } from './tokenizationRegistry.js';\nimport { ContiguousMultilineTokens } from './tokens/contiguousMultilineTokens.js';\nimport { localize } from '../../nls.js';\nimport { ExtensionIdentifier } from '../../platform/extensions/common/extensions.js';\nimport { IMarkerData } from '../../platform/markers/common/markers.js';\n\n/**\n * @internal\n */\nexport interface ILanguageIdCodec {\n\tencodeLanguageId(languageId: string): LanguageId;\n\tdecodeLanguageId(languageId: LanguageId): string;\n}\n\nexport class Token {\n\t_tokenBrand: void = undefined;\n\n\tconstructor(\n\t\tpublic readonly offset: number,\n\t\tpublic readonly type: string,\n\t\tpublic readonly language: string,\n\t) {\n\t}\n\n\tpublic toString(): string {\n\t\treturn '(' + this.offset + ', ' + this.type + ')';\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationResult {\n\t_tokenizationResultBrand: void = undefined;\n\n\tconstructor(\n\t\tpublic readonly tokens: Token[],\n\t\tpublic readonly endState: IState,\n\t) {\n\t}\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationResult {\n\t_encodedTokenizationResultBrand: void = undefined;\n\n\tconstructor(\n\t\t/**\n\t\t * The tokens in binary format. Each token occupies two array indices. For token i:\n\t\t *  - at offset 2*i => startIndex\n\t\t *  - at offset 2*i + 1 => metadata\n\t\t *\n\t\t */\n\t\tpublic readonly tokens: Uint32Array,\n\t\tpublic readonly endState: IState,\n\t) {\n\t}\n}\n\nexport interface SyntaxNode {\n\tstartIndex: number;\n\tendIndex: number;\n\tstartPosition: IPosition;\n\tendPosition: IPosition;\n}\n\nexport interface QueryCapture {\n\tname: string;\n\ttext?: string;\n\tnode: SyntaxNode;\n\tencodedLanguageId: number;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupport {\n\t/**\n\t * If true, the background tokenizer will only be used to verify tokens against the default background tokenizer.\n\t * Used for debugging.\n\t */\n\treadonly backgroundTokenizerShouldOnlyVerifyTokens?: boolean;\n\n\tgetInitialState(): IState;\n\n\ttokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult;\n\n\ttokenizeEncoded(line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult;\n\n\t/**\n\t * Can be/return undefined if default background tokenization should be used.\n\t */\n\tcreateBackgroundTokenizer?(textModel: model.ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined;\n}\n\n/**\n * @internal\n */\nexport interface IBackgroundTokenizer extends IDisposable {\n\t/**\n\t * Instructs the background tokenizer to set the tokens for the given range again.\n\t *\n\t * This might be necessary if the renderer overwrote those tokens with heuristically computed ones for some viewport,\n\t * when the change does not even propagate to that viewport.\n\t */\n\trequestTokens(startLineNumber: number, endLineNumberExclusive: number): void;\n\n\treportMismatchingTokens?(lineNumber: number): void;\n}\n\n/**\n * @internal\n */\nexport interface IBackgroundTokenizationStore {\n\tsetTokens(tokens: ContiguousMultilineTokens[]): void;\n\n\tsetEndState(lineNumber: number, state: IState): void;\n\n\t/**\n\t * Should be called to indicate that the background tokenization has finished for now.\n\t * (This triggers bracket pair colorization to re-parse the bracket pairs with token information)\n\t */\n\tbackgroundTokenizationFinished(): void;\n}\n\n/**\n * The state of the tokenizer between two lines.\n * It is useful to store flags such as in multiline comment, etc.\n * The model will clone the previous line's state and pass it in to tokenize the next line.\n */\nexport interface IState {\n\tclone(): IState;\n\tequals(other: IState): boolean;\n}\n\n/**\n * A provider result represents the values a provider, like the {@link HoverProvider},\n * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n * thenable.\n */\nexport type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n/**\n * A hover represents additional information for a symbol or word. Hovers are\n * rendered in a tooltip-like widget.\n */\nexport interface Hover {\n\t/**\n\t * The contents of this hover.\n\t */\n\tcontents: IMarkdownString[];\n\n\t/**\n\t * The range to which this hover applies. When missing, the\n\t * editor will use the range at the current position or the\n\t * current position itself.\n\t */\n\trange?: IRange;\n\n\t/**\n\t * Can increase the verbosity of the hover\n\t */\n\tcanIncreaseVerbosity?: boolean;\n\n\t/**\n\t * Can decrease the verbosity of the hover\n\t */\n\tcanDecreaseVerbosity?: boolean;\n}\n\n/**\n * The hover provider interface defines the contract between extensions and\n * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface HoverProvider<THover = Hover> {\n\t/**\n\t * Provide a hover for the given position, context and document. Multiple hovers at the same\n\t * position will be merged by the editor. A hover can have a range which defaults\n\t * to the word range at the position when omitted.\n\t */\n\tprovideHover(model: model.ITextModel, position: Position, token: CancellationToken, context?: HoverContext<THover>): ProviderResult<THover>;\n}\n\nexport interface HoverContext<THover = Hover> {\n\t/**\n\t * Hover verbosity request\n\t */\n\tverbosityRequest?: HoverVerbosityRequest<THover>;\n}\n\nexport interface HoverVerbosityRequest<THover = Hover> {\n\t/**\n\t * The delta by which to increase/decrease the hover verbosity level\n\t */\n\tverbosityDelta: number;\n\t/**\n\t * The previous hover for the same position\n\t */\n\tpreviousHover: THover;\n}\n\nexport enum HoverVerbosityAction {\n\t/**\n\t * Increase the verbosity of the hover\n\t */\n\tIncrease,\n\t/**\n\t * Decrease the verbosity of the hover\n\t */\n\tDecrease\n}\n\nexport const enum CompletionItemKind {\n\tMethod,\n\tFunction,\n\tConstructor,\n\tField,\n\tVariable,\n\tClass,\n\tStruct,\n\tInterface,\n\tModule,\n\tProperty,\n\tEvent,\n\tOperator,\n\tUnit,\n\tValue,\n\tConstant,\n\tEnum,\n\tEnumMember,\n\tKeyword,\n\tText,\n\tColor,\n\tFile,\n\tReference,\n\tCustomcolor,\n\tFolder,\n\tTypeParameter,\n\tUser,\n\tIssue,\n\tTool,\n\tSnippet, // <- highest value (used for compare!)\n}\n\n/**\n * @internal\n */\nexport namespace CompletionItemKinds {\n\n\tconst byKind = new Map<CompletionItemKind, ThemeIcon>();\n\tbyKind.set(CompletionItemKind.Method, Codicon.symbolMethod);\n\tbyKind.set(CompletionItemKind.Function, Codicon.symbolFunction);\n\tbyKind.set(CompletionItemKind.Constructor, Codicon.symbolConstructor);\n\tbyKind.set(CompletionItemKind.Field, Codicon.symbolField);\n\tbyKind.set(CompletionItemKind.Variable, Codicon.symbolVariable);\n\tbyKind.set(CompletionItemKind.Class, Codicon.symbolClass);\n\tbyKind.set(CompletionItemKind.Struct, Codicon.symbolStruct);\n\tbyKind.set(CompletionItemKind.Interface, Codicon.symbolInterface);\n\tbyKind.set(CompletionItemKind.Module, Codicon.symbolModule);\n\tbyKind.set(CompletionItemKind.Property, Codicon.symbolProperty);\n\tbyKind.set(CompletionItemKind.Event, Codicon.symbolEvent);\n\tbyKind.set(CompletionItemKind.Operator, Codicon.symbolOperator);\n\tbyKind.set(CompletionItemKind.Unit, Codicon.symbolUnit);\n\tbyKind.set(CompletionItemKind.Value, Codicon.symbolValue);\n\tbyKind.set(CompletionItemKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(CompletionItemKind.Constant, Codicon.symbolConstant);\n\tbyKind.set(CompletionItemKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(CompletionItemKind.EnumMember, Codicon.symbolEnumMember);\n\tbyKind.set(CompletionItemKind.Keyword, Codicon.symbolKeyword);\n\tbyKind.set(CompletionItemKind.Snippet, Codicon.symbolSnippet);\n\tbyKind.set(CompletionItemKind.Text, Codicon.symbolText);\n\tbyKind.set(CompletionItemKind.Color, Codicon.symbolColor);\n\tbyKind.set(CompletionItemKind.File, Codicon.symbolFile);\n\tbyKind.set(CompletionItemKind.Reference, Codicon.symbolReference);\n\tbyKind.set(CompletionItemKind.Customcolor, Codicon.symbolCustomColor);\n\tbyKind.set(CompletionItemKind.Folder, Codicon.symbolFolder);\n\tbyKind.set(CompletionItemKind.TypeParameter, Codicon.symbolTypeParameter);\n\tbyKind.set(CompletionItemKind.User, Codicon.account);\n\tbyKind.set(CompletionItemKind.Issue, Codicon.issues);\n\tbyKind.set(CompletionItemKind.Tool, Codicon.tools);\n\n\t/**\n\t * @internal\n\t */\n\texport function toIcon(kind: CompletionItemKind): ThemeIcon {\n\t\tlet codicon = byKind.get(kind);\n\t\tif (!codicon) {\n\t\t\tconsole.info('No codicon found for CompletionItemKind ' + kind);\n\t\t\tcodicon = Codicon.symbolProperty;\n\t\t}\n\t\treturn codicon;\n\t}\n\n\t/**\n\t * @internal\n\t */\n\texport function toLabel(kind: CompletionItemKind): string {\n\t\tswitch (kind) {\n\t\t\tcase CompletionItemKind.Method: return localize('suggestWidget.kind.method', 'Method');\n\t\t\tcase CompletionItemKind.Function: return localize('suggestWidget.kind.function', 'Function');\n\t\t\tcase CompletionItemKind.Constructor: return localize('suggestWidget.kind.constructor', 'Constructor');\n\t\t\tcase CompletionItemKind.Field: return localize('suggestWidget.kind.field', 'Field');\n\t\t\tcase CompletionItemKind.Variable: return localize('suggestWidget.kind.variable', 'Variable');\n\t\t\tcase CompletionItemKind.Class: return localize('suggestWidget.kind.class', 'Class');\n\t\t\tcase CompletionItemKind.Struct: return localize('suggestWidget.kind.struct', 'Struct');\n\t\t\tcase CompletionItemKind.Interface: return localize('suggestWidget.kind.interface', 'Interface');\n\t\t\tcase CompletionItemKind.Module: return localize('suggestWidget.kind.module', 'Module');\n\t\t\tcase CompletionItemKind.Property: return localize('suggestWidget.kind.property', 'Property');\n\t\t\tcase CompletionItemKind.Event: return localize('suggestWidget.kind.event', 'Event');\n\t\t\tcase CompletionItemKind.Operator: return localize('suggestWidget.kind.operator', 'Operator');\n\t\t\tcase CompletionItemKind.Unit: return localize('suggestWidget.kind.unit', 'Unit');\n\t\t\tcase CompletionItemKind.Value: return localize('suggestWidget.kind.value', 'Value');\n\t\t\tcase CompletionItemKind.Constant: return localize('suggestWidget.kind.constant', 'Constant');\n\t\t\tcase CompletionItemKind.Enum: return localize('suggestWidget.kind.enum', 'Enum');\n\t\t\tcase CompletionItemKind.EnumMember: return localize('suggestWidget.kind.enumMember', 'Enum Member');\n\t\t\tcase CompletionItemKind.Keyword: return localize('suggestWidget.kind.keyword', 'Keyword');\n\t\t\tcase CompletionItemKind.Text: return localize('suggestWidget.kind.text', 'Text');\n\t\t\tcase CompletionItemKind.Color: return localize('suggestWidget.kind.color', 'Color');\n\t\t\tcase CompletionItemKind.File: return localize('suggestWidget.kind.file', 'File');\n\t\t\tcase CompletionItemKind.Reference: return localize('suggestWidget.kind.reference', 'Reference');\n\t\t\tcase CompletionItemKind.Customcolor: return localize('suggestWidget.kind.customcolor', 'Custom Color');\n\t\t\tcase CompletionItemKind.Folder: return localize('suggestWidget.kind.folder', 'Folder');\n\t\t\tcase CompletionItemKind.TypeParameter: return localize('suggestWidget.kind.typeParameter', 'Type Parameter');\n\t\t\tcase CompletionItemKind.User: return localize('suggestWidget.kind.user', 'User');\n\t\t\tcase CompletionItemKind.Issue: return localize('suggestWidget.kind.issue', 'Issue');\n\t\t\tcase CompletionItemKind.Tool: return localize('suggestWidget.kind.tool', 'Tool');\n\t\t\tcase CompletionItemKind.Snippet: return localize('suggestWidget.kind.snippet', 'Snippet');\n\t\t\tdefault: return '';\n\t\t}\n\t}\n\n\tconst data = new Map<string, CompletionItemKind>();\n\tdata.set('method', CompletionItemKind.Method);\n\tdata.set('function', CompletionItemKind.Function);\n\tdata.set('constructor', <any>CompletionItemKind.Constructor);\n\tdata.set('field', CompletionItemKind.Field);\n\tdata.set('variable', CompletionItemKind.Variable);\n\tdata.set('class', CompletionItemKind.Class);\n\tdata.set('struct', CompletionItemKind.Struct);\n\tdata.set('interface', CompletionItemKind.Interface);\n\tdata.set('module', CompletionItemKind.Module);\n\tdata.set('property', CompletionItemKind.Property);\n\tdata.set('event', CompletionItemKind.Event);\n\tdata.set('operator', CompletionItemKind.Operator);\n\tdata.set('unit', CompletionItemKind.Unit);\n\tdata.set('value', CompletionItemKind.Value);\n\tdata.set('constant', CompletionItemKind.Constant);\n\tdata.set('enum', CompletionItemKind.Enum);\n\tdata.set('enum-member', CompletionItemKind.EnumMember);\n\tdata.set('enumMember', CompletionItemKind.EnumMember);\n\tdata.set('keyword', CompletionItemKind.Keyword);\n\tdata.set('snippet', CompletionItemKind.Snippet);\n\tdata.set('text', CompletionItemKind.Text);\n\tdata.set('color', CompletionItemKind.Color);\n\tdata.set('file', CompletionItemKind.File);\n\tdata.set('reference', CompletionItemKind.Reference);\n\tdata.set('customcolor', CompletionItemKind.Customcolor);\n\tdata.set('folder', CompletionItemKind.Folder);\n\tdata.set('type-parameter', CompletionItemKind.TypeParameter);\n\tdata.set('typeParameter', CompletionItemKind.TypeParameter);\n\tdata.set('account', CompletionItemKind.User);\n\tdata.set('issue', CompletionItemKind.Issue);\n\tdata.set('tool', CompletionItemKind.Tool);\n\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string): CompletionItemKind;\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string, strict: true): CompletionItemKind | undefined;\n\t/**\n\t * @internal\n\t */\n\texport function fromString(value: string, strict?: boolean): CompletionItemKind | undefined {\n\t\tlet res = data.get(value);\n\t\tif (typeof res === 'undefined' && !strict) {\n\t\t\tres = CompletionItemKind.Property;\n\t\t}\n\t\treturn res;\n\t}\n}\n\nexport interface CompletionItemLabel {\n\tlabel: string;\n\tdetail?: string;\n\tdescription?: string;\n}\n\nexport const enum CompletionItemTag {\n\tDeprecated = 1\n}\n\nexport const enum CompletionItemInsertTextRule {\n\tNone = 0,\n\n\t/**\n\t * Adjust whitespace/indentation of multiline insert texts to\n\t * match the current line indentation.\n\t */\n\tKeepWhitespace = 0b001,\n\n\t/**\n\t * `insertText` is a snippet.\n\t */\n\tInsertAsSnippet = 0b100,\n}\n\nexport interface CompletionItemRanges {\n\tinsert: IRange;\n\treplace: IRange;\n}\n\n/**\n * A completion item represents a text snippet that is\n * proposed to complete text that is being typed.\n */\nexport interface CompletionItem {\n\t/**\n\t * The label of this completion item. By default\n\t * this is also the text that is inserted when selecting\n\t * this completion.\n\t */\n\tlabel: string | CompletionItemLabel;\n\t/**\n\t * The kind of this completion item. Based on the kind\n\t * an icon is chosen by the editor.\n\t */\n\tkind: CompletionItemKind;\n\t/**\n\t * A modifier to the `kind` which affect how the item\n\t * is rendered, e.g. Deprecated is rendered with a strikeout\n\t */\n\ttags?: ReadonlyArray<CompletionItemTag>;\n\t/**\n\t * A human-readable string with additional information\n\t * about this item, like type or symbol information.\n\t */\n\tdetail?: string;\n\t/**\n\t * A human-readable string that represents a doc-comment.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * A string that should be used when comparing this item\n\t * with other items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tsortText?: string;\n\t/**\n\t * A string that should be used when filtering a set of\n\t * completion items. When `falsy` the {@link CompletionItem.label label}\n\t * is used.\n\t */\n\tfilterText?: string;\n\t/**\n\t * Select this item when showing. *Note* that only one completion item can be selected and\n\t * that the editor decides which item that is. The rule is that the *first* item of those\n\t * that match best is selected.\n\t */\n\tpreselect?: boolean;\n\t/**\n\t * A string or snippet that should be inserted in a document when selecting\n\t * this completion.\n\t */\n\tinsertText: string;\n\t/**\n\t * Additional rules (as bitmask) that should be applied when inserting\n\t * this completion.\n\t */\n\tinsertTextRules?: CompletionItemInsertTextRule;\n\t/**\n\t * A range of text that should be replaced by this completion item.\n\t *\n\t * *Note:* The range must be a {@link Range.isSingleLine single line} and it must\n\t * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n\t */\n\trange: IRange | CompletionItemRanges;\n\t/**\n\t * An optional set of characters that when pressed while this completion is active will accept it first and\n\t * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n\t * characters will be ignored.\n\t */\n\tcommitCharacters?: string[];\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\tadditionalTextEdits?: ISingleEditOperation[];\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\tcommand?: Command;\n\t/**\n\t * A command that should be run upon acceptance of this item.\n\t */\n\taction?: Command;\n\t/**\n\t * @internal\n\t */\n\textensionId?: ExtensionIdentifier;\n}\n\nexport interface CompletionList {\n\tsuggestions: CompletionItem[];\n\tincomplete?: boolean;\n\tdispose?(): void;\n\n\t/**\n\t * @internal\n\t */\n\tduration?: number;\n}\n\n/**\n * Info provided on partial acceptance.\n */\nexport interface PartialAcceptInfo {\n\tkind: PartialAcceptTriggerKind;\n\tacceptedLength: number;\n}\n\n/**\n * How a partial acceptance was triggered.\n */\nexport const enum PartialAcceptTriggerKind {\n\tWord = 0,\n\tLine = 1,\n\tSuggest = 2,\n}\n\n/**\n * How a suggest provider was triggered.\n */\nexport const enum CompletionTriggerKind {\n\tInvoke = 0,\n\tTriggerCharacter = 1,\n\tTriggerForIncompleteCompletions = 2\n}\n/**\n * Contains additional information about the context in which\n * {@link CompletionItemProvider.provideCompletionItems completion provider} is triggered.\n */\nexport interface CompletionContext {\n\t/**\n\t * How the completion was triggered.\n\t */\n\ttriggerKind: CompletionTriggerKind;\n\t/**\n\t * Character that triggered the completion item provider.\n\t *\n\t * `undefined` if provider was not triggered by a character.\n\t */\n\ttriggerCharacter?: string;\n}\n/**\n * The completion item provider interface defines the contract between extensions and\n * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n *\n * When computing *complete* completion items is expensive, providers can optionally implement\n * the `resolveCompletionItem`-function. In that case it is enough to return completion\n * items with a {@link CompletionItem.label label} from the\n * {@link CompletionItemProvider.provideCompletionItems provideCompletionItems}-function. Subsequently,\n * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n * the item, like adding {@link CompletionItem.documentation doc-comment} or {@link CompletionItem.detail details}.\n */\nexport interface CompletionItemProvider {\n\n\t/**\n\t * Used to identify completions in the (debug) UI and telemetry. This isn't the extension identifier because extensions\n\t * often contribute multiple completion item providers.\n\t *\n\t * @internal\n\t */\n\t_debugDisplayName: string;\n\n\ttriggerCharacters?: string[];\n\t/**\n\t * Provide completion items for the given position and document.\n\t */\n\tprovideCompletionItems(model: model.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n\n\t/**\n\t * Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n\t * or {@link CompletionItem.detail details}.\n\t *\n\t * The editor will only resolve a completion item once.\n\t */\n\tresolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n}\n\n/**\n * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n */\nexport enum InlineCompletionTriggerKind {\n\t/**\n\t * Completion was triggered automatically while editing.\n\t * It is sufficient to return a single completion item in this case.\n\t */\n\tAutomatic = 0,\n\n\t/**\n\t * Completion was triggered explicitly by a user gesture.\n\t * Return multiple completion items to enable cycling through them.\n\t */\n\tExplicit = 1,\n}\n\nexport interface InlineCompletionContext {\n\n\t/**\n\t * How the completion was triggered.\n\t */\n\treadonly triggerKind: InlineCompletionTriggerKind;\n\treadonly selectedSuggestionInfo: SelectedSuggestionInfo | undefined;\n\t/**\n\t * @experimental\n\t * @internal\n\t*/\n\treadonly requestUuid: string;\n\n\treadonly includeInlineEdits: boolean;\n\treadonly includeInlineCompletions: boolean;\n\treadonly requestIssuedDateTime: number;\n\treadonly earliestShownDateTime: number;\n}\n\nexport class SelectedSuggestionInfo {\n\tconstructor(\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly text: string,\n\t\tpublic readonly completionKind: CompletionItemKind,\n\t\tpublic readonly isSnippetText: boolean,\n\t) {\n\t}\n\n\tpublic equals(other: SelectedSuggestionInfo) {\n\t\treturn Range.lift(this.range).equalsRange(other.range)\n\t\t\t&& this.text === other.text\n\t\t\t&& this.completionKind === other.completionKind\n\t\t\t&& this.isSnippetText === other.isSnippetText;\n\t}\n}\n\nexport interface InlineCompletion {\n\t/**\n\t * The text to insert.\n\t * If the text contains a line break, the range must end at the end of a line.\n\t * If existing text should be replaced, the existing text must be a prefix of the text to insert.\n\t *\n\t * The text can also be a snippet. In that case, a preview with default parameters is shown.\n\t * When accepting the suggestion, the full snippet is inserted.\n\t*/\n\treadonly insertText: string | { snippet: string };\n\n\t/**\n\t * A text that is used to decide if this inline completion should be shown.\n\t * An inline completion is shown if the text to replace is a subword of the filter text.\n\t */\n\treadonly filterText?: string;\n\n\t/**\n\t * An optional array of additional text edits that are applied when\n\t * selecting this completion. Edits must not overlap with the main edit\n\t * nor with themselves.\n\t */\n\treadonly additionalTextEdits?: ISingleEditOperation[];\n\n\t/**\n\t * The range to replace.\n\t * Must begin and end on the same line.\n\t*/\n\treadonly range?: IRange;\n\n\treadonly command?: Command;\n\n\treadonly action?: Command;\n\n\t/**\n\t * Is called the first time an inline completion is shown.\n\t * @deprecated. Use `onDidShow` of the provider instead.\n\t*/\n\treadonly shownCommand?: Command;\n\n\t/**\n\t * If set to `true`, unopened closing brackets are removed and unclosed opening brackets are closed.\n\t * Defaults to `false`.\n\t*/\n\treadonly completeBracketPairs?: boolean;\n\n\treadonly isInlineEdit?: boolean;\n\treadonly showInlineEditMenu?: boolean;\n\n\treadonly showRange?: IRange;\n\n\treadonly warning?: InlineCompletionWarning;\n\n\treadonly displayLocation?: InlineCompletionDisplayLocation;\n\n\t/**\n\t * Used for telemetry.\n\t */\n\treadonly correlationId?: string | undefined;\n}\n\nexport interface InlineCompletionWarning {\n\tmessage: IMarkdownString | string;\n\ticon?: IconPath;\n}\n\nexport enum InlineCompletionDisplayLocationKind {\n\tCode = 1,\n\tLabel = 2\n}\n\nexport interface InlineCompletionDisplayLocation {\n\trange: IRange;\n\tkind: InlineCompletionDisplayLocationKind;\n\tlabel: string;\n}\n\n/**\n * TODO: add `| URI | { light: URI; dark: URI }`.\n*/\nexport type IconPath = ThemeIcon;\n\nexport interface InlineCompletions<TItem extends InlineCompletion = InlineCompletion> {\n\treadonly items: readonly TItem[];\n\t/**\n\t * A list of commands associated with the inline completions of this list.\n\t */\n\treadonly commands?: InlineCompletionCommand[];\n\n\treadonly suppressSuggestions?: boolean | undefined;\n\n\t/**\n\t * When set and the user types a suggestion without derivating from it, the inline suggestion is not updated.\n\t */\n\treadonly enableForwardStability?: boolean | undefined;\n}\n\nexport type InlineCompletionCommand = { command: Command; icon?: ThemeIcon };\n\nexport type InlineCompletionProviderGroupId = string;\n\nexport interface InlineCompletionsProvider<T extends InlineCompletions = InlineCompletions> {\n\tprovideInlineCompletions(model: model.ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<T>;\n\n\t/**\n\t * Will be called when an item is shown.\n\t * @param updatedInsertText Is useful to understand bracket completion.\n\t*/\n\thandleItemDidShow?(completions: T, item: T['items'][number], updatedInsertText: string): void;\n\n\t/**\n\t * Will be called when an item is partially accepted. TODO: also handle full acceptance here!\n\t * @param acceptedCharacters Deprecated. Use `info.acceptedCharacters` instead.\n\t */\n\thandlePartialAccept?(completions: T, item: T['items'][number], acceptedCharacters: number, info: PartialAcceptInfo): void;\n\n\t/**\n\t * @deprecated Use `handleEndOfLifetime` instead.\n\t*/\n\thandleRejection?(completions: T, item: T['items'][number]): void;\n\n\t/**\n\t * Is called when an inline completion item is no longer being used.\n\t * Provides a reason of why it is not used anymore.\n\t*/\n\thandleEndOfLifetime?(completions: T, item: T['items'][number], reason: InlineCompletionEndOfLifeReason<T['items'][number]>, lifetimeSummary: LifetimeSummary): void;\n\n\t/**\n\t * Will be called when a completions list is no longer in use and can be garbage-collected.\n\t*/\n\tdisposeInlineCompletions(completions: T, reason: InlineCompletionsDisposeReason): void;\n\n\tonDidChangeInlineCompletions?: Event<void>;\n\n\t/**\n\t * Only used for {@link yieldsToGroupIds}.\n\t * Multiple providers can have the same group id.\n\t */\n\tgroupId?: InlineCompletionProviderGroupId;\n\n\t/** @internal */\n\tproviderId?: ProviderId;\n\n\t/**\n\t * Returns a list of preferred provider {@link groupId}s.\n\t * The current provider is only requested for completions if no provider with a preferred group id returned a result.\n\t */\n\tyieldsToGroupIds?: InlineCompletionProviderGroupId[];\n\n\texcludesGroupIds?: InlineCompletionProviderGroupId[];\n\n\tdisplayName?: string;\n\n\tdebounceDelayMs?: number;\n\n\ttoString?(): string;\n}\n\n\n/** @internal */\nexport class ProviderId {\n\tpublic static fromExtensionId(extensionId: string | undefined): ProviderId {\n\t\treturn new ProviderId(extensionId, undefined, undefined);\n\t}\n\n\tconstructor(\n\t\tpublic readonly extensionId: string | undefined,\n\t\tpublic readonly extensionVersion: string | undefined,\n\t\tpublic readonly providerId: string | undefined\n\t) {\n\t}\n\n\ttoString(): string {\n\t\tlet result = '';\n\t\tif (this.extensionId) {\n\t\t\tresult += this.extensionId;\n\t\t}\n\t\tif (this.extensionVersion) {\n\t\t\tresult += `@${this.extensionVersion}`;\n\t\t}\n\t\tif (this.providerId) {\n\t\t\tresult += `:${this.providerId}`;\n\t\t}\n\t\tif (result.length === 0) {\n\t\t\tresult = 'unknown';\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** @internal */\nexport class VersionedExtensionId {\n\n\tconstructor(\n\t\tpublic readonly extensionId: string,\n\t\tpublic readonly version: string,\n\t) { }\n\n\ttoString(): string {\n\t\treturn `${this.extensionId}@${this.version}`;\n\t}\n}\n\nexport type InlineCompletionsDisposeReason = { kind: 'lostRace' | 'tokenCancellation' | 'other' | 'empty' | 'notTaken' };\n\nexport enum InlineCompletionEndOfLifeReasonKind {\n\tAccepted = 0,\n\tRejected = 1,\n\tIgnored = 2,\n}\n\nexport type InlineCompletionEndOfLifeReason<TInlineCompletion = InlineCompletion> = {\n\tkind: InlineCompletionEndOfLifeReasonKind.Accepted; // User did an explicit action to accept\n} | {\n\tkind: InlineCompletionEndOfLifeReasonKind.Rejected; // User did an explicit action to reject\n} | {\n\tkind: InlineCompletionEndOfLifeReasonKind.Ignored;\n\tsupersededBy?: TInlineCompletion;\n\tuserTypingDisagreed: boolean;\n};\n\nexport type LifetimeSummary = {\n\trequestUuid: string;\n\tcorrelationId: string | undefined;\n\tpartiallyAccepted: number;\n\tpartiallyAcceptedCountSinceOriginal: number;\n\tpartiallyAcceptedRatioSinceOriginal: number;\n\tpartiallyAcceptedCharactersSinceOriginal: number;\n\tshown: boolean;\n\tshownDuration: number;\n\tshownDurationUncollapsed: number;\n\ttimeUntilShown: number | undefined;\n\ttimeUntilProviderRequest: number;\n\ttimeUntilProviderResponse: number;\n\teditorType: string;\n\tviewKind: string | undefined;\n\terror: string | undefined;\n\tpreceeded: boolean;\n\tlanguageId: string;\n\trequestReason: string;\n\tcursorColumnDistance?: number;\n\tcursorLineDistance?: number;\n\tlineCountOriginal?: number;\n\tlineCountModified?: number;\n\tcharacterCountOriginal?: number;\n\tcharacterCountModified?: number;\n\tdisjointReplacements?: number;\n\tsameShapeReplacements?: boolean;\n\ttypingInterval: number;\n\ttypingIntervalCharacterCount: number;\n};\n\nexport interface CodeAction {\n\ttitle: string;\n\tcommand?: Command;\n\tedit?: WorkspaceEdit;\n\tdiagnostics?: IMarkerData[];\n\tkind?: string;\n\tisPreferred?: boolean;\n\tisAI?: boolean;\n\tdisabled?: string;\n\tranges?: IRange[];\n}\n\nexport const enum CodeActionTriggerType {\n\tInvoke = 1,\n\tAuto = 2,\n}\n\n/**\n * @internal\n */\nexport interface CodeActionContext {\n\tonly?: string;\n\ttrigger: CodeActionTriggerType;\n}\n\nexport interface CodeActionList extends IDisposable {\n\treadonly actions: ReadonlyArray<CodeAction>;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n * @internal\n */\nexport interface CodeActionProvider {\n\n\textensionId?: string;\n\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range | Selection, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: CodeAction, token: CancellationToken): ProviderResult<CodeAction>;\n\n\t/**\n\t * Optional list of CodeActionKinds that this provider returns.\n\t */\n\treadonly providedCodeActionKinds?: ReadonlyArray<string>;\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: Command }>;\n\n\t/**\n\t * @internal\n\t */\n\t_getAdditionalMenuItems?(context: CodeActionContext, actions: readonly CodeAction[]): Command[];\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEdit {\n\treadonly title: string;\n\treadonly kind: HierarchicalKind;\n\treadonly handledMimeType?: string;\n\tyieldTo?: readonly DropYieldTo[];\n\tinsertText: string | { readonly snippet: string };\n\tadditionalEdit?: WorkspaceEdit;\n}\n\n/**\n * @internal\n */\nexport enum DocumentPasteTriggerKind {\n\tAutomatic = 0,\n\tPasteAs = 1,\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteContext {\n\treadonly only?: HierarchicalKind;\n\treadonly triggerKind: DocumentPasteTriggerKind;\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEditsSession {\n\tedits: readonly DocumentPasteEdit[];\n\tdispose(): void;\n}\n\n/**\n * @internal\n */\nexport interface DocumentPasteEditProvider {\n\treadonly id?: string;\n\treadonly copyMimeTypes: readonly string[];\n\treadonly pasteMimeTypes: readonly string[];\n\treadonly providedPasteEditKinds: readonly HierarchicalKind[];\n\n\tprepareDocumentPaste?(model: model.ITextModel, ranges: readonly IRange[], dataTransfer: IReadonlyVSDataTransfer, token: CancellationToken): Promise<undefined | IReadonlyVSDataTransfer>;\n\n\tprovideDocumentPasteEdits?(model: model.ITextModel, ranges: readonly IRange[], dataTransfer: IReadonlyVSDataTransfer, context: DocumentPasteContext, token: CancellationToken): Promise<DocumentPasteEditsSession | undefined>;\n\n\tresolveDocumentPasteEdit?(edit: DocumentPasteEdit, token: CancellationToken): Promise<DocumentPasteEdit>;\n}\n\n/**\n * Represents a parameter of a callable-signature. A parameter can\n * have a label and a doc-comment.\n */\nexport interface ParameterInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string | [number, number];\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n}\n/**\n * Represents the signature of something callable. A signature\n * can have a label, like a function-name, a doc-comment, and\n * a set of parameters.\n */\nexport interface SignatureInformation {\n\t/**\n\t * The label of this signature. Will be shown in\n\t * the UI.\n\t */\n\tlabel: string;\n\t/**\n\t * The human-readable doc-comment of this signature. Will be shown\n\t * in the UI but can be omitted.\n\t */\n\tdocumentation?: string | IMarkdownString;\n\t/**\n\t * The parameters of this signature.\n\t */\n\tparameters: ParameterInformation[];\n\t/**\n\t * Index of the active parameter.\n\t *\n\t * If provided, this is used in place of `SignatureHelp.activeSignature`.\n\t */\n\tactiveParameter?: number;\n}\n/**\n * Signature help represents the signature of something\n * callable. There can be multiple signatures but only one\n * active and only one active parameter.\n */\nexport interface SignatureHelp {\n\t/**\n\t * One or more signatures.\n\t */\n\tsignatures: SignatureInformation[];\n\t/**\n\t * The active signature.\n\t */\n\tactiveSignature: number;\n\t/**\n\t * The active parameter of the active signature.\n\t */\n\tactiveParameter: number;\n}\n\nexport interface SignatureHelpResult extends IDisposable {\n\tvalue: SignatureHelp;\n}\n\nexport enum SignatureHelpTriggerKind {\n\tInvoke = 1,\n\tTriggerCharacter = 2,\n\tContentChange = 3,\n}\n\nexport interface SignatureHelpContext {\n\treadonly triggerKind: SignatureHelpTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly isRetrigger: boolean;\n\treadonly activeSignatureHelp?: SignatureHelp;\n}\n\n/**\n * The signature help provider interface defines the contract between extensions and\n * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n */\nexport interface SignatureHelpProvider {\n\n\treadonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n\treadonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n\n\t/**\n\t * Provide help for the signature at the given position and document.\n\t */\n\tprovideSignatureHelp(model: model.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n}\n\n/**\n * A document highlight kind.\n */\nexport enum DocumentHighlightKind {\n\t/**\n\t * A textual occurrence.\n\t */\n\tText,\n\t/**\n\t * Read-access of a symbol, like reading a variable.\n\t */\n\tRead,\n\t/**\n\t * Write-access of a symbol, like writing to a variable.\n\t */\n\tWrite\n}\n/**\n * A document highlight is a range inside a text document which deserves\n * special attention. Usually a document highlight is visualized by changing\n * the background color of its range.\n */\nexport interface DocumentHighlight {\n\t/**\n\t * The range this highlight applies to.\n\t */\n\trange: IRange;\n\t/**\n\t * The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n\t */\n\tkind?: DocumentHighlightKind;\n}\n\n/**\n * Represents a set of document highlights for a specific URI.\n */\nexport interface MultiDocumentHighlight {\n\t/**\n\t * The URI of the document that the highlights belong to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The set of highlights for the document.\n\t */\n\thighlights: DocumentHighlight[];\n}\n\n/**\n * The document highlight provider interface defines the contract between extensions and\n * the word-highlight-feature.\n */\nexport interface DocumentHighlightProvider {\n\t/**\n\t * Provide a set of document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t */\n\tprovideDocumentHighlights(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n}\n\n/**\n * A provider that can provide document highlights across multiple documents.\n */\nexport interface MultiDocumentHighlightProvider {\n\treadonly selector: LanguageSelector;\n\n\t/**\n\t * Provide a Map of URI --> document highlights, like all occurrences of a variable or\n\t * all exit-points of a function.\n\t *\n\t * Used in cases such as split view, notebooks, etc. where there can be multiple documents\n\t * with shared symbols.\n\t *\n\t * @param primaryModel The primary text model.\n\t * @param position The position at which to provide document highlights.\n\t * @param otherModels The other text models to search for document highlights.\n\t * @param token A cancellation token.\n\t * @returns A map of URI to document highlights.\n\t */\n\tprovideMultiDocumentHighlights(primaryModel: model.ITextModel, position: Position, otherModels: model.ITextModel[], token: CancellationToken): ProviderResult<Map<URI, DocumentHighlight[]>>;\n}\n\n/**\n * The linked editing range provider interface defines the contract between extensions and\n * the linked editing feature.\n */\nexport interface LinkedEditingRangeProvider {\n\n\t/**\n\t * Provide a list of ranges that can be edited together.\n\t */\n\tprovideLinkedEditingRanges(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n}\n\n/**\n * Represents a list of ranges that can be edited together along with a word pattern to describe valid contents.\n */\nexport interface LinkedEditingRanges {\n\t/**\n\t * A list of ranges that can be edited together. The ranges must have\n\t * identical length and text content. The ranges cannot overlap\n\t */\n\tranges: IRange[];\n\n\t/**\n\t * An optional word pattern that describes valid contents for the given ranges.\n\t * If no pattern is provided, the language configuration's word pattern will be used.\n\t */\n\twordPattern?: RegExp;\n}\n\n/**\n * Value-object that contains additional information when\n * requesting references.\n */\nexport interface ReferenceContext {\n\t/**\n\t * Include the declaration of the current symbol.\n\t */\n\tincludeDeclaration: boolean;\n}\n/**\n * The reference provider interface defines the contract between extensions and\n * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n */\nexport interface ReferenceProvider {\n\t/**\n\t * Provide a set of project-wide references for the given position and document.\n\t */\n\tprovideReferences(model: model.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n}\n\n/**\n * Represents a location inside a resource, such as a line\n * inside a text file.\n */\nexport interface Location {\n\t/**\n\t * The resource identifier of this location.\n\t */\n\turi: URI;\n\t/**\n\t * The document range of this locations.\n\t */\n\trange: IRange;\n}\n\nexport interface LocationLink {\n\t/**\n\t * A range to select where this link originates from.\n\t */\n\toriginSelectionRange?: IRange;\n\n\t/**\n\t * The target uri this link points to.\n\t */\n\turi: URI;\n\n\t/**\n\t * The full range this link points to.\n\t */\n\trange: IRange;\n\n\t/**\n\t * A range to select this link points to. Must be contained\n\t * in `LocationLink.range`.\n\t */\n\ttargetSelectionRange?: IRange;\n}\n\n/**\n * @internal\n */\nexport function isLocationLink(thing: any): thing is LocationLink {\n\treturn thing\n\t\t&& URI.isUri((thing as LocationLink).uri)\n\t\t&& Range.isIRange((thing as LocationLink).range)\n\t\t&& (Range.isIRange((thing as LocationLink).originSelectionRange) || Range.isIRange((thing as LocationLink).targetSelectionRange));\n}\n\n\nexport type Definition = Location | Location[] | LocationLink[];\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DefinitionProvider {\n\t/**\n\t * Provide the definition of the symbol at the given position and document.\n\t */\n\tprovideDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The definition provider interface defines the contract between extensions and\n * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n * and peek definition features.\n */\nexport interface DeclarationProvider {\n\t/**\n\t * Provide the declaration of the symbol at the given position and document.\n\t */\n\tprovideDeclaration(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The implementation provider interface defines the contract between extensions and\n * the go to implementation feature.\n */\nexport interface ImplementationProvider {\n\t/**\n\t * Provide the implementation of the symbol at the given position and document.\n\t */\n\tprovideImplementation(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * The type definition provider interface defines the contract between extensions and\n * the go to type definition feature.\n */\nexport interface TypeDefinitionProvider {\n\t/**\n\t * Provide the type definition of the symbol at the given position and document.\n\t */\n\tprovideTypeDefinition(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n}\n\n/**\n * A symbol kind.\n */\nexport const enum SymbolKind {\n\tFile = 0,\n\tModule = 1,\n\tNamespace = 2,\n\tPackage = 3,\n\tClass = 4,\n\tMethod = 5,\n\tProperty = 6,\n\tField = 7,\n\tConstructor = 8,\n\tEnum = 9,\n\tInterface = 10,\n\tFunction = 11,\n\tVariable = 12,\n\tConstant = 13,\n\tString = 14,\n\tNumber = 15,\n\tBoolean = 16,\n\tArray = 17,\n\tObject = 18,\n\tKey = 19,\n\tNull = 20,\n\tEnumMember = 21,\n\tStruct = 22,\n\tEvent = 23,\n\tOperator = 24,\n\tTypeParameter = 25\n}\n\n/**\n * @internal\n */\nexport const symbolKindNames: { [symbol: number]: string } = {\n\t[SymbolKind.Array]: localize('Array', \"array\"),\n\t[SymbolKind.Boolean]: localize('Boolean', \"boolean\"),\n\t[SymbolKind.Class]: localize('Class', \"class\"),\n\t[SymbolKind.Constant]: localize('Constant', \"constant\"),\n\t[SymbolKind.Constructor]: localize('Constructor', \"constructor\"),\n\t[SymbolKind.Enum]: localize('Enum', \"enumeration\"),\n\t[SymbolKind.EnumMember]: localize('EnumMember', \"enumeration member\"),\n\t[SymbolKind.Event]: localize('Event', \"event\"),\n\t[SymbolKind.Field]: localize('Field', \"field\"),\n\t[SymbolKind.File]: localize('File', \"file\"),\n\t[SymbolKind.Function]: localize('Function', \"function\"),\n\t[SymbolKind.Interface]: localize('Interface', \"interface\"),\n\t[SymbolKind.Key]: localize('Key', \"key\"),\n\t[SymbolKind.Method]: localize('Method', \"method\"),\n\t[SymbolKind.Module]: localize('Module', \"module\"),\n\t[SymbolKind.Namespace]: localize('Namespace', \"namespace\"),\n\t[SymbolKind.Null]: localize('Null', \"null\"),\n\t[SymbolKind.Number]: localize('Number', \"number\"),\n\t[SymbolKind.Object]: localize('Object', \"object\"),\n\t[SymbolKind.Operator]: localize('Operator', \"operator\"),\n\t[SymbolKind.Package]: localize('Package', \"package\"),\n\t[SymbolKind.Property]: localize('Property', \"property\"),\n\t[SymbolKind.String]: localize('String', \"string\"),\n\t[SymbolKind.Struct]: localize('Struct', \"struct\"),\n\t[SymbolKind.TypeParameter]: localize('TypeParameter', \"type parameter\"),\n\t[SymbolKind.Variable]: localize('Variable', \"variable\"),\n};\n\n/**\n * @internal\n */\nexport function getAriaLabelForSymbol(symbolName: string, kind: SymbolKind): string {\n\treturn localize('symbolAriaLabel', '{0} ({1})', symbolName, symbolKindNames[kind]);\n}\n\nexport const enum SymbolTag {\n\tDeprecated = 1,\n}\n\n/**\n * @internal\n */\nexport namespace SymbolKinds {\n\n\tconst byKind = new Map<SymbolKind, ThemeIcon>();\n\tbyKind.set(SymbolKind.File, Codicon.symbolFile);\n\tbyKind.set(SymbolKind.Module, Codicon.symbolModule);\n\tbyKind.set(SymbolKind.Namespace, Codicon.symbolNamespace);\n\tbyKind.set(SymbolKind.Package, Codicon.symbolPackage);\n\tbyKind.set(SymbolKind.Class, Codicon.symbolClass);\n\tbyKind.set(SymbolKind.Method, Codicon.symbolMethod);\n\tbyKind.set(SymbolKind.Property, Codicon.symbolProperty);\n\tbyKind.set(SymbolKind.Field, Codicon.symbolField);\n\tbyKind.set(SymbolKind.Constructor, Codicon.symbolConstructor);\n\tbyKind.set(SymbolKind.Enum, Codicon.symbolEnum);\n\tbyKind.set(SymbolKind.Interface, Codicon.symbolInterface);\n\tbyKind.set(SymbolKind.Function, Codicon.symbolFunction);\n\tbyKind.set(SymbolKind.Variable, Codicon.symbolVariable);\n\tbyKind.set(SymbolKind.Constant, Codicon.symbolConstant);\n\tbyKind.set(SymbolKind.String, Codicon.symbolString);\n\tbyKind.set(SymbolKind.Number, Codicon.symbolNumber);\n\tbyKind.set(SymbolKind.Boolean, Codicon.symbolBoolean);\n\tbyKind.set(SymbolKind.Array, Codicon.symbolArray);\n\tbyKind.set(SymbolKind.Object, Codicon.symbolObject);\n\tbyKind.set(SymbolKind.Key, Codicon.symbolKey);\n\tbyKind.set(SymbolKind.Null, Codicon.symbolNull);\n\tbyKind.set(SymbolKind.EnumMember, Codicon.symbolEnumMember);\n\tbyKind.set(SymbolKind.Struct, Codicon.symbolStruct);\n\tbyKind.set(SymbolKind.Event, Codicon.symbolEvent);\n\tbyKind.set(SymbolKind.Operator, Codicon.symbolOperator);\n\tbyKind.set(SymbolKind.TypeParameter, Codicon.symbolTypeParameter);\n\t/**\n\t * @internal\n\t */\n\texport function toIcon(kind: SymbolKind): ThemeIcon {\n\t\tlet icon = byKind.get(kind);\n\t\tif (!icon) {\n\t\t\tconsole.info('No codicon found for SymbolKind ' + kind);\n\t\t\ticon = Codicon.symbolProperty;\n\t\t}\n\t\treturn icon;\n\t}\n\n\tconst byCompletionKind = new Map<SymbolKind, CompletionItemKind>();\n\tbyCompletionKind.set(SymbolKind.File, CompletionItemKind.File);\n\tbyCompletionKind.set(SymbolKind.Module, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Namespace, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Package, CompletionItemKind.Module);\n\tbyCompletionKind.set(SymbolKind.Class, CompletionItemKind.Class);\n\tbyCompletionKind.set(SymbolKind.Method, CompletionItemKind.Method);\n\tbyCompletionKind.set(SymbolKind.Property, CompletionItemKind.Property);\n\tbyCompletionKind.set(SymbolKind.Field, CompletionItemKind.Field);\n\tbyCompletionKind.set(SymbolKind.Constructor, CompletionItemKind.Constructor);\n\tbyCompletionKind.set(SymbolKind.Enum, CompletionItemKind.Enum);\n\tbyCompletionKind.set(SymbolKind.Interface, CompletionItemKind.Interface);\n\tbyCompletionKind.set(SymbolKind.Function, CompletionItemKind.Function);\n\tbyCompletionKind.set(SymbolKind.Variable, CompletionItemKind.Variable);\n\tbyCompletionKind.set(SymbolKind.Constant, CompletionItemKind.Constant);\n\tbyCompletionKind.set(SymbolKind.String, CompletionItemKind.Text);\n\tbyCompletionKind.set(SymbolKind.Number, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Boolean, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Array, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Object, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.Key, CompletionItemKind.Keyword);\n\tbyCompletionKind.set(SymbolKind.Null, CompletionItemKind.Value);\n\tbyCompletionKind.set(SymbolKind.EnumMember, CompletionItemKind.EnumMember);\n\tbyCompletionKind.set(SymbolKind.Struct, CompletionItemKind.Struct);\n\tbyCompletionKind.set(SymbolKind.Event, CompletionItemKind.Event);\n\tbyCompletionKind.set(SymbolKind.Operator, CompletionItemKind.Operator);\n\tbyCompletionKind.set(SymbolKind.TypeParameter, CompletionItemKind.TypeParameter);\n\t/**\n\t * @internal\n\t */\n\texport function toCompletionKind(kind: SymbolKind): CompletionItemKind {\n\t\tlet completionKind = byCompletionKind.get(kind);\n\t\tif (completionKind === undefined) {\n\t\t\tconsole.info('No completion kind found for SymbolKind ' + kind);\n\t\t\tcompletionKind = CompletionItemKind.File;\n\t\t}\n\t\treturn completionKind;\n\t}\n}\n\nexport interface DocumentSymbol {\n\tname: string;\n\tdetail: string;\n\tkind: SymbolKind;\n\ttags: ReadonlyArray<SymbolTag>;\n\tcontainerName?: string;\n\trange: IRange;\n\tselectionRange: IRange;\n\tchildren?: DocumentSymbol[];\n}\n\n/**\n * The document symbol provider interface defines the contract between extensions and\n * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.\n */\nexport interface DocumentSymbolProvider {\n\n\tdisplayName?: string;\n\n\t/**\n\t * Provide symbol information for the given document.\n\t */\n\tprovideDocumentSymbols(model: model.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n}\n\nexport interface TextEdit {\n\trange: IRange;\n\ttext: string;\n\teol?: model.EndOfLineSequence;\n}\n\n/** @internal */\nexport abstract class TextEdit {\n}\n\n/**\n * Interface used to format a model\n */\nexport interface FormattingOptions {\n\t/**\n\t * Size of a tab in spaces.\n\t */\n\ttabSize: number;\n\t/**\n\t * Prefer spaces over tabs.\n\t */\n\tinsertSpaces: boolean;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentFormattingEditProvider {\n\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a whole document.\n\t */\n\tprovideDocumentFormattingEdits(model: model.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface DocumentRangeFormattingEditProvider {\n\t/**\n\t * @internal\n\t */\n\treadonly extensionId?: ExtensionIdentifier;\n\n\treadonly displayName?: string;\n\n\t/**\n\t * Provide formatting edits for a range in a document.\n\t *\n\t * The given range is a hint and providers can decide to format a smaller\n\t * or larger range. Often this is done by adjusting the start and end\n\t * of the range to full syntax nodes.\n\t */\n\tprovideDocumentRangeFormattingEdits(model: model.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n\n\tprovideDocumentRangesFormattingEdits?(model: model.ITextModel, ranges: Range[], options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n/**\n * The document formatting provider interface defines the contract between extensions and\n * the formatting-feature.\n */\nexport interface OnTypeFormattingEditProvider {\n\n\tautoFormatTriggerCharacters: string[];\n\n\t/**\n\t * Provide formatting edits after a character has been typed.\n\t *\n\t * The given position and character should hint to the provider\n\t * what range the position to expand to, like find the matching `{`\n\t * when `}` has been entered.\n\t */\n\tprovideOnTypeFormattingEdits(model: model.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n}\n\n/**\n * @internal\n */\nexport interface IInplaceReplaceSupportResult {\n\tvalue: string;\n\trange: IRange;\n}\n\n/**\n * A link inside the editor.\n */\nexport interface ILink {\n\trange: IRange;\n\turl?: URI | string;\n\ttooltip?: string;\n}\n\nexport interface ILinksList {\n\tlinks: ILink[];\n\tdispose?(): void;\n}\n/**\n * A provider of links.\n */\nexport interface LinkProvider {\n\tprovideLinks(model: model.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n\tresolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n}\n\n/**\n * A color in RGBA format.\n */\nexport interface IColor {\n\n\t/**\n\t * The red component in the range [0-1].\n\t */\n\treadonly red: number;\n\n\t/**\n\t * The green component in the range [0-1].\n\t */\n\treadonly green: number;\n\n\t/**\n\t * The blue component in the range [0-1].\n\t */\n\treadonly blue: number;\n\n\t/**\n\t * The alpha component in the range [0-1].\n\t */\n\treadonly alpha: number;\n}\n\n/**\n * String representations for a color\n */\nexport interface IColorPresentation {\n\t/**\n\t * The label of this color presentation. It will be shown on the color\n\t * picker header. By default this is also the text that is inserted when selecting\n\t * this color presentation.\n\t */\n\tlabel: string;\n\t/**\n\t * An {@link TextEdit edit} which is applied to a document when selecting\n\t * this presentation for the color.\n\t */\n\ttextEdit?: TextEdit;\n\t/**\n\t * An optional array of additional {@link TextEdit text edits} that are applied when\n\t * selecting this color presentation.\n\t */\n\tadditionalTextEdits?: TextEdit[];\n}\n\n/**\n * A color range is a range in a text model which represents a color.\n */\nexport interface IColorInformation {\n\n\t/**\n\t * The range within the model.\n\t */\n\trange: IRange;\n\n\t/**\n\t * The color represented in this range.\n\t */\n\tcolor: IColor;\n}\n\n/**\n * A provider of colors for editor models.\n */\nexport interface DocumentColorProvider {\n\t/**\n\t * Provides the color ranges for a specific model.\n\t */\n\tprovideDocumentColors(model: model.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n\t/**\n\t * Provide the string representations for a color.\n\t */\n\tprovideColorPresentations(model: model.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n}\n\nexport interface SelectionRange {\n\trange: IRange;\n}\n\nexport interface SelectionRangeProvider {\n\t/**\n\t * Provide ranges that should be selected from the given position.\n\t */\n\tprovideSelectionRanges(model: model.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n}\n\nexport interface FoldingContext {\n}\n/**\n * A provider of folding ranges for editor models.\n */\nexport interface FoldingRangeProvider {\n\n\t/**\n\t * An optional event to signal that the folding ranges from this provider have changed.\n\t */\n\tonDidChange?: Event<this>;\n\n\t/**\n\t * Provides the folding ranges for a specific model.\n\t */\n\tprovideFoldingRanges(model: model.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n}\n\nexport interface FoldingRange {\n\n\t/**\n\t * The one-based start line of the range to fold. The folded area starts after the line's last character.\n\t */\n\tstart: number;\n\n\t/**\n\t * The one-based end line of the range to fold. The folded area ends with the line's last character.\n\t */\n\tend: number;\n\n\t/**\n\t * Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n\t * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n\t * like 'Fold all comments'. See\n\t * {@link FoldingRangeKind} for an enumeration of standardized kinds.\n\t */\n\tkind?: FoldingRangeKind;\n}\nexport class FoldingRangeKind {\n\t/**\n\t * Kind for folding range representing a comment. The value of the kind is 'comment'.\n\t */\n\tstatic readonly Comment = new FoldingRangeKind('comment');\n\t/**\n\t * Kind for folding range representing a import. The value of the kind is 'imports'.\n\t */\n\tstatic readonly Imports = new FoldingRangeKind('imports');\n\t/**\n\t * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n\t * The value of the kind is 'region'.\n\t */\n\tstatic readonly Region = new FoldingRangeKind('region');\n\n\t/**\n\t * Returns a {@link FoldingRangeKind} for the given value.\n\t *\n\t * @param value of the kind.\n\t */\n\tstatic fromValue(value: string) {\n\t\tswitch (value) {\n\t\t\tcase 'comment': return FoldingRangeKind.Comment;\n\t\t\tcase 'imports': return FoldingRangeKind.Imports;\n\t\t\tcase 'region': return FoldingRangeKind.Region;\n\t\t}\n\t\treturn new FoldingRangeKind(value);\n\t}\n\n\t/**\n\t * Creates a new {@link FoldingRangeKind}.\n\t *\n\t * @param value of the kind.\n\t */\n\tpublic constructor(public value: string) {\n\t}\n}\n\n\nexport interface WorkspaceEditMetadata {\n\tneedsConfirmation: boolean;\n\tlabel: string;\n\tdescription?: string;\n}\n\nexport interface WorkspaceFileEditOptions {\n\toverwrite?: boolean;\n\tignoreIfNotExists?: boolean;\n\tignoreIfExists?: boolean;\n\trecursive?: boolean;\n\tcopy?: boolean;\n\tfolder?: boolean;\n\tskipTrashBin?: boolean;\n\tmaxSize?: number;\n}\n\nexport interface IWorkspaceFileEdit {\n\toldResource?: URI;\n\tnewResource?: URI;\n\toptions?: WorkspaceFileEditOptions;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface IWorkspaceTextEdit {\n\tresource: URI;\n\ttextEdit: TextEdit & { insertAsSnippet?: boolean; keepWhitespace?: boolean };\n\tversionId: number | undefined;\n\tmetadata?: WorkspaceEditMetadata;\n}\n\nexport interface WorkspaceEdit {\n\tedits: Array<IWorkspaceTextEdit | IWorkspaceFileEdit | ICustomEdit>;\n}\n\nexport interface ICustomEdit {\n\treadonly resource: URI;\n\treadonly metadata?: WorkspaceEditMetadata;\n\tundo(): Promise<void> | void;\n\tredo(): Promise<void> | void;\n}\n\nexport interface Rejection {\n\trejectReason?: string;\n}\nexport interface RenameLocation {\n\trange: IRange;\n\ttext: string;\n}\n\nexport interface RenameProvider {\n\tprovideRenameEdits(model: model.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n\tresolveRenameLocation?(model: model.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n}\n\nexport enum NewSymbolNameTag {\n\tAIGenerated = 1\n}\n\nexport enum NewSymbolNameTriggerKind {\n\tInvoke = 0,\n\tAutomatic = 1,\n}\n\nexport interface NewSymbolName {\n\treadonly newSymbolName: string;\n\treadonly tags?: readonly NewSymbolNameTag[];\n}\n\nexport interface NewSymbolNamesProvider {\n\tsupportsAutomaticNewSymbolNamesTriggerKind?: Promise<boolean | undefined>;\n\tprovideNewSymbolNames(model: model.ITextModel, range: IRange, triggerKind: NewSymbolNameTriggerKind, token: CancellationToken): ProviderResult<NewSymbolName[]>;\n}\n\nexport interface Command {\n\tid: string;\n\ttitle: string;\n\ttooltip?: string;\n\targuments?: any[];\n}\n\n/**\n * @internal\n */\nexport namespace Command {\n\n\t/**\n\t * @internal\n\t */\n\texport function is(obj: any): obj is Command {\n\t\tif (!obj || typeof obj !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<Command>obj).id === 'string' &&\n\t\t\ttypeof (<Command>obj).title === 'string';\n\t}\n}\n\nexport interface CommentThreadRevealOptions {\n\tpreserveFocus: boolean;\n\tfocusReply: boolean;\n}\n\nexport interface CommentAuthorInformation {\n\tname: string;\n\ticonPath?: UriComponents;\n\n}\n\nexport interface PendingCommentThread {\n\trange: IRange | undefined;\n\turi: URI;\n\tuniqueOwner: string;\n\tisReply: boolean;\n\tcomment: PendingComment;\n}\n\nexport interface PendingComment {\n\tbody: string;\n\tcursor: IPosition;\n}\n\nexport interface CodeLens {\n\trange: IRange;\n\tid?: string;\n\tcommand?: Command;\n}\n\nexport interface CodeLensList {\n\treadonly lenses: readonly CodeLens[];\n\tdispose?(): void;\n}\n\nexport interface CodeLensProvider {\n\tonDidChange?: Event<this>;\n\tprovideCodeLenses(model: model.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n\tresolveCodeLens?(model: model.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n}\n\n\nexport enum InlayHintKind {\n\tType = 1,\n\tParameter = 2,\n}\n\nexport interface InlayHintLabelPart {\n\tlabel: string;\n\ttooltip?: string | IMarkdownString;\n\t// collapsible?: boolean;\n\tcommand?: Command;\n\tlocation?: Location;\n}\n\nexport interface InlayHint {\n\tlabel: string | InlayHintLabelPart[];\n\ttooltip?: string | IMarkdownString;\n\ttextEdits?: TextEdit[];\n\tposition: IPosition;\n\tkind?: InlayHintKind;\n\tpaddingLeft?: boolean;\n\tpaddingRight?: boolean;\n}\n\nexport interface InlayHintList {\n\thints: InlayHint[];\n\tdispose(): void;\n}\n\nexport interface InlayHintsProvider {\n\tdisplayName?: string;\n\tonDidChangeInlayHints?: Event<void>;\n\tprovideInlayHints(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlayHintList>;\n\tresolveInlayHint?(hint: InlayHint, token: CancellationToken): ProviderResult<InlayHint>;\n}\n\nexport interface SemanticTokensLegend {\n\treadonly tokenTypes: string[];\n\treadonly tokenModifiers: string[];\n}\n\nexport interface SemanticTokens {\n\treadonly resultId?: string;\n\treadonly data: Uint32Array;\n}\n\nexport interface SemanticTokensEdit {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly data?: Uint32Array;\n}\n\nexport interface SemanticTokensEdits {\n\treadonly resultId?: string;\n\treadonly edits: SemanticTokensEdit[];\n}\n\nexport interface DocumentSemanticTokensProvider {\n\tonDidChange?: Event<void>;\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentSemanticTokens(model: model.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n\treleaseDocumentSemanticTokens(resultId: string | undefined): void;\n}\n\nexport interface DocumentRangeSemanticTokensProvider {\n\tgetLegend(): SemanticTokensLegend;\n\tprovideDocumentRangeSemanticTokens(model: model.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationSupportChangedEvent {\n\tchangedLanguages: string[];\n\tchangedColorMap: boolean;\n}\n\n/**\n * @internal\n */\nexport interface ILazyTokenizationSupport<TSupport> {\n\tget tokenizationSupport(): Promise<TSupport | null>;\n}\n\n/**\n * @internal\n */\nexport class LazyTokenizationSupport<TSupport = ITokenizationSupport> implements IDisposable, ILazyTokenizationSupport<TSupport> {\n\tprivate _tokenizationSupport: Promise<TSupport & IDisposable | null> | null = null;\n\n\tconstructor(private readonly createSupport: () => Promise<TSupport & IDisposable | null>) {\n\t}\n\n\tdispose(): void {\n\t\tif (this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport.then((support) => {\n\t\t\t\tif (support) {\n\t\t\t\t\tsupport.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tget tokenizationSupport(): Promise<TSupport | null> {\n\t\tif (!this._tokenizationSupport) {\n\t\t\tthis._tokenizationSupport = this.createSupport();\n\t\t}\n\t\treturn this._tokenizationSupport;\n\t}\n}\n\n/**\n * @internal\n */\nexport interface ITokenizationRegistry<TSupport> {\n\n\t/**\n\t * An event triggered when:\n\t *  - a tokenization support is registered, unregistered or changed.\n\t *  - the color map is changed.\n\t */\n\tonDidChange: Event<ITokenizationSupportChangedEvent>;\n\n\t/**\n\t * Fire a change event for a language.\n\t * This is useful for languages that embed other languages.\n\t */\n\thandleChange(languageIds: string[]): void;\n\n\t/**\n\t * Register a tokenization support.\n\t */\n\tregister(languageId: string, support: TSupport): IDisposable;\n\n\t/**\n\t * Register a tokenization support factory.\n\t */\n\tregisterFactory(languageId: string, factory: ILazyTokenizationSupport<TSupport>): IDisposable;\n\n\t/**\n\t * Get or create the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tgetOrCreate(languageId: string): Promise<TSupport | null>;\n\n\t/**\n\t * Get the tokenization support for a language.\n\t * Returns `null` if not found.\n\t */\n\tget(languageId: string): TSupport | null;\n\n\t/**\n\t * Returns false if a factory is still pending.\n\t */\n\tisResolved(languageId: string): boolean;\n\n\t/**\n\t * Set the new color map that all tokens will use in their ColorId binary encoded bits for foreground and background.\n\t */\n\tsetColorMap(colorMap: Color[]): void;\n\n\tgetColorMap(): Color[] | null;\n\n\tgetDefaultBackground(): Color | null;\n}\n\n/**\n * @internal\n */\nexport const TokenizationRegistry: ITokenizationRegistry<ITokenizationSupport> = new TokenizationRegistryImpl();\n\n/**\n * @internal\n */\nexport type DropYieldTo = { readonly kind: HierarchicalKind } | { readonly mimeType: string };\n\n/**\n * @internal\n */\nexport interface DocumentDropEdit {\n\treadonly title: string;\n\treadonly kind: HierarchicalKind | undefined;\n\treadonly handledMimeType?: string;\n\treadonly yieldTo?: readonly DropYieldTo[];\n\tinsertText: string | { readonly snippet: string };\n\tadditionalEdit?: WorkspaceEdit;\n}\n\n/**\n * @internal\n */\nexport interface DocumentDropEditsSession {\n\tedits: readonly DocumentDropEdit[];\n\tdispose(): void;\n}\n\n/**\n * @internal\n */\nexport interface DocumentDropEditProvider {\n\treadonly id?: string;\n\treadonly dropMimeTypes?: readonly string[];\n\n\tprovideDocumentDropEdits(model: model.ITextModel, position: IPosition, dataTransfer: IReadonlyVSDataTransfer, token: CancellationToken): ProviderResult<DocumentDropEditsSession>;\n}\n"]}