{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/multiDiffEditor/multiDiffEditorViewModel.ts","vs/editor/browser/widget/multiDiffEditor/multiDiffEditorViewModel.ts"],"names":[],"mappings":"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","file":"multiDiffEditorViewModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, ITransaction, constObservable, derived, derivedObservableWithWritableCache, mapObservableArrayCached, observableFromValueWithChangeEvent, observableValue } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IDiffEditorViewModel } from '../../../common/editorCommon.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { DiffEditorOptions } from '../diffEditor/diffEditorOptions.js';\nimport { DiffEditorViewModel } from '../diffEditor/diffEditorViewModel.js';\nimport { RefCounted } from '../diffEditor/utils.js';\nimport { IDocumentDiffItem, IMultiDiffEditorModel } from './model.js';\n\nexport class MultiDiffEditorViewModel extends Disposable {\n\tprivate readonly _documents: IObservable<readonly RefCounted<IDocumentDiffItem>[] | 'loading'>;\n\n\tprivate readonly _documentsArr;\n\n\tpublic readonly isLoading;\n\n\tpublic readonly items: IObservable<readonly DocumentDiffItemViewModel[]>;\n\n\tpublic readonly focusedDiffItem;\n\tpublic readonly activeDiffItem;\n\n\tpublic get contextKeys(): Record<string, ContextKeyValue> | undefined {\n\t\treturn this.model.contextKeys;\n\t}\n\n\tconstructor(\n\t\tpublic readonly model: IMultiDiffEditorModel,\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._documents = observableFromValueWithChangeEvent(this.model, this.model.documents);\n\t\tthis._documentsArr = derived(this, reader => {\n\t\t\tconst result = this._documents.read(reader);\n\t\t\tif (result === 'loading') { return []; }\n\t\t\treturn result;\n\t\t});\n\t\tthis.isLoading = derived(this, reader => this._documents.read(reader) === 'loading');\n\t\tthis.items = mapObservableArrayCached(\n\t\t\tthis,\n\t\t\tthis._documentsArr,\n\t\t\t(d, store) => store.add(this._instantiationService.createInstance(DocumentDiffItemViewModel, d, this))\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\t\tthis.focusedDiffItem = derived(this, reader => this.items.read(reader).find(i => i.isFocused.read(reader)));\n\t\tthis.activeDiffItem = derivedObservableWithWritableCache<DocumentDiffItemViewModel | undefined>(this,\n\t\t\t(reader, lastValue) => this.focusedDiffItem.read(reader) ?? (lastValue && this.items.read(reader).indexOf(lastValue) !== -1) ? lastValue : undefined\n\t\t);\n\t}\n}\n\nexport class DocumentDiffItemViewModel extends Disposable {\n\t/**\n\t * The diff editor view model keeps its inner objects alive.\n\t*/\n\tpublic readonly diffEditorViewModelRef: RefCounted<IDiffEditorViewModel>;\n\tpublic readonly collapsed = observableValue<boolean>(this, false);\n\n\tpublic readonly lastTemplateData = observableValue<{ contentHeight: number; selections: Selection[] | undefined }>(\n\t\tthis,\n\t\t{ contentHeight: 500, selections: undefined, }\n\t);\n\n\tpublic get originalUri(): URI | undefined { return this.documentDiffItem.original?.uri; }\n\tpublic get modifiedUri(): URI | undefined { return this.documentDiffItem.modified?.uri; }\n\n\tpublic readonly isActive: IObservable<boolean> = derived(this, reader => this._editorViewModel.activeDiffItem.read(reader) === this);\n\n\tprivate readonly _isFocusedSource = observableValue<IObservable<boolean>>(this, constObservable(false));\n\tpublic readonly isFocused = derived(this, reader => this._isFocusedSource.read(reader).read(reader));\n\n\tpublic setIsFocused(source: IObservable<boolean>, tx: ITransaction | undefined): void {\n\t\tthis._isFocusedSource.set(source, tx);\n\t}\n\n\tprivate readonly documentDiffItemRef: RefCounted<IDocumentDiffItem>;\n\tpublic get documentDiffItem(): IDocumentDiffItem {\n\t\treturn this.documentDiffItemRef.object;\n\t}\n\n\tpublic readonly isAlive = observableValue<boolean>(this, true);\n\n\tconstructor(\n\t\tdocumentDiffItem: RefCounted<IDocumentDiffItem>,\n\t\tprivate readonly _editorViewModel: MultiDiffEditorViewModel,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.isAlive.set(false, undefined);\n\t\t}));\n\n\t\tthis.documentDiffItemRef = this._register(documentDiffItem.createNewRef(this));\n\n\t\tfunction updateOptions(options: IDiffEditorOptions): IDiffEditorOptions {\n\t\t\treturn {\n\t\t\t\t...options,\n\t\t\t\thideUnchangedRegions: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst options = this._instantiationService.createInstance(DiffEditorOptions, updateOptions(this.documentDiffItem.options || {}));\n\t\tif (this.documentDiffItem.onOptionsDidChange) {\n\t\t\tthis._register(this.documentDiffItem.onOptionsDidChange(() => {\n\t\t\t\toptions.updateOptions(updateOptions(this.documentDiffItem.options || {}));\n\t\t\t}));\n\t\t}\n\n\t\tconst diffEditorViewModelStore = new DisposableStore();\n\t\tconst originalTextModel = this.documentDiffItem.original ?? diffEditorViewModelStore.add(this._modelService.createModel('', null));\n\t\tconst modifiedTextModel = this.documentDiffItem.modified ?? diffEditorViewModelStore.add(this._modelService.createModel('', null));\n\t\tdiffEditorViewModelStore.add(this.documentDiffItemRef.createNewRef(this));\n\n\t\tthis.diffEditorViewModelRef = this._register(RefCounted.createWithDisposable(\n\t\t\tthis._instantiationService.createInstance(DiffEditorViewModel, {\n\t\t\t\toriginal: originalTextModel,\n\t\t\t\tmodified: modifiedTextModel,\n\t\t\t}, options),\n\t\t\tdiffEditorViewModelStore,\n\t\t\tthis\n\t\t));\n\t}\n\n\tpublic getKey(): string {\n\t\treturn JSON.stringify([\n\t\t\tthis.originalUri?.toString(),\n\t\t\tthis.modifiedUri?.toString()\n\t\t]);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, ITransaction, constObservable, derived, derivedObservableWithWritableCache, mapObservableArrayCached, observableFromValueWithChangeEvent, observableValue } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { ContextKeyValue } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IDiffEditorOptions } from '../../../common/config/editorOptions.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IDiffEditorViewModel } from '../../../common/editorCommon.js';\nimport { IModelService } from '../../../common/services/model.js';\nimport { DiffEditorOptions } from '../diffEditor/diffEditorOptions.js';\nimport { DiffEditorViewModel } from '../diffEditor/diffEditorViewModel.js';\nimport { RefCounted } from '../diffEditor/utils.js';\nimport { IDocumentDiffItem, IMultiDiffEditorModel } from './model.js';\n\nexport class MultiDiffEditorViewModel extends Disposable {\n\tprivate readonly _documents: IObservable<readonly RefCounted<IDocumentDiffItem>[] | 'loading'>;\n\n\tprivate readonly _documentsArr;\n\n\tpublic readonly isLoading;\n\n\tpublic readonly items: IObservable<readonly DocumentDiffItemViewModel[]>;\n\n\tpublic readonly focusedDiffItem;\n\tpublic readonly activeDiffItem;\n\n\tpublic get contextKeys(): Record<string, ContextKeyValue> | undefined {\n\t\treturn this.model.contextKeys;\n\t}\n\n\tconstructor(\n\t\tpublic readonly model: IMultiDiffEditorModel,\n\t\tprivate readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._documents = observableFromValueWithChangeEvent(this.model, this.model.documents);\n\t\tthis._documentsArr = derived(this, reader => {\n\t\t\tconst result = this._documents.read(reader);\n\t\t\tif (result === 'loading') { return []; }\n\t\t\treturn result;\n\t\t});\n\t\tthis.isLoading = derived(this, reader => this._documents.read(reader) === 'loading');\n\t\tthis.items = mapObservableArrayCached(\n\t\t\tthis,\n\t\t\tthis._documentsArr,\n\t\t\t(d, store) => store.add(this._instantiationService.createInstance(DocumentDiffItemViewModel, d, this))\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\t\tthis.focusedDiffItem = derived(this, reader => this.items.read(reader).find(i => i.isFocused.read(reader)));\n\t\tthis.activeDiffItem = derivedObservableWithWritableCache<DocumentDiffItemViewModel | undefined>(this,\n\t\t\t(reader, lastValue) => this.focusedDiffItem.read(reader) ?? (lastValue && this.items.read(reader).indexOf(lastValue) !== -1) ? lastValue : undefined\n\t\t);\n\t}\n}\n\nexport class DocumentDiffItemViewModel extends Disposable {\n\t/**\n\t * The diff editor view model keeps its inner objects alive.\n\t*/\n\tpublic readonly diffEditorViewModelRef: RefCounted<IDiffEditorViewModel>;\n\tpublic readonly collapsed = observableValue<boolean>(this, false);\n\n\tpublic readonly lastTemplateData = observableValue<{ contentHeight: number; selections: Selection[] | undefined }>(\n\t\tthis,\n\t\t{ contentHeight: 500, selections: undefined, }\n\t);\n\n\tpublic get originalUri(): URI | undefined { return this.documentDiffItem.original?.uri; }\n\tpublic get modifiedUri(): URI | undefined { return this.documentDiffItem.modified?.uri; }\n\n\tpublic readonly isActive: IObservable<boolean> = derived(this, reader => this._editorViewModel.activeDiffItem.read(reader) === this);\n\n\tprivate readonly _isFocusedSource = observableValue<IObservable<boolean>>(this, constObservable(false));\n\tpublic readonly isFocused = derived(this, reader => this._isFocusedSource.read(reader).read(reader));\n\n\tpublic setIsFocused(source: IObservable<boolean>, tx: ITransaction | undefined): void {\n\t\tthis._isFocusedSource.set(source, tx);\n\t}\n\n\tprivate readonly documentDiffItemRef: RefCounted<IDocumentDiffItem>;\n\tpublic get documentDiffItem(): IDocumentDiffItem {\n\t\treturn this.documentDiffItemRef.object;\n\t}\n\n\tpublic readonly isAlive = observableValue<boolean>(this, true);\n\n\tconstructor(\n\t\tdocumentDiffItem: RefCounted<IDocumentDiffItem>,\n\t\tprivate readonly _editorViewModel: MultiDiffEditorViewModel,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.isAlive.set(false, undefined);\n\t\t}));\n\n\t\tthis.documentDiffItemRef = this._register(documentDiffItem.createNewRef(this));\n\n\t\tfunction updateOptions(options: IDiffEditorOptions): IDiffEditorOptions {\n\t\t\treturn {\n\t\t\t\t...options,\n\t\t\t\thideUnchangedRegions: {\n\t\t\t\t\tenabled: true,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tconst options = this._instantiationService.createInstance(DiffEditorOptions, updateOptions(this.documentDiffItem.options || {}));\n\t\tif (this.documentDiffItem.onOptionsDidChange) {\n\t\t\tthis._register(this.documentDiffItem.onOptionsDidChange(() => {\n\t\t\t\toptions.updateOptions(updateOptions(this.documentDiffItem.options || {}));\n\t\t\t}));\n\t\t}\n\n\t\tconst diffEditorViewModelStore = new DisposableStore();\n\t\tconst originalTextModel = this.documentDiffItem.original ?? diffEditorViewModelStore.add(this._modelService.createModel('', null));\n\t\tconst modifiedTextModel = this.documentDiffItem.modified ?? diffEditorViewModelStore.add(this._modelService.createModel('', null));\n\t\tdiffEditorViewModelStore.add(this.documentDiffItemRef.createNewRef(this));\n\n\t\tthis.diffEditorViewModelRef = this._register(RefCounted.createWithDisposable(\n\t\t\tthis._instantiationService.createInstance(DiffEditorViewModel, {\n\t\t\t\toriginal: originalTextModel,\n\t\t\t\tmodified: modifiedTextModel,\n\t\t\t}, options),\n\t\t\tdiffEditorViewModelStore,\n\t\t\tthis\n\t\t));\n\t}\n\n\tpublic getKey(): string {\n\t\treturn JSON.stringify([\n\t\t\tthis.originalUri?.toString(),\n\t\t\tthis.modifiedUri?.toString()\n\t\t]);\n\t}\n}\n"]}