{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/suggest/browser/suggestModel.ts","vs/editor/contrib/suggest/browser/suggestModel.ts"],"names":[],"mappings":"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","file":"suggestModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { CursorChangeReason, ICursorSelectionChangedEvent } from '../../../common/cursorEvents.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { CompletionContext, CompletionItemKind, CompletionItemProvider, CompletionTriggerKind } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionDurations, CompletionItem, CompletionOptions, getSnippetSuggestSupport, provideSuggestionItems, QuickSuggestionsOptions, SnippetSortOrder } from './suggest.js';\nimport { IWordAtPosition } from '../../../common/core/wordHelper.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { FuzzyScoreOptions } from '../../../../base/common/filters.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { InlineCompletionContextKeys } from '../../inlineCompletions/browser/controller/inlineCompletionContextKeys.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\n\nexport interface ICancelEvent {\n\treadonly retrigger: boolean;\n}\n\nexport interface ITriggerEvent {\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n\treadonly position: IPosition;\n}\n\nexport interface ISuggestEvent {\n\treadonly completionModel: CompletionModel;\n\treadonly isFrozen: boolean;\n\treadonly triggerOptions: SuggestTriggerOptions;\n}\n\nexport interface SuggestTriggerOptions {\n\treadonly auto: boolean;\n\treadonly shy?: boolean;\n\treadonly refilter?: boolean;\n\treadonly retrigger?: boolean;\n\treadonly triggerKind?: CompletionTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly clipboardText?: string;\n\tcompletionOptions?: Partial<CompletionOptions>;\n}\n\nexport class LineContext {\n\n\tstatic shouldAutoTrigger(editor: ICodeEditor): boolean {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tconst pos = editor.getPosition();\n\t\tmodel.tokenization.tokenizeIfCheap(pos.lineNumber);\n\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (!word) {\n\t\t\treturn false;\n\t\t}\n\t\tif (word.endColumn !== pos.column &&\n\t\t\tword.startColumn + 1 !== pos.column /* after typing a single character before a word */) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!isNaN(Number(word.word))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\treadonly lineNumber: number;\n\treadonly column: number;\n\treadonly leadingLineContent: string;\n\treadonly leadingWord: IWordAtPosition;\n\treadonly triggerOptions: SuggestTriggerOptions;\n\n\tconstructor(model: ITextModel, position: Position, triggerOptions: SuggestTriggerOptions) {\n\t\tthis.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\t\tthis.leadingWord = model.getWordUntilPosition(position);\n\t\tthis.lineNumber = position.lineNumber;\n\t\tthis.column = position.column;\n\t\tthis.triggerOptions = triggerOptions;\n\t}\n}\n\nexport const enum State {\n\tIdle = 0,\n\tManual = 1,\n\tAuto = 2\n}\n\nfunction canShowQuickSuggest(editor: ICodeEditor, contextKeyService: IContextKeyService, configurationService: IConfigurationService): boolean {\n\tif (!Boolean(contextKeyService.getContextKeyValue(InlineCompletionContextKeys.inlineSuggestionVisible.key))) {\n\t\t// Allow if there is no inline suggestion.\n\t\treturn true;\n\t}\n\tconst suppressSuggestions = contextKeyService.getContextKeyValue<boolean | undefined>(InlineCompletionContextKeys.suppressSuggestions.key);\n\tif (suppressSuggestions !== undefined) {\n\t\treturn !suppressSuggestions;\n\t}\n\treturn !editor.getOption(EditorOption.inlineSuggest).suppressSuggestions;\n}\n\nfunction canShowSuggestOnTriggerCharacters(editor: ICodeEditor, contextKeyService: IContextKeyService, configurationService: IConfigurationService): boolean {\n\tif (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n\t\t// Allow if there is no inline suggestion.\n\t\treturn true;\n\t}\n\tconst suppressSuggestions = contextKeyService.getContextKeyValue<boolean | undefined>(InlineCompletionContextKeys.suppressSuggestions.key);\n\tif (suppressSuggestions !== undefined) {\n\t\treturn !suppressSuggestions;\n\t}\n\treturn !editor.getOption(EditorOption.inlineSuggest).suppressSuggestions;\n}\n\nexport class SuggestModel implements IDisposable {\n\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _triggerCharacterListener = new DisposableStore();\n\tprivate readonly _triggerQuickSuggest = new TimeoutTimer();\n\n\tprivate _triggerState: SuggestTriggerOptions | undefined = undefined;\n\tprivate _requestToken?: CancellationTokenSource;\n\tprivate _context?: LineContext;\n\tprivate _currentSelection: Selection;\n\n\tprivate _completionModel: CompletionModel | undefined;\n\tprivate readonly _completionDisposables = new DisposableStore();\n\tprivate readonly _onDidCancel = new Emitter<ICancelEvent>();\n\tprivate readonly _onDidTrigger = new Emitter<ITriggerEvent>();\n\tprivate readonly _onDidSuggest = new Emitter<ISuggestEvent>();\n\n\treadonly onDidCancel: Event<ICancelEvent> = this._onDidCancel.event;\n\treadonly onDidTrigger: Event<ITriggerEvent> = this._onDidTrigger.event;\n\treadonly onDidSuggest: Event<ISuggestEvent> = this._onDidSuggest.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IEnvironmentService private readonly _envService: IEnvironmentService,\n\t) {\n\t\tthis._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n\n\t\t// wire up various listeners\n\t\tthis._toDispose.add(this._editor.onDidChangeModel(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t}));\n\t\tthis._toDispose.add(this._languageFeaturesService.completionProvider.onDidChange(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis._updateActiveSuggestSession();\n\t\t}));\n\n\t\tlet editorIsComposing = false;\n\t\tthis._toDispose.add(this._editor.onDidCompositionStart(() => {\n\t\t\teditorIsComposing = true;\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidCompositionEnd(() => {\n\t\t\teditorIsComposing = false;\n\t\t\tthis._onCompositionEnd();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n\t\t\t// only trigger suggest when the editor isn't composing a character\n\t\t\tif (!editorIsComposing) {\n\t\t\t\tthis._onCursorChange(e);\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeModelContent(() => {\n\t\t\t// only filter completions when the editor isn't composing a character\n\t\t\t// allow-any-unicode-next-line\n\t\t\t// e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n\t\t\tif (!editorIsComposing && this._triggerState !== undefined) {\n\t\t\t\tthis._refilterCompletionItems();\n\t\t\t}\n\t\t}));\n\n\t\tthis._updateTriggerCharacters();\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._triggerCharacterListener);\n\t\tdispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n\t\tthis._toDispose.dispose();\n\t\tthis._completionDisposables.dispose();\n\t\tthis.cancel();\n\t}\n\n\tprivate _updateTriggerCharacters(): void {\n\t\tthis._triggerCharacterListener.clear();\n\n\t\tif (this._editor.getOption(EditorOption.readOnly)\n\t\t\t|| !this._editor.hasModel()\n\t\t\t|| !this._editor.getOption(EditorOption.suggestOnTriggerCharacters)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportsByTriggerCharacter = new Map<string, Set<CompletionItemProvider>>();\n\t\tfor (const support of this._languageFeaturesService.completionProvider.all(this._editor.getModel())) {\n\t\t\tfor (const ch of support.triggerCharacters || []) {\n\t\t\t\tlet set = supportsByTriggerCharacter.get(ch);\n\t\t\t\tif (!set) {\n\t\t\t\t\tset = new Set();\n\t\t\t\t\tconst suggestSupport = getSnippetSuggestSupport();\n\t\t\t\t\tif (suggestSupport) {\n\t\t\t\t\t\tset.add(suggestSupport);\n\t\t\t\t\t}\n\t\t\t\t\tsupportsByTriggerCharacter.set(ch, set);\n\t\t\t\t}\n\t\t\t\tset.add(support);\n\t\t\t}\n\t\t}\n\n\n\t\tconst checkTriggerCharacter = (text?: string) => {\n\n\t\t\tif (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (LineContext.shouldAutoTrigger(this._editor)) {\n\t\t\t\t// don't trigger by trigger characters when this is a case for quick suggest\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!text) {\n\t\t\t\t// came here from the compositionEnd-event\n\t\t\t\tconst position = this._editor.getPosition()!;\n\t\t\t\tconst model = this._editor.getModel()!;\n\t\t\t\ttext = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\t\t\t}\n\n\t\t\tlet lastChar = '';\n\t\t\tif (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n\t\t\t\tif (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n\t\t\t\t\tlastChar = text.substr(text.length - 2);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastChar = text.charAt(text.length - 1);\n\t\t\t}\n\n\t\t\tconst supports = supportsByTriggerCharacter.get(lastChar);\n\t\t\tif (supports) {\n\n\t\t\t\t// keep existing items that where not computed by the\n\t\t\t\t// supports/providers that want to trigger now\n\t\t\t\tconst providerItemsToReuse = new Map<CompletionItemProvider, CompletionItem[]>();\n\t\t\t\tif (this._completionModel) {\n\t\t\t\t\tfor (const [provider, items] of this._completionModel.getItemsByProvider()) {\n\t\t\t\t\t\tif (!supports.has(provider)) {\n\t\t\t\t\t\t\tproviderItemsToReuse.set(provider, items);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.trigger({\n\t\t\t\t\tauto: true,\n\t\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\t\ttriggerCharacter: lastChar,\n\t\t\t\t\tretrigger: Boolean(this._completionModel),\n\t\t\t\t\tclipboardText: this._completionModel?.clipboardText,\n\t\t\t\t\tcompletionOptions: { providerFilter: supports, providerItemsToReuse }\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n\t\tthis._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n\t}\n\n\t// --- trigger/retrigger/cancel suggest\n\n\tget state(): State {\n\t\tif (!this._triggerState) {\n\t\t\treturn State.Idle;\n\t\t} else if (!this._triggerState.auto) {\n\t\t\treturn State.Manual;\n\t\t} else {\n\t\t\treturn State.Auto;\n\t\t}\n\t}\n\n\tcancel(retrigger: boolean = false): void {\n\t\tif (this._triggerState !== undefined) {\n\t\t\tthis._triggerQuickSuggest.cancel();\n\t\t\tthis._requestToken?.cancel();\n\t\t\tthis._requestToken = undefined;\n\t\t\tthis._triggerState = undefined;\n\t\t\tthis._completionModel = undefined;\n\t\t\tthis._context = undefined;\n\t\t\tthis._onDidCancel.fire({ retrigger });\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._completionDisposables.clear();\n\t}\n\n\tprivate _updateActiveSuggestSession(): void {\n\t\tif (this._triggerState !== undefined) {\n\t\t\tif (!this._editor.hasModel() || !this._languageFeaturesService.completionProvider.has(this._editor.getModel())) {\n\t\t\t\tthis.cancel();\n\t\t\t} else {\n\t\t\t\tthis.trigger({ auto: this._triggerState.auto, retrigger: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onCursorChange(e: ICursorSelectionChangedEvent): void {\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevSelection = this._currentSelection;\n\t\tthis._currentSelection = this._editor.getSelection();\n\n\t\tif (!e.selection.isEmpty()\n\t\t\t|| (e.reason !== CursorChangeReason.NotSet && e.reason !== CursorChangeReason.Explicit)\n\t\t\t|| (e.source !== 'keyboard' && e.source !== 'deleteLeft')\n\t\t) {\n\t\t\t// Early exit if nothing needs to be done!\n\t\t\t// Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\n\t\tif (this._triggerState === undefined && e.reason === CursorChangeReason.NotSet) {\n\t\t\tif (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n\t\t\t\t// cursor did move RIGHT due to typing -> trigger quick suggest\n\t\t\t\tthis._doTriggerQuickSuggest();\n\t\t\t}\n\n\t\t} else if (this._triggerState !== undefined && e.reason === CursorChangeReason.Explicit) {\n\t\t\t// suggest is active and something like cursor keys are used to move\n\t\t\t// the cursor. this means we can refilter at the new position\n\t\t\tthis._refilterCompletionItems();\n\t\t}\n\t}\n\n\tprivate _onCompositionEnd(): void {\n\t\t// trigger or refilter when composition ends\n\t\tif (this._triggerState === undefined) {\n\t\t\tthis._doTriggerQuickSuggest();\n\t\t} else {\n\t\t\tthis._refilterCompletionItems();\n\t\t}\n\t}\n\n\tprivate _doTriggerQuickSuggest(): void {\n\n\t\tif (QuickSuggestionsOptions.isAllOff(this._editor.getOption(EditorOption.quickSuggestions))) {\n\t\t\t// not enabled\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._editor.getOption(EditorOption.suggest).snippetsPreventQuickSuggestions && SnippetController2.get(this._editor)?.isInSnippet()) {\n\t\t\t// no quick suggestion when in snippet mode\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cancel();\n\n\t\tthis._triggerQuickSuggest.cancelAndSet(() => {\n\t\t\tif (this._triggerState !== undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!LineContext.shouldAutoTrigger(this._editor)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst pos = this._editor.getPosition();\n\t\t\t// validate enabled now\n\t\t\tconst config = this._editor.getOption(EditorOption.quickSuggestions);\n\t\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!QuickSuggestionsOptions.isAllOn(config)) {\n\t\t\t\t// Check the type of the token that triggered this\n\t\t\t\tmodel.tokenization.tokenizeIfCheap(pos.lineNumber);\n\t\t\t\tconst lineTokens = model.tokenization.getLineTokens(pos.lineNumber);\n\t\t\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n\t\t\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'on') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n\t\t\t\t// do not trigger quick suggestions if inline suggestions are shown\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._languageFeaturesService.completionProvider.has(model)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// we made it till here -> trigger now\n\t\t\tthis.trigger({ auto: true });\n\n\t\t}, this._editor.getOption(EditorOption.quickSuggestionsDelay));\n\t}\n\n\tprivate _refilterCompletionItems(): void {\n\t\tassertType(this._editor.hasModel());\n\t\tassertType(this._triggerState !== undefined);\n\n\t\tconst model = this._editor.getModel();\n\t\tconst position = this._editor.getPosition();\n\t\tconst ctx = new LineContext(model, position, { ...this._triggerState, refilter: true });\n\t\tthis._onNewContext(ctx);\n\t}\n\n\ttrigger(options: SuggestTriggerOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst ctx = new LineContext(model, this._editor.getPosition(), options);\n\n\t\t// Cancel previous requests, change state & update UI\n\t\tthis.cancel(options.retrigger);\n\t\tthis._triggerState = options;\n\t\tthis._onDidTrigger.fire({ auto: options.auto, shy: options.shy ?? false, position: this._editor.getPosition() });\n\n\t\t// Capture context when request was sent\n\t\tthis._context = ctx;\n\n\t\t// Build context for request\n\t\tlet suggestCtx: CompletionContext = { triggerKind: options.triggerKind ?? CompletionTriggerKind.Invoke };\n\t\tif (options.triggerCharacter) {\n\t\t\tsuggestCtx = {\n\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\ttriggerCharacter: options.triggerCharacter\n\t\t\t};\n\t\t}\n\n\t\tthis._requestToken = new CancellationTokenSource();\n\n\t\t// kind filter and snippet sort rules\n\t\tconst snippetSuggestions = this._editor.getOption(EditorOption.snippetSuggestions);\n\t\tlet snippetSortOrder = SnippetSortOrder.Inline;\n\t\tswitch (snippetSuggestions) {\n\t\t\tcase 'top':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Top;\n\t\t\t\tbreak;\n\t\t\t// \t↓ that's the default anyways...\n\t\t\t// case 'inline':\n\t\t\t// \tsnippetSortOrder = SnippetSortOrder.Inline;\n\t\t\t// \tbreak;\n\t\t\tcase 'bottom':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Bottom;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst { itemKind: itemKindFilter, showDeprecated } = SuggestModel.createSuggestFilter(this._editor);\n\t\tconst completionOptions = new CompletionOptions(snippetSortOrder, options.completionOptions?.kindFilter ?? itemKindFilter, options.completionOptions?.providerFilter, options.completionOptions?.providerItemsToReuse, showDeprecated);\n\t\tconst wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n\n\t\tconst completions = provideSuggestionItems(\n\t\t\tthis._languageFeaturesService.completionProvider,\n\t\t\tmodel,\n\t\t\tthis._editor.getPosition(),\n\t\t\tcompletionOptions,\n\t\t\tsuggestCtx,\n\t\t\tthis._requestToken.token\n\t\t);\n\n\t\tPromise.all([completions, wordDistance]).then(async ([completions, wordDistance]) => {\n\n\t\t\tthis._requestToken?.dispose();\n\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\tcompletions.disposable.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet clipboardText = options?.clipboardText;\n\t\t\tif (!clipboardText && completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tif (this._triggerState === undefined) {\n\t\t\t\tcompletions.disposable.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = this._editor.getModel();\n\t\t\t// const items = completions.items;\n\n\t\t\t// if (existing) {\n\t\t\t// \tconst cmpFn = getSuggestionComparator(snippetSortOrder);\n\t\t\t// \titems = items.concat(existing.items).sort(cmpFn);\n\t\t\t// }\n\n\t\t\tconst ctx = new LineContext(model, this._editor.getPosition(), options);\n\t\t\tconst fuzzySearchOptions = {\n\t\t\t\t...FuzzyScoreOptions.default,\n\t\t\t\tfirstMatchCanBeWeak: !this._editor.getOption(EditorOption.suggest).matchOnWordStartOnly\n\t\t\t};\n\t\t\tthis._completionModel = new CompletionModel(completions.items, this._context!.column, {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context!.column\n\t\t\t},\n\t\t\t\twordDistance,\n\t\t\t\tthis._editor.getOption(EditorOption.suggest),\n\t\t\t\tthis._editor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\tfuzzySearchOptions,\n\t\t\t\tclipboardText\n\t\t\t);\n\n\t\t\t// store containers so that they can be disposed later\n\t\t\tthis._completionDisposables.add(completions.disposable);\n\n\t\t\tthis._onNewContext(ctx);\n\n\t\t\t// finally report telemetry about durations\n\t\t\tthis._reportDurationsTelemetry(completions.durations);\n\n\t\t\t// report invalid completions by source\n\t\t\tif (!this._envService.isBuilt || this._envService.isExtensionDevelopment) {\n\t\t\t\tfor (const item of completions.items) {\n\t\t\t\t\tif (item.isInvalid) {\n\t\t\t\t\t\tthis._logService.warn(`[suggest] did IGNORE invalid completion item from ${item.provider._debugDisplayName}`, item.completion);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).catch(onUnexpectedError);\n\t}\n\n\t/**\n\t * Report durations telemetry with a 1% sampling rate.\n\t * The telemetry is reported only if a random number between 0 and 100 is less than or equal to 1.\n\t */\n\tprivate _reportDurationsTelemetry(durations: CompletionDurations): void {\n\t\tif (Math.random() > 0.0001) { // 0.01%\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\ttype Durations = { data: string };\n\t\t\ttype DurationsClassification = {\n\t\t\t\towner: 'jrieken';\n\t\t\t\tcomment: 'Completions performance numbers';\n\t\t\t\tdata: { comment: 'Durations per source and overall'; classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth' };\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<Durations, DurationsClassification>('suggest.durations.json', { data: JSON.stringify(durations) });\n\t\t\tthis._logService.debug('suggest.durations.json', durations);\n\t\t});\n\t}\n\n\tstatic createSuggestFilter(editor: ICodeEditor): { itemKind: Set<CompletionItemKind>; showDeprecated: boolean } {\n\t\t// kind filter and snippet sort rules\n\t\tconst result = new Set<CompletionItemKind>();\n\n\t\t// snippet setting\n\t\tconst snippetSuggestions = editor.getOption(EditorOption.snippetSuggestions);\n\t\tif (snippetSuggestions === 'none') {\n\t\t\tresult.add(CompletionItemKind.Snippet);\n\t\t}\n\n\t\t// type setting\n\t\tconst suggestOptions = editor.getOption(EditorOption.suggest);\n\t\tif (!suggestOptions.showMethods) { result.add(CompletionItemKind.Method); }\n\t\tif (!suggestOptions.showFunctions) { result.add(CompletionItemKind.Function); }\n\t\tif (!suggestOptions.showConstructors) { result.add(CompletionItemKind.Constructor); }\n\t\tif (!suggestOptions.showFields) { result.add(CompletionItemKind.Field); }\n\t\tif (!suggestOptions.showVariables) { result.add(CompletionItemKind.Variable); }\n\t\tif (!suggestOptions.showClasses) { result.add(CompletionItemKind.Class); }\n\t\tif (!suggestOptions.showStructs) { result.add(CompletionItemKind.Struct); }\n\t\tif (!suggestOptions.showInterfaces) { result.add(CompletionItemKind.Interface); }\n\t\tif (!suggestOptions.showModules) { result.add(CompletionItemKind.Module); }\n\t\tif (!suggestOptions.showProperties) { result.add(CompletionItemKind.Property); }\n\t\tif (!suggestOptions.showEvents) { result.add(CompletionItemKind.Event); }\n\t\tif (!suggestOptions.showOperators) { result.add(CompletionItemKind.Operator); }\n\t\tif (!suggestOptions.showUnits) { result.add(CompletionItemKind.Unit); }\n\t\tif (!suggestOptions.showValues) { result.add(CompletionItemKind.Value); }\n\t\tif (!suggestOptions.showConstants) { result.add(CompletionItemKind.Constant); }\n\t\tif (!suggestOptions.showEnums) { result.add(CompletionItemKind.Enum); }\n\t\tif (!suggestOptions.showEnumMembers) { result.add(CompletionItemKind.EnumMember); }\n\t\tif (!suggestOptions.showKeywords) { result.add(CompletionItemKind.Keyword); }\n\t\tif (!suggestOptions.showWords) { result.add(CompletionItemKind.Text); }\n\t\tif (!suggestOptions.showColors) { result.add(CompletionItemKind.Color); }\n\t\tif (!suggestOptions.showFiles) { result.add(CompletionItemKind.File); }\n\t\tif (!suggestOptions.showReferences) { result.add(CompletionItemKind.Reference); }\n\t\tif (!suggestOptions.showColors) { result.add(CompletionItemKind.Customcolor); }\n\t\tif (!suggestOptions.showFolders) { result.add(CompletionItemKind.Folder); }\n\t\tif (!suggestOptions.showTypeParameters) { result.add(CompletionItemKind.TypeParameter); }\n\t\tif (!suggestOptions.showSnippets) { result.add(CompletionItemKind.Snippet); }\n\t\tif (!suggestOptions.showUsers) { result.add(CompletionItemKind.User); }\n\t\tif (!suggestOptions.showIssues) { result.add(CompletionItemKind.Issue); }\n\n\t\treturn { itemKind: result, showDeprecated: suggestOptions.showDeprecated };\n\t}\n\n\tprivate _onNewContext(ctx: LineContext): void {\n\n\t\tif (!this._context) {\n\t\t\t// happens when 24x7 IntelliSense is enabled and still in its delay\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.lineNumber !== this._context.lineNumber) {\n\t\t\t// e.g. happens when pressing Enter while IntelliSense is computed\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n\t\t\t// cancel IntelliSense when line start changes\n\t\t\t// happens when the current word gets outdented\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column < this._context.column) {\n\t\t\t// typed -> moved cursor LEFT -> retrigger if still on a word\n\t\t\tif (ctx.leadingWord.word) {\n\t\t\t\tthis.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n\t\t\t} else {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._completionModel) {\n\t\t\t// happens when IntelliSense is not yet computed\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n\t\t\t// started a new word while IntelliSense shows -> retrigger but reuse all items that we currently have\n\t\t\tconst shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n\t\t\tif (shouldAutoTrigger && this._context) {\n\t\t\t\t// shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n\t\t\t\t// suggestions to be cancelled, which causes `this._context` to be undefined\n\t\t\t\tconst map = this._completionModel.getItemsByProvider();\n\t\t\t\tthis.trigger({\n\t\t\t\t\tauto: this._context.triggerOptions.auto,\n\t\t\t\t\tretrigger: true,\n\t\t\t\t\tclipboardText: this._completionModel.clipboardText,\n\t\t\t\t\tcompletionOptions: { providerItemsToReuse: map }\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column > this._context.column && this._completionModel.getIncompleteProvider().size > 0 && ctx.leadingWord.word.length !== 0) {\n\t\t\t// typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n\n\t\t\tconst providerItemsToReuse = new Map<CompletionItemProvider, CompletionItem[]>();\n\t\t\tconst providerFilter = new Set<CompletionItemProvider>();\n\t\t\tfor (const [provider, items] of this._completionModel.getItemsByProvider()) {\n\t\t\t\tif (items.length > 0 && items[0].container.incomplete) {\n\t\t\t\t\tproviderFilter.add(provider);\n\t\t\t\t} else {\n\t\t\t\t\tproviderItemsToReuse.set(provider, items);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.trigger({\n\t\t\t\tauto: this._context.triggerOptions.auto,\n\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerForIncompleteCompletions,\n\t\t\t\tretrigger: true,\n\t\t\t\tclipboardText: this._completionModel.clipboardText,\n\t\t\t\tcompletionOptions: { providerFilter, providerItemsToReuse }\n\t\t\t});\n\n\t\t} else {\n\t\t\t// typed -> moved cursor RIGHT -> update UI\n\t\t\tconst oldLineContext = this._completionModel.lineContext;\n\t\t\tlet isFrozen = false;\n\n\t\t\tthis._completionModel.lineContext = {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context.column\n\t\t\t};\n\n\t\t\tif (this._completionModel.items.length === 0) {\n\n\t\t\t\tconst shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n\t\t\t\tif (!this._context) {\n\t\t\t\t\t// shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n\t\t\t\t\t// suggestions to be cancelled, which causes `this._context` to be undefined\n\t\t\t\t\tthis.cancel();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (shouldAutoTrigger && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n\t\t\t\t\t// retrigger when heading into a new word\n\t\t\t\t\tthis.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this._context.triggerOptions.auto) {\n\t\t\t\t\t// freeze when IntelliSense was manually requested\n\t\t\t\t\tthis._completionModel.lineContext = oldLineContext;\n\t\t\t\t\tisFrozen = this._completionModel.items.length > 0;\n\n\t\t\t\t\tif (isFrozen && ctx.leadingWord.word.length === 0) {\n\t\t\t\t\t\t// there were results before but now there aren't\n\t\t\t\t\t\t// and also we are not on a word anymore -> cancel\n\t\t\t\t\t\tthis.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// nothing left\n\t\t\t\t\tthis.cancel();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidSuggest.fire({\n\t\t\t\tcompletionModel: this._completionModel,\n\t\t\t\ttriggerOptions: ctx.triggerOptions,\n\t\t\t\tisFrozen,\n\t\t\t});\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TimeoutTimer } from '../../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { DisposableStore, dispose, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace, isHighSurrogate, isLowSurrogate } from '../../../../base/common/strings.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { CursorChangeReason, ICursorSelectionChangedEvent } from '../../../common/cursorEvents.js';\nimport { IPosition, Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { ITextModel } from '../../../common/model.js';\nimport { CompletionContext, CompletionItemKind, CompletionItemProvider, CompletionTriggerKind } from '../../../common/languages.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { WordDistance } from './wordDistance.js';\nimport { IClipboardService } from '../../../../platform/clipboard/common/clipboardService.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';\nimport { CompletionModel } from './completionModel.js';\nimport { CompletionDurations, CompletionItem, CompletionOptions, getSnippetSuggestSupport, provideSuggestionItems, QuickSuggestionsOptions, SnippetSortOrder } from './suggest.js';\nimport { IWordAtPosition } from '../../../common/core/wordHelper.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { FuzzyScoreOptions } from '../../../../base/common/filters.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { InlineCompletionContextKeys } from '../../inlineCompletions/browser/controller/inlineCompletionContextKeys.js';\nimport { SnippetController2 } from '../../snippet/browser/snippetController2.js';\nimport { IEnvironmentService } from '../../../../platform/environment/common/environment.js';\n\nexport interface ICancelEvent {\n\treadonly retrigger: boolean;\n}\n\nexport interface ITriggerEvent {\n\treadonly auto: boolean;\n\treadonly shy: boolean;\n\treadonly position: IPosition;\n}\n\nexport interface ISuggestEvent {\n\treadonly completionModel: CompletionModel;\n\treadonly isFrozen: boolean;\n\treadonly triggerOptions: SuggestTriggerOptions;\n}\n\nexport interface SuggestTriggerOptions {\n\treadonly auto: boolean;\n\treadonly shy?: boolean;\n\treadonly refilter?: boolean;\n\treadonly retrigger?: boolean;\n\treadonly triggerKind?: CompletionTriggerKind;\n\treadonly triggerCharacter?: string;\n\treadonly clipboardText?: string;\n\tcompletionOptions?: Partial<CompletionOptions>;\n}\n\nexport class LineContext {\n\n\tstatic shouldAutoTrigger(editor: ICodeEditor): boolean {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn false;\n\t\t}\n\t\tconst model = editor.getModel();\n\t\tconst pos = editor.getPosition();\n\t\tmodel.tokenization.tokenizeIfCheap(pos.lineNumber);\n\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tif (!word) {\n\t\t\treturn false;\n\t\t}\n\t\tif (word.endColumn !== pos.column &&\n\t\t\tword.startColumn + 1 !== pos.column /* after typing a single character before a word */) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!isNaN(Number(word.word))) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\treadonly lineNumber: number;\n\treadonly column: number;\n\treadonly leadingLineContent: string;\n\treadonly leadingWord: IWordAtPosition;\n\treadonly triggerOptions: SuggestTriggerOptions;\n\n\tconstructor(model: ITextModel, position: Position, triggerOptions: SuggestTriggerOptions) {\n\t\tthis.leadingLineContent = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\t\tthis.leadingWord = model.getWordUntilPosition(position);\n\t\tthis.lineNumber = position.lineNumber;\n\t\tthis.column = position.column;\n\t\tthis.triggerOptions = triggerOptions;\n\t}\n}\n\nexport const enum State {\n\tIdle = 0,\n\tManual = 1,\n\tAuto = 2\n}\n\nfunction canShowQuickSuggest(editor: ICodeEditor, contextKeyService: IContextKeyService, configurationService: IConfigurationService): boolean {\n\tif (!Boolean(contextKeyService.getContextKeyValue(InlineCompletionContextKeys.inlineSuggestionVisible.key))) {\n\t\t// Allow if there is no inline suggestion.\n\t\treturn true;\n\t}\n\tconst suppressSuggestions = contextKeyService.getContextKeyValue<boolean | undefined>(InlineCompletionContextKeys.suppressSuggestions.key);\n\tif (suppressSuggestions !== undefined) {\n\t\treturn !suppressSuggestions;\n\t}\n\treturn !editor.getOption(EditorOption.inlineSuggest).suppressSuggestions;\n}\n\nfunction canShowSuggestOnTriggerCharacters(editor: ICodeEditor, contextKeyService: IContextKeyService, configurationService: IConfigurationService): boolean {\n\tif (!Boolean(contextKeyService.getContextKeyValue('inlineSuggestionVisible'))) {\n\t\t// Allow if there is no inline suggestion.\n\t\treturn true;\n\t}\n\tconst suppressSuggestions = contextKeyService.getContextKeyValue<boolean | undefined>(InlineCompletionContextKeys.suppressSuggestions.key);\n\tif (suppressSuggestions !== undefined) {\n\t\treturn !suppressSuggestions;\n\t}\n\treturn !editor.getOption(EditorOption.inlineSuggest).suppressSuggestions;\n}\n\nexport class SuggestModel implements IDisposable {\n\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _triggerCharacterListener = new DisposableStore();\n\tprivate readonly _triggerQuickSuggest = new TimeoutTimer();\n\n\tprivate _triggerState: SuggestTriggerOptions | undefined = undefined;\n\tprivate _requestToken?: CancellationTokenSource;\n\tprivate _context?: LineContext;\n\tprivate _currentSelection: Selection;\n\n\tprivate _completionModel: CompletionModel | undefined;\n\tprivate readonly _completionDisposables = new DisposableStore();\n\tprivate readonly _onDidCancel = new Emitter<ICancelEvent>();\n\tprivate readonly _onDidTrigger = new Emitter<ITriggerEvent>();\n\tprivate readonly _onDidSuggest = new Emitter<ISuggestEvent>();\n\n\treadonly onDidCancel: Event<ICancelEvent> = this._onDidCancel.event;\n\treadonly onDidTrigger: Event<ITriggerEvent> = this._onDidTrigger.event;\n\treadonly onDidSuggest: Event<ISuggestEvent> = this._onDidSuggest.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IEditorWorkerService private readonly _editorWorkerService: IEditorWorkerService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IEnvironmentService private readonly _envService: IEnvironmentService,\n\t) {\n\t\tthis._currentSelection = this._editor.getSelection() || new Selection(1, 1, 1, 1);\n\n\t\t// wire up various listeners\n\t\tthis._toDispose.add(this._editor.onDidChangeModel(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeModelLanguage(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis.cancel();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeConfiguration(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t}));\n\t\tthis._toDispose.add(this._languageFeaturesService.completionProvider.onDidChange(() => {\n\t\t\tthis._updateTriggerCharacters();\n\t\t\tthis._updateActiveSuggestSession();\n\t\t}));\n\n\t\tlet editorIsComposing = false;\n\t\tthis._toDispose.add(this._editor.onDidCompositionStart(() => {\n\t\t\teditorIsComposing = true;\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidCompositionEnd(() => {\n\t\t\teditorIsComposing = false;\n\t\t\tthis._onCompositionEnd();\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeCursorSelection(e => {\n\t\t\t// only trigger suggest when the editor isn't composing a character\n\t\t\tif (!editorIsComposing) {\n\t\t\t\tthis._onCursorChange(e);\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(this._editor.onDidChangeModelContent(() => {\n\t\t\t// only filter completions when the editor isn't composing a character\n\t\t\t// allow-any-unicode-next-line\n\t\t\t// e.g. ¨ + u makes ü but just ¨ cannot be used for filtering\n\t\t\tif (!editorIsComposing && this._triggerState !== undefined) {\n\t\t\t\tthis._refilterCompletionItems();\n\t\t\t}\n\t\t}));\n\n\t\tthis._updateTriggerCharacters();\n\t}\n\n\tdispose(): void {\n\t\tdispose(this._triggerCharacterListener);\n\t\tdispose([this._onDidCancel, this._onDidSuggest, this._onDidTrigger, this._triggerQuickSuggest]);\n\t\tthis._toDispose.dispose();\n\t\tthis._completionDisposables.dispose();\n\t\tthis.cancel();\n\t}\n\n\tprivate _updateTriggerCharacters(): void {\n\t\tthis._triggerCharacterListener.clear();\n\n\t\tif (this._editor.getOption(EditorOption.readOnly)\n\t\t\t|| !this._editor.hasModel()\n\t\t\t|| !this._editor.getOption(EditorOption.suggestOnTriggerCharacters)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportsByTriggerCharacter = new Map<string, Set<CompletionItemProvider>>();\n\t\tfor (const support of this._languageFeaturesService.completionProvider.all(this._editor.getModel())) {\n\t\t\tfor (const ch of support.triggerCharacters || []) {\n\t\t\t\tlet set = supportsByTriggerCharacter.get(ch);\n\t\t\t\tif (!set) {\n\t\t\t\t\tset = new Set();\n\t\t\t\t\tconst suggestSupport = getSnippetSuggestSupport();\n\t\t\t\t\tif (suggestSupport) {\n\t\t\t\t\t\tset.add(suggestSupport);\n\t\t\t\t\t}\n\t\t\t\t\tsupportsByTriggerCharacter.set(ch, set);\n\t\t\t\t}\n\t\t\t\tset.add(support);\n\t\t\t}\n\t\t}\n\n\n\t\tconst checkTriggerCharacter = (text?: string) => {\n\n\t\t\tif (!canShowSuggestOnTriggerCharacters(this._editor, this._contextKeyService, this._configurationService)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (LineContext.shouldAutoTrigger(this._editor)) {\n\t\t\t\t// don't trigger by trigger characters when this is a case for quick suggest\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!text) {\n\t\t\t\t// came here from the compositionEnd-event\n\t\t\t\tconst position = this._editor.getPosition()!;\n\t\t\t\tconst model = this._editor.getModel()!;\n\t\t\t\ttext = model.getLineContent(position.lineNumber).substr(0, position.column - 1);\n\t\t\t}\n\n\t\t\tlet lastChar = '';\n\t\t\tif (isLowSurrogate(text.charCodeAt(text.length - 1))) {\n\t\t\t\tif (isHighSurrogate(text.charCodeAt(text.length - 2))) {\n\t\t\t\t\tlastChar = text.substr(text.length - 2);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlastChar = text.charAt(text.length - 1);\n\t\t\t}\n\n\t\t\tconst supports = supportsByTriggerCharacter.get(lastChar);\n\t\t\tif (supports) {\n\n\t\t\t\t// keep existing items that where not computed by the\n\t\t\t\t// supports/providers that want to trigger now\n\t\t\t\tconst providerItemsToReuse = new Map<CompletionItemProvider, CompletionItem[]>();\n\t\t\t\tif (this._completionModel) {\n\t\t\t\t\tfor (const [provider, items] of this._completionModel.getItemsByProvider()) {\n\t\t\t\t\t\tif (!supports.has(provider)) {\n\t\t\t\t\t\t\tproviderItemsToReuse.set(provider, items);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.trigger({\n\t\t\t\t\tauto: true,\n\t\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\t\ttriggerCharacter: lastChar,\n\t\t\t\t\tretrigger: Boolean(this._completionModel),\n\t\t\t\t\tclipboardText: this._completionModel?.clipboardText,\n\t\t\t\t\tcompletionOptions: { providerFilter: supports, providerItemsToReuse }\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tthis._triggerCharacterListener.add(this._editor.onDidType(checkTriggerCharacter));\n\t\tthis._triggerCharacterListener.add(this._editor.onDidCompositionEnd(() => checkTriggerCharacter()));\n\t}\n\n\t// --- trigger/retrigger/cancel suggest\n\n\tget state(): State {\n\t\tif (!this._triggerState) {\n\t\t\treturn State.Idle;\n\t\t} else if (!this._triggerState.auto) {\n\t\t\treturn State.Manual;\n\t\t} else {\n\t\t\treturn State.Auto;\n\t\t}\n\t}\n\n\tcancel(retrigger: boolean = false): void {\n\t\tif (this._triggerState !== undefined) {\n\t\t\tthis._triggerQuickSuggest.cancel();\n\t\t\tthis._requestToken?.cancel();\n\t\t\tthis._requestToken = undefined;\n\t\t\tthis._triggerState = undefined;\n\t\t\tthis._completionModel = undefined;\n\t\t\tthis._context = undefined;\n\t\t\tthis._onDidCancel.fire({ retrigger });\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._completionDisposables.clear();\n\t}\n\n\tprivate _updateActiveSuggestSession(): void {\n\t\tif (this._triggerState !== undefined) {\n\t\t\tif (!this._editor.hasModel() || !this._languageFeaturesService.completionProvider.has(this._editor.getModel())) {\n\t\t\t\tthis.cancel();\n\t\t\t} else {\n\t\t\t\tthis.trigger({ auto: this._triggerState.auto, retrigger: true });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _onCursorChange(e: ICursorSelectionChangedEvent): void {\n\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst prevSelection = this._currentSelection;\n\t\tthis._currentSelection = this._editor.getSelection();\n\n\t\tif (!e.selection.isEmpty()\n\t\t\t|| (e.reason !== CursorChangeReason.NotSet && e.reason !== CursorChangeReason.Explicit)\n\t\t\t|| (e.source !== 'keyboard' && e.source !== 'deleteLeft')\n\t\t) {\n\t\t\t// Early exit if nothing needs to be done!\n\t\t\t// Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\n\t\tif (this._triggerState === undefined && e.reason === CursorChangeReason.NotSet) {\n\t\t\tif (prevSelection.containsRange(this._currentSelection) || prevSelection.getEndPosition().isBeforeOrEqual(this._currentSelection.getPosition())) {\n\t\t\t\t// cursor did move RIGHT due to typing -> trigger quick suggest\n\t\t\t\tthis._doTriggerQuickSuggest();\n\t\t\t}\n\n\t\t} else if (this._triggerState !== undefined && e.reason === CursorChangeReason.Explicit) {\n\t\t\t// suggest is active and something like cursor keys are used to move\n\t\t\t// the cursor. this means we can refilter at the new position\n\t\t\tthis._refilterCompletionItems();\n\t\t}\n\t}\n\n\tprivate _onCompositionEnd(): void {\n\t\t// trigger or refilter when composition ends\n\t\tif (this._triggerState === undefined) {\n\t\t\tthis._doTriggerQuickSuggest();\n\t\t} else {\n\t\t\tthis._refilterCompletionItems();\n\t\t}\n\t}\n\n\tprivate _doTriggerQuickSuggest(): void {\n\n\t\tif (QuickSuggestionsOptions.isAllOff(this._editor.getOption(EditorOption.quickSuggestions))) {\n\t\t\t// not enabled\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._editor.getOption(EditorOption.suggest).snippetsPreventQuickSuggestions && SnippetController2.get(this._editor)?.isInSnippet()) {\n\t\t\t// no quick suggestion when in snippet mode\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cancel();\n\n\t\tthis._triggerQuickSuggest.cancelAndSet(() => {\n\t\t\tif (this._triggerState !== undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!LineContext.shouldAutoTrigger(this._editor)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._editor.hasModel() || !this._editor.hasWidgetFocus()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst pos = this._editor.getPosition();\n\t\t\t// validate enabled now\n\t\t\tconst config = this._editor.getOption(EditorOption.quickSuggestions);\n\t\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!QuickSuggestionsOptions.isAllOn(config)) {\n\t\t\t\t// Check the type of the token that triggered this\n\t\t\t\tmodel.tokenization.tokenizeIfCheap(pos.lineNumber);\n\t\t\t\tconst lineTokens = model.tokenization.getLineTokens(pos.lineNumber);\n\t\t\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(pos.column - 1 - 1, 0)));\n\t\t\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'on') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!canShowQuickSuggest(this._editor, this._contextKeyService, this._configurationService)) {\n\t\t\t\t// do not trigger quick suggestions if inline suggestions are shown\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._languageFeaturesService.completionProvider.has(model)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// we made it till here -> trigger now\n\t\t\tthis.trigger({ auto: true });\n\n\t\t}, this._editor.getOption(EditorOption.quickSuggestionsDelay));\n\t}\n\n\tprivate _refilterCompletionItems(): void {\n\t\tassertType(this._editor.hasModel());\n\t\tassertType(this._triggerState !== undefined);\n\n\t\tconst model = this._editor.getModel();\n\t\tconst position = this._editor.getPosition();\n\t\tconst ctx = new LineContext(model, position, { ...this._triggerState, refilter: true });\n\t\tthis._onNewContext(ctx);\n\t}\n\n\ttrigger(options: SuggestTriggerOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst ctx = new LineContext(model, this._editor.getPosition(), options);\n\n\t\t// Cancel previous requests, change state & update UI\n\t\tthis.cancel(options.retrigger);\n\t\tthis._triggerState = options;\n\t\tthis._onDidTrigger.fire({ auto: options.auto, shy: options.shy ?? false, position: this._editor.getPosition() });\n\n\t\t// Capture context when request was sent\n\t\tthis._context = ctx;\n\n\t\t// Build context for request\n\t\tlet suggestCtx: CompletionContext = { triggerKind: options.triggerKind ?? CompletionTriggerKind.Invoke };\n\t\tif (options.triggerCharacter) {\n\t\t\tsuggestCtx = {\n\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerCharacter,\n\t\t\t\ttriggerCharacter: options.triggerCharacter\n\t\t\t};\n\t\t}\n\n\t\tthis._requestToken = new CancellationTokenSource();\n\n\t\t// kind filter and snippet sort rules\n\t\tconst snippetSuggestions = this._editor.getOption(EditorOption.snippetSuggestions);\n\t\tlet snippetSortOrder = SnippetSortOrder.Inline;\n\t\tswitch (snippetSuggestions) {\n\t\t\tcase 'top':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Top;\n\t\t\t\tbreak;\n\t\t\t// \t↓ that's the default anyways...\n\t\t\t// case 'inline':\n\t\t\t// \tsnippetSortOrder = SnippetSortOrder.Inline;\n\t\t\t// \tbreak;\n\t\t\tcase 'bottom':\n\t\t\t\tsnippetSortOrder = SnippetSortOrder.Bottom;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst { itemKind: itemKindFilter, showDeprecated } = SuggestModel.createSuggestFilter(this._editor);\n\t\tconst completionOptions = new CompletionOptions(snippetSortOrder, options.completionOptions?.kindFilter ?? itemKindFilter, options.completionOptions?.providerFilter, options.completionOptions?.providerItemsToReuse, showDeprecated);\n\t\tconst wordDistance = WordDistance.create(this._editorWorkerService, this._editor);\n\n\t\tconst completions = provideSuggestionItems(\n\t\t\tthis._languageFeaturesService.completionProvider,\n\t\t\tmodel,\n\t\t\tthis._editor.getPosition(),\n\t\t\tcompletionOptions,\n\t\t\tsuggestCtx,\n\t\t\tthis._requestToken.token\n\t\t);\n\n\t\tPromise.all([completions, wordDistance]).then(async ([completions, wordDistance]) => {\n\n\t\t\tthis._requestToken?.dispose();\n\n\t\t\tif (!this._editor.hasModel()) {\n\t\t\t\tcompletions.disposable.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet clipboardText = options?.clipboardText;\n\t\t\tif (!clipboardText && completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tif (this._triggerState === undefined) {\n\t\t\t\tcompletions.disposable.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = this._editor.getModel();\n\t\t\t// const items = completions.items;\n\n\t\t\t// if (existing) {\n\t\t\t// \tconst cmpFn = getSuggestionComparator(snippetSortOrder);\n\t\t\t// \titems = items.concat(existing.items).sort(cmpFn);\n\t\t\t// }\n\n\t\t\tconst ctx = new LineContext(model, this._editor.getPosition(), options);\n\t\t\tconst fuzzySearchOptions = {\n\t\t\t\t...FuzzyScoreOptions.default,\n\t\t\t\tfirstMatchCanBeWeak: !this._editor.getOption(EditorOption.suggest).matchOnWordStartOnly\n\t\t\t};\n\t\t\tthis._completionModel = new CompletionModel(completions.items, this._context!.column, {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context!.column\n\t\t\t},\n\t\t\t\twordDistance,\n\t\t\t\tthis._editor.getOption(EditorOption.suggest),\n\t\t\t\tthis._editor.getOption(EditorOption.snippetSuggestions),\n\t\t\t\tfuzzySearchOptions,\n\t\t\t\tclipboardText\n\t\t\t);\n\n\t\t\t// store containers so that they can be disposed later\n\t\t\tthis._completionDisposables.add(completions.disposable);\n\n\t\t\tthis._onNewContext(ctx);\n\n\t\t\t// finally report telemetry about durations\n\t\t\tthis._reportDurationsTelemetry(completions.durations);\n\n\t\t\t// report invalid completions by source\n\t\t\tif (!this._envService.isBuilt || this._envService.isExtensionDevelopment) {\n\t\t\t\tfor (const item of completions.items) {\n\t\t\t\t\tif (item.isInvalid) {\n\t\t\t\t\t\tthis._logService.warn(`[suggest] did IGNORE invalid completion item from ${item.provider._debugDisplayName}`, item.completion);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}).catch(onUnexpectedError);\n\t}\n\n\t/**\n\t * Report durations telemetry with a 1% sampling rate.\n\t * The telemetry is reported only if a random number between 0 and 100 is less than or equal to 1.\n\t */\n\tprivate _reportDurationsTelemetry(durations: CompletionDurations): void {\n\t\tif (Math.random() > 0.0001) { // 0.01%\n\t\t\treturn;\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\ttype Durations = { data: string };\n\t\t\ttype DurationsClassification = {\n\t\t\t\towner: 'jrieken';\n\t\t\t\tcomment: 'Completions performance numbers';\n\t\t\t\tdata: { comment: 'Durations per source and overall'; classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth' };\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<Durations, DurationsClassification>('suggest.durations.json', { data: JSON.stringify(durations) });\n\t\t\tthis._logService.debug('suggest.durations.json', durations);\n\t\t});\n\t}\n\n\tstatic createSuggestFilter(editor: ICodeEditor): { itemKind: Set<CompletionItemKind>; showDeprecated: boolean } {\n\t\t// kind filter and snippet sort rules\n\t\tconst result = new Set<CompletionItemKind>();\n\n\t\t// snippet setting\n\t\tconst snippetSuggestions = editor.getOption(EditorOption.snippetSuggestions);\n\t\tif (snippetSuggestions === 'none') {\n\t\t\tresult.add(CompletionItemKind.Snippet);\n\t\t}\n\n\t\t// type setting\n\t\tconst suggestOptions = editor.getOption(EditorOption.suggest);\n\t\tif (!suggestOptions.showMethods) { result.add(CompletionItemKind.Method); }\n\t\tif (!suggestOptions.showFunctions) { result.add(CompletionItemKind.Function); }\n\t\tif (!suggestOptions.showConstructors) { result.add(CompletionItemKind.Constructor); }\n\t\tif (!suggestOptions.showFields) { result.add(CompletionItemKind.Field); }\n\t\tif (!suggestOptions.showVariables) { result.add(CompletionItemKind.Variable); }\n\t\tif (!suggestOptions.showClasses) { result.add(CompletionItemKind.Class); }\n\t\tif (!suggestOptions.showStructs) { result.add(CompletionItemKind.Struct); }\n\t\tif (!suggestOptions.showInterfaces) { result.add(CompletionItemKind.Interface); }\n\t\tif (!suggestOptions.showModules) { result.add(CompletionItemKind.Module); }\n\t\tif (!suggestOptions.showProperties) { result.add(CompletionItemKind.Property); }\n\t\tif (!suggestOptions.showEvents) { result.add(CompletionItemKind.Event); }\n\t\tif (!suggestOptions.showOperators) { result.add(CompletionItemKind.Operator); }\n\t\tif (!suggestOptions.showUnits) { result.add(CompletionItemKind.Unit); }\n\t\tif (!suggestOptions.showValues) { result.add(CompletionItemKind.Value); }\n\t\tif (!suggestOptions.showConstants) { result.add(CompletionItemKind.Constant); }\n\t\tif (!suggestOptions.showEnums) { result.add(CompletionItemKind.Enum); }\n\t\tif (!suggestOptions.showEnumMembers) { result.add(CompletionItemKind.EnumMember); }\n\t\tif (!suggestOptions.showKeywords) { result.add(CompletionItemKind.Keyword); }\n\t\tif (!suggestOptions.showWords) { result.add(CompletionItemKind.Text); }\n\t\tif (!suggestOptions.showColors) { result.add(CompletionItemKind.Color); }\n\t\tif (!suggestOptions.showFiles) { result.add(CompletionItemKind.File); }\n\t\tif (!suggestOptions.showReferences) { result.add(CompletionItemKind.Reference); }\n\t\tif (!suggestOptions.showColors) { result.add(CompletionItemKind.Customcolor); }\n\t\tif (!suggestOptions.showFolders) { result.add(CompletionItemKind.Folder); }\n\t\tif (!suggestOptions.showTypeParameters) { result.add(CompletionItemKind.TypeParameter); }\n\t\tif (!suggestOptions.showSnippets) { result.add(CompletionItemKind.Snippet); }\n\t\tif (!suggestOptions.showUsers) { result.add(CompletionItemKind.User); }\n\t\tif (!suggestOptions.showIssues) { result.add(CompletionItemKind.Issue); }\n\n\t\treturn { itemKind: result, showDeprecated: suggestOptions.showDeprecated };\n\t}\n\n\tprivate _onNewContext(ctx: LineContext): void {\n\n\t\tif (!this._context) {\n\t\t\t// happens when 24x7 IntelliSense is enabled and still in its delay\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.lineNumber !== this._context.lineNumber) {\n\t\t\t// e.g. happens when pressing Enter while IntelliSense is computed\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (getLeadingWhitespace(ctx.leadingLineContent) !== getLeadingWhitespace(this._context.leadingLineContent)) {\n\t\t\t// cancel IntelliSense when line start changes\n\t\t\t// happens when the current word gets outdented\n\t\t\tthis.cancel();\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column < this._context.column) {\n\t\t\t// typed -> moved cursor LEFT -> retrigger if still on a word\n\t\t\tif (ctx.leadingWord.word) {\n\t\t\t\tthis.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n\t\t\t} else {\n\t\t\t\tthis.cancel();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._completionModel) {\n\t\t\t// happens when IntelliSense is not yet computed\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.leadingWord.word.length !== 0 && ctx.leadingWord.startColumn > this._context.leadingWord.startColumn) {\n\t\t\t// started a new word while IntelliSense shows -> retrigger but reuse all items that we currently have\n\t\t\tconst shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n\t\t\tif (shouldAutoTrigger && this._context) {\n\t\t\t\t// shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n\t\t\t\t// suggestions to be cancelled, which causes `this._context` to be undefined\n\t\t\t\tconst map = this._completionModel.getItemsByProvider();\n\t\t\t\tthis.trigger({\n\t\t\t\t\tauto: this._context.triggerOptions.auto,\n\t\t\t\t\tretrigger: true,\n\t\t\t\t\tclipboardText: this._completionModel.clipboardText,\n\t\t\t\t\tcompletionOptions: { providerItemsToReuse: map }\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (ctx.column > this._context.column && this._completionModel.getIncompleteProvider().size > 0 && ctx.leadingWord.word.length !== 0) {\n\t\t\t// typed -> moved cursor RIGHT & incomple model & still on a word -> retrigger\n\n\t\t\tconst providerItemsToReuse = new Map<CompletionItemProvider, CompletionItem[]>();\n\t\t\tconst providerFilter = new Set<CompletionItemProvider>();\n\t\t\tfor (const [provider, items] of this._completionModel.getItemsByProvider()) {\n\t\t\t\tif (items.length > 0 && items[0].container.incomplete) {\n\t\t\t\t\tproviderFilter.add(provider);\n\t\t\t\t} else {\n\t\t\t\t\tproviderItemsToReuse.set(provider, items);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.trigger({\n\t\t\t\tauto: this._context.triggerOptions.auto,\n\t\t\t\ttriggerKind: CompletionTriggerKind.TriggerForIncompleteCompletions,\n\t\t\t\tretrigger: true,\n\t\t\t\tclipboardText: this._completionModel.clipboardText,\n\t\t\t\tcompletionOptions: { providerFilter, providerItemsToReuse }\n\t\t\t});\n\n\t\t} else {\n\t\t\t// typed -> moved cursor RIGHT -> update UI\n\t\t\tconst oldLineContext = this._completionModel.lineContext;\n\t\t\tlet isFrozen = false;\n\n\t\t\tthis._completionModel.lineContext = {\n\t\t\t\tleadingLineContent: ctx.leadingLineContent,\n\t\t\t\tcharacterCountDelta: ctx.column - this._context.column\n\t\t\t};\n\n\t\t\tif (this._completionModel.items.length === 0) {\n\n\t\t\t\tconst shouldAutoTrigger = LineContext.shouldAutoTrigger(this._editor);\n\t\t\t\tif (!this._context) {\n\t\t\t\t\t// shouldAutoTrigger forces tokenization, which can cause pending cursor change events to be emitted, which can cause\n\t\t\t\t\t// suggestions to be cancelled, which causes `this._context` to be undefined\n\t\t\t\t\tthis.cancel();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (shouldAutoTrigger && this._context.leadingWord.endColumn < ctx.leadingWord.startColumn) {\n\t\t\t\t\t// retrigger when heading into a new word\n\t\t\t\t\tthis.trigger({ auto: this._context.triggerOptions.auto, retrigger: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this._context.triggerOptions.auto) {\n\t\t\t\t\t// freeze when IntelliSense was manually requested\n\t\t\t\t\tthis._completionModel.lineContext = oldLineContext;\n\t\t\t\t\tisFrozen = this._completionModel.items.length > 0;\n\n\t\t\t\t\tif (isFrozen && ctx.leadingWord.word.length === 0) {\n\t\t\t\t\t\t// there were results before but now there aren't\n\t\t\t\t\t\t// and also we are not on a word anymore -> cancel\n\t\t\t\t\t\tthis.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// nothing left\n\t\t\t\t\tthis.cancel();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidSuggest.fire({\n\t\t\t\tcompletionModel: this._completionModel,\n\t\t\t\ttriggerOptions: ctx.triggerOptions,\n\t\t\t\tisFrozen,\n\t\t\t});\n\t\t}\n\t}\n}\n"]}