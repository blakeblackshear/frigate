{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/indentation/common/indentation.ts","vs/editor/contrib/indentation/common/indentation.ts"],"names":[],"mappings":"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","file":"indentation.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/misc/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { StandardTokenType } from '../../../common/encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ProcessedIndentRulesSupport } from '../../../common/languages/supports/indentationLineProcessor.js';\nimport { ITextModel } from '../../../common/model.js';\n\nexport function getReindentEditOperations(model: ITextModel, languageConfigurationService: ILanguageConfigurationService, startLineNumber: number, endLineNumber: number): ISingleEditOperation[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tconst indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n\tif (!indentationRulesSupport) {\n\t\treturn [];\n\t}\n\n\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n\tendLineNumber = Math.min(endLineNumber, model.getLineCount());\n\n\t// Skip `unIndentedLinePattern` lines\n\twhile (startLineNumber <= endLineNumber) {\n\t\tif (!processedIndentRulesSupport.shouldIgnore(startLineNumber)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstartLineNumber++;\n\t}\n\n\tif (startLineNumber > endLineNumber - 1) {\n\t\treturn [];\n\t}\n\n\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\tconst shiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst unshiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst indentEdits: ISingleEditOperation[] = [];\n\n\t// indentation being passed to lines below\n\n\t// Calculate indentation for the first line\n\t// If there is no passed-in indentation, we use the indentation of the first line as base.\n\tconst currentLineText = model.getLineContent(startLineNumber);\n\tlet globalIndent = strings.getLeadingWhitespace(currentLineText);\n\t// idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n\tlet idealIndentForNextLine: string = globalIndent;\n\n\tif (processedIndentRulesSupport.shouldIncrease(startLineNumber)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\tglobalIndent = shiftIndent(globalIndent);\n\t}\n\telse if (processedIndentRulesSupport.shouldIndentNextLine(startLineNumber)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t}\n\n\tstartLineNumber++;\n\n\t// Calculate indentation adjustment for all following lines\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tif (doesLineStartWithString(model, lineNumber)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst text = model.getLineContent(lineNumber);\n\t\tconst oldIndentation = strings.getLeadingWhitespace(text);\n\t\tconst currentIdealIndent = idealIndentForNextLine;\n\n\t\tif (processedIndentRulesSupport.shouldDecrease(lineNumber, currentIdealIndent)) {\n\t\t\tidealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t}\n\n\t\tif (oldIndentation !== idealIndentForNextLine) {\n\t\t\tindentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n\t\t}\n\n\t\t// calculate idealIndentForNextLine\n\t\tif (processedIndentRulesSupport.shouldIgnore(lineNumber)) {\n\t\t\t// In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n\t\t\t// but don't change globalIndent and idealIndentForNextLine.\n\t\t\tcontinue;\n\t\t} else if (processedIndentRulesSupport.shouldIncrease(lineNumber, currentIdealIndent)) {\n\t\t\tglobalIndent = shiftIndent(globalIndent);\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t} else if (processedIndentRulesSupport.shouldIndentNextLine(lineNumber, currentIdealIndent)) {\n\t\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\t} else {\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t}\n\t}\n\n\treturn indentEdits;\n}\n\nfunction doesLineStartWithString(model: ITextModel, lineNumber: number): boolean {\n\tif (!model.tokenization.isCheapToTokenize(lineNumber)) {\n\t\treturn false;\n\t}\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\treturn lineTokens.getStandardTokenType(0) === StandardTokenType.String;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from '../../../../base/common/strings.js';\nimport { ShiftCommand } from '../../../common/commands/shiftCommand.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { normalizeIndentation } from '../../../common/core/misc/indentation.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { StandardTokenType } from '../../../common/encodedTokenAttributes.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ProcessedIndentRulesSupport } from '../../../common/languages/supports/indentationLineProcessor.js';\nimport { ITextModel } from '../../../common/model.js';\n\nexport function getReindentEditOperations(model: ITextModel, languageConfigurationService: ILanguageConfigurationService, startLineNumber: number, endLineNumber: number): ISingleEditOperation[] {\n\tif (model.getLineCount() === 1 && model.getLineMaxColumn(1) === 1) {\n\t\t// Model is empty\n\t\treturn [];\n\t}\n\n\tconst indentationRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n\tif (!indentationRulesSupport) {\n\t\treturn [];\n\t}\n\n\tconst processedIndentRulesSupport = new ProcessedIndentRulesSupport(model, indentationRulesSupport, languageConfigurationService);\n\tendLineNumber = Math.min(endLineNumber, model.getLineCount());\n\n\t// Skip `unIndentedLinePattern` lines\n\twhile (startLineNumber <= endLineNumber) {\n\t\tif (!processedIndentRulesSupport.shouldIgnore(startLineNumber)) {\n\t\t\tbreak;\n\t\t}\n\n\t\tstartLineNumber++;\n\t}\n\n\tif (startLineNumber > endLineNumber - 1) {\n\t\treturn [];\n\t}\n\n\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\tconst shiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst unshiftIndent = (indentation: string, count?: number) => {\n\t\tcount = count || 1;\n\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + count, tabSize, indentSize, insertSpaces);\n\t};\n\tconst indentEdits: ISingleEditOperation[] = [];\n\n\t// indentation being passed to lines below\n\n\t// Calculate indentation for the first line\n\t// If there is no passed-in indentation, we use the indentation of the first line as base.\n\tconst currentLineText = model.getLineContent(startLineNumber);\n\tlet globalIndent = strings.getLeadingWhitespace(currentLineText);\n\t// idealIndentForNextLine doesn't equal globalIndent when there is a line matching `indentNextLinePattern`.\n\tlet idealIndentForNextLine: string = globalIndent;\n\n\tif (processedIndentRulesSupport.shouldIncrease(startLineNumber)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\tglobalIndent = shiftIndent(globalIndent);\n\t}\n\telse if (processedIndentRulesSupport.shouldIndentNextLine(startLineNumber)) {\n\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t}\n\n\tstartLineNumber++;\n\n\t// Calculate indentation adjustment for all following lines\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tif (doesLineStartWithString(model, lineNumber)) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst text = model.getLineContent(lineNumber);\n\t\tconst oldIndentation = strings.getLeadingWhitespace(text);\n\t\tconst currentIdealIndent = idealIndentForNextLine;\n\n\t\tif (processedIndentRulesSupport.shouldDecrease(lineNumber, currentIdealIndent)) {\n\t\t\tidealIndentForNextLine = unshiftIndent(idealIndentForNextLine);\n\t\t\tglobalIndent = unshiftIndent(globalIndent);\n\t\t}\n\n\t\tif (oldIndentation !== idealIndentForNextLine) {\n\t\t\tindentEdits.push(EditOperation.replaceMove(new Selection(lineNumber, 1, lineNumber, oldIndentation.length + 1), normalizeIndentation(idealIndentForNextLine, indentSize, insertSpaces)));\n\t\t}\n\n\t\t// calculate idealIndentForNextLine\n\t\tif (processedIndentRulesSupport.shouldIgnore(lineNumber)) {\n\t\t\t// In reindent phase, if the line matches `unIndentedLinePattern` we inherit indentation from above lines\n\t\t\t// but don't change globalIndent and idealIndentForNextLine.\n\t\t\tcontinue;\n\t\t} else if (processedIndentRulesSupport.shouldIncrease(lineNumber, currentIdealIndent)) {\n\t\t\tglobalIndent = shiftIndent(globalIndent);\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t} else if (processedIndentRulesSupport.shouldIndentNextLine(lineNumber, currentIdealIndent)) {\n\t\t\tidealIndentForNextLine = shiftIndent(idealIndentForNextLine);\n\t\t} else {\n\t\t\tidealIndentForNextLine = globalIndent;\n\t\t}\n\t}\n\n\treturn indentEdits;\n}\n\nfunction doesLineStartWithString(model: ITextModel, lineNumber: number): boolean {\n\tif (!model.tokenization.isCheapToTokenize(lineNumber)) {\n\t\treturn false;\n\t}\n\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\treturn lineTokens.getStandardTokenType(0) === StandardTokenType.String;\n}\n"]}