{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/hover/browser/contentHoverWidgetWrapper.ts","vs/editor/contrib/hover/browser/contentHoverWidgetWrapper.ts"],"names":[],"mappings":"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","file":"contentHoverWidgetWrapper.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { HoverOperation, HoverResult, HoverStartMode, HoverStartSource } from './hoverOperation.js';\nimport { HoverAnchor, HoverParticipantRegistry, HoverRangeAnchor, IEditorHoverContext, IEditorHoverParticipant, IHoverPart, IHoverWidget } from './hoverTypes.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { HoverVerbosityAction } from '../../../common/standalone/standaloneEnums.js';\nimport { ContentHoverWidget } from './contentHoverWidget.js';\nimport { ContentHoverComputer, ContentHoverComputerOptions } from './contentHoverComputer.js';\nimport { ContentHoverResult } from './contentHoverTypes.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { RenderedContentHover } from './contentHoverRendered.js';\nimport { isMousePositionWithinElement } from './hoverUtils.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\nexport class ContentHoverWidgetWrapper extends Disposable implements IHoverWidget {\n\n\tprivate _currentResult: ContentHoverResult | null = null;\n\tprivate readonly _renderedContentHover = this._register(new MutableDisposable<RenderedContentHover>());\n\n\tprivate readonly _contentHoverWidget: ContentHoverWidget;\n\tprivate readonly _participants: IEditorHoverParticipant[];\n\tprivate readonly _hoverOperation: HoverOperation<ContentHoverComputerOptions, IHoverPart>;\n\n\tprivate readonly _onContentsChanged = this._register(new Emitter<void>());\n\tpublic readonly onContentsChanged = this._onContentsChanged.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IHoverService private readonly _hoverService: IHoverService\n\t) {\n\t\tsuper();\n\t\tthis._contentHoverWidget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n\t\tthis._participants = this._initializeHoverParticipants();\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, new ContentHoverComputer(this._editor, this._participants)));\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _initializeHoverParticipants(): IEditorHoverParticipant[] {\n\t\tconst participants: IEditorHoverParticipant[] = [];\n\t\tfor (const participant of HoverParticipantRegistry.getAll()) {\n\t\t\tconst participantInstance = this._instantiationService.createInstance(participant, this._editor);\n\t\t\tparticipants.push(participantInstance);\n\t\t}\n\t\tparticipants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n\t\tthis._register(this._contentHoverWidget.onDidResize(() => {\n\t\t\tthis._participants.forEach(participant => participant.handleResize?.());\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onDidScroll((e) => {\n\t\t\tthis._participants.forEach(participant => participant.handleScroll?.(e));\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onContentsChanged(() => {\n\t\t\tthis._participants.forEach(participant => participant.handleContentsChanged?.());\n\t\t}));\n\t\treturn participants;\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tconst messages = (result.hasLoadingMessage ? this._addLoadingMessage(result) : result.value);\n\t\t\tthis._withResult(new ContentHoverResult(messages, result.isComplete, result.options));\n\t\t}));\n\t\tconst contentHoverWidgetNode = this._contentHoverWidget.getDomNode();\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'keydown', (e) => {\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'mouseleave', (e) => {\n\t\t\tthis._onMouseLeave(e);\n\t\t}));\n\t\tthis._register(TokenizationRegistry.onDidChange(() => {\n\t\t\tif (this._contentHoverWidget.position && this._currentResult) {\n\t\t\t\tthis._setCurrentResult(this._currentResult); // render again\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onContentsChanged(() => {\n\t\t\tthis._onContentsChanged.fire();\n\t\t}));\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tprivate _startShowingOrUpdateHover(\n\t\tanchor: HoverAnchor | null,\n\t\tmode: HoverStartMode,\n\t\tsource: HoverStartSource,\n\t\tfocus: boolean,\n\t\tmouseEvent: IEditorMouseEvent | null\n\t): boolean {\n\t\tconst contentHoverIsVisible = this._contentHoverWidget.position && this._currentResult;\n\t\tif (!contentHoverIsVisible) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tconst isHoverSticky = this._editor.getOption(EditorOption.hover).sticky;\n\t\tconst isMouseGettingCloser = mouseEvent && this._contentHoverWidget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy);\n\t\tconst isHoverStickyAndIsMouseGettingCloser = isHoverSticky && isMouseGettingCloser;\n\t\t// The mouse is getting closer to the hover, so we will keep the hover untouched\n\t\t// But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n\t\tif (isHoverStickyAndIsMouseGettingCloser) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse is not getting closer and anchor not defined, hide the hover\n\t\tif (!anchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\treturn false;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is the same as the previous anchor\n\t\tconst currentAnchorEqualsPreviousAnchor = this._currentResult && this._currentResult.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualsPreviousAnchor) {\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is not compatible with the previous anchor\n\t\tconst currentAnchorCompatibleWithPreviousAnchor = this._currentResult && anchor.canAdoptVisibleHover(this._currentResult.options.anchor, this._contentHoverWidget.position);\n\t\tif (!currentAnchorCompatibleWithPreviousAnchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\treturn true;\n\t\t}\n\t\t// We aren't getting any closer to the hover, so we will filter existing results\n\t\t// and keep those which also apply to the new anchor.\n\t\tif (this._currentResult) {\n\t\t\tthis._setCurrentResult(this._currentResult.filter(anchor));\n\t\t}\n\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\treturn true;\n\t}\n\n\tprivate _startHoverOperationIfNecessary(anchor: HoverAnchor, mode: HoverStartMode, source: HoverStartSource, shouldFocus: boolean, insistOnKeepingHoverVisible: boolean): void {\n\t\tconst currentAnchorEqualToPreviousHover = this._hoverOperation.options && this._hoverOperation.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualToPreviousHover) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hoverOperation.cancel();\n\t\tconst contentHoverComputerOptions: ContentHoverComputerOptions = {\n\t\t\tanchor,\n\t\t\tsource,\n\t\t\tshouldFocus,\n\t\t\tinsistOnKeepingHoverVisible\n\t\t};\n\t\tthis._hoverOperation.start(mode, contentHoverComputerOptions);\n\t}\n\n\tprivate _setCurrentResult(hoverResult: ContentHoverResult | null): void {\n\t\tlet currentHoverResult = hoverResult;\n\t\tconst currentResultEqualToPreviousResult = this._currentResult === currentHoverResult;\n\t\tif (currentResultEqualToPreviousResult) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = currentHoverResult && currentHoverResult.hoverParts.length === 0;\n\t\tif (currentHoverResultIsEmpty) {\n\t\t\tcurrentHoverResult = null;\n\t\t}\n\t\tthis._currentResult = currentHoverResult;\n\t\tif (this._currentResult) {\n\t\t\tthis._showHover(this._currentResult);\n\t\t} else {\n\t\t\tthis._hideHover();\n\t\t}\n\t}\n\n\tprivate _addLoadingMessage(hoverResult: HoverResult<ContentHoverComputerOptions, IHoverPart>): IHoverPart[] {\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.createLoadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst loadingMessage = participant.createLoadingMessage(hoverResult.options.anchor);\n\t\t\tif (!loadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn hoverResult.value.slice(0).concat([loadingMessage]);\n\t\t}\n\t\treturn hoverResult.value;\n\t}\n\n\tprivate _withResult(hoverResult: ContentHoverResult): void {\n\t\tconst previousHoverIsVisibleWithCompleteResult = this._contentHoverWidget.position && this._currentResult && this._currentResult.isComplete;\n\t\tif (!previousHoverIsVisibleWithCompleteResult) {\n\t\t\tthis._setCurrentResult(hoverResult);\n\t\t}\n\t\t// The hover is visible with a previous complete result.\n\t\tconst isCurrentHoverResultComplete = hoverResult.isComplete;\n\t\tif (!isCurrentHoverResultComplete) {\n\t\t\t// Instead of rendering the new partial result, we wait for the result to be complete.\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = hoverResult.hoverParts.length === 0;\n\t\tconst insistOnKeepingPreviousHoverVisible = hoverResult.options.insistOnKeepingHoverVisible;\n\t\tconst shouldKeepPreviousHoverVisible = currentHoverResultIsEmpty && insistOnKeepingPreviousHoverVisible;\n\t\tif (shouldKeepPreviousHoverVisible) {\n\t\t\t// The hover would now hide normally, so we'll keep the previous messages\n\t\t\treturn;\n\t\t}\n\t\tthis._setCurrentResult(hoverResult);\n\t}\n\n\tprivate _showHover(hoverResult: ContentHoverResult): void {\n\t\tconst context = this._getHoverContext();\n\t\tthis._renderedContentHover.value = new RenderedContentHover(this._editor, hoverResult, this._participants, context, this._keybindingService, this._hoverService);\n\t\tif (this._renderedContentHover.value.domNodeHasChildren) {\n\t\t\tthis._contentHoverWidget.show(this._renderedContentHover.value);\n\t\t} else {\n\t\t\tthis._renderedContentHover.clear();\n\t\t}\n\t}\n\n\tprivate _hideHover(): void {\n\t\tthis._contentHoverWidget.hide();\n\t\tthis._participants.forEach(participant => participant.handleHide?.());\n\t}\n\n\tprivate _getHoverContext(): IEditorHoverContext {\n\t\tconst hide = () => {\n\t\t\tthis.hide();\n\t\t};\n\t\tconst onContentsChanged = () => {\n\t\t\tthis._contentHoverWidget.handleContentsChanged();\n\t\t};\n\t\tconst setMinimumDimensions = (dimensions: dom.Dimension) => {\n\t\t\tthis._contentHoverWidget.setMinimumDimensions(dimensions);\n\t\t};\n\t\tconst focus = () => this.focus();\n\t\treturn { hide, onContentsChanged, setMinimumDimensions, focus };\n\t}\n\n\n\tpublic showsOrWillShow(mouseEvent: IEditorMouseEvent): boolean {\n\t\tconst isContentWidgetResizing = this._contentHoverWidget.isResizing;\n\t\tif (isContentWidgetResizing) {\n\t\t\treturn true;\n\t\t}\n\t\tconst anchorCandidates: HoverAnchor[] = this._findHoverAnchorCandidates(mouseEvent);\n\t\tconst anchorCandidatesExist = anchorCandidates.length > 0;\n\t\tif (!anchorCandidatesExist) {\n\t\t\treturn this._startShowingOrUpdateHover(null, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t\t}\n\t\tconst anchor = anchorCandidates[0];\n\t\treturn this._startShowingOrUpdateHover(anchor, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t}\n\n\tprivate _findHoverAnchorCandidates(mouseEvent: IEditorMouseEvent): HoverAnchor[] {\n\t\tconst anchorCandidates: HoverAnchor[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.suggestHoverAnchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst anchor = participant.suggestHoverAnchor(mouseEvent);\n\t\t\tif (!anchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tanchorCandidates.push(anchor);\n\t\t}\n\t\tconst target = mouseEvent.target;\n\t\tswitch (target.type) {\n\t\t\tcase MouseTargetType.CONTENT_TEXT: {\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_EMPTY: {\n\t\t\t\tconst epsilon = this._editor.getOption(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t\t\t// Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n\t\t\t\tconst mouseIsWithinLinesAndCloseToHover = !target.detail.isAfterLines\n\t\t\t\t\t&& typeof target.detail.horizontalDistanceToText === 'number'\n\t\t\t\t\t&& target.detail.horizontalDistanceToText < epsilon;\n\t\t\t\tif (!mouseIsWithinLinesAndCloseToHover) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tanchorCandidates.sort((a, b) => b.priority - a.priority);\n\t\treturn anchorCandidates;\n\t}\n\n\tprivate _onMouseLeave(e: MouseEvent): void {\n\t\tconst editorDomNode = this._editor.getDomNode();\n\t\tconst isMousePositionOutsideOfEditor = !editorDomNode || !isMousePositionWithinElement(editorDomNode, e.x, e.y);\n\t\tif (isMousePositionOutsideOfEditor) {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tpublic startShowingAtRange(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void {\n\t\tthis._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n\t}\n\n\tpublic async updateHoverVerbosityLevel(action: HoverVerbosityAction, index: number, focus?: boolean): Promise<void> {\n\t\tthis._renderedContentHover.value?.updateHoverVerbosityLevel(action, index, focus);\n\t}\n\n\tpublic focusedHoverPartIndex(): number {\n\t\treturn this._renderedContentHover.value?.focusedHoverPartIndex ?? -1;\n\t}\n\n\tpublic containsNode(node: Node | null | undefined): boolean {\n\t\treturn (node ? this._contentHoverWidget.getDomNode().contains(node) : false);\n\t}\n\n\tpublic focus(): void {\n\t\tconst hoverPartsCount = this._renderedContentHover.value?.hoverPartsCount;\n\t\tif (hoverPartsCount === 1) {\n\t\t\tthis.focusHoverPartWithIndex(0);\n\t\t\treturn;\n\t\t}\n\t\tthis._contentHoverWidget.focus();\n\t}\n\n\tpublic focusHoverPartWithIndex(index: number): void {\n\t\tthis._renderedContentHover.value?.focusHoverPartWithIndex(index);\n\t}\n\n\tpublic scrollUp(): void {\n\t\tthis._contentHoverWidget.scrollUp();\n\t}\n\n\tpublic scrollDown(): void {\n\t\tthis._contentHoverWidget.scrollDown();\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tthis._contentHoverWidget.scrollLeft();\n\t}\n\n\tpublic scrollRight(): void {\n\t\tthis._contentHoverWidget.scrollRight();\n\t}\n\n\tpublic pageUp(): void {\n\t\tthis._contentHoverWidget.pageUp();\n\t}\n\n\tpublic pageDown(): void {\n\t\tthis._contentHoverWidget.pageDown();\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._contentHoverWidget.goToTop();\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._contentHoverWidget.goToBottom();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._hoverOperation.cancel();\n\t\tthis._setCurrentResult(null);\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._contentHoverWidget.getDomNode();\n\t}\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn this._renderedContentHover.value?.isColorPickerVisible() ?? false;\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn this._contentHoverWidget.isVisibleFromKeyboard;\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._contentHoverWidget.isVisible;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._contentHoverWidget.isFocused;\n\t}\n\n\tpublic get isResizing(): boolean {\n\t\treturn this._contentHoverWidget.isResizing;\n\t}\n\n\tpublic get widget() {\n\t\treturn this._contentHoverWidget;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { KeyCode } from '../../../../base/common/keyCodes.js';\nimport { Disposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { HoverOperation, HoverResult, HoverStartMode, HoverStartSource } from './hoverOperation.js';\nimport { HoverAnchor, HoverParticipantRegistry, HoverRangeAnchor, IEditorHoverContext, IEditorHoverParticipant, IHoverPart, IHoverWidget } from './hoverTypes.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { HoverVerbosityAction } from '../../../common/standalone/standaloneEnums.js';\nimport { ContentHoverWidget } from './contentHoverWidget.js';\nimport { ContentHoverComputer, ContentHoverComputerOptions } from './contentHoverComputer.js';\nimport { ContentHoverResult } from './contentHoverTypes.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { RenderedContentHover } from './contentHoverRendered.js';\nimport { isMousePositionWithinElement } from './hoverUtils.js';\nimport { IHoverService } from '../../../../platform/hover/browser/hover.js';\n\nexport class ContentHoverWidgetWrapper extends Disposable implements IHoverWidget {\n\n\tprivate _currentResult: ContentHoverResult | null = null;\n\tprivate readonly _renderedContentHover = this._register(new MutableDisposable<RenderedContentHover>());\n\n\tprivate readonly _contentHoverWidget: ContentHoverWidget;\n\tprivate readonly _participants: IEditorHoverParticipant[];\n\tprivate readonly _hoverOperation: HoverOperation<ContentHoverComputerOptions, IHoverPart>;\n\n\tprivate readonly _onContentsChanged = this._register(new Emitter<void>());\n\tpublic readonly onContentsChanged = this._onContentsChanged.event;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@IHoverService private readonly _hoverService: IHoverService\n\t) {\n\t\tsuper();\n\t\tthis._contentHoverWidget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n\t\tthis._participants = this._initializeHoverParticipants();\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, new ContentHoverComputer(this._editor, this._participants)));\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _initializeHoverParticipants(): IEditorHoverParticipant[] {\n\t\tconst participants: IEditorHoverParticipant[] = [];\n\t\tfor (const participant of HoverParticipantRegistry.getAll()) {\n\t\t\tconst participantInstance = this._instantiationService.createInstance(participant, this._editor);\n\t\t\tparticipants.push(participantInstance);\n\t\t}\n\t\tparticipants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n\t\tthis._register(this._contentHoverWidget.onDidResize(() => {\n\t\t\tthis._participants.forEach(participant => participant.handleResize?.());\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onDidScroll((e) => {\n\t\t\tthis._participants.forEach(participant => participant.handleScroll?.(e));\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onContentsChanged(() => {\n\t\t\tthis._participants.forEach(participant => participant.handleContentsChanged?.());\n\t\t}));\n\t\treturn participants;\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tconst messages = (result.hasLoadingMessage ? this._addLoadingMessage(result) : result.value);\n\t\t\tthis._withResult(new ContentHoverResult(messages, result.isComplete, result.options));\n\t\t}));\n\t\tconst contentHoverWidgetNode = this._contentHoverWidget.getDomNode();\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'keydown', (e) => {\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t\tthis._register(dom.addStandardDisposableListener(contentHoverWidgetNode, 'mouseleave', (e) => {\n\t\t\tthis._onMouseLeave(e);\n\t\t}));\n\t\tthis._register(TokenizationRegistry.onDidChange(() => {\n\t\t\tif (this._contentHoverWidget.position && this._currentResult) {\n\t\t\t\tthis._setCurrentResult(this._currentResult); // render again\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._contentHoverWidget.onContentsChanged(() => {\n\t\t\tthis._onContentsChanged.fire();\n\t\t}));\n\t}\n\n\t/**\n\t * Returns true if the hover shows now or will show.\n\t */\n\tprivate _startShowingOrUpdateHover(\n\t\tanchor: HoverAnchor | null,\n\t\tmode: HoverStartMode,\n\t\tsource: HoverStartSource,\n\t\tfocus: boolean,\n\t\tmouseEvent: IEditorMouseEvent | null\n\t): boolean {\n\t\tconst contentHoverIsVisible = this._contentHoverWidget.position && this._currentResult;\n\t\tif (!contentHoverIsVisible) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\tconst isHoverSticky = this._editor.getOption(EditorOption.hover).sticky;\n\t\tconst isMouseGettingCloser = mouseEvent && this._contentHoverWidget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy);\n\t\tconst isHoverStickyAndIsMouseGettingCloser = isHoverSticky && isMouseGettingCloser;\n\t\t// The mouse is getting closer to the hover, so we will keep the hover untouched\n\t\t// But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n\t\tif (isHoverStickyAndIsMouseGettingCloser) {\n\t\t\tif (anchor) {\n\t\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse is not getting closer and anchor not defined, hide the hover\n\t\tif (!anchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\treturn false;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is the same as the previous anchor\n\t\tconst currentAnchorEqualsPreviousAnchor = this._currentResult && this._currentResult.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualsPreviousAnchor) {\n\t\t\treturn true;\n\t\t}\n\t\t// If mouse if not getting closer and anchor is defined, and the new anchor is not compatible with the previous anchor\n\t\tconst currentAnchorCompatibleWithPreviousAnchor = this._currentResult && anchor.canAdoptVisibleHover(this._currentResult.options.anchor, this._contentHoverWidget.position);\n\t\tif (!currentAnchorCompatibleWithPreviousAnchor) {\n\t\t\tthis._setCurrentResult(null);\n\t\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\t\treturn true;\n\t\t}\n\t\t// We aren't getting any closer to the hover, so we will filter existing results\n\t\t// and keep those which also apply to the new anchor.\n\t\tif (this._currentResult) {\n\t\t\tthis._setCurrentResult(this._currentResult.filter(anchor));\n\t\t}\n\t\tthis._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n\t\treturn true;\n\t}\n\n\tprivate _startHoverOperationIfNecessary(anchor: HoverAnchor, mode: HoverStartMode, source: HoverStartSource, shouldFocus: boolean, insistOnKeepingHoverVisible: boolean): void {\n\t\tconst currentAnchorEqualToPreviousHover = this._hoverOperation.options && this._hoverOperation.options.anchor.equals(anchor);\n\t\tif (currentAnchorEqualToPreviousHover) {\n\t\t\treturn;\n\t\t}\n\t\tthis._hoverOperation.cancel();\n\t\tconst contentHoverComputerOptions: ContentHoverComputerOptions = {\n\t\t\tanchor,\n\t\t\tsource,\n\t\t\tshouldFocus,\n\t\t\tinsistOnKeepingHoverVisible\n\t\t};\n\t\tthis._hoverOperation.start(mode, contentHoverComputerOptions);\n\t}\n\n\tprivate _setCurrentResult(hoverResult: ContentHoverResult | null): void {\n\t\tlet currentHoverResult = hoverResult;\n\t\tconst currentResultEqualToPreviousResult = this._currentResult === currentHoverResult;\n\t\tif (currentResultEqualToPreviousResult) {\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = currentHoverResult && currentHoverResult.hoverParts.length === 0;\n\t\tif (currentHoverResultIsEmpty) {\n\t\t\tcurrentHoverResult = null;\n\t\t}\n\t\tthis._currentResult = currentHoverResult;\n\t\tif (this._currentResult) {\n\t\t\tthis._showHover(this._currentResult);\n\t\t} else {\n\t\t\tthis._hideHover();\n\t\t}\n\t}\n\n\tprivate _addLoadingMessage(hoverResult: HoverResult<ContentHoverComputerOptions, IHoverPart>): IHoverPart[] {\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.createLoadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst loadingMessage = participant.createLoadingMessage(hoverResult.options.anchor);\n\t\t\tif (!loadingMessage) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn hoverResult.value.slice(0).concat([loadingMessage]);\n\t\t}\n\t\treturn hoverResult.value;\n\t}\n\n\tprivate _withResult(hoverResult: ContentHoverResult): void {\n\t\tconst previousHoverIsVisibleWithCompleteResult = this._contentHoverWidget.position && this._currentResult && this._currentResult.isComplete;\n\t\tif (!previousHoverIsVisibleWithCompleteResult) {\n\t\t\tthis._setCurrentResult(hoverResult);\n\t\t}\n\t\t// The hover is visible with a previous complete result.\n\t\tconst isCurrentHoverResultComplete = hoverResult.isComplete;\n\t\tif (!isCurrentHoverResultComplete) {\n\t\t\t// Instead of rendering the new partial result, we wait for the result to be complete.\n\t\t\treturn;\n\t\t}\n\t\tconst currentHoverResultIsEmpty = hoverResult.hoverParts.length === 0;\n\t\tconst insistOnKeepingPreviousHoverVisible = hoverResult.options.insistOnKeepingHoverVisible;\n\t\tconst shouldKeepPreviousHoverVisible = currentHoverResultIsEmpty && insistOnKeepingPreviousHoverVisible;\n\t\tif (shouldKeepPreviousHoverVisible) {\n\t\t\t// The hover would now hide normally, so we'll keep the previous messages\n\t\t\treturn;\n\t\t}\n\t\tthis._setCurrentResult(hoverResult);\n\t}\n\n\tprivate _showHover(hoverResult: ContentHoverResult): void {\n\t\tconst context = this._getHoverContext();\n\t\tthis._renderedContentHover.value = new RenderedContentHover(this._editor, hoverResult, this._participants, context, this._keybindingService, this._hoverService);\n\t\tif (this._renderedContentHover.value.domNodeHasChildren) {\n\t\t\tthis._contentHoverWidget.show(this._renderedContentHover.value);\n\t\t} else {\n\t\t\tthis._renderedContentHover.clear();\n\t\t}\n\t}\n\n\tprivate _hideHover(): void {\n\t\tthis._contentHoverWidget.hide();\n\t\tthis._participants.forEach(participant => participant.handleHide?.());\n\t}\n\n\tprivate _getHoverContext(): IEditorHoverContext {\n\t\tconst hide = () => {\n\t\t\tthis.hide();\n\t\t};\n\t\tconst onContentsChanged = () => {\n\t\t\tthis._contentHoverWidget.handleContentsChanged();\n\t\t};\n\t\tconst setMinimumDimensions = (dimensions: dom.Dimension) => {\n\t\t\tthis._contentHoverWidget.setMinimumDimensions(dimensions);\n\t\t};\n\t\tconst focus = () => this.focus();\n\t\treturn { hide, onContentsChanged, setMinimumDimensions, focus };\n\t}\n\n\n\tpublic showsOrWillShow(mouseEvent: IEditorMouseEvent): boolean {\n\t\tconst isContentWidgetResizing = this._contentHoverWidget.isResizing;\n\t\tif (isContentWidgetResizing) {\n\t\t\treturn true;\n\t\t}\n\t\tconst anchorCandidates: HoverAnchor[] = this._findHoverAnchorCandidates(mouseEvent);\n\t\tconst anchorCandidatesExist = anchorCandidates.length > 0;\n\t\tif (!anchorCandidatesExist) {\n\t\t\treturn this._startShowingOrUpdateHover(null, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t\t}\n\t\tconst anchor = anchorCandidates[0];\n\t\treturn this._startShowingOrUpdateHover(anchor, HoverStartMode.Delayed, HoverStartSource.Mouse, false, mouseEvent);\n\t}\n\n\tprivate _findHoverAnchorCandidates(mouseEvent: IEditorMouseEvent): HoverAnchor[] {\n\t\tconst anchorCandidates: HoverAnchor[] = [];\n\t\tfor (const participant of this._participants) {\n\t\t\tif (!participant.suggestHoverAnchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst anchor = participant.suggestHoverAnchor(mouseEvent);\n\t\t\tif (!anchor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tanchorCandidates.push(anchor);\n\t\t}\n\t\tconst target = mouseEvent.target;\n\t\tswitch (target.type) {\n\t\t\tcase MouseTargetType.CONTENT_TEXT: {\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MouseTargetType.CONTENT_EMPTY: {\n\t\t\t\tconst epsilon = this._editor.getOption(EditorOption.fontInfo).typicalHalfwidthCharacterWidth / 2;\n\t\t\t\t// Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n\t\t\t\tconst mouseIsWithinLinesAndCloseToHover = !target.detail.isAfterLines\n\t\t\t\t\t&& typeof target.detail.horizontalDistanceToText === 'number'\n\t\t\t\t\t&& target.detail.horizontalDistanceToText < epsilon;\n\t\t\t\tif (!mouseIsWithinLinesAndCloseToHover) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tanchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tanchorCandidates.sort((a, b) => b.priority - a.priority);\n\t\treturn anchorCandidates;\n\t}\n\n\tprivate _onMouseLeave(e: MouseEvent): void {\n\t\tconst editorDomNode = this._editor.getDomNode();\n\t\tconst isMousePositionOutsideOfEditor = !editorDomNode || !isMousePositionWithinElement(editorDomNode, e.x, e.y);\n\t\tif (isMousePositionOutsideOfEditor) {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tpublic startShowingAtRange(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean): void {\n\t\tthis._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n\t}\n\n\tpublic async updateHoverVerbosityLevel(action: HoverVerbosityAction, index: number, focus?: boolean): Promise<void> {\n\t\tthis._renderedContentHover.value?.updateHoverVerbosityLevel(action, index, focus);\n\t}\n\n\tpublic focusedHoverPartIndex(): number {\n\t\treturn this._renderedContentHover.value?.focusedHoverPartIndex ?? -1;\n\t}\n\n\tpublic containsNode(node: Node | null | undefined): boolean {\n\t\treturn (node ? this._contentHoverWidget.getDomNode().contains(node) : false);\n\t}\n\n\tpublic focus(): void {\n\t\tconst hoverPartsCount = this._renderedContentHover.value?.hoverPartsCount;\n\t\tif (hoverPartsCount === 1) {\n\t\t\tthis.focusHoverPartWithIndex(0);\n\t\t\treturn;\n\t\t}\n\t\tthis._contentHoverWidget.focus();\n\t}\n\n\tpublic focusHoverPartWithIndex(index: number): void {\n\t\tthis._renderedContentHover.value?.focusHoverPartWithIndex(index);\n\t}\n\n\tpublic scrollUp(): void {\n\t\tthis._contentHoverWidget.scrollUp();\n\t}\n\n\tpublic scrollDown(): void {\n\t\tthis._contentHoverWidget.scrollDown();\n\t}\n\n\tpublic scrollLeft(): void {\n\t\tthis._contentHoverWidget.scrollLeft();\n\t}\n\n\tpublic scrollRight(): void {\n\t\tthis._contentHoverWidget.scrollRight();\n\t}\n\n\tpublic pageUp(): void {\n\t\tthis._contentHoverWidget.pageUp();\n\t}\n\n\tpublic pageDown(): void {\n\t\tthis._contentHoverWidget.pageDown();\n\t}\n\n\tpublic goToTop(): void {\n\t\tthis._contentHoverWidget.goToTop();\n\t}\n\n\tpublic goToBottom(): void {\n\t\tthis._contentHoverWidget.goToBottom();\n\t}\n\n\tpublic hide(): void {\n\t\tthis._hoverOperation.cancel();\n\t\tthis._setCurrentResult(null);\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._contentHoverWidget.getDomNode();\n\t}\n\n\tpublic get isColorPickerVisible(): boolean {\n\t\treturn this._renderedContentHover.value?.isColorPickerVisible() ?? false;\n\t}\n\n\tpublic get isVisibleFromKeyboard(): boolean {\n\t\treturn this._contentHoverWidget.isVisibleFromKeyboard;\n\t}\n\n\tpublic get isVisible(): boolean {\n\t\treturn this._contentHoverWidget.isVisible;\n\t}\n\n\tpublic get isFocused(): boolean {\n\t\treturn this._contentHoverWidget.isFocused;\n\t}\n\n\tpublic get isResizing(): boolean {\n\t\treturn this._contentHoverWidget.isResizing;\n\t}\n\n\tpublic get widget() {\n\t\treturn this._contentHoverWidget;\n\t}\n}\n"]}