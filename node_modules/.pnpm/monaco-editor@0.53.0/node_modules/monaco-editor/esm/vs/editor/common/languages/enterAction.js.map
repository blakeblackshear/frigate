{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/languages/enterAction.ts","vs/editor/common/languages/enterAction.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAIhG,OAAO,EAAE,YAAY,EAAuB,MAAM,4BAA4B,CAAC;AAE/E,OAAO,EAAE,wBAAwB,EAAiC,MAAM,oCAAoC,CAAC;AAC7G,OAAO,EAAE,2BAA2B,EAAE,MAAM,wCAAwC,CAAC;AAErF,MAAM,UAAU,cAAc,CAC7B,UAAoC,EACpC,KAAiB,EACjB,KAAY,EACZ,4BAA2D;IAE3D,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAC5D,MAAM,UAAU,GAAG,KAAK,CAAC,uBAAuB,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAC3F,MAAM,eAAe,GAAG,4BAA4B,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAAC;IAC1F,IAAI,CAAC,eAAe,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC;IACb,CAAC;IACD,MAAM,2BAA2B,GAAG,IAAI,2BAA2B,CAAC,KAAK,EAAE,4BAA4B,CAAC,CAAC;IACzG,MAAM,sBAAsB,GAAG,2BAA2B,CAAC,mCAAmC,CAAC,KAAK,CAAC,CAAC;IACtG,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,2BAA2B,CAAC,cAAc,EAAE,CAAC;IAC7F,MAAM,eAAe,GAAG,sBAAsB,CAAC,0BAA0B,CAAC,cAAc,EAAE,CAAC;IAC3F,MAAM,cAAc,GAAG,sBAAsB,CAAC,yBAAyB,CAAC,cAAc,EAAE,CAAC;IAEzF,MAAM,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,gBAAgB,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC;IAC3G,IAAI,CAAC,WAAW,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACb,CAAC;IAED,MAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC;IAC9C,IAAI,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IACxC,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,IAAI,CAAC,CAAC;IAE/C,0HAA0H;IAC1H,IAAI,CAAC,UAAU,EAAE,CAAC;QACjB,IACC,CAAC,YAAY,KAAK,YAAY,CAAC,MAAM,CAAC;YACtC,CAAC,YAAY,KAAK,YAAY,CAAC,aAAa,CAAC,EAC5C,CAAC;YACF,UAAU,GAAG,IAAI,CAAC;QACnB,CAAC;aAAM,CAAC;YACP,UAAU,GAAG,EAAE,CAAC;QACjB,CAAC;IACF,CAAC;SAAM,IAAI,YAAY,KAAK,YAAY,CAAC,MAAM,EAAE,CAAC;QACjD,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC;IAChC,CAAC;IAED,IAAI,WAAW,GAAG,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,eAAe,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAC5F,IAAI,UAAU,EAAE,CAAC;QAChB,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC;IACzE,CAAC;IAED,OAAO;QACN,YAAY,EAAE,YAAY;QAC1B,UAAU,EAAE,UAAU;QACtB,UAAU,EAAE,UAAU;QACtB,WAAW,EAAE,WAAW;KACxB,CAAC;AACH,CAAC","file":"enterAction.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { IndentAction, CompleteEnterAction } from './languageConfiguration.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { getIndentationAtPosition, ILanguageConfigurationService } from './languageConfigurationRegistry.js';\nimport { IndentationContextProcessor } from './supports/indentationLineProcessor.js';\n\nexport function getEnterAction(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): CompleteEnterAction | null {\n\tmodel.tokenization.forceTokenization(range.startLineNumber);\n\tconst languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\tconst processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n\tconst previousLineText = processedContextTokens.previousLineProcessedTokens.getLineContent();\n\tconst beforeEnterText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n\tconst afterEnterText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n\n\tconst enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\tif (!enterResult) {\n\t\treturn null;\n\t}\n\n\tconst indentAction = enterResult.indentAction;\n\tlet appendText = enterResult.appendText;\n\tconst removeText = enterResult.removeText || 0;\n\n\t// Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\tif (!appendText) {\n\t\tif (\n\t\t\t(indentAction === IndentAction.Indent) ||\n\t\t\t(indentAction === IndentAction.IndentOutdent)\n\t\t) {\n\t\t\tappendText = '\\t';\n\t\t} else {\n\t\t\tappendText = '';\n\t\t}\n\t} else if (indentAction === IndentAction.Indent) {\n\t\tappendText = '\\t' + appendText;\n\t}\n\n\tlet indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\tif (removeText) {\n\t\tindentation = indentation.substring(0, indentation.length - removeText);\n\t}\n\n\treturn {\n\t\tindentAction: indentAction,\n\t\tappendText: appendText,\n\t\tremoveText: removeText,\n\t\tindentation: indentation\n\t};\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from '../core/range.js';\nimport { ITextModel } from '../model.js';\nimport { IndentAction, CompleteEnterAction } from './languageConfiguration.js';\nimport { EditorAutoIndentStrategy } from '../config/editorOptions.js';\nimport { getIndentationAtPosition, ILanguageConfigurationService } from './languageConfigurationRegistry.js';\nimport { IndentationContextProcessor } from './supports/indentationLineProcessor.js';\n\nexport function getEnterAction(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): CompleteEnterAction | null {\n\tmodel.tokenization.forceTokenization(range.startLineNumber);\n\tconst languageId = model.getLanguageIdAtPosition(range.startLineNumber, range.startColumn);\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\tconst indentationContextProcessor = new IndentationContextProcessor(model, languageConfigurationService);\n\tconst processedContextTokens = indentationContextProcessor.getProcessedTokenContextAroundRange(range);\n\tconst previousLineText = processedContextTokens.previousLineProcessedTokens.getLineContent();\n\tconst beforeEnterText = processedContextTokens.beforeRangeProcessedTokens.getLineContent();\n\tconst afterEnterText = processedContextTokens.afterRangeProcessedTokens.getLineContent();\n\n\tconst enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\tif (!enterResult) {\n\t\treturn null;\n\t}\n\n\tconst indentAction = enterResult.indentAction;\n\tlet appendText = enterResult.appendText;\n\tconst removeText = enterResult.removeText || 0;\n\n\t// Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\tif (!appendText) {\n\t\tif (\n\t\t\t(indentAction === IndentAction.Indent) ||\n\t\t\t(indentAction === IndentAction.IndentOutdent)\n\t\t) {\n\t\t\tappendText = '\\t';\n\t\t} else {\n\t\t\tappendText = '';\n\t\t}\n\t} else if (indentAction === IndentAction.Indent) {\n\t\tappendText = '\\t' + appendText;\n\t}\n\n\tlet indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\tif (removeText) {\n\t\tindentation = indentation.substring(0, indentation.length - removeText);\n\t}\n\n\treturn {\n\t\tindentAction: indentAction,\n\t\tappendText: appendText,\n\t\tremoveText: removeText,\n\t\tindentation: indentation\n\t};\n}\n"]}