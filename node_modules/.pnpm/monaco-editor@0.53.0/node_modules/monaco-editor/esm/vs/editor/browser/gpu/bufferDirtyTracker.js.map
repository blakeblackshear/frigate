{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/bufferDirtyTracker.ts","vs/editor/browser/gpu/bufferDirtyTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAqBhG;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAK9B,IAAI,UAAU;QACb,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,IAAI,SAAS;QACZ,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;YACpE,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,OAAO,KAAc,OAAO,IAAI,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;IAEjE;;;;OAIG;IACH,IAAI,CAAC,KAAa,EAAE,SAAiB,CAAC;QACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAClB,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC,CAAC;QAChC,CAAC;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,KAAa;QAC1B,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAChE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC1B,CAAC;QACD,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC;IACF,CAAC;IAED,KAAK;QACJ,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;CACD","file":"bufferDirtyTracker.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IBufferDirtyTrackerReader {\n\t/**\n\t * The index of the first dirty index.\n\t */\n\treadonly dataOffset: number | undefined;\n\t/**\n\t * The index of the last dirty index (inclusive).\n\t */\n\treadonly dirtySize: number | undefined;\n\t/**\n\t * Whether the buffer is dirty.\n\t */\n\treadonly isDirty: boolean;\n\t/**\n\t * Clear the dirty state.\n\t */\n\tclear(): void;\n}\n\n/**\n * A simple tracker for dirty regions in a buffer.\n */\nexport class BufferDirtyTracker implements IBufferDirtyTrackerReader {\n\n\tprivate _startIndex: number | undefined;\n\tprivate _endIndex: number | undefined;\n\n\tget dataOffset(): number | undefined {\n\t\treturn this._startIndex;\n\t}\n\n\tget dirtySize(): number | undefined {\n\t\tif (this._startIndex === undefined || this._endIndex === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._endIndex - this._startIndex + 1;\n\t}\n\n\tget isDirty(): boolean { return this._startIndex !== undefined; }\n\n\t/**\n\t * Flag the index(es) as modified. Returns the index flagged.\n\t * @param index An index to flag.\n\t * @param length An optional length to flag. Defaults to 1.\n\t */\n\tflag(index: number, length: number = 1): number {\n\t\tthis._flag(index);\n\t\tif (length > 1) {\n\t\t\tthis._flag(index + length - 1);\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate _flag(index: number) {\n\t\tif (this._startIndex === undefined || index < this._startIndex) {\n\t\t\tthis._startIndex = index;\n\t\t}\n\t\tif (this._endIndex === undefined || index > this._endIndex) {\n\t\t\tthis._endIndex = index;\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._startIndex = undefined;\n\t\tthis._endIndex = undefined;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface IBufferDirtyTrackerReader {\n\t/**\n\t * The index of the first dirty index.\n\t */\n\treadonly dataOffset: number | undefined;\n\t/**\n\t * The index of the last dirty index (inclusive).\n\t */\n\treadonly dirtySize: number | undefined;\n\t/**\n\t * Whether the buffer is dirty.\n\t */\n\treadonly isDirty: boolean;\n\t/**\n\t * Clear the dirty state.\n\t */\n\tclear(): void;\n}\n\n/**\n * A simple tracker for dirty regions in a buffer.\n */\nexport class BufferDirtyTracker implements IBufferDirtyTrackerReader {\n\n\tprivate _startIndex: number | undefined;\n\tprivate _endIndex: number | undefined;\n\n\tget dataOffset(): number | undefined {\n\t\treturn this._startIndex;\n\t}\n\n\tget dirtySize(): number | undefined {\n\t\tif (this._startIndex === undefined || this._endIndex === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._endIndex - this._startIndex + 1;\n\t}\n\n\tget isDirty(): boolean { return this._startIndex !== undefined; }\n\n\t/**\n\t * Flag the index(es) as modified. Returns the index flagged.\n\t * @param index An index to flag.\n\t * @param length An optional length to flag. Defaults to 1.\n\t */\n\tflag(index: number, length: number = 1): number {\n\t\tthis._flag(index);\n\t\tif (length > 1) {\n\t\t\tthis._flag(index + length - 1);\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate _flag(index: number) {\n\t\tif (this._startIndex === undefined || index < this._startIndex) {\n\t\t\tthis._startIndex = index;\n\t\t}\n\t\tif (this._endIndex === undefined || index > this._endIndex) {\n\t\t\tthis._endIndex = index;\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis._startIndex = undefined;\n\t\tthis._endIndex = undefined;\n\t}\n}\n"]}