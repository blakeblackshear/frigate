{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/model/textModel.ts","vs/editor/common/model/textModel.ts"],"names":[],"mappings":"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","file":"textModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { Disposable, IDisposable, MutableDisposable, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ThemeColor } from '../../../base/common/themables.js';\nimport { Constants } from '../../../base/common/uint.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ISingleEditOperation } from '../core/editOperation.js';\nimport { countEOL } from '../core/misc/eolCounter.js';\nimport { normalizeIndentation } from '../core/misc/indentation.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { IRange, Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextChange } from '../core/textChange.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/misc/textModelDefaults.js';\nimport { IWordAtPosition } from '../core/wordHelper.js';\nimport { FormattingOptions } from '../languages.js';\nimport { ILanguageSelection, ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokens/tokenizationTextModelPart.js';\nimport { AttachedViews } from './tokens/abstractSyntaxTokenBackend.js';\nimport { IBracketPairsTextModelPart } from '../textModelBracketPairs.js';\nimport { IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelOptionsChangedEvent, InternalModelContentChangeEvent, ModelInjectedTextChangedEvent, ModelRawChange, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted, ModelLineHeightChangedEvent, ModelLineHeightChanged, ModelFontChangedEvent, ModelFontChanged, LineInjectedText } from '../textModelEvents.js';\nimport { IGuidesTextModelPart } from '../textModelGuides.js';\nimport { ITokenizationTextModelPart } from '../tokenizationTextModelPart.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IColorTheme } from '../../../platform/theme/common/themeService.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { TokenArray } from '../tokens/lineTokens.js';\nimport { SetWithKey } from '../../../base/common/collections.js';\nimport { EditSources, TextModelEditSource } from '../textModelEditSource.js';\n\nexport function createTextBufferFactory(text: string): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\tbuilder.acceptChunk(text);\n\treturn builder.finish();\n}\n\nexport function createTextBufferFactoryFromSnapshot(snapshot: model.ITextSnapshot): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\n\tlet chunk: string | null;\n\twhile (typeof (chunk = snapshot.read()) === 'string') {\n\t\tbuilder.acceptChunk(chunk);\n\t}\n\n\treturn builder.finish();\n}\n\nexport function createTextBuffer(value: string | model.ITextBufferFactory | model.ITextSnapshot, defaultEOL: model.DefaultEndOfLine): { textBuffer: model.ITextBuffer; disposable: IDisposable } {\n\tlet factory: model.ITextBufferFactory;\n\tif (typeof value === 'string') {\n\t\tfactory = createTextBufferFactory(value);\n\t} else if (model.isITextSnapshot(value)) {\n\t\tfactory = createTextBufferFactoryFromSnapshot(value);\n\t} else {\n\t\tfactory = value;\n\t}\n\treturn factory.create(defaultEOL);\n}\n\nlet MODEL_ID = 0;\n\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nconst LINE_HEIGHT_CEILING = 300;\n\nclass TextModelSnapshot implements model.ITextSnapshot {\n\n\tprivate readonly _source: model.ITextSnapshot;\n\tprivate _eos: boolean;\n\n\tconstructor(source: model.ITextSnapshot) {\n\t\tthis._source = source;\n\t\tthis._eos = false;\n\t}\n\n\tpublic read(): string | null {\n\t\tif (this._eos) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet resultCnt = 0;\n\t\tlet resultLength = 0;\n\n\t\tdo {\n\t\t\tconst tmp = this._source.read();\n\n\t\t\tif (tmp === null) {\n\t\t\t\t// end-of-stream\n\t\t\t\tthis._eos = true;\n\t\t\t\tif (resultCnt === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn result.join('');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tmp.length > 0) {\n\t\t\t\tresult[resultCnt++] = tmp;\n\t\t\t\tresultLength += tmp.length;\n\t\t\t}\n\n\t\t\tif (resultLength >= 64 * 1024) {\n\t\t\t\treturn result.join('');\n\t\t\t}\n\t\t} while (true);\n\t}\n}\n\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\n\nconst enum StringOffsetValidationType {\n\t/**\n\t * Even allowed in surrogate pairs\n\t */\n\tRelaxed = 0,\n\t/**\n\t * Not allowed in surrogate pairs\n\t */\n\tSurrogatePairs = 1,\n}\n\nexport class TextModel extends Disposable implements model.ITextModel, IDecorationsTreesHost {\n\n\tstatic _MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\n\tprivate static readonly LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\n\tprivate static readonly LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\n\tprivate static readonly LARGE_FILE_HEAP_OPERATION_THRESHOLD = 256 * 1024 * 1024; // 256M characters, usually ~> 512MB memory usage\n\n\tpublic static DEFAULT_CREATION_OPTIONS: model.ITextModelCreationOptions = {\n\t\tisForSimpleWidget: false,\n\t\ttabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n\t\tindentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n\t\tinsertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n\t\tdetectIndentation: false,\n\t\tdefaultEOL: model.DefaultEndOfLine.LF,\n\t\ttrimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n\t\tlargeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n\t\tbracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n\t};\n\n\tpublic static resolveOptions(textBuffer: model.ITextBuffer, options: model.ITextModelCreationOptions): model.TextModelResolvedOptions {\n\t\tif (options.detectIndentation) {\n\t\t\tconst guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n\t\t\treturn new model.TextModelResolvedOptions({\n\t\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\t\tindentSize: 'tabSize', // TODO@Alex: guess indentSize independent of tabSize\n\t\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\t\ttrimAutoWhitespace: options.trimAutoWhitespace,\n\t\t\t\tdefaultEOL: options.defaultEOL,\n\t\t\t\tbracketPairColorizationOptions: options.bracketPairColorizationOptions,\n\t\t\t});\n\t\t}\n\n\t\treturn new model.TextModelResolvedOptions(options);\n\t}\n\n\t//#region Events\n\tprivate readonly _onWillDispose: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onWillDispose: Event<void> = this._onWillDispose.event;\n\n\tprivate readonly _onDidChangeDecorations: DidChangeDecorationsEmitter = this._register(new DidChangeDecorationsEmitter((affectedInjectedTextLines, affectedLineHeights, affectedFontLines) => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines, affectedLineHeights, affectedFontLines)));\n\tpublic readonly onDidChangeDecorations: Event<IModelDecorationsChangedEvent> = this._onDidChangeDecorations.event;\n\n\tpublic get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n\tpublic get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n\tpublic get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n\n\tprivate readonly _onDidChangeOptions: Emitter<IModelOptionsChangedEvent> = this._register(new Emitter<IModelOptionsChangedEvent>());\n\tpublic get onDidChangeOptions(): Event<IModelOptionsChangedEvent> { return this._onDidChangeOptions.event; }\n\n\tprivate readonly _onDidChangeAttached: Emitter<void> = this._register(new Emitter<void>());\n\tpublic get onDidChangeAttached(): Event<void> { return this._onDidChangeAttached.event; }\n\n\tprivate readonly _onDidChangeInjectedText: Emitter<ModelInjectedTextChangedEvent> = this._register(new Emitter<ModelInjectedTextChangedEvent>());\n\n\tprivate readonly _onDidChangeLineHeight: Emitter<ModelLineHeightChangedEvent> = this._register(new Emitter<ModelLineHeightChangedEvent>());\n\tpublic get onDidChangeLineHeight(): Event<ModelLineHeightChangedEvent> { return this._onDidChangeLineHeight.event; }\n\n\tprivate readonly _onDidChangeFont: Emitter<ModelFontChangedEvent> = this._register(new Emitter<ModelFontChangedEvent>());\n\tpublic get onDidChangeFont(): Event<ModelFontChangedEvent> { return this._onDidChangeFont.event; }\n\n\tprivate readonly _eventEmitter: DidChangeContentEmitter = this._register(new DidChangeContentEmitter());\n\tpublic onDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable {\n\t\treturn this._eventEmitter.slowEvent((e: InternalModelContentChangeEvent) => listener(e.contentChangedEvent));\n\t}\n\tpublic onDidChangeContentOrInjectedText(listener: (e: InternalModelContentChangeEvent | ModelInjectedTextChangedEvent) => void): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis._eventEmitter.fastEvent(e => listener(e)),\n\t\t\tthis._onDidChangeInjectedText.event(e => listener(e))\n\t\t);\n\t}\n\t//#endregion\n\n\tpublic readonly id: string;\n\tpublic readonly isForSimpleWidget: boolean;\n\tprivate readonly _associatedResource: URI;\n\tprivate _attachedEditorCount: number;\n\tprivate _buffer: model.ITextBuffer;\n\tprivate _bufferDisposable: IDisposable;\n\tprivate _options: model.TextModelResolvedOptions;\n\tprivate readonly _languageSelectionListener = this._register(new MutableDisposable<IDisposable>());\n\n\tprivate _isDisposed: boolean;\n\tprivate __isDisposing: boolean;\n\tpublic _isDisposing(): boolean { return this.__isDisposing; }\n\tprivate _versionId: number;\n\t/**\n\t * Unlike, versionId, this can go down (via undo) or go to previous values (via redo)\n\t */\n\tprivate _alternativeVersionId: number;\n\tprivate _initialUndoRedoSnapshot: ResourceEditStackSnapshot | null;\n\tprivate readonly _isTooLargeForSyncing: boolean;\n\tprivate readonly _isTooLargeForTokenization: boolean;\n\tprivate readonly _isTooLargeForHeapOperation: boolean;\n\n\t//#region Editing\n\tprivate readonly _commandManager: EditStack;\n\tprivate _isUndoing: boolean;\n\tprivate _isRedoing: boolean;\n\tprivate _trimAutoWhitespaceLines: number[] | null;\n\t//#endregion\n\n\t//#region Decorations\n\t/**\n\t * Used to workaround broken clients that might attempt using a decoration id generated by a different model.\n\t * It is not globally unique in order to limit it to one character.\n\t */\n\tprivate readonly _instanceId: string;\n\tprivate _deltaDecorationCallCnt: number = 0;\n\tprivate _lastDecorationId: number;\n\tprivate _decorations: { [decorationId: string]: IntervalNode };\n\tprivate _decorationsTree: DecorationsTrees;\n\tprivate readonly _decorationProvider: ColorizedBracketPairsDecorationProvider;\n\t//#endregion\n\n\tprivate readonly _tokenizationTextModelPart: TokenizationTextModelPart;\n\tpublic get tokenization(): ITokenizationTextModelPart { return this._tokenizationTextModelPart; }\n\n\tprivate readonly _bracketPairs: BracketPairsTextModelPart;\n\tpublic get bracketPairs(): IBracketPairsTextModelPart { return this._bracketPairs; }\n\n\tprivate readonly _guidesTextModelPart: GuidesTextModelPart;\n\tpublic get guides(): IGuidesTextModelPart { return this._guidesTextModelPart; }\n\n\tprivate readonly _attachedViews = new AttachedViews();\n\n\tconstructor(\n\t\tsource: string | model.ITextBufferFactory,\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tcreationOptions: model.ITextModelCreationOptions,\n\t\tassociatedResource: URI | null = null,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\t// Generate a new unique model id\n\t\tMODEL_ID++;\n\t\tthis.id = '$model' + MODEL_ID;\n\t\tthis.isForSimpleWidget = creationOptions.isForSimpleWidget;\n\t\tif (typeof associatedResource === 'undefined' || associatedResource === null) {\n\t\t\tthis._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n\t\t} else {\n\t\t\tthis._associatedResource = associatedResource;\n\t\t}\n\t\tthis._attachedEditorCount = 0;\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable = disposable;\n\n\t\tconst bufferLineCount = this._buffer.getLineCount();\n\t\tconst bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), model.EndOfLinePreference.TextDefined);\n\n\t\t// !!! Make a decision in the ctor and permanently respect this decision !!!\n\t\t// If a model is too large at construction time, it will never get tokenized,\n\t\t// under no circumstances.\n\t\tif (creationOptions.largeFileOptimizations) {\n\t\t\tthis._isTooLargeForTokenization = (\n\t\t\t\t(bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n\t\t\t\t|| (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD)\n\t\t\t);\n\n\t\t\tthis._isTooLargeForHeapOperation = bufferTextLength > TextModel.LARGE_FILE_HEAP_OPERATION_THRESHOLD;\n\t\t} else {\n\t\t\tthis._isTooLargeForTokenization = false;\n\t\t\tthis._isTooLargeForHeapOperation = false;\n\t\t}\n\n\t\tthis._options = TextModel.resolveOptions(this._buffer, creationOptions);\n\n\t\tconst languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n\t\tif (typeof languageIdOrSelection !== 'string') {\n\t\t\tthis._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n\t\t}\n\n\t\tthis._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n\t\tthis._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n\t\tthis._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n\t\tthis._tokenizationTextModelPart = this.instantiationService.createInstance(TokenizationTextModelPart,\n\t\t\tthis,\n\t\t\tthis._bracketPairs,\n\t\t\tlanguageId,\n\t\t\tthis._attachedViews\n\t\t);\n\n\t\tthis._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n\n\t\tthis._versionId = 1;\n\t\tthis._alternativeVersionId = 1;\n\t\tthis._initialUndoRedoSnapshot = null;\n\n\t\tthis._isDisposed = false;\n\t\tthis.__isDisposing = false;\n\n\t\tthis._instanceId = strings.singleLetterHash(MODEL_ID);\n\t\tthis._lastDecorationId = 0;\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\tthis._commandManager = new EditStack(this, this._undoRedoService);\n\t\tthis._isUndoing = false;\n\t\tthis._isRedoing = false;\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\n\t\tthis._register(this._decorationProvider.onDidChange(() => {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.fire();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}));\n\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\n\t\tthis._register(this._languageConfigurationService.onDidChange(e => {\n\t\t\tthis._bracketPairs.handleLanguageConfigurationServiceChange(e);\n\t\t\tthis._tokenizationTextModelPart.handleLanguageConfigurationServiceChange(e);\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.__isDisposing = true;\n\t\tthis._onWillDispose.fire();\n\t\tthis._tokenizationTextModelPart.dispose();\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t\tthis._bufferDisposable.dispose();\n\t\tthis.__isDisposing = false;\n\t\t// Manually release reference to previous text buffer to avoid large leaks\n\t\t// in case someone leaks a TextModel reference\n\t\tconst emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n\t\temptyDisposedTextBuffer.dispose();\n\t\tthis._buffer = emptyDisposedTextBuffer;\n\t\tthis._bufferDisposable = Disposable.None;\n\t}\n\n\tprivate _assertNotDisposed(): void {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new BugIndicatingError('Model is disposed!');\n\t\t}\n\t}\n\n\tpublic getTextBuffer(): model.ITextBuffer {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer;\n\t}\n\n\tprivate _emitContentChangedEvent(rawChange: ModelRawContentChangedEvent, change: IModelContentChangedEvent): void {\n\t\tif (this.__isDisposing) {\n\t\t\t// Do not confuse listeners by emitting any event after disposing\n\t\t\treturn;\n\t\t}\n\t\tthis._tokenizationTextModelPart.handleDidChangeContent(change);\n\t\tthis._bracketPairs.handleDidChangeContent(change);\n\t\tthis._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n\t}\n\n\tpublic setValue(value: string | model.ITextSnapshot, reason = EditSources.setValue()): void {\n\t\tthis._assertNotDisposed();\n\n\t\tif (value === null || value === undefined) {\n\t\t\tthrow illegalArgument();\n\t\t}\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n\t\tthis._setValueFromTextBuffer(textBuffer, disposable, reason);\n\t}\n\n\tprivate _createContentChanged2(range: Range, rangeOffset: number, rangeLength: number, rangeEndPosition: Position, text: string, isUndoing: boolean, isRedoing: boolean, isFlush: boolean, isEolChange: boolean, reason: TextModelEditSource): IModelContentChangedEvent {\n\t\treturn {\n\t\t\tchanges: [{\n\t\t\t\trange: range,\n\t\t\t\trangeOffset: rangeOffset,\n\t\t\t\trangeLength: rangeLength,\n\t\t\t\ttext: text,\n\t\t\t}],\n\t\t\teol: this._buffer.getEOL(),\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: this.getVersionId(),\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t\tdetailedReasons: [reason],\n\t\t\tdetailedReasonsChangeLengths: [1],\n\t\t};\n\t}\n\n\tprivate _setValueFromTextBuffer(textBuffer: model.ITextBuffer, textBufferDisposable: IDisposable, reason: TextModelEditSource): void {\n\t\tthis._assertNotDisposed();\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable.dispose();\n\t\tthis._bufferDisposable = textBufferDisposable;\n\t\tthis._increaseVersionId();\n\n\t\t// Destroy all my decorations\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\t// Destroy my edit history and settings\n\t\tthis._commandManager.clear();\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[\n\t\t\t\t\tnew ModelRawFlush()\n\t\t\t\t],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tthis._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, new Position(endLineNumber, endColumn), this.getValue(), false, false, true, false, reason)\n\t\t);\n\t}\n\n\tpublic setEOL(eol: model.EndOfLineSequence): void {\n\t\tthis._assertNotDisposed();\n\t\tconst newEOL = (eol === model.EndOfLineSequence.CRLF ? '\\r\\n' : '\\n');\n\t\tif (this._buffer.getEOL() === newEOL) {\n\t\t\t// Nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._onBeforeEOLChange();\n\t\tthis._buffer.setEOL(newEOL);\n\t\tthis._increaseVersionId();\n\t\tthis._onAfterEOLChange();\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[\n\t\t\t\t\tnew ModelRawEOLChanged()\n\t\t\t\t],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tthis._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, new Position(endLineNumber, endColumn), this.getValue(), false, false, false, true, EditSources.eolChange())\n\t\t);\n\t}\n\n\tprivate _onBeforeEOLChange(): void {\n\t\t// Ensure all decorations get their `range` set.\n\t\tthis._decorationsTree.ensureAllNodesHaveRanges(this);\n\t}\n\n\tprivate _onAfterEOLChange(): void {\n\t\t// Transform back `range` to offsets\n\t\tconst versionId = this.getVersionId();\n\t\tconst allDecorations = this._decorationsTree.collectNodesPostOrder();\n\t\tfor (let i = 0, len = allDecorations.length; i < len; i++) {\n\t\t\tconst node = allDecorations[i];\n\t\t\tconst range = node.range!; // the range is defined due to `_onBeforeEOLChange`\n\n\t\t\tconst delta = node.cachedAbsoluteStart - node.start;\n\n\t\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\t\tnode.cachedAbsoluteStart = startOffset;\n\t\t\tnode.cachedAbsoluteEnd = endOffset;\n\t\t\tnode.cachedVersionId = versionId;\n\n\t\t\tnode.start = startOffset - delta;\n\t\t\tnode.end = endOffset - delta;\n\n\t\t\trecomputeMaxEnd(node);\n\t\t}\n\t}\n\n\tpublic onBeforeAttached(): model.IAttachedView {\n\t\tthis._attachedEditorCount++;\n\t\tif (this._attachedEditorCount === 1) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\treturn this._attachedViews.attachView();\n\t}\n\n\tpublic onBeforeDetached(view: model.IAttachedView): void {\n\t\tthis._attachedEditorCount--;\n\t\tif (this._attachedEditorCount === 0) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\tthis._attachedViews.detachView(view);\n\t}\n\n\tpublic isAttachedToEditor(): boolean {\n\t\treturn this._attachedEditorCount > 0;\n\t}\n\n\tpublic getAttachedEditorCount(): number {\n\t\treturn this._attachedEditorCount;\n\t}\n\n\tpublic isTooLargeForSyncing(): boolean {\n\t\treturn this._isTooLargeForSyncing;\n\t}\n\n\tpublic isTooLargeForTokenization(): boolean {\n\t\treturn this._isTooLargeForTokenization;\n\t}\n\n\tpublic isTooLargeForHeapOperation(): boolean {\n\t\treturn this._isTooLargeForHeapOperation;\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tpublic isDominatedByLongLines(): boolean {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForTokenization()) {\n\t\t\t// Cannot word wrap huge files anyways, so it doesn't really matter\n\t\t\treturn false;\n\t\t}\n\t\tlet smallLineCharCount = 0;\n\t\tlet longLineCharCount = 0;\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tfor (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineLength = this._buffer.getLineLength(lineNumber);\n\t\t\tif (lineLength >= LONG_LINE_BOUNDARY) {\n\t\t\t\tlongLineCharCount += lineLength;\n\t\t\t} else {\n\t\t\t\tsmallLineCharCount += lineLength;\n\t\t\t}\n\t\t}\n\n\t\treturn (longLineCharCount > smallLineCharCount);\n\t}\n\n\tpublic get uri(): URI {\n\t\treturn this._associatedResource;\n\t}\n\n\t//#region Options\n\n\tpublic getOptions(): model.TextModelResolvedOptions {\n\t\tthis._assertNotDisposed();\n\t\treturn this._options;\n\t}\n\n\tpublic getFormattingOptions(): FormattingOptions {\n\t\treturn {\n\t\t\ttabSize: this._options.indentSize,\n\t\t\tinsertSpaces: this._options.insertSpaces\n\t\t};\n\t}\n\n\tpublic updateOptions(_newOpts: model.ITextModelUpdateOptions): void {\n\t\tthis._assertNotDisposed();\n\t\tconst tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n\t\tconst indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n\t\tconst insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n\t\tconst trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n\t\tconst bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n\n\t\tconst newOpts = new model.TextModelResolvedOptions({\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdefaultEOL: this._options.defaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tbracketPairColorizationOptions,\n\t\t});\n\n\t\tif (this._options.equals(newOpts)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst e = this._options.createChangeEvent(newOpts);\n\t\tthis._options = newOpts;\n\n\t\tthis._bracketPairs.handleDidChangeOptions(e);\n\t\tthis._decorationProvider.handleDidChangeOptions(e);\n\t\tthis._onDidChangeOptions.fire(e);\n\t}\n\n\tpublic detectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void {\n\t\tthis._assertNotDisposed();\n\t\tconst guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n\t\tthis.updateOptions({\n\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\tindentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n\t\t});\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\tthis._assertNotDisposed();\n\t\treturn normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n\t}\n\n\t//#endregion\n\n\t//#region Reading\n\n\tpublic getVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._versionId;\n\t}\n\n\tpublic mightContainRTL(): boolean {\n\t\treturn this._buffer.mightContainRTL();\n\t}\n\n\tpublic mightContainUnusualLineTerminators(): boolean {\n\t\treturn this._buffer.mightContainUnusualLineTerminators();\n\t}\n\n\tpublic removeUnusualLineTerminators(selections: Selection[] | null = null): void {\n\t\tconst matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\t\tthis._buffer.resetMightContainUnusualLineTerminators();\n\t\tthis.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n\t}\n\n\tpublic mightContainNonBasicASCII(): boolean {\n\t\treturn this._buffer.mightContainNonBasicASCII();\n\t}\n\n\tpublic getAlternativeVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._alternativeVersionId;\n\t}\n\n\tpublic getInitialUndoRedoSnapshot(): ResourceEditStackSnapshot | null {\n\t\tthis._assertNotDisposed();\n\t\treturn this._initialUndoRedoSnapshot;\n\t}\n\n\tpublic getOffsetAt(rawPosition: IPosition): number {\n\t\tthis._assertNotDisposed();\n\t\tconst position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, StringOffsetValidationType.Relaxed);\n\t\treturn this._buffer.getOffsetAt(position.lineNumber, position.column);\n\t}\n\n\tpublic getPositionAt(rawOffset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n\t\treturn this._buffer.getPositionAt(offset);\n\t}\n\n\tprivate _increaseVersionId(): void {\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._alternativeVersionId = this._versionId;\n\t}\n\n\tpublic _overwriteVersionId(versionId: number): void {\n\t\tthis._versionId = versionId;\n\t}\n\n\tpublic _overwriteAlternativeVersionId(newAlternativeVersionId: number): void {\n\t\tthis._alternativeVersionId = newAlternativeVersionId;\n\t}\n\n\tpublic _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot: ResourceEditStackSnapshot | null): void {\n\t\tthis._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n\t}\n\n\tpublic getValue(eol?: model.EndOfLinePreference, preserveBOM: boolean = false): string {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError('Operation would exceed heap memory limits');\n\t\t}\n\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM() + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic createSnapshot(preserveBOM: boolean = false): model.ITextSnapshot {\n\t\treturn new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n\t}\n\n\tpublic getValueLength(eol?: model.EndOfLinePreference, preserveBOM: boolean = false): number {\n\t\tthis._assertNotDisposed();\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM().length + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic getValueInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getValueLengthInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getCharacterCountInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getLineCount(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getLineCount();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\n\t\treturn this._buffer.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\n\t\treturn this._buffer.getLineLength(lineNumber);\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError('Operation would exceed heap memory limits');\n\t\t}\n\n\t\treturn this._buffer.getLinesContent();\n\t}\n\n\tpublic getEOL(): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getEOL();\n\t}\n\n\tpublic getEndOfLineSequence(): model.EndOfLineSequence {\n\t\tthis._assertNotDisposed();\n\t\treturn (\n\t\t\tthis._buffer.getEOL() === '\\n'\n\t\t\t\t? model.EndOfLineSequence.LF\n\t\t\t\t: model.EndOfLineSequence.CRLF\n\t\t);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineLength(lineNumber) + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n\t}\n\n\t/**\n\t * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n\t * Will try to not allocate if possible.\n\t */\n\tpublic _validateRangeRelaxedNoAllocations(range: IRange): Range {\n\t\tconst linesCount = this._buffer.getLineCount();\n\n\t\tconst initialStartLineNumber = range.startLineNumber;\n\t\tconst initialStartColumn = range.startColumn;\n\t\tlet startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n\t\tlet startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n\n\t\tif (startLineNumber < 1) {\n\t\t\tstartLineNumber = 1;\n\t\t\tstartColumn = 1;\n\t\t} else if (startLineNumber > linesCount) {\n\t\t\tstartLineNumber = linesCount;\n\t\t\tstartColumn = this.getLineMaxColumn(startLineNumber);\n\t\t} else {\n\t\t\tif (startColumn <= 1) {\n\t\t\t\tstartColumn = 1;\n\t\t\t} else {\n\t\t\t\tconst maxColumn = this.getLineMaxColumn(startLineNumber);\n\t\t\t\tif (startColumn >= maxColumn) {\n\t\t\t\t\tstartColumn = maxColumn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst initialEndLineNumber = range.endLineNumber;\n\t\tconst initialEndColumn = range.endColumn;\n\t\tlet endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n\t\tlet endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n\n\t\tif (endLineNumber < 1) {\n\t\t\tendLineNumber = 1;\n\t\t\tendColumn = 1;\n\t\t} else if (endLineNumber > linesCount) {\n\t\t\tendLineNumber = linesCount;\n\t\t\tendColumn = this.getLineMaxColumn(endLineNumber);\n\t\t} else {\n\t\t\tif (endColumn <= 1) {\n\t\t\t\tendColumn = 1;\n\t\t\t} else {\n\t\t\t\tconst maxColumn = this.getLineMaxColumn(endLineNumber);\n\t\t\t\tif (endColumn >= maxColumn) {\n\t\t\t\t\tendColumn = maxColumn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tinitialStartLineNumber === startLineNumber\n\t\t\t&& initialStartColumn === startColumn\n\t\t\t&& initialEndLineNumber === endLineNumber\n\t\t\t&& initialEndColumn === endColumn\n\t\t\t&& range instanceof Range\n\t\t\t&& !(range instanceof Selection)\n\t\t) {\n\t\t\treturn range;\n\t\t}\n\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tprivate _isValidPosition(lineNumber: number, column: number, validationType: StringOffsetValidationType): boolean {\n\t\tif (typeof lineNumber !== 'number' || typeof column !== 'number') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isNaN(lineNumber) || isNaN(column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lineNumber < 1 || column < 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (column === 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column > maxColumn) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _validatePosition(_lineNumber: number, _column: number, validationType: StringOffsetValidationType): Position {\n\t\tconst lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n\t\tconst column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n\t\tconst lineCount = this._buffer.getLineCount();\n\n\t\tif (lineNumber < 1) {\n\t\t\treturn new Position(1, 1);\n\t\t}\n\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn new Position(lineCount, this.getLineMaxColumn(lineCount));\n\t\t}\n\n\t\tif (column <= 1) {\n\t\t\treturn new Position(lineNumber, 1);\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column >= maxColumn) {\n\t\t\treturn new Position(lineNumber, maxColumn);\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// If the position would end up in the middle of a high-low surrogate pair,\n\t\t\t// we move it to before the pair\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn new Position(lineNumber, column - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic validatePosition(position: IPosition): Position {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif (position instanceof Position) {\n\t\t\tif (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n\t\t\t\treturn position;\n\t\t\t}\n\t\t}\n\n\t\treturn this._validatePosition(position.lineNumber, position.column, validationType);\n\t}\n\n\tpublic isValidRange(range: Range): boolean {\n\t\treturn this._isValidRange(range, StringOffsetValidationType.SurrogatePairs);\n\t}\n\n\tprivate _isValidRange(range: Range, validationType: StringOffsetValidationType): boolean {\n\t\tconst startLineNumber = range.startLineNumber;\n\t\tconst startColumn = range.startColumn;\n\t\tconst endLineNumber = range.endLineNumber;\n\t\tconst endColumn = range.endColumn;\n\n\t\tif (!this._isValidPosition(startLineNumber, startColumn, StringOffsetValidationType.Relaxed)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._isValidPosition(endLineNumber, endColumn, StringOffsetValidationType.Relaxed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n\t\t\tconst charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n\n\t\t\tconst startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic validateRange(_range: IRange): Range {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif ((_range instanceof Range) && !(_range instanceof Selection)) {\n\t\t\tif (this._isValidRange(_range, validationType)) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t}\n\n\t\tconst start = this._validatePosition(_range.startLineNumber, _range.startColumn, StringOffsetValidationType.Relaxed);\n\t\tconst end = this._validatePosition(_range.endLineNumber, _range.endColumn, StringOffsetValidationType.Relaxed);\n\n\t\tconst startLineNumber = start.lineNumber;\n\t\tconst startColumn = start.column;\n\t\tconst endLineNumber = end.lineNumber;\n\t\tconst endColumn = end.column;\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n\t\t\tconst charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n\n\t\t\tconst startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t\t\t}\n\n\t\t\tif (startLineNumber === endLineNumber && startColumn === endColumn) {\n\t\t\t\t// do not expand a collapsed range, simply move it to a valid location\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair && endInsideSurrogatePair) {\n\t\t\t\t// expand range at both ends\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair) {\n\t\t\t\t// only expand range at the start\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n\t\t\t}\n\n\t\t\t// only expand range at the end\n\t\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n\t\t}\n\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tpublic modifyPosition(rawPosition: IPosition, offset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst candidate = this.getOffsetAt(rawPosition) + offset;\n\t\treturn this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n\t}\n\n\tpublic getFullModelRange(): Range {\n\t\tthis._assertNotDisposed();\n\t\tconst lineCount = this.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n\t}\n\n\tprivate findMatchesLineByLine(searchRange: Range, searchData: model.SearchData, captureMatches: boolean, limitResultCount: number): model.FindMatch[] {\n\t\treturn this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t}\n\n\tpublic findMatches(searchString: string, rawSearchScope: any, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount: number = LIMIT_FIND_COUNT): model.FindMatch[] {\n\t\tthis._assertNotDisposed();\n\n\t\tlet searchRanges: Range[] | null = null;\n\n\t\tif (rawSearchScope !== null) {\n\t\t\tif (!Array.isArray(rawSearchScope)) {\n\t\t\t\trawSearchScope = [rawSearchScope];\n\t\t\t}\n\n\t\t\tif (rawSearchScope.every((searchScope: Range) => Range.isIRange(searchScope))) {\n\t\t\t\tsearchRanges = rawSearchScope.map((searchScope: Range) => this.validateRange(searchScope));\n\t\t\t}\n\t\t}\n\n\t\tif (searchRanges === null) {\n\t\t\tsearchRanges = [this.getFullModelRange()];\n\t\t}\n\n\t\tsearchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n\n\t\tconst uniqueSearchRanges: Range[] = [];\n\t\tuniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n\t\t\tif (Range.areIntersecting(prev, curr)) {\n\t\t\t\treturn prev.plusRange(curr);\n\t\t\t}\n\n\t\t\tuniqueSearchRanges.push(prev);\n\t\t\treturn curr;\n\t\t}));\n\n\t\tlet matchMapper: (value: Range, index: number, array: Range[]) => model.FindMatch[];\n\t\tif (!isRegex && searchString.indexOf('\\n') < 0) {\n\t\t\t// not regex, not multi line\n\t\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\n\t\t\tif (!searchData) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tmatchMapper = (searchRange: Range) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t\t} else {\n\t\t\tmatchMapper = (searchRange: Range) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n\t\t}\n\n\t\treturn uniqueSearchRanges.map(matchMapper).reduce((arr, matches: model.FindMatch[]) => arr.concat(matches), []);\n\t}\n\n\tpublic findNextMatch(searchString: string, rawSearchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\n\t\tif (!isRegex && searchString.indexOf('\\n') < 0) {\n\t\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\t\t\tif (!searchData) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst lineCount = this.getLineCount();\n\t\t\tlet searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n\t\t\tlet ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n\t\t\tTextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\tsearchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n\t\t\tret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t}\n\n\tpublic findPreviousMatch(searchString: string, rawSearchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\t\treturn TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t}\n\n\t//#endregion\n\n\t//#region Editing\n\n\tpublic pushStackElement(): void {\n\t\tthis._commandManager.pushStackElement();\n\t}\n\n\tpublic popStackElement(): void {\n\t\tthis._commandManager.popStackElement();\n\t}\n\n\tpublic pushEOL(eol: model.EndOfLineSequence): void {\n\t\tconst currentEOL = (this.getEOL() === '\\n' ? model.EndOfLineSequence.LF : model.EndOfLineSequence.CRLF);\n\t\tif (currentEOL === eol) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\t\tthis._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n\t\t\t}\n\t\t\tthis._commandManager.pushEOL(eol);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _validateEditOperation(rawOperation: model.IIdentifiedSingleEditOperation): model.ValidAnnotatedEditOperation {\n\t\tif (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n\t\t\treturn rawOperation;\n\t\t}\n\t\treturn new model.ValidAnnotatedEditOperation(\n\t\t\trawOperation.identifier || null,\n\t\t\tthis.validateRange(rawOperation.range),\n\t\t\trawOperation.text,\n\t\t\trawOperation.forceMoveMarkers || false,\n\t\t\trawOperation.isAutoWhitespaceEdit || false,\n\t\t\trawOperation._isTracked || false\n\t\t);\n\t}\n\n\tprivate _validateEditOperations(rawOperations: readonly model.IIdentifiedSingleEditOperation[]): model.ValidAnnotatedEditOperation[] {\n\t\tconst result: model.ValidAnnotatedEditOperation[] = [];\n\t\tfor (let i = 0, len = rawOperations.length; i < len; i++) {\n\t\t\tresult[i] = this._validateEditOperation(rawOperations[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic pushEditOperations(beforeCursorState: Selection[] | null, editOperations: model.IIdentifiedSingleEditOperation[], cursorStateComputer: model.ICursorStateComputer | null, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\treturn this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group, reason);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _pushEditOperations(beforeCursorState: Selection[] | null, editOperations: model.ValidAnnotatedEditOperation[], cursorStateComputer: model.ICursorStateComputer | null, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null {\n\t\tif (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n\t\t\t// Go through each saved line number and insert a trim whitespace edit\n\t\t\t// if it is safe to do so (no conflicts with other edits).\n\n\t\t\tconst incomingEdits = editOperations.map((op) => {\n\t\t\t\treturn {\n\t\t\t\t\trange: this.validateRange(op.range),\n\t\t\t\t\ttext: op.text\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n\t\t\t// We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n\t\t\tlet editsAreNearCursors = true;\n\t\t\tif (beforeCursorState) {\n\t\t\t\tfor (let i = 0, len = beforeCursorState.length; i < len; i++) {\n\t\t\t\t\tconst sel = beforeCursorState[i];\n\t\t\t\t\tlet foundEditNearSel = false;\n\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n\t\t\t\t\t\tconst selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n\t\t\t\t\t\tif (!selIsAbove && !selIsBelow) {\n\t\t\t\t\t\t\tfoundEditNearSel = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!foundEditNearSel) {\n\t\t\t\t\t\teditsAreNearCursors = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editsAreNearCursors) {\n\t\t\t\tfor (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n\t\t\t\t\tconst trimLineNumber = this._trimAutoWhitespaceLines[i];\n\t\t\t\t\tconst maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n\n\t\t\t\t\tlet allowTrimLine = true;\n\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst editText = incomingEdits[j].text;\n\n\t\t\t\t\t\tif (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n\t\t\t\t\t\t\t// `trimLine` is completely outside this edit\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// At this point:\n\t\t\t\t\t\t//   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n\t\t\t\t\t\t\t&& editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) after `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n\t\t\t\t\t\t\t&& editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) before `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Looks like we can't trim this line as it would interfere with an incoming edit\n\t\t\t\t\t\tallowTrimLine = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowTrimLine) {\n\t\t\t\t\t\tconst trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n\t\t\t\t\t\teditOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._trimAutoWhitespaceLines = null;\n\t\t}\n\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\tthis._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n\t\t}\n\t\treturn this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group, reason);\n\t}\n\n\t_applyUndo(changes: TextChange[], eol: model.EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.newPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.newEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n\t\t\t\ttext: change.oldText\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n\t}\n\n\t_applyRedo(changes: TextChange[], eol: model.EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.oldPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.oldEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n\t\t\t\ttext: change.newText\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n\t}\n\n\tprivate _applyUndoRedoEdits(edits: ISingleEditOperation[], eol: model.EndOfLineSequence, isUndoing: boolean, isRedoing: boolean, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tthis._isUndoing = isUndoing;\n\t\t\tthis._isRedoing = isRedoing;\n\t\t\tthis.applyEdits(edits, false);\n\t\t\tthis.setEOL(eol);\n\t\t\tthis._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n\t\t} finally {\n\t\t\tthis._isUndoing = false;\n\t\t\tthis._isRedoing = false;\n\t\t\tthis._eventEmitter.endDeferredEmit(resultingSelection);\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[]): void;\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: true): model.IValidEditOperation[];\n\t/** @internal */\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: false, reason: TextModelEditSource): void;\n\t/** @internal */\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: true, reason: TextModelEditSource): model.IValidEditOperation[];\n\tpublic applyEdits(rawOperations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits?: boolean, reason?: TextModelEditSource): void | model.IValidEditOperation[] {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tconst operations = this._validateEditOperations(rawOperations);\n\n\t\t\treturn this._doApplyEdits(operations, computeUndoEdits ?? false, reason ?? EditSources.applyEdits());\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _doApplyEdits(rawOperations: model.ValidAnnotatedEditOperation[], computeUndoEdits: boolean, reason: TextModelEditSource): void | model.IValidEditOperation[] {\n\n\t\tconst oldLineCount = this._buffer.getLineCount();\n\t\tconst result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n\t\tconst newLineCount = this._buffer.getLineCount();\n\n\t\tconst contentChanges = result.changes;\n\t\tthis._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n\n\t\tif (contentChanges.length !== 0) {\n\t\t\t// We do a first pass to update decorations\n\t\t\t// because we want to read decorations in the second pass\n\t\t\t// where we will emit content change events\n\t\t\t// and we want to read the final decorations\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tthis._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n\t\t\t}\n\n\t\t\tconst rawContentChanges: ModelRawChange[] = [];\n\n\t\t\tthis._increaseVersionId();\n\n\t\t\tlet lineCount = oldLineCount;\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tconst [eolCount] = countEOL(change.text);\n\t\t\t\tthis._onDidChangeDecorations.fire();\n\n\t\t\t\tconst startLineNumber = change.range.startLineNumber;\n\t\t\t\tconst endLineNumber = change.range.endLineNumber;\n\n\t\t\t\tconst deletingLinesCnt = endLineNumber - startLineNumber;\n\t\t\t\tconst insertingLinesCnt = eolCount;\n\t\t\t\tconst editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n\n\t\t\t\tconst changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n\n\t\t\t\tconst currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n\t\t\t\tconst firstEditLineNumber = currentEditStartLineNumber;\n\t\t\t\tconst lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n\n\t\t\t\tconst decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(\n\t\t\t\t\tthis,\n\t\t\t\t\tthis.getOffsetAt(new Position(firstEditLineNumber, 1)),\n\t\t\t\t\tthis.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))),\n\t\t\t\t\t0\n\t\t\t\t);\n\n\n\t\t\t\tconst injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n\n\t\t\t\tfor (let j = editingLinesCnt; j >= 0; j--) {\n\t\t\t\t\tconst editLineNumber = startLineNumber + j;\n\t\t\t\t\tconst currentEditLineNumber = currentEditStartLineNumber + j;\n\n\t\t\t\t\tinjectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n\t\t\t\t\tconst decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLineChanged(\n\t\t\t\t\t\t\teditLineNumber,\n\t\t\t\t\t\t\tthis.getLineContent(currentEditLineNumber),\n\t\t\t\t\t\t\tdecorationsInCurrentLine\n\t\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < deletingLinesCnt) {\n\t\t\t\t\t// Must delete some lines\n\t\t\t\t\tconst spliceStartLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\trawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < insertingLinesCnt) {\n\t\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n\t\t\t\t\t// Must insert some lines\n\t\t\t\t\tconst spliceLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\tconst cnt = insertingLinesCnt - editingLinesCnt;\n\t\t\t\t\tconst fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n\t\t\t\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\t\t\t\tconst newLines: string[] = [];\n\t\t\t\t\tfor (let i = 0; i < cnt; i++) {\n\t\t\t\t\t\tconst lineNumber = fromLineNumber + i;\n\t\t\t\t\t\tnewLines[i] = this.getLineContent(lineNumber);\n\n\t\t\t\t\t\tinjectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n\t\t\t\t\t\tinjectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n\t\t\t\t\t}\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLinesInserted(\n\t\t\t\t\t\t\tspliceLineNumber + 1,\n\t\t\t\t\t\t\tstartLineNumber + insertingLinesCnt,\n\t\t\t\t\t\t\tnewLines,\n\t\t\t\t\t\t\tinjectedTexts\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlineCount += changeLineCountDelta;\n\t\t\t}\n\n\t\t\tthis._emitContentChangedEvent(\n\t\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t\trawContentChanges,\n\t\t\t\t\tthis.getVersionId(),\n\t\t\t\t\tthis._isUndoing,\n\t\t\t\t\tthis._isRedoing\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tchanges: contentChanges,\n\t\t\t\t\teol: this._buffer.getEOL(),\n\t\t\t\t\tisEolChange: false,\n\t\t\t\t\tversionId: this.getVersionId(),\n\t\t\t\t\tisUndoing: this._isUndoing,\n\t\t\t\t\tisRedoing: this._isRedoing,\n\t\t\t\t\tisFlush: false,\n\t\t\t\t\tdetailedReasons: [reason],\n\t\t\t\t\tdetailedReasonsChangeLengths: [contentChanges.length],\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn (result.reverseEdits === null ? undefined : result.reverseEdits);\n\t}\n\n\tpublic undo(): void | Promise<void> {\n\t\treturn this._undoRedoService.undo(this.uri);\n\t}\n\n\tpublic canUndo(): boolean {\n\t\treturn this._undoRedoService.canUndo(this.uri);\n\t}\n\n\tpublic redo(): void | Promise<void> {\n\t\treturn this._undoRedoService.redo(this.uri);\n\t}\n\n\tpublic canRedo(): boolean {\n\t\treturn this._undoRedoService.canRedo(this.uri);\n\t}\n\n\t//#endregion\n\n\t//#region Decorations\n\n\tprivate handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines: Set<number> | null, affectedLineHeights: Set<LineHeightChangingDecoration> | null, affectedFontLines: Set<LineFontChangingDecoration> | null): void {\n\t\t// This is called before the decoration changed event is fired.\n\n\t\tif (affectedInjectedTextLines && affectedInjectedTextLines.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedInjectedTextLines);\n\t\t\tconst lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n\t\t\tthis._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n\t\t}\n\t\tif (affectedLineHeights && affectedLineHeights.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedLineHeights);\n\t\t\tconst lineHeightChangeEvent = affectedLines.map(specialLineHeightChange => new ModelLineHeightChanged(specialLineHeightChange.ownerId, specialLineHeightChange.decorationId, specialLineHeightChange.lineNumber, specialLineHeightChange.lineHeight));\n\t\t\tthis._onDidChangeLineHeight.fire(new ModelLineHeightChangedEvent(lineHeightChangeEvent));\n\t\t}\n\t\tif (affectedFontLines && affectedFontLines.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedFontLines);\n\t\t\tconst fontChangeEvent = affectedLines.map(fontChange => new ModelFontChanged(fontChange.ownerId, fontChange.lineNumber));\n\t\t\tthis._onDidChangeFont.fire(new ModelFontChangedEvent(fontChangeEvent));\n\t\t}\n\t}\n\n\tpublic changeDecorations<T>(callback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T, ownerId: number = 0): T | null {\n\t\tthis._assertNotDisposed();\n\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._changeDecorations(ownerId, callback);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _changeDecorations<T>(ownerId: number, callback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T): T | null {\n\t\tconst changeAccessor: model.IModelDecorationsChangeAccessor = {\n\t\t\taddDecoration: (range: IRange, options: model.IModelDecorationOptions): string => {\n\t\t\t\treturn this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n\t\t\t},\n\t\t\tchangeDecoration: (id: string, newRange: IRange): void => {\n\t\t\t\tthis._changeDecorationImpl(ownerId, id, newRange);\n\t\t\t},\n\t\t\tchangeDecorationOptions: (id: string, options: model.IModelDecorationOptions) => {\n\t\t\t\tthis._changeDecorationOptionsImpl(ownerId, id, _normalizeOptions(options));\n\t\t\t},\n\t\t\tremoveDecoration: (id: string): void => {\n\t\t\t\tthis._deltaDecorationsImpl(ownerId, [id], []);\n\t\t\t},\n\t\t\tdeltaDecorations: (oldDecorations: string[], newDecorations: model.IModelDeltaDecoration[]): string[] => {\n\t\t\t\tif (oldDecorations.length === 0 && newDecorations.length === 0) {\n\t\t\t\t\t// nothing to do\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n\t\t\t}\n\t\t};\n\t\tlet result: T | null = null;\n\t\ttry {\n\t\t\tresult = callback(changeAccessor);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t\t// Invalidate change accessor\n\t\tchangeAccessor.addDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecorationOptions = invalidFunc;\n\t\tchangeAccessor.removeDecoration = invalidFunc;\n\t\tchangeAccessor.deltaDecorations = invalidFunc;\n\t\treturn result;\n\t}\n\n\tpublic deltaDecorations(oldDecorations: string[], newDecorations: model.IModelDeltaDecoration[], ownerId: number = 0): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (!oldDecorations) {\n\t\t\toldDecorations = [];\n\t\t}\n\t\tif (oldDecorations.length === 0 && newDecorations.length === 0) {\n\t\t\t// nothing to do\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tthis._deltaDecorationCallCnt++;\n\t\t\tif (this._deltaDecorationCallCnt > 1) {\n\t\t\t\tconsole.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n\t\t\t\tonUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n\t\t\t}\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t\tthis._deltaDecorationCallCnt--;\n\t\t}\n\t}\n\n\t_getTrackedRange(id: string): Range | null {\n\t\treturn this.getDecorationRange(id);\n\t}\n\n\t_setTrackedRange(id: string | null, newRange: null, newStickiness: model.TrackedRangeStickiness): null;\n\t_setTrackedRange(id: string | null, newRange: Range, newStickiness: model.TrackedRangeStickiness): string;\n\t_setTrackedRange(id: string | null, newRange: Range | null, newStickiness: model.TrackedRangeStickiness): string | null {\n\t\tconst node = (id ? this._decorations[id] : null);\n\n\t\tif (!node) {\n\t\t\tif (!newRange) {\n\t\t\t\t// node doesn't exist, the request is to delete => nothing to do\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// node doesn't exist, the request is to set => add the tracked range\n\t\t\treturn this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }], true)[0];\n\t\t}\n\n\t\tif (!newRange) {\n\t\t\t// node exists, the request is to delete => delete node\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t\treturn null;\n\t\t}\n\n\t\t// node exists, the request is to set => change the tracked range and its options\n\t\tconst range = this._validateRangeRelaxedNoAllocations(newRange);\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tnode.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\t\tthis._decorationsTree.insert(node);\n\t\treturn node.id;\n\t}\n\n\tpublic removeAllDecorationsWithOwnerId(ownerId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n\t\tfor (let i = 0, len = nodes.length; i < len; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t}\n\t}\n\n\tpublic getDecorationOptions(decorationId: string): model.IModelDecorationOptions | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn node.options;\n\t}\n\n\tpublic getDecorationRange(decorationId: string): Range | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._decorationsTree.getNodeRange(this, node);\n\t}\n\n\tpublic getLineDecorations(lineNumber: number, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation, filterFontDecorations);\n\t}\n\n\tpublic getLinesDecorations(_startLineNumber: number, _endLineNumber: number, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false, onlyMarginDecorations: boolean = false): model.IModelDecoration[] {\n\t\tconst lineCount = this.getLineCount();\n\t\tconst startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n\t\tconst endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\t\tconst range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n\n\t\tconst decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t\tpushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n\t\treturn decorations;\n\t}\n\n\tpublic getDecorationsInRange(range: IRange, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false, onlyMinimapDecorations: boolean = false, onlyMarginDecorations: boolean = false): model.IModelDecoration[] {\n\t\tconst validatedRange = this.validateRange(range);\n\n\t\tconst decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t\tpushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n\t\treturn decorations;\n\t}\n\n\tpublic getOverviewRulerDecorations(ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(this, ownerId, filterOutValidation, filterFontDecorations, true, false);\n\t}\n\n\tpublic getInjectedTextDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAllInjectedText(this, ownerId);\n\t}\n\n\tpublic getCustomLineHeightsDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAllCustomLineHeights(this, ownerId);\n\t}\n\n\tprivate _getInjectedTextInLine(lineNumber: number): LineInjectedText[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n\t\tconst endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n\n\t\tconst result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n\t\treturn LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n\t}\n\n\tpublic getFontDecorationsInRange(range: IRange, ownerId: number = 0): model.IModelDecoration[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\t\treturn this._decorationsTree.getFontDecorationsInInterval(this, startOffset, endOffset, ownerId);\n\t}\n\n\tpublic getAllDecorations(ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\tlet result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, filterFontDecorations, false, false);\n\t\tresult = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n\t\treturn result;\n\t}\n\n\tpublic getAllMarginDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(this, ownerId, false, false, false, true);\n\t}\n\n\tprivate _getDecorationsInRange(filterRange: Range, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n\t\treturn this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t}\n\n\tpublic getRangeAt(start: number, end: number): Range {\n\t\treturn this._buffer.getRangeAt(start, end - start);\n\t}\n\n\tprivate _changeDecorationImpl(ownerId: number, decorationId: string, _range: IRange): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (node.options.after) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange!.endLineNumber);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange!.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, oldRange!.startLineNumber, null);\n\t\t}\n\t\tif (node.options.affectsFont) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, oldRange!.startLineNumber);\n\t\t}\n\n\t\tconst range = this._validateRangeRelaxedNoAllocations(_range);\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tthis._decorationsTree.insert(node);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\n\t\tif (node.options.after) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, range.startLineNumber, node.options.lineHeight);\n\t\t}\n\t\tif (node.options.affectsFont) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, range.startLineNumber);\n\t\t}\n\t}\n\n\tprivate _changeDecorationOptionsImpl(ownerId: number, decorationId: string, options: ModelDecorationOptions): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n\t\tconst nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(options);\n\n\t\tif (node.options.after || options.after) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n\t\t}\n\t\tif (node.options.before || options.before) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null || options.lineHeight !== null) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, nodeRange.startLineNumber, options.lineHeight);\n\t\t}\n\t\tif (node.options.affectsFont || options.affectsFont) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, decorationId, nodeRange.startLineNumber);\n\t\t}\n\n\t\tconst movedInOverviewRuler = nodeWasInOverviewRuler !== nodeIsInOverviewRuler;\n\t\tconst changedWhetherInjectedText = isOptionsInjectedText(options) !== isNodeInjectedText(node);\n\t\tif (movedInOverviewRuler || changedWhetherInjectedText) {\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tnode.setOptions(options);\n\t\t\tthis._decorationsTree.insert(node);\n\t\t} else {\n\t\t\tnode.setOptions(options);\n\t\t}\n\t}\n\n\tprivate _deltaDecorationsImpl(ownerId: number, oldDecorationsIds: string[], newDecorations: model.IModelDeltaDecoration[], suppressEvents: boolean = false): string[] {\n\t\tconst versionId = this.getVersionId();\n\n\t\tconst oldDecorationsLen = oldDecorationsIds.length;\n\t\tlet oldDecorationIndex = 0;\n\n\t\tconst newDecorationsLen = newDecorations.length;\n\t\tlet newDecorationIndex = 0;\n\n\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\ttry {\n\t\t\tconst result = new Array<string>(newDecorationsLen);\n\t\t\twhile (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n\n\t\t\t\tlet node: IntervalNode | null = null;\n\n\t\t\t\tif (oldDecorationIndex < oldDecorationsLen) {\n\t\t\t\t\t// (1) get ourselves an old node\n\t\t\t\t\tlet decorationId: string;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tdecorationId = oldDecorationsIds[oldDecorationIndex++];\n\t\t\t\t\t\tnode = this._decorations[decorationId];\n\t\t\t\t\t} while (!node && oldDecorationIndex < oldDecorationsLen);\n\n\t\t\t\t\t// (2) remove the node from the tree (if it exists)\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.lineHeight !== null) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, nodeRange.startLineNumber, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.affectsFont) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, decorationId, nodeRange.startLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._decorationsTree.delete(node);\n\n\t\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newDecorationIndex < newDecorationsLen) {\n\t\t\t\t\t// (3) create a new node if necessary\n\t\t\t\t\tif (!node) {\n\t\t\t\t\t\tconst internalDecorationId = (++this._lastDecorationId);\n\t\t\t\t\t\tconst decorationId = `${this._instanceId};${internalDecorationId}`;\n\t\t\t\t\t\tnode = new IntervalNode(decorationId, 0, 0);\n\t\t\t\t\t\tthis._decorations[decorationId] = node;\n\t\t\t\t\t}\n\n\t\t\t\t\t// (4) initialize node\n\t\t\t\t\tconst newDecoration = newDecorations[newDecorationIndex];\n\t\t\t\t\tconst range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n\t\t\t\t\tconst options = _normalizeOptions(newDecoration.options);\n\t\t\t\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\t\t\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\t\t\t\tnode.ownerId = ownerId;\n\t\t\t\t\tnode.reset(versionId, startOffset, endOffset, range);\n\t\t\t\t\tnode.setOptions(options);\n\n\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.lineHeight !== null) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, node.id, range.startLineNumber, node.options.lineHeight);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.affectsFont) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, range.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(options);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._decorationsTree.insert(node);\n\n\t\t\t\t\tresult[newDecorationIndex] = node.id;\n\n\t\t\t\t\tnewDecorationIndex++;\n\t\t\t\t} else {\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tdelete this._decorations[node.id];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Tokenization\n\n\t// TODO move them to the tokenization part.\n\tpublic getLanguageId(): string {\n\t\treturn this.tokenization.getLanguageId();\n\t}\n\n\tpublic setLanguage(languageIdOrSelection: string | ILanguageSelection, source?: string): void {\n\t\tif (typeof languageIdOrSelection === 'string') {\n\t\t\tthis._languageSelectionListener.clear();\n\t\t\tthis._setLanguage(languageIdOrSelection, source);\n\t\t} else {\n\t\t\tthis._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId, source));\n\t\t\tthis._setLanguage(languageIdOrSelection.languageId, source);\n\t\t}\n\t}\n\n\tprivate _setLanguage(languageId: string, source?: string): void {\n\t\tthis.tokenization.setLanguageId(languageId, source);\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\t}\n\n\tpublic getLanguageIdAtPosition(lineNumber: number, column: number): string {\n\t\treturn this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n\t}\n\n\tpublic getWordAtPosition(position: IPosition): IWordAtPosition | null {\n\t\treturn this._tokenizationTextModelPart.getWordAtPosition(position);\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition): IWordAtPosition {\n\t\treturn this._tokenizationTextModelPart.getWordUntilPosition(position);\n\t}\n\n\t//#endregion\n\tnormalizePosition(position: Position, affinity: model.PositionAffinity): Position {\n\t\treturn position;\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\t// Columns start with 1.\n\t\treturn indentOfLine(this.getLineContent(lineNumber)) + 1;\n\t}\n\n\tpublic override toString(): string {\n\t\treturn `TextModel(${this.uri.toString()})`;\n\t}\n}\n\nexport function indentOfLine(line: string): number {\n\tlet indent = 0;\n\tfor (const c of line) {\n\t\tif (c === ' ' || c === '\\t') {\n\t\t\tindent++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn indent;\n}\n\n//#region Decorations\n\nfunction isNodeInOverviewRuler(node: IntervalNode): boolean {\n\treturn (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\n\nfunction isOptionsInjectedText(options: ModelDecorationOptions): boolean {\n\treturn !!options.after || !!options.before;\n}\n\nfunction isNodeInjectedText(node: IntervalNode): boolean {\n\treturn !!node.options.after || !!node.options.before;\n}\n\nexport interface IDecorationsTreesHost {\n\tgetVersionId(): number;\n\tgetRangeAt(start: number, end: number): Range;\n}\n\nclass DecorationsTrees {\n\n\t/**\n\t * This tree holds decorations that do not show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree0: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree1: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that contain injected text.\n\t */\n\tprivate readonly _injectedTextDecorationsTree: IntervalTree;\n\n\tconstructor() {\n\t\tthis._decorationsTree0 = new IntervalTree();\n\t\tthis._decorationsTree1 = new IntervalTree();\n\t\tthis._injectedTextDecorationsTree = new IntervalTree();\n\t}\n\n\tpublic ensureAllNodesHaveRanges(host: IDecorationsTreesHost): void {\n\t\tthis.getAll(host, 0, false, false, false, false);\n\t}\n\n\tprivate _ensureNodesHaveRanges(host: IDecorationsTreesHost, nodes: IntervalNode[]): model.IModelDecoration[] {\n\t\tfor (const node of nodes) {\n\t\t\tif (node.range === null) {\n\t\t\t\tnode.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n\t\t\t}\n\t\t}\n\t\treturn <model.IModelDecoration[]>nodes;\n\t}\n\n\tpublic getAllInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, versionId, onlyMarginDecorations);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _intervalSearch(start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, cachedVersionId: number, onlyMarginDecorations: boolean): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\tconst r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\tconst r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic getInjectedTextInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n\t}\n\n\tpublic getFontDecorationsInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst decorations = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, decorations).filter((i) => i.options.affectsFont);\n\t}\n\n\tpublic getAllInjectedText(host: IDecorationsTreesHost, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.search(filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n\t}\n\n\tpublic getAllCustomLineHeights(host: IDecorationsTreesHost, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._search(filterOwnerId, false, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => typeof i.options.lineHeight === 'number');\n\t}\n\n\tpublic getAll(host: IDecorationsTreesHost, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, overviewRulerOnly: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._search(filterOwnerId, filterOutValidation, filterFontDecorations, overviewRulerOnly, versionId, onlyMarginDecorations);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _search(filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, overviewRulerOnly: boolean, cachedVersionId: number, onlyMarginDecorations: boolean): IntervalNode[] {\n\t\tif (overviewRulerOnly) {\n\t\t\treturn this._decorationsTree1.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t} else {\n\t\t\tconst r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\tconst r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\tconst r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\treturn r0.concat(r1).concat(r2);\n\t\t}\n\t}\n\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n\t\tconst r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n\t\tconst r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesPostOrder();\n\t\tconst r1 = this._decorationsTree1.collectNodesPostOrder();\n\t\tconst r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.insert(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.insert(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.insert(node);\n\t\t}\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.delete(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.delete(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.delete(node);\n\t\t}\n\t}\n\n\tpublic getNodeRange(host: IDecorationsTreesHost, node: IntervalNode): Range {\n\t\tconst versionId = host.getVersionId();\n\t\tif (node.cachedVersionId !== versionId) {\n\t\t\tthis._resolveNode(node, versionId);\n\t\t}\n\t\tif (node.range === null) {\n\t\t\tnode.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n\t\t}\n\t\treturn node.range;\n\t}\n\n\tprivate _resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.resolveNode(node, cachedVersionId);\n\t\t} else {\n\t\t\tthis._decorationsTree0.resolveNode(node, cachedVersionId);\n\t\t}\n\t}\n\n\tpublic acceptReplace(offset: number, length: number, textLength: number, forceMoveMarkers: boolean): void {\n\t\tthis._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t\tthis._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t\tthis._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t}\n}\n\nfunction cleanClassName(className: string): string {\n\treturn className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\n\nclass DecorationOptions implements model.IDecorationOptions {\n\treadonly color: string | ThemeColor;\n\treadonly darkColor: string | ThemeColor;\n\n\tconstructor(options: model.IDecorationOptions) {\n\t\tthis.color = options.color || '';\n\t\tthis.darkColor = options.darkColor || '';\n\n\t}\n}\n\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n\treadonly position: model.OverviewRulerLane;\n\tprivate _resolvedColor: string | null;\n\n\tconstructor(options: model.IModelDecorationOverviewRulerOptions) {\n\t\tsuper(options);\n\t\tthis._resolvedColor = null;\n\t\tthis.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n\t}\n\n\tpublic getColor(theme: IColorTheme): string {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== 'light' && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = null;\n\t}\n\n\tprivate _resolveColor(color: string | ThemeColor, theme: IColorTheme): string {\n\t\tif (typeof color === 'string') {\n\t\t\treturn color;\n\t\t}\n\t\tconst c = color ? theme.getColor(color.id) : null;\n\t\tif (!c) {\n\t\t\treturn '';\n\t\t}\n\t\treturn c.toString();\n\t}\n}\n\nexport class ModelDecorationGlyphMarginOptions {\n\treadonly position: model.GlyphMarginLane;\n\treadonly persistLane: boolean | undefined;\n\n\tconstructor(options: model.IModelDecorationGlyphMarginOptions | null | undefined) {\n\t\tthis.position = options?.position ?? model.GlyphMarginLane.Center;\n\t\tthis.persistLane = options?.persistLane;\n\t}\n}\n\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n\treadonly position: model.MinimapPosition;\n\treadonly sectionHeaderStyle: model.MinimapSectionHeaderStyle | null;\n\treadonly sectionHeaderText: string | null;\n\tprivate _resolvedColor: Color | undefined;\n\n\tconstructor(options: model.IModelDecorationMinimapOptions) {\n\t\tsuper(options);\n\t\tthis.position = options.position;\n\t\tthis.sectionHeaderStyle = options.sectionHeaderStyle ?? null;\n\t\tthis.sectionHeaderText = options.sectionHeaderText ?? null;\n\t}\n\n\tpublic getColor(theme: IColorTheme): Color | undefined {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== 'light' && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = undefined;\n\t}\n\n\tprivate _resolveColor(color: string | ThemeColor, theme: IColorTheme): Color | undefined {\n\t\tif (typeof color === 'string') {\n\t\t\treturn Color.fromHex(color);\n\t\t}\n\t\treturn theme.getColor(color.id);\n\t}\n}\n\nexport class ModelDecorationInjectedTextOptions implements model.InjectedTextOptions {\n\tpublic static from(options: model.InjectedTextOptions): ModelDecorationInjectedTextOptions {\n\t\tif (options instanceof ModelDecorationInjectedTextOptions) {\n\t\t\treturn options;\n\t\t}\n\t\treturn new ModelDecorationInjectedTextOptions(options);\n\t}\n\n\tpublic readonly content: string;\n\tpublic readonly tokens: TokenArray | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly attachedData: unknown | null;\n\treadonly cursorStops: model.InjectedTextCursorStops | null;\n\n\tprivate constructor(options: model.InjectedTextOptions) {\n\t\tthis.content = options.content || '';\n\t\tthis.tokens = options.tokens ?? null;\n\t\tthis.inlineClassName = options.inlineClassName || null;\n\t\tthis.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.attachedData = options.attachedData || null;\n\t\tthis.cursorStops = options.cursorStops || null;\n\t}\n}\n\nexport class ModelDecorationOptions implements model.IModelDecorationOptions {\n\n\tpublic static EMPTY: ModelDecorationOptions;\n\n\tpublic static register(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\n\tpublic static createDynamic(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\treadonly description: string;\n\treadonly blockClassName: string | null;\n\treadonly blockIsAfterEnd: boolean | null;\n\treadonly blockDoesNotCollapse?: boolean | null;\n\treadonly blockPadding: [top: number, right: number, bottom: number, left: number] | null;\n\treadonly stickiness: model.TrackedRangeStickiness;\n\treadonly zIndex: number;\n\treadonly className: string | null;\n\treadonly shouldFillLineOnLineBreak: boolean | null;\n\treadonly hoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly glyphMarginHoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly isWholeLine: boolean;\n\treadonly lineHeight: number | null;\n\treadonly fontSize: string | null;\n\treadonly showIfCollapsed: boolean;\n\treadonly collapseOnReplaceEdit: boolean;\n\treadonly overviewRuler: ModelDecorationOverviewRulerOptions | null;\n\treadonly minimap: ModelDecorationMinimapOptions | null;\n\treadonly glyphMargin?: model.IModelDecorationGlyphMarginOptions | null | undefined;\n\treadonly glyphMarginClassName: string | null;\n\treadonly linesDecorationsClassName: string | null;\n\treadonly lineNumberClassName: string | null;\n\treadonly lineNumberHoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly linesDecorationsTooltip: string | null;\n\treadonly firstLineDecorationClassName: string | null;\n\treadonly marginClassName: string | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly beforeContentClassName: string | null;\n\treadonly afterContentClassName: string | null;\n\treadonly after: ModelDecorationInjectedTextOptions | null;\n\treadonly before: ModelDecorationInjectedTextOptions | null;\n\treadonly hideInCommentTokens: boolean | null;\n\treadonly hideInStringTokens: boolean | null;\n\treadonly affectsFont: boolean | null;\n\treadonly textDirection?: model.TextDirection | null | undefined;\n\n\tprivate constructor(options: model.IModelDecorationOptions) {\n\t\tthis.description = options.description;\n\t\tthis.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n\t\tthis.blockDoesNotCollapse = options.blockDoesNotCollapse ?? null;\n\t\tthis.blockIsAfterEnd = options.blockIsAfterEnd ?? null;\n\t\tthis.blockPadding = options.blockPadding ?? null;\n\t\tthis.stickiness = options.stickiness || model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\n\t\tthis.zIndex = options.zIndex || 0;\n\t\tthis.className = options.className ? cleanClassName(options.className) : null;\n\t\tthis.shouldFillLineOnLineBreak = options.shouldFillLineOnLineBreak ?? null;\n\t\tthis.hoverMessage = options.hoverMessage || null;\n\t\tthis.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n\t\tthis.lineNumberHoverMessage = options.lineNumberHoverMessage || null;\n\t\tthis.isWholeLine = options.isWholeLine || false;\n\t\tthis.lineHeight = options.lineHeight ? Math.min(options.lineHeight, LINE_HEIGHT_CEILING) : null;\n\t\tthis.fontSize = options.fontSize || null;\n\t\tthis.affectsFont = !!options.fontSize || !!options.fontFamily || !!options.fontWeight || !!options.fontStyle;\n\t\tthis.showIfCollapsed = options.showIfCollapsed || false;\n\t\tthis.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n\t\tthis.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n\t\tthis.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n\t\tthis.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n\t\tthis.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n\t\tthis.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n\t\tthis.lineNumberClassName = options.lineNumberClassName ? cleanClassName(options.lineNumberClassName) : null;\n\t\tthis.linesDecorationsTooltip = options.linesDecorationsTooltip ? strings.htmlAttributeEncodeValue(options.linesDecorationsTooltip) : null;\n\t\tthis.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n\t\tthis.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n\t\tthis.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n\t\tthis.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n\t\tthis.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n\t\tthis.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n\t\tthis.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n\t\tthis.hideInCommentTokens = options.hideInCommentTokens ?? false;\n\t\tthis.hideInStringTokens = options.hideInStringTokens ?? false;\n\t\tthis.textDirection = options.textDirection ?? null;\n\t}\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n\tModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore }),\n\tModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter }),\n];\n\nfunction _normalizeOptions(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\tif (options instanceof ModelDecorationOptions) {\n\t\treturn options;\n\t}\n\treturn ModelDecorationOptions.createDynamic(options);\n}\n\nclass LineHeightChangingDecoration {\n\n\tpublic static toKey(obj: LineHeightChangingDecoration): string {\n\t\treturn `${obj.ownerId};${obj.decorationId};${obj.lineNumber}`;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly decorationId: string,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly lineHeight: number | null\n\t) { }\n}\n\nclass LineFontChangingDecoration {\n\n\tpublic static toKey(obj: LineFontChangingDecoration): string {\n\t\treturn `${obj.ownerId};${obj.decorationId};${obj.lineNumber}`;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly decorationId: string,\n\t\tpublic readonly lineNumber: number\n\t) { }\n}\n\nclass DidChangeDecorationsEmitter extends Disposable {\n\n\tprivate readonly _actual: Emitter<IModelDecorationsChangedEvent> = this._register(new Emitter<IModelDecorationsChangedEvent>());\n\tpublic readonly event: Event<IModelDecorationsChangedEvent> = this._actual.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _shouldFireDeferred: boolean;\n\tprivate _affectsMinimap: boolean;\n\tprivate _affectsOverviewRuler: boolean;\n\tprivate _affectedInjectedTextLines: Set<number> | null = null;\n\tprivate _affectedLineHeights: SetWithKey<LineHeightChangingDecoration> | null = null;\n\tprivate _affectedFontLines: SetWithKey<LineFontChangingDecoration> | null = null;\n\tprivate _affectsGlyphMargin: boolean;\n\tprivate _affectsLineNumber: boolean;\n\n\tconstructor(private readonly handleBeforeFire: (affectedInjectedTextLines: Set<number> | null, affectedLineHeights: SetWithKey<LineHeightChangingDecoration> | null, affectedFontLines: SetWithKey<LineFontChangingDecoration> | null) => void) {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._affectsLineNumber = false;\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._shouldFireDeferred) {\n\t\t\t\tthis.doFire();\n\t\t\t}\n\n\t\t\tthis._affectedInjectedTextLines?.clear();\n\t\t\tthis._affectedInjectedTextLines = null;\n\t\t\tthis._affectedLineHeights?.clear();\n\t\t\tthis._affectedLineHeights = null;\n\t\t\tthis._affectedFontLines?.clear();\n\t\t\tthis._affectedFontLines = null;\n\t\t}\n\t}\n\n\tpublic recordLineAffectedByInjectedText(lineNumber: number): void {\n\t\tif (!this._affectedInjectedTextLines) {\n\t\t\tthis._affectedInjectedTextLines = new Set();\n\t\t}\n\t\tthis._affectedInjectedTextLines.add(lineNumber);\n\t}\n\n\tpublic recordLineAffectedByLineHeightChange(ownerId: number, decorationId: string, lineNumber: number, lineHeight: number | null): void {\n\t\tif (!this._affectedLineHeights) {\n\t\t\tthis._affectedLineHeights = new SetWithKey<LineHeightChangingDecoration>([], LineHeightChangingDecoration.toKey);\n\t\t}\n\t\tthis._affectedLineHeights.add(new LineHeightChangingDecoration(ownerId, decorationId, lineNumber, lineHeight));\n\t}\n\n\tpublic recordLineAffectedByFontChange(ownerId: number, decorationId: string, lineNumber: number): void {\n\t\tif (!this._affectedFontLines) {\n\t\t\tthis._affectedFontLines = new SetWithKey<LineFontChangingDecoration>([], LineFontChangingDecoration.toKey);\n\t\t}\n\t\tthis._affectedFontLines.add(new LineFontChangingDecoration(ownerId, decorationId, lineNumber));\n\t}\n\n\tpublic checkAffectedAndFire(options: ModelDecorationOptions): void {\n\t\tthis._affectsMinimap ||= !!options.minimap?.position;\n\t\tthis._affectsOverviewRuler ||= !!options.overviewRuler?.color;\n\t\tthis._affectsGlyphMargin ||= !!options.glyphMarginClassName;\n\t\tthis._affectsLineNumber ||= !!options.lineNumberClassName;\n\t\tthis.tryFire();\n\t}\n\n\tpublic fire(): void {\n\t\tthis._affectsMinimap = true;\n\t\tthis._affectsOverviewRuler = true;\n\t\tthis._affectsGlyphMargin = true;\n\t\tthis.tryFire();\n\t}\n\n\tprivate tryFire() {\n\t\tif (this._deferredCnt === 0) {\n\t\t\tthis.doFire();\n\t\t} else {\n\t\t\tthis._shouldFireDeferred = true;\n\t\t}\n\t}\n\n\tprivate doFire() {\n\t\tthis.handleBeforeFire(this._affectedInjectedTextLines, this._affectedLineHeights, this._affectedFontLines);\n\n\t\tconst event: IModelDecorationsChangedEvent = {\n\t\t\taffectsMinimap: this._affectsMinimap,\n\t\t\taffectsOverviewRuler: this._affectsOverviewRuler,\n\t\t\taffectsGlyphMargin: this._affectsGlyphMargin,\n\t\t\taffectsLineNumber: this._affectsLineNumber,\n\t\t};\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._actual.fire(event);\n\t}\n}\n\n//#endregion\n\nclass DidChangeContentEmitter extends Disposable {\n\n\t/**\n\t * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n\t */\n\tprivate readonly _fastEmitter: Emitter<InternalModelContentChangeEvent> = this._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly fastEvent: Event<InternalModelContentChangeEvent> = this._fastEmitter.event;\n\tprivate readonly _slowEmitter: Emitter<InternalModelContentChangeEvent> = this._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly slowEvent: Event<InternalModelContentChangeEvent> = this._slowEmitter.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _deferredEvent: InternalModelContentChangeEvent | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._deferredEvent = null;\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(resultingSelection: Selection[] | null = null): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._deferredEvent !== null) {\n\t\t\t\tthis._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n\t\t\t\tconst e = this._deferredEvent;\n\t\t\t\tthis._deferredEvent = null;\n\t\t\t\tthis._fastEmitter.fire(e);\n\t\t\t\tthis._slowEmitter.fire(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic fire(e: InternalModelContentChangeEvent): void {\n\t\tif (this._deferredCnt > 0) {\n\t\t\tif (this._deferredEvent) {\n\t\t\t\tthis._deferredEvent = this._deferredEvent.merge(e);\n\t\t\t} else {\n\t\t\t\tthis._deferredEvent = e;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._fastEmitter.fire(e);\n\t\tthis._slowEmitter.fire(e);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ArrayQueue, pushMany } from '../../../base/common/arrays.js';\nimport { Color } from '../../../base/common/color.js';\nimport { BugIndicatingError, illegalArgument, onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { IMarkdownString } from '../../../base/common/htmlContent.js';\nimport { Disposable, IDisposable, MutableDisposable, combinedDisposable } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { ThemeColor } from '../../../base/common/themables.js';\nimport { Constants } from '../../../base/common/uint.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ISingleEditOperation } from '../core/editOperation.js';\nimport { countEOL } from '../core/misc/eolCounter.js';\nimport { normalizeIndentation } from '../core/misc/indentation.js';\nimport { IPosition, Position } from '../core/position.js';\nimport { IRange, Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextChange } from '../core/textChange.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/misc/textModelDefaults.js';\nimport { IWordAtPosition } from '../core/wordHelper.js';\nimport { FormattingOptions } from '../languages.js';\nimport { ILanguageSelection, ILanguageService } from '../languages/language.js';\nimport { ILanguageConfigurationService } from '../languages/languageConfigurationRegistry.js';\nimport * as model from '../model.js';\nimport { BracketPairsTextModelPart } from './bracketPairsTextModelPart/bracketPairsImpl.js';\nimport { ColorizedBracketPairsDecorationProvider } from './bracketPairsTextModelPart/colorizedBracketPairsDecorationProvider.js';\nimport { EditStack } from './editStack.js';\nimport { GuidesTextModelPart } from './guidesTextModelPart.js';\nimport { guessIndentation } from './indentationGuesser.js';\nimport { IntervalNode, IntervalTree, recomputeMaxEnd } from './intervalTree.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer/pieceTreeTextBuffer.js';\nimport { PieceTreeTextBufferBuilder } from './pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js';\nimport { SearchParams, TextModelSearch } from './textModelSearch.js';\nimport { TokenizationTextModelPart } from './tokens/tokenizationTextModelPart.js';\nimport { AttachedViews } from './tokens/abstractSyntaxTokenBackend.js';\nimport { IBracketPairsTextModelPart } from '../textModelBracketPairs.js';\nimport { IModelContentChangedEvent, IModelDecorationsChangedEvent, IModelOptionsChangedEvent, InternalModelContentChangeEvent, ModelInjectedTextChangedEvent, ModelRawChange, ModelRawContentChangedEvent, ModelRawEOLChanged, ModelRawFlush, ModelRawLineChanged, ModelRawLinesDeleted, ModelRawLinesInserted, ModelLineHeightChangedEvent, ModelLineHeightChanged, ModelFontChangedEvent, ModelFontChanged, LineInjectedText } from '../textModelEvents.js';\nimport { IGuidesTextModelPart } from '../textModelGuides.js';\nimport { ITokenizationTextModelPart } from '../tokenizationTextModelPart.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IColorTheme } from '../../../platform/theme/common/themeService.js';\nimport { IUndoRedoService, ResourceEditStackSnapshot, UndoRedoGroup } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { TokenArray } from '../tokens/lineTokens.js';\nimport { SetWithKey } from '../../../base/common/collections.js';\nimport { EditSources, TextModelEditSource } from '../textModelEditSource.js';\n\nexport function createTextBufferFactory(text: string): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\tbuilder.acceptChunk(text);\n\treturn builder.finish();\n}\n\nexport function createTextBufferFactoryFromSnapshot(snapshot: model.ITextSnapshot): model.ITextBufferFactory {\n\tconst builder = new PieceTreeTextBufferBuilder();\n\n\tlet chunk: string | null;\n\twhile (typeof (chunk = snapshot.read()) === 'string') {\n\t\tbuilder.acceptChunk(chunk);\n\t}\n\n\treturn builder.finish();\n}\n\nexport function createTextBuffer(value: string | model.ITextBufferFactory | model.ITextSnapshot, defaultEOL: model.DefaultEndOfLine): { textBuffer: model.ITextBuffer; disposable: IDisposable } {\n\tlet factory: model.ITextBufferFactory;\n\tif (typeof value === 'string') {\n\t\tfactory = createTextBufferFactory(value);\n\t} else if (model.isITextSnapshot(value)) {\n\t\tfactory = createTextBufferFactoryFromSnapshot(value);\n\t} else {\n\t\tfactory = value;\n\t}\n\treturn factory.create(defaultEOL);\n}\n\nlet MODEL_ID = 0;\n\nconst LIMIT_FIND_COUNT = 999;\nconst LONG_LINE_BOUNDARY = 10000;\nconst LINE_HEIGHT_CEILING = 300;\n\nclass TextModelSnapshot implements model.ITextSnapshot {\n\n\tprivate readonly _source: model.ITextSnapshot;\n\tprivate _eos: boolean;\n\n\tconstructor(source: model.ITextSnapshot) {\n\t\tthis._source = source;\n\t\tthis._eos = false;\n\t}\n\n\tpublic read(): string | null {\n\t\tif (this._eos) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet resultCnt = 0;\n\t\tlet resultLength = 0;\n\n\t\tdo {\n\t\t\tconst tmp = this._source.read();\n\n\t\t\tif (tmp === null) {\n\t\t\t\t// end-of-stream\n\t\t\t\tthis._eos = true;\n\t\t\t\tif (resultCnt === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn result.join('');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tmp.length > 0) {\n\t\t\t\tresult[resultCnt++] = tmp;\n\t\t\t\tresultLength += tmp.length;\n\t\t\t}\n\n\t\t\tif (resultLength >= 64 * 1024) {\n\t\t\t\treturn result.join('');\n\t\t\t}\n\t\t} while (true);\n\t}\n}\n\nconst invalidFunc = () => { throw new Error(`Invalid change accessor`); };\n\nconst enum StringOffsetValidationType {\n\t/**\n\t * Even allowed in surrogate pairs\n\t */\n\tRelaxed = 0,\n\t/**\n\t * Not allowed in surrogate pairs\n\t */\n\tSurrogatePairs = 1,\n}\n\nexport class TextModel extends Disposable implements model.ITextModel, IDecorationsTreesHost {\n\n\tstatic _MODEL_SYNC_LIMIT = 50 * 1024 * 1024; // 50 MB,  // used in tests\n\tprivate static readonly LARGE_FILE_SIZE_THRESHOLD = 20 * 1024 * 1024; // 20 MB;\n\tprivate static readonly LARGE_FILE_LINE_COUNT_THRESHOLD = 300 * 1000; // 300K lines\n\tprivate static readonly LARGE_FILE_HEAP_OPERATION_THRESHOLD = 256 * 1024 * 1024; // 256M characters, usually ~> 512MB memory usage\n\n\tpublic static DEFAULT_CREATION_OPTIONS: model.ITextModelCreationOptions = {\n\t\tisForSimpleWidget: false,\n\t\ttabSize: EDITOR_MODEL_DEFAULTS.tabSize,\n\t\tindentSize: EDITOR_MODEL_DEFAULTS.indentSize,\n\t\tinsertSpaces: EDITOR_MODEL_DEFAULTS.insertSpaces,\n\t\tdetectIndentation: false,\n\t\tdefaultEOL: model.DefaultEndOfLine.LF,\n\t\ttrimAutoWhitespace: EDITOR_MODEL_DEFAULTS.trimAutoWhitespace,\n\t\tlargeFileOptimizations: EDITOR_MODEL_DEFAULTS.largeFileOptimizations,\n\t\tbracketPairColorizationOptions: EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions,\n\t};\n\n\tpublic static resolveOptions(textBuffer: model.ITextBuffer, options: model.ITextModelCreationOptions): model.TextModelResolvedOptions {\n\t\tif (options.detectIndentation) {\n\t\t\tconst guessedIndentation = guessIndentation(textBuffer, options.tabSize, options.insertSpaces);\n\t\t\treturn new model.TextModelResolvedOptions({\n\t\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\t\tindentSize: 'tabSize', // TODO@Alex: guess indentSize independent of tabSize\n\t\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\t\ttrimAutoWhitespace: options.trimAutoWhitespace,\n\t\t\t\tdefaultEOL: options.defaultEOL,\n\t\t\t\tbracketPairColorizationOptions: options.bracketPairColorizationOptions,\n\t\t\t});\n\t\t}\n\n\t\treturn new model.TextModelResolvedOptions(options);\n\t}\n\n\t//#region Events\n\tprivate readonly _onWillDispose: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onWillDispose: Event<void> = this._onWillDispose.event;\n\n\tprivate readonly _onDidChangeDecorations: DidChangeDecorationsEmitter = this._register(new DidChangeDecorationsEmitter((affectedInjectedTextLines, affectedLineHeights, affectedFontLines) => this.handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines, affectedLineHeights, affectedFontLines)));\n\tpublic readonly onDidChangeDecorations: Event<IModelDecorationsChangedEvent> = this._onDidChangeDecorations.event;\n\n\tpublic get onDidChangeLanguage() { return this._tokenizationTextModelPart.onDidChangeLanguage; }\n\tpublic get onDidChangeLanguageConfiguration() { return this._tokenizationTextModelPart.onDidChangeLanguageConfiguration; }\n\tpublic get onDidChangeTokens() { return this._tokenizationTextModelPart.onDidChangeTokens; }\n\n\tprivate readonly _onDidChangeOptions: Emitter<IModelOptionsChangedEvent> = this._register(new Emitter<IModelOptionsChangedEvent>());\n\tpublic get onDidChangeOptions(): Event<IModelOptionsChangedEvent> { return this._onDidChangeOptions.event; }\n\n\tprivate readonly _onDidChangeAttached: Emitter<void> = this._register(new Emitter<void>());\n\tpublic get onDidChangeAttached(): Event<void> { return this._onDidChangeAttached.event; }\n\n\tprivate readonly _onDidChangeInjectedText: Emitter<ModelInjectedTextChangedEvent> = this._register(new Emitter<ModelInjectedTextChangedEvent>());\n\n\tprivate readonly _onDidChangeLineHeight: Emitter<ModelLineHeightChangedEvent> = this._register(new Emitter<ModelLineHeightChangedEvent>());\n\tpublic get onDidChangeLineHeight(): Event<ModelLineHeightChangedEvent> { return this._onDidChangeLineHeight.event; }\n\n\tprivate readonly _onDidChangeFont: Emitter<ModelFontChangedEvent> = this._register(new Emitter<ModelFontChangedEvent>());\n\tpublic get onDidChangeFont(): Event<ModelFontChangedEvent> { return this._onDidChangeFont.event; }\n\n\tprivate readonly _eventEmitter: DidChangeContentEmitter = this._register(new DidChangeContentEmitter());\n\tpublic onDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable {\n\t\treturn this._eventEmitter.slowEvent((e: InternalModelContentChangeEvent) => listener(e.contentChangedEvent));\n\t}\n\tpublic onDidChangeContentOrInjectedText(listener: (e: InternalModelContentChangeEvent | ModelInjectedTextChangedEvent) => void): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis._eventEmitter.fastEvent(e => listener(e)),\n\t\t\tthis._onDidChangeInjectedText.event(e => listener(e))\n\t\t);\n\t}\n\t//#endregion\n\n\tpublic readonly id: string;\n\tpublic readonly isForSimpleWidget: boolean;\n\tprivate readonly _associatedResource: URI;\n\tprivate _attachedEditorCount: number;\n\tprivate _buffer: model.ITextBuffer;\n\tprivate _bufferDisposable: IDisposable;\n\tprivate _options: model.TextModelResolvedOptions;\n\tprivate readonly _languageSelectionListener = this._register(new MutableDisposable<IDisposable>());\n\n\tprivate _isDisposed: boolean;\n\tprivate __isDisposing: boolean;\n\tpublic _isDisposing(): boolean { return this.__isDisposing; }\n\tprivate _versionId: number;\n\t/**\n\t * Unlike, versionId, this can go down (via undo) or go to previous values (via redo)\n\t */\n\tprivate _alternativeVersionId: number;\n\tprivate _initialUndoRedoSnapshot: ResourceEditStackSnapshot | null;\n\tprivate readonly _isTooLargeForSyncing: boolean;\n\tprivate readonly _isTooLargeForTokenization: boolean;\n\tprivate readonly _isTooLargeForHeapOperation: boolean;\n\n\t//#region Editing\n\tprivate readonly _commandManager: EditStack;\n\tprivate _isUndoing: boolean;\n\tprivate _isRedoing: boolean;\n\tprivate _trimAutoWhitespaceLines: number[] | null;\n\t//#endregion\n\n\t//#region Decorations\n\t/**\n\t * Used to workaround broken clients that might attempt using a decoration id generated by a different model.\n\t * It is not globally unique in order to limit it to one character.\n\t */\n\tprivate readonly _instanceId: string;\n\tprivate _deltaDecorationCallCnt: number = 0;\n\tprivate _lastDecorationId: number;\n\tprivate _decorations: { [decorationId: string]: IntervalNode };\n\tprivate _decorationsTree: DecorationsTrees;\n\tprivate readonly _decorationProvider: ColorizedBracketPairsDecorationProvider;\n\t//#endregion\n\n\tprivate readonly _tokenizationTextModelPart: TokenizationTextModelPart;\n\tpublic get tokenization(): ITokenizationTextModelPart { return this._tokenizationTextModelPart; }\n\n\tprivate readonly _bracketPairs: BracketPairsTextModelPart;\n\tpublic get bracketPairs(): IBracketPairsTextModelPart { return this._bracketPairs; }\n\n\tprivate readonly _guidesTextModelPart: GuidesTextModelPart;\n\tpublic get guides(): IGuidesTextModelPart { return this._guidesTextModelPart; }\n\n\tprivate readonly _attachedViews = new AttachedViews();\n\n\tconstructor(\n\t\tsource: string | model.ITextBufferFactory,\n\t\tlanguageIdOrSelection: string | ILanguageSelection,\n\t\tcreationOptions: model.ITextModelCreationOptions,\n\t\tassociatedResource: URI | null = null,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\t// Generate a new unique model id\n\t\tMODEL_ID++;\n\t\tthis.id = '$model' + MODEL_ID;\n\t\tthis.isForSimpleWidget = creationOptions.isForSimpleWidget;\n\t\tif (typeof associatedResource === 'undefined' || associatedResource === null) {\n\t\t\tthis._associatedResource = URI.parse('inmemory://model/' + MODEL_ID);\n\t\t} else {\n\t\t\tthis._associatedResource = associatedResource;\n\t\t}\n\t\tthis._attachedEditorCount = 0;\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(source, creationOptions.defaultEOL);\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable = disposable;\n\n\t\tconst bufferLineCount = this._buffer.getLineCount();\n\t\tconst bufferTextLength = this._buffer.getValueLengthInRange(new Range(1, 1, bufferLineCount, this._buffer.getLineLength(bufferLineCount) + 1), model.EndOfLinePreference.TextDefined);\n\n\t\t// !!! Make a decision in the ctor and permanently respect this decision !!!\n\t\t// If a model is too large at construction time, it will never get tokenized,\n\t\t// under no circumstances.\n\t\tif (creationOptions.largeFileOptimizations) {\n\t\t\tthis._isTooLargeForTokenization = (\n\t\t\t\t(bufferTextLength > TextModel.LARGE_FILE_SIZE_THRESHOLD)\n\t\t\t\t|| (bufferLineCount > TextModel.LARGE_FILE_LINE_COUNT_THRESHOLD)\n\t\t\t);\n\n\t\t\tthis._isTooLargeForHeapOperation = bufferTextLength > TextModel.LARGE_FILE_HEAP_OPERATION_THRESHOLD;\n\t\t} else {\n\t\t\tthis._isTooLargeForTokenization = false;\n\t\t\tthis._isTooLargeForHeapOperation = false;\n\t\t}\n\n\t\tthis._options = TextModel.resolveOptions(this._buffer, creationOptions);\n\n\t\tconst languageId = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n\t\tif (typeof languageIdOrSelection !== 'string') {\n\t\t\tthis._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId));\n\t\t}\n\n\t\tthis._bracketPairs = this._register(new BracketPairsTextModelPart(this, this._languageConfigurationService));\n\t\tthis._guidesTextModelPart = this._register(new GuidesTextModelPart(this, this._languageConfigurationService));\n\t\tthis._decorationProvider = this._register(new ColorizedBracketPairsDecorationProvider(this));\n\t\tthis._tokenizationTextModelPart = this.instantiationService.createInstance(TokenizationTextModelPart,\n\t\t\tthis,\n\t\t\tthis._bracketPairs,\n\t\t\tlanguageId,\n\t\t\tthis._attachedViews\n\t\t);\n\n\t\tthis._isTooLargeForSyncing = (bufferTextLength > TextModel._MODEL_SYNC_LIMIT);\n\n\t\tthis._versionId = 1;\n\t\tthis._alternativeVersionId = 1;\n\t\tthis._initialUndoRedoSnapshot = null;\n\n\t\tthis._isDisposed = false;\n\t\tthis.__isDisposing = false;\n\n\t\tthis._instanceId = strings.singleLetterHash(MODEL_ID);\n\t\tthis._lastDecorationId = 0;\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\tthis._commandManager = new EditStack(this, this._undoRedoService);\n\t\tthis._isUndoing = false;\n\t\tthis._isRedoing = false;\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\n\t\tthis._register(this._decorationProvider.onDidChange(() => {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.fire();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}));\n\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\n\t\tthis._register(this._languageConfigurationService.onDidChange(e => {\n\t\t\tthis._bracketPairs.handleLanguageConfigurationServiceChange(e);\n\t\t\tthis._tokenizationTextModelPart.handleLanguageConfigurationServiceChange(e);\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.__isDisposing = true;\n\t\tthis._onWillDispose.fire();\n\t\tthis._tokenizationTextModelPart.dispose();\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t\tthis._bufferDisposable.dispose();\n\t\tthis.__isDisposing = false;\n\t\t// Manually release reference to previous text buffer to avoid large leaks\n\t\t// in case someone leaks a TextModel reference\n\t\tconst emptyDisposedTextBuffer = new PieceTreeTextBuffer([], '', '\\n', false, false, true, true);\n\t\temptyDisposedTextBuffer.dispose();\n\t\tthis._buffer = emptyDisposedTextBuffer;\n\t\tthis._bufferDisposable = Disposable.None;\n\t}\n\n\tprivate _assertNotDisposed(): void {\n\t\tif (this._isDisposed) {\n\t\t\tthrow new BugIndicatingError('Model is disposed!');\n\t\t}\n\t}\n\n\tpublic getTextBuffer(): model.ITextBuffer {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer;\n\t}\n\n\tprivate _emitContentChangedEvent(rawChange: ModelRawContentChangedEvent, change: IModelContentChangedEvent): void {\n\t\tif (this.__isDisposing) {\n\t\t\t// Do not confuse listeners by emitting any event after disposing\n\t\t\treturn;\n\t\t}\n\t\tthis._tokenizationTextModelPart.handleDidChangeContent(change);\n\t\tthis._bracketPairs.handleDidChangeContent(change);\n\t\tthis._eventEmitter.fire(new InternalModelContentChangeEvent(rawChange, change));\n\t}\n\n\tpublic setValue(value: string | model.ITextSnapshot, reason = EditSources.setValue()): void {\n\t\tthis._assertNotDisposed();\n\n\t\tif (value === null || value === undefined) {\n\t\t\tthrow illegalArgument();\n\t\t}\n\n\t\tconst { textBuffer, disposable } = createTextBuffer(value, this._options.defaultEOL);\n\t\tthis._setValueFromTextBuffer(textBuffer, disposable, reason);\n\t}\n\n\tprivate _createContentChanged2(range: Range, rangeOffset: number, rangeLength: number, rangeEndPosition: Position, text: string, isUndoing: boolean, isRedoing: boolean, isFlush: boolean, isEolChange: boolean, reason: TextModelEditSource): IModelContentChangedEvent {\n\t\treturn {\n\t\t\tchanges: [{\n\t\t\t\trange: range,\n\t\t\t\trangeOffset: rangeOffset,\n\t\t\t\trangeLength: rangeLength,\n\t\t\t\ttext: text,\n\t\t\t}],\n\t\t\teol: this._buffer.getEOL(),\n\t\t\tisEolChange: isEolChange,\n\t\t\tversionId: this.getVersionId(),\n\t\t\tisUndoing: isUndoing,\n\t\t\tisRedoing: isRedoing,\n\t\t\tisFlush: isFlush,\n\t\t\tdetailedReasons: [reason],\n\t\t\tdetailedReasonsChangeLengths: [1],\n\t\t};\n\t}\n\n\tprivate _setValueFromTextBuffer(textBuffer: model.ITextBuffer, textBufferDisposable: IDisposable, reason: TextModelEditSource): void {\n\t\tthis._assertNotDisposed();\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._buffer = textBuffer;\n\t\tthis._bufferDisposable.dispose();\n\t\tthis._bufferDisposable = textBufferDisposable;\n\t\tthis._increaseVersionId();\n\n\t\t// Destroy all my decorations\n\t\tthis._decorations = Object.create(null);\n\t\tthis._decorationsTree = new DecorationsTrees();\n\n\t\t// Destroy my edit history and settings\n\t\tthis._commandManager.clear();\n\t\tthis._trimAutoWhitespaceLines = null;\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[\n\t\t\t\t\tnew ModelRawFlush()\n\t\t\t\t],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tthis._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, new Position(endLineNumber, endColumn), this.getValue(), false, false, true, false, reason)\n\t\t);\n\t}\n\n\tpublic setEOL(eol: model.EndOfLineSequence): void {\n\t\tthis._assertNotDisposed();\n\t\tconst newEOL = (eol === model.EndOfLineSequence.CRLF ? '\\r\\n' : '\\n');\n\t\tif (this._buffer.getEOL() === newEOL) {\n\t\t\t// Nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldFullModelRange = this.getFullModelRange();\n\t\tconst oldModelValueLength = this.getValueLengthInRange(oldFullModelRange);\n\t\tconst endLineNumber = this.getLineCount();\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\n\t\tthis._onBeforeEOLChange();\n\t\tthis._buffer.setEOL(newEOL);\n\t\tthis._increaseVersionId();\n\t\tthis._onAfterEOLChange();\n\n\t\tthis._emitContentChangedEvent(\n\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t[\n\t\t\t\t\tnew ModelRawEOLChanged()\n\t\t\t\t],\n\t\t\t\tthis._versionId,\n\t\t\t\tfalse,\n\t\t\t\tfalse\n\t\t\t),\n\t\t\tthis._createContentChanged2(new Range(1, 1, endLineNumber, endColumn), 0, oldModelValueLength, new Position(endLineNumber, endColumn), this.getValue(), false, false, false, true, EditSources.eolChange())\n\t\t);\n\t}\n\n\tprivate _onBeforeEOLChange(): void {\n\t\t// Ensure all decorations get their `range` set.\n\t\tthis._decorationsTree.ensureAllNodesHaveRanges(this);\n\t}\n\n\tprivate _onAfterEOLChange(): void {\n\t\t// Transform back `range` to offsets\n\t\tconst versionId = this.getVersionId();\n\t\tconst allDecorations = this._decorationsTree.collectNodesPostOrder();\n\t\tfor (let i = 0, len = allDecorations.length; i < len; i++) {\n\t\t\tconst node = allDecorations[i];\n\t\t\tconst range = node.range!; // the range is defined due to `_onBeforeEOLChange`\n\n\t\t\tconst delta = node.cachedAbsoluteStart - node.start;\n\n\t\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\t\tnode.cachedAbsoluteStart = startOffset;\n\t\t\tnode.cachedAbsoluteEnd = endOffset;\n\t\t\tnode.cachedVersionId = versionId;\n\n\t\t\tnode.start = startOffset - delta;\n\t\t\tnode.end = endOffset - delta;\n\n\t\t\trecomputeMaxEnd(node);\n\t\t}\n\t}\n\n\tpublic onBeforeAttached(): model.IAttachedView {\n\t\tthis._attachedEditorCount++;\n\t\tif (this._attachedEditorCount === 1) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\treturn this._attachedViews.attachView();\n\t}\n\n\tpublic onBeforeDetached(view: model.IAttachedView): void {\n\t\tthis._attachedEditorCount--;\n\t\tif (this._attachedEditorCount === 0) {\n\t\t\tthis._tokenizationTextModelPart.handleDidChangeAttached();\n\t\t\tthis._onDidChangeAttached.fire(undefined);\n\t\t}\n\t\tthis._attachedViews.detachView(view);\n\t}\n\n\tpublic isAttachedToEditor(): boolean {\n\t\treturn this._attachedEditorCount > 0;\n\t}\n\n\tpublic getAttachedEditorCount(): number {\n\t\treturn this._attachedEditorCount;\n\t}\n\n\tpublic isTooLargeForSyncing(): boolean {\n\t\treturn this._isTooLargeForSyncing;\n\t}\n\n\tpublic isTooLargeForTokenization(): boolean {\n\t\treturn this._isTooLargeForTokenization;\n\t}\n\n\tpublic isTooLargeForHeapOperation(): boolean {\n\t\treturn this._isTooLargeForHeapOperation;\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._isDisposed;\n\t}\n\n\tpublic isDominatedByLongLines(): boolean {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForTokenization()) {\n\t\t\t// Cannot word wrap huge files anyways, so it doesn't really matter\n\t\t\treturn false;\n\t\t}\n\t\tlet smallLineCharCount = 0;\n\t\tlet longLineCharCount = 0;\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tfor (let lineNumber = 1; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineLength = this._buffer.getLineLength(lineNumber);\n\t\t\tif (lineLength >= LONG_LINE_BOUNDARY) {\n\t\t\t\tlongLineCharCount += lineLength;\n\t\t\t} else {\n\t\t\t\tsmallLineCharCount += lineLength;\n\t\t\t}\n\t\t}\n\n\t\treturn (longLineCharCount > smallLineCharCount);\n\t}\n\n\tpublic get uri(): URI {\n\t\treturn this._associatedResource;\n\t}\n\n\t//#region Options\n\n\tpublic getOptions(): model.TextModelResolvedOptions {\n\t\tthis._assertNotDisposed();\n\t\treturn this._options;\n\t}\n\n\tpublic getFormattingOptions(): FormattingOptions {\n\t\treturn {\n\t\t\ttabSize: this._options.indentSize,\n\t\t\tinsertSpaces: this._options.insertSpaces\n\t\t};\n\t}\n\n\tpublic updateOptions(_newOpts: model.ITextModelUpdateOptions): void {\n\t\tthis._assertNotDisposed();\n\t\tconst tabSize = (typeof _newOpts.tabSize !== 'undefined') ? _newOpts.tabSize : this._options.tabSize;\n\t\tconst indentSize = (typeof _newOpts.indentSize !== 'undefined') ? _newOpts.indentSize : this._options.originalIndentSize;\n\t\tconst insertSpaces = (typeof _newOpts.insertSpaces !== 'undefined') ? _newOpts.insertSpaces : this._options.insertSpaces;\n\t\tconst trimAutoWhitespace = (typeof _newOpts.trimAutoWhitespace !== 'undefined') ? _newOpts.trimAutoWhitespace : this._options.trimAutoWhitespace;\n\t\tconst bracketPairColorizationOptions = (typeof _newOpts.bracketColorizationOptions !== 'undefined') ? _newOpts.bracketColorizationOptions : this._options.bracketPairColorizationOptions;\n\n\t\tconst newOpts = new model.TextModelResolvedOptions({\n\t\t\ttabSize: tabSize,\n\t\t\tindentSize: indentSize,\n\t\t\tinsertSpaces: insertSpaces,\n\t\t\tdefaultEOL: this._options.defaultEOL,\n\t\t\ttrimAutoWhitespace: trimAutoWhitespace,\n\t\t\tbracketPairColorizationOptions,\n\t\t});\n\n\t\tif (this._options.equals(newOpts)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst e = this._options.createChangeEvent(newOpts);\n\t\tthis._options = newOpts;\n\n\t\tthis._bracketPairs.handleDidChangeOptions(e);\n\t\tthis._decorationProvider.handleDidChangeOptions(e);\n\t\tthis._onDidChangeOptions.fire(e);\n\t}\n\n\tpublic detectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void {\n\t\tthis._assertNotDisposed();\n\t\tconst guessedIndentation = guessIndentation(this._buffer, defaultTabSize, defaultInsertSpaces);\n\t\tthis.updateOptions({\n\t\t\tinsertSpaces: guessedIndentation.insertSpaces,\n\t\t\ttabSize: guessedIndentation.tabSize,\n\t\t\tindentSize: guessedIndentation.tabSize, // TODO@Alex: guess indentSize independent of tabSize\n\t\t});\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\tthis._assertNotDisposed();\n\t\treturn normalizeIndentation(str, this._options.indentSize, this._options.insertSpaces);\n\t}\n\n\t//#endregion\n\n\t//#region Reading\n\n\tpublic getVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._versionId;\n\t}\n\n\tpublic mightContainRTL(): boolean {\n\t\treturn this._buffer.mightContainRTL();\n\t}\n\n\tpublic mightContainUnusualLineTerminators(): boolean {\n\t\treturn this._buffer.mightContainUnusualLineTerminators();\n\t}\n\n\tpublic removeUnusualLineTerminators(selections: Selection[] | null = null): void {\n\t\tconst matches = this.findMatches(strings.UNUSUAL_LINE_TERMINATORS.source, false, true, false, null, false, Constants.MAX_SAFE_SMALL_INTEGER);\n\t\tthis._buffer.resetMightContainUnusualLineTerminators();\n\t\tthis.pushEditOperations(selections, matches.map(m => ({ range: m.range, text: null })), () => null);\n\t}\n\n\tpublic mightContainNonBasicASCII(): boolean {\n\t\treturn this._buffer.mightContainNonBasicASCII();\n\t}\n\n\tpublic getAlternativeVersionId(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._alternativeVersionId;\n\t}\n\n\tpublic getInitialUndoRedoSnapshot(): ResourceEditStackSnapshot | null {\n\t\tthis._assertNotDisposed();\n\t\treturn this._initialUndoRedoSnapshot;\n\t}\n\n\tpublic getOffsetAt(rawPosition: IPosition): number {\n\t\tthis._assertNotDisposed();\n\t\tconst position = this._validatePosition(rawPosition.lineNumber, rawPosition.column, StringOffsetValidationType.Relaxed);\n\t\treturn this._buffer.getOffsetAt(position.lineNumber, position.column);\n\t}\n\n\tpublic getPositionAt(rawOffset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst offset = (Math.min(this._buffer.getLength(), Math.max(0, rawOffset)));\n\t\treturn this._buffer.getPositionAt(offset);\n\t}\n\n\tprivate _increaseVersionId(): void {\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._alternativeVersionId = this._versionId;\n\t}\n\n\tpublic _overwriteVersionId(versionId: number): void {\n\t\tthis._versionId = versionId;\n\t}\n\n\tpublic _overwriteAlternativeVersionId(newAlternativeVersionId: number): void {\n\t\tthis._alternativeVersionId = newAlternativeVersionId;\n\t}\n\n\tpublic _overwriteInitialUndoRedoSnapshot(newInitialUndoRedoSnapshot: ResourceEditStackSnapshot | null): void {\n\t\tthis._initialUndoRedoSnapshot = newInitialUndoRedoSnapshot;\n\t}\n\n\tpublic getValue(eol?: model.EndOfLinePreference, preserveBOM: boolean = false): string {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError('Operation would exceed heap memory limits');\n\t\t}\n\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM() + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic createSnapshot(preserveBOM: boolean = false): model.ITextSnapshot {\n\t\treturn new TextModelSnapshot(this._buffer.createSnapshot(preserveBOM));\n\t}\n\n\tpublic getValueLength(eol?: model.EndOfLinePreference, preserveBOM: boolean = false): number {\n\t\tthis._assertNotDisposed();\n\t\tconst fullModelRange = this.getFullModelRange();\n\t\tconst fullModelValue = this.getValueLengthInRange(fullModelRange, eol);\n\n\t\tif (preserveBOM) {\n\t\t\treturn this._buffer.getBOM().length + fullModelValue;\n\t\t}\n\n\t\treturn fullModelValue;\n\t}\n\n\tpublic getValueInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getValueLengthInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getValueLengthInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getCharacterCountInRange(rawRange: IRange, eol: model.EndOfLinePreference = model.EndOfLinePreference.TextDefined): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getCharacterCountInRange(this.validateRange(rawRange), eol);\n\t}\n\n\tpublic getLineCount(): number {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getLineCount();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\n\t\treturn this._buffer.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\n\t\treturn this._buffer.getLineLength(lineNumber);\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (this.isTooLargeForHeapOperation()) {\n\t\t\tthrow new BugIndicatingError('Operation would exceed heap memory limits');\n\t\t}\n\n\t\treturn this._buffer.getLinesContent();\n\t}\n\n\tpublic getEOL(): string {\n\t\tthis._assertNotDisposed();\n\t\treturn this._buffer.getEOL();\n\t}\n\n\tpublic getEndOfLineSequence(): model.EndOfLineSequence {\n\t\tthis._assertNotDisposed();\n\t\treturn (\n\t\t\tthis._buffer.getEOL() === '\\n'\n\t\t\t\t? model.EndOfLineSequence.LF\n\t\t\t\t: model.EndOfLineSequence.CRLF\n\t\t);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineLength(lineNumber) + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineFirstNonWhitespaceColumn(lineNumber);\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tthis._assertNotDisposed();\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t\treturn this._buffer.getLineLastNonWhitespaceColumn(lineNumber);\n\t}\n\n\t/**\n\t * Validates `range` is within buffer bounds, but allows it to sit in between surrogate pairs, etc.\n\t * Will try to not allocate if possible.\n\t */\n\tpublic _validateRangeRelaxedNoAllocations(range: IRange): Range {\n\t\tconst linesCount = this._buffer.getLineCount();\n\n\t\tconst initialStartLineNumber = range.startLineNumber;\n\t\tconst initialStartColumn = range.startColumn;\n\t\tlet startLineNumber = Math.floor((typeof initialStartLineNumber === 'number' && !isNaN(initialStartLineNumber)) ? initialStartLineNumber : 1);\n\t\tlet startColumn = Math.floor((typeof initialStartColumn === 'number' && !isNaN(initialStartColumn)) ? initialStartColumn : 1);\n\n\t\tif (startLineNumber < 1) {\n\t\t\tstartLineNumber = 1;\n\t\t\tstartColumn = 1;\n\t\t} else if (startLineNumber > linesCount) {\n\t\t\tstartLineNumber = linesCount;\n\t\t\tstartColumn = this.getLineMaxColumn(startLineNumber);\n\t\t} else {\n\t\t\tif (startColumn <= 1) {\n\t\t\t\tstartColumn = 1;\n\t\t\t} else {\n\t\t\t\tconst maxColumn = this.getLineMaxColumn(startLineNumber);\n\t\t\t\tif (startColumn >= maxColumn) {\n\t\t\t\t\tstartColumn = maxColumn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst initialEndLineNumber = range.endLineNumber;\n\t\tconst initialEndColumn = range.endColumn;\n\t\tlet endLineNumber = Math.floor((typeof initialEndLineNumber === 'number' && !isNaN(initialEndLineNumber)) ? initialEndLineNumber : 1);\n\t\tlet endColumn = Math.floor((typeof initialEndColumn === 'number' && !isNaN(initialEndColumn)) ? initialEndColumn : 1);\n\n\t\tif (endLineNumber < 1) {\n\t\t\tendLineNumber = 1;\n\t\t\tendColumn = 1;\n\t\t} else if (endLineNumber > linesCount) {\n\t\t\tendLineNumber = linesCount;\n\t\t\tendColumn = this.getLineMaxColumn(endLineNumber);\n\t\t} else {\n\t\t\tif (endColumn <= 1) {\n\t\t\t\tendColumn = 1;\n\t\t\t} else {\n\t\t\t\tconst maxColumn = this.getLineMaxColumn(endLineNumber);\n\t\t\t\tif (endColumn >= maxColumn) {\n\t\t\t\t\tendColumn = maxColumn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tinitialStartLineNumber === startLineNumber\n\t\t\t&& initialStartColumn === startColumn\n\t\t\t&& initialEndLineNumber === endLineNumber\n\t\t\t&& initialEndColumn === endColumn\n\t\t\t&& range instanceof Range\n\t\t\t&& !(range instanceof Selection)\n\t\t) {\n\t\t\treturn range;\n\t\t}\n\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tprivate _isValidPosition(lineNumber: number, column: number, validationType: StringOffsetValidationType): boolean {\n\t\tif (typeof lineNumber !== 'number' || typeof column !== 'number') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (isNaN(lineNumber) || isNaN(column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lineNumber < 1 || column < 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((lineNumber | 0) !== lineNumber || (column | 0) !== column) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst lineCount = this._buffer.getLineCount();\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (column === 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column > maxColumn) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _validatePosition(_lineNumber: number, _column: number, validationType: StringOffsetValidationType): Position {\n\t\tconst lineNumber = Math.floor((typeof _lineNumber === 'number' && !isNaN(_lineNumber)) ? _lineNumber : 1);\n\t\tconst column = Math.floor((typeof _column === 'number' && !isNaN(_column)) ? _column : 1);\n\t\tconst lineCount = this._buffer.getLineCount();\n\n\t\tif (lineNumber < 1) {\n\t\t\treturn new Position(1, 1);\n\t\t}\n\n\t\tif (lineNumber > lineCount) {\n\t\t\treturn new Position(lineCount, this.getLineMaxColumn(lineCount));\n\t\t}\n\n\t\tif (column <= 1) {\n\t\t\treturn new Position(lineNumber, 1);\n\t\t}\n\n\t\tconst maxColumn = this.getLineMaxColumn(lineNumber);\n\t\tif (column >= maxColumn) {\n\t\t\treturn new Position(lineNumber, maxColumn);\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\t// If the position would end up in the middle of a high-low surrogate pair,\n\t\t\t// we move it to before the pair\n\t\t\t// !!At this point, column > 1\n\t\t\tconst charCodeBefore = this._buffer.getLineCharCode(lineNumber, column - 2);\n\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\treturn new Position(lineNumber, column - 1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic validatePosition(position: IPosition): Position {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif (position instanceof Position) {\n\t\t\tif (this._isValidPosition(position.lineNumber, position.column, validationType)) {\n\t\t\t\treturn position;\n\t\t\t}\n\t\t}\n\n\t\treturn this._validatePosition(position.lineNumber, position.column, validationType);\n\t}\n\n\tpublic isValidRange(range: Range): boolean {\n\t\treturn this._isValidRange(range, StringOffsetValidationType.SurrogatePairs);\n\t}\n\n\tprivate _isValidRange(range: Range, validationType: StringOffsetValidationType): boolean {\n\t\tconst startLineNumber = range.startLineNumber;\n\t\tconst startColumn = range.startColumn;\n\t\tconst endLineNumber = range.endLineNumber;\n\t\tconst endColumn = range.endColumn;\n\n\t\tif (!this._isValidPosition(startLineNumber, startColumn, StringOffsetValidationType.Relaxed)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._isValidPosition(endLineNumber, endColumn, StringOffsetValidationType.Relaxed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n\t\t\tconst charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n\n\t\t\tconst startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic validateRange(_range: IRange): Range {\n\t\tconst validationType = StringOffsetValidationType.SurrogatePairs;\n\t\tthis._assertNotDisposed();\n\n\t\t// Avoid object allocation and cover most likely case\n\t\tif ((_range instanceof Range) && !(_range instanceof Selection)) {\n\t\t\tif (this._isValidRange(_range, validationType)) {\n\t\t\t\treturn _range;\n\t\t\t}\n\t\t}\n\n\t\tconst start = this._validatePosition(_range.startLineNumber, _range.startColumn, StringOffsetValidationType.Relaxed);\n\t\tconst end = this._validatePosition(_range.endLineNumber, _range.endColumn, StringOffsetValidationType.Relaxed);\n\n\t\tconst startLineNumber = start.lineNumber;\n\t\tconst startColumn = start.column;\n\t\tconst endLineNumber = end.lineNumber;\n\t\tconst endColumn = end.column;\n\n\t\tif (validationType === StringOffsetValidationType.SurrogatePairs) {\n\t\t\tconst charCodeBeforeStart = (startColumn > 1 ? this._buffer.getLineCharCode(startLineNumber, startColumn - 2) : 0);\n\t\t\tconst charCodeBeforeEnd = (endColumn > 1 && endColumn <= this._buffer.getLineLength(endLineNumber) ? this._buffer.getLineCharCode(endLineNumber, endColumn - 2) : 0);\n\n\t\t\tconst startInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeStart);\n\t\t\tconst endInsideSurrogatePair = strings.isHighSurrogate(charCodeBeforeEnd);\n\n\t\t\tif (!startInsideSurrogatePair && !endInsideSurrogatePair) {\n\t\t\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t\t\t}\n\n\t\t\tif (startLineNumber === endLineNumber && startColumn === endColumn) {\n\t\t\t\t// do not expand a collapsed range, simply move it to a valid location\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn - 1);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair && endInsideSurrogatePair) {\n\t\t\t\t// expand range at both ends\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn + 1);\n\t\t\t}\n\n\t\t\tif (startInsideSurrogatePair) {\n\t\t\t\t// only expand range at the start\n\t\t\t\treturn new Range(startLineNumber, startColumn - 1, endLineNumber, endColumn);\n\t\t\t}\n\n\t\t\t// only expand range at the end\n\t\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn + 1);\n\t\t}\n\n\t\treturn new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t}\n\n\tpublic modifyPosition(rawPosition: IPosition, offset: number): Position {\n\t\tthis._assertNotDisposed();\n\t\tconst candidate = this.getOffsetAt(rawPosition) + offset;\n\t\treturn this.getPositionAt(Math.min(this._buffer.getLength(), Math.max(0, candidate)));\n\t}\n\n\tpublic getFullModelRange(): Range {\n\t\tthis._assertNotDisposed();\n\t\tconst lineCount = this.getLineCount();\n\t\treturn new Range(1, 1, lineCount, this.getLineMaxColumn(lineCount));\n\t}\n\n\tprivate findMatchesLineByLine(searchRange: Range, searchData: model.SearchData, captureMatches: boolean, limitResultCount: number): model.FindMatch[] {\n\t\treturn this._buffer.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t}\n\n\tpublic findMatches(searchString: string, rawSearchScope: any, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount: number = LIMIT_FIND_COUNT): model.FindMatch[] {\n\t\tthis._assertNotDisposed();\n\n\t\tlet searchRanges: Range[] | null = null;\n\n\t\tif (rawSearchScope !== null) {\n\t\t\tif (!Array.isArray(rawSearchScope)) {\n\t\t\t\trawSearchScope = [rawSearchScope];\n\t\t\t}\n\n\t\t\tif (rawSearchScope.every((searchScope: Range) => Range.isIRange(searchScope))) {\n\t\t\t\tsearchRanges = rawSearchScope.map((searchScope: Range) => this.validateRange(searchScope));\n\t\t\t}\n\t\t}\n\n\t\tif (searchRanges === null) {\n\t\t\tsearchRanges = [this.getFullModelRange()];\n\t\t}\n\n\t\tsearchRanges = searchRanges.sort((d1, d2) => d1.startLineNumber - d2.startLineNumber || d1.startColumn - d2.startColumn);\n\n\t\tconst uniqueSearchRanges: Range[] = [];\n\t\tuniqueSearchRanges.push(searchRanges.reduce((prev, curr) => {\n\t\t\tif (Range.areIntersecting(prev, curr)) {\n\t\t\t\treturn prev.plusRange(curr);\n\t\t\t}\n\n\t\t\tuniqueSearchRanges.push(prev);\n\t\t\treturn curr;\n\t\t}));\n\n\t\tlet matchMapper: (value: Range, index: number, array: Range[]) => model.FindMatch[];\n\t\tif (!isRegex && searchString.indexOf('\\n') < 0) {\n\t\t\t// not regex, not multi line\n\t\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\n\t\t\tif (!searchData) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tmatchMapper = (searchRange: Range) => this.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t\t} else {\n\t\t\tmatchMapper = (searchRange: Range) => TextModelSearch.findMatches(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchRange, captureMatches, limitResultCount);\n\t\t}\n\n\t\treturn uniqueSearchRanges.map(matchMapper).reduce((arr, matches: model.FindMatch[]) => arr.concat(matches), []);\n\t}\n\n\tpublic findNextMatch(searchString: string, rawSearchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\n\t\tif (!isRegex && searchString.indexOf('\\n') < 0) {\n\t\t\tconst searchParams = new SearchParams(searchString, isRegex, matchCase, wordSeparators);\n\t\t\tconst searchData = searchParams.parseSearchRequest();\n\t\t\tif (!searchData) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst lineCount = this.getLineCount();\n\t\t\tlet searchRange = new Range(searchStart.lineNumber, searchStart.column, lineCount, this.getLineMaxColumn(lineCount));\n\t\t\tlet ret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n\t\t\tTextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\tsearchRange = new Range(1, 1, searchStart.lineNumber, this.getLineMaxColumn(searchStart.lineNumber));\n\t\t\tret = this.findMatchesLineByLine(searchRange, searchData, captureMatches, 1);\n\n\t\t\tif (ret.length > 0) {\n\t\t\t\treturn ret[0];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn TextModelSearch.findNextMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t}\n\n\tpublic findPreviousMatch(searchString: string, rawSearchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string, captureMatches: boolean): model.FindMatch | null {\n\t\tthis._assertNotDisposed();\n\t\tconst searchStart = this.validatePosition(rawSearchStart);\n\t\treturn TextModelSearch.findPreviousMatch(this, new SearchParams(searchString, isRegex, matchCase, wordSeparators), searchStart, captureMatches);\n\t}\n\n\t//#endregion\n\n\t//#region Editing\n\n\tpublic pushStackElement(): void {\n\t\tthis._commandManager.pushStackElement();\n\t}\n\n\tpublic popStackElement(): void {\n\t\tthis._commandManager.popStackElement();\n\t}\n\n\tpublic pushEOL(eol: model.EndOfLineSequence): void {\n\t\tconst currentEOL = (this.getEOL() === '\\n' ? model.EndOfLineSequence.LF : model.EndOfLineSequence.CRLF);\n\t\tif (currentEOL === eol) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\t\tthis._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n\t\t\t}\n\t\t\tthis._commandManager.pushEOL(eol);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _validateEditOperation(rawOperation: model.IIdentifiedSingleEditOperation): model.ValidAnnotatedEditOperation {\n\t\tif (rawOperation instanceof model.ValidAnnotatedEditOperation) {\n\t\t\treturn rawOperation;\n\t\t}\n\t\treturn new model.ValidAnnotatedEditOperation(\n\t\t\trawOperation.identifier || null,\n\t\t\tthis.validateRange(rawOperation.range),\n\t\t\trawOperation.text,\n\t\t\trawOperation.forceMoveMarkers || false,\n\t\t\trawOperation.isAutoWhitespaceEdit || false,\n\t\t\trawOperation._isTracked || false\n\t\t);\n\t}\n\n\tprivate _validateEditOperations(rawOperations: readonly model.IIdentifiedSingleEditOperation[]): model.ValidAnnotatedEditOperation[] {\n\t\tconst result: model.ValidAnnotatedEditOperation[] = [];\n\t\tfor (let i = 0, len = rawOperations.length; i < len; i++) {\n\t\t\tresult[i] = this._validateEditOperation(rawOperations[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic pushEditOperations(beforeCursorState: Selection[] | null, editOperations: model.IIdentifiedSingleEditOperation[], cursorStateComputer: model.ICursorStateComputer | null, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\treturn this._pushEditOperations(beforeCursorState, this._validateEditOperations(editOperations), cursorStateComputer, group, reason);\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _pushEditOperations(beforeCursorState: Selection[] | null, editOperations: model.ValidAnnotatedEditOperation[], cursorStateComputer: model.ICursorStateComputer | null, group?: UndoRedoGroup, reason?: TextModelEditSource): Selection[] | null {\n\t\tif (this._options.trimAutoWhitespace && this._trimAutoWhitespaceLines) {\n\t\t\t// Go through each saved line number and insert a trim whitespace edit\n\t\t\t// if it is safe to do so (no conflicts with other edits).\n\n\t\t\tconst incomingEdits = editOperations.map((op) => {\n\t\t\t\treturn {\n\t\t\t\t\trange: this.validateRange(op.range),\n\t\t\t\t\ttext: op.text\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Sometimes, auto-formatters change ranges automatically which can cause undesired auto whitespace trimming near the cursor\n\t\t\t// We'll use the following heuristic: if the edits occur near the cursor, then it's ok to trim auto whitespace\n\t\t\tlet editsAreNearCursors = true;\n\t\t\tif (beforeCursorState) {\n\t\t\t\tfor (let i = 0, len = beforeCursorState.length; i < len; i++) {\n\t\t\t\t\tconst sel = beforeCursorState[i];\n\t\t\t\t\tlet foundEditNearSel = false;\n\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst selIsAbove = editRange.startLineNumber > sel.endLineNumber;\n\t\t\t\t\t\tconst selIsBelow = sel.startLineNumber > editRange.endLineNumber;\n\t\t\t\t\t\tif (!selIsAbove && !selIsBelow) {\n\t\t\t\t\t\t\tfoundEditNearSel = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!foundEditNearSel) {\n\t\t\t\t\t\teditsAreNearCursors = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editsAreNearCursors) {\n\t\t\t\tfor (let i = 0, len = this._trimAutoWhitespaceLines.length; i < len; i++) {\n\t\t\t\t\tconst trimLineNumber = this._trimAutoWhitespaceLines[i];\n\t\t\t\t\tconst maxLineColumn = this.getLineMaxColumn(trimLineNumber);\n\n\t\t\t\t\tlet allowTrimLine = true;\n\t\t\t\t\tfor (let j = 0, lenJ = incomingEdits.length; j < lenJ; j++) {\n\t\t\t\t\t\tconst editRange = incomingEdits[j].range;\n\t\t\t\t\t\tconst editText = incomingEdits[j].text;\n\n\t\t\t\t\t\tif (trimLineNumber < editRange.startLineNumber || trimLineNumber > editRange.endLineNumber) {\n\t\t\t\t\t\t\t// `trimLine` is completely outside this edit\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// At this point:\n\t\t\t\t\t\t//   editRange.startLineNumber <= trimLine <= editRange.endLineNumber\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber && editRange.startColumn === maxLineColumn\n\t\t\t\t\t\t\t&& editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(0) === '\\n'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) after `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttrimLineNumber === editRange.startLineNumber && editRange.startColumn === 1\n\t\t\t\t\t\t\t&& editRange.isEmpty() && editText && editText.length > 0 && editText.charAt(editText.length - 1) === '\\n'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// This edit inserts a new line (and maybe other text) before `trimLine`\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Looks like we can't trim this line as it would interfere with an incoming edit\n\t\t\t\t\t\tallowTrimLine = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (allowTrimLine) {\n\t\t\t\t\t\tconst trimRange = new Range(trimLineNumber, 1, trimLineNumber, maxLineColumn);\n\t\t\t\t\t\teditOperations.push(new model.ValidAnnotatedEditOperation(null, trimRange, null, false, false, false));\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._trimAutoWhitespaceLines = null;\n\t\t}\n\t\tif (this._initialUndoRedoSnapshot === null) {\n\t\t\tthis._initialUndoRedoSnapshot = this._undoRedoService.createSnapshot(this.uri);\n\t\t}\n\t\treturn this._commandManager.pushEditOperation(beforeCursorState, editOperations, cursorStateComputer, group, reason);\n\t}\n\n\t_applyUndo(changes: TextChange[], eol: model.EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.newPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.newEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n\t\t\t\ttext: change.oldText\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(edits, eol, true, false, resultingAlternativeVersionId, resultingSelection);\n\t}\n\n\t_applyRedo(changes: TextChange[], eol: model.EndOfLineSequence, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\tconst edits = changes.map<ISingleEditOperation>((change) => {\n\t\t\tconst rangeStart = this.getPositionAt(change.oldPosition);\n\t\t\tconst rangeEnd = this.getPositionAt(change.oldEnd);\n\t\t\treturn {\n\t\t\t\trange: new Range(rangeStart.lineNumber, rangeStart.column, rangeEnd.lineNumber, rangeEnd.column),\n\t\t\t\ttext: change.newText\n\t\t\t};\n\t\t});\n\t\tthis._applyUndoRedoEdits(edits, eol, false, true, resultingAlternativeVersionId, resultingSelection);\n\t}\n\n\tprivate _applyUndoRedoEdits(edits: ISingleEditOperation[], eol: model.EndOfLineSequence, isUndoing: boolean, isRedoing: boolean, resultingAlternativeVersionId: number, resultingSelection: Selection[] | null): void {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tthis._isUndoing = isUndoing;\n\t\t\tthis._isRedoing = isRedoing;\n\t\t\tthis.applyEdits(edits, false);\n\t\t\tthis.setEOL(eol);\n\t\t\tthis._overwriteAlternativeVersionId(resultingAlternativeVersionId);\n\t\t} finally {\n\t\t\tthis._isUndoing = false;\n\t\t\tthis._isRedoing = false;\n\t\t\tthis._eventEmitter.endDeferredEmit(resultingSelection);\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[]): void;\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: true): model.IValidEditOperation[];\n\t/** @internal */\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: false, reason: TextModelEditSource): void;\n\t/** @internal */\n\tpublic applyEdits(operations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits: true, reason: TextModelEditSource): model.IValidEditOperation[];\n\tpublic applyEdits(rawOperations: readonly model.IIdentifiedSingleEditOperation[], computeUndoEdits?: boolean, reason?: TextModelEditSource): void | model.IValidEditOperation[] {\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\tthis._eventEmitter.beginDeferredEmit();\n\t\t\tconst operations = this._validateEditOperations(rawOperations);\n\n\t\t\treturn this._doApplyEdits(operations, computeUndoEdits ?? false, reason ?? EditSources.applyEdits());\n\t\t} finally {\n\t\t\tthis._eventEmitter.endDeferredEmit();\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _doApplyEdits(rawOperations: model.ValidAnnotatedEditOperation[], computeUndoEdits: boolean, reason: TextModelEditSource): void | model.IValidEditOperation[] {\n\n\t\tconst oldLineCount = this._buffer.getLineCount();\n\t\tconst result = this._buffer.applyEdits(rawOperations, this._options.trimAutoWhitespace, computeUndoEdits);\n\t\tconst newLineCount = this._buffer.getLineCount();\n\n\t\tconst contentChanges = result.changes;\n\t\tthis._trimAutoWhitespaceLines = result.trimAutoWhitespaceLineNumbers;\n\n\t\tif (contentChanges.length !== 0) {\n\t\t\t// We do a first pass to update decorations\n\t\t\t// because we want to read decorations in the second pass\n\t\t\t// where we will emit content change events\n\t\t\t// and we want to read the final decorations\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tthis._decorationsTree.acceptReplace(change.rangeOffset, change.rangeLength, change.text.length, change.forceMoveMarkers);\n\t\t\t}\n\n\t\t\tconst rawContentChanges: ModelRawChange[] = [];\n\n\t\t\tthis._increaseVersionId();\n\n\t\t\tlet lineCount = oldLineCount;\n\t\t\tfor (let i = 0, len = contentChanges.length; i < len; i++) {\n\t\t\t\tconst change = contentChanges[i];\n\t\t\t\tconst [eolCount] = countEOL(change.text);\n\t\t\t\tthis._onDidChangeDecorations.fire();\n\n\t\t\t\tconst startLineNumber = change.range.startLineNumber;\n\t\t\t\tconst endLineNumber = change.range.endLineNumber;\n\n\t\t\t\tconst deletingLinesCnt = endLineNumber - startLineNumber;\n\t\t\t\tconst insertingLinesCnt = eolCount;\n\t\t\t\tconst editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\n\n\t\t\t\tconst changeLineCountDelta = (insertingLinesCnt - deletingLinesCnt);\n\n\t\t\t\tconst currentEditStartLineNumber = newLineCount - lineCount - changeLineCountDelta + startLineNumber;\n\t\t\t\tconst firstEditLineNumber = currentEditStartLineNumber;\n\t\t\t\tconst lastInsertedLineNumber = currentEditStartLineNumber + insertingLinesCnt;\n\n\t\t\t\tconst decorationsWithInjectedTextInEditedRange = this._decorationsTree.getInjectedTextInInterval(\n\t\t\t\t\tthis,\n\t\t\t\t\tthis.getOffsetAt(new Position(firstEditLineNumber, 1)),\n\t\t\t\t\tthis.getOffsetAt(new Position(lastInsertedLineNumber, this.getLineMaxColumn(lastInsertedLineNumber))),\n\t\t\t\t\t0\n\t\t\t\t);\n\n\n\t\t\t\tconst injectedTextInEditedRange = LineInjectedText.fromDecorations(decorationsWithInjectedTextInEditedRange);\n\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n\n\t\t\t\tfor (let j = editingLinesCnt; j >= 0; j--) {\n\t\t\t\t\tconst editLineNumber = startLineNumber + j;\n\t\t\t\t\tconst currentEditLineNumber = currentEditStartLineNumber + j;\n\n\t\t\t\t\tinjectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber > currentEditLineNumber);\n\t\t\t\t\tconst decorationsInCurrentLine = injectedTextInEditedRangeQueue.takeFromEndWhile(r => r.lineNumber === currentEditLineNumber);\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLineChanged(\n\t\t\t\t\t\t\teditLineNumber,\n\t\t\t\t\t\t\tthis.getLineContent(currentEditLineNumber),\n\t\t\t\t\t\t\tdecorationsInCurrentLine\n\t\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < deletingLinesCnt) {\n\t\t\t\t\t// Must delete some lines\n\t\t\t\t\tconst spliceStartLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\trawContentChanges.push(new ModelRawLinesDeleted(spliceStartLineNumber + 1, endLineNumber));\n\t\t\t\t}\n\n\t\t\t\tif (editingLinesCnt < insertingLinesCnt) {\n\t\t\t\t\tconst injectedTextInEditedRangeQueue = new ArrayQueue(injectedTextInEditedRange);\n\t\t\t\t\t// Must insert some lines\n\t\t\t\t\tconst spliceLineNumber = startLineNumber + editingLinesCnt;\n\t\t\t\t\tconst cnt = insertingLinesCnt - editingLinesCnt;\n\t\t\t\t\tconst fromLineNumber = newLineCount - lineCount - cnt + spliceLineNumber + 1;\n\t\t\t\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\t\t\t\tconst newLines: string[] = [];\n\t\t\t\t\tfor (let i = 0; i < cnt; i++) {\n\t\t\t\t\t\tconst lineNumber = fromLineNumber + i;\n\t\t\t\t\t\tnewLines[i] = this.getLineContent(lineNumber);\n\n\t\t\t\t\t\tinjectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber < lineNumber);\n\t\t\t\t\t\tinjectedTexts[i] = injectedTextInEditedRangeQueue.takeWhile(r => r.lineNumber === lineNumber);\n\t\t\t\t\t}\n\n\t\t\t\t\trawContentChanges.push(\n\t\t\t\t\t\tnew ModelRawLinesInserted(\n\t\t\t\t\t\t\tspliceLineNumber + 1,\n\t\t\t\t\t\t\tstartLineNumber + insertingLinesCnt,\n\t\t\t\t\t\t\tnewLines,\n\t\t\t\t\t\t\tinjectedTexts\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlineCount += changeLineCountDelta;\n\t\t\t}\n\n\t\t\tthis._emitContentChangedEvent(\n\t\t\t\tnew ModelRawContentChangedEvent(\n\t\t\t\t\trawContentChanges,\n\t\t\t\t\tthis.getVersionId(),\n\t\t\t\t\tthis._isUndoing,\n\t\t\t\t\tthis._isRedoing\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tchanges: contentChanges,\n\t\t\t\t\teol: this._buffer.getEOL(),\n\t\t\t\t\tisEolChange: false,\n\t\t\t\t\tversionId: this.getVersionId(),\n\t\t\t\t\tisUndoing: this._isUndoing,\n\t\t\t\t\tisRedoing: this._isRedoing,\n\t\t\t\t\tisFlush: false,\n\t\t\t\t\tdetailedReasons: [reason],\n\t\t\t\t\tdetailedReasonsChangeLengths: [contentChanges.length],\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\treturn (result.reverseEdits === null ? undefined : result.reverseEdits);\n\t}\n\n\tpublic undo(): void | Promise<void> {\n\t\treturn this._undoRedoService.undo(this.uri);\n\t}\n\n\tpublic canUndo(): boolean {\n\t\treturn this._undoRedoService.canUndo(this.uri);\n\t}\n\n\tpublic redo(): void | Promise<void> {\n\t\treturn this._undoRedoService.redo(this.uri);\n\t}\n\n\tpublic canRedo(): boolean {\n\t\treturn this._undoRedoService.canRedo(this.uri);\n\t}\n\n\t//#endregion\n\n\t//#region Decorations\n\n\tprivate handleBeforeFireDecorationsChangedEvent(affectedInjectedTextLines: Set<number> | null, affectedLineHeights: Set<LineHeightChangingDecoration> | null, affectedFontLines: Set<LineFontChangingDecoration> | null): void {\n\t\t// This is called before the decoration changed event is fired.\n\n\t\tif (affectedInjectedTextLines && affectedInjectedTextLines.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedInjectedTextLines);\n\t\t\tconst lineChangeEvents = affectedLines.map(lineNumber => new ModelRawLineChanged(lineNumber, this.getLineContent(lineNumber), this._getInjectedTextInLine(lineNumber)));\n\t\t\tthis._onDidChangeInjectedText.fire(new ModelInjectedTextChangedEvent(lineChangeEvents));\n\t\t}\n\t\tif (affectedLineHeights && affectedLineHeights.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedLineHeights);\n\t\t\tconst lineHeightChangeEvent = affectedLines.map(specialLineHeightChange => new ModelLineHeightChanged(specialLineHeightChange.ownerId, specialLineHeightChange.decorationId, specialLineHeightChange.lineNumber, specialLineHeightChange.lineHeight));\n\t\t\tthis._onDidChangeLineHeight.fire(new ModelLineHeightChangedEvent(lineHeightChangeEvent));\n\t\t}\n\t\tif (affectedFontLines && affectedFontLines.size > 0) {\n\t\t\tconst affectedLines = Array.from(affectedFontLines);\n\t\t\tconst fontChangeEvent = affectedLines.map(fontChange => new ModelFontChanged(fontChange.ownerId, fontChange.lineNumber));\n\t\t\tthis._onDidChangeFont.fire(new ModelFontChangedEvent(fontChangeEvent));\n\t\t}\n\t}\n\n\tpublic changeDecorations<T>(callback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T, ownerId: number = 0): T | null {\n\t\tthis._assertNotDisposed();\n\n\t\ttry {\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._changeDecorations(ownerId, callback);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\tprivate _changeDecorations<T>(ownerId: number, callback: (changeAccessor: model.IModelDecorationsChangeAccessor) => T): T | null {\n\t\tconst changeAccessor: model.IModelDecorationsChangeAccessor = {\n\t\t\taddDecoration: (range: IRange, options: model.IModelDecorationOptions): string => {\n\t\t\t\treturn this._deltaDecorationsImpl(ownerId, [], [{ range: range, options: options }])[0];\n\t\t\t},\n\t\t\tchangeDecoration: (id: string, newRange: IRange): void => {\n\t\t\t\tthis._changeDecorationImpl(ownerId, id, newRange);\n\t\t\t},\n\t\t\tchangeDecorationOptions: (id: string, options: model.IModelDecorationOptions) => {\n\t\t\t\tthis._changeDecorationOptionsImpl(ownerId, id, _normalizeOptions(options));\n\t\t\t},\n\t\t\tremoveDecoration: (id: string): void => {\n\t\t\t\tthis._deltaDecorationsImpl(ownerId, [id], []);\n\t\t\t},\n\t\t\tdeltaDecorations: (oldDecorations: string[], newDecorations: model.IModelDeltaDecoration[]): string[] => {\n\t\t\t\tif (oldDecorations.length === 0 && newDecorations.length === 0) {\n\t\t\t\t\t// nothing to do\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n\t\t\t}\n\t\t};\n\t\tlet result: T | null = null;\n\t\ttry {\n\t\t\tresult = callback(changeAccessor);\n\t\t} catch (e) {\n\t\t\tonUnexpectedError(e);\n\t\t}\n\t\t// Invalidate change accessor\n\t\tchangeAccessor.addDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecoration = invalidFunc;\n\t\tchangeAccessor.changeDecorationOptions = invalidFunc;\n\t\tchangeAccessor.removeDecoration = invalidFunc;\n\t\tchangeAccessor.deltaDecorations = invalidFunc;\n\t\treturn result;\n\t}\n\n\tpublic deltaDecorations(oldDecorations: string[], newDecorations: model.IModelDeltaDecoration[], ownerId: number = 0): string[] {\n\t\tthis._assertNotDisposed();\n\t\tif (!oldDecorations) {\n\t\t\toldDecorations = [];\n\t\t}\n\t\tif (oldDecorations.length === 0 && newDecorations.length === 0) {\n\t\t\t// nothing to do\n\t\t\treturn [];\n\t\t}\n\n\t\ttry {\n\t\t\tthis._deltaDecorationCallCnt++;\n\t\t\tif (this._deltaDecorationCallCnt > 1) {\n\t\t\t\tconsole.warn(`Invoking deltaDecorations recursively could lead to leaking decorations.`);\n\t\t\t\tonUnexpectedError(new Error(`Invoking deltaDecorations recursively could lead to leaking decorations.`));\n\t\t\t}\n\t\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\t\treturn this._deltaDecorationsImpl(ownerId, oldDecorations, newDecorations);\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t\tthis._deltaDecorationCallCnt--;\n\t\t}\n\t}\n\n\t_getTrackedRange(id: string): Range | null {\n\t\treturn this.getDecorationRange(id);\n\t}\n\n\t_setTrackedRange(id: string | null, newRange: null, newStickiness: model.TrackedRangeStickiness): null;\n\t_setTrackedRange(id: string | null, newRange: Range, newStickiness: model.TrackedRangeStickiness): string;\n\t_setTrackedRange(id: string | null, newRange: Range | null, newStickiness: model.TrackedRangeStickiness): string | null {\n\t\tconst node = (id ? this._decorations[id] : null);\n\n\t\tif (!node) {\n\t\t\tif (!newRange) {\n\t\t\t\t// node doesn't exist, the request is to delete => nothing to do\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// node doesn't exist, the request is to set => add the tracked range\n\t\t\treturn this._deltaDecorationsImpl(0, [], [{ range: newRange, options: TRACKED_RANGE_OPTIONS[newStickiness] }], true)[0];\n\t\t}\n\n\t\tif (!newRange) {\n\t\t\t// node exists, the request is to delete => delete node\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t\treturn null;\n\t\t}\n\n\t\t// node exists, the request is to set => change the tracked range and its options\n\t\tconst range = this._validateRangeRelaxedNoAllocations(newRange);\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tnode.setOptions(TRACKED_RANGE_OPTIONS[newStickiness]);\n\t\tthis._decorationsTree.insert(node);\n\t\treturn node.id;\n\t}\n\n\tpublic removeAllDecorationsWithOwnerId(ownerId: number): void {\n\t\tif (this._isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tconst nodes = this._decorationsTree.collectNodesFromOwner(ownerId);\n\t\tfor (let i = 0, len = nodes.length; i < len; i++) {\n\t\t\tconst node = nodes[i];\n\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tdelete this._decorations[node.id];\n\t\t}\n\t}\n\n\tpublic getDecorationOptions(decorationId: string): model.IModelDecorationOptions | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn node.options;\n\t}\n\n\tpublic getDecorationRange(decorationId: string): Range | null {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this._decorationsTree.getNodeRange(this, node);\n\t}\n\n\tpublic getLineDecorations(lineNumber: number, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\tif (lineNumber < 1 || lineNumber > this.getLineCount()) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this.getLinesDecorations(lineNumber, lineNumber, ownerId, filterOutValidation, filterFontDecorations);\n\t}\n\n\tpublic getLinesDecorations(_startLineNumber: number, _endLineNumber: number, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false, onlyMarginDecorations: boolean = false): model.IModelDecoration[] {\n\t\tconst lineCount = this.getLineCount();\n\t\tconst startLineNumber = Math.min(lineCount, Math.max(1, _startLineNumber));\n\t\tconst endLineNumber = Math.min(lineCount, Math.max(1, _endLineNumber));\n\t\tconst endColumn = this.getLineMaxColumn(endLineNumber);\n\t\tconst range = new Range(startLineNumber, 1, endLineNumber, endColumn);\n\n\t\tconst decorations = this._getDecorationsInRange(range, ownerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t\tpushMany(decorations, this._decorationProvider.getDecorationsInRange(range, ownerId, filterOutValidation));\n\t\treturn decorations;\n\t}\n\n\tpublic getDecorationsInRange(range: IRange, ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false, onlyMinimapDecorations: boolean = false, onlyMarginDecorations: boolean = false): model.IModelDecoration[] {\n\t\tconst validatedRange = this.validateRange(range);\n\n\t\tconst decorations = this._getDecorationsInRange(validatedRange, ownerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t\tpushMany(decorations, this._decorationProvider.getDecorationsInRange(validatedRange, ownerId, filterOutValidation, onlyMinimapDecorations));\n\t\treturn decorations;\n\t}\n\n\tpublic getOverviewRulerDecorations(ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(this, ownerId, filterOutValidation, filterFontDecorations, true, false);\n\t}\n\n\tpublic getInjectedTextDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAllInjectedText(this, ownerId);\n\t}\n\n\tpublic getCustomLineHeightsDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAllCustomLineHeights(this, ownerId);\n\t}\n\n\tprivate _getInjectedTextInLine(lineNumber: number): LineInjectedText[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(lineNumber, 1);\n\t\tconst endOffset = startOffset + this._buffer.getLineLength(lineNumber);\n\n\t\tconst result = this._decorationsTree.getInjectedTextInInterval(this, startOffset, endOffset, 0);\n\t\treturn LineInjectedText.fromDecorations(result).filter(t => t.lineNumber === lineNumber);\n\t}\n\n\tpublic getFontDecorationsInRange(range: IRange, ownerId: number = 0): model.IModelDecoration[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\t\treturn this._decorationsTree.getFontDecorationsInInterval(this, startOffset, endOffset, ownerId);\n\t}\n\n\tpublic getAllDecorations(ownerId: number = 0, filterOutValidation: boolean = false, filterFontDecorations: boolean = false): model.IModelDecoration[] {\n\t\tlet result = this._decorationsTree.getAll(this, ownerId, filterOutValidation, filterFontDecorations, false, false);\n\t\tresult = result.concat(this._decorationProvider.getAllDecorations(ownerId, filterOutValidation));\n\t\treturn result;\n\t}\n\n\tpublic getAllMarginDecorations(ownerId: number = 0): model.IModelDecoration[] {\n\t\treturn this._decorationsTree.getAll(this, ownerId, false, false, false, true);\n\t}\n\n\tprivate _getDecorationsInRange(filterRange: Range, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst startOffset = this._buffer.getOffsetAt(filterRange.startLineNumber, filterRange.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(filterRange.endLineNumber, filterRange.endColumn);\n\t\treturn this._decorationsTree.getAllInInterval(this, startOffset, endOffset, filterOwnerId, filterOutValidation, filterFontDecorations, onlyMarginDecorations);\n\t}\n\n\tpublic getRangeAt(start: number, end: number): Range {\n\t\treturn this._buffer.getRangeAt(start, end - start);\n\t}\n\n\tprivate _changeDecorationImpl(ownerId: number, decorationId: string, _range: IRange): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (node.options.after) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange!.endLineNumber);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(oldRange!.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, oldRange!.startLineNumber, null);\n\t\t}\n\t\tif (node.options.affectsFont) {\n\t\t\tconst oldRange = this.getDecorationRange(decorationId);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, oldRange!.startLineNumber);\n\t\t}\n\n\t\tconst range = this._validateRangeRelaxedNoAllocations(_range);\n\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\tthis._decorationsTree.delete(node);\n\t\tnode.reset(this.getVersionId(), startOffset, endOffset, range);\n\t\tthis._decorationsTree.insert(node);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\n\t\tif (node.options.after) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n\t\t}\n\t\tif (node.options.before) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, range.startLineNumber, node.options.lineHeight);\n\t\t}\n\t\tif (node.options.affectsFont) {\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, range.startLineNumber);\n\t\t}\n\t}\n\n\tprivate _changeDecorationOptionsImpl(ownerId: number, decorationId: string, options: ModelDecorationOptions): void {\n\t\tconst node = this._decorations[decorationId];\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nodeWasInOverviewRuler = (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n\t\tconst nodeIsInOverviewRuler = (options.overviewRuler && options.overviewRuler.color ? true : false);\n\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\t\tthis._onDidChangeDecorations.checkAffectedAndFire(options);\n\n\t\tif (node.options.after || options.after) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n\t\t}\n\t\tif (node.options.before || options.before) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n\t\t}\n\t\tif (node.options.lineHeight !== null || options.lineHeight !== null) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, nodeRange.startLineNumber, options.lineHeight);\n\t\t}\n\t\tif (node.options.affectsFont || options.affectsFont) {\n\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, decorationId, nodeRange.startLineNumber);\n\t\t}\n\n\t\tconst movedInOverviewRuler = nodeWasInOverviewRuler !== nodeIsInOverviewRuler;\n\t\tconst changedWhetherInjectedText = isOptionsInjectedText(options) !== isNodeInjectedText(node);\n\t\tif (movedInOverviewRuler || changedWhetherInjectedText) {\n\t\t\tthis._decorationsTree.delete(node);\n\t\t\tnode.setOptions(options);\n\t\t\tthis._decorationsTree.insert(node);\n\t\t} else {\n\t\t\tnode.setOptions(options);\n\t\t}\n\t}\n\n\tprivate _deltaDecorationsImpl(ownerId: number, oldDecorationsIds: string[], newDecorations: model.IModelDeltaDecoration[], suppressEvents: boolean = false): string[] {\n\t\tconst versionId = this.getVersionId();\n\n\t\tconst oldDecorationsLen = oldDecorationsIds.length;\n\t\tlet oldDecorationIndex = 0;\n\n\t\tconst newDecorationsLen = newDecorations.length;\n\t\tlet newDecorationIndex = 0;\n\n\t\tthis._onDidChangeDecorations.beginDeferredEmit();\n\t\ttry {\n\t\t\tconst result = new Array<string>(newDecorationsLen);\n\t\t\twhile (oldDecorationIndex < oldDecorationsLen || newDecorationIndex < newDecorationsLen) {\n\n\t\t\t\tlet node: IntervalNode | null = null;\n\n\t\t\t\tif (oldDecorationIndex < oldDecorationsLen) {\n\t\t\t\t\t// (1) get ourselves an old node\n\t\t\t\t\tlet decorationId: string;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tdecorationId = oldDecorationsIds[oldDecorationIndex++];\n\t\t\t\t\t\tnode = this._decorations[decorationId];\n\t\t\t\t\t} while (!node && oldDecorationIndex < oldDecorationsLen);\n\n\t\t\t\t\t// (2) remove the node from the tree (if it exists)\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.endLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(nodeRange.startLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.lineHeight !== null) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, decorationId, nodeRange.startLineNumber, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (node.options.affectsFont) {\n\t\t\t\t\t\t\tconst nodeRange = this._decorationsTree.getNodeRange(this, node);\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, decorationId, nodeRange.startLineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._decorationsTree.delete(node);\n\n\t\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(node.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newDecorationIndex < newDecorationsLen) {\n\t\t\t\t\t// (3) create a new node if necessary\n\t\t\t\t\tif (!node) {\n\t\t\t\t\t\tconst internalDecorationId = (++this._lastDecorationId);\n\t\t\t\t\t\tconst decorationId = `${this._instanceId};${internalDecorationId}`;\n\t\t\t\t\t\tnode = new IntervalNode(decorationId, 0, 0);\n\t\t\t\t\t\tthis._decorations[decorationId] = node;\n\t\t\t\t\t}\n\n\t\t\t\t\t// (4) initialize node\n\t\t\t\t\tconst newDecoration = newDecorations[newDecorationIndex];\n\t\t\t\t\tconst range = this._validateRangeRelaxedNoAllocations(newDecoration.range);\n\t\t\t\t\tconst options = _normalizeOptions(newDecoration.options);\n\t\t\t\t\tconst startOffset = this._buffer.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\t\t\t\tconst endOffset = this._buffer.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\t\t\t\tnode.ownerId = ownerId;\n\t\t\t\t\tnode.reset(versionId, startOffset, endOffset, range);\n\t\t\t\t\tnode.setOptions(options);\n\n\t\t\t\t\tif (node.options.after) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.endLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.before) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByInjectedText(range.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.lineHeight !== null) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByLineHeightChange(ownerId, node.id, range.startLineNumber, node.options.lineHeight);\n\t\t\t\t\t}\n\t\t\t\t\tif (node.options.affectsFont) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.recordLineAffectedByFontChange(ownerId, node.id, range.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (!suppressEvents) {\n\t\t\t\t\t\tthis._onDidChangeDecorations.checkAffectedAndFire(options);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._decorationsTree.insert(node);\n\n\t\t\t\t\tresult[newDecorationIndex] = node.id;\n\n\t\t\t\t\tnewDecorationIndex++;\n\t\t\t\t} else {\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tdelete this._decorations[node.id];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis._onDidChangeDecorations.endDeferredEmit();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Tokenization\n\n\t// TODO move them to the tokenization part.\n\tpublic getLanguageId(): string {\n\t\treturn this.tokenization.getLanguageId();\n\t}\n\n\tpublic setLanguage(languageIdOrSelection: string | ILanguageSelection, source?: string): void {\n\t\tif (typeof languageIdOrSelection === 'string') {\n\t\t\tthis._languageSelectionListener.clear();\n\t\t\tthis._setLanguage(languageIdOrSelection, source);\n\t\t} else {\n\t\t\tthis._languageSelectionListener.value = languageIdOrSelection.onDidChange(() => this._setLanguage(languageIdOrSelection.languageId, source));\n\t\t\tthis._setLanguage(languageIdOrSelection.languageId, source);\n\t\t}\n\t}\n\n\tprivate _setLanguage(languageId: string, source?: string): void {\n\t\tthis.tokenization.setLanguageId(languageId, source);\n\t\tthis._languageService.requestRichLanguageFeatures(languageId);\n\t}\n\n\tpublic getLanguageIdAtPosition(lineNumber: number, column: number): string {\n\t\treturn this.tokenization.getLanguageIdAtPosition(lineNumber, column);\n\t}\n\n\tpublic getWordAtPosition(position: IPosition): IWordAtPosition | null {\n\t\treturn this._tokenizationTextModelPart.getWordAtPosition(position);\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition): IWordAtPosition {\n\t\treturn this._tokenizationTextModelPart.getWordUntilPosition(position);\n\t}\n\n\t//#endregion\n\tnormalizePosition(position: Position, affinity: model.PositionAffinity): Position {\n\t\treturn position;\n\t}\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\t// Columns start with 1.\n\t\treturn indentOfLine(this.getLineContent(lineNumber)) + 1;\n\t}\n\n\tpublic override toString(): string {\n\t\treturn `TextModel(${this.uri.toString()})`;\n\t}\n}\n\nexport function indentOfLine(line: string): number {\n\tlet indent = 0;\n\tfor (const c of line) {\n\t\tif (c === ' ' || c === '\\t') {\n\t\t\tindent++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn indent;\n}\n\n//#region Decorations\n\nfunction isNodeInOverviewRuler(node: IntervalNode): boolean {\n\treturn (node.options.overviewRuler && node.options.overviewRuler.color ? true : false);\n}\n\nfunction isOptionsInjectedText(options: ModelDecorationOptions): boolean {\n\treturn !!options.after || !!options.before;\n}\n\nfunction isNodeInjectedText(node: IntervalNode): boolean {\n\treturn !!node.options.after || !!node.options.before;\n}\n\nexport interface IDecorationsTreesHost {\n\tgetVersionId(): number;\n\tgetRangeAt(start: number, end: number): Range;\n}\n\nclass DecorationsTrees {\n\n\t/**\n\t * This tree holds decorations that do not show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree0: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that show up in the overview ruler.\n\t */\n\tprivate readonly _decorationsTree1: IntervalTree;\n\n\t/**\n\t * This tree holds decorations that contain injected text.\n\t */\n\tprivate readonly _injectedTextDecorationsTree: IntervalTree;\n\n\tconstructor() {\n\t\tthis._decorationsTree0 = new IntervalTree();\n\t\tthis._decorationsTree1 = new IntervalTree();\n\t\tthis._injectedTextDecorationsTree = new IntervalTree();\n\t}\n\n\tpublic ensureAllNodesHaveRanges(host: IDecorationsTreesHost): void {\n\t\tthis.getAll(host, 0, false, false, false, false);\n\t}\n\n\tprivate _ensureNodesHaveRanges(host: IDecorationsTreesHost, nodes: IntervalNode[]): model.IModelDecoration[] {\n\t\tfor (const node of nodes) {\n\t\t\tif (node.range === null) {\n\t\t\t\tnode.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n\t\t\t}\n\t\t}\n\t\treturn <model.IModelDecoration[]>nodes;\n\t}\n\n\tpublic getAllInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, versionId, onlyMarginDecorations);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _intervalSearch(start: number, end: number, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, cachedVersionId: number, onlyMarginDecorations: boolean): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\tconst r1 = this._decorationsTree1.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\tconst r2 = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic getInjectedTextInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.intervalSearch(start, end, filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n\t}\n\n\tpublic getFontDecorationsInInterval(host: IDecorationsTreesHost, start: number, end: number, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst decorations = this._decorationsTree0.intervalSearch(start, end, filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, decorations).filter((i) => i.options.affectsFont);\n\t}\n\n\tpublic getAllInjectedText(host: IDecorationsTreesHost, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._injectedTextDecorationsTree.search(filterOwnerId, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => i.options.showIfCollapsed || !i.range.isEmpty());\n\t}\n\n\tpublic getAllCustomLineHeights(host: IDecorationsTreesHost, filterOwnerId: number): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._search(filterOwnerId, false, false, false, versionId, false);\n\t\treturn this._ensureNodesHaveRanges(host, result).filter((i) => typeof i.options.lineHeight === 'number');\n\t}\n\n\tpublic getAll(host: IDecorationsTreesHost, filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, overviewRulerOnly: boolean, onlyMarginDecorations: boolean): model.IModelDecoration[] {\n\t\tconst versionId = host.getVersionId();\n\t\tconst result = this._search(filterOwnerId, filterOutValidation, filterFontDecorations, overviewRulerOnly, versionId, onlyMarginDecorations);\n\t\treturn this._ensureNodesHaveRanges(host, result);\n\t}\n\n\tprivate _search(filterOwnerId: number, filterOutValidation: boolean, filterFontDecorations: boolean, overviewRulerOnly: boolean, cachedVersionId: number, onlyMarginDecorations: boolean): IntervalNode[] {\n\t\tif (overviewRulerOnly) {\n\t\t\treturn this._decorationsTree1.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t} else {\n\t\t\tconst r0 = this._decorationsTree0.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\tconst r1 = this._decorationsTree1.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\tconst r2 = this._injectedTextDecorationsTree.search(filterOwnerId, filterOutValidation, filterFontDecorations, cachedVersionId, onlyMarginDecorations);\n\t\t\treturn r0.concat(r1).concat(r2);\n\t\t}\n\t}\n\n\tpublic collectNodesFromOwner(ownerId: number): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesFromOwner(ownerId);\n\t\tconst r1 = this._decorationsTree1.collectNodesFromOwner(ownerId);\n\t\tconst r2 = this._injectedTextDecorationsTree.collectNodesFromOwner(ownerId);\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic collectNodesPostOrder(): IntervalNode[] {\n\t\tconst r0 = this._decorationsTree0.collectNodesPostOrder();\n\t\tconst r1 = this._decorationsTree1.collectNodesPostOrder();\n\t\tconst r2 = this._injectedTextDecorationsTree.collectNodesPostOrder();\n\t\treturn r0.concat(r1).concat(r2);\n\t}\n\n\tpublic insert(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.insert(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.insert(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.insert(node);\n\t\t}\n\t}\n\n\tpublic delete(node: IntervalNode): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.delete(node);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.delete(node);\n\t\t} else {\n\t\t\tthis._decorationsTree0.delete(node);\n\t\t}\n\t}\n\n\tpublic getNodeRange(host: IDecorationsTreesHost, node: IntervalNode): Range {\n\t\tconst versionId = host.getVersionId();\n\t\tif (node.cachedVersionId !== versionId) {\n\t\t\tthis._resolveNode(node, versionId);\n\t\t}\n\t\tif (node.range === null) {\n\t\t\tnode.range = host.getRangeAt(node.cachedAbsoluteStart, node.cachedAbsoluteEnd);\n\t\t}\n\t\treturn node.range;\n\t}\n\n\tprivate _resolveNode(node: IntervalNode, cachedVersionId: number): void {\n\t\tif (isNodeInjectedText(node)) {\n\t\t\tthis._injectedTextDecorationsTree.resolveNode(node, cachedVersionId);\n\t\t} else if (isNodeInOverviewRuler(node)) {\n\t\t\tthis._decorationsTree1.resolveNode(node, cachedVersionId);\n\t\t} else {\n\t\t\tthis._decorationsTree0.resolveNode(node, cachedVersionId);\n\t\t}\n\t}\n\n\tpublic acceptReplace(offset: number, length: number, textLength: number, forceMoveMarkers: boolean): void {\n\t\tthis._decorationsTree0.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t\tthis._decorationsTree1.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t\tthis._injectedTextDecorationsTree.acceptReplace(offset, length, textLength, forceMoveMarkers);\n\t}\n}\n\nfunction cleanClassName(className: string): string {\n\treturn className.replace(/[^a-z0-9\\-_]/gi, ' ');\n}\n\nclass DecorationOptions implements model.IDecorationOptions {\n\treadonly color: string | ThemeColor;\n\treadonly darkColor: string | ThemeColor;\n\n\tconstructor(options: model.IDecorationOptions) {\n\t\tthis.color = options.color || '';\n\t\tthis.darkColor = options.darkColor || '';\n\n\t}\n}\n\nexport class ModelDecorationOverviewRulerOptions extends DecorationOptions {\n\treadonly position: model.OverviewRulerLane;\n\tprivate _resolvedColor: string | null;\n\n\tconstructor(options: model.IModelDecorationOverviewRulerOptions) {\n\t\tsuper(options);\n\t\tthis._resolvedColor = null;\n\t\tthis.position = (typeof options.position === 'number' ? options.position : model.OverviewRulerLane.Center);\n\t}\n\n\tpublic getColor(theme: IColorTheme): string {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== 'light' && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = null;\n\t}\n\n\tprivate _resolveColor(color: string | ThemeColor, theme: IColorTheme): string {\n\t\tif (typeof color === 'string') {\n\t\t\treturn color;\n\t\t}\n\t\tconst c = color ? theme.getColor(color.id) : null;\n\t\tif (!c) {\n\t\t\treturn '';\n\t\t}\n\t\treturn c.toString();\n\t}\n}\n\nexport class ModelDecorationGlyphMarginOptions {\n\treadonly position: model.GlyphMarginLane;\n\treadonly persistLane: boolean | undefined;\n\n\tconstructor(options: model.IModelDecorationGlyphMarginOptions | null | undefined) {\n\t\tthis.position = options?.position ?? model.GlyphMarginLane.Center;\n\t\tthis.persistLane = options?.persistLane;\n\t}\n}\n\nexport class ModelDecorationMinimapOptions extends DecorationOptions {\n\treadonly position: model.MinimapPosition;\n\treadonly sectionHeaderStyle: model.MinimapSectionHeaderStyle | null;\n\treadonly sectionHeaderText: string | null;\n\tprivate _resolvedColor: Color | undefined;\n\n\tconstructor(options: model.IModelDecorationMinimapOptions) {\n\t\tsuper(options);\n\t\tthis.position = options.position;\n\t\tthis.sectionHeaderStyle = options.sectionHeaderStyle ?? null;\n\t\tthis.sectionHeaderText = options.sectionHeaderText ?? null;\n\t}\n\n\tpublic getColor(theme: IColorTheme): Color | undefined {\n\t\tif (!this._resolvedColor) {\n\t\t\tif (theme.type !== 'light' && this.darkColor) {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.darkColor, theme);\n\t\t\t} else {\n\t\t\t\tthis._resolvedColor = this._resolveColor(this.color, theme);\n\t\t\t}\n\t\t}\n\n\t\treturn this._resolvedColor;\n\t}\n\n\tpublic invalidateCachedColor(): void {\n\t\tthis._resolvedColor = undefined;\n\t}\n\n\tprivate _resolveColor(color: string | ThemeColor, theme: IColorTheme): Color | undefined {\n\t\tif (typeof color === 'string') {\n\t\t\treturn Color.fromHex(color);\n\t\t}\n\t\treturn theme.getColor(color.id);\n\t}\n}\n\nexport class ModelDecorationInjectedTextOptions implements model.InjectedTextOptions {\n\tpublic static from(options: model.InjectedTextOptions): ModelDecorationInjectedTextOptions {\n\t\tif (options instanceof ModelDecorationInjectedTextOptions) {\n\t\t\treturn options;\n\t\t}\n\t\treturn new ModelDecorationInjectedTextOptions(options);\n\t}\n\n\tpublic readonly content: string;\n\tpublic readonly tokens: TokenArray | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly attachedData: unknown | null;\n\treadonly cursorStops: model.InjectedTextCursorStops | null;\n\n\tprivate constructor(options: model.InjectedTextOptions) {\n\t\tthis.content = options.content || '';\n\t\tthis.tokens = options.tokens ?? null;\n\t\tthis.inlineClassName = options.inlineClassName || null;\n\t\tthis.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.attachedData = options.attachedData || null;\n\t\tthis.cursorStops = options.cursorStops || null;\n\t}\n}\n\nexport class ModelDecorationOptions implements model.IModelDecorationOptions {\n\n\tpublic static EMPTY: ModelDecorationOptions;\n\n\tpublic static register(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\n\tpublic static createDynamic(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\t\treturn new ModelDecorationOptions(options);\n\t}\n\treadonly description: string;\n\treadonly blockClassName: string | null;\n\treadonly blockIsAfterEnd: boolean | null;\n\treadonly blockDoesNotCollapse?: boolean | null;\n\treadonly blockPadding: [top: number, right: number, bottom: number, left: number] | null;\n\treadonly stickiness: model.TrackedRangeStickiness;\n\treadonly zIndex: number;\n\treadonly className: string | null;\n\treadonly shouldFillLineOnLineBreak: boolean | null;\n\treadonly hoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly glyphMarginHoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly isWholeLine: boolean;\n\treadonly lineHeight: number | null;\n\treadonly fontSize: string | null;\n\treadonly showIfCollapsed: boolean;\n\treadonly collapseOnReplaceEdit: boolean;\n\treadonly overviewRuler: ModelDecorationOverviewRulerOptions | null;\n\treadonly minimap: ModelDecorationMinimapOptions | null;\n\treadonly glyphMargin?: model.IModelDecorationGlyphMarginOptions | null | undefined;\n\treadonly glyphMarginClassName: string | null;\n\treadonly linesDecorationsClassName: string | null;\n\treadonly lineNumberClassName: string | null;\n\treadonly lineNumberHoverMessage: IMarkdownString | IMarkdownString[] | null;\n\treadonly linesDecorationsTooltip: string | null;\n\treadonly firstLineDecorationClassName: string | null;\n\treadonly marginClassName: string | null;\n\treadonly inlineClassName: string | null;\n\treadonly inlineClassNameAffectsLetterSpacing: boolean;\n\treadonly beforeContentClassName: string | null;\n\treadonly afterContentClassName: string | null;\n\treadonly after: ModelDecorationInjectedTextOptions | null;\n\treadonly before: ModelDecorationInjectedTextOptions | null;\n\treadonly hideInCommentTokens: boolean | null;\n\treadonly hideInStringTokens: boolean | null;\n\treadonly affectsFont: boolean | null;\n\treadonly textDirection?: model.TextDirection | null | undefined;\n\n\tprivate constructor(options: model.IModelDecorationOptions) {\n\t\tthis.description = options.description;\n\t\tthis.blockClassName = options.blockClassName ? cleanClassName(options.blockClassName) : null;\n\t\tthis.blockDoesNotCollapse = options.blockDoesNotCollapse ?? null;\n\t\tthis.blockIsAfterEnd = options.blockIsAfterEnd ?? null;\n\t\tthis.blockPadding = options.blockPadding ?? null;\n\t\tthis.stickiness = options.stickiness || model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;\n\t\tthis.zIndex = options.zIndex || 0;\n\t\tthis.className = options.className ? cleanClassName(options.className) : null;\n\t\tthis.shouldFillLineOnLineBreak = options.shouldFillLineOnLineBreak ?? null;\n\t\tthis.hoverMessage = options.hoverMessage || null;\n\t\tthis.glyphMarginHoverMessage = options.glyphMarginHoverMessage || null;\n\t\tthis.lineNumberHoverMessage = options.lineNumberHoverMessage || null;\n\t\tthis.isWholeLine = options.isWholeLine || false;\n\t\tthis.lineHeight = options.lineHeight ? Math.min(options.lineHeight, LINE_HEIGHT_CEILING) : null;\n\t\tthis.fontSize = options.fontSize || null;\n\t\tthis.affectsFont = !!options.fontSize || !!options.fontFamily || !!options.fontWeight || !!options.fontStyle;\n\t\tthis.showIfCollapsed = options.showIfCollapsed || false;\n\t\tthis.collapseOnReplaceEdit = options.collapseOnReplaceEdit || false;\n\t\tthis.overviewRuler = options.overviewRuler ? new ModelDecorationOverviewRulerOptions(options.overviewRuler) : null;\n\t\tthis.minimap = options.minimap ? new ModelDecorationMinimapOptions(options.minimap) : null;\n\t\tthis.glyphMargin = options.glyphMarginClassName ? new ModelDecorationGlyphMarginOptions(options.glyphMargin) : null;\n\t\tthis.glyphMarginClassName = options.glyphMarginClassName ? cleanClassName(options.glyphMarginClassName) : null;\n\t\tthis.linesDecorationsClassName = options.linesDecorationsClassName ? cleanClassName(options.linesDecorationsClassName) : null;\n\t\tthis.lineNumberClassName = options.lineNumberClassName ? cleanClassName(options.lineNumberClassName) : null;\n\t\tthis.linesDecorationsTooltip = options.linesDecorationsTooltip ? strings.htmlAttributeEncodeValue(options.linesDecorationsTooltip) : null;\n\t\tthis.firstLineDecorationClassName = options.firstLineDecorationClassName ? cleanClassName(options.firstLineDecorationClassName) : null;\n\t\tthis.marginClassName = options.marginClassName ? cleanClassName(options.marginClassName) : null;\n\t\tthis.inlineClassName = options.inlineClassName ? cleanClassName(options.inlineClassName) : null;\n\t\tthis.inlineClassNameAffectsLetterSpacing = options.inlineClassNameAffectsLetterSpacing || false;\n\t\tthis.beforeContentClassName = options.beforeContentClassName ? cleanClassName(options.beforeContentClassName) : null;\n\t\tthis.afterContentClassName = options.afterContentClassName ? cleanClassName(options.afterContentClassName) : null;\n\t\tthis.after = options.after ? ModelDecorationInjectedTextOptions.from(options.after) : null;\n\t\tthis.before = options.before ? ModelDecorationInjectedTextOptions.from(options.before) : null;\n\t\tthis.hideInCommentTokens = options.hideInCommentTokens ?? false;\n\t\tthis.hideInStringTokens = options.hideInStringTokens ?? false;\n\t\tthis.textDirection = options.textDirection ?? null;\n\t}\n}\nModelDecorationOptions.EMPTY = ModelDecorationOptions.register({ description: 'empty' });\n\n/**\n * The order carefully matches the values of the enum.\n */\nconst TRACKED_RANGE_OPTIONS = [\n\tModelDecorationOptions.register({ description: 'tracked-range-always-grows-when-typing-at-edges', stickiness: model.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'tracked-range-never-grows-when-typing-at-edges', stickiness: model.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges }),\n\tModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-before', stickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore }),\n\tModelDecorationOptions.register({ description: 'tracked-range-grows-only-when-typing-after', stickiness: model.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter }),\n];\n\nfunction _normalizeOptions(options: model.IModelDecorationOptions): ModelDecorationOptions {\n\tif (options instanceof ModelDecorationOptions) {\n\t\treturn options;\n\t}\n\treturn ModelDecorationOptions.createDynamic(options);\n}\n\nclass LineHeightChangingDecoration {\n\n\tpublic static toKey(obj: LineHeightChangingDecoration): string {\n\t\treturn `${obj.ownerId};${obj.decorationId};${obj.lineNumber}`;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly decorationId: string,\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly lineHeight: number | null\n\t) { }\n}\n\nclass LineFontChangingDecoration {\n\n\tpublic static toKey(obj: LineFontChangingDecoration): string {\n\t\treturn `${obj.ownerId};${obj.decorationId};${obj.lineNumber}`;\n\t}\n\n\tconstructor(\n\t\tpublic readonly ownerId: number,\n\t\tpublic readonly decorationId: string,\n\t\tpublic readonly lineNumber: number\n\t) { }\n}\n\nclass DidChangeDecorationsEmitter extends Disposable {\n\n\tprivate readonly _actual: Emitter<IModelDecorationsChangedEvent> = this._register(new Emitter<IModelDecorationsChangedEvent>());\n\tpublic readonly event: Event<IModelDecorationsChangedEvent> = this._actual.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _shouldFireDeferred: boolean;\n\tprivate _affectsMinimap: boolean;\n\tprivate _affectsOverviewRuler: boolean;\n\tprivate _affectedInjectedTextLines: Set<number> | null = null;\n\tprivate _affectedLineHeights: SetWithKey<LineHeightChangingDecoration> | null = null;\n\tprivate _affectedFontLines: SetWithKey<LineFontChangingDecoration> | null = null;\n\tprivate _affectsGlyphMargin: boolean;\n\tprivate _affectsLineNumber: boolean;\n\n\tconstructor(private readonly handleBeforeFire: (affectedInjectedTextLines: Set<number> | null, affectedLineHeights: SetWithKey<LineHeightChangingDecoration> | null, affectedFontLines: SetWithKey<LineFontChangingDecoration> | null) => void) {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._affectsLineNumber = false;\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._shouldFireDeferred) {\n\t\t\t\tthis.doFire();\n\t\t\t}\n\n\t\t\tthis._affectedInjectedTextLines?.clear();\n\t\t\tthis._affectedInjectedTextLines = null;\n\t\t\tthis._affectedLineHeights?.clear();\n\t\t\tthis._affectedLineHeights = null;\n\t\t\tthis._affectedFontLines?.clear();\n\t\t\tthis._affectedFontLines = null;\n\t\t}\n\t}\n\n\tpublic recordLineAffectedByInjectedText(lineNumber: number): void {\n\t\tif (!this._affectedInjectedTextLines) {\n\t\t\tthis._affectedInjectedTextLines = new Set();\n\t\t}\n\t\tthis._affectedInjectedTextLines.add(lineNumber);\n\t}\n\n\tpublic recordLineAffectedByLineHeightChange(ownerId: number, decorationId: string, lineNumber: number, lineHeight: number | null): void {\n\t\tif (!this._affectedLineHeights) {\n\t\t\tthis._affectedLineHeights = new SetWithKey<LineHeightChangingDecoration>([], LineHeightChangingDecoration.toKey);\n\t\t}\n\t\tthis._affectedLineHeights.add(new LineHeightChangingDecoration(ownerId, decorationId, lineNumber, lineHeight));\n\t}\n\n\tpublic recordLineAffectedByFontChange(ownerId: number, decorationId: string, lineNumber: number): void {\n\t\tif (!this._affectedFontLines) {\n\t\t\tthis._affectedFontLines = new SetWithKey<LineFontChangingDecoration>([], LineFontChangingDecoration.toKey);\n\t\t}\n\t\tthis._affectedFontLines.add(new LineFontChangingDecoration(ownerId, decorationId, lineNumber));\n\t}\n\n\tpublic checkAffectedAndFire(options: ModelDecorationOptions): void {\n\t\tthis._affectsMinimap ||= !!options.minimap?.position;\n\t\tthis._affectsOverviewRuler ||= !!options.overviewRuler?.color;\n\t\tthis._affectsGlyphMargin ||= !!options.glyphMarginClassName;\n\t\tthis._affectsLineNumber ||= !!options.lineNumberClassName;\n\t\tthis.tryFire();\n\t}\n\n\tpublic fire(): void {\n\t\tthis._affectsMinimap = true;\n\t\tthis._affectsOverviewRuler = true;\n\t\tthis._affectsGlyphMargin = true;\n\t\tthis.tryFire();\n\t}\n\n\tprivate tryFire() {\n\t\tif (this._deferredCnt === 0) {\n\t\t\tthis.doFire();\n\t\t} else {\n\t\t\tthis._shouldFireDeferred = true;\n\t\t}\n\t}\n\n\tprivate doFire() {\n\t\tthis.handleBeforeFire(this._affectedInjectedTextLines, this._affectedLineHeights, this._affectedFontLines);\n\n\t\tconst event: IModelDecorationsChangedEvent = {\n\t\t\taffectsMinimap: this._affectsMinimap,\n\t\t\taffectsOverviewRuler: this._affectsOverviewRuler,\n\t\t\taffectsGlyphMargin: this._affectsGlyphMargin,\n\t\t\taffectsLineNumber: this._affectsLineNumber,\n\t\t};\n\t\tthis._shouldFireDeferred = false;\n\t\tthis._affectsMinimap = false;\n\t\tthis._affectsOverviewRuler = false;\n\t\tthis._affectsGlyphMargin = false;\n\t\tthis._actual.fire(event);\n\t}\n}\n\n//#endregion\n\nclass DidChangeContentEmitter extends Disposable {\n\n\t/**\n\t * Both `fastEvent` and `slowEvent` work the same way and contain the same events, but first we invoke `fastEvent` and then `slowEvent`.\n\t */\n\tprivate readonly _fastEmitter: Emitter<InternalModelContentChangeEvent> = this._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly fastEvent: Event<InternalModelContentChangeEvent> = this._fastEmitter.event;\n\tprivate readonly _slowEmitter: Emitter<InternalModelContentChangeEvent> = this._register(new Emitter<InternalModelContentChangeEvent>());\n\tpublic readonly slowEvent: Event<InternalModelContentChangeEvent> = this._slowEmitter.event;\n\n\tprivate _deferredCnt: number;\n\tprivate _deferredEvent: InternalModelContentChangeEvent | null;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._deferredCnt = 0;\n\t\tthis._deferredEvent = null;\n\t}\n\n\tpublic beginDeferredEmit(): void {\n\t\tthis._deferredCnt++;\n\t}\n\n\tpublic endDeferredEmit(resultingSelection: Selection[] | null = null): void {\n\t\tthis._deferredCnt--;\n\t\tif (this._deferredCnt === 0) {\n\t\t\tif (this._deferredEvent !== null) {\n\t\t\t\tthis._deferredEvent.rawContentChangedEvent.resultingSelection = resultingSelection;\n\t\t\t\tconst e = this._deferredEvent;\n\t\t\t\tthis._deferredEvent = null;\n\t\t\t\tthis._fastEmitter.fire(e);\n\t\t\t\tthis._slowEmitter.fire(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic fire(e: InternalModelContentChangeEvent): void {\n\t\tif (this._deferredCnt > 0) {\n\t\t\tif (this._deferredEvent) {\n\t\t\t\tthis._deferredEvent = this._deferredEvent.merge(e);\n\t\t\t} else {\n\t\t\t\tthis._deferredEvent = e;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis._fastEmitter.fire(e);\n\t\tthis._slowEmitter.fire(e);\n\t}\n}\n"]}