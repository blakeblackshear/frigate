{"version":3,"file":"raster.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sources":["vs/editor/browser/gpu/raster/raster.ts"],"names":[],"mappings":"","sourcesContent":["\n\nexport interface IGlyphRasterizer {\n\t/**\n\t * A unique identifier for the rasterizer.\n\t */\n\treadonly id: number;\n\n\t/**\n\t * An identifier for properties inherent to rendering with this rasterizer. This will be the\n\t * same as other rasterizer cache keys provided they share the same property values in question.\n\t */\n\treadonly cacheKey: string;\n\n\t/**\n\t * Rasterizes a glyph.\n\t * @param chars The character(s) to rasterize. This can be a single character, a ligature, an\n\t * emoji, etc.\n\t * @param tokenMetadata The token metadata of the glyph to rasterize. See {@link MetadataConsts}\n\t * for how this works.\n\t * @param decorationStyleSetId The id of the decoration style sheet. Zero means no decoration.\n\t * @param colorMap A theme's color map.\n\t */\n\trasterizeGlyph(\n\t\tchars: string,\n\t\ttokenMetadata: number,\n\t\tdecorationStyleSetId: number,\n\t\tcolorMap: string[],\n\t): Readonly<IRasterizedGlyph>;\n\n\tgetTextMetrics(text: string): TextMetrics;\n}\n\n/**\n * A simple bounding box in a 2D plane.\n */\nexport interface IBoundingBox {\n\t/** The left x coordinate (inclusive). */\n\tleft: number;\n\t/** The top y coordinate (inclusive). */\n\ttop: number;\n\t/** The right x coordinate (inclusive). */\n\tright: number;\n\t/** The bottom y coordinate (inclusive). */\n\tbottom: number;\n}\n\n/**\n * A glyph that has been rasterized to a canvas.\n */\nexport interface IRasterizedGlyph {\n\t/**\n\t * The source canvas the glyph was rasterized to.\n\t */\n\tsource: OffscreenCanvas;\n\t/**\n\t * The bounding box of the glyph within {@link source}.\n\t */\n\tboundingBox: IBoundingBox;\n\t/**\n\t * The offset to the glyph's origin (where it should be drawn to).\n\t */\n\toriginOffset: { x: number; y: number };\n\t/**\n\t * The distance from the glyph baseline to the top of the highest bounding rectangle of all\n\t * fonts used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxAscent}\n\t */\n\tfontBoundingBoxAscent: number;\n\t/**\n\t * The distance from the glyph baseline to the bottom of the bounding rectangle of all fonts\n\t * used to render the text.\n\t *\n\t * @see {@link TextMetrics.fontBoundingBoxDescent}\n\t */\n\tfontBoundingBoxDescent: number;\n}\n"]}