{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/utils.ts","vs/editor/contrib/inlineCompletions/browser/utils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAG3E,OAAO,EAAe,eAAe,EAAuB,OAAO,EAAE,WAAW,EAAW,MAAM,uCAAuC,CAAC;AAEzI,OAAO,EAAE,cAAc,EAAE,MAAM,mEAAmE,CAAC;AAEnG,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAmB,QAAQ,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EAAE,yCAAyC,EAAE,MAAM,wEAAwE,CAAC;AAGnI,MAAM,KAAK,GAAuB,EAAE,CAAC;AACrC,MAAM,UAAU,qBAAqB;IACpC,OAAO,KAAK,CAAC;AACd,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,KAAiC;IAC7E,MAAM,SAAS,GAAG,8BAA8B,CAAC,KAAK,CAAC,CAAC;IACxD,OAAO,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,8BAA8B,CAAC,KAAiC;IAC/E,MAAM,QAAQ,GAAG,WAAW,CAAC,qBAAqB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACnH,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;IAC5C,OAAO,QAAQ,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,uCAAuC,CAAC,KAAiC,EAAE,SAAqB;IAC/G,MAAM,WAAW,GAAG,yCAAyC,CAAC,SAAS,CAAC,CAAC;IACzE,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAClC,MAAM,kBAAkB,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;IACrF,MAAM,yBAAyB,GAAG,kBAAkB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;IACpH,OAAO,yBAAyB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;AAClG,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAI,KAAgC,EAAE,KAAsB;IAC1G,MAAM,MAAM,GAAG,eAAe,CAAmB,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC/D,MAAM,gBAAgB,GAA6B,EAAE,CAAC;IAEtD,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC1B,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEtC,WAAW,CAAC,EAAE,CAAC,EAAE;YAChB,IAAI,UAAU,CAAC,MAAM,KAAK,gBAAgB,CAAC,MAAM,EAAE,CAAC;gBACnD,gBAAgB,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;gBAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAClD,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC1B,gBAAgB,CAAC,CAAC,CAAC,GAAG,eAAe,CAAI,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjE,CAAC;gBACF,CAAC;gBACD,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC;YACvC,CAAC;YACD,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;IAEJ,OAAO,MAAM,CAAC;AACf,CAAC;AAED,MAAM,OAAO,2BAA2B;IACvC,YACkB,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAExD,CAAC;IAID,IAAI,CAA4B,GAAqB,EAAE,GAA8C;QACpG,OAAO,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,kBAAkB,EAAE,GAAG,YAAY,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACjH,CAAC;CACD;AAED,MAAM,UAAU,IAAI,CAAC,EAAU,EAAE,iBAAqC;IACrE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QAC5B,IAAI,CAAC,GAA4B,SAAS,CAAC;QAC3C,MAAM,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,EAAE,CAAC;gBAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAAC,CAAC;YACvB,OAAO,EAAE,CAAC;QACX,CAAC,EAAE,EAAE,CAAC,CAAC;QACP,IAAI,iBAAiB,EAAE,CAAC;YACvB,CAAC,GAAG,iBAAiB,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAClD,YAAY,CAAC,MAAM,CAAC,CAAC;gBACrB,IAAI,CAAC,EAAE,CAAC;oBAAC,CAAC,CAAC,OAAO,EAAE,CAAC;gBAAC,CAAC;gBACvB,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC","file":"utils.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Permutation, compareBy } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, observableValue, ISettableObservable, autorun, transaction, IReader } from '../../../../base/common/observable.js';\nimport { ContextKeyValue, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { bindContextKey } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TextReplacement, TextEdit } from '../../../common/core/edits/textEdit.js';\nimport { getPositionOffsetTransformerFromTextModel } from '../../../common/core/text/getPositionOffsetTransformerFromTextModel.js';\nimport { ITextModel } from '../../../common/model.js';\n\nconst array: ReadonlyArray<any> = [];\nexport function getReadonlyEmptyArray<T>(): readonly T[] {\n\treturn array;\n}\n\nexport function getEndPositionsAfterApplying(edits: readonly TextReplacement[]): Position[] {\n\tconst newRanges = getModifiedRangesAfterApplying(edits);\n\treturn newRanges.map(range => range.getEndPosition());\n}\n\nexport function getModifiedRangesAfterApplying(edits: readonly TextReplacement[]): Range[] {\n\tconst sortPerm = Permutation.createSortPermutation(edits, compareBy(e => e.range, Range.compareRangesUsingStarts));\n\tconst edit = new TextEdit(sortPerm.apply(edits));\n\tconst sortedNewRanges = edit.getNewRanges();\n\treturn sortPerm.inverse().apply(sortedNewRanges);\n}\n\nexport function removeTextReplacementCommonSuffixPrefix(edits: readonly TextReplacement[], textModel: ITextModel): TextReplacement[] {\n\tconst transformer = getPositionOffsetTransformerFromTextModel(textModel);\n\tconst text = textModel.getValue();\n\tconst stringReplacements = edits.map(edit => transformer.getStringReplacement(edit));\n\tconst minimalStringReplacements = stringReplacements.map(replacement => replacement.removeCommonSuffixPrefix(text));\n\treturn minimalStringReplacements.map(replacement => transformer.getTextReplacement(replacement));\n}\n\nexport function convertItemsToStableObservables<T>(items: IObservable<readonly T[]>, store: DisposableStore): IObservable<IObservable<T>[]> {\n\tconst result = observableValue<IObservable<T>[]>('result', []);\n\tconst innerObservables: ISettableObservable<T>[] = [];\n\n\tstore.add(autorun(reader => {\n\t\tconst itemsValue = items.read(reader);\n\n\t\ttransaction(tx => {\n\t\t\tif (itemsValue.length !== innerObservables.length) {\n\t\t\t\tinnerObservables.length = itemsValue.length;\n\t\t\t\tfor (let i = 0; i < innerObservables.length; i++) {\n\t\t\t\t\tif (!innerObservables[i]) {\n\t\t\t\t\t\tinnerObservables[i] = observableValue<T>('item', itemsValue[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.set([...innerObservables], tx);\n\t\t\t}\n\t\t\tinnerObservables.forEach((o, i) => o.set(itemsValue[i], tx));\n\t\t});\n\t}));\n\n\treturn result;\n}\n\nexport class ObservableContextKeyService {\n\tconstructor(\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t) {\n\t}\n\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, obs: IObservable<T>): IDisposable;\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, fn: (reader: IReader) => T): IDisposable;\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, obs: IObservable<T> | ((reader: IReader) => T)): IDisposable {\n\t\treturn bindContextKey(key, this._contextKeyService, obs instanceof Function ? obs : reader => obs.read(reader));\n\t}\n}\n\nexport function wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Permutation, compareBy } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { DisposableStore, IDisposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, observableValue, ISettableObservable, autorun, transaction, IReader } from '../../../../base/common/observable.js';\nimport { ContextKeyValue, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { bindContextKey } from '../../../../platform/observable/common/platformObservableUtils.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { TextReplacement, TextEdit } from '../../../common/core/edits/textEdit.js';\nimport { getPositionOffsetTransformerFromTextModel } from '../../../common/core/text/getPositionOffsetTransformerFromTextModel.js';\nimport { ITextModel } from '../../../common/model.js';\n\nconst array: ReadonlyArray<any> = [];\nexport function getReadonlyEmptyArray<T>(): readonly T[] {\n\treturn array;\n}\n\nexport function getEndPositionsAfterApplying(edits: readonly TextReplacement[]): Position[] {\n\tconst newRanges = getModifiedRangesAfterApplying(edits);\n\treturn newRanges.map(range => range.getEndPosition());\n}\n\nexport function getModifiedRangesAfterApplying(edits: readonly TextReplacement[]): Range[] {\n\tconst sortPerm = Permutation.createSortPermutation(edits, compareBy(e => e.range, Range.compareRangesUsingStarts));\n\tconst edit = new TextEdit(sortPerm.apply(edits));\n\tconst sortedNewRanges = edit.getNewRanges();\n\treturn sortPerm.inverse().apply(sortedNewRanges);\n}\n\nexport function removeTextReplacementCommonSuffixPrefix(edits: readonly TextReplacement[], textModel: ITextModel): TextReplacement[] {\n\tconst transformer = getPositionOffsetTransformerFromTextModel(textModel);\n\tconst text = textModel.getValue();\n\tconst stringReplacements = edits.map(edit => transformer.getStringReplacement(edit));\n\tconst minimalStringReplacements = stringReplacements.map(replacement => replacement.removeCommonSuffixPrefix(text));\n\treturn minimalStringReplacements.map(replacement => transformer.getTextReplacement(replacement));\n}\n\nexport function convertItemsToStableObservables<T>(items: IObservable<readonly T[]>, store: DisposableStore): IObservable<IObservable<T>[]> {\n\tconst result = observableValue<IObservable<T>[]>('result', []);\n\tconst innerObservables: ISettableObservable<T>[] = [];\n\n\tstore.add(autorun(reader => {\n\t\tconst itemsValue = items.read(reader);\n\n\t\ttransaction(tx => {\n\t\t\tif (itemsValue.length !== innerObservables.length) {\n\t\t\t\tinnerObservables.length = itemsValue.length;\n\t\t\t\tfor (let i = 0; i < innerObservables.length; i++) {\n\t\t\t\t\tif (!innerObservables[i]) {\n\t\t\t\t\t\tinnerObservables[i] = observableValue<T>('item', itemsValue[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.set([...innerObservables], tx);\n\t\t\t}\n\t\t\tinnerObservables.forEach((o, i) => o.set(itemsValue[i], tx));\n\t\t});\n\t}));\n\n\treturn result;\n}\n\nexport class ObservableContextKeyService {\n\tconstructor(\n\t\tprivate readonly _contextKeyService: IContextKeyService,\n\t) {\n\t}\n\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, obs: IObservable<T>): IDisposable;\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, fn: (reader: IReader) => T): IDisposable;\n\tbind<T extends ContextKeyValue>(key: RawContextKey<T>, obs: IObservable<T> | ((reader: IReader) => T)): IDisposable {\n\t\treturn bindContextKey(key, this._contextKeyService, obs instanceof Function ? obs : reader => obs.read(reader));\n\t}\n}\n\nexport function wait(ms: number, cancellationToken?: CancellationToken): Promise<void> {\n\treturn new Promise(resolve => {\n\t\tlet d: IDisposable | undefined = undefined;\n\t\tconst handle = setTimeout(() => {\n\t\t\tif (d) { d.dispose(); }\n\t\t\tresolve();\n\t\t}, ms);\n\t\tif (cancellationToken) {\n\t\t\td = cancellationToken.onCancellationRequested(() => {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\tif (d) { d.dispose(); }\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\t});\n}\n"]}