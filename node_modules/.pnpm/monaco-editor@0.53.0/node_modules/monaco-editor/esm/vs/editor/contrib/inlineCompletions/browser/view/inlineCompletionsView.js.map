{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/view/inlineCompletionsView.ts","vs/editor/contrib/inlineCompletions/browser/view/inlineCompletionsView.ts"],"names":[],"mappings":"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","file":"inlineCompletionsView.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createStyleSheetFromObservable } from '../../../../../base/browser/domStylesheets.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived, mapObservableArrayCached, derivedDisposable, constObservable, derivedObservableWithCache, IObservable, ISettableObservable } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { InlineCompletionsHintsWidget } from '../hintsWidget/inlineCompletionsHintsWidget.js';\nimport { InlineCompletionsModel } from '../model/inlineCompletionsModel.js';\nimport { convertItemsToStableObservables } from '../utils.js';\nimport { GhostTextView } from './ghostText/ghostTextView.js';\nimport { InlineCompletionViewData, InlineCompletionViewKind } from './inlineEdits/inlineEditsViewInterface.js';\nimport { InlineEditsViewAndDiffProducer } from './inlineEdits/inlineEditsViewProducer.js';\n\nexport class InlineCompletionsView extends Disposable {\n\tprivate readonly _ghostTexts;\n\n\tprivate readonly _stablizedGhostTexts;\n\tprivate readonly _editorObs;\n\n\tprivate readonly _ghostTextWidgets;\n\n\tprivate readonly _inlineEdit;\n\tprivate readonly _everHadInlineEdit;\n\tprotected readonly _inlineEditWidget;\n\n\tprivate readonly _fontFamily;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: IObservable<InlineCompletionsModel | undefined>,\n\t\tprivate readonly _focusIsInMenu: ISettableObservable<boolean>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._ghostTexts = derived(this, (reader) => {\n\t\t\tconst model = this._model.read(reader);\n\t\t\treturn model?.ghostTexts.read(reader) ?? [];\n\t\t});\n\t\tthis._stablizedGhostTexts = convertItemsToStableObservables(this._ghostTexts, this._store);\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\t\tthis._ghostTextWidgets = mapObservableArrayCached(this, this._stablizedGhostTexts, (ghostText, store) => derivedDisposable((reader) => this._instantiationService.createInstance(\n\t\t\tGhostTextView.hot.read(reader),\n\t\t\tthis._editor,\n\t\t\t{\n\t\t\t\tghostText: ghostText,\n\t\t\t\twarning: this._model.map((m, reader) => {\n\t\t\t\t\tconst warning = m?.warning?.read(reader);\n\t\t\t\t\treturn warning ? { icon: warning.icon } : undefined;\n\t\t\t\t}),\n\t\t\t\tminReservedLineCount: constObservable(0),\n\t\t\t\ttargetTextModel: this._model.map(v => v?.textModel),\n\t\t\t\thandleInlineCompletionShown: this._model.map((model, reader) => {\n\t\t\t\t\tconst inlineCompletion = model?.inlineCompletionState.read(reader)?.inlineCompletion;\n\t\t\t\t\tif (inlineCompletion) {\n\t\t\t\t\t\treturn (viewData: InlineCompletionViewData) => model.handleInlineSuggestionShown(inlineCompletion, InlineCompletionViewKind.GhostText, viewData);\n\t\t\t\t\t}\n\t\t\t\t\treturn () => { };\n\t\t\t\t}),\n\t\t\t},\n\t\t\tthis._editorObs.getOption(EditorOption.inlineSuggest).map(v => ({ syntaxHighlightingEnabled: v.syntaxHighlightingEnabled })),\n\t\t\tfalse,\n\t\t\tfalse\n\t\t)\n\t\t).recomputeInitiallyAndOnChange(store)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\t\tthis._inlineEdit = derived(this, reader => this._model.read(reader)?.inlineEditState.read(reader)?.inlineEdit);\n\t\tthis._everHadInlineEdit = derivedObservableWithCache<boolean>(this, (reader, last) => last || !!this._inlineEdit.read(reader) || !!this._model.read(reader)?.inlineCompletionState.read(reader)?.inlineCompletion?.showInlineEditMenu);\n\t\tthis._inlineEditWidget = derivedDisposable(reader => {\n\t\t\tif (!this._everHadInlineEdit.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn this._instantiationService.createInstance(InlineEditsViewAndDiffProducer.hot.read(reader), this._editor, this._inlineEdit, this._model, this._focusIsInMenu);\n\t\t})\n\t\t\t.recomputeInitiallyAndOnChange(this._store);\n\t\tthis._fontFamily = this._editorObs.getOption(EditorOption.inlineSuggest).map(val => val.fontFamily);\n\n\t\tthis._register(createStyleSheetFromObservable(derived(reader => {\n\t\t\tconst fontFamily = this._fontFamily.read(reader);\n\t\t\treturn `\n.monaco-editor .ghost-text-decoration,\n.monaco-editor .ghost-text-decoration-preview,\n.monaco-editor .ghost-text {\n\tfont-family: ${fontFamily};\n}`;\n\t\t})));\n\n\t\tthis._register(new InlineCompletionsHintsWidget(this._editor, this._model, this._instantiationService));\n\t}\n\n\tpublic shouldShowHoverAtViewZone(viewZoneId: string): boolean {\n\t\treturn this._ghostTextWidgets.get()[0]?.get().ownsViewZone(viewZoneId) ?? false;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createStyleSheetFromObservable } from '../../../../../base/browser/domStylesheets.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { derived, mapObservableArrayCached, derivedDisposable, constObservable, derivedObservableWithCache, IObservable, ISettableObservable } from '../../../../../base/common/observable.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { InlineCompletionsHintsWidget } from '../hintsWidget/inlineCompletionsHintsWidget.js';\nimport { InlineCompletionsModel } from '../model/inlineCompletionsModel.js';\nimport { convertItemsToStableObservables } from '../utils.js';\nimport { GhostTextView } from './ghostText/ghostTextView.js';\nimport { InlineCompletionViewData, InlineCompletionViewKind } from './inlineEdits/inlineEditsViewInterface.js';\nimport { InlineEditsViewAndDiffProducer } from './inlineEdits/inlineEditsViewProducer.js';\n\nexport class InlineCompletionsView extends Disposable {\n\tprivate readonly _ghostTexts;\n\n\tprivate readonly _stablizedGhostTexts;\n\tprivate readonly _editorObs;\n\n\tprivate readonly _ghostTextWidgets;\n\n\tprivate readonly _inlineEdit;\n\tprivate readonly _everHadInlineEdit;\n\tprotected readonly _inlineEditWidget;\n\n\tprivate readonly _fontFamily;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _model: IObservable<InlineCompletionsModel | undefined>,\n\t\tprivate readonly _focusIsInMenu: ISettableObservable<boolean>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._ghostTexts = derived(this, (reader) => {\n\t\t\tconst model = this._model.read(reader);\n\t\t\treturn model?.ghostTexts.read(reader) ?? [];\n\t\t});\n\t\tthis._stablizedGhostTexts = convertItemsToStableObservables(this._ghostTexts, this._store);\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\t\tthis._ghostTextWidgets = mapObservableArrayCached(this, this._stablizedGhostTexts, (ghostText, store) => derivedDisposable((reader) => this._instantiationService.createInstance(\n\t\t\tGhostTextView.hot.read(reader),\n\t\t\tthis._editor,\n\t\t\t{\n\t\t\t\tghostText: ghostText,\n\t\t\t\twarning: this._model.map((m, reader) => {\n\t\t\t\t\tconst warning = m?.warning?.read(reader);\n\t\t\t\t\treturn warning ? { icon: warning.icon } : undefined;\n\t\t\t\t}),\n\t\t\t\tminReservedLineCount: constObservable(0),\n\t\t\t\ttargetTextModel: this._model.map(v => v?.textModel),\n\t\t\t\thandleInlineCompletionShown: this._model.map((model, reader) => {\n\t\t\t\t\tconst inlineCompletion = model?.inlineCompletionState.read(reader)?.inlineCompletion;\n\t\t\t\t\tif (inlineCompletion) {\n\t\t\t\t\t\treturn (viewData: InlineCompletionViewData) => model.handleInlineSuggestionShown(inlineCompletion, InlineCompletionViewKind.GhostText, viewData);\n\t\t\t\t\t}\n\t\t\t\t\treturn () => { };\n\t\t\t\t}),\n\t\t\t},\n\t\t\tthis._editorObs.getOption(EditorOption.inlineSuggest).map(v => ({ syntaxHighlightingEnabled: v.syntaxHighlightingEnabled })),\n\t\t\tfalse,\n\t\t\tfalse\n\t\t)\n\t\t).recomputeInitiallyAndOnChange(store)\n\t\t).recomputeInitiallyAndOnChange(this._store);\n\t\tthis._inlineEdit = derived(this, reader => this._model.read(reader)?.inlineEditState.read(reader)?.inlineEdit);\n\t\tthis._everHadInlineEdit = derivedObservableWithCache<boolean>(this, (reader, last) => last || !!this._inlineEdit.read(reader) || !!this._model.read(reader)?.inlineCompletionState.read(reader)?.inlineCompletion?.showInlineEditMenu);\n\t\tthis._inlineEditWidget = derivedDisposable(reader => {\n\t\t\tif (!this._everHadInlineEdit.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn this._instantiationService.createInstance(InlineEditsViewAndDiffProducer.hot.read(reader), this._editor, this._inlineEdit, this._model, this._focusIsInMenu);\n\t\t})\n\t\t\t.recomputeInitiallyAndOnChange(this._store);\n\t\tthis._fontFamily = this._editorObs.getOption(EditorOption.inlineSuggest).map(val => val.fontFamily);\n\n\t\tthis._register(createStyleSheetFromObservable(derived(reader => {\n\t\t\tconst fontFamily = this._fontFamily.read(reader);\n\t\t\treturn `\n.monaco-editor .ghost-text-decoration,\n.monaco-editor .ghost-text-decoration-preview,\n.monaco-editor .ghost-text {\n\tfont-family: ${fontFamily};\n}`;\n\t\t})));\n\n\t\tthis._register(new InlineCompletionsHintsWidget(this._editor, this._model, this._instantiationService));\n\t}\n\n\tpublic shouldShowHoverAtViewZone(viewZoneId: string): boolean {\n\t\treturn this._ghostTextWidgets.get()[0]?.get().ownsViewZone(viewZoneId) ?? false;\n\t}\n}\n"]}