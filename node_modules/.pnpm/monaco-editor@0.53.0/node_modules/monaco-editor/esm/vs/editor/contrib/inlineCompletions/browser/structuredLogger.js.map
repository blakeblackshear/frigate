{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/structuredLogger.ts","vs/editor/contrib/inlineCompletions/browser/structuredLogger.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;AAEhG,OAAO,EAAE,UAAU,EAAE,MAAM,sCAAsC,CAAC;AAClE,OAAO,EAAe,mBAAmB,EAAE,MAAM,uCAAuC,CAAC;AAEzF,OAAO,EAAE,kBAAkB,EAAE,MAAM,sDAAsD,CAAC;AAC1F,OAAO,EAAE,mBAAmB,EAAE,MAAM,wDAAwD,CAAC;AAkB7F;;EAEE;AACF,MAAM,UAAU,wBAAwB,CAAgC,KAAQ;IAC/E,OAAO,KAAK,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,KAAK,EAAE,QAAQ,EAAG,KAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;AACnI,CAAC;AAEM,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgD,SAAQ,UAAU;IACvE,MAAM,CAAC,IAAI;QACjB,OAAO,IAAkC,CAAC;IAC3C,CAAC;IAKD,YACkB,IAAY,EACQ,kBAAsC,EACrC,mBAAwC;QAE9E,KAAK,EAAE,CAAC;QAJS,SAAI,GAAJ,IAAI,CAAQ;QACQ,uBAAkB,GAAlB,kBAAkB,CAAoB;QACrC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAG9E,IAAI,CAAC,yBAAyB,GAAG,oBAAoB,CAAU,2BAA2B,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC,6BAA6B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5K,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC;IAC3E,CAAC;IAEM,GAAG,CAAC,IAAO;QACjB,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,EAAE,CAAC;QACrD,IAAI,CAAC,OAAO,EAAE,CAAC;YACd,OAAO,KAAK,CAAC;QACd,CAAC;QACD,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAI,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3F,OAAO,IAAI,CAAC;IACb,CAAC;CACD,CAAA;AA1BY,gBAAgB;IAU1B,WAAA,kBAAkB,CAAA;IAClB,WAAA,mBAAmB,CAAA;GAXT,gBAAgB,CA0B5B;;AAED,SAAS,oBAAoB,CAAI,GAAW,EAAE,iBAAqC;IAClF,OAAO,mBAAmB,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,kBAAkB,CAAI,GAAG,CAAC,CAAC,CAAC;AACtH,CAAC","file":"structuredLogger.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, observableFromEvent } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDataChannelService } from '../../../../platform/dataChannel/common/dataChannel.js';\n\nexport interface IRecordableLogEntry {\n\tsourceId: string;\n\ttime: number;\n}\n\nexport interface IRecordableEditorLogEntry extends IRecordableLogEntry {\n\tmodelUri: URI; // This has to be a URI, so that it gets translated automatically in remote scenarios\n\tmodelVersion: number;\n}\n\nexport interface IDocumentEventDataSetChangeReason {\n\tsourceId: 'TextModel.setChangeReason';\n\tsource: 'inlineSuggestion.accept' | 'snippet' | string;\n}\n\n\n/**\n * The sourceLabel must not contain '@'!\n*/\nexport function formatRecordableLogEntry<T extends IRecordableLogEntry>(entry: T): string {\n\treturn entry.sourceId + ' @@ ' + JSON.stringify({ ...entry, modelUri: (entry as any).modelUri?.toString(), sourceId: undefined });\n}\n\nexport class StructuredLogger<T extends IRecordableLogEntry> extends Disposable {\n\tpublic static cast<T extends IRecordableLogEntry>(): typeof StructuredLogger<T> {\n\t\treturn this as typeof StructuredLogger<T>;\n\t}\n\n\tpublic readonly isEnabled;\n\tprivate readonly _isEnabledContextKeyValue;\n\n\tconstructor(\n\t\tprivate readonly _key: string,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IDataChannelService private readonly _dataChannelService: IDataChannelService,\n\t) {\n\t\tsuper();\n\t\tthis._isEnabledContextKeyValue = observableContextKey<boolean>('structuredLogger.enabled:' + this._key, this._contextKeyService).recomputeInitiallyAndOnChange(this._store);\n\t\tthis.isEnabled = this._isEnabledContextKeyValue.map(v => v !== undefined);\n\t}\n\n\tpublic log(data: T): boolean {\n\t\tconst enabled = this._isEnabledContextKeyValue.get();\n\t\tif (!enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._dataChannelService.getDataChannel<T>('structuredLogger:' + this._key).sendData(data);\n\t\treturn true;\n\t}\n}\n\nfunction observableContextKey<T>(key: string, contextKeyService: IContextKeyService): IObservable<T | undefined> {\n\treturn observableFromEvent(contextKeyService.onDidChangeContext, () => contextKeyService.getContextKeyValue<T>(key));\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { IObservable, observableFromEvent } from '../../../../base/common/observable.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IDataChannelService } from '../../../../platform/dataChannel/common/dataChannel.js';\n\nexport interface IRecordableLogEntry {\n\tsourceId: string;\n\ttime: number;\n}\n\nexport interface IRecordableEditorLogEntry extends IRecordableLogEntry {\n\tmodelUri: URI; // This has to be a URI, so that it gets translated automatically in remote scenarios\n\tmodelVersion: number;\n}\n\nexport interface IDocumentEventDataSetChangeReason {\n\tsourceId: 'TextModel.setChangeReason';\n\tsource: 'inlineSuggestion.accept' | 'snippet' | string;\n}\n\n\n/**\n * The sourceLabel must not contain '@'!\n*/\nexport function formatRecordableLogEntry<T extends IRecordableLogEntry>(entry: T): string {\n\treturn entry.sourceId + ' @@ ' + JSON.stringify({ ...entry, modelUri: (entry as any).modelUri?.toString(), sourceId: undefined });\n}\n\nexport class StructuredLogger<T extends IRecordableLogEntry> extends Disposable {\n\tpublic static cast<T extends IRecordableLogEntry>(): typeof StructuredLogger<T> {\n\t\treturn this as typeof StructuredLogger<T>;\n\t}\n\n\tpublic readonly isEnabled;\n\tprivate readonly _isEnabledContextKeyValue;\n\n\tconstructor(\n\t\tprivate readonly _key: string,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IDataChannelService private readonly _dataChannelService: IDataChannelService,\n\t) {\n\t\tsuper();\n\t\tthis._isEnabledContextKeyValue = observableContextKey<boolean>('structuredLogger.enabled:' + this._key, this._contextKeyService).recomputeInitiallyAndOnChange(this._store);\n\t\tthis.isEnabled = this._isEnabledContextKeyValue.map(v => v !== undefined);\n\t}\n\n\tpublic log(data: T): boolean {\n\t\tconst enabled = this._isEnabledContextKeyValue.get();\n\t\tif (!enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._dataChannelService.getDataChannel<T>('structuredLogger:' + this._key).sendData(data);\n\t\treturn true;\n\t}\n}\n\nfunction observableContextKey<T>(key: string, contextKeyService: IContextKeyService): IObservable<T | undefined> {\n\treturn observableFromEvent(contextKeyService.onDidChangeContext, () => contextKeyService.getContextKeyValue<T>(key));\n}\n"]}