{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsModel.ts","vs/editor/contrib/inlineCompletions/browser/model/inlineCompletionsModel.ts"],"names":[],"mappings":"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","file":"inlineCompletionsModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFindFirst } from '../../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IObservableWithChange, IReader, ITransaction, autorun, constObservable, derived, derivedHandleChanges, derivedOpts, mapObservableArrayCached, observableFromEvent, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../../base/common/strings.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { CursorColumns } from '../../../../common/core/cursorColumns.js';\nimport { LineRange } from '../../../../common/core/ranges/lineRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { TextReplacement, TextEdit } from '../../../../common/core/edits/textEdit.js';\nimport { TextLength } from '../../../../common/core/text/textLength.js';\nimport { ScrollType } from '../../../../common/editorCommon.js';\nimport { InlineCompletionEndOfLifeReasonKind, InlineCompletion, InlineCompletionTriggerKind, PartialAcceptTriggerKind, InlineCompletionsProvider, InlineCompletionCommand, InlineCompletions } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, IModelDeltaDecoration, ITextModel } from '../../../../common/model.js';\nimport { TextModelText } from '../../../../common/model/textModelText.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../../common/services/languageFeatures.js';\nimport { IModelContentChangedEvent } from '../../../../common/textModelEvents.js';\nimport { SnippetController2 } from '../../../snippet/browser/snippetController2.js';\nimport { getEndPositionsAfterApplying, removeTextReplacementCommonSuffixPrefix } from '../utils.js';\nimport { AnimatedValue, easeOutCubic, ObservableAnimatedValue } from './animation.js';\nimport { computeGhostText } from './computeGhostText.js';\nimport { GhostText, GhostTextOrReplacement, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { InlineEdit } from './inlineEdit.js';\nimport { InlineCompletionItem, InlineEditItem, InlineSuggestionItem } from './inlineSuggestionItem.js';\nimport { InlineCompletionContextWithoutUuid, InlineCompletionEditorType, InlineSuggestRequestInfo } from './provideInlineCompletions.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\nimport { SuggestItemInfo } from './suggestWidgetAdapter.js';\nimport { TextModelEditSource, EditSources } from '../../../../common/textModelEditSource.js';\nimport { ICodeEditorService } from '../../../../browser/services/codeEditorService.js';\nimport { InlineCompletionViewData, InlineCompletionViewKind } from '../view/inlineEdits/inlineEditsViewInterface.js';\nimport { IInlineCompletionsService } from '../../../../browser/services/inlineCompletionsService.js';\nimport { TypingInterval } from './typingSpeed.js';\nimport { StringReplacement } from '../../../../common/core/edits/stringEdit.js';\nimport { OffsetRange } from '../../../../common/core/ranges/offsetRange.js';\nimport { URI } from '../../../../../base/common/uri.js';\n\nexport class InlineCompletionsModel extends Disposable {\n\tprivate readonly _source;\n\tprivate readonly _isActive = observableValue<boolean>(this, false);\n\tprivate readonly _onlyRequestInlineEditsSignal = observableSignal(this);\n\tprivate readonly _forceUpdateExplicitlySignal = observableSignal(this);\n\tprivate readonly _noDelaySignal = observableSignal(this);\n\n\tprivate readonly _fetchSpecificProviderSignal = observableSignal<InlineCompletionsProvider | undefined>(this);\n\n\t// We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n\tprivate readonly _selectedInlineCompletionId = observableValue<string | undefined>(this, undefined);\n\tpublic readonly primaryPosition = derived(this, reader => this._positions.read(reader)[0] ?? new Position(1, 1));\n\n\tprivate _isAcceptingPartially = false;\n\tprivate readonly _appearedInsideViewport = derived<boolean>(this, reader => {\n\t\tconst state = this.state.read(reader);\n\t\tif (!state || !state.inlineCompletion) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst targetRange = state.inlineCompletion.targetRange;\n\t\tconst visibleRanges = this._editorObs.editor.getVisibleRanges();\n\t\tif (visibleRanges.length < 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewportRange = new Range(visibleRanges[0].startLineNumber, visibleRanges[0].startColumn, visibleRanges[visibleRanges.length - 1].endLineNumber, visibleRanges[visibleRanges.length - 1].endColumn);\n\t\treturn viewportRange.containsRange(targetRange);\n\t});\n\tpublic get isAcceptingPartially() { return this._isAcceptingPartially; }\n\n\tprivate readonly _onDidAccept = new Emitter<void>();\n\tpublic readonly onDidAccept = this._onDidAccept.event;\n\n\tprivate readonly _editorObs;\n\n\tprivate readonly _typing: TypingInterval;\n\n\tprivate readonly _suggestPreviewEnabled;\n\tprivate readonly _suggestPreviewMode;\n\tprivate readonly _inlineSuggestMode;\n\tprivate readonly _suppressedInlineCompletionGroupIds;\n\tprivate readonly _inlineEditsEnabled;\n\tprivate readonly _inlineEditsShowCollapsedEnabled;\n\tprivate readonly _triggerCommandOnProviderChange;\n\tprivate readonly _minShowDelay;\n\tprivate readonly _showOnSuggestConflict;\n\n\tconstructor(\n\t\tpublic readonly textModel: ITextModel,\n\t\tprivate readonly _selectedSuggestItem: IObservable<SuggestItemInfo | undefined>,\n\t\tpublic readonly _textModelVersionId: IObservableWithChange<number | null, IModelContentChangedEvent | undefined>,\n\t\tprivate readonly _positions: IObservable<readonly Position[]>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\tprivate readonly _enabled: IObservable<boolean>,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IInlineCompletionsService private readonly _inlineCompletionsService: IInlineCompletionsService\n\t) {\n\t\tsuper();\n\t\tthis._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this._textModelVersionId, this._debounceValue, this.primaryPosition));\n\t\tthis.lastTriggerKind = this._source.inlineCompletions.map(this, v => v?.request?.context.triggerKind);\n\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\n\t\tconst suggest = this._editorObs.getOption(EditorOption.suggest);\n\t\tthis._suggestPreviewEnabled = suggest.map(v => v.preview);\n\t\tthis._suggestPreviewMode = suggest.map(v => v.previewMode);\n\n\t\tconst inlineSuggest = this._editorObs.getOption(EditorOption.inlineSuggest);\n\t\tthis._inlineSuggestMode = inlineSuggest.map(v => v.mode);\n\t\tthis._suppressedInlineCompletionGroupIds = inlineSuggest.map(v => new Set(v.experimental.suppressInlineSuggestions.split(',')));\n\t\tthis._inlineEditsEnabled = inlineSuggest.map(v => !!v.edits.enabled);\n\t\tthis._inlineEditsShowCollapsedEnabled = inlineSuggest.map(s => s.edits.showCollapsed);\n\t\tthis._triggerCommandOnProviderChange = inlineSuggest.map(s => s.triggerCommandOnProviderChange);\n\t\tthis._minShowDelay = inlineSuggest.map(s => s.minShowDelay);\n\t\tthis._showOnSuggestConflict = inlineSuggest.map(s => s.experimental.showOnSuggestConflict);\n\n\t\tthis._typing = this._register(new TypingInterval(this.textModel));\n\n\t\tthis._register(this._inlineCompletionsService.onDidChangeIsSnoozing((isSnoozing) => {\n\t\t\tif (isSnoozing) {\n\t\t\t\tthis.stop();\n\t\t\t}\n\t\t}));\n\n\t\t{ // Determine editor type\n\t\t\tconst isNotebook = this.textModel.uri.scheme === 'vscode-notebook-cell';\n\t\t\tconst [diffEditor] = this._codeEditorService.listDiffEditors()\n\t\t\t\t.filter(d =>\n\t\t\t\t\td.getOriginalEditor().getId() === this._editor.getId() ||\n\t\t\t\t\td.getModifiedEditor().getId() === this._editor.getId());\n\n\t\t\tthis.isInDiffEditor = !!diffEditor;\n\t\t\tthis.editorType = isNotebook ? InlineCompletionEditorType.Notebook\n\t\t\t\t: this.isInDiffEditor ? InlineCompletionEditorType.DiffEditor\n\t\t\t\t\t: InlineCompletionEditorType.TextEditor;\n\t\t}\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this.state, (s) => {\n\t\t\tif (s && s.inlineCompletion) {\n\t\t\t\tthis._inlineCompletionsService.reportNewCompletion(s.inlineCompletion.requestUuid);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._editorObs.versionId.read(reader);\n\t\t\tthis._inAcceptFlow.set(false, undefined);\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst jumpToReset = this.state.map((s, reader) => !s || s.kind === 'inlineEdit' && !s.cursorAtInlineEdit.read(reader)).read(reader);\n\t\t\tif (jumpToReset) {\n\t\t\t\tthis._jumpedToId.set(undefined, undefined);\n\t\t\t}\n\t\t}));\n\n\t\tconst inlineEditSemanticId = this.inlineEditState.map(s => s?.inlineCompletion.semanticId);\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst id = inlineEditSemanticId.read(reader);\n\t\t\tif (id) {\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t\tthis._lastShownInlineCompletionInfo = {\n\t\t\t\t\talternateTextModelVersionId: this.textModel.getAlternativeVersionId(),\n\t\t\t\t\tinlineCompletion: this.state.get()!.inlineCompletion!,\n\t\t\t\t};\n\t\t\t}\n\t\t}));\n\n\t\t// TODO: should use getAvailableProviders and update on _suppressedInlineCompletionGroupIds change\n\t\tconst inlineCompletionProviders = observableFromEvent(this._languageFeaturesService.inlineCompletionsProvider.onDidChange, () => this._languageFeaturesService.inlineCompletionsProvider.all(textModel));\n\t\tmapObservableArrayCached(this, inlineCompletionProviders, (provider, store) => {\n\t\t\tif (!provider.onDidChangeInlineCompletions) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstore.add(provider.onDidChangeInlineCompletions(() => {\n\t\t\t\tif (!this._enabled.get()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Only update the active editor\n\t\t\t\tconst activeEditor = this._codeEditorService.getFocusedCodeEditor() || this._codeEditorService.getActiveCodeEditor();\n\t\t\t\tif (activeEditor !== this._editor) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._triggerCommandOnProviderChange.get()) {\n\t\t\t\t\t// TODO@hediet remove this and always do the else branch.\n\t\t\t\t\tthis.trigger(undefined, { onlyFetchInlineEdits: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\t// If there is an active suggestion from a different provider, we ignore the update\n\t\t\t\tconst activeState = this.state.get();\n\t\t\t\tif (activeState && (activeState.inlineCompletion || activeState.edits) && activeState.inlineCompletion?.source.provider !== provider) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\tthis._fetchSpecificProviderSignal.trigger(tx, provider);\n\t\t\t\t\tthis.trigger(tx);\n\t\t\t\t});\n\n\t\t\t}));\n\t\t}).recomputeInitiallyAndOnChange(this._store);\n\n\t\tthis._didUndoInlineEdits.recomputeInitiallyAndOnChange(this._store);\n\t}\n\n\tprivate _lastShownInlineCompletionInfo: { alternateTextModelVersionId: number; /* already freed! */ inlineCompletion: InlineSuggestionItem } | undefined = undefined;\n\tprivate _lastAcceptedInlineCompletionInfo: { textModelVersionIdAfter: number; /* already freed! */ inlineCompletion: InlineSuggestionItem } | undefined = undefined;\n\tprivate readonly _didUndoInlineEdits = derivedHandleChanges({\n\t\towner: this,\n\t\tchangeTracker: {\n\t\t\tcreateChangeSummary: () => ({ didUndo: false }),\n\t\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t\tchangeSummary.didUndo = ctx.didChange(this._textModelVersionId) && !!ctx.change?.isUndoing;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}, (reader, changeSummary) => {\n\t\tconst versionId = this._textModelVersionId.read(reader);\n\t\tif (versionId !== null\n\t\t\t&& this._lastAcceptedInlineCompletionInfo\n\t\t\t&& this._lastAcceptedInlineCompletionInfo.textModelVersionIdAfter === versionId - 1\n\t\t\t&& this._lastAcceptedInlineCompletionInfo.inlineCompletion.isInlineEdit\n\t\t\t&& changeSummary.didUndo\n\t\t) {\n\t\t\tthis._lastAcceptedInlineCompletionInfo = undefined;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n\n\tpublic getIndentationInfo(reader: IReader) {\n\t\tlet startsWithIndentation = false;\n\t\tlet startsWithIndentationLessThanTabSize = true;\n\t\tconst ghostText = this?.primaryGhostText.read(reader);\n\t\tif (!!this?._selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\tconst firstLine = lines[0].line;\n\n\t\t\tconst indentationEndColumn = this.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\tif (inIndentation) {\n\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t}\n\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\tconst tabSize = this.textModel.getOptions().tabSize;\n\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tstartsWithIndentation,\n\t\t\tstartsWithIndentationLessThanTabSize,\n\t\t};\n\t}\n\n\tprivate readonly _preserveCurrentCompletionReasons = new Set([\n\t\tVersionIdChangeReason.Redo,\n\t\tVersionIdChangeReason.Undo,\n\t\tVersionIdChangeReason.AcceptWord,\n\t]);\n\n\tprivate _getReason(e: IModelContentChangedEvent | undefined): VersionIdChangeReason {\n\t\tif (e?.isUndoing) { return VersionIdChangeReason.Undo; }\n\t\tif (e?.isRedoing) { return VersionIdChangeReason.Redo; }\n\t\tif (this.isAcceptingPartially) { return VersionIdChangeReason.AcceptWord; }\n\t\treturn VersionIdChangeReason.Other;\n\t}\n\n\tpublic readonly dontRefetchSignal = observableSignal(this);\n\n\tprivate readonly _fetchInlineCompletionsPromise = derivedHandleChanges({\n\t\towner: this,\n\t\tchangeTracker: {\n\t\t\tcreateChangeSummary: () => ({\n\t\t\t\tdontRefetch: false,\n\t\t\t\tpreserveCurrentCompletion: false,\n\t\t\t\tinlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic,\n\t\t\t\tonlyRequestInlineEdits: false,\n\t\t\t\tshouldDebounce: true,\n\t\t\t\tprovider: undefined as InlineCompletionsProvider | undefined,\n\t\t\t\ttextChange: false,\n\t\t\t\tchangeReason: '',\n\t\t\t}),\n\t\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t\t/** @description fetch inline completions */\n\t\t\t\tif (ctx.didChange(this._textModelVersionId)) {\n\t\t\t\t\tif (this._preserveCurrentCompletionReasons.has(this._getReason(ctx.change))) {\n\t\t\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t\t\t}\n\t\t\t\t\tconst detailedReasons = ctx.change?.detailedReasons ?? [];\n\t\t\t\t\tchangeSummary.changeReason = detailedReasons.length > 0 ? detailedReasons[0].getType() : '';\n\t\t\t\t\tchangeSummary.textChange = true;\n\t\t\t\t} else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n\t\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t\t\tchangeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n\t\t\t\t} else if (ctx.didChange(this.dontRefetchSignal)) {\n\t\t\t\t\tchangeSummary.dontRefetch = true;\n\t\t\t\t} else if (ctx.didChange(this._onlyRequestInlineEditsSignal)) {\n\t\t\t\t\tchangeSummary.onlyRequestInlineEdits = true;\n\t\t\t\t} else if (ctx.didChange(this._fetchSpecificProviderSignal)) {\n\t\t\t\t\tchangeSummary.provider = ctx.change;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t}, (reader, changeSummary) => {\n\t\tthis._source.clearOperationOnTextModelChange.read(reader); // Make sure the clear operation runs before the fetch operation\n\t\tthis._noDelaySignal.read(reader);\n\t\tthis.dontRefetchSignal.read(reader);\n\t\tthis._onlyRequestInlineEditsSignal.read(reader);\n\t\tthis._forceUpdateExplicitlySignal.read(reader);\n\t\tthis._fetchSpecificProviderSignal.read(reader);\n\t\tconst shouldUpdate = ((this._enabled.read(reader) && this._selectedSuggestItem.read(reader)) || this._isActive.read(reader))\n\t\t\t&& (!this._inlineCompletionsService.isSnoozing() || changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit);\n\t\tif (!shouldUpdate) {\n\t\t\tthis._source.cancelUpdate();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._textModelVersionId.read(reader); // Refetch on text change\n\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n\t\tlet suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (this._shouldShowOnSuggestConflict.get()) {\n\t\t\tsuggestItem = undefined;\n\t\t}\n\t\tif (suggestWidgetInlineCompletions && !suggestItem) {\n\t\t\tthis._source.seedInlineCompletionsWithSuggestWidget();\n\t\t}\n\n\t\tif (changeSummary.dontRefetch) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tif (this._didUndoInlineEdits.read(reader) && changeSummary.inlineCompletionTriggerKind !== InlineCompletionTriggerKind.Explicit) {\n\t\t\ttransaction(tx => {\n\t\t\t\tthis._source.clear(tx);\n\t\t\t});\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet reason: string = '';\n\t\tif (changeSummary.provider) {\n\t\t\treason += 'providerOnDidChange';\n\t\t} else if (changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit) {\n\t\t\treason += 'explicit';\n\t\t}\n\t\tif (changeSummary.changeReason) {\n\t\t\treason += reason.length > 0 ? `:${changeSummary.changeReason}` : changeSummary.changeReason;\n\t\t}\n\n\t\tconst typingInterval = this._typing.getTypingInterval();\n\t\tconst requestInfo: InlineSuggestRequestInfo = {\n\t\t\teditorType: this.editorType,\n\t\t\tstartTime: Date.now(),\n\t\t\tlanguageId: this.textModel.getLanguageId(),\n\t\t\treason,\n\t\t\ttypingInterval: typingInterval.averageInterval,\n\t\t\ttypingIntervalCharacterCount: typingInterval.characterCount,\n\t\t};\n\n\t\tlet context: InlineCompletionContextWithoutUuid = {\n\t\t\ttriggerKind: changeSummary.inlineCompletionTriggerKind,\n\t\t\tselectedSuggestionInfo: suggestItem?.toSelectedSuggestionInfo(),\n\t\t\tincludeInlineCompletions: !changeSummary.onlyRequestInlineEdits,\n\t\t\tincludeInlineEdits: this._inlineEditsEnabled.read(reader),\n\t\t\trequestIssuedDateTime: requestInfo.startTime,\n\t\t\tearliestShownDateTime: requestInfo.startTime + (changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit || this.inAcceptFlow.get() ? 0 : this._minShowDelay.get()),\n\t\t};\n\n\t\tif (context.triggerKind === InlineCompletionTriggerKind.Automatic && changeSummary.textChange) {\n\t\t\tif (this.textModel.getAlternativeVersionId() === this._lastShownInlineCompletionInfo?.alternateTextModelVersionId) {\n\t\t\t\t// When undoing back to a version where an inline edit/completion was shown,\n\t\t\t\t// we want to show an inline edit (or completion) again if it was originally an inline edit (or completion).\n\t\t\t\tcontext = {\n\t\t\t\t\t...context,\n\t\t\t\t\tincludeInlineCompletions: !this._lastShownInlineCompletionInfo.inlineCompletion.isInlineEdit,\n\t\t\t\t\tincludeInlineEdits: this._lastShownInlineCompletionInfo.inlineCompletion.isInlineEdit,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst itemToPreserveCandidate = this.selectedInlineCompletion.get() ?? this._inlineCompletionItems.get()?.inlineEdit;\n\t\tconst itemToPreserve = changeSummary.preserveCurrentCompletion || itemToPreserveCandidate?.forwardStable\n\t\t\t? itemToPreserveCandidate : undefined;\n\t\tconst userJumpedToActiveCompletion = this._jumpedToId.map(jumpedTo => !!jumpedTo && jumpedTo === this._inlineCompletionItems.get()?.inlineEdit?.semanticId);\n\n\t\tconst providers = changeSummary.provider\n\t\t\t? { providers: [changeSummary.provider], label: 'single:' + changeSummary.provider.providerId?.toString() }\n\t\t\t: { providers: this._languageFeaturesService.inlineCompletionsProvider.all(this.textModel), label: undefined }; // TODO: should use inlineCompletionProviders\n\t\tconst availableProviders = this.getAvailableProviders(providers.providers);\n\n\t\treturn this._source.fetch(availableProviders, providers.label, context, itemToPreserve?.identity, changeSummary.shouldDebounce, userJumpedToActiveCompletion, requestInfo);\n\t});\n\n\t// TODO: This is not an ideal implementation of excludesGroupIds, however as this is currently still behind proposed API\n\t// and due to the time constraints, we are using a simplified approach\n\tprivate getAvailableProviders(providers: InlineCompletionsProvider<InlineCompletions<InlineCompletion>>[]): InlineCompletionsProvider[] {\n\t\tconst suppressedProviderGroupIds = this._suppressedInlineCompletionGroupIds.get();\n\t\tconst unsuppressedProviders = providers.filter(provider => !(provider.groupId && suppressedProviderGroupIds.has(provider.groupId)));\n\n\t\tconst excludedGroupIds = new Set<string>();\n\t\tfor (const provider of unsuppressedProviders) {\n\t\t\tprovider.excludesGroupIds?.forEach(p => excludedGroupIds.add(p));\n\t\t}\n\n\t\tconst availableProviders: InlineCompletionsProvider<InlineCompletions<InlineCompletion>>[] = [];\n\t\tfor (const provider of unsuppressedProviders) {\n\t\t\tif (provider.groupId && excludedGroupIds.has(provider.groupId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tavailableProviders.push(provider);\n\t\t}\n\n\t\treturn availableProviders;\n\t}\n\n\tpublic async trigger(tx?: ITransaction, options?: { onlyFetchInlineEdits?: boolean; noDelay?: boolean }): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (options?.onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tif (options?.noDelay) {\n\t\t\t\tthis._noDelaySignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic async triggerExplicitly(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t\tthis._inAcceptFlow.set(true, tx);\n\t\t\tthis._forceUpdateExplicitlySignal.trigger(tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic stop(stopReason: 'explicitCancel' | 'automatic' = 'automatic', tx?: ITransaction): void {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (stopReason === 'explicitCancel') {\n\t\t\t\tconst inlineCompletion = this.state.get()?.inlineCompletion;\n\t\t\t\tif (inlineCompletion) {\n\t\t\t\t\tinlineCompletion.reportEndOfLife({ kind: InlineCompletionEndOfLifeReasonKind.Rejected });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isActive.set(false, tx);\n\t\t\tthis._source.clear(tx);\n\t\t});\n\t}\n\n\tprivate readonly _inlineCompletionItems = derivedOpts({ owner: this }, reader => {\n\t\tconst c = this._source.inlineCompletions.read(reader);\n\t\tif (!c) { return undefined; }\n\t\tconst cursorPosition = this.primaryPosition.read(reader);\n\t\tlet inlineEdit: InlineEditItem | undefined = undefined;\n\t\tconst visibleCompletions: InlineCompletionItem[] = [];\n\t\tfor (const completion of c.inlineCompletions) {\n\t\t\tif (!completion.isInlineEdit) {\n\t\t\t\tif (completion.isVisible(this.textModel, cursorPosition)) {\n\t\t\t\t\tvisibleCompletions.push(completion);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinlineEdit = completion;\n\t\t\t}\n\t\t}\n\n\t\tif (visibleCompletions.length !== 0) {\n\t\t\t// Don't show the inline edit if there is a visible completion\n\t\t\tinlineEdit = undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tinlineCompletions: visibleCompletions,\n\t\t\tinlineEdit,\n\t\t};\n\t});\n\n\tprivate readonly _filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n\t\tconst c = this._inlineCompletionItems.read(reader);\n\t\treturn c?.inlineCompletions ?? [];\n\t});\n\n\tpublic readonly selectedInlineCompletionIndex = derived<number>(this, (reader) => {\n\t\tconst selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this._selectedInlineCompletionId === undefined ? -1\n\t\t\t: filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n\t\tif (idx === -1) {\n\t\t\t// Reset the selection so that the selection does not jump back when it appears again\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t\treturn 0;\n\t\t}\n\t\treturn idx;\n\t});\n\n\tpublic readonly selectedInlineCompletion = derived<InlineCompletionItem | undefined>(this, (reader) => {\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this.selectedInlineCompletionIndex.read(reader);\n\t\treturn filteredCompletions[idx];\n\t});\n\n\tpublic readonly activeCommands = derivedOpts<InlineCompletionCommand[]>({ owner: this, equalsFn: itemsEquals() },\n\t\tr => this.selectedInlineCompletion.read(r)?.source.inlineSuggestions.commands ?? []\n\t);\n\n\tpublic readonly lastTriggerKind: IObservable<InlineCompletionTriggerKind | undefined>;\n\n\tpublic readonly inlineCompletionsCount = derived<number | undefined>(this, reader => {\n\t\tif (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n\t\t\treturn this._filteredInlineCompletionItems.read(reader).length;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tprivate readonly _hasVisiblePeekWidgets = derived(this, reader => this._editorObs.openedPeekWidgets.read(reader) > 0);\n\n\tprivate readonly _shouldShowOnSuggestConflict = derived(this, reader => {\n\t\tconst showOnSuggestConflict = this._showOnSuggestConflict.read(reader);\n\t\tif (showOnSuggestConflict !== 'never') {\n\t\t\tconst hasInlineCompletion = !!this.selectedInlineCompletion.read(reader);\n\t\t\tif (hasInlineCompletion) {\n\t\t\t\tconst item = this._selectedSuggestItem.read(reader);\n\t\t\t\tif (!item) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (showOnSuggestConflict === 'whenSuggestListIsIncomplete') {\n\t\t\t\t\treturn item.listIncomplete;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t});\n\n\tpublic readonly state = derivedOpts<{\n\t\tkind: 'ghostText';\n\t\tedits: readonly TextReplacement[];\n\t\tprimaryGhostText: GhostTextOrReplacement;\n\t\tghostTexts: readonly GhostTextOrReplacement[];\n\t\tsuggestItem: SuggestItemInfo | undefined;\n\t\tinlineCompletion: InlineCompletionItem | undefined;\n\t} | {\n\t\tkind: 'inlineEdit';\n\t\tedits: readonly TextReplacement[];\n\t\tinlineEdit: InlineEdit;\n\t\tinlineCompletion: InlineEditItem;\n\t\tcursorAtInlineEdit: IObservable<boolean>;\n\t\tnextEditUri: URI | undefined;\n\t} | undefined>({\n\t\towner: this,\n\t\tequalsFn: (a, b) => {\n\t\t\tif (!a || !b) { return a === b; }\n\n\t\t\tif (a.kind === 'ghostText' && b.kind === 'ghostText') {\n\t\t\t\treturn ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n\t\t\t\t\t&& a.inlineCompletion === b.inlineCompletion\n\t\t\t\t\t&& a.suggestItem === b.suggestItem;\n\t\t\t} else if (a.kind === 'inlineEdit' && b.kind === 'inlineEdit') {\n\t\t\t\treturn a.inlineEdit.equals(b.inlineEdit);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}, (reader) => {\n\t\tconst model = this.textModel;\n\n\t\tconst item = this._inlineCompletionItems.read(reader);\n\t\tconst inlineEditResult = item?.inlineEdit;\n\t\tif (inlineEditResult) {\n\t\t\tif (this._hasVisiblePeekWidgets.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tlet edit = inlineEditResult.getSingleTextEdit();\n\t\t\tedit = singleTextRemoveCommonPrefix(edit, model);\n\n\t\t\tconst cursorAtInlineEdit = this.primaryPosition.map(cursorPos => LineRange.fromRangeInclusive(inlineEditResult.targetRange).addMargin(1, 1).contains(cursorPos.lineNumber));\n\n\t\t\tconst commands = inlineEditResult.source.inlineSuggestions.commands;\n\t\t\tconst inlineEdit = new InlineEdit(edit, commands ?? [], inlineEditResult);\n\n\t\t\tconst edits = inlineEditResult.updatedEdit;\n\t\t\tconst e = edits ? TextEdit.fromStringEdit(edits, new TextModelText(this.textModel)).replacements : [edit];\n\t\t\tconst nextEditUri = (item.inlineEdit?.command?.id === 'vscode.open' || item.inlineEdit?.command?.id === '_workbench.open') &&\n\t\t\t\titem.inlineEdit?.command.arguments?.length ? URI.from(item.inlineEdit?.command.arguments[0]) : undefined;\n\t\t\treturn { kind: 'inlineEdit', inlineEdit, inlineCompletion: inlineEditResult, edits: e, cursorAtInlineEdit, nextEditUri };\n\t\t}\n\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (!this._shouldShowOnSuggestConflict.read(reader) && suggestItem) {\n\t\t\tconst suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.getSingleTextEdit(), model);\n\t\t\tconst augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n\n\t\t\tconst isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n\t\t\tif (!isSuggestionPreviewEnabled && !augmentation) { return undefined; }\n\n\t\t\tconst fullEdit = augmentation?.edit ?? suggestCompletionEdit;\n\t\t\tconst fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n\n\t\t\tconst mode = this._suggestPreviewMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst allPotentialEdits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n\t\t\tconst validEditsAndGhostTexts = allPotentialEdits\n\t\t\t\t.map((edit, idx) => ({ edit, ghostText: edit ? computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength) : undefined }))\n\t\t\t\t.filter(({ edit, ghostText }) => edit !== undefined && ghostText !== undefined);\n\t\t\tconst edits = validEditsAndGhostTexts.map(({ edit }) => edit!);\n\t\t\tconst ghostTexts = validEditsAndGhostTexts.map(({ ghostText }) => ghostText!);\n\t\t\tconst primaryGhostText = ghostTexts[0] ?? new GhostText(fullEdit.range.endLineNumber, []);\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation?.completion, suggestItem };\n\t\t} else {\n\t\t\tif (!this._isActive.read(reader)) { return undefined; }\n\t\t\tconst inlineCompletion = this.selectedInlineCompletion.read(reader);\n\t\t\tif (!inlineCompletion) { return undefined; }\n\n\t\t\tconst replacement = inlineCompletion.getSingleTextEdit();\n\t\t\tconst mode = this._inlineSuggestMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst allPotentialEdits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n\t\t\tconst validEditsAndGhostTexts = allPotentialEdits\n\t\t\t\t.map((edit, idx) => ({ edit, ghostText: edit ? computeGhostText(edit, model, mode, positions[idx], 0) : undefined }))\n\t\t\t\t.filter(({ edit, ghostText }) => edit !== undefined && ghostText !== undefined);\n\t\t\tconst edits = validEditsAndGhostTexts.map(({ edit }) => edit!);\n\t\t\tconst ghostTexts = validEditsAndGhostTexts.map(({ ghostText }) => ghostText!);\n\t\t\tif (!ghostTexts[0]) { return undefined; }\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n\t\t}\n\t});\n\n\tpublic readonly inlineCompletionState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'ghostText') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._editorObs.inComposition.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'inlineEdit') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditAvailable = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\treturn !!s;\n\t});\n\n\tprivate _computeAugmentation(suggestCompletion: TextReplacement, reader: IReader | undefined) {\n\t\tconst model = this.textModel;\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n\t\tconst candidateInlineCompletions = suggestWidgetInlineCompletions\n\t\t\t? suggestWidgetInlineCompletions.inlineCompletions.filter(c => !c.isInlineEdit)\n\t\t\t: [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n\n\t\tconst augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n\t\t\tlet r = completion.getSingleTextEdit();\n\t\t\tr = singleTextRemoveCommonPrefix(\n\t\t\t\tr,\n\t\t\t\tmodel,\n\t\t\t\tRange.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition())\n\t\t\t);\n\t\t\treturn singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n\t\t});\n\n\t\treturn augmentedCompletion;\n\t}\n\n\tpublic readonly warning = derived(this, reader => {\n\t\treturn this.inlineCompletionState.read(reader)?.inlineCompletion?.warning;\n\t});\n\n\tpublic readonly ghostTexts = derivedOpts({ owner: this, equalsFn: ghostTextsOrReplacementsEqual }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v.ghostTexts;\n\t});\n\n\tpublic readonly primaryGhostText = derivedOpts({ owner: this, equalsFn: ghostTextOrReplacementEquals }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v?.primaryGhostText;\n\t});\n\n\tpublic readonly showCollapsed = derived<boolean>(this, reader => {\n\t\tconst state = this.state.read(reader);\n\t\tif (!state || state.kind !== 'inlineEdit') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (state.inlineCompletion.displayLocation) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst isCurrentModelVersion = state.inlineCompletion.updatedEditModelVersion === this._textModelVersionId.read(reader);\n\t\treturn (this._inlineEditsShowCollapsedEnabled.read(reader) || !isCurrentModelVersion)\n\t\t\t&& this._jumpedToId.read(reader) !== state.inlineCompletion.semanticId\n\t\t\t&& !this._inAcceptFlow.read(reader);\n\t});\n\n\tprivate readonly _tabShouldIndent = derived(this, reader => {\n\t\tif (this._inAcceptFlow.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction isMultiLine(range: Range): boolean {\n\t\t\treturn range.startLineNumber !== range.endLineNumber;\n\t\t}\n\n\t\tfunction getNonIndentationRange(model: ITextModel, lineNumber: number): Range {\n\t\t\tconst columnStart = model.getLineIndentColumn(lineNumber);\n\t\t\tconst lastNonWsColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\t\tconst columnEnd = Math.max(lastNonWsColumn, columnStart);\n\t\t\treturn new Range(lineNumber, columnStart, lineNumber, columnEnd);\n\t\t}\n\n\t\tconst selections = this._editorObs.selections.read(reader);\n\t\treturn selections?.some(s => {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\treturn this.textModel.getLineLength(s.startLineNumber) === 0;\n\t\t\t} else {\n\t\t\t\treturn isMultiLine(s) || s.containsRange(getNonIndentationRange(this.textModel, s.startLineNumber));\n\t\t\t}\n\t\t});\n\t});\n\n\tpublic readonly tabShouldJumpToInlineEdit = derived(this, reader => {\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.showCollapsed.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this._inAcceptFlow.read(reader) && this._appearedInsideViewport.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !s.cursorAtInlineEdit.read(reader);\n\t});\n\n\tpublic readonly tabShouldAcceptInlineEdit = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.showCollapsed.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._inAcceptFlow.read(reader) && this._appearedInsideViewport.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (s.inlineCompletion.targetRange.startLineNumber === this._editorObs.cursorLineNumber.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._jumpedToId.read(reader) === s.inlineCompletion.semanticId) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn s.cursorAtInlineEdit.read(reader);\n\t});\n\n\tpublic readonly isInDiffEditor;\n\n\tpublic readonly editorType: InlineCompletionEditorType;\n\n\tprivate async _deltaSelectedInlineCompletionIndex(delta: 1 | -1): Promise<void> {\n\t\tawait this.triggerExplicitly();\n\n\t\tconst completions = this._filteredInlineCompletionItems.get() || [];\n\t\tif (completions.length > 0) {\n\t\t\tconst newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n\t\t\tthis._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n\t\t} else {\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t}\n\t}\n\n\tpublic async next(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(1); }\n\n\tpublic async previous(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(-1); }\n\n\tprivate _getMetadata(completion: InlineSuggestionItem, languageId: string, type: 'word' | 'line' | undefined = undefined): TextModelEditSource {\n\t\tif (type) {\n\t\t\treturn EditSources.inlineCompletionPartialAccept({\n\t\t\t\tnes: completion.isInlineEdit,\n\t\t\t\trequestUuid: completion.requestUuid,\n\t\t\t\tproviderId: completion.source.provider.providerId,\n\t\t\t\tlanguageId,\n\t\t\t\ttype,\n\t\t\t});\n\t\t} else {\n\t\t\treturn EditSources.inlineCompletionAccept({\n\t\t\t\tnes: completion.isInlineEdit,\n\t\t\t\trequestUuid: completion.requestUuid,\n\t\t\t\tproviderId: completion.source.provider.providerId,\n\t\t\t\tlanguageId\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async accept(editor: ICodeEditor = this._editor): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tlet completion: InlineSuggestionItem;\n\t\tlet isNextEditUri = false;\n\t\tconst state = this.state.get();\n\t\tif (state?.kind === 'ghostText') {\n\t\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcompletion = state.inlineCompletion;\n\t\t} else if (state?.kind === 'inlineEdit') {\n\t\t\tcompletion = state.inlineCompletion;\n\t\t\tisNextEditUri = !!state.nextEditUri;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure the completion list will not be disposed before the text change is sent.\n\t\tcompletion.addRef();\n\n\t\ttry {\n\t\t\teditor.pushUndoStop();\n\t\t\tif (isNextEditUri) {\n\t\t\t\t// Do nothing\n\t\t\t} else if (completion.snippetInfo) {\n\t\t\t\tconst mainEdit = TextReplacement.delete(completion.editRange);\n\t\t\t\tconst additionalEdits = completion.additionalTextEdits.map(e => new TextReplacement(Range.lift(e.range), e.text ?? ''));\n\t\t\t\tconst edit = TextEdit.fromParallelReplacementsUnsorted([mainEdit, ...additionalEdits]);\n\t\t\t\teditor.edit(edit, this._getMetadata(completion, this.textModel.getLanguageId()));\n\n\t\t\t\teditor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n\t\t\t\tSnippetController2.get(editor)?.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n\t\t\t} else {\n\t\t\t\tconst edits = state.edits;\n\n\t\t\t\t// The cursor should move to the end of the edit, not the end of the range provided by the extension\n\t\t\t\t// Inline Edit diffs (human readable) the suggestion from the extension so it already removes common suffix/prefix\n\t\t\t\t// Inline Completions does diff the suggestion so it may contain common suffix\n\t\t\t\tlet minimalEdits = edits;\n\t\t\t\tif (state.kind === 'ghostText') {\n\t\t\t\t\tminimalEdits = removeTextReplacementCommonSuffixPrefix(edits, this.textModel);\n\t\t\t\t}\n\t\t\t\tconst selections = getEndPositionsAfterApplying(minimalEdits).map(p => Selection.fromPositions(p));\n\n\t\t\t\tconst additionalEdits = completion.additionalTextEdits.map(e => new TextReplacement(Range.lift(e.range), e.text ?? ''));\n\t\t\t\tconst edit = TextEdit.fromParallelReplacementsUnsorted([...edits, ...additionalEdits]);\n\n\t\t\t\teditor.edit(edit, this._getMetadata(completion, this.textModel.getLanguageId()));\n\n\t\t\t\tif (completion.displayLocation === undefined) {\n\t\t\t\t\t// do not move the cursor when the completion is displayed in a different location\n\t\t\t\t\teditor.setSelections(state.kind === 'inlineEdit' ? selections.slice(-1) : selections, 'inlineCompletionAccept');\n\t\t\t\t}\n\n\t\t\t\tif (state.kind === 'inlineEdit' && !this._accessibilityService.isMotionReduced()) {\n\t\t\t\t\tconst editRanges = edit.getNewRanges();\n\t\t\t\t\tconst dec = this._store.add(new FadeoutDecoration(editor, editRanges, () => {\n\t\t\t\t\t\tthis._store.delete(dec);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidAccept.fire();\n\n\t\t\t// Reset before invoking the command, as the command might cause a follow up trigger (which we don't want to reset).\n\t\t\tthis.stop();\n\n\t\t\tif (completion.command) {\n\t\t\t\tawait this._commandService\n\t\t\t\t\t.executeCommand(completion.command.id, ...(completion.command.arguments || []))\n\t\t\t\t\t.then(undefined, onUnexpectedExternalError);\n\t\t\t}\n\n\t\t\tcompletion.reportEndOfLife({ kind: InlineCompletionEndOfLifeReasonKind.Accepted });\n\t\t} finally {\n\t\t\tcompletion.removeRef();\n\t\t\tthis._inAcceptFlow.set(true, undefined);\n\t\t\tthis._lastAcceptedInlineCompletionInfo = { textModelVersionIdAfter: this.textModel.getVersionId(), inlineCompletion: completion };\n\t\t}\n\t}\n\n\tpublic async acceptNextWord(): Promise<void> {\n\t\tawait this._acceptNext(this._editor, 'word', (pos, text) => {\n\t\t\tconst langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n\t\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId);\n\t\t\tconst wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n\n\t\t\tconst m1 = text.match(wordRegExp);\n\t\t\tlet acceptUntilIndexExclusive = 0;\n\t\t\tif (m1 && m1.index !== undefined) {\n\t\t\t\tif (m1.index === 0) {\n\t\t\t\t\tacceptUntilIndexExclusive = m1[0].length;\n\t\t\t\t} else {\n\t\t\t\t\tacceptUntilIndexExclusive = m1.index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tacceptUntilIndexExclusive = text.length;\n\t\t\t}\n\n\t\t\tconst wsRegExp = /\\s+/g;\n\t\t\tconst m2 = wsRegExp.exec(text);\n\t\t\tif (m2 && m2.index !== undefined) {\n\t\t\t\tif (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n\t\t\t\t\tacceptUntilIndexExclusive = m2.index + m2[0].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acceptUntilIndexExclusive;\n\t\t}, PartialAcceptTriggerKind.Word);\n\t}\n\n\tpublic async acceptNextLine(): Promise<void> {\n\t\tawait this._acceptNext(this._editor, 'line', (pos, text) => {\n\t\t\tconst m = text.match(/\\n/);\n\t\t\tif (m && m.index !== undefined) {\n\t\t\t\treturn m.index + 1;\n\t\t\t}\n\t\t\treturn text.length;\n\t\t}, PartialAcceptTriggerKind.Line);\n\t}\n\n\tprivate async _acceptNext(editor: ICodeEditor, type: 'word' | 'line', getAcceptUntilIndex: (position: Position, text: string) => number, kind: PartialAcceptTriggerKind): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.inlineCompletionState.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst ghostText = state.primaryGhostText;\n\t\tconst completion = state.inlineCompletion;\n\n\t\tif (completion.snippetInfo) {\n\t\t\t// not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n\t\t\tawait this.accept(editor);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstPart = ghostText.parts[0];\n\t\tconst ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n\t\tconst ghostTextVal = firstPart.text;\n\t\tconst acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n\t\tif (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n\t\t\tthis.accept(editor);\n\t\t\treturn;\n\t\t}\n\t\tconst partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n\n\t\tconst positions = this._positions.get();\n\t\tconst cursorPosition = positions[0];\n\n\t\t// Executing the edit might free the completion, so we have to hold a reference on it.\n\t\tcompletion.addRef();\n\t\ttry {\n\t\t\tthis._isAcceptingPartially = true;\n\t\t\ttry {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\tconst replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n\t\t\t\tconst newText = editor.getModel()!.getValueInRange(replaceRange) + partialGhostTextVal;\n\t\t\t\tconst primaryEdit = new TextReplacement(replaceRange, newText);\n\t\t\t\tconst edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)].filter(isDefined);\n\t\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\n\t\t\t\teditor.edit(TextEdit.fromParallelReplacementsUnsorted(edits), this._getMetadata(completion, type));\n\t\t\t\teditor.setSelections(selections, 'inlineCompletionPartialAccept');\n\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(editor.getPosition()!, ScrollType.Immediate);\n\t\t\t} finally {\n\t\t\t\tthis._isAcceptingPartially = false;\n\t\t\t}\n\n\t\t\tconst acceptedRange = Range.fromPositions(completion.editRange.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n\t\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\t\tconst text = editor.getModel()!.getValueInRange(acceptedRange, EndOfLinePreference.LF);\n\t\t\tconst acceptedLength = text.length;\n\t\t\tcompletion.reportPartialAccept(\n\t\t\t\tacceptedLength,\n\t\t\t\t{ kind, acceptedLength: acceptedLength },\n\t\t\t\t{ characters: acceptUntilIndexExclusive, ratio: acceptUntilIndexExclusive / ghostTextVal.length, count: 1 }\n\t\t\t);\n\n\t\t} finally {\n\t\t\tcompletion.removeRef();\n\t\t}\n\t}\n\n\tpublic handleSuggestAccepted(item: SuggestItemInfo) {\n\t\tconst itemEdit = singleTextRemoveCommonPrefix(item.getSingleTextEdit(), this.textModel);\n\t\tconst augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n\t\tif (!augmentedCompletion) { return; }\n\n\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\tconst alreadyAcceptedLength = this.textModel.getValueInRange(augmentedCompletion.completion.editRange, EndOfLinePreference.LF).length;\n\t\tconst acceptedLength = alreadyAcceptedLength + itemEdit.text.length;\n\n\t\taugmentedCompletion.completion.reportPartialAccept(itemEdit.text.length, {\n\t\t\tkind: PartialAcceptTriggerKind.Suggest,\n\t\t\tacceptedLength,\n\t\t}, {\n\t\t\tcharacters: itemEdit.text.length,\n\t\t\tcount: 1,\n\t\t\tratio: 1\n\t\t});\n\t}\n\n\tpublic extractReproSample(): Repro {\n\t\tconst value = this.textModel.getValue();\n\t\tconst item = this.state.get()?.inlineCompletion;\n\t\treturn {\n\t\t\tdocumentValue: value,\n\t\t\tinlineCompletion: item?.getSourceCompletion(),\n\t\t};\n\t}\n\n\tprivate readonly _jumpedToId = observableValue<undefined | string>(this, undefined);\n\tprivate readonly _inAcceptFlow = observableValue(this, false);\n\tpublic readonly inAcceptFlow: IObservable<boolean> = this._inAcceptFlow;\n\n\tpublic jump(): void {\n\t\tconst s = this.inlineEditState.get();\n\t\tif (!s) { return; }\n\n\t\ttransaction(tx => {\n\t\t\tthis._jumpedToId.set(s.inlineCompletion.semanticId, tx);\n\t\t\tthis.dontRefetchSignal.trigger(tx);\n\t\t\tconst targetRange = s.inlineCompletion.targetRange;\n\t\t\tconst targetPosition = targetRange.getStartPosition();\n\t\t\tthis._editor.setPosition(targetPosition, 'inlineCompletions.jump');\n\n\t\t\t// TODO: consider using view information to reveal it\n\t\t\tconst isSingleLineChange = targetRange.isSingleLine() && (s.inlineCompletion.displayLocation || !s.inlineCompletion.insertText.includes('\\n'));\n\t\t\tif (isSingleLineChange) {\n\t\t\t\tthis._editor.revealPosition(targetPosition);\n\t\t\t} else {\n\t\t\t\tconst revealRange = new Range(targetRange.startLineNumber - 1, 1, targetRange.endLineNumber + 1, 1);\n\t\t\t\tthis._editor.revealRange(revealRange, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tthis._editor.focus();\n\t\t});\n\t}\n\n\tpublic async handleInlineSuggestionShown(inlineCompletion: InlineSuggestionItem, viewKind: InlineCompletionViewKind, viewData: InlineCompletionViewData): Promise<void> {\n\t\tawait inlineCompletion.reportInlineEditShown(this._commandService, viewKind, viewData);\n\t}\n}\n\ninterface Repro {\n\tdocumentValue: string;\n\tinlineCompletion: InlineCompletion | undefined;\n}\n\nexport enum VersionIdChangeReason {\n\tUndo,\n\tRedo,\n\tAcceptWord,\n\tOther,\n}\n\nexport function getSecondaryEdits(textModel: ITextModel, positions: readonly Position[], primaryTextRepl: TextReplacement): (TextReplacement | undefined)[] {\n\tif (positions.length === 1) {\n\t\t// No secondary cursor positions\n\t\treturn [];\n\t}\n\tconst text = new TextModelText(textModel);\n\tconst textTransformer = text.getTransformer();\n\tconst primaryOffset = textTransformer.getOffset(positions[0]);\n\tconst secondaryOffsets = positions.slice(1).map(pos => textTransformer.getOffset(pos));\n\n\tprimaryTextRepl = primaryTextRepl.removeCommonPrefixAndSuffix(text);\n\tconst primaryStringRepl = textTransformer.getStringReplacement(primaryTextRepl);\n\n\tconst deltaFromOffsetToRangeStart = primaryStringRepl.replaceRange.start - primaryOffset;\n\tconst primaryContextRange = primaryStringRepl.replaceRange.join(OffsetRange.emptyAt(primaryOffset));\n\tconst primaryContextValue = text.getValueOfOffsetRange(primaryContextRange);\n\n\tconst replacements = secondaryOffsets.map(secondaryOffset => {\n\t\tconst newRangeStart = secondaryOffset + deltaFromOffsetToRangeStart;\n\t\tconst newRangeEnd = newRangeStart + primaryStringRepl.replaceRange.length;\n\t\tconst range = new OffsetRange(newRangeStart, newRangeEnd);\n\n\t\tconst contextRange = range.join(OffsetRange.emptyAt(secondaryOffset));\n\t\tconst contextValue = text.getValueOfOffsetRange(contextRange);\n\t\tif (contextValue !== primaryContextValue) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst stringRepl = new StringReplacement(range, primaryStringRepl.newText);\n\t\tconst repl = textTransformer.getTextReplacement(stringRepl);\n\t\treturn repl;\n\t}).filter(isDefined);\n\n\treturn replacements;\n}\n\nclass FadeoutDecoration extends Disposable {\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tranges: Range[],\n\t\tonDispose?: () => void,\n\t) {\n\t\tsuper();\n\n\t\tif (onDispose) {\n\t\t\tthis._register({ dispose: () => onDispose() });\n\t\t}\n\n\t\tthis._register(observableCodeEditor(editor).setDecorations(constObservable(ranges.map<IModelDeltaDecoration>(range => ({\n\t\t\trange: range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'animation',\n\t\t\t\tclassName: 'edits-fadeout-decoration',\n\t\t\t\tzIndex: 1,\n\t\t\t}\n\t\t})))));\n\n\t\tconst animation = new AnimatedValue(1, 0, 1000, easeOutCubic);\n\t\tconst val = new ObservableAnimatedValue(animation);\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst opacity = val.getValue(reader);\n\t\t\teditor.getContainerDomNode().style.setProperty('--animation-opacity', opacity.toString());\n\t\t\tif (animation.isFinished()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mapFindFirst } from '../../../../../base/common/arraysFind.js';\nimport { itemsEquals } from '../../../../../base/common/equals.js';\nimport { BugIndicatingError, onUnexpectedExternalError } from '../../../../../base/common/errors.js';\nimport { Emitter } from '../../../../../base/common/event.js';\nimport { Disposable } from '../../../../../base/common/lifecycle.js';\nimport { IObservable, IObservableWithChange, IReader, ITransaction, autorun, constObservable, derived, derivedHandleChanges, derivedOpts, mapObservableArrayCached, observableFromEvent, observableSignal, observableValue, recomputeInitiallyAndOnChange, subtransaction, transaction } from '../../../../../base/common/observable.js';\nimport { firstNonWhitespaceIndex } from '../../../../../base/common/strings.js';\nimport { isDefined } from '../../../../../base/common/types.js';\nimport { IAccessibilityService } from '../../../../../platform/accessibility/common/accessibility.js';\nimport { ICommandService } from '../../../../../platform/commands/common/commands.js';\nimport { IInstantiationService } from '../../../../../platform/instantiation/common/instantiation.js';\nimport { ICodeEditor } from '../../../../browser/editorBrowser.js';\nimport { observableCodeEditor } from '../../../../browser/observableCodeEditor.js';\nimport { EditorOption } from '../../../../common/config/editorOptions.js';\nimport { CursorColumns } from '../../../../common/core/cursorColumns.js';\nimport { LineRange } from '../../../../common/core/ranges/lineRange.js';\nimport { Position } from '../../../../common/core/position.js';\nimport { Range } from '../../../../common/core/range.js';\nimport { Selection } from '../../../../common/core/selection.js';\nimport { TextReplacement, TextEdit } from '../../../../common/core/edits/textEdit.js';\nimport { TextLength } from '../../../../common/core/text/textLength.js';\nimport { ScrollType } from '../../../../common/editorCommon.js';\nimport { InlineCompletionEndOfLifeReasonKind, InlineCompletion, InlineCompletionTriggerKind, PartialAcceptTriggerKind, InlineCompletionsProvider, InlineCompletionCommand, InlineCompletions } from '../../../../common/languages.js';\nimport { ILanguageConfigurationService } from '../../../../common/languages/languageConfigurationRegistry.js';\nimport { EndOfLinePreference, IModelDeltaDecoration, ITextModel } from '../../../../common/model.js';\nimport { TextModelText } from '../../../../common/model/textModelText.js';\nimport { IFeatureDebounceInformation } from '../../../../common/services/languageFeatureDebounce.js';\nimport { ILanguageFeaturesService } from '../../../../common/services/languageFeatures.js';\nimport { IModelContentChangedEvent } from '../../../../common/textModelEvents.js';\nimport { SnippetController2 } from '../../../snippet/browser/snippetController2.js';\nimport { getEndPositionsAfterApplying, removeTextReplacementCommonSuffixPrefix } from '../utils.js';\nimport { AnimatedValue, easeOutCubic, ObservableAnimatedValue } from './animation.js';\nimport { computeGhostText } from './computeGhostText.js';\nimport { GhostText, GhostTextOrReplacement, ghostTextOrReplacementEquals, ghostTextsOrReplacementsEqual } from './ghostText.js';\nimport { InlineCompletionsSource } from './inlineCompletionsSource.js';\nimport { InlineEdit } from './inlineEdit.js';\nimport { InlineCompletionItem, InlineEditItem, InlineSuggestionItem } from './inlineSuggestionItem.js';\nimport { InlineCompletionContextWithoutUuid, InlineCompletionEditorType, InlineSuggestRequestInfo } from './provideInlineCompletions.js';\nimport { singleTextEditAugments, singleTextRemoveCommonPrefix } from './singleTextEditHelpers.js';\nimport { SuggestItemInfo } from './suggestWidgetAdapter.js';\nimport { TextModelEditSource, EditSources } from '../../../../common/textModelEditSource.js';\nimport { ICodeEditorService } from '../../../../browser/services/codeEditorService.js';\nimport { InlineCompletionViewData, InlineCompletionViewKind } from '../view/inlineEdits/inlineEditsViewInterface.js';\nimport { IInlineCompletionsService } from '../../../../browser/services/inlineCompletionsService.js';\nimport { TypingInterval } from './typingSpeed.js';\nimport { StringReplacement } from '../../../../common/core/edits/stringEdit.js';\nimport { OffsetRange } from '../../../../common/core/ranges/offsetRange.js';\nimport { URI } from '../../../../../base/common/uri.js';\n\nexport class InlineCompletionsModel extends Disposable {\n\tprivate readonly _source;\n\tprivate readonly _isActive = observableValue<boolean>(this, false);\n\tprivate readonly _onlyRequestInlineEditsSignal = observableSignal(this);\n\tprivate readonly _forceUpdateExplicitlySignal = observableSignal(this);\n\tprivate readonly _noDelaySignal = observableSignal(this);\n\n\tprivate readonly _fetchSpecificProviderSignal = observableSignal<InlineCompletionsProvider | undefined>(this);\n\n\t// We use a semantic id to keep the same inline completion selected even if the provider reorders the completions.\n\tprivate readonly _selectedInlineCompletionId = observableValue<string | undefined>(this, undefined);\n\tpublic readonly primaryPosition = derived(this, reader => this._positions.read(reader)[0] ?? new Position(1, 1));\n\n\tprivate _isAcceptingPartially = false;\n\tprivate readonly _appearedInsideViewport = derived<boolean>(this, reader => {\n\t\tconst state = this.state.read(reader);\n\t\tif (!state || !state.inlineCompletion) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst targetRange = state.inlineCompletion.targetRange;\n\t\tconst visibleRanges = this._editorObs.editor.getVisibleRanges();\n\t\tif (visibleRanges.length < 1) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst viewportRange = new Range(visibleRanges[0].startLineNumber, visibleRanges[0].startColumn, visibleRanges[visibleRanges.length - 1].endLineNumber, visibleRanges[visibleRanges.length - 1].endColumn);\n\t\treturn viewportRange.containsRange(targetRange);\n\t});\n\tpublic get isAcceptingPartially() { return this._isAcceptingPartially; }\n\n\tprivate readonly _onDidAccept = new Emitter<void>();\n\tpublic readonly onDidAccept = this._onDidAccept.event;\n\n\tprivate readonly _editorObs;\n\n\tprivate readonly _typing: TypingInterval;\n\n\tprivate readonly _suggestPreviewEnabled;\n\tprivate readonly _suggestPreviewMode;\n\tprivate readonly _inlineSuggestMode;\n\tprivate readonly _suppressedInlineCompletionGroupIds;\n\tprivate readonly _inlineEditsEnabled;\n\tprivate readonly _inlineEditsShowCollapsedEnabled;\n\tprivate readonly _triggerCommandOnProviderChange;\n\tprivate readonly _minShowDelay;\n\tprivate readonly _showOnSuggestConflict;\n\n\tconstructor(\n\t\tpublic readonly textModel: ITextModel,\n\t\tprivate readonly _selectedSuggestItem: IObservable<SuggestItemInfo | undefined>,\n\t\tpublic readonly _textModelVersionId: IObservableWithChange<number | null, IModelContentChangedEvent | undefined>,\n\t\tprivate readonly _positions: IObservable<readonly Position[]>,\n\t\tprivate readonly _debounceValue: IFeatureDebounceInformation,\n\t\tprivate readonly _enabled: IObservable<boolean>,\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ICodeEditorService private readonly _codeEditorService: ICodeEditorService,\n\t\t@IInlineCompletionsService private readonly _inlineCompletionsService: IInlineCompletionsService\n\t) {\n\t\tsuper();\n\t\tthis._source = this._register(this._instantiationService.createInstance(InlineCompletionsSource, this.textModel, this._textModelVersionId, this._debounceValue, this.primaryPosition));\n\t\tthis.lastTriggerKind = this._source.inlineCompletions.map(this, v => v?.request?.context.triggerKind);\n\n\t\tthis._editorObs = observableCodeEditor(this._editor);\n\n\t\tconst suggest = this._editorObs.getOption(EditorOption.suggest);\n\t\tthis._suggestPreviewEnabled = suggest.map(v => v.preview);\n\t\tthis._suggestPreviewMode = suggest.map(v => v.previewMode);\n\n\t\tconst inlineSuggest = this._editorObs.getOption(EditorOption.inlineSuggest);\n\t\tthis._inlineSuggestMode = inlineSuggest.map(v => v.mode);\n\t\tthis._suppressedInlineCompletionGroupIds = inlineSuggest.map(v => new Set(v.experimental.suppressInlineSuggestions.split(',')));\n\t\tthis._inlineEditsEnabled = inlineSuggest.map(v => !!v.edits.enabled);\n\t\tthis._inlineEditsShowCollapsedEnabled = inlineSuggest.map(s => s.edits.showCollapsed);\n\t\tthis._triggerCommandOnProviderChange = inlineSuggest.map(s => s.triggerCommandOnProviderChange);\n\t\tthis._minShowDelay = inlineSuggest.map(s => s.minShowDelay);\n\t\tthis._showOnSuggestConflict = inlineSuggest.map(s => s.experimental.showOnSuggestConflict);\n\n\t\tthis._typing = this._register(new TypingInterval(this.textModel));\n\n\t\tthis._register(this._inlineCompletionsService.onDidChangeIsSnoozing((isSnoozing) => {\n\t\t\tif (isSnoozing) {\n\t\t\t\tthis.stop();\n\t\t\t}\n\t\t}));\n\n\t\t{ // Determine editor type\n\t\t\tconst isNotebook = this.textModel.uri.scheme === 'vscode-notebook-cell';\n\t\t\tconst [diffEditor] = this._codeEditorService.listDiffEditors()\n\t\t\t\t.filter(d =>\n\t\t\t\t\td.getOriginalEditor().getId() === this._editor.getId() ||\n\t\t\t\t\td.getModifiedEditor().getId() === this._editor.getId());\n\n\t\t\tthis.isInDiffEditor = !!diffEditor;\n\t\t\tthis.editorType = isNotebook ? InlineCompletionEditorType.Notebook\n\t\t\t\t: this.isInDiffEditor ? InlineCompletionEditorType.DiffEditor\n\t\t\t\t\t: InlineCompletionEditorType.TextEditor;\n\t\t}\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this.state, (s) => {\n\t\t\tif (s && s.inlineCompletion) {\n\t\t\t\tthis._inlineCompletionsService.reportNewCompletion(s.inlineCompletion.requestUuid);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(recomputeInitiallyAndOnChange(this._fetchInlineCompletionsPromise));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tthis._editorObs.versionId.read(reader);\n\t\t\tthis._inAcceptFlow.set(false, undefined);\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst jumpToReset = this.state.map((s, reader) => !s || s.kind === 'inlineEdit' && !s.cursorAtInlineEdit.read(reader)).read(reader);\n\t\t\tif (jumpToReset) {\n\t\t\t\tthis._jumpedToId.set(undefined, undefined);\n\t\t\t}\n\t\t}));\n\n\t\tconst inlineEditSemanticId = this.inlineEditState.map(s => s?.inlineCompletion.semanticId);\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst id = inlineEditSemanticId.read(reader);\n\t\t\tif (id) {\n\t\t\t\tthis._editor.pushUndoStop();\n\t\t\t\tthis._lastShownInlineCompletionInfo = {\n\t\t\t\t\talternateTextModelVersionId: this.textModel.getAlternativeVersionId(),\n\t\t\t\t\tinlineCompletion: this.state.get()!.inlineCompletion!,\n\t\t\t\t};\n\t\t\t}\n\t\t}));\n\n\t\t// TODO: should use getAvailableProviders and update on _suppressedInlineCompletionGroupIds change\n\t\tconst inlineCompletionProviders = observableFromEvent(this._languageFeaturesService.inlineCompletionsProvider.onDidChange, () => this._languageFeaturesService.inlineCompletionsProvider.all(textModel));\n\t\tmapObservableArrayCached(this, inlineCompletionProviders, (provider, store) => {\n\t\t\tif (!provider.onDidChangeInlineCompletions) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstore.add(provider.onDidChangeInlineCompletions(() => {\n\t\t\t\tif (!this._enabled.get()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Only update the active editor\n\t\t\t\tconst activeEditor = this._codeEditorService.getFocusedCodeEditor() || this._codeEditorService.getActiveCodeEditor();\n\t\t\t\tif (activeEditor !== this._editor) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._triggerCommandOnProviderChange.get()) {\n\t\t\t\t\t// TODO@hediet remove this and always do the else branch.\n\t\t\t\t\tthis.trigger(undefined, { onlyFetchInlineEdits: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\t// If there is an active suggestion from a different provider, we ignore the update\n\t\t\t\tconst activeState = this.state.get();\n\t\t\t\tif (activeState && (activeState.inlineCompletion || activeState.edits) && activeState.inlineCompletion?.source.provider !== provider) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\tthis._fetchSpecificProviderSignal.trigger(tx, provider);\n\t\t\t\t\tthis.trigger(tx);\n\t\t\t\t});\n\n\t\t\t}));\n\t\t}).recomputeInitiallyAndOnChange(this._store);\n\n\t\tthis._didUndoInlineEdits.recomputeInitiallyAndOnChange(this._store);\n\t}\n\n\tprivate _lastShownInlineCompletionInfo: { alternateTextModelVersionId: number; /* already freed! */ inlineCompletion: InlineSuggestionItem } | undefined = undefined;\n\tprivate _lastAcceptedInlineCompletionInfo: { textModelVersionIdAfter: number; /* already freed! */ inlineCompletion: InlineSuggestionItem } | undefined = undefined;\n\tprivate readonly _didUndoInlineEdits = derivedHandleChanges({\n\t\towner: this,\n\t\tchangeTracker: {\n\t\t\tcreateChangeSummary: () => ({ didUndo: false }),\n\t\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t\tchangeSummary.didUndo = ctx.didChange(this._textModelVersionId) && !!ctx.change?.isUndoing;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}, (reader, changeSummary) => {\n\t\tconst versionId = this._textModelVersionId.read(reader);\n\t\tif (versionId !== null\n\t\t\t&& this._lastAcceptedInlineCompletionInfo\n\t\t\t&& this._lastAcceptedInlineCompletionInfo.textModelVersionIdAfter === versionId - 1\n\t\t\t&& this._lastAcceptedInlineCompletionInfo.inlineCompletion.isInlineEdit\n\t\t\t&& changeSummary.didUndo\n\t\t) {\n\t\t\tthis._lastAcceptedInlineCompletionInfo = undefined;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n\n\tpublic getIndentationInfo(reader: IReader) {\n\t\tlet startsWithIndentation = false;\n\t\tlet startsWithIndentationLessThanTabSize = true;\n\t\tconst ghostText = this?.primaryGhostText.read(reader);\n\t\tif (!!this?._selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\tconst firstLine = lines[0].line;\n\n\t\t\tconst indentationEndColumn = this.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\tif (inIndentation) {\n\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t}\n\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\tconst tabSize = this.textModel.getOptions().tabSize;\n\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tstartsWithIndentation,\n\t\t\tstartsWithIndentationLessThanTabSize,\n\t\t};\n\t}\n\n\tprivate readonly _preserveCurrentCompletionReasons = new Set([\n\t\tVersionIdChangeReason.Redo,\n\t\tVersionIdChangeReason.Undo,\n\t\tVersionIdChangeReason.AcceptWord,\n\t]);\n\n\tprivate _getReason(e: IModelContentChangedEvent | undefined): VersionIdChangeReason {\n\t\tif (e?.isUndoing) { return VersionIdChangeReason.Undo; }\n\t\tif (e?.isRedoing) { return VersionIdChangeReason.Redo; }\n\t\tif (this.isAcceptingPartially) { return VersionIdChangeReason.AcceptWord; }\n\t\treturn VersionIdChangeReason.Other;\n\t}\n\n\tpublic readonly dontRefetchSignal = observableSignal(this);\n\n\tprivate readonly _fetchInlineCompletionsPromise = derivedHandleChanges({\n\t\towner: this,\n\t\tchangeTracker: {\n\t\t\tcreateChangeSummary: () => ({\n\t\t\t\tdontRefetch: false,\n\t\t\t\tpreserveCurrentCompletion: false,\n\t\t\t\tinlineCompletionTriggerKind: InlineCompletionTriggerKind.Automatic,\n\t\t\t\tonlyRequestInlineEdits: false,\n\t\t\t\tshouldDebounce: true,\n\t\t\t\tprovider: undefined as InlineCompletionsProvider | undefined,\n\t\t\t\ttextChange: false,\n\t\t\t\tchangeReason: '',\n\t\t\t}),\n\t\t\thandleChange: (ctx, changeSummary) => {\n\t\t\t\t/** @description fetch inline completions */\n\t\t\t\tif (ctx.didChange(this._textModelVersionId)) {\n\t\t\t\t\tif (this._preserveCurrentCompletionReasons.has(this._getReason(ctx.change))) {\n\t\t\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t\t\t}\n\t\t\t\t\tconst detailedReasons = ctx.change?.detailedReasons ?? [];\n\t\t\t\t\tchangeSummary.changeReason = detailedReasons.length > 0 ? detailedReasons[0].getType() : '';\n\t\t\t\t\tchangeSummary.textChange = true;\n\t\t\t\t} else if (ctx.didChange(this._forceUpdateExplicitlySignal)) {\n\t\t\t\t\tchangeSummary.preserveCurrentCompletion = true;\n\t\t\t\t\tchangeSummary.inlineCompletionTriggerKind = InlineCompletionTriggerKind.Explicit;\n\t\t\t\t} else if (ctx.didChange(this.dontRefetchSignal)) {\n\t\t\t\t\tchangeSummary.dontRefetch = true;\n\t\t\t\t} else if (ctx.didChange(this._onlyRequestInlineEditsSignal)) {\n\t\t\t\t\tchangeSummary.onlyRequestInlineEdits = true;\n\t\t\t\t} else if (ctx.didChange(this._fetchSpecificProviderSignal)) {\n\t\t\t\t\tchangeSummary.provider = ctx.change;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t}, (reader, changeSummary) => {\n\t\tthis._source.clearOperationOnTextModelChange.read(reader); // Make sure the clear operation runs before the fetch operation\n\t\tthis._noDelaySignal.read(reader);\n\t\tthis.dontRefetchSignal.read(reader);\n\t\tthis._onlyRequestInlineEditsSignal.read(reader);\n\t\tthis._forceUpdateExplicitlySignal.read(reader);\n\t\tthis._fetchSpecificProviderSignal.read(reader);\n\t\tconst shouldUpdate = ((this._enabled.read(reader) && this._selectedSuggestItem.read(reader)) || this._isActive.read(reader))\n\t\t\t&& (!this._inlineCompletionsService.isSnoozing() || changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit);\n\t\tif (!shouldUpdate) {\n\t\t\tthis._source.cancelUpdate();\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._textModelVersionId.read(reader); // Refetch on text change\n\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.get();\n\t\tlet suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (this._shouldShowOnSuggestConflict.get()) {\n\t\t\tsuggestItem = undefined;\n\t\t}\n\t\tif (suggestWidgetInlineCompletions && !suggestItem) {\n\t\t\tthis._source.seedInlineCompletionsWithSuggestWidget();\n\t\t}\n\n\t\tif (changeSummary.dontRefetch) {\n\t\t\treturn Promise.resolve(true);\n\t\t}\n\n\t\tif (this._didUndoInlineEdits.read(reader) && changeSummary.inlineCompletionTriggerKind !== InlineCompletionTriggerKind.Explicit) {\n\t\t\ttransaction(tx => {\n\t\t\t\tthis._source.clear(tx);\n\t\t\t});\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet reason: string = '';\n\t\tif (changeSummary.provider) {\n\t\t\treason += 'providerOnDidChange';\n\t\t} else if (changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit) {\n\t\t\treason += 'explicit';\n\t\t}\n\t\tif (changeSummary.changeReason) {\n\t\t\treason += reason.length > 0 ? `:${changeSummary.changeReason}` : changeSummary.changeReason;\n\t\t}\n\n\t\tconst typingInterval = this._typing.getTypingInterval();\n\t\tconst requestInfo: InlineSuggestRequestInfo = {\n\t\t\teditorType: this.editorType,\n\t\t\tstartTime: Date.now(),\n\t\t\tlanguageId: this.textModel.getLanguageId(),\n\t\t\treason,\n\t\t\ttypingInterval: typingInterval.averageInterval,\n\t\t\ttypingIntervalCharacterCount: typingInterval.characterCount,\n\t\t};\n\n\t\tlet context: InlineCompletionContextWithoutUuid = {\n\t\t\ttriggerKind: changeSummary.inlineCompletionTriggerKind,\n\t\t\tselectedSuggestionInfo: suggestItem?.toSelectedSuggestionInfo(),\n\t\t\tincludeInlineCompletions: !changeSummary.onlyRequestInlineEdits,\n\t\t\tincludeInlineEdits: this._inlineEditsEnabled.read(reader),\n\t\t\trequestIssuedDateTime: requestInfo.startTime,\n\t\t\tearliestShownDateTime: requestInfo.startTime + (changeSummary.inlineCompletionTriggerKind === InlineCompletionTriggerKind.Explicit || this.inAcceptFlow.get() ? 0 : this._minShowDelay.get()),\n\t\t};\n\n\t\tif (context.triggerKind === InlineCompletionTriggerKind.Automatic && changeSummary.textChange) {\n\t\t\tif (this.textModel.getAlternativeVersionId() === this._lastShownInlineCompletionInfo?.alternateTextModelVersionId) {\n\t\t\t\t// When undoing back to a version where an inline edit/completion was shown,\n\t\t\t\t// we want to show an inline edit (or completion) again if it was originally an inline edit (or completion).\n\t\t\t\tcontext = {\n\t\t\t\t\t...context,\n\t\t\t\t\tincludeInlineCompletions: !this._lastShownInlineCompletionInfo.inlineCompletion.isInlineEdit,\n\t\t\t\t\tincludeInlineEdits: this._lastShownInlineCompletionInfo.inlineCompletion.isInlineEdit,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst itemToPreserveCandidate = this.selectedInlineCompletion.get() ?? this._inlineCompletionItems.get()?.inlineEdit;\n\t\tconst itemToPreserve = changeSummary.preserveCurrentCompletion || itemToPreserveCandidate?.forwardStable\n\t\t\t? itemToPreserveCandidate : undefined;\n\t\tconst userJumpedToActiveCompletion = this._jumpedToId.map(jumpedTo => !!jumpedTo && jumpedTo === this._inlineCompletionItems.get()?.inlineEdit?.semanticId);\n\n\t\tconst providers = changeSummary.provider\n\t\t\t? { providers: [changeSummary.provider], label: 'single:' + changeSummary.provider.providerId?.toString() }\n\t\t\t: { providers: this._languageFeaturesService.inlineCompletionsProvider.all(this.textModel), label: undefined }; // TODO: should use inlineCompletionProviders\n\t\tconst availableProviders = this.getAvailableProviders(providers.providers);\n\n\t\treturn this._source.fetch(availableProviders, providers.label, context, itemToPreserve?.identity, changeSummary.shouldDebounce, userJumpedToActiveCompletion, requestInfo);\n\t});\n\n\t// TODO: This is not an ideal implementation of excludesGroupIds, however as this is currently still behind proposed API\n\t// and due to the time constraints, we are using a simplified approach\n\tprivate getAvailableProviders(providers: InlineCompletionsProvider<InlineCompletions<InlineCompletion>>[]): InlineCompletionsProvider[] {\n\t\tconst suppressedProviderGroupIds = this._suppressedInlineCompletionGroupIds.get();\n\t\tconst unsuppressedProviders = providers.filter(provider => !(provider.groupId && suppressedProviderGroupIds.has(provider.groupId)));\n\n\t\tconst excludedGroupIds = new Set<string>();\n\t\tfor (const provider of unsuppressedProviders) {\n\t\t\tprovider.excludesGroupIds?.forEach(p => excludedGroupIds.add(p));\n\t\t}\n\n\t\tconst availableProviders: InlineCompletionsProvider<InlineCompletions<InlineCompletion>>[] = [];\n\t\tfor (const provider of unsuppressedProviders) {\n\t\t\tif (provider.groupId && excludedGroupIds.has(provider.groupId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tavailableProviders.push(provider);\n\t\t}\n\n\t\treturn availableProviders;\n\t}\n\n\tpublic async trigger(tx?: ITransaction, options?: { onlyFetchInlineEdits?: boolean; noDelay?: boolean }): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (options?.onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tif (options?.noDelay) {\n\t\t\t\tthis._noDelaySignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic async triggerExplicitly(tx?: ITransaction, onlyFetchInlineEdits: boolean = false): Promise<void> {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (onlyFetchInlineEdits) {\n\t\t\t\tthis._onlyRequestInlineEditsSignal.trigger(tx);\n\t\t\t}\n\t\t\tthis._isActive.set(true, tx);\n\t\t\tthis._inAcceptFlow.set(true, tx);\n\t\t\tthis._forceUpdateExplicitlySignal.trigger(tx);\n\t\t});\n\t\tawait this._fetchInlineCompletionsPromise.get();\n\t}\n\n\tpublic stop(stopReason: 'explicitCancel' | 'automatic' = 'automatic', tx?: ITransaction): void {\n\t\tsubtransaction(tx, tx => {\n\t\t\tif (stopReason === 'explicitCancel') {\n\t\t\t\tconst inlineCompletion = this.state.get()?.inlineCompletion;\n\t\t\t\tif (inlineCompletion) {\n\t\t\t\t\tinlineCompletion.reportEndOfLife({ kind: InlineCompletionEndOfLifeReasonKind.Rejected });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isActive.set(false, tx);\n\t\t\tthis._source.clear(tx);\n\t\t});\n\t}\n\n\tprivate readonly _inlineCompletionItems = derivedOpts({ owner: this }, reader => {\n\t\tconst c = this._source.inlineCompletions.read(reader);\n\t\tif (!c) { return undefined; }\n\t\tconst cursorPosition = this.primaryPosition.read(reader);\n\t\tlet inlineEdit: InlineEditItem | undefined = undefined;\n\t\tconst visibleCompletions: InlineCompletionItem[] = [];\n\t\tfor (const completion of c.inlineCompletions) {\n\t\t\tif (!completion.isInlineEdit) {\n\t\t\t\tif (completion.isVisible(this.textModel, cursorPosition)) {\n\t\t\t\t\tvisibleCompletions.push(completion);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinlineEdit = completion;\n\t\t\t}\n\t\t}\n\n\t\tif (visibleCompletions.length !== 0) {\n\t\t\t// Don't show the inline edit if there is a visible completion\n\t\t\tinlineEdit = undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tinlineCompletions: visibleCompletions,\n\t\t\tinlineEdit,\n\t\t};\n\t});\n\n\tprivate readonly _filteredInlineCompletionItems = derivedOpts({ owner: this, equalsFn: itemsEquals() }, reader => {\n\t\tconst c = this._inlineCompletionItems.read(reader);\n\t\treturn c?.inlineCompletions ?? [];\n\t});\n\n\tpublic readonly selectedInlineCompletionIndex = derived<number>(this, (reader) => {\n\t\tconst selectedInlineCompletionId = this._selectedInlineCompletionId.read(reader);\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this._selectedInlineCompletionId === undefined ? -1\n\t\t\t: filteredCompletions.findIndex(v => v.semanticId === selectedInlineCompletionId);\n\t\tif (idx === -1) {\n\t\t\t// Reset the selection so that the selection does not jump back when it appears again\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t\treturn 0;\n\t\t}\n\t\treturn idx;\n\t});\n\n\tpublic readonly selectedInlineCompletion = derived<InlineCompletionItem | undefined>(this, (reader) => {\n\t\tconst filteredCompletions = this._filteredInlineCompletionItems.read(reader);\n\t\tconst idx = this.selectedInlineCompletionIndex.read(reader);\n\t\treturn filteredCompletions[idx];\n\t});\n\n\tpublic readonly activeCommands = derivedOpts<InlineCompletionCommand[]>({ owner: this, equalsFn: itemsEquals() },\n\t\tr => this.selectedInlineCompletion.read(r)?.source.inlineSuggestions.commands ?? []\n\t);\n\n\tpublic readonly lastTriggerKind: IObservable<InlineCompletionTriggerKind | undefined>;\n\n\tpublic readonly inlineCompletionsCount = derived<number | undefined>(this, reader => {\n\t\tif (this.lastTriggerKind.read(reader) === InlineCompletionTriggerKind.Explicit) {\n\t\t\treturn this._filteredInlineCompletionItems.read(reader).length;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t});\n\n\tprivate readonly _hasVisiblePeekWidgets = derived(this, reader => this._editorObs.openedPeekWidgets.read(reader) > 0);\n\n\tprivate readonly _shouldShowOnSuggestConflict = derived(this, reader => {\n\t\tconst showOnSuggestConflict = this._showOnSuggestConflict.read(reader);\n\t\tif (showOnSuggestConflict !== 'never') {\n\t\t\tconst hasInlineCompletion = !!this.selectedInlineCompletion.read(reader);\n\t\t\tif (hasInlineCompletion) {\n\t\t\t\tconst item = this._selectedSuggestItem.read(reader);\n\t\t\t\tif (!item) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (showOnSuggestConflict === 'whenSuggestListIsIncomplete') {\n\t\t\t\t\treturn item.listIncomplete;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t});\n\n\tpublic readonly state = derivedOpts<{\n\t\tkind: 'ghostText';\n\t\tedits: readonly TextReplacement[];\n\t\tprimaryGhostText: GhostTextOrReplacement;\n\t\tghostTexts: readonly GhostTextOrReplacement[];\n\t\tsuggestItem: SuggestItemInfo | undefined;\n\t\tinlineCompletion: InlineCompletionItem | undefined;\n\t} | {\n\t\tkind: 'inlineEdit';\n\t\tedits: readonly TextReplacement[];\n\t\tinlineEdit: InlineEdit;\n\t\tinlineCompletion: InlineEditItem;\n\t\tcursorAtInlineEdit: IObservable<boolean>;\n\t\tnextEditUri: URI | undefined;\n\t} | undefined>({\n\t\towner: this,\n\t\tequalsFn: (a, b) => {\n\t\t\tif (!a || !b) { return a === b; }\n\n\t\t\tif (a.kind === 'ghostText' && b.kind === 'ghostText') {\n\t\t\t\treturn ghostTextsOrReplacementsEqual(a.ghostTexts, b.ghostTexts)\n\t\t\t\t\t&& a.inlineCompletion === b.inlineCompletion\n\t\t\t\t\t&& a.suggestItem === b.suggestItem;\n\t\t\t} else if (a.kind === 'inlineEdit' && b.kind === 'inlineEdit') {\n\t\t\t\treturn a.inlineEdit.equals(b.inlineEdit);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}, (reader) => {\n\t\tconst model = this.textModel;\n\n\t\tconst item = this._inlineCompletionItems.read(reader);\n\t\tconst inlineEditResult = item?.inlineEdit;\n\t\tif (inlineEditResult) {\n\t\t\tif (this._hasVisiblePeekWidgets.read(reader)) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tlet edit = inlineEditResult.getSingleTextEdit();\n\t\t\tedit = singleTextRemoveCommonPrefix(edit, model);\n\n\t\t\tconst cursorAtInlineEdit = this.primaryPosition.map(cursorPos => LineRange.fromRangeInclusive(inlineEditResult.targetRange).addMargin(1, 1).contains(cursorPos.lineNumber));\n\n\t\t\tconst commands = inlineEditResult.source.inlineSuggestions.commands;\n\t\t\tconst inlineEdit = new InlineEdit(edit, commands ?? [], inlineEditResult);\n\n\t\t\tconst edits = inlineEditResult.updatedEdit;\n\t\t\tconst e = edits ? TextEdit.fromStringEdit(edits, new TextModelText(this.textModel)).replacements : [edit];\n\t\t\tconst nextEditUri = (item.inlineEdit?.command?.id === 'vscode.open' || item.inlineEdit?.command?.id === '_workbench.open') &&\n\t\t\t\titem.inlineEdit?.command.arguments?.length ? URI.from(item.inlineEdit?.command.arguments[0]) : undefined;\n\t\t\treturn { kind: 'inlineEdit', inlineEdit, inlineCompletion: inlineEditResult, edits: e, cursorAtInlineEdit, nextEditUri };\n\t\t}\n\n\t\tconst suggestItem = this._selectedSuggestItem.read(reader);\n\t\tif (!this._shouldShowOnSuggestConflict.read(reader) && suggestItem) {\n\t\t\tconst suggestCompletionEdit = singleTextRemoveCommonPrefix(suggestItem.getSingleTextEdit(), model);\n\t\t\tconst augmentation = this._computeAugmentation(suggestCompletionEdit, reader);\n\n\t\t\tconst isSuggestionPreviewEnabled = this._suggestPreviewEnabled.read(reader);\n\t\t\tif (!isSuggestionPreviewEnabled && !augmentation) { return undefined; }\n\n\t\t\tconst fullEdit = augmentation?.edit ?? suggestCompletionEdit;\n\t\t\tconst fullEditPreviewLength = augmentation ? augmentation.edit.text.length - suggestCompletionEdit.text.length : 0;\n\n\t\t\tconst mode = this._suggestPreviewMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst allPotentialEdits = [fullEdit, ...getSecondaryEdits(this.textModel, positions, fullEdit)];\n\t\t\tconst validEditsAndGhostTexts = allPotentialEdits\n\t\t\t\t.map((edit, idx) => ({ edit, ghostText: edit ? computeGhostText(edit, model, mode, positions[idx], fullEditPreviewLength) : undefined }))\n\t\t\t\t.filter(({ edit, ghostText }) => edit !== undefined && ghostText !== undefined);\n\t\t\tconst edits = validEditsAndGhostTexts.map(({ edit }) => edit!);\n\t\t\tconst ghostTexts = validEditsAndGhostTexts.map(({ ghostText }) => ghostText!);\n\t\t\tconst primaryGhostText = ghostTexts[0] ?? new GhostText(fullEdit.range.endLineNumber, []);\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText, ghostTexts, inlineCompletion: augmentation?.completion, suggestItem };\n\t\t} else {\n\t\t\tif (!this._isActive.read(reader)) { return undefined; }\n\t\t\tconst inlineCompletion = this.selectedInlineCompletion.read(reader);\n\t\t\tif (!inlineCompletion) { return undefined; }\n\n\t\t\tconst replacement = inlineCompletion.getSingleTextEdit();\n\t\t\tconst mode = this._inlineSuggestMode.read(reader);\n\t\t\tconst positions = this._positions.read(reader);\n\t\t\tconst allPotentialEdits = [replacement, ...getSecondaryEdits(this.textModel, positions, replacement)];\n\t\t\tconst validEditsAndGhostTexts = allPotentialEdits\n\t\t\t\t.map((edit, idx) => ({ edit, ghostText: edit ? computeGhostText(edit, model, mode, positions[idx], 0) : undefined }))\n\t\t\t\t.filter(({ edit, ghostText }) => edit !== undefined && ghostText !== undefined);\n\t\t\tconst edits = validEditsAndGhostTexts.map(({ edit }) => edit!);\n\t\t\tconst ghostTexts = validEditsAndGhostTexts.map(({ ghostText }) => ghostText!);\n\t\t\tif (!ghostTexts[0]) { return undefined; }\n\t\t\treturn { kind: 'ghostText', edits, primaryGhostText: ghostTexts[0], ghostTexts, inlineCompletion, suggestItem: undefined };\n\t\t}\n\t});\n\n\tpublic readonly inlineCompletionState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'ghostText') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._editorObs.inComposition.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditState = derived(this, reader => {\n\t\tconst s = this.state.read(reader);\n\t\tif (!s || s.kind !== 'inlineEdit') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn s;\n\t});\n\n\tpublic readonly inlineEditAvailable = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\treturn !!s;\n\t});\n\n\tprivate _computeAugmentation(suggestCompletion: TextReplacement, reader: IReader | undefined) {\n\t\tconst model = this.textModel;\n\t\tconst suggestWidgetInlineCompletions = this._source.suggestWidgetInlineCompletions.read(reader);\n\t\tconst candidateInlineCompletions = suggestWidgetInlineCompletions\n\t\t\t? suggestWidgetInlineCompletions.inlineCompletions.filter(c => !c.isInlineEdit)\n\t\t\t: [this.selectedInlineCompletion.read(reader)].filter(isDefined);\n\n\t\tconst augmentedCompletion = mapFindFirst(candidateInlineCompletions, completion => {\n\t\t\tlet r = completion.getSingleTextEdit();\n\t\t\tr = singleTextRemoveCommonPrefix(\n\t\t\t\tr,\n\t\t\t\tmodel,\n\t\t\t\tRange.fromPositions(r.range.getStartPosition(), suggestCompletion.range.getEndPosition())\n\t\t\t);\n\t\t\treturn singleTextEditAugments(r, suggestCompletion) ? { completion, edit: r } : undefined;\n\t\t});\n\n\t\treturn augmentedCompletion;\n\t}\n\n\tpublic readonly warning = derived(this, reader => {\n\t\treturn this.inlineCompletionState.read(reader)?.inlineCompletion?.warning;\n\t});\n\n\tpublic readonly ghostTexts = derivedOpts({ owner: this, equalsFn: ghostTextsOrReplacementsEqual }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v.ghostTexts;\n\t});\n\n\tpublic readonly primaryGhostText = derivedOpts({ owner: this, equalsFn: ghostTextOrReplacementEquals }, reader => {\n\t\tconst v = this.inlineCompletionState.read(reader);\n\t\tif (!v) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn v?.primaryGhostText;\n\t});\n\n\tpublic readonly showCollapsed = derived<boolean>(this, reader => {\n\t\tconst state = this.state.read(reader);\n\t\tif (!state || state.kind !== 'inlineEdit') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (state.inlineCompletion.displayLocation) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst isCurrentModelVersion = state.inlineCompletion.updatedEditModelVersion === this._textModelVersionId.read(reader);\n\t\treturn (this._inlineEditsShowCollapsedEnabled.read(reader) || !isCurrentModelVersion)\n\t\t\t&& this._jumpedToId.read(reader) !== state.inlineCompletion.semanticId\n\t\t\t&& !this._inAcceptFlow.read(reader);\n\t});\n\n\tprivate readonly _tabShouldIndent = derived(this, reader => {\n\t\tif (this._inAcceptFlow.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction isMultiLine(range: Range): boolean {\n\t\t\treturn range.startLineNumber !== range.endLineNumber;\n\t\t}\n\n\t\tfunction getNonIndentationRange(model: ITextModel, lineNumber: number): Range {\n\t\t\tconst columnStart = model.getLineIndentColumn(lineNumber);\n\t\t\tconst lastNonWsColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\n\t\t\tconst columnEnd = Math.max(lastNonWsColumn, columnStart);\n\t\t\treturn new Range(lineNumber, columnStart, lineNumber, columnEnd);\n\t\t}\n\n\t\tconst selections = this._editorObs.selections.read(reader);\n\t\treturn selections?.some(s => {\n\t\t\tif (s.isEmpty()) {\n\t\t\t\treturn this.textModel.getLineLength(s.startLineNumber) === 0;\n\t\t\t} else {\n\t\t\t\treturn isMultiLine(s) || s.containsRange(getNonIndentationRange(this.textModel, s.startLineNumber));\n\t\t\t}\n\t\t});\n\t});\n\n\tpublic readonly tabShouldJumpToInlineEdit = derived(this, reader => {\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.showCollapsed.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this._inAcceptFlow.read(reader) && this._appearedInsideViewport.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !s.cursorAtInlineEdit.read(reader);\n\t});\n\n\tpublic readonly tabShouldAcceptInlineEdit = derived(this, reader => {\n\t\tconst s = this.inlineEditState.read(reader);\n\t\tif (!s) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.showCollapsed.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._inAcceptFlow.read(reader) && this._appearedInsideViewport.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (s.inlineCompletion.targetRange.startLineNumber === this._editorObs.cursorLineNumber.read(reader)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._jumpedToId.read(reader) === s.inlineCompletion.semanticId) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._tabShouldIndent.read(reader)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn s.cursorAtInlineEdit.read(reader);\n\t});\n\n\tpublic readonly isInDiffEditor;\n\n\tpublic readonly editorType: InlineCompletionEditorType;\n\n\tprivate async _deltaSelectedInlineCompletionIndex(delta: 1 | -1): Promise<void> {\n\t\tawait this.triggerExplicitly();\n\n\t\tconst completions = this._filteredInlineCompletionItems.get() || [];\n\t\tif (completions.length > 0) {\n\t\t\tconst newIdx = (this.selectedInlineCompletionIndex.get() + delta + completions.length) % completions.length;\n\t\t\tthis._selectedInlineCompletionId.set(completions[newIdx].semanticId, undefined);\n\t\t} else {\n\t\t\tthis._selectedInlineCompletionId.set(undefined, undefined);\n\t\t}\n\t}\n\n\tpublic async next(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(1); }\n\n\tpublic async previous(): Promise<void> { await this._deltaSelectedInlineCompletionIndex(-1); }\n\n\tprivate _getMetadata(completion: InlineSuggestionItem, languageId: string, type: 'word' | 'line' | undefined = undefined): TextModelEditSource {\n\t\tif (type) {\n\t\t\treturn EditSources.inlineCompletionPartialAccept({\n\t\t\t\tnes: completion.isInlineEdit,\n\t\t\t\trequestUuid: completion.requestUuid,\n\t\t\t\tproviderId: completion.source.provider.providerId,\n\t\t\t\tlanguageId,\n\t\t\t\ttype,\n\t\t\t});\n\t\t} else {\n\t\t\treturn EditSources.inlineCompletionAccept({\n\t\t\t\tnes: completion.isInlineEdit,\n\t\t\t\trequestUuid: completion.requestUuid,\n\t\t\t\tproviderId: completion.source.provider.providerId,\n\t\t\t\tlanguageId\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async accept(editor: ICodeEditor = this._editor): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tlet completion: InlineSuggestionItem;\n\t\tlet isNextEditUri = false;\n\t\tconst state = this.state.get();\n\t\tif (state?.kind === 'ghostText') {\n\t\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcompletion = state.inlineCompletion;\n\t\t} else if (state?.kind === 'inlineEdit') {\n\t\t\tcompletion = state.inlineCompletion;\n\t\t\tisNextEditUri = !!state.nextEditUri;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure the completion list will not be disposed before the text change is sent.\n\t\tcompletion.addRef();\n\n\t\ttry {\n\t\t\teditor.pushUndoStop();\n\t\t\tif (isNextEditUri) {\n\t\t\t\t// Do nothing\n\t\t\t} else if (completion.snippetInfo) {\n\t\t\t\tconst mainEdit = TextReplacement.delete(completion.editRange);\n\t\t\t\tconst additionalEdits = completion.additionalTextEdits.map(e => new TextReplacement(Range.lift(e.range), e.text ?? ''));\n\t\t\t\tconst edit = TextEdit.fromParallelReplacementsUnsorted([mainEdit, ...additionalEdits]);\n\t\t\t\teditor.edit(edit, this._getMetadata(completion, this.textModel.getLanguageId()));\n\n\t\t\t\teditor.setPosition(completion.snippetInfo.range.getStartPosition(), 'inlineCompletionAccept');\n\t\t\t\tSnippetController2.get(editor)?.insert(completion.snippetInfo.snippet, { undoStopBefore: false });\n\t\t\t} else {\n\t\t\t\tconst edits = state.edits;\n\n\t\t\t\t// The cursor should move to the end of the edit, not the end of the range provided by the extension\n\t\t\t\t// Inline Edit diffs (human readable) the suggestion from the extension so it already removes common suffix/prefix\n\t\t\t\t// Inline Completions does diff the suggestion so it may contain common suffix\n\t\t\t\tlet minimalEdits = edits;\n\t\t\t\tif (state.kind === 'ghostText') {\n\t\t\t\t\tminimalEdits = removeTextReplacementCommonSuffixPrefix(edits, this.textModel);\n\t\t\t\t}\n\t\t\t\tconst selections = getEndPositionsAfterApplying(minimalEdits).map(p => Selection.fromPositions(p));\n\n\t\t\t\tconst additionalEdits = completion.additionalTextEdits.map(e => new TextReplacement(Range.lift(e.range), e.text ?? ''));\n\t\t\t\tconst edit = TextEdit.fromParallelReplacementsUnsorted([...edits, ...additionalEdits]);\n\n\t\t\t\teditor.edit(edit, this._getMetadata(completion, this.textModel.getLanguageId()));\n\n\t\t\t\tif (completion.displayLocation === undefined) {\n\t\t\t\t\t// do not move the cursor when the completion is displayed in a different location\n\t\t\t\t\teditor.setSelections(state.kind === 'inlineEdit' ? selections.slice(-1) : selections, 'inlineCompletionAccept');\n\t\t\t\t}\n\n\t\t\t\tif (state.kind === 'inlineEdit' && !this._accessibilityService.isMotionReduced()) {\n\t\t\t\t\tconst editRanges = edit.getNewRanges();\n\t\t\t\t\tconst dec = this._store.add(new FadeoutDecoration(editor, editRanges, () => {\n\t\t\t\t\t\tthis._store.delete(dec);\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._onDidAccept.fire();\n\n\t\t\t// Reset before invoking the command, as the command might cause a follow up trigger (which we don't want to reset).\n\t\t\tthis.stop();\n\n\t\t\tif (completion.command) {\n\t\t\t\tawait this._commandService\n\t\t\t\t\t.executeCommand(completion.command.id, ...(completion.command.arguments || []))\n\t\t\t\t\t.then(undefined, onUnexpectedExternalError);\n\t\t\t}\n\n\t\t\tcompletion.reportEndOfLife({ kind: InlineCompletionEndOfLifeReasonKind.Accepted });\n\t\t} finally {\n\t\t\tcompletion.removeRef();\n\t\t\tthis._inAcceptFlow.set(true, undefined);\n\t\t\tthis._lastAcceptedInlineCompletionInfo = { textModelVersionIdAfter: this.textModel.getVersionId(), inlineCompletion: completion };\n\t\t}\n\t}\n\n\tpublic async acceptNextWord(): Promise<void> {\n\t\tawait this._acceptNext(this._editor, 'word', (pos, text) => {\n\t\t\tconst langId = this.textModel.getLanguageIdAtPosition(pos.lineNumber, pos.column);\n\t\t\tconst config = this._languageConfigurationService.getLanguageConfiguration(langId);\n\t\t\tconst wordRegExp = new RegExp(config.wordDefinition.source, config.wordDefinition.flags.replace('g', ''));\n\n\t\t\tconst m1 = text.match(wordRegExp);\n\t\t\tlet acceptUntilIndexExclusive = 0;\n\t\t\tif (m1 && m1.index !== undefined) {\n\t\t\t\tif (m1.index === 0) {\n\t\t\t\t\tacceptUntilIndexExclusive = m1[0].length;\n\t\t\t\t} else {\n\t\t\t\t\tacceptUntilIndexExclusive = m1.index;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tacceptUntilIndexExclusive = text.length;\n\t\t\t}\n\n\t\t\tconst wsRegExp = /\\s+/g;\n\t\t\tconst m2 = wsRegExp.exec(text);\n\t\t\tif (m2 && m2.index !== undefined) {\n\t\t\t\tif (m2.index + m2[0].length < acceptUntilIndexExclusive) {\n\t\t\t\t\tacceptUntilIndexExclusive = m2.index + m2[0].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn acceptUntilIndexExclusive;\n\t\t}, PartialAcceptTriggerKind.Word);\n\t}\n\n\tpublic async acceptNextLine(): Promise<void> {\n\t\tawait this._acceptNext(this._editor, 'line', (pos, text) => {\n\t\t\tconst m = text.match(/\\n/);\n\t\t\tif (m && m.index !== undefined) {\n\t\t\t\treturn m.index + 1;\n\t\t\t}\n\t\t\treturn text.length;\n\t\t}, PartialAcceptTriggerKind.Line);\n\t}\n\n\tprivate async _acceptNext(editor: ICodeEditor, type: 'word' | 'line', getAcceptUntilIndex: (position: Position, text: string) => number, kind: PartialAcceptTriggerKind): Promise<void> {\n\t\tif (editor.getModel() !== this.textModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst state = this.inlineCompletionState.get();\n\t\tif (!state || state.primaryGhostText.isEmpty() || !state.inlineCompletion) {\n\t\t\treturn;\n\t\t}\n\t\tconst ghostText = state.primaryGhostText;\n\t\tconst completion = state.inlineCompletion;\n\n\t\tif (completion.snippetInfo) {\n\t\t\t// not in WYSIWYG mode, partial commit might change completion, thus it is not supported\n\t\t\tawait this.accept(editor);\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstPart = ghostText.parts[0];\n\t\tconst ghostTextPos = new Position(ghostText.lineNumber, firstPart.column);\n\t\tconst ghostTextVal = firstPart.text;\n\t\tconst acceptUntilIndexExclusive = getAcceptUntilIndex(ghostTextPos, ghostTextVal);\n\t\tif (acceptUntilIndexExclusive === ghostTextVal.length && ghostText.parts.length === 1) {\n\t\t\tthis.accept(editor);\n\t\t\treturn;\n\t\t}\n\t\tconst partialGhostTextVal = ghostTextVal.substring(0, acceptUntilIndexExclusive);\n\n\t\tconst positions = this._positions.get();\n\t\tconst cursorPosition = positions[0];\n\n\t\t// Executing the edit might free the completion, so we have to hold a reference on it.\n\t\tcompletion.addRef();\n\t\ttry {\n\t\t\tthis._isAcceptingPartially = true;\n\t\t\ttry {\n\t\t\t\teditor.pushUndoStop();\n\t\t\t\tconst replaceRange = Range.fromPositions(cursorPosition, ghostTextPos);\n\t\t\t\tconst newText = editor.getModel()!.getValueInRange(replaceRange) + partialGhostTextVal;\n\t\t\t\tconst primaryEdit = new TextReplacement(replaceRange, newText);\n\t\t\t\tconst edits = [primaryEdit, ...getSecondaryEdits(this.textModel, positions, primaryEdit)].filter(isDefined);\n\t\t\t\tconst selections = getEndPositionsAfterApplying(edits).map(p => Selection.fromPositions(p));\n\n\t\t\t\teditor.edit(TextEdit.fromParallelReplacementsUnsorted(edits), this._getMetadata(completion, type));\n\t\t\t\teditor.setSelections(selections, 'inlineCompletionPartialAccept');\n\t\t\t\teditor.revealPositionInCenterIfOutsideViewport(editor.getPosition()!, ScrollType.Immediate);\n\t\t\t} finally {\n\t\t\t\tthis._isAcceptingPartially = false;\n\t\t\t}\n\n\t\t\tconst acceptedRange = Range.fromPositions(completion.editRange.getStartPosition(), TextLength.ofText(partialGhostTextVal).addToPosition(ghostTextPos));\n\t\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\t\tconst text = editor.getModel()!.getValueInRange(acceptedRange, EndOfLinePreference.LF);\n\t\t\tconst acceptedLength = text.length;\n\t\t\tcompletion.reportPartialAccept(\n\t\t\t\tacceptedLength,\n\t\t\t\t{ kind, acceptedLength: acceptedLength },\n\t\t\t\t{ characters: acceptUntilIndexExclusive, ratio: acceptUntilIndexExclusive / ghostTextVal.length, count: 1 }\n\t\t\t);\n\n\t\t} finally {\n\t\t\tcompletion.removeRef();\n\t\t}\n\t}\n\n\tpublic handleSuggestAccepted(item: SuggestItemInfo) {\n\t\tconst itemEdit = singleTextRemoveCommonPrefix(item.getSingleTextEdit(), this.textModel);\n\t\tconst augmentedCompletion = this._computeAugmentation(itemEdit, undefined);\n\t\tif (!augmentedCompletion) { return; }\n\n\t\t// This assumes that the inline completion and the model use the same EOL style.\n\t\tconst alreadyAcceptedLength = this.textModel.getValueInRange(augmentedCompletion.completion.editRange, EndOfLinePreference.LF).length;\n\t\tconst acceptedLength = alreadyAcceptedLength + itemEdit.text.length;\n\n\t\taugmentedCompletion.completion.reportPartialAccept(itemEdit.text.length, {\n\t\t\tkind: PartialAcceptTriggerKind.Suggest,\n\t\t\tacceptedLength,\n\t\t}, {\n\t\t\tcharacters: itemEdit.text.length,\n\t\t\tcount: 1,\n\t\t\tratio: 1\n\t\t});\n\t}\n\n\tpublic extractReproSample(): Repro {\n\t\tconst value = this.textModel.getValue();\n\t\tconst item = this.state.get()?.inlineCompletion;\n\t\treturn {\n\t\t\tdocumentValue: value,\n\t\t\tinlineCompletion: item?.getSourceCompletion(),\n\t\t};\n\t}\n\n\tprivate readonly _jumpedToId = observableValue<undefined | string>(this, undefined);\n\tprivate readonly _inAcceptFlow = observableValue(this, false);\n\tpublic readonly inAcceptFlow: IObservable<boolean> = this._inAcceptFlow;\n\n\tpublic jump(): void {\n\t\tconst s = this.inlineEditState.get();\n\t\tif (!s) { return; }\n\n\t\ttransaction(tx => {\n\t\t\tthis._jumpedToId.set(s.inlineCompletion.semanticId, tx);\n\t\t\tthis.dontRefetchSignal.trigger(tx);\n\t\t\tconst targetRange = s.inlineCompletion.targetRange;\n\t\t\tconst targetPosition = targetRange.getStartPosition();\n\t\t\tthis._editor.setPosition(targetPosition, 'inlineCompletions.jump');\n\n\t\t\t// TODO: consider using view information to reveal it\n\t\t\tconst isSingleLineChange = targetRange.isSingleLine() && (s.inlineCompletion.displayLocation || !s.inlineCompletion.insertText.includes('\\n'));\n\t\t\tif (isSingleLineChange) {\n\t\t\t\tthis._editor.revealPosition(targetPosition);\n\t\t\t} else {\n\t\t\t\tconst revealRange = new Range(targetRange.startLineNumber - 1, 1, targetRange.endLineNumber + 1, 1);\n\t\t\t\tthis._editor.revealRange(revealRange, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tthis._editor.focus();\n\t\t});\n\t}\n\n\tpublic async handleInlineSuggestionShown(inlineCompletion: InlineSuggestionItem, viewKind: InlineCompletionViewKind, viewData: InlineCompletionViewData): Promise<void> {\n\t\tawait inlineCompletion.reportInlineEditShown(this._commandService, viewKind, viewData);\n\t}\n}\n\ninterface Repro {\n\tdocumentValue: string;\n\tinlineCompletion: InlineCompletion | undefined;\n}\n\nexport enum VersionIdChangeReason {\n\tUndo,\n\tRedo,\n\tAcceptWord,\n\tOther,\n}\n\nexport function getSecondaryEdits(textModel: ITextModel, positions: readonly Position[], primaryTextRepl: TextReplacement): (TextReplacement | undefined)[] {\n\tif (positions.length === 1) {\n\t\t// No secondary cursor positions\n\t\treturn [];\n\t}\n\tconst text = new TextModelText(textModel);\n\tconst textTransformer = text.getTransformer();\n\tconst primaryOffset = textTransformer.getOffset(positions[0]);\n\tconst secondaryOffsets = positions.slice(1).map(pos => textTransformer.getOffset(pos));\n\n\tprimaryTextRepl = primaryTextRepl.removeCommonPrefixAndSuffix(text);\n\tconst primaryStringRepl = textTransformer.getStringReplacement(primaryTextRepl);\n\n\tconst deltaFromOffsetToRangeStart = primaryStringRepl.replaceRange.start - primaryOffset;\n\tconst primaryContextRange = primaryStringRepl.replaceRange.join(OffsetRange.emptyAt(primaryOffset));\n\tconst primaryContextValue = text.getValueOfOffsetRange(primaryContextRange);\n\n\tconst replacements = secondaryOffsets.map(secondaryOffset => {\n\t\tconst newRangeStart = secondaryOffset + deltaFromOffsetToRangeStart;\n\t\tconst newRangeEnd = newRangeStart + primaryStringRepl.replaceRange.length;\n\t\tconst range = new OffsetRange(newRangeStart, newRangeEnd);\n\n\t\tconst contextRange = range.join(OffsetRange.emptyAt(secondaryOffset));\n\t\tconst contextValue = text.getValueOfOffsetRange(contextRange);\n\t\tif (contextValue !== primaryContextValue) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst stringRepl = new StringReplacement(range, primaryStringRepl.newText);\n\t\tconst repl = textTransformer.getTextReplacement(stringRepl);\n\t\treturn repl;\n\t}).filter(isDefined);\n\n\treturn replacements;\n}\n\nclass FadeoutDecoration extends Disposable {\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tranges: Range[],\n\t\tonDispose?: () => void,\n\t) {\n\t\tsuper();\n\n\t\tif (onDispose) {\n\t\t\tthis._register({ dispose: () => onDispose() });\n\t\t}\n\n\t\tthis._register(observableCodeEditor(editor).setDecorations(constObservable(ranges.map<IModelDeltaDecoration>(range => ({\n\t\t\trange: range,\n\t\t\toptions: {\n\t\t\t\tdescription: 'animation',\n\t\t\t\tclassName: 'edits-fadeout-decoration',\n\t\t\t\tzIndex: 1,\n\t\t\t}\n\t\t})))));\n\n\t\tconst animation = new AnimatedValue(1, 0, 1000, easeOutCubic);\n\t\tconst val = new ObservableAnimatedValue(animation);\n\n\t\tthis._register(autorun(reader => {\n\t\t\tconst opacity = val.getValue(reader);\n\t\t\teditor.getContainerDomNode().style.setProperty('--animation-opacity', opacity.toString());\n\t\t\tif (animation.isFinished()) {\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}