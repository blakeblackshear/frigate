{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/codeAction/browser/codeActionModel.ts","vs/editor/contrib/codeAction/browser/codeActionModel.ts"],"names":[],"mappings":"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","file":"codeActionModel.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IMarkerService } from '../../../../platform/markers/common/markers.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption, ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport { CodeActionProvider, CodeActionTriggerType } from '../../../common/languages.js';\nimport { CodeActionKind, CodeActionSet, CodeActionTrigger, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\n\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey<string>('supportedCodeAction', '');\n\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\n\ntype TriggeredCodeAction = {\n\treadonly selection: Selection;\n\treadonly trigger: CodeActionTrigger;\n};\n\nclass CodeActionOracle extends Disposable {\n\n\tprivate readonly _autoTriggerTimer = this._register(new TimeoutTimer());\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tprivate readonly _signalChange: (triggered: TriggeredCodeAction | undefined) => void,\n\t\tprivate readonly _delay: number = 250,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n\t\tthis._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger): void {\n\t\tconst selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n\t\tthis._signalChange(selection ? { trigger, selection } : undefined);\n\t}\n\n\tprivate _onMarkerChanges(resources: readonly URI[]): void {\n\t\tconst model = this._editor.getModel();\n\t\tif (model && resources.some(resource => isEqual(resource, model.uri))) {\n\t\t\tthis._tryAutoTrigger();\n\t\t}\n\t}\n\n\tprivate _tryAutoTrigger() {\n\t\tthis._autoTriggerTimer.cancelAndSet(() => {\n\t\t\tthis.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t}, this._delay);\n\t}\n\n\tprivate _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger: CodeActionTrigger): Selection | undefined {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selection = this._editor.getSelection();\n\t\tif (trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst enabled = this._editor.getOption(EditorOption.lightbulb).enabled;\n\t\tif (enabled === ShowLightbulbIconMode.Off) {\n\t\t\treturn undefined;\n\t\t} else if (enabled === ShowLightbulbIconMode.On) {\n\t\t\treturn selection;\n\t\t} else if (enabled === ShowLightbulbIconMode.OnCode) {\n\t\t\tconst isSelectionEmpty = selection.isEmpty();\n\t\t\tif (!isSelectionEmpty) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst { lineNumber, column } = selection.getPosition();\n\t\t\tconst line = model.getLineContent(lineNumber);\n\t\t\tif (line.length === 0) {\n\t\t\t\t// empty line\n\t\t\t\treturn undefined;\n\t\t\t} else if (column === 1) {\n\t\t\t\t// look only right\n\t\t\t\tif (/\\s/.test(line[0])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else if (column === model.getLineMaxColumn(lineNumber)) {\n\t\t\t\t// look only left\n\t\t\t\tif (/\\s/.test(line[line.length - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// look left and right\n\t\t\t\tif (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selection;\n\t}\n}\n\nexport namespace CodeActionsState {\n\n\texport const enum Type { Empty, Triggered }\n\n\texport const Empty = { type: Type.Empty } as const;\n\n\texport class Triggered {\n\t\treadonly type = Type.Triggered;\n\n\t\tpublic readonly actions: Promise<CodeActionSet>;\n\n\t\tconstructor(\n\t\t\tpublic readonly trigger: CodeActionTrigger,\n\t\t\tpublic readonly position: Position,\n\t\t\tprivate readonly _cancellablePromise: CancelablePromise<CodeActionSet>,\n\t\t) {\n\t\t\tthis.actions = _cancellablePromise.catch((e): CodeActionSet => {\n\t\t\t\tif (isCancellationError(e)) {\n\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t});\n\t\t}\n\n\t\tpublic cancel() {\n\t\t\tthis._cancellablePromise.cancel();\n\t\t}\n\t}\n\n\texport type State = typeof Empty | Triggered;\n}\n\nconst emptyCodeActionSet = Object.freeze<CodeActionSet>({\n\tallActions: [],\n\tvalidActions: [],\n\tdispose: () => { },\n\tdocumentation: [],\n\thasAutoFix: false,\n\thasAIFix: false,\n\tallAIFixes: false,\n});\n\n\nexport class CodeActionModel extends Disposable {\n\n\tprivate readonly _codeActionOracle = this._register(new MutableDisposable<CodeActionOracle>());\n\tprivate _state: CodeActionsState.State = CodeActionsState.Empty;\n\n\tprivate readonly _supportedCodeActions: IContextKey<string>;\n\n\tprivate readonly _onDidChangeState = this._register(new Emitter<CodeActionsState.State>());\n\tpublic readonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate readonly codeActionsDisposable: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _registry: LanguageFeatureRegistry<CodeActionProvider>,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tcontextKeyService: IContextKeyService,\n\t\tprivate readonly _progressService?: IEditorProgressService,\n\t\tprivate readonly _configurationService?: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n\n\t\tthis._register(this._editor.onDidChangeModel(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._register(this._registry.onDidChange(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.lightbulb)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._update();\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\n\t\tsuper.dispose();\n\t\tthis.setState(CodeActionsState.Empty, true);\n\t}\n\n\tprivate _settingEnabledNearbyQuickfixes(): boolean {\n\t\tconst model = this._editor?.getModel();\n\t\treturn this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', { resource: model?.uri }) : false;\n\t}\n\n\tprivate _update(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._codeActionOracle.value = undefined;\n\n\t\tthis.setState(CodeActionsState.Empty);\n\n\t\tconst model = this._editor.getModel();\n\t\tif (model\n\t\t\t&& this._registry.has(model)\n\t\t\t&& !this._editor.getOption(EditorOption.readOnly)\n\t\t) {\n\t\t\tconst supportedActions: string[] = this._registry.all(model).flatMap(provider => provider.providedCodeActionKinds ?? []);\n\t\t\tthis._supportedCodeActions.set(supportedActions.join(' '));\n\n\t\t\tthis._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n\t\t\t\tif (!trigger) {\n\t\t\t\t\tthis.setState(CodeActionsState.Empty);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startPosition = trigger.selection.getStartPosition();\n\n\t\t\t\tconst actions = createCancelablePromise(async token => {\n\t\t\t\t\tif (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === CodeActionTriggerType.Invoke && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || trigger.trigger.filter?.include?.contains(CodeActionKind.QuickFix))) {\n\t\t\t\t\t\tconst codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\t\tthis.codeActionsDisposable.value = codeActionSet;\n\t\t\t\t\t\tconst allCodeActions = [...codeActionSet.allActions];\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\tcodeActionSet.dispose();\n\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Search for non-AI quickfixes in the current code action set - if AI code actions are the only thing found, continue searching for diagnostics in line.\n\t\t\t\t\t\tconst foundQuickfix = codeActionSet.validActions?.some(action => {\n\t\t\t\t\t\t\treturn action.action.kind &&\n\t\t\t\t\t\t\t\tCodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) &&\n\t\t\t\t\t\t\t\t!action.action.isAI;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst allMarkers = this._markerService.read({ resource: model.uri });\n\t\t\t\t\t\tif (foundQuickfix) {\n\t\t\t\t\t\t\tfor (const action of codeActionSet.validActions) {\n\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { validActions: codeActionSet.validActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { this.codeActionsDisposable.value = codeActionSet; } };\n\t\t\t\t\t\t} else if (!foundQuickfix) {\n\t\t\t\t\t\t\t// If markers exist, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n\t\t\t\t\t\t\tif (allMarkers.length > 0) {\n\t\t\t\t\t\t\t\tconst currPosition = trigger.selection.getPosition();\n\t\t\t\t\t\t\t\tlet trackedPosition = currPosition;\n\t\t\t\t\t\t\t\tlet distance = Number.MAX_VALUE;\n\t\t\t\t\t\t\t\tconst currentActions = [...codeActionSet.validActions];\n\n\t\t\t\t\t\t\t\tfor (const marker of allMarkers) {\n\t\t\t\t\t\t\t\t\tconst col = marker.endColumn;\n\t\t\t\t\t\t\t\t\tconst row = marker.endLineNumber;\n\t\t\t\t\t\t\t\t\tconst startRow = marker.startLineNumber;\n\n\t\t\t\t\t\t\t\t\t// Found quickfix on the same line and check relative distance to other markers\n\t\t\t\t\t\t\t\t\tif ((row === currPosition.lineNumber || startRow === currPosition.lineNumber)) {\n\t\t\t\t\t\t\t\t\t\ttrackedPosition = new Position(row, col);\n\t\t\t\t\t\t\t\t\t\tconst newCodeActionTrigger: CodeActionTrigger = {\n\t\t\t\t\t\t\t\t\t\t\ttype: trigger.trigger.type,\n\t\t\t\t\t\t\t\t\t\t\ttriggerAction: trigger.trigger.triggerAction,\n\t\t\t\t\t\t\t\t\t\t\tfilter: { include: trigger.trigger.filter?.include ? trigger.trigger.filter?.include : CodeActionKind.QuickFix },\n\t\t\t\t\t\t\t\t\t\t\tautoApply: trigger.trigger.autoApply,\n\t\t\t\t\t\t\t\t\t\t\tcontext: { notAvailableMessage: trigger.trigger.context?.notAvailableMessage || '', position: trackedPosition }\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tconst selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n\t\t\t\t\t\t\t\t\t\tconst actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n\t\t\t\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\t\t\t\tactionsAtMarker.dispose();\n\t\t\t\t\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (actionsAtMarker.validActions.length !== 0) {\n\t\t\t\t\t\t\t\t\t\t\tfor (const action of actionsAtMarker.validActions) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (codeActionSet.allActions.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tallCodeActions.push(...actionsAtMarker.allActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Already filtered through to only get quickfixes, so no need to filter again.\n\t\t\t\t\t\t\t\t\t\t\tif (Math.abs(currPosition.column - col) < distance) {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.unshift(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.push(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdistance = Math.abs(currPosition.column - col);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst filteredActions = currentActions.filter((action, index, self) =>\n\t\t\t\t\t\t\t\t\tself.findIndex((a) => a.action.title === action.action.title) === index);\n\n\t\t\t\t\t\t\t\tfilteredActions.sort((a, b) => {\n\t\t\t\t\t\t\t\t\tif (a.action.isPreferred && !b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isPreferred && b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (a.action.isAI && !b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isAI && b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Only retriggers if actually found quickfix on the same line as cursor\n\t\t\t\t\t\t\t\treturn { validActions: filteredActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { this.codeActionsDisposable.value = codeActionSet; } };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Case for manual triggers - specifically Source Actions and Refactors\n\t\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\t\tconst codeActions = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\t\tthis.codeActionsDisposable.value = codeActions;\n\t\t\t\t\t\treturn codeActions;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\tthis.codeActionsDisposable.value = codeActionSet;\n\t\t\t\t\treturn codeActionSet;\n\t\t\t\t});\n\n\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\tthis._progressService?.showWhile(actions, 250);\n\t\t\t\t}\n\t\t\t\tconst newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n\t\t\t\tlet isManualToAutoTransition = false;\n\t\t\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\t\t\t// Check if the current state is manual and the new state is automatic\n\t\t\t\t\tisManualToAutoTransition = this._state.trigger.type === CodeActionTriggerType.Invoke &&\n\t\t\t\t\t\tnewState.type === CodeActionsState.Type.Triggered &&\n\t\t\t\t\t\tnewState.trigger.type === CodeActionTriggerType.Auto &&\n\t\t\t\t\t\tthis._state.position !== newState.position;\n\t\t\t\t}\n\n\t\t\t\t// Do not trigger state if current state is manual and incoming state is automatic\n\t\t\t\tif (!isManualToAutoTransition) {\n\t\t\t\t\tthis.setState(newState);\n\t\t\t\t} else {\n\t\t\t\t\t// Reset the new state after getting code actions back.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.setState(newState);\n\t\t\t\t\t}, 500);\n\t\t\t\t}\n\t\t\t}, undefined);\n\t\t\tthis._codeActionOracle.value.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t} else {\n\t\t\tthis._supportedCodeActions.reset();\n\t\t}\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger) {\n\t\tthis._codeActionOracle.value?.trigger(trigger);\n\t\tthis.codeActionsDisposable.dispose();\n\t}\n\n\tprivate setState(newState: CodeActionsState.State, skipNotify?: boolean) {\n\t\tif (newState === this._state) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cancel old request\n\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\tthis._state.cancel();\n\t\t}\n\n\t\tthis._state = newState;\n\n\t\tif (!skipNotify && !this._disposed) {\n\t\t\tthis._onDidChangeState.fire(newState);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, TimeoutTimer } from '../../../../base/common/async.js';\nimport { isCancellationError } from '../../../../base/common/errors.js';\nimport { Emitter } from '../../../../base/common/event.js';\nimport { HierarchicalKind } from '../../../../base/common/hierarchicalKind.js';\nimport { Disposable, IDisposable, MutableDisposable } from '../../../../base/common/lifecycle.js';\nimport { isEqual } from '../../../../base/common/resources.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\nimport { IContextKey, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IMarkerService } from '../../../../platform/markers/common/markers.js';\nimport { IEditorProgressService, Progress } from '../../../../platform/progress/common/progress.js';\nimport { ICodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption, ShowLightbulbIconMode } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry.js';\nimport { CodeActionProvider, CodeActionTriggerType } from '../../../common/languages.js';\nimport { CodeActionKind, CodeActionSet, CodeActionTrigger, CodeActionTriggerSource } from '../common/types.js';\nimport { getCodeActions } from './codeAction.js';\n\nexport const SUPPORTED_CODE_ACTIONS = new RawContextKey<string>('supportedCodeAction', '');\n\nexport const APPLY_FIX_ALL_COMMAND_ID = '_typescript.applyFixAllCodeAction';\n\ntype TriggeredCodeAction = {\n\treadonly selection: Selection;\n\treadonly trigger: CodeActionTrigger;\n};\n\nclass CodeActionOracle extends Disposable {\n\n\tprivate readonly _autoTriggerTimer = this._register(new TimeoutTimer());\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tprivate readonly _signalChange: (triggered: TriggeredCodeAction | undefined) => void,\n\t\tprivate readonly _delay: number = 250,\n\t) {\n\t\tsuper();\n\t\tthis._register(this._markerService.onMarkerChanged(e => this._onMarkerChanges(e)));\n\t\tthis._register(this._editor.onDidChangeCursorPosition(() => this._tryAutoTrigger()));\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger): void {\n\t\tconst selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n\t\tthis._signalChange(selection ? { trigger, selection } : undefined);\n\t}\n\n\tprivate _onMarkerChanges(resources: readonly URI[]): void {\n\t\tconst model = this._editor.getModel();\n\t\tif (model && resources.some(resource => isEqual(resource, model.uri))) {\n\t\t\tthis._tryAutoTrigger();\n\t\t}\n\t}\n\n\tprivate _tryAutoTrigger() {\n\t\tthis._autoTriggerTimer.cancelAndSet(() => {\n\t\t\tthis.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t}, this._delay);\n\t}\n\n\tprivate _getRangeOfSelectionUnlessWhitespaceEnclosed(trigger: CodeActionTrigger): Selection | undefined {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst selection = this._editor.getSelection();\n\t\tif (trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\treturn selection;\n\t\t}\n\t\tconst enabled = this._editor.getOption(EditorOption.lightbulb).enabled;\n\t\tif (enabled === ShowLightbulbIconMode.Off) {\n\t\t\treturn undefined;\n\t\t} else if (enabled === ShowLightbulbIconMode.On) {\n\t\t\treturn selection;\n\t\t} else if (enabled === ShowLightbulbIconMode.OnCode) {\n\t\t\tconst isSelectionEmpty = selection.isEmpty();\n\t\t\tif (!isSelectionEmpty) {\n\t\t\t\treturn selection;\n\t\t\t}\n\t\t\tconst model = this._editor.getModel();\n\t\t\tconst { lineNumber, column } = selection.getPosition();\n\t\t\tconst line = model.getLineContent(lineNumber);\n\t\t\tif (line.length === 0) {\n\t\t\t\t// empty line\n\t\t\t\treturn undefined;\n\t\t\t} else if (column === 1) {\n\t\t\t\t// look only right\n\t\t\t\tif (/\\s/.test(line[0])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else if (column === model.getLineMaxColumn(lineNumber)) {\n\t\t\t\t// look only left\n\t\t\t\tif (/\\s/.test(line[line.length - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// look left and right\n\t\t\t\tif (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selection;\n\t}\n}\n\nexport namespace CodeActionsState {\n\n\texport const enum Type { Empty, Triggered }\n\n\texport const Empty = { type: Type.Empty } as const;\n\n\texport class Triggered {\n\t\treadonly type = Type.Triggered;\n\n\t\tpublic readonly actions: Promise<CodeActionSet>;\n\n\t\tconstructor(\n\t\t\tpublic readonly trigger: CodeActionTrigger,\n\t\t\tpublic readonly position: Position,\n\t\t\tprivate readonly _cancellablePromise: CancelablePromise<CodeActionSet>,\n\t\t) {\n\t\t\tthis.actions = _cancellablePromise.catch((e): CodeActionSet => {\n\t\t\t\tif (isCancellationError(e)) {\n\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t}\n\t\t\t\tthrow e;\n\t\t\t});\n\t\t}\n\n\t\tpublic cancel() {\n\t\t\tthis._cancellablePromise.cancel();\n\t\t}\n\t}\n\n\texport type State = typeof Empty | Triggered;\n}\n\nconst emptyCodeActionSet = Object.freeze<CodeActionSet>({\n\tallActions: [],\n\tvalidActions: [],\n\tdispose: () => { },\n\tdocumentation: [],\n\thasAutoFix: false,\n\thasAIFix: false,\n\tallAIFixes: false,\n});\n\n\nexport class CodeActionModel extends Disposable {\n\n\tprivate readonly _codeActionOracle = this._register(new MutableDisposable<CodeActionOracle>());\n\tprivate _state: CodeActionsState.State = CodeActionsState.Empty;\n\n\tprivate readonly _supportedCodeActions: IContextKey<string>;\n\n\tprivate readonly _onDidChangeState = this._register(new Emitter<CodeActionsState.State>());\n\tpublic readonly onDidChangeState = this._onDidChangeState.event;\n\n\tprivate readonly codeActionsDisposable: MutableDisposable<IDisposable> = this._register(new MutableDisposable());\n\n\tprivate _disposed = false;\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\tprivate readonly _registry: LanguageFeatureRegistry<CodeActionProvider>,\n\t\tprivate readonly _markerService: IMarkerService,\n\t\tcontextKeyService: IContextKeyService,\n\t\tprivate readonly _progressService?: IEditorProgressService,\n\t\tprivate readonly _configurationService?: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tthis._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n\n\t\tthis._register(this._editor.onDidChangeModel(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeModelLanguage(() => this._update()));\n\t\tthis._register(this._registry.onDidChange(() => this._update()));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.lightbulb)) {\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t}));\n\t\tthis._update();\n\t}\n\n\toverride dispose(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\n\t\tsuper.dispose();\n\t\tthis.setState(CodeActionsState.Empty, true);\n\t}\n\n\tprivate _settingEnabledNearbyQuickfixes(): boolean {\n\t\tconst model = this._editor?.getModel();\n\t\treturn this._configurationService ? this._configurationService.getValue('editor.codeActionWidget.includeNearbyQuickFixes', { resource: model?.uri }) : false;\n\t}\n\n\tprivate _update(): void {\n\t\tif (this._disposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._codeActionOracle.value = undefined;\n\n\t\tthis.setState(CodeActionsState.Empty);\n\n\t\tconst model = this._editor.getModel();\n\t\tif (model\n\t\t\t&& this._registry.has(model)\n\t\t\t&& !this._editor.getOption(EditorOption.readOnly)\n\t\t) {\n\t\t\tconst supportedActions: string[] = this._registry.all(model).flatMap(provider => provider.providedCodeActionKinds ?? []);\n\t\t\tthis._supportedCodeActions.set(supportedActions.join(' '));\n\n\t\t\tthis._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, trigger => {\n\t\t\t\tif (!trigger) {\n\t\t\t\t\tthis.setState(CodeActionsState.Empty);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst startPosition = trigger.selection.getStartPosition();\n\n\t\t\t\tconst actions = createCancelablePromise(async token => {\n\t\t\t\t\tif (this._settingEnabledNearbyQuickfixes() && trigger.trigger.type === CodeActionTriggerType.Invoke && (trigger.trigger.triggerAction === CodeActionTriggerSource.QuickFix || trigger.trigger.filter?.include?.contains(CodeActionKind.QuickFix))) {\n\t\t\t\t\t\tconst codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\t\tthis.codeActionsDisposable.value = codeActionSet;\n\t\t\t\t\t\tconst allCodeActions = [...codeActionSet.allActions];\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\tcodeActionSet.dispose();\n\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Search for non-AI quickfixes in the current code action set - if AI code actions are the only thing found, continue searching for diagnostics in line.\n\t\t\t\t\t\tconst foundQuickfix = codeActionSet.validActions?.some(action => {\n\t\t\t\t\t\t\treturn action.action.kind &&\n\t\t\t\t\t\t\t\tCodeActionKind.QuickFix.contains(new HierarchicalKind(action.action.kind)) &&\n\t\t\t\t\t\t\t\t!action.action.isAI;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst allMarkers = this._markerService.read({ resource: model.uri });\n\t\t\t\t\t\tif (foundQuickfix) {\n\t\t\t\t\t\t\tfor (const action of codeActionSet.validActions) {\n\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { validActions: codeActionSet.validActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { this.codeActionsDisposable.value = codeActionSet; } };\n\t\t\t\t\t\t} else if (!foundQuickfix) {\n\t\t\t\t\t\t\t// If markers exist, and there are no quickfixes found or length is zero, check for quickfixes on that line.\n\t\t\t\t\t\t\tif (allMarkers.length > 0) {\n\t\t\t\t\t\t\t\tconst currPosition = trigger.selection.getPosition();\n\t\t\t\t\t\t\t\tlet trackedPosition = currPosition;\n\t\t\t\t\t\t\t\tlet distance = Number.MAX_VALUE;\n\t\t\t\t\t\t\t\tconst currentActions = [...codeActionSet.validActions];\n\n\t\t\t\t\t\t\t\tfor (const marker of allMarkers) {\n\t\t\t\t\t\t\t\t\tconst col = marker.endColumn;\n\t\t\t\t\t\t\t\t\tconst row = marker.endLineNumber;\n\t\t\t\t\t\t\t\t\tconst startRow = marker.startLineNumber;\n\n\t\t\t\t\t\t\t\t\t// Found quickfix on the same line and check relative distance to other markers\n\t\t\t\t\t\t\t\t\tif ((row === currPosition.lineNumber || startRow === currPosition.lineNumber)) {\n\t\t\t\t\t\t\t\t\t\ttrackedPosition = new Position(row, col);\n\t\t\t\t\t\t\t\t\t\tconst newCodeActionTrigger: CodeActionTrigger = {\n\t\t\t\t\t\t\t\t\t\t\ttype: trigger.trigger.type,\n\t\t\t\t\t\t\t\t\t\t\ttriggerAction: trigger.trigger.triggerAction,\n\t\t\t\t\t\t\t\t\t\t\tfilter: { include: trigger.trigger.filter?.include ? trigger.trigger.filter?.include : CodeActionKind.QuickFix },\n\t\t\t\t\t\t\t\t\t\t\tautoApply: trigger.trigger.autoApply,\n\t\t\t\t\t\t\t\t\t\t\tcontext: { notAvailableMessage: trigger.trigger.context?.notAvailableMessage || '', position: trackedPosition }\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tconst selectionAsPosition = new Selection(trackedPosition.lineNumber, trackedPosition.column, trackedPosition.lineNumber, trackedPosition.column);\n\t\t\t\t\t\t\t\t\t\tconst actionsAtMarker = await getCodeActions(this._registry, model, selectionAsPosition, newCodeActionTrigger, Progress.None, token);\n\t\t\t\t\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\t\t\t\t\tactionsAtMarker.dispose();\n\t\t\t\t\t\t\t\t\t\t\treturn emptyCodeActionSet;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (actionsAtMarker.validActions.length !== 0) {\n\t\t\t\t\t\t\t\t\t\t\tfor (const action of actionsAtMarker.validActions) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (action.action.command?.arguments?.some(arg => typeof arg === 'string' && arg.includes(APPLY_FIX_ALL_COMMAND_ID))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\taction.action.diagnostics = [...allMarkers.filter(marker => marker.relatedInformation)];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (codeActionSet.allActions.length === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tallCodeActions.push(...actionsAtMarker.allActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Already filtered through to only get quickfixes, so no need to filter again.\n\t\t\t\t\t\t\t\t\t\t\tif (Math.abs(currPosition.column - col) < distance) {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.unshift(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tcurrentActions.push(...actionsAtMarker.validActions);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdistance = Math.abs(currPosition.column - col);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst filteredActions = currentActions.filter((action, index, self) =>\n\t\t\t\t\t\t\t\t\tself.findIndex((a) => a.action.title === action.action.title) === index);\n\n\t\t\t\t\t\t\t\tfilteredActions.sort((a, b) => {\n\t\t\t\t\t\t\t\t\tif (a.action.isPreferred && !b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isPreferred && b.action.isPreferred) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (a.action.isAI && !b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t\t} else if (!a.action.isAI && b.action.isAI) {\n\t\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Only retriggers if actually found quickfix on the same line as cursor\n\t\t\t\t\t\t\t\treturn { validActions: filteredActions, allActions: allCodeActions, documentation: codeActionSet.documentation, hasAutoFix: codeActionSet.hasAutoFix, hasAIFix: codeActionSet.hasAIFix, allAIFixes: codeActionSet.allAIFixes, dispose: () => { this.codeActionsDisposable.value = codeActionSet; } };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Case for manual triggers - specifically Source Actions and Refactors\n\t\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\t\tconst codeActions = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\t\tthis.codeActionsDisposable.value = codeActions;\n\t\t\t\t\t\treturn codeActions;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst codeActionSet = await getCodeActions(this._registry, model, trigger.selection, trigger.trigger, Progress.None, token);\n\t\t\t\t\tthis.codeActionsDisposable.value = codeActionSet;\n\t\t\t\t\treturn codeActionSet;\n\t\t\t\t});\n\n\t\t\t\tif (trigger.trigger.type === CodeActionTriggerType.Invoke) {\n\t\t\t\t\tthis._progressService?.showWhile(actions, 250);\n\t\t\t\t}\n\t\t\t\tconst newState = new CodeActionsState.Triggered(trigger.trigger, startPosition, actions);\n\t\t\t\tlet isManualToAutoTransition = false;\n\t\t\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\t\t\t// Check if the current state is manual and the new state is automatic\n\t\t\t\t\tisManualToAutoTransition = this._state.trigger.type === CodeActionTriggerType.Invoke &&\n\t\t\t\t\t\tnewState.type === CodeActionsState.Type.Triggered &&\n\t\t\t\t\t\tnewState.trigger.type === CodeActionTriggerType.Auto &&\n\t\t\t\t\t\tthis._state.position !== newState.position;\n\t\t\t\t}\n\n\t\t\t\t// Do not trigger state if current state is manual and incoming state is automatic\n\t\t\t\tif (!isManualToAutoTransition) {\n\t\t\t\t\tthis.setState(newState);\n\t\t\t\t} else {\n\t\t\t\t\t// Reset the new state after getting code actions back.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.setState(newState);\n\t\t\t\t\t}, 500);\n\t\t\t\t}\n\t\t\t}, undefined);\n\t\t\tthis._codeActionOracle.value.trigger({ type: CodeActionTriggerType.Auto, triggerAction: CodeActionTriggerSource.Default });\n\t\t} else {\n\t\t\tthis._supportedCodeActions.reset();\n\t\t}\n\t}\n\n\tpublic trigger(trigger: CodeActionTrigger) {\n\t\tthis._codeActionOracle.value?.trigger(trigger);\n\t\tthis.codeActionsDisposable.dispose();\n\t}\n\n\tprivate setState(newState: CodeActionsState.State, skipNotify?: boolean) {\n\t\tif (newState === this._state) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Cancel old request\n\t\tif (this._state.type === CodeActionsState.Type.Triggered) {\n\t\t\tthis._state.cancel();\n\t\t}\n\n\t\tthis._state = newState;\n\n\t\tif (!skipNotify && !this._disposed) {\n\t\t\tthis._onDidChangeState.fire(newState);\n\t\t}\n\t}\n}\n"]}