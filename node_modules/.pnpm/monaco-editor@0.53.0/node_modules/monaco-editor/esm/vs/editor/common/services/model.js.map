{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/common/services/model.ts","vs/editor/common/services/model.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAMhG,OAAO,EAAE,eAAe,EAAE,MAAM,yDAAyD,CAAC;AAG1F,MAAM,CAAC,MAAM,aAAa,GAAG,eAAe,CAAgB,cAAc,CAAC,CAAC","file":"model.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ITextBufferFactory, ITextModel, ITextModelCreationOptions } from '../model.js';\nimport { ILanguageSelection } from '../languages/language.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { DocumentSemanticTokensProvider, DocumentRangeSemanticTokensProvider } from '../languages.js';\n\nexport const IModelService = createDecorator<IModelService>('modelService');\n\nexport type DocumentTokensProvider = DocumentSemanticTokensProvider | DocumentRangeSemanticTokensProvider;\n\nexport interface IModelService {\n\treadonly _serviceBrand: undefined;\n\n\tcreateModel(value: string | ITextBufferFactory, languageSelection: ILanguageSelection | null, resource?: URI, isForSimpleWidget?: boolean): ITextModel;\n\n\tgetModels(): ITextModel[];\n\n\tgetCreationOptions(language: string, resource: URI, isForSimpleWidget: boolean): ITextModelCreationOptions;\n\n\tgetModel(resource: URI): ITextModel | null;\n\n\treadonly onModelAdded: Event<ITextModel>;\n\n\treadonly onModelRemoved: Event<ITextModel>;\n\n\treadonly onModelLanguageChanged: Event<{ readonly model: ITextModel; readonly oldLanguageId: string }>;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../../base/common/event.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { ITextBufferFactory, ITextModel, ITextModelCreationOptions } from '../model.js';\nimport { ILanguageSelection } from '../languages/language.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { DocumentSemanticTokensProvider, DocumentRangeSemanticTokensProvider } from '../languages.js';\n\nexport const IModelService = createDecorator<IModelService>('modelService');\n\nexport type DocumentTokensProvider = DocumentSemanticTokensProvider | DocumentRangeSemanticTokensProvider;\n\nexport interface IModelService {\n\treadonly _serviceBrand: undefined;\n\n\tcreateModel(value: string | ITextBufferFactory, languageSelection: ILanguageSelection | null, resource?: URI, isForSimpleWidget?: boolean): ITextModel;\n\n\tgetModels(): ITextModel[];\n\n\tgetCreationOptions(language: string, resource: URI, isForSimpleWidget: boolean): ITextModelCreationOptions;\n\n\tgetModel(resource: URI): ITextModel | null;\n\n\treadonly onModelAdded: Event<ITextModel>;\n\n\treadonly onModelRemoved: Event<ITextModel>;\n\n\treadonly onModelLanguageChanged: Event<{ readonly model: ITextModel; readonly oldLanguageId: string }>;\n}\n"]}