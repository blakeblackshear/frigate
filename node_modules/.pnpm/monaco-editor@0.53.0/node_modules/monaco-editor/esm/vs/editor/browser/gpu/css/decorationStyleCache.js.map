{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/gpu/css/decorationStyleCache.ts","vs/editor/browser/gpu/css/decorationStyleCache.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,OAAO,EAAE,MAAM,gCAAgC,CAAC;AAwBzD,MAAM,OAAO,oBAAoB;IAAjC;QAES,YAAO,GAAG,CAAC,CAAC;QAEH,eAAU,GAAG,IAAI,GAAG,EAAsC,CAAC;QAC3D,kBAAa,GAAG,IAAI,OAAO,EAAwD,CAAC;IAgCtG,CAAC;IA9BA,gBAAgB,CACf,KAAyB,EACzB,IAAyB,EACzB,OAA2B;QAE3B,IAAI,KAAK,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YACxE,OAAO,CAAC,CAAC;QACV,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACjH,IAAI,MAAM,EAAE,CAAC;YACZ,OAAO,MAAM,CAAC,EAAE,CAAC;QAClB,CAAC;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAC1B,MAAM,KAAK,GAAG;YACb,EAAE;YACF,KAAK;YACL,IAAI;YACJ,OAAO;SACP,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzG,OAAO,EAAE,CAAC;IACX,CAAC;IAED,WAAW,CAAC,EAAU;QACrB,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;YACd,OAAO,SAAS,CAAC;QAClB,CAAC;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;CACD","file":"decorationStyleCache.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NKeyMap } from '../../../../base/common/map.js';\n\nexport interface IDecorationStyleSet {\n\t/**\n\t * A 24-bit number representing `color`.\n\t */\n\tcolor: number | undefined;\n\t/**\n\t * Whether the text should be rendered in bold.\n\t */\n\tbold: boolean | undefined;\n\t/**\n\t * A number between 0 and 1 representing the opacity of the text.\n\t */\n\topacity: number | undefined;\n}\n\nexport interface IDecorationStyleCacheEntry extends IDecorationStyleSet {\n\t/**\n\t * A unique identifier for this set of styles.\n\t */\n\tid: number;\n}\n\nexport class DecorationStyleCache {\n\n\tprivate _nextId = 1;\n\n\tprivate readonly _cacheById = new Map<number, IDecorationStyleCacheEntry>();\n\tprivate readonly _cacheByStyle = new NKeyMap<IDecorationStyleCacheEntry, [number, number, string]>();\n\n\tgetOrCreateEntry(\n\t\tcolor: number | undefined,\n\t\tbold: boolean | undefined,\n\t\topacity: number | undefined\n\t): number {\n\t\tif (color === undefined && bold === undefined && opacity === undefined) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst result = this._cacheByStyle.get(color ?? 0, bold ? 1 : 0, opacity === undefined ? '' : opacity.toFixed(2));\n\t\tif (result) {\n\t\t\treturn result.id;\n\t\t}\n\t\tconst id = this._nextId++;\n\t\tconst entry = {\n\t\t\tid,\n\t\t\tcolor,\n\t\t\tbold,\n\t\t\topacity,\n\t\t};\n\t\tthis._cacheById.set(id, entry);\n\t\tthis._cacheByStyle.set(entry, color ?? 0, bold ? 1 : 0, opacity === undefined ? '' : opacity.toFixed(2));\n\t\treturn id;\n\t}\n\n\tgetStyleSet(id: number): IDecorationStyleSet | undefined {\n\t\tif (id === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._cacheById.get(id);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { NKeyMap } from '../../../../base/common/map.js';\n\nexport interface IDecorationStyleSet {\n\t/**\n\t * A 24-bit number representing `color`.\n\t */\n\tcolor: number | undefined;\n\t/**\n\t * Whether the text should be rendered in bold.\n\t */\n\tbold: boolean | undefined;\n\t/**\n\t * A number between 0 and 1 representing the opacity of the text.\n\t */\n\topacity: number | undefined;\n}\n\nexport interface IDecorationStyleCacheEntry extends IDecorationStyleSet {\n\t/**\n\t * A unique identifier for this set of styles.\n\t */\n\tid: number;\n}\n\nexport class DecorationStyleCache {\n\n\tprivate _nextId = 1;\n\n\tprivate readonly _cacheById = new Map<number, IDecorationStyleCacheEntry>();\n\tprivate readonly _cacheByStyle = new NKeyMap<IDecorationStyleCacheEntry, [number, number, string]>();\n\n\tgetOrCreateEntry(\n\t\tcolor: number | undefined,\n\t\tbold: boolean | undefined,\n\t\topacity: number | undefined\n\t): number {\n\t\tif (color === undefined && bold === undefined && opacity === undefined) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst result = this._cacheByStyle.get(color ?? 0, bold ? 1 : 0, opacity === undefined ? '' : opacity.toFixed(2));\n\t\tif (result) {\n\t\t\treturn result.id;\n\t\t}\n\t\tconst id = this._nextId++;\n\t\tconst entry = {\n\t\t\tid,\n\t\t\tcolor,\n\t\t\tbold,\n\t\t\topacity,\n\t\t};\n\t\tthis._cacheById.set(id, entry);\n\t\tthis._cacheByStyle.set(entry, color ?? 0, bold ? 1 : 0, opacity === undefined ? '' : opacity.toFixed(2));\n\t\treturn id;\n\t}\n\n\tgetStyleSet(id: number): IDecorationStyleSet | undefined {\n\t\tif (id === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this._cacheById.get(id);\n\t}\n}\n"]}