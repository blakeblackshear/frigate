{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/contrib/snippet/browser/snippetSession.ts","vs/editor/contrib/snippet/browser/snippetSession.ts"],"names":[],"mappings":"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","file":"snippetSession.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { TextChange } from '../../../common/core/textChange.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IIdentifiedSingleEditOperation, ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { OvertypingCapturer } from '../../suggest/browser/suggestOvertypingCapturer.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Choice, Marker, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables.js';\nimport { EditSources, TextModelEditSource } from '../../../common/textModelEditSource.js';\n\nexport class OneSnippet {\n\n\tprivate _placeholderDecorations?: Map<Placeholder, string>;\n\tprivate _placeholderGroups: Placeholder[][];\n\tprivate _offset: number = -1;\n\t_placeholderGroupsIdx: number;\n\t_nestingLevel: number = 1;\n\n\tprivate static readonly _decor = {\n\t\tactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tinactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t\tinactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t};\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _snippet: TextmateSnippet,\n\t\tprivate readonly _snippetLineLeadingWhitespace: string\n\t) {\n\t\tthis._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n\t\tthis._placeholderGroupsIdx = -1;\n\t}\n\n\tinitialize(textChange: TextChange): void {\n\t\tthis._offset = textChange.newPosition;\n\t}\n\n\tdispose(): void {\n\t\tif (this._placeholderDecorations) {\n\t\t\tthis._editor.removeDecorations([...this._placeholderDecorations.values()]);\n\t\t}\n\t\tthis._placeholderGroups.length = 0;\n\t}\n\n\tprivate _initDecorations(): void {\n\n\t\tif (this._offset === -1) {\n\t\t\tthrow new Error(`Snippet not initialized!`);\n\t\t}\n\n\t\tif (this._placeholderDecorations) {\n\t\t\t// already initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis._placeholderDecorations = new Map<Placeholder, string>();\n\t\tconst model = this._editor.getModel();\n\n\t\tthis._editor.changeDecorations(accessor => {\n\t\t\t// create a decoration for each placeholder\n\t\t\tfor (const placeholder of this._snippet.placeholders) {\n\t\t\t\tconst placeholderOffset = this._snippet.offset(placeholder);\n\t\t\t\tconst placeholderLen = this._snippet.fullLen(placeholder);\n\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset),\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset + placeholderLen)\n\t\t\t\t);\n\t\t\t\tconst options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n\t\t\t\tconst handle = accessor.addDecoration(range, options);\n\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t}\n\t\t});\n\t}\n\n\tmove(fwd: boolean | undefined): Selection[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._initDecorations();\n\n\t\t// Transform placeholder text if necessary\n\t\tif (this._placeholderGroupsIdx >= 0) {\n\t\t\tconst operations: ISingleEditOperation[] = [];\n\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\t// Check if the placeholder has a transformation\n\t\t\t\tif (placeholder.transform) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\t\tconst currentValue = this._editor.getModel().getValueInRange(range);\n\t\t\t\t\tconst transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n\t\t\t\t\t// fix indentation for transformed lines\n\t\t\t\t\tfor (let i = 1; i < transformedValueLines.length; i++) {\n\t\t\t\t\t\ttransformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n\t\t\t\t\t}\n\t\t\t\t\toperations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operations.length > 0) {\n\t\t\t\tthis._editor.executeEdits('snippet.placeholderTransform', operations);\n\t\t\t}\n\t\t}\n\n\t\tlet couldSkipThisPlaceholder = false;\n\t\tif (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n\t\t\tthis._placeholderGroupsIdx += 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else if (fwd === false && this._placeholderGroupsIdx > 0) {\n\t\t\tthis._placeholderGroupsIdx -= 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else {\n\t\t\t// the selection of the current placeholder might\n\t\t\t// not acurate any more -> simply restore it\n\t\t}\n\n\t\tconst newSelections = this._editor.getModel().changeDecorations(accessor => {\n\n\t\t\tconst activePlaceholders = new Set<Placeholder>();\n\n\t\t\t// change stickiness to always grow when typing at its edges\n\t\t\t// because these decorations represent the currently active\n\t\t\t// tabstop.\n\t\t\t// Special case #1: reaching the final tabstop\n\t\t\t// Special case #2: placeholders enclosing active placeholders\n\t\t\tconst selections: Selection[] = [];\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tselections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n\n\t\t\t\t// consider to skip this placeholder index when the decoration\n\t\t\t\t// range is empty but when the placeholder wasn't. that's a strong\n\t\t\t\t// hint that the placeholder has been deleted. (all placeholder must match this)\n\t\t\t\tcouldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n\n\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\tactivePlaceholders.add(placeholder);\n\n\t\t\t\tfor (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(enclosingPlaceholder)!;\n\t\t\t\t\taccessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\t\tactivePlaceholders.add(enclosingPlaceholder);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// change stickness to never grow when typing at its edges\n\t\t\t// so that in-active tabstops never grow\n\t\t\tfor (const [placeholder, id] of this._placeholderDecorations!) {\n\t\t\t\tif (!activePlaceholders.has(placeholder)) {\n\t\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selections;\n\t\t});\n\n\t\treturn !couldSkipThisPlaceholder ? newSelections ?? [] : this.move(fwd);\n\t}\n\n\tprivate _hasPlaceholderBeenCollapsed(placeholder: Placeholder): boolean {\n\t\t// A placeholder is empty when it wasn't empty when authored but\n\t\t// when its tracking decoration is empty. This also applies to all\n\t\t// potential parent placeholders\n\t\tlet marker: Marker | undefined = placeholder;\n\t\twhile (marker) {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(marker)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tif (range.isEmpty() && marker.toString().length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarker = marker.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippet.placeholders.length > 0;\n\t}\n\n\t/**\n\t * A snippet is trivial when it has no placeholder or only a final placeholder at\n\t * its very end\n\t */\n\tget isTrivialSnippet(): boolean {\n\t\tif (this._snippet.placeholders.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._snippet.placeholders.length === 1) {\n\t\t\tconst [placeholder] = this._snippet.placeholders;\n\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\tif (this._snippet.rightMostDescendant === placeholder) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tcomputePossibleSelections() {\n\t\tconst result = new Map<number, Range[]>();\n\t\tfor (const placeholdersWithEqualIndex of this._placeholderGroups) {\n\t\t\tlet ranges: Range[] | undefined;\n\n\t\t\tfor (const placeholder of placeholdersWithEqualIndex) {\n\t\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\t\t// ignore those\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!ranges) {\n\t\t\t\t\tranges = [];\n\t\t\t\t\tresult.set(placeholder.index, ranges);\n\t\t\t\t}\n\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\t\t\tif (!range) {\n\t\t\t\t\t// one of the placeholder lost its decoration and\n\t\t\t\t\t// therefore we bail out and pretend the placeholder\n\t\t\t\t\t// (with its mirrors) doesn't exist anymore.\n\t\t\t\t\tresult.delete(placeholder.index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tranges.push(range);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\tif (!this._placeholderDecorations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n\t\tif (!placeholder?.choice) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst id = this._placeholderDecorations.get(placeholder);\n\t\tif (!id) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\tif (!range) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { range, choice: placeholder.choice };\n\t}\n\n\tget hasChoice(): boolean {\n\t\tlet result = false;\n\t\tthis._snippet.walk(marker => {\n\t\t\tresult = marker instanceof Choice;\n\t\t\treturn !result;\n\t\t});\n\t\treturn result;\n\t}\n\n\tmerge(others: OneSnippet[]): void {\n\n\t\tconst model = this._editor.getModel();\n\t\tthis._nestingLevel *= 10;\n\n\t\tthis._editor.changeDecorations(accessor => {\n\n\t\t\t// For each active placeholder take one snippet and merge it\n\t\t\t// in that the placeholder (can be many for `$1foo$1foo`). Because\n\t\t\t// everything is sorted by editor selection we can simply remove\n\t\t\t// elements from the beginning of the array\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst nested = others.shift()!;\n\t\t\t\tconsole.assert(nested._offset !== -1);\n\t\t\t\tconsole.assert(!nested._placeholderDecorations);\n\n\t\t\t\t// Massage placeholder-indicies of the nested snippet to be\n\t\t\t\t// sorted right after the insertion point. This ensures we move\n\t\t\t\t// through the placeholders in the correct order\n\t\t\t\tconst indexLastPlaceholder = nested._snippet.placeholderInfo.last!.index;\n\n\t\t\t\tfor (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n\t\t\t\t\tif (nestedPlaceholder.isFinalTabstop) {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._snippet.replace(placeholder, nested._snippet.children);\n\n\t\t\t\t// Remove the placeholder at which position are inserting\n\t\t\t\t// the snippet and also remove its decoration.\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\taccessor.removeDecoration(id);\n\t\t\t\tthis._placeholderDecorations!.delete(placeholder);\n\n\t\t\t\t// For each *new* placeholder we create decoration to monitor\n\t\t\t\t// how and if it grows/shrinks.\n\t\t\t\tfor (const placeholder of nested._snippet.placeholders) {\n\t\t\t\t\tconst placeholderOffset = nested._snippet.offset(placeholder);\n\t\t\t\t\tconst placeholderLen = nested._snippet.fullLen(placeholder);\n\t\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset),\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset + placeholderLen)\n\t\t\t\t\t);\n\t\t\t\t\tconst handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n\t\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Last, re-create the placeholder groups by sorting placeholders by their index.\n\t\t\tthis._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n\t\t});\n\t}\n}\n\nexport interface ISnippetSessionInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetSessionInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined\n};\n\nexport interface ISnippetEdit {\n\trange: Range;\n\ttemplate: string;\n\tkeepWhitespace?: boolean;\n}\n\nexport class SnippetSession {\n\n\tstatic adjustWhitespace(model: ITextModel, position: IPosition, adjustIndentation: boolean, snippet: TextmateSnippet, filter?: Set<Marker>): string {\n\t\tconst line = model.getLineContent(position.lineNumber);\n\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n\n\t\t// the snippet as inserted\n\t\tlet snippetTextString: string | undefined;\n\n\t\tsnippet.walk(marker => {\n\t\t\t// all text elements that are not inside choice\n\t\t\tif (!(marker instanceof Text) || marker.parent instanceof Choice) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// check with filter (iff provided)\n\t\t\tif (filter && !filter.has(marker)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst lines = marker.value.split(/\\r\\n|\\r|\\n/);\n\n\t\t\tif (adjustIndentation) {\n\t\t\t\t// adjust indentation of snippet test\n\t\t\t\t// -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n\t\t\t\t// -all N+1 lines get extra-indented and normalized\n\t\t\t\t// -the text start get extra-indented and normalized when following a linebreak\n\t\t\t\tconst offset = snippet.offset(marker);\n\t\t\t\tif (offset === 0) {\n\t\t\t\t\t// snippet start\n\t\t\t\t\tlines[0] = model.normalizeIndentation(lines[0]);\n\n\t\t\t\t} else {\n\t\t\t\t\t// check if text start is after a linebreak\n\t\t\t\t\tsnippetTextString = snippetTextString ?? snippet.toString();\n\t\t\t\t\tconst prevChar = snippetTextString.charCodeAt(offset - 1);\n\t\t\t\t\tif (prevChar === CharCode.LineFeed || prevChar === CharCode.CarriageReturn) {\n\t\t\t\t\t\tlines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\t\tlines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst newValue = lines.join(model.getEOL());\n\t\t\tif (newValue !== marker.value) {\n\t\t\t\tmarker.parent.replace(marker, [new Text(newValue)]);\n\t\t\t\tsnippetTextString = undefined;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\treturn lineLeadingWhitespace;\n\t}\n\n\tstatic adjustSelection(model: ITextModel, selection: Selection, overwriteBefore: number, overwriteAfter: number): Selection {\n\t\tif (overwriteBefore !== 0 || overwriteAfter !== 0) {\n\t\t\t// overwrite[Before|After] is compute using the position, not the whole\n\t\t\t// selection. therefore we adjust the selection around that position\n\t\t\tconst { positionLineNumber, positionColumn } = selection;\n\t\t\tconst positionColumnBefore = positionColumn - overwriteBefore;\n\t\t\tconst positionColumnAfter = positionColumn + overwriteAfter;\n\n\t\t\tconst range = model.validateRange({\n\t\t\t\tstartLineNumber: positionLineNumber,\n\t\t\t\tstartColumn: positionColumnBefore,\n\t\t\t\tendLineNumber: positionLineNumber,\n\t\t\t\tendColumn: positionColumnAfter\n\t\t\t});\n\n\t\t\tselection = Selection.createWithDirection(\n\t\t\t\trange.startLineNumber, range.startColumn,\n\t\t\t\trange.endLineNumber, range.endColumn,\n\t\t\t\tselection.getDirection()\n\t\t\t);\n\t\t}\n\t\treturn selection;\n\t}\n\n\tstatic createEditsAndSnippetsFromSelections(editor: IActiveCodeEditor, template: string, overwriteBefore: number, overwriteAfter: number, enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst snippets: OneSnippet[] = [];\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn { edits, snippets };\n\t\t}\n\t\tconst model = editor.getModel();\n\n\t\tconst workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n\t\tconst modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n\t\tconst readClipboardText = () => clipboardText;\n\n\t\t// know what text the overwrite[Before|After] extensions\n\t\t// of the primary cursor have selected because only when\n\t\t// secondary selections extend to the same text we can grow them\n\t\tconst firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n\t\tconst firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n\n\t\t// remember the first non-whitespace column to decide if\n\t\t// `keepWhitespace` should be overruled for secondary selections\n\t\tconst firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n\n\t\t// sort selections by their start position but remeber\n\t\t// the original index. that allows you to create correct\n\t\t// offset-based selection logic without changing the\n\t\t// primary selection\n\t\tconst indexedSelections = editor.getSelections()\n\t\t\t.map((selection, idx) => ({ selection, idx }))\n\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\tfor (const { selection, idx } of indexedSelections) {\n\n\t\t\t// extend selection with the `overwriteBefore` and `overwriteAfter` and then\n\t\t\t// compare if this matches the extensions of the primary selection\n\t\t\tlet extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n\t\t\tlet extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n\t\t\tif (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n\t\t\t\textensionBefore = selection;\n\t\t\t}\n\t\t\tif (firstAfterText !== model.getValueInRange(extensionAfter)) {\n\t\t\t\textensionAfter = selection;\n\t\t\t}\n\n\t\t\t// merge the before and after selection into one\n\t\t\tconst snippetSelection = selection\n\t\t\t\t.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n\t\t\t\t.setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n\n\t\t\tconst snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n\n\t\t\t// adjust the template string to match the indentation and\n\t\t\t// whitespace rules of this insert location (can be different for each cursor)\n\t\t\t// happens when being asked for (default) or when this is a secondary\n\t\t\t// cursor and the leading whitespace is different\n\t\t\tconst start = snippetSelection.getStartPosition();\n\t\t\tconst snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(\n\t\t\t\tmodel, start,\n\t\t\t\tadjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)),\n\t\t\t\tsnippet,\n\t\t\t);\n\n\t\t\tsnippet.resolveVariables(new CompositeSnippetVariableResolver([\n\t\t\t\tmodelBasedVariableResolver,\n\t\t\t\tnew ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\t\tnew SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n\t\t\t\tnew CommentBasedVariableResolver(model, selection, languageConfigurationService),\n\t\t\t\tnew TimeBasedVariableResolver,\n\t\t\t\tnew WorkspaceBasedVariableResolver(workspaceService),\n\t\t\t\tnew RandomBasedVariableResolver,\n\t\t\t]));\n\n\t\t\t// store snippets with the index of their originating selection.\n\t\t\t// that ensures the primary cursor stays primary despite not being\n\t\t\t// the one with lowest start position\n\t\t\tedits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n\t\t\tedits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedits[idx]._isTracked = true;\n\t\t\tsnippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n\t\t}\n\n\t\treturn { edits, snippets };\n\t}\n\n\tstatic createEditsAndSnippetsFromEdits(editor: IActiveCodeEditor, snippetEdits: ISnippetEdit[], enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\n\t\tif (!editor.hasModel() || snippetEdits.length === 0) {\n\t\t\treturn { edits: [], snippets: [] };\n\t\t}\n\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst model = editor.getModel();\n\n\t\tconst parser = new SnippetParser();\n\t\tconst snippet = new TextmateSnippet();\n\n\t\t// snippet variables resolver\n\t\tconst resolver = new CompositeSnippetVariableResolver([\n\t\t\teditor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n\t\t\tnew ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\tnew SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n\t\t\tnew CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n\t\t\tnew TimeBasedVariableResolver,\n\t\t\tnew WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n\t\t\tnew RandomBasedVariableResolver,\n\t\t]);\n\n\t\t//\n\t\tsnippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < snippetEdits.length; i++) {\n\n\t\t\tconst { range, template, keepWhitespace } = snippetEdits[i];\n\n\t\t\t// gaps between snippet edits are appended as text nodes. this\n\t\t\t// ensures placeholder-offsets are later correct\n\t\t\tif (i > 0) {\n\t\t\t\tconst lastRange = snippetEdits[i - 1].range;\n\t\t\t\tconst textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n\t\t\t\tconst textNode = new Text(model.getValueInRange(textRange));\n\t\t\t\tsnippet.appendChild(textNode);\n\t\t\t\toffset += textNode.value.length;\n\t\t\t}\n\n\t\t\tconst newNodes = parser.parseFragment(template, snippet);\n\t\t\tSnippetSession.adjustWhitespace(model, range.getStartPosition(), keepWhitespace !== undefined ? !keepWhitespace : adjustWhitespace, snippet, new Set(newNodes));\n\t\t\tsnippet.resolveVariables(resolver);\n\n\t\t\tconst snippetText = snippet.toString();\n\t\t\tconst snippetFragmentText = snippetText.slice(offset);\n\t\t\toffset = snippetText.length;\n\n\t\t\t// make edit\n\t\t\tconst edit: IIdentifiedSingleEditOperation = EditOperation.replace(range, snippetFragmentText);\n\t\t\tedit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedit._isTracked = true;\n\t\t\tedits.push(edit);\n\t\t}\n\n\t\t//\n\t\tparser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n\n\t\treturn {\n\t\t\tedits,\n\t\t\tsnippets: [new OneSnippet(editor, snippet, '')]\n\t\t};\n\t}\n\n\tprivate readonly _templateMerges: [number, number, string | ISnippetEdit[]][] = [];\n\tprivate _snippets: OneSnippet[] = [];\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _template: string | ISnippetEdit[],\n\t\tprivate readonly _options: ISnippetSessionInsertOptions = _defaultOptions,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) { }\n\n\tdispose(): void {\n\t\tdispose(this._snippets);\n\t}\n\n\t_logInfo(): string {\n\t\treturn `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n\t}\n\n\tinsert(editReason?: TextModelEditSource): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make insert edit and start with first selections\n\t\tconst { edits, snippets } = typeof this._template === 'string'\n\t\t\t? SnippetSession.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n\t\t\t: SnippetSession.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._snippets = snippets;\n\n\t\tthis._editor.executeEdits(editReason ?? EditSources.snippet(), edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder) {\n\t\t\t\treturn this._move(true);\n\t\t\t} else {\n\t\t\t\treturn undoEdits\n\t\t\t\t\t.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t\tthis._editor.revealRange(this._editor.getSelections()[0]);\n\t}\n\n\tmerge(template: string, options: ISnippetSessionInsertOptions = _defaultOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n\t\tconst { edits, snippets } = SnippetSession.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\t// Trivial snippets have no placeholder or are just the final placeholder. That means they\n\t\t\t// are just text insertions and we don't need to merge the nested snippet into the existing\n\t\t\t// snippet\n\t\t\tconst isTrivialSnippet = snippets[0].isTrivialSnippet;\n\t\t\tif (!isTrivialSnippet) {\n\t\t\t\tfor (const snippet of this._snippets) {\n\t\t\t\t\tsnippet.merge(snippets);\n\t\t\t\t}\n\t\t\t\tconsole.assert(snippets.length === 0);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n\t\t\t\treturn this._move(undefined);\n\t\t\t} else {\n\t\t\t\treturn undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t}\n\n\tnext(): void {\n\t\tconst newSelections = this._move(true);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprev(): void {\n\t\tconst newSelections = this._move(false);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprivate _move(fwd: boolean | undefined): Selection[] {\n\t\tconst selections: Selection[] = [];\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst oneSelection = snippet.move(fwd);\n\t\t\tselections.push(...oneSelection);\n\t\t}\n\t\treturn selections;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._snippets[0].isAtFirstPlaceholder;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._snippets[0].isAtLastPlaceholder;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippets[0].hasPlaceholder;\n\t}\n\n\tget hasChoice(): boolean {\n\t\treturn this._snippets[0].hasChoice;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\treturn this._snippets[0].activeChoice;\n\t}\n\n\tisSelectionWithinPlaceholders(): boolean {\n\n\t\tif (!this.hasPlaceholder) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._editor.getSelections();\n\t\tif (selections.length < this._snippets.length) {\n\t\t\t// this means we started snippet mode with N\n\t\t\t// selections and have M (N > M) selections.\n\t\t\t// So one snippet is without selection -> cancel\n\t\t\treturn false;\n\t\t}\n\n\t\tconst allPossibleSelections = new Map<number, Range[]>();\n\t\tfor (const snippet of this._snippets) {\n\n\t\t\tconst possibleSelections = snippet.computePossibleSelections();\n\n\t\t\t// for the first snippet find the placeholder (and its ranges)\n\t\t\t// that contain at least one selection. for all remaining snippets\n\t\t\t// the same placeholder (and their ranges) must be used.\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\tfor (const [index, ranges] of possibleSelections) {\n\t\t\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\t\t\t\t\tfor (const selection of selections) {\n\t\t\t\t\t\tif (ranges[0].containsRange(selection)) {\n\t\t\t\t\t\t\tallPossibleSelections.set(index, []);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\t// return false if we couldn't associate a selection to\n\t\t\t\t// this (the first) snippet\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// add selections from 'this' snippet so that we know all\n\t\t\t// selections for this placeholder\n\t\t\tallPossibleSelections.forEach((array, index) => {\n\t\t\t\tarray.push(...possibleSelections.get(index)!);\n\t\t\t});\n\t\t}\n\n\t\t// sort selections (and later placeholder-ranges). then walk both\n\t\t// arrays and make sure the placeholder-ranges contain the corresponding\n\t\t// selection\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (const [index, ranges] of allPossibleSelections) {\n\t\t\tif (ranges.length !== selections.length) {\n\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\n\t\t\tfor (let i = 0; i < ranges.length; i++) {\n\t\t\t\tif (!ranges[i].containsRange(selections[i])) {\n\t\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// from all possible selections we have deleted those\n\t\t// that don't match with the current selection. if we don't\n\t\t// have any left, we don't have a selection anymore\n\t\treturn allPossibleSelections.size > 0;\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from '../../../../base/common/arrays.js';\nimport { CharCode } from '../../../../base/common/charCode.js';\nimport { dispose } from '../../../../base/common/lifecycle.js';\nimport { getLeadingWhitespace } from '../../../../base/common/strings.js';\nimport './snippetSession.css';\nimport { IActiveCodeEditor } from '../../../browser/editorBrowser.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\nimport { EditOperation, ISingleEditOperation } from '../../../common/core/editOperation.js';\nimport { IPosition } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { TextChange } from '../../../common/core/textChange.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { IIdentifiedSingleEditOperation, ITextModel, TrackedRangeStickiness } from '../../../common/model.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { OvertypingCapturer } from '../../suggest/browser/suggestOvertypingCapturer.js';\nimport { ILabelService } from '../../../../platform/label/common/label.js';\nimport { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';\nimport { Choice, Marker, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser.js';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables.js';\nimport { EditSources, TextModelEditSource } from '../../../common/textModelEditSource.js';\n\nexport class OneSnippet {\n\n\tprivate _placeholderDecorations?: Map<Placeholder, string>;\n\tprivate _placeholderGroups: Placeholder[][];\n\tprivate _offset: number = -1;\n\t_placeholderGroupsIdx: number;\n\t_nestingLevel: number = 1;\n\n\tprivate static readonly _decor = {\n\t\tactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tinactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t\tinactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t};\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _snippet: TextmateSnippet,\n\t\tprivate readonly _snippetLineLeadingWhitespace: string\n\t) {\n\t\tthis._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n\t\tthis._placeholderGroupsIdx = -1;\n\t}\n\n\tinitialize(textChange: TextChange): void {\n\t\tthis._offset = textChange.newPosition;\n\t}\n\n\tdispose(): void {\n\t\tif (this._placeholderDecorations) {\n\t\t\tthis._editor.removeDecorations([...this._placeholderDecorations.values()]);\n\t\t}\n\t\tthis._placeholderGroups.length = 0;\n\t}\n\n\tprivate _initDecorations(): void {\n\n\t\tif (this._offset === -1) {\n\t\t\tthrow new Error(`Snippet not initialized!`);\n\t\t}\n\n\t\tif (this._placeholderDecorations) {\n\t\t\t// already initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis._placeholderDecorations = new Map<Placeholder, string>();\n\t\tconst model = this._editor.getModel();\n\n\t\tthis._editor.changeDecorations(accessor => {\n\t\t\t// create a decoration for each placeholder\n\t\t\tfor (const placeholder of this._snippet.placeholders) {\n\t\t\t\tconst placeholderOffset = this._snippet.offset(placeholder);\n\t\t\t\tconst placeholderLen = this._snippet.fullLen(placeholder);\n\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset),\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset + placeholderLen)\n\t\t\t\t);\n\t\t\t\tconst options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n\t\t\t\tconst handle = accessor.addDecoration(range, options);\n\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t}\n\t\t});\n\t}\n\n\tmove(fwd: boolean | undefined): Selection[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._initDecorations();\n\n\t\t// Transform placeholder text if necessary\n\t\tif (this._placeholderGroupsIdx >= 0) {\n\t\t\tconst operations: ISingleEditOperation[] = [];\n\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\t// Check if the placeholder has a transformation\n\t\t\t\tif (placeholder.transform) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\t\tconst currentValue = this._editor.getModel().getValueInRange(range);\n\t\t\t\t\tconst transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n\t\t\t\t\t// fix indentation for transformed lines\n\t\t\t\t\tfor (let i = 1; i < transformedValueLines.length; i++) {\n\t\t\t\t\t\ttransformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n\t\t\t\t\t}\n\t\t\t\t\toperations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operations.length > 0) {\n\t\t\t\tthis._editor.executeEdits('snippet.placeholderTransform', operations);\n\t\t\t}\n\t\t}\n\n\t\tlet couldSkipThisPlaceholder = false;\n\t\tif (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n\t\t\tthis._placeholderGroupsIdx += 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else if (fwd === false && this._placeholderGroupsIdx > 0) {\n\t\t\tthis._placeholderGroupsIdx -= 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else {\n\t\t\t// the selection of the current placeholder might\n\t\t\t// not acurate any more -> simply restore it\n\t\t}\n\n\t\tconst newSelections = this._editor.getModel().changeDecorations(accessor => {\n\n\t\t\tconst activePlaceholders = new Set<Placeholder>();\n\n\t\t\t// change stickiness to always grow when typing at its edges\n\t\t\t// because these decorations represent the currently active\n\t\t\t// tabstop.\n\t\t\t// Special case #1: reaching the final tabstop\n\t\t\t// Special case #2: placeholders enclosing active placeholders\n\t\t\tconst selections: Selection[] = [];\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tselections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n\n\t\t\t\t// consider to skip this placeholder index when the decoration\n\t\t\t\t// range is empty but when the placeholder wasn't. that's a strong\n\t\t\t\t// hint that the placeholder has been deleted. (all placeholder must match this)\n\t\t\t\tcouldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n\n\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\tactivePlaceholders.add(placeholder);\n\n\t\t\t\tfor (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(enclosingPlaceholder)!;\n\t\t\t\t\taccessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\t\tactivePlaceholders.add(enclosingPlaceholder);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// change stickness to never grow when typing at its edges\n\t\t\t// so that in-active tabstops never grow\n\t\t\tfor (const [placeholder, id] of this._placeholderDecorations!) {\n\t\t\t\tif (!activePlaceholders.has(placeholder)) {\n\t\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selections;\n\t\t});\n\n\t\treturn !couldSkipThisPlaceholder ? newSelections ?? [] : this.move(fwd);\n\t}\n\n\tprivate _hasPlaceholderBeenCollapsed(placeholder: Placeholder): boolean {\n\t\t// A placeholder is empty when it wasn't empty when authored but\n\t\t// when its tracking decoration is empty. This also applies to all\n\t\t// potential parent placeholders\n\t\tlet marker: Marker | undefined = placeholder;\n\t\twhile (marker) {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(marker)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tif (range.isEmpty() && marker.toString().length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarker = marker.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippet.placeholders.length > 0;\n\t}\n\n\t/**\n\t * A snippet is trivial when it has no placeholder or only a final placeholder at\n\t * its very end\n\t */\n\tget isTrivialSnippet(): boolean {\n\t\tif (this._snippet.placeholders.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._snippet.placeholders.length === 1) {\n\t\t\tconst [placeholder] = this._snippet.placeholders;\n\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\tif (this._snippet.rightMostDescendant === placeholder) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tcomputePossibleSelections() {\n\t\tconst result = new Map<number, Range[]>();\n\t\tfor (const placeholdersWithEqualIndex of this._placeholderGroups) {\n\t\t\tlet ranges: Range[] | undefined;\n\n\t\t\tfor (const placeholder of placeholdersWithEqualIndex) {\n\t\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\t\t// ignore those\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!ranges) {\n\t\t\t\t\tranges = [];\n\t\t\t\t\tresult.set(placeholder.index, ranges);\n\t\t\t\t}\n\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\t\t\tif (!range) {\n\t\t\t\t\t// one of the placeholder lost its decoration and\n\t\t\t\t\t// therefore we bail out and pretend the placeholder\n\t\t\t\t\t// (with its mirrors) doesn't exist anymore.\n\t\t\t\t\tresult.delete(placeholder.index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tranges.push(range);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\tif (!this._placeholderDecorations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n\t\tif (!placeholder?.choice) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst id = this._placeholderDecorations.get(placeholder);\n\t\tif (!id) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\tif (!range) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { range, choice: placeholder.choice };\n\t}\n\n\tget hasChoice(): boolean {\n\t\tlet result = false;\n\t\tthis._snippet.walk(marker => {\n\t\t\tresult = marker instanceof Choice;\n\t\t\treturn !result;\n\t\t});\n\t\treturn result;\n\t}\n\n\tmerge(others: OneSnippet[]): void {\n\n\t\tconst model = this._editor.getModel();\n\t\tthis._nestingLevel *= 10;\n\n\t\tthis._editor.changeDecorations(accessor => {\n\n\t\t\t// For each active placeholder take one snippet and merge it\n\t\t\t// in that the placeholder (can be many for `$1foo$1foo`). Because\n\t\t\t// everything is sorted by editor selection we can simply remove\n\t\t\t// elements from the beginning of the array\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst nested = others.shift()!;\n\t\t\t\tconsole.assert(nested._offset !== -1);\n\t\t\t\tconsole.assert(!nested._placeholderDecorations);\n\n\t\t\t\t// Massage placeholder-indicies of the nested snippet to be\n\t\t\t\t// sorted right after the insertion point. This ensures we move\n\t\t\t\t// through the placeholders in the correct order\n\t\t\t\tconst indexLastPlaceholder = nested._snippet.placeholderInfo.last!.index;\n\n\t\t\t\tfor (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n\t\t\t\t\tif (nestedPlaceholder.isFinalTabstop) {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._snippet.replace(placeholder, nested._snippet.children);\n\n\t\t\t\t// Remove the placeholder at which position are inserting\n\t\t\t\t// the snippet and also remove its decoration.\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\taccessor.removeDecoration(id);\n\t\t\t\tthis._placeholderDecorations!.delete(placeholder);\n\n\t\t\t\t// For each *new* placeholder we create decoration to monitor\n\t\t\t\t// how and if it grows/shrinks.\n\t\t\t\tfor (const placeholder of nested._snippet.placeholders) {\n\t\t\t\t\tconst placeholderOffset = nested._snippet.offset(placeholder);\n\t\t\t\t\tconst placeholderLen = nested._snippet.fullLen(placeholder);\n\t\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset),\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset + placeholderLen)\n\t\t\t\t\t);\n\t\t\t\t\tconst handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n\t\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Last, re-create the placeholder groups by sorting placeholders by their index.\n\t\t\tthis._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n\t\t});\n\t}\n}\n\nexport interface ISnippetSessionInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetSessionInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined\n};\n\nexport interface ISnippetEdit {\n\trange: Range;\n\ttemplate: string;\n\tkeepWhitespace?: boolean;\n}\n\nexport class SnippetSession {\n\n\tstatic adjustWhitespace(model: ITextModel, position: IPosition, adjustIndentation: boolean, snippet: TextmateSnippet, filter?: Set<Marker>): string {\n\t\tconst line = model.getLineContent(position.lineNumber);\n\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n\n\t\t// the snippet as inserted\n\t\tlet snippetTextString: string | undefined;\n\n\t\tsnippet.walk(marker => {\n\t\t\t// all text elements that are not inside choice\n\t\t\tif (!(marker instanceof Text) || marker.parent instanceof Choice) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// check with filter (iff provided)\n\t\t\tif (filter && !filter.has(marker)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst lines = marker.value.split(/\\r\\n|\\r|\\n/);\n\n\t\t\tif (adjustIndentation) {\n\t\t\t\t// adjust indentation of snippet test\n\t\t\t\t// -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n\t\t\t\t// -all N+1 lines get extra-indented and normalized\n\t\t\t\t// -the text start get extra-indented and normalized when following a linebreak\n\t\t\t\tconst offset = snippet.offset(marker);\n\t\t\t\tif (offset === 0) {\n\t\t\t\t\t// snippet start\n\t\t\t\t\tlines[0] = model.normalizeIndentation(lines[0]);\n\n\t\t\t\t} else {\n\t\t\t\t\t// check if text start is after a linebreak\n\t\t\t\t\tsnippetTextString = snippetTextString ?? snippet.toString();\n\t\t\t\t\tconst prevChar = snippetTextString.charCodeAt(offset - 1);\n\t\t\t\t\tif (prevChar === CharCode.LineFeed || prevChar === CharCode.CarriageReturn) {\n\t\t\t\t\t\tlines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\t\tlines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst newValue = lines.join(model.getEOL());\n\t\t\tif (newValue !== marker.value) {\n\t\t\t\tmarker.parent.replace(marker, [new Text(newValue)]);\n\t\t\t\tsnippetTextString = undefined;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\treturn lineLeadingWhitespace;\n\t}\n\n\tstatic adjustSelection(model: ITextModel, selection: Selection, overwriteBefore: number, overwriteAfter: number): Selection {\n\t\tif (overwriteBefore !== 0 || overwriteAfter !== 0) {\n\t\t\t// overwrite[Before|After] is compute using the position, not the whole\n\t\t\t// selection. therefore we adjust the selection around that position\n\t\t\tconst { positionLineNumber, positionColumn } = selection;\n\t\t\tconst positionColumnBefore = positionColumn - overwriteBefore;\n\t\t\tconst positionColumnAfter = positionColumn + overwriteAfter;\n\n\t\t\tconst range = model.validateRange({\n\t\t\t\tstartLineNumber: positionLineNumber,\n\t\t\t\tstartColumn: positionColumnBefore,\n\t\t\t\tendLineNumber: positionLineNumber,\n\t\t\t\tendColumn: positionColumnAfter\n\t\t\t});\n\n\t\t\tselection = Selection.createWithDirection(\n\t\t\t\trange.startLineNumber, range.startColumn,\n\t\t\t\trange.endLineNumber, range.endColumn,\n\t\t\t\tselection.getDirection()\n\t\t\t);\n\t\t}\n\t\treturn selection;\n\t}\n\n\tstatic createEditsAndSnippetsFromSelections(editor: IActiveCodeEditor, template: string, overwriteBefore: number, overwriteAfter: number, enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst snippets: OneSnippet[] = [];\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn { edits, snippets };\n\t\t}\n\t\tconst model = editor.getModel();\n\n\t\tconst workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n\t\tconst modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n\t\tconst readClipboardText = () => clipboardText;\n\n\t\t// know what text the overwrite[Before|After] extensions\n\t\t// of the primary cursor have selected because only when\n\t\t// secondary selections extend to the same text we can grow them\n\t\tconst firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n\t\tconst firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n\n\t\t// remember the first non-whitespace column to decide if\n\t\t// `keepWhitespace` should be overruled for secondary selections\n\t\tconst firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n\n\t\t// sort selections by their start position but remeber\n\t\t// the original index. that allows you to create correct\n\t\t// offset-based selection logic without changing the\n\t\t// primary selection\n\t\tconst indexedSelections = editor.getSelections()\n\t\t\t.map((selection, idx) => ({ selection, idx }))\n\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\tfor (const { selection, idx } of indexedSelections) {\n\n\t\t\t// extend selection with the `overwriteBefore` and `overwriteAfter` and then\n\t\t\t// compare if this matches the extensions of the primary selection\n\t\t\tlet extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n\t\t\tlet extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n\t\t\tif (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n\t\t\t\textensionBefore = selection;\n\t\t\t}\n\t\t\tif (firstAfterText !== model.getValueInRange(extensionAfter)) {\n\t\t\t\textensionAfter = selection;\n\t\t\t}\n\n\t\t\t// merge the before and after selection into one\n\t\t\tconst snippetSelection = selection\n\t\t\t\t.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n\t\t\t\t.setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n\n\t\t\tconst snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n\n\t\t\t// adjust the template string to match the indentation and\n\t\t\t// whitespace rules of this insert location (can be different for each cursor)\n\t\t\t// happens when being asked for (default) or when this is a secondary\n\t\t\t// cursor and the leading whitespace is different\n\t\t\tconst start = snippetSelection.getStartPosition();\n\t\t\tconst snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(\n\t\t\t\tmodel, start,\n\t\t\t\tadjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)),\n\t\t\t\tsnippet,\n\t\t\t);\n\n\t\t\tsnippet.resolveVariables(new CompositeSnippetVariableResolver([\n\t\t\t\tmodelBasedVariableResolver,\n\t\t\t\tnew ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\t\tnew SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n\t\t\t\tnew CommentBasedVariableResolver(model, selection, languageConfigurationService),\n\t\t\t\tnew TimeBasedVariableResolver,\n\t\t\t\tnew WorkspaceBasedVariableResolver(workspaceService),\n\t\t\t\tnew RandomBasedVariableResolver,\n\t\t\t]));\n\n\t\t\t// store snippets with the index of their originating selection.\n\t\t\t// that ensures the primary cursor stays primary despite not being\n\t\t\t// the one with lowest start position\n\t\t\tedits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n\t\t\tedits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedits[idx]._isTracked = true;\n\t\t\tsnippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n\t\t}\n\n\t\treturn { edits, snippets };\n\t}\n\n\tstatic createEditsAndSnippetsFromEdits(editor: IActiveCodeEditor, snippetEdits: ISnippetEdit[], enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\n\t\tif (!editor.hasModel() || snippetEdits.length === 0) {\n\t\t\treturn { edits: [], snippets: [] };\n\t\t}\n\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst model = editor.getModel();\n\n\t\tconst parser = new SnippetParser();\n\t\tconst snippet = new TextmateSnippet();\n\n\t\t// snippet variables resolver\n\t\tconst resolver = new CompositeSnippetVariableResolver([\n\t\t\teditor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n\t\t\tnew ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\tnew SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n\t\t\tnew CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n\t\t\tnew TimeBasedVariableResolver,\n\t\t\tnew WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n\t\t\tnew RandomBasedVariableResolver,\n\t\t]);\n\n\t\t//\n\t\tsnippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < snippetEdits.length; i++) {\n\n\t\t\tconst { range, template, keepWhitespace } = snippetEdits[i];\n\n\t\t\t// gaps between snippet edits are appended as text nodes. this\n\t\t\t// ensures placeholder-offsets are later correct\n\t\t\tif (i > 0) {\n\t\t\t\tconst lastRange = snippetEdits[i - 1].range;\n\t\t\t\tconst textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n\t\t\t\tconst textNode = new Text(model.getValueInRange(textRange));\n\t\t\t\tsnippet.appendChild(textNode);\n\t\t\t\toffset += textNode.value.length;\n\t\t\t}\n\n\t\t\tconst newNodes = parser.parseFragment(template, snippet);\n\t\t\tSnippetSession.adjustWhitespace(model, range.getStartPosition(), keepWhitespace !== undefined ? !keepWhitespace : adjustWhitespace, snippet, new Set(newNodes));\n\t\t\tsnippet.resolveVariables(resolver);\n\n\t\t\tconst snippetText = snippet.toString();\n\t\t\tconst snippetFragmentText = snippetText.slice(offset);\n\t\t\toffset = snippetText.length;\n\n\t\t\t// make edit\n\t\t\tconst edit: IIdentifiedSingleEditOperation = EditOperation.replace(range, snippetFragmentText);\n\t\t\tedit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedit._isTracked = true;\n\t\t\tedits.push(edit);\n\t\t}\n\n\t\t//\n\t\tparser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n\n\t\treturn {\n\t\t\tedits,\n\t\t\tsnippets: [new OneSnippet(editor, snippet, '')]\n\t\t};\n\t}\n\n\tprivate readonly _templateMerges: [number, number, string | ISnippetEdit[]][] = [];\n\tprivate _snippets: OneSnippet[] = [];\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _template: string | ISnippetEdit[],\n\t\tprivate readonly _options: ISnippetSessionInsertOptions = _defaultOptions,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) { }\n\n\tdispose(): void {\n\t\tdispose(this._snippets);\n\t}\n\n\t_logInfo(): string {\n\t\treturn `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n\t}\n\n\tinsert(editReason?: TextModelEditSource): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make insert edit and start with first selections\n\t\tconst { edits, snippets } = typeof this._template === 'string'\n\t\t\t? SnippetSession.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n\t\t\t: SnippetSession.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._snippets = snippets;\n\n\t\tthis._editor.executeEdits(editReason ?? EditSources.snippet(), edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder) {\n\t\t\t\treturn this._move(true);\n\t\t\t} else {\n\t\t\t\treturn undoEdits\n\t\t\t\t\t.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t\tthis._editor.revealRange(this._editor.getSelections()[0]);\n\t}\n\n\tmerge(template: string, options: ISnippetSessionInsertOptions = _defaultOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n\t\tconst { edits, snippets } = SnippetSession.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\t// Trivial snippets have no placeholder or are just the final placeholder. That means they\n\t\t\t// are just text insertions and we don't need to merge the nested snippet into the existing\n\t\t\t// snippet\n\t\t\tconst isTrivialSnippet = snippets[0].isTrivialSnippet;\n\t\t\tif (!isTrivialSnippet) {\n\t\t\t\tfor (const snippet of this._snippets) {\n\t\t\t\t\tsnippet.merge(snippets);\n\t\t\t\t}\n\t\t\t\tconsole.assert(snippets.length === 0);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n\t\t\t\treturn this._move(undefined);\n\t\t\t} else {\n\t\t\t\treturn undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t}\n\n\tnext(): void {\n\t\tconst newSelections = this._move(true);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprev(): void {\n\t\tconst newSelections = this._move(false);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprivate _move(fwd: boolean | undefined): Selection[] {\n\t\tconst selections: Selection[] = [];\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst oneSelection = snippet.move(fwd);\n\t\t\tselections.push(...oneSelection);\n\t\t}\n\t\treturn selections;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._snippets[0].isAtFirstPlaceholder;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._snippets[0].isAtLastPlaceholder;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippets[0].hasPlaceholder;\n\t}\n\n\tget hasChoice(): boolean {\n\t\treturn this._snippets[0].hasChoice;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\treturn this._snippets[0].activeChoice;\n\t}\n\n\tisSelectionWithinPlaceholders(): boolean {\n\n\t\tif (!this.hasPlaceholder) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._editor.getSelections();\n\t\tif (selections.length < this._snippets.length) {\n\t\t\t// this means we started snippet mode with N\n\t\t\t// selections and have M (N > M) selections.\n\t\t\t// So one snippet is without selection -> cancel\n\t\t\treturn false;\n\t\t}\n\n\t\tconst allPossibleSelections = new Map<number, Range[]>();\n\t\tfor (const snippet of this._snippets) {\n\n\t\t\tconst possibleSelections = snippet.computePossibleSelections();\n\n\t\t\t// for the first snippet find the placeholder (and its ranges)\n\t\t\t// that contain at least one selection. for all remaining snippets\n\t\t\t// the same placeholder (and their ranges) must be used.\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\tfor (const [index, ranges] of possibleSelections) {\n\t\t\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\t\t\t\t\tfor (const selection of selections) {\n\t\t\t\t\t\tif (ranges[0].containsRange(selection)) {\n\t\t\t\t\t\t\tallPossibleSelections.set(index, []);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\t// return false if we couldn't associate a selection to\n\t\t\t\t// this (the first) snippet\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// add selections from 'this' snippet so that we know all\n\t\t\t// selections for this placeholder\n\t\t\tallPossibleSelections.forEach((array, index) => {\n\t\t\t\tarray.push(...possibleSelections.get(index)!);\n\t\t\t});\n\t\t}\n\n\t\t// sort selections (and later placeholder-ranges). then walk both\n\t\t// arrays and make sure the placeholder-ranges contain the corresponding\n\t\t// selection\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (const [index, ranges] of allPossibleSelections) {\n\t\t\tif (ranges.length !== selections.length) {\n\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\n\t\t\tfor (let i = 0; i < ranges.length; i++) {\n\t\t\t\tif (!ranges[i].containsRange(selections[i])) {\n\t\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// from all possible selections we have deleted those\n\t\t// that don't match with the current selection. if we don't\n\t\t// have any left, we don't have a selection anymore\n\t\treturn allPossibleSelections.size > 0;\n\t}\n}\n"]}