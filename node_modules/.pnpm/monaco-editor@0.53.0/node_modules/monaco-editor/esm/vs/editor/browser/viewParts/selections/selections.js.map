{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/viewParts/selections/selections.ts","vs/editor/browser/viewParts/selections/selections.ts"],"names":[],"mappings":"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","file":"selections.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange, LineVisibleRanges, RenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\n\nconst enum CornerStyle {\n\tEXTERN,\n\tINTERN,\n\tFLAT\n}\n\ninterface IVisibleRangeEndPointStyle {\n\ttop: CornerStyle;\n\tbottom: CornerStyle;\n}\n\nclass HorizontalRangeWithStyle {\n\tpublic left: number;\n\tpublic width: number;\n\tpublic startStyle: IVisibleRangeEndPointStyle | null;\n\tpublic endStyle: IVisibleRangeEndPointStyle | null;\n\n\tconstructor(other: HorizontalRange) {\n\t\tthis.left = other.left;\n\t\tthis.width = other.width;\n\t\tthis.startStyle = null;\n\t\tthis.endStyle = null;\n\t}\n}\n\nclass LineVisibleRangesWithStyle {\n\tpublic lineNumber: number;\n\tpublic ranges: HorizontalRangeWithStyle[];\n\n\tconstructor(lineNumber: number, ranges: HorizontalRangeWithStyle[]) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.ranges = ranges;\n\t}\n}\n\nfunction toStyledRange(item: HorizontalRange): HorizontalRangeWithStyle {\n\treturn new HorizontalRangeWithStyle(item);\n}\n\nfunction toStyled(item: LineVisibleRanges): LineVisibleRangesWithStyle {\n\treturn new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\n\n/**\n * This view part displays selected text to the user. Every line has its own selection overlay.\n */\nexport class SelectionsOverlay extends DynamicViewOverlay {\n\n\tprivate static readonly SELECTION_CLASS_NAME = 'selected-text';\n\tprivate static readonly SELECTION_TOP_LEFT = 'top-left-radius';\n\tprivate static readonly SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\n\tprivate static readonly SELECTION_TOP_RIGHT = 'top-right-radius';\n\tprivate static readonly SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\n\tprivate static readonly EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\n\n\tprivate static readonly ROUNDED_PIECE_WIDTH = 10;\n\n\tprivate readonly _context: ViewContext;\n\tprivate _roundedSelection: boolean;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _selections: Range[];\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tconst options = this._context.configuration.options;\n\t\tthis._roundedSelection = options.get(EditorOption.roundedSelection);\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tthis._selections = [];\n\t\tthis._renderResult = null;\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tthis._roundedSelection = options.get(EditorOption.roundedSelection);\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections.slice(0);\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;//e.inlineDecorationsChanged;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tprivate _visibleRangesHaveGaps(linesVisibleRanges: LineVisibleRangesWithStyle[]): boolean {\n\n\t\tfor (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n\t\t\tconst lineVisibleRanges = linesVisibleRanges[i];\n\n\t\t\tif (lineVisibleRanges.ranges.length > 1) {\n\t\t\t\t// There are two ranges on the same line\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _enrichVisibleRangesWithStyle(viewport: Range, linesVisibleRanges: LineVisibleRangesWithStyle[], previousFrame: LineVisibleRangesWithStyle[] | null): void {\n\t\tconst epsilon = this._typicalHalfwidthCharacterWidth / 4;\n\t\tlet previousFrameTop: HorizontalRangeWithStyle | null = null;\n\t\tlet previousFrameBottom: HorizontalRangeWithStyle | null = null;\n\n\t\tif (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n\n\t\t\tconst topLineNumber = linesVisibleRanges[0].lineNumber;\n\t\t\tif (topLineNumber === viewport.startLineNumber) {\n\t\t\t\tfor (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n\t\t\t\t\tif (previousFrame[i].lineNumber === topLineNumber) {\n\t\t\t\t\t\tpreviousFrameTop = previousFrame[i].ranges[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n\t\t\tif (bottomLineNumber === viewport.endLineNumber) {\n\t\t\t\tfor (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n\t\t\t\t\tif (previousFrame[i].lineNumber === bottomLineNumber) {\n\t\t\t\t\t\tpreviousFrameBottom = previousFrame[i].ranges[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (previousFrameTop && !previousFrameTop.startStyle) {\n\t\t\t\tpreviousFrameTop = null;\n\t\t\t}\n\t\t\tif (previousFrameBottom && !previousFrameBottom.startStyle) {\n\t\t\t\tpreviousFrameBottom = null;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n\t\t\t// We know for a fact that there is precisely one range on each line\n\t\t\tconst curLineRange = linesVisibleRanges[i].ranges[0];\n\t\t\tconst curLeft = curLineRange.left;\n\t\t\tconst curRight = curLineRange.left + curLineRange.width;\n\n\t\t\tconst startStyle = {\n\t\t\t\ttop: CornerStyle.EXTERN,\n\t\t\t\tbottom: CornerStyle.EXTERN\n\t\t\t};\n\n\t\t\tconst endStyle = {\n\t\t\t\ttop: CornerStyle.EXTERN,\n\t\t\t\tbottom: CornerStyle.EXTERN\n\t\t\t};\n\n\t\t\tif (i > 0) {\n\t\t\t\t// Look above\n\t\t\t\tconst prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n\t\t\t\tconst prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n\n\t\t\t\tif (abs(curLeft - prevLeft) < epsilon) {\n\t\t\t\t\tstartStyle.top = CornerStyle.FLAT;\n\t\t\t\t} else if (curLeft > prevLeft) {\n\t\t\t\t\tstartStyle.top = CornerStyle.INTERN;\n\t\t\t\t}\n\n\t\t\t\tif (abs(curRight - prevRight) < epsilon) {\n\t\t\t\t\tendStyle.top = CornerStyle.FLAT;\n\t\t\t\t} else if (prevLeft < curRight && curRight < prevRight) {\n\t\t\t\t\tendStyle.top = CornerStyle.INTERN;\n\t\t\t\t}\n\t\t\t} else if (previousFrameTop) {\n\t\t\t\t// Accept some hiccups near the viewport edges to save on repaints\n\t\t\t\tstartStyle.top = previousFrameTop.startStyle!.top;\n\t\t\t\tendStyle.top = previousFrameTop.endStyle!.top;\n\t\t\t}\n\n\t\t\tif (i + 1 < len) {\n\t\t\t\t// Look below\n\t\t\t\tconst nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n\t\t\t\tconst nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n\n\t\t\t\tif (abs(curLeft - nextLeft) < epsilon) {\n\t\t\t\t\tstartStyle.bottom = CornerStyle.FLAT;\n\t\t\t\t} else if (nextLeft < curLeft && curLeft < nextRight) {\n\t\t\t\t\tstartStyle.bottom = CornerStyle.INTERN;\n\t\t\t\t}\n\n\t\t\t\tif (abs(curRight - nextRight) < epsilon) {\n\t\t\t\t\tendStyle.bottom = CornerStyle.FLAT;\n\t\t\t\t} else if (curRight < nextRight) {\n\t\t\t\t\tendStyle.bottom = CornerStyle.INTERN;\n\t\t\t\t}\n\t\t\t} else if (previousFrameBottom) {\n\t\t\t\t// Accept some hiccups near the viewport edges to save on repaints\n\t\t\t\tstartStyle.bottom = previousFrameBottom.startStyle!.bottom;\n\t\t\t\tendStyle.bottom = previousFrameBottom.endStyle!.bottom;\n\t\t\t}\n\n\t\t\tcurLineRange.startStyle = startStyle;\n\t\t\tcurLineRange.endStyle = endStyle;\n\t\t}\n\t}\n\n\tprivate _getVisibleRangesWithStyle(selection: Range, ctx: RenderingContext, previousFrame: LineVisibleRangesWithStyle[] | null): LineVisibleRangesWithStyle[] {\n\t\tconst _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n\t\tconst linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n\t\tconst visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n\n\t\tif (!visibleRangesHaveGaps && this._roundedSelection) {\n\t\t\tthis._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n\t\t}\n\n\t\t// The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n\t\treturn linesVisibleRanges;\n\t}\n\n\tprivate _createSelectionPiece(top: number, bottom: number, className: string, left: number, width: number): string {\n\t\treturn (\n\t\t\t'<div class=\"cslr '\n\t\t\t+ className\n\t\t\t+ '\" style=\"'\n\t\t\t+ 'top:' + top.toString() + 'px;'\n\t\t\t+ 'bottom:' + bottom.toString() + 'px;'\n\t\t\t+ 'left:' + left.toString() + 'px;'\n\t\t\t+ 'width:' + width.toString() + 'px;'\n\t\t\t+ '\"></div>'\n\t\t);\n\t}\n\n\tprivate _actualRenderOneSelection(output2: [string, string][], visibleStartLineNumber: number, hasMultipleSelections: boolean, visibleRanges: LineVisibleRangesWithStyle[]): void {\n\t\tif (visibleRanges.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n\n\t\tconst firstLineNumber = visibleRanges[0].lineNumber;\n\t\tconst lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n\n\t\tfor (let i = 0, len = visibleRanges.length; i < len; i++) {\n\t\t\tconst lineVisibleRanges = visibleRanges[i];\n\t\t\tconst lineNumber = lineVisibleRanges.lineNumber;\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\n\t\t\tconst top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n\t\t\tconst bottom = hasMultipleSelections ? (lineNumber !== firstLineNumber && lineNumber === lastLineNumber ? 1 : 0) : 0;\n\n\t\t\tlet innerCornerOutput = '';\n\t\t\tlet restOfSelectionOutput = '';\n\n\t\t\tfor (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst visibleRange = lineVisibleRanges.ranges[j];\n\n\t\t\t\tif (visibleRangesHaveStyle) {\n\t\t\t\t\tconst startStyle = visibleRange.startStyle!;\n\t\t\t\t\tconst endStyle = visibleRange.endStyle!;\n\t\t\t\t\tif (startStyle.top === CornerStyle.INTERN || startStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t// Reverse rounded corner to the left\n\n\t\t\t\t\t\t// First comes the selection (blue layer)\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\n\t\t\t\t\t\t// Second comes the background (white layer) with inverse border radius\n\t\t\t\t\t\tlet className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n\t\t\t\t\t\tif (startStyle.top === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (startStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.top === CornerStyle.INTERN || endStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t// Reverse rounded corner to the right\n\n\t\t\t\t\t\t// First comes the selection (blue layer)\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\n\t\t\t\t\t\t// Second comes the background (white layer) with inverse border radius\n\t\t\t\t\t\tlet className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n\t\t\t\t\t\tif (endStyle.top === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (endStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet className = SelectionsOverlay.SELECTION_CLASS_NAME;\n\t\t\t\tif (visibleRangesHaveStyle) {\n\t\t\t\t\tconst startStyle = visibleRange.startStyle!;\n\t\t\t\t\tconst endStyle = visibleRange.endStyle!;\n\t\t\t\t\tif (startStyle.top === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n\t\t\t\t\t}\n\t\t\t\t\tif (startStyle.bottom === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.top === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.bottom === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trestOfSelectionOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left, visibleRange.width);\n\t\t\t}\n\n\t\t\toutput2[lineIndex][0] += innerCornerOutput;\n\t\t\toutput2[lineIndex][1] += restOfSelectionOutput;\n\t\t}\n\t}\n\n\tprivate _previousFrameVisibleRangesWithStyle: (LineVisibleRangesWithStyle[] | null)[] = [];\n\tpublic prepareRender(ctx: RenderingContext): void {\n\n\t\t// Build HTML for inner corners separate from HTML for the rest of selections,\n\t\t// as the inner corner HTML can interfere with that of other selections.\n\t\t// In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n\t\tconst output: [string, string][] = [];\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = ['', ''];\n\t\t}\n\n\t\tconst thisFrameVisibleRangesWithStyle: (LineVisibleRangesWithStyle[] | null)[] = [];\n\t\tfor (let i = 0, len = this._selections.length; i < len; i++) {\n\t\t\tconst selection = this._selections[i];\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tthisFrameVisibleRangesWithStyle[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n\t\t\tthisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n\t\t\tthis._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n\t\t}\n\n\t\tthis._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n\t\tthis._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n\tif (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n\t\tcollector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n\t}\n});\n\nfunction abs(n: number): number {\n\treturn n < 0 ? -n : n;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport './selections.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange, LineVisibleRanges, RenderingContext } from '../../view/renderingContext.js';\nimport { ViewContext } from '../../../common/viewModel/viewContext.js';\nimport * as viewEvents from '../../../common/viewEvents.js';\nimport { editorSelectionForeground } from '../../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { EditorOption } from '../../../common/config/editorOptions.js';\n\nconst enum CornerStyle {\n\tEXTERN,\n\tINTERN,\n\tFLAT\n}\n\ninterface IVisibleRangeEndPointStyle {\n\ttop: CornerStyle;\n\tbottom: CornerStyle;\n}\n\nclass HorizontalRangeWithStyle {\n\tpublic left: number;\n\tpublic width: number;\n\tpublic startStyle: IVisibleRangeEndPointStyle | null;\n\tpublic endStyle: IVisibleRangeEndPointStyle | null;\n\n\tconstructor(other: HorizontalRange) {\n\t\tthis.left = other.left;\n\t\tthis.width = other.width;\n\t\tthis.startStyle = null;\n\t\tthis.endStyle = null;\n\t}\n}\n\nclass LineVisibleRangesWithStyle {\n\tpublic lineNumber: number;\n\tpublic ranges: HorizontalRangeWithStyle[];\n\n\tconstructor(lineNumber: number, ranges: HorizontalRangeWithStyle[]) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.ranges = ranges;\n\t}\n}\n\nfunction toStyledRange(item: HorizontalRange): HorizontalRangeWithStyle {\n\treturn new HorizontalRangeWithStyle(item);\n}\n\nfunction toStyled(item: LineVisibleRanges): LineVisibleRangesWithStyle {\n\treturn new LineVisibleRangesWithStyle(item.lineNumber, item.ranges.map(toStyledRange));\n}\n\n/**\n * This view part displays selected text to the user. Every line has its own selection overlay.\n */\nexport class SelectionsOverlay extends DynamicViewOverlay {\n\n\tprivate static readonly SELECTION_CLASS_NAME = 'selected-text';\n\tprivate static readonly SELECTION_TOP_LEFT = 'top-left-radius';\n\tprivate static readonly SELECTION_BOTTOM_LEFT = 'bottom-left-radius';\n\tprivate static readonly SELECTION_TOP_RIGHT = 'top-right-radius';\n\tprivate static readonly SELECTION_BOTTOM_RIGHT = 'bottom-right-radius';\n\tprivate static readonly EDITOR_BACKGROUND_CLASS_NAME = 'monaco-editor-background';\n\n\tprivate static readonly ROUNDED_PIECE_WIDTH = 10;\n\n\tprivate readonly _context: ViewContext;\n\tprivate _roundedSelection: boolean;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\tprivate _selections: Range[];\n\tprivate _renderResult: string[] | null;\n\n\tconstructor(context: ViewContext) {\n\t\tsuper();\n\t\tthis._context = context;\n\t\tconst options = this._context.configuration.options;\n\t\tthis._roundedSelection = options.get(EditorOption.roundedSelection);\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\tthis._selections = [];\n\t\tthis._renderResult = null;\n\t\tthis._context.addEventHandler(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._context.removeEventHandler(this);\n\t\tthis._renderResult = null;\n\t\tsuper.dispose();\n\t}\n\n\t// --- begin event handlers\n\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tthis._roundedSelection = options.get(EditorOption.roundedSelection);\n\t\tthis._typicalHalfwidthCharacterWidth = options.get(EditorOption.fontInfo).typicalHalfwidthCharacterWidth;\n\t\treturn true;\n\t}\n\tpublic override onCursorStateChanged(e: viewEvents.ViewCursorStateChangedEvent): boolean {\n\t\tthis._selections = e.selections.slice(0);\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\t// true for inline decorations that can end up relayouting text\n\t\treturn true;//e.inlineDecorationsChanged;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\tprivate _visibleRangesHaveGaps(linesVisibleRanges: LineVisibleRangesWithStyle[]): boolean {\n\n\t\tfor (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n\t\t\tconst lineVisibleRanges = linesVisibleRanges[i];\n\n\t\t\tif (lineVisibleRanges.ranges.length > 1) {\n\t\t\t\t// There are two ranges on the same line\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _enrichVisibleRangesWithStyle(viewport: Range, linesVisibleRanges: LineVisibleRangesWithStyle[], previousFrame: LineVisibleRangesWithStyle[] | null): void {\n\t\tconst epsilon = this._typicalHalfwidthCharacterWidth / 4;\n\t\tlet previousFrameTop: HorizontalRangeWithStyle | null = null;\n\t\tlet previousFrameBottom: HorizontalRangeWithStyle | null = null;\n\n\t\tif (previousFrame && previousFrame.length > 0 && linesVisibleRanges.length > 0) {\n\n\t\t\tconst topLineNumber = linesVisibleRanges[0].lineNumber;\n\t\t\tif (topLineNumber === viewport.startLineNumber) {\n\t\t\t\tfor (let i = 0; !previousFrameTop && i < previousFrame.length; i++) {\n\t\t\t\t\tif (previousFrame[i].lineNumber === topLineNumber) {\n\t\t\t\t\t\tpreviousFrameTop = previousFrame[i].ranges[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst bottomLineNumber = linesVisibleRanges[linesVisibleRanges.length - 1].lineNumber;\n\t\t\tif (bottomLineNumber === viewport.endLineNumber) {\n\t\t\t\tfor (let i = previousFrame.length - 1; !previousFrameBottom && i >= 0; i--) {\n\t\t\t\t\tif (previousFrame[i].lineNumber === bottomLineNumber) {\n\t\t\t\t\t\tpreviousFrameBottom = previousFrame[i].ranges[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (previousFrameTop && !previousFrameTop.startStyle) {\n\t\t\t\tpreviousFrameTop = null;\n\t\t\t}\n\t\t\tif (previousFrameBottom && !previousFrameBottom.startStyle) {\n\t\t\t\tpreviousFrameBottom = null;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0, len = linesVisibleRanges.length; i < len; i++) {\n\t\t\t// We know for a fact that there is precisely one range on each line\n\t\t\tconst curLineRange = linesVisibleRanges[i].ranges[0];\n\t\t\tconst curLeft = curLineRange.left;\n\t\t\tconst curRight = curLineRange.left + curLineRange.width;\n\n\t\t\tconst startStyle = {\n\t\t\t\ttop: CornerStyle.EXTERN,\n\t\t\t\tbottom: CornerStyle.EXTERN\n\t\t\t};\n\n\t\t\tconst endStyle = {\n\t\t\t\ttop: CornerStyle.EXTERN,\n\t\t\t\tbottom: CornerStyle.EXTERN\n\t\t\t};\n\n\t\t\tif (i > 0) {\n\t\t\t\t// Look above\n\t\t\t\tconst prevLeft = linesVisibleRanges[i - 1].ranges[0].left;\n\t\t\t\tconst prevRight = linesVisibleRanges[i - 1].ranges[0].left + linesVisibleRanges[i - 1].ranges[0].width;\n\n\t\t\t\tif (abs(curLeft - prevLeft) < epsilon) {\n\t\t\t\t\tstartStyle.top = CornerStyle.FLAT;\n\t\t\t\t} else if (curLeft > prevLeft) {\n\t\t\t\t\tstartStyle.top = CornerStyle.INTERN;\n\t\t\t\t}\n\n\t\t\t\tif (abs(curRight - prevRight) < epsilon) {\n\t\t\t\t\tendStyle.top = CornerStyle.FLAT;\n\t\t\t\t} else if (prevLeft < curRight && curRight < prevRight) {\n\t\t\t\t\tendStyle.top = CornerStyle.INTERN;\n\t\t\t\t}\n\t\t\t} else if (previousFrameTop) {\n\t\t\t\t// Accept some hiccups near the viewport edges to save on repaints\n\t\t\t\tstartStyle.top = previousFrameTop.startStyle!.top;\n\t\t\t\tendStyle.top = previousFrameTop.endStyle!.top;\n\t\t\t}\n\n\t\t\tif (i + 1 < len) {\n\t\t\t\t// Look below\n\t\t\t\tconst nextLeft = linesVisibleRanges[i + 1].ranges[0].left;\n\t\t\t\tconst nextRight = linesVisibleRanges[i + 1].ranges[0].left + linesVisibleRanges[i + 1].ranges[0].width;\n\n\t\t\t\tif (abs(curLeft - nextLeft) < epsilon) {\n\t\t\t\t\tstartStyle.bottom = CornerStyle.FLAT;\n\t\t\t\t} else if (nextLeft < curLeft && curLeft < nextRight) {\n\t\t\t\t\tstartStyle.bottom = CornerStyle.INTERN;\n\t\t\t\t}\n\n\t\t\t\tif (abs(curRight - nextRight) < epsilon) {\n\t\t\t\t\tendStyle.bottom = CornerStyle.FLAT;\n\t\t\t\t} else if (curRight < nextRight) {\n\t\t\t\t\tendStyle.bottom = CornerStyle.INTERN;\n\t\t\t\t}\n\t\t\t} else if (previousFrameBottom) {\n\t\t\t\t// Accept some hiccups near the viewport edges to save on repaints\n\t\t\t\tstartStyle.bottom = previousFrameBottom.startStyle!.bottom;\n\t\t\t\tendStyle.bottom = previousFrameBottom.endStyle!.bottom;\n\t\t\t}\n\n\t\t\tcurLineRange.startStyle = startStyle;\n\t\t\tcurLineRange.endStyle = endStyle;\n\t\t}\n\t}\n\n\tprivate _getVisibleRangesWithStyle(selection: Range, ctx: RenderingContext, previousFrame: LineVisibleRangesWithStyle[] | null): LineVisibleRangesWithStyle[] {\n\t\tconst _linesVisibleRanges = ctx.linesVisibleRangesForRange(selection, true) || [];\n\t\tconst linesVisibleRanges = _linesVisibleRanges.map(toStyled);\n\t\tconst visibleRangesHaveGaps = this._visibleRangesHaveGaps(linesVisibleRanges);\n\n\t\tif (!visibleRangesHaveGaps && this._roundedSelection) {\n\t\t\tthis._enrichVisibleRangesWithStyle(ctx.visibleRange, linesVisibleRanges, previousFrame);\n\t\t}\n\n\t\t// The visible ranges are sorted TOP-BOTTOM and LEFT-RIGHT\n\t\treturn linesVisibleRanges;\n\t}\n\n\tprivate _createSelectionPiece(top: number, bottom: number, className: string, left: number, width: number): string {\n\t\treturn (\n\t\t\t'<div class=\"cslr '\n\t\t\t+ className\n\t\t\t+ '\" style=\"'\n\t\t\t+ 'top:' + top.toString() + 'px;'\n\t\t\t+ 'bottom:' + bottom.toString() + 'px;'\n\t\t\t+ 'left:' + left.toString() + 'px;'\n\t\t\t+ 'width:' + width.toString() + 'px;'\n\t\t\t+ '\"></div>'\n\t\t);\n\t}\n\n\tprivate _actualRenderOneSelection(output2: [string, string][], visibleStartLineNumber: number, hasMultipleSelections: boolean, visibleRanges: LineVisibleRangesWithStyle[]): void {\n\t\tif (visibleRanges.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst visibleRangesHaveStyle = !!visibleRanges[0].ranges[0].startStyle;\n\n\t\tconst firstLineNumber = visibleRanges[0].lineNumber;\n\t\tconst lastLineNumber = visibleRanges[visibleRanges.length - 1].lineNumber;\n\n\t\tfor (let i = 0, len = visibleRanges.length; i < len; i++) {\n\t\t\tconst lineVisibleRanges = visibleRanges[i];\n\t\t\tconst lineNumber = lineVisibleRanges.lineNumber;\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\n\t\t\tconst top = hasMultipleSelections ? (lineNumber === firstLineNumber ? 1 : 0) : 0;\n\t\t\tconst bottom = hasMultipleSelections ? (lineNumber !== firstLineNumber && lineNumber === lastLineNumber ? 1 : 0) : 0;\n\n\t\t\tlet innerCornerOutput = '';\n\t\t\tlet restOfSelectionOutput = '';\n\n\t\t\tfor (let j = 0, lenJ = lineVisibleRanges.ranges.length; j < lenJ; j++) {\n\t\t\t\tconst visibleRange = lineVisibleRanges.ranges[j];\n\n\t\t\t\tif (visibleRangesHaveStyle) {\n\t\t\t\t\tconst startStyle = visibleRange.startStyle!;\n\t\t\t\t\tconst endStyle = visibleRange.endStyle!;\n\t\t\t\t\tif (startStyle.top === CornerStyle.INTERN || startStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t// Reverse rounded corner to the left\n\n\t\t\t\t\t\t// First comes the selection (blue layer)\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\n\t\t\t\t\t\t// Second comes the background (white layer) with inverse border radius\n\t\t\t\t\t\tlet className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n\t\t\t\t\t\tif (startStyle.top === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (startStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left - SelectionsOverlay.ROUNDED_PIECE_WIDTH, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.top === CornerStyle.INTERN || endStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t// Reverse rounded corner to the right\n\n\t\t\t\t\t\t// First comes the selection (blue layer)\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, SelectionsOverlay.SELECTION_CLASS_NAME, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\n\t\t\t\t\t\t// Second comes the background (white layer) with inverse border radius\n\t\t\t\t\t\tlet className = SelectionsOverlay.EDITOR_BACKGROUND_CLASS_NAME;\n\t\t\t\t\t\tif (endStyle.top === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (endStyle.bottom === CornerStyle.INTERN) {\n\t\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinnerCornerOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left + visibleRange.width, SelectionsOverlay.ROUNDED_PIECE_WIDTH);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet className = SelectionsOverlay.SELECTION_CLASS_NAME;\n\t\t\t\tif (visibleRangesHaveStyle) {\n\t\t\t\t\tconst startStyle = visibleRange.startStyle!;\n\t\t\t\t\tconst endStyle = visibleRange.endStyle!;\n\t\t\t\t\tif (startStyle.top === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_LEFT;\n\t\t\t\t\t}\n\t\t\t\t\tif (startStyle.bottom === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_LEFT;\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.top === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_TOP_RIGHT;\n\t\t\t\t\t}\n\t\t\t\t\tif (endStyle.bottom === CornerStyle.EXTERN) {\n\t\t\t\t\t\tclassName += ' ' + SelectionsOverlay.SELECTION_BOTTOM_RIGHT;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trestOfSelectionOutput += this._createSelectionPiece(top, bottom, className, visibleRange.left, visibleRange.width);\n\t\t\t}\n\n\t\t\toutput2[lineIndex][0] += innerCornerOutput;\n\t\t\toutput2[lineIndex][1] += restOfSelectionOutput;\n\t\t}\n\t}\n\n\tprivate _previousFrameVisibleRangesWithStyle: (LineVisibleRangesWithStyle[] | null)[] = [];\n\tpublic prepareRender(ctx: RenderingContext): void {\n\n\t\t// Build HTML for inner corners separate from HTML for the rest of selections,\n\t\t// as the inner corner HTML can interfere with that of other selections.\n\t\t// In final render, make sure to place the inner corner HTML before the rest of selection HTML. See issue #77777.\n\t\tconst output: [string, string][] = [];\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = ['', ''];\n\t\t}\n\n\t\tconst thisFrameVisibleRangesWithStyle: (LineVisibleRangesWithStyle[] | null)[] = [];\n\t\tfor (let i = 0, len = this._selections.length; i < len; i++) {\n\t\t\tconst selection = this._selections[i];\n\t\t\tif (selection.isEmpty()) {\n\t\t\t\tthisFrameVisibleRangesWithStyle[i] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst visibleRangesWithStyle = this._getVisibleRangesWithStyle(selection, ctx, this._previousFrameVisibleRangesWithStyle[i]);\n\t\t\tthisFrameVisibleRangesWithStyle[i] = visibleRangesWithStyle;\n\t\t\tthis._actualRenderOneSelection(output, visibleStartLineNumber, this._selections.length > 1, visibleRangesWithStyle);\n\t\t}\n\n\t\tthis._previousFrameVisibleRangesWithStyle = thisFrameVisibleRangesWithStyle;\n\t\tthis._renderResult = output.map(([internalCorners, restOfSelection]) => internalCorners + restOfSelection);\n\t}\n\n\tpublic render(startLineNumber: number, lineNumber: number): string {\n\t\tif (!this._renderResult) {\n\t\t\treturn '';\n\t\t}\n\t\tconst lineIndex = lineNumber - startLineNumber;\n\t\tif (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._renderResult[lineIndex];\n\t}\n}\n\nregisterThemingParticipant((theme, collector) => {\n\tconst editorSelectionForegroundColor = theme.getColor(editorSelectionForeground);\n\tif (editorSelectionForegroundColor && !editorSelectionForegroundColor.isTransparent()) {\n\t\tcollector.addRule(`.monaco-editor .view-line span.inline-selected-text { color: ${editorSelectionForegroundColor}; }`);\n\t}\n});\n\nfunction abs(n: number): number {\n\treturn n < 0 ? -n : n;\n}\n"]}