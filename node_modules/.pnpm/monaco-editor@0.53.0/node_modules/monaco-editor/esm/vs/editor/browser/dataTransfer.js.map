{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/dataTransfer.ts","vs/editor/browser/dataTransfer.ts"],"names":[],"mappings":"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","file":"dataTransfer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DataTransfers } from '../../base/browser/dnd.js';\nimport { createFileDataTransferItem, createStringDataTransferItem, IDataTransferItem, UriList, VSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Mimes } from '../../base/common/mime.js';\nimport { URI } from '../../base/common/uri.js';\nimport { CodeDataTransfers, getPathForFile } from '../../platform/dnd/browser/dnd.js';\n\n\nexport function toVSDataTransfer(dataTransfer: DataTransfer): VSDataTransfer {\n\tconst vsDataTransfer = new VSDataTransfer();\n\tfor (const item of dataTransfer.items) {\n\t\tconst type = item.type;\n\t\tif (item.kind === 'string') {\n\t\t\tconst asStringValue = new Promise<string>(resolve => item.getAsString(resolve));\n\t\t\tvsDataTransfer.append(type, createStringDataTransferItem(asStringValue));\n\t\t} else if (item.kind === 'file') {\n\t\t\tconst file = item.getAsFile();\n\t\t\tif (file) {\n\t\t\t\tvsDataTransfer.append(type, createFileDataTransferItemFromFile(file));\n\t\t\t}\n\t\t}\n\t}\n\treturn vsDataTransfer;\n}\n\nfunction createFileDataTransferItemFromFile(file: File): IDataTransferItem {\n\tconst path = getPathForFile(file);\n\tconst uri = path ? URI.parse(path!) : undefined;\n\treturn createFileDataTransferItem(file.name, uri, async () => {\n\t\treturn new Uint8Array(await file.arrayBuffer());\n\t});\n}\n\nconst INTERNAL_DND_MIME_TYPES = Object.freeze([\n\tCodeDataTransfers.EDITORS,\n\tCodeDataTransfers.FILES,\n\tDataTransfers.RESOURCES,\n\tDataTransfers.INTERNAL_URI_LIST,\n]);\n\nexport function toExternalVSDataTransfer(sourceDataTransfer: DataTransfer, overwriteUriList = false): VSDataTransfer {\n\tconst vsDataTransfer = toVSDataTransfer(sourceDataTransfer);\n\n\t// Try to expose the internal uri-list type as the standard type\n\tconst uriList = vsDataTransfer.get(DataTransfers.INTERNAL_URI_LIST);\n\tif (uriList) {\n\t\tvsDataTransfer.replace(Mimes.uriList, uriList);\n\t} else {\n\t\tif (overwriteUriList || !vsDataTransfer.has(Mimes.uriList)) {\n\t\t\t// Otherwise, fallback to adding dragged resources to the uri list\n\t\t\tconst editorData: string[] = [];\n\t\t\tfor (const item of sourceDataTransfer.items) {\n\t\t\t\tconst file = item.getAsFile();\n\t\t\t\tif (file) {\n\t\t\t\t\tconst path = getPathForFile(file);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\teditorData.push(URI.file(path).toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teditorData.push(URI.parse(file.name, true).toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Parsing failed. Leave out from list\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editorData.length) {\n\t\t\t\tvsDataTransfer.replace(Mimes.uriList, createStringDataTransferItem(UriList.create(editorData)));\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const internal of INTERNAL_DND_MIME_TYPES) {\n\t\tvsDataTransfer.delete(internal);\n\t}\n\n\treturn vsDataTransfer;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DataTransfers } from '../../base/browser/dnd.js';\nimport { createFileDataTransferItem, createStringDataTransferItem, IDataTransferItem, UriList, VSDataTransfer } from '../../base/common/dataTransfer.js';\nimport { Mimes } from '../../base/common/mime.js';\nimport { URI } from '../../base/common/uri.js';\nimport { CodeDataTransfers, getPathForFile } from '../../platform/dnd/browser/dnd.js';\n\n\nexport function toVSDataTransfer(dataTransfer: DataTransfer): VSDataTransfer {\n\tconst vsDataTransfer = new VSDataTransfer();\n\tfor (const item of dataTransfer.items) {\n\t\tconst type = item.type;\n\t\tif (item.kind === 'string') {\n\t\t\tconst asStringValue = new Promise<string>(resolve => item.getAsString(resolve));\n\t\t\tvsDataTransfer.append(type, createStringDataTransferItem(asStringValue));\n\t\t} else if (item.kind === 'file') {\n\t\t\tconst file = item.getAsFile();\n\t\t\tif (file) {\n\t\t\t\tvsDataTransfer.append(type, createFileDataTransferItemFromFile(file));\n\t\t\t}\n\t\t}\n\t}\n\treturn vsDataTransfer;\n}\n\nfunction createFileDataTransferItemFromFile(file: File): IDataTransferItem {\n\tconst path = getPathForFile(file);\n\tconst uri = path ? URI.parse(path!) : undefined;\n\treturn createFileDataTransferItem(file.name, uri, async () => {\n\t\treturn new Uint8Array(await file.arrayBuffer());\n\t});\n}\n\nconst INTERNAL_DND_MIME_TYPES = Object.freeze([\n\tCodeDataTransfers.EDITORS,\n\tCodeDataTransfers.FILES,\n\tDataTransfers.RESOURCES,\n\tDataTransfers.INTERNAL_URI_LIST,\n]);\n\nexport function toExternalVSDataTransfer(sourceDataTransfer: DataTransfer, overwriteUriList = false): VSDataTransfer {\n\tconst vsDataTransfer = toVSDataTransfer(sourceDataTransfer);\n\n\t// Try to expose the internal uri-list type as the standard type\n\tconst uriList = vsDataTransfer.get(DataTransfers.INTERNAL_URI_LIST);\n\tif (uriList) {\n\t\tvsDataTransfer.replace(Mimes.uriList, uriList);\n\t} else {\n\t\tif (overwriteUriList || !vsDataTransfer.has(Mimes.uriList)) {\n\t\t\t// Otherwise, fallback to adding dragged resources to the uri list\n\t\t\tconst editorData: string[] = [];\n\t\t\tfor (const item of sourceDataTransfer.items) {\n\t\t\t\tconst file = item.getAsFile();\n\t\t\t\tif (file) {\n\t\t\t\t\tconst path = getPathForFile(file);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\teditorData.push(URI.file(path).toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teditorData.push(URI.parse(file.name, true).toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Parsing failed. Leave out from list\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editorData.length) {\n\t\t\t\tvsDataTransfer.replace(Mimes.uriList, createStringDataTransferItem(UriList.create(editorData)));\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const internal of INTERNAL_DND_MIME_TYPES) {\n\t\tvsDataTransfer.delete(internal);\n\t}\n\n\treturn vsDataTransfer;\n}\n"]}