{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/editor/browser/widget/diffEditor/utils/editorGutter.ts","vs/editor/browser/widget/diffEditor/utils/editorGutter.ts"],"names":[],"mappings":"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","file":"editorGutter.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h, reset } from '../../../../../base/browser/dom.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, IObservable, IReader, ISettableObservable, observableFromEvent, observableSignal, observableSignalFromEvent, observableValue, transaction } from '../../../../../base/common/observable.js';\nimport { CodeEditorWidget } from '../../codeEditor/codeEditorWidget.js';\nimport { LineRange } from '../../../../common/core/ranges/lineRange.js';\nimport { OffsetRange } from '../../../../common/core/ranges/offsetRange.js';\n\nexport class EditorGutter<T extends IGutterItemInfo = IGutterItemInfo> extends Disposable {\n\tprivate readonly scrollTop;\n\tprivate readonly isScrollTopZero;\n\tprivate readonly modelAttached;\n\n\tprivate readonly editorOnDidChangeViewZones;\n\tprivate readonly editorOnDidContentSizeChange;\n\tprivate readonly domNodeSizeChanged;\n\n\tconstructor(\n\t\tprivate readonly _editor: CodeEditorWidget,\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly itemProvider: IGutterItemProvider<T>\n\t) {\n\t\tsuper();\n\t\tthis.scrollTop = observableFromEvent(this,\n\t\t\tthis._editor.onDidScrollChange,\n\t\t\t(e) => /** @description editor.onDidScrollChange */ this._editor.getScrollTop()\n\t\t);\n\t\tthis.isScrollTopZero = this.scrollTop.map((scrollTop) => /** @description isScrollTopZero */ scrollTop === 0);\n\t\tthis.modelAttached = observableFromEvent(this,\n\t\t\tthis._editor.onDidChangeModel,\n\t\t\t(e) => /** @description editor.onDidChangeModel */ this._editor.hasModel()\n\t\t);\n\t\tthis.editorOnDidChangeViewZones = observableSignalFromEvent('onDidChangeViewZones', this._editor.onDidChangeViewZones);\n\t\tthis.editorOnDidContentSizeChange = observableSignalFromEvent('onDidContentSizeChange', this._editor.onDidContentSizeChange);\n\t\tthis.domNodeSizeChanged = observableSignal('domNodeSizeChanged');\n\t\tthis.views = new Map<string, ManagedGutterItemView>();\n\t\tthis._domNode.className = 'gutter monaco-editor';\n\t\tconst scrollDecoration = this._domNode.appendChild(\n\t\t\th('div.scroll-decoration', { role: 'presentation', ariaHidden: 'true', style: { width: '100%' } })\n\t\t\t\t.root\n\t\t);\n\n\t\tconst o = new ResizeObserver(() => {\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description ResizeObserver: size changed */\n\t\t\t\tthis.domNodeSizeChanged.trigger(tx);\n\t\t\t});\n\t\t});\n\t\to.observe(this._domNode);\n\t\tthis._register(toDisposable(() => o.disconnect()));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update scroll decoration */\n\t\t\tscrollDecoration.className = this.isScrollTopZero.read(reader) ? '' : 'scroll-decoration';\n\t\t}));\n\n\t\tthis._register(autorun(reader => /** @description EditorGutter.Render */ this.render(reader)));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\treset(this._domNode);\n\t}\n\n\tprivate readonly views;\n\n\tprivate render(reader: IReader): void {\n\t\tif (!this.modelAttached.read(reader)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.domNodeSizeChanged.read(reader);\n\t\tthis.editorOnDidChangeViewZones.read(reader);\n\t\tthis.editorOnDidContentSizeChange.read(reader);\n\n\t\tconst scrollTop = this.scrollTop.read(reader);\n\n\t\tconst visibleRanges = this._editor.getVisibleRanges();\n\t\tconst unusedIds = new Set(this.views.keys());\n\n\t\tconst viewRange = OffsetRange.ofStartAndLength(0, this._domNode.clientHeight);\n\n\t\tif (!viewRange.isEmpty) {\n\t\t\tfor (const visibleRange of visibleRanges) {\n\t\t\t\tconst visibleRange2 = new LineRange(\n\t\t\t\t\tvisibleRange.startLineNumber,\n\t\t\t\t\tvisibleRange.endLineNumber + 1\n\t\t\t\t);\n\n\t\t\t\tconst gutterItems = this.itemProvider.getIntersectingGutterItems(\n\t\t\t\t\tvisibleRange2,\n\t\t\t\t\treader\n\t\t\t\t);\n\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\t/** EditorGutter.render */\n\n\t\t\t\t\tfor (const gutterItem of gutterItems) {\n\t\t\t\t\t\tif (!gutterItem.range.intersect(visibleRange2)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tunusedIds.delete(gutterItem.id);\n\t\t\t\t\t\tlet view = this.views.get(gutterItem.id);\n\t\t\t\t\t\tif (!view) {\n\t\t\t\t\t\t\tconst viewDomNode = document.createElement('div');\n\t\t\t\t\t\t\tthis._domNode.appendChild(viewDomNode);\n\t\t\t\t\t\t\tconst gutterItemObs = observableValue('item', gutterItem);\n\t\t\t\t\t\t\tconst itemView = this.itemProvider.createView(\n\t\t\t\t\t\t\t\tgutterItemObs,\n\t\t\t\t\t\t\t\tviewDomNode\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tview = new ManagedGutterItemView(gutterItemObs, itemView, viewDomNode);\n\t\t\t\t\t\t\tthis.views.set(gutterItem.id, view);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tview.item.set(gutterItem, tx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst top =\n\t\t\t\t\t\t\tgutterItem.range.startLineNumber <= this._editor.getModel()!.getLineCount()\n\t\t\t\t\t\t\t\t? this._editor.getTopForLineNumber(gutterItem.range.startLineNumber, true) - scrollTop\n\t\t\t\t\t\t\t\t: gutterItem.range.startLineNumber > 1\n\t\t\t\t\t\t\t\t\t? this._editor.getBottomForLineNumber(gutterItem.range.startLineNumber - 1, false) - scrollTop\n\t\t\t\t\t\t\t\t\t: 0;\n\t\t\t\t\t\tconst bottom =\n\t\t\t\t\t\t\tgutterItem.range.endLineNumberExclusive === 1 ?\n\t\t\t\t\t\t\t\tMath.max(top, this._editor.getTopForLineNumber(gutterItem.range.startLineNumber, false) - scrollTop)\n\t\t\t\t\t\t\t\t: Math.max(top, this._editor.getBottomForLineNumber(gutterItem.range.endLineNumberExclusive - 1, true) - scrollTop);\n\n\t\t\t\t\t\tconst height = bottom - top;\n\t\t\t\t\t\tview.domNode.style.top = `${top}px`;\n\t\t\t\t\t\tview.domNode.style.height = `${height}px`;\n\n\t\t\t\t\t\tview.gutterItemView.layout(OffsetRange.ofStartAndLength(top, height), viewRange);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const id of unusedIds) {\n\t\t\tconst view = this.views.get(id)!;\n\t\t\tview.gutterItemView.dispose();\n\t\t\tview.domNode.remove();\n\t\t\tthis.views.delete(id);\n\t\t}\n\t}\n}\n\nclass ManagedGutterItemView {\n\tconstructor(\n\t\tpublic readonly item: ISettableObservable<IGutterItemInfo>,\n\t\tpublic readonly gutterItemView: IGutterItemView,\n\t\tpublic readonly domNode: HTMLDivElement,\n\t) { }\n}\n\nexport interface IGutterItemProvider<TItem extends IGutterItemInfo> {\n\tgetIntersectingGutterItems(range: LineRange, reader: IReader): TItem[];\n\n\tcreateView(item: IObservable<TItem>, target: HTMLElement): IGutterItemView;\n}\n\nexport interface IGutterItemInfo {\n\tid: string;\n\trange: LineRange;\n}\n\nexport interface IGutterItemView extends IDisposable {\n\tlayout(itemRange: OffsetRange, viewRange: OffsetRange): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { h, reset } from '../../../../../base/browser/dom.js';\nimport { Disposable, IDisposable, toDisposable } from '../../../../../base/common/lifecycle.js';\nimport { autorun, IObservable, IReader, ISettableObservable, observableFromEvent, observableSignal, observableSignalFromEvent, observableValue, transaction } from '../../../../../base/common/observable.js';\nimport { CodeEditorWidget } from '../../codeEditor/codeEditorWidget.js';\nimport { LineRange } from '../../../../common/core/ranges/lineRange.js';\nimport { OffsetRange } from '../../../../common/core/ranges/offsetRange.js';\n\nexport class EditorGutter<T extends IGutterItemInfo = IGutterItemInfo> extends Disposable {\n\tprivate readonly scrollTop;\n\tprivate readonly isScrollTopZero;\n\tprivate readonly modelAttached;\n\n\tprivate readonly editorOnDidChangeViewZones;\n\tprivate readonly editorOnDidContentSizeChange;\n\tprivate readonly domNodeSizeChanged;\n\n\tconstructor(\n\t\tprivate readonly _editor: CodeEditorWidget,\n\t\tprivate readonly _domNode: HTMLElement,\n\t\tprivate readonly itemProvider: IGutterItemProvider<T>\n\t) {\n\t\tsuper();\n\t\tthis.scrollTop = observableFromEvent(this,\n\t\t\tthis._editor.onDidScrollChange,\n\t\t\t(e) => /** @description editor.onDidScrollChange */ this._editor.getScrollTop()\n\t\t);\n\t\tthis.isScrollTopZero = this.scrollTop.map((scrollTop) => /** @description isScrollTopZero */ scrollTop === 0);\n\t\tthis.modelAttached = observableFromEvent(this,\n\t\t\tthis._editor.onDidChangeModel,\n\t\t\t(e) => /** @description editor.onDidChangeModel */ this._editor.hasModel()\n\t\t);\n\t\tthis.editorOnDidChangeViewZones = observableSignalFromEvent('onDidChangeViewZones', this._editor.onDidChangeViewZones);\n\t\tthis.editorOnDidContentSizeChange = observableSignalFromEvent('onDidContentSizeChange', this._editor.onDidContentSizeChange);\n\t\tthis.domNodeSizeChanged = observableSignal('domNodeSizeChanged');\n\t\tthis.views = new Map<string, ManagedGutterItemView>();\n\t\tthis._domNode.className = 'gutter monaco-editor';\n\t\tconst scrollDecoration = this._domNode.appendChild(\n\t\t\th('div.scroll-decoration', { role: 'presentation', ariaHidden: 'true', style: { width: '100%' } })\n\t\t\t\t.root\n\t\t);\n\n\t\tconst o = new ResizeObserver(() => {\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description ResizeObserver: size changed */\n\t\t\t\tthis.domNodeSizeChanged.trigger(tx);\n\t\t\t});\n\t\t});\n\t\to.observe(this._domNode);\n\t\tthis._register(toDisposable(() => o.disconnect()));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update scroll decoration */\n\t\t\tscrollDecoration.className = this.isScrollTopZero.read(reader) ? '' : 'scroll-decoration';\n\t\t}));\n\n\t\tthis._register(autorun(reader => /** @description EditorGutter.Render */ this.render(reader)));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\treset(this._domNode);\n\t}\n\n\tprivate readonly views;\n\n\tprivate render(reader: IReader): void {\n\t\tif (!this.modelAttached.read(reader)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.domNodeSizeChanged.read(reader);\n\t\tthis.editorOnDidChangeViewZones.read(reader);\n\t\tthis.editorOnDidContentSizeChange.read(reader);\n\n\t\tconst scrollTop = this.scrollTop.read(reader);\n\n\t\tconst visibleRanges = this._editor.getVisibleRanges();\n\t\tconst unusedIds = new Set(this.views.keys());\n\n\t\tconst viewRange = OffsetRange.ofStartAndLength(0, this._domNode.clientHeight);\n\n\t\tif (!viewRange.isEmpty) {\n\t\t\tfor (const visibleRange of visibleRanges) {\n\t\t\t\tconst visibleRange2 = new LineRange(\n\t\t\t\t\tvisibleRange.startLineNumber,\n\t\t\t\t\tvisibleRange.endLineNumber + 1\n\t\t\t\t);\n\n\t\t\t\tconst gutterItems = this.itemProvider.getIntersectingGutterItems(\n\t\t\t\t\tvisibleRange2,\n\t\t\t\t\treader\n\t\t\t\t);\n\n\t\t\t\ttransaction(tx => {\n\t\t\t\t\t/** EditorGutter.render */\n\n\t\t\t\t\tfor (const gutterItem of gutterItems) {\n\t\t\t\t\t\tif (!gutterItem.range.intersect(visibleRange2)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tunusedIds.delete(gutterItem.id);\n\t\t\t\t\t\tlet view = this.views.get(gutterItem.id);\n\t\t\t\t\t\tif (!view) {\n\t\t\t\t\t\t\tconst viewDomNode = document.createElement('div');\n\t\t\t\t\t\t\tthis._domNode.appendChild(viewDomNode);\n\t\t\t\t\t\t\tconst gutterItemObs = observableValue('item', gutterItem);\n\t\t\t\t\t\t\tconst itemView = this.itemProvider.createView(\n\t\t\t\t\t\t\t\tgutterItemObs,\n\t\t\t\t\t\t\t\tviewDomNode\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tview = new ManagedGutterItemView(gutterItemObs, itemView, viewDomNode);\n\t\t\t\t\t\t\tthis.views.set(gutterItem.id, view);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tview.item.set(gutterItem, tx);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst top =\n\t\t\t\t\t\t\tgutterItem.range.startLineNumber <= this._editor.getModel()!.getLineCount()\n\t\t\t\t\t\t\t\t? this._editor.getTopForLineNumber(gutterItem.range.startLineNumber, true) - scrollTop\n\t\t\t\t\t\t\t\t: gutterItem.range.startLineNumber > 1\n\t\t\t\t\t\t\t\t\t? this._editor.getBottomForLineNumber(gutterItem.range.startLineNumber - 1, false) - scrollTop\n\t\t\t\t\t\t\t\t\t: 0;\n\t\t\t\t\t\tconst bottom =\n\t\t\t\t\t\t\tgutterItem.range.endLineNumberExclusive === 1 ?\n\t\t\t\t\t\t\t\tMath.max(top, this._editor.getTopForLineNumber(gutterItem.range.startLineNumber, false) - scrollTop)\n\t\t\t\t\t\t\t\t: Math.max(top, this._editor.getBottomForLineNumber(gutterItem.range.endLineNumberExclusive - 1, true) - scrollTop);\n\n\t\t\t\t\t\tconst height = bottom - top;\n\t\t\t\t\t\tview.domNode.style.top = `${top}px`;\n\t\t\t\t\t\tview.domNode.style.height = `${height}px`;\n\n\t\t\t\t\t\tview.gutterItemView.layout(OffsetRange.ofStartAndLength(top, height), viewRange);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (const id of unusedIds) {\n\t\t\tconst view = this.views.get(id)!;\n\t\t\tview.gutterItemView.dispose();\n\t\t\tview.domNode.remove();\n\t\t\tthis.views.delete(id);\n\t\t}\n\t}\n}\n\nclass ManagedGutterItemView {\n\tconstructor(\n\t\tpublic readonly item: ISettableObservable<IGutterItemInfo>,\n\t\tpublic readonly gutterItemView: IGutterItemView,\n\t\tpublic readonly domNode: HTMLDivElement,\n\t) { }\n}\n\nexport interface IGutterItemProvider<TItem extends IGutterItemInfo> {\n\tgetIntersectingGutterItems(range: LineRange, reader: IReader): TItem[];\n\n\tcreateView(item: IObservable<TItem>, target: HTMLElement): IGutterItemView;\n}\n\nexport interface IGutterItemInfo {\n\tid: string;\n\trange: LineRange;\n}\n\nexport interface IGutterItemView extends IDisposable {\n\tlayout(itemRange: OffsetRange, viewRange: OffsetRange): void;\n}\n"]}