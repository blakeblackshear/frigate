{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/quickinput/browser/tree/quickInputTreeFilter.ts","vs/platform/quickinput/browser/tree/quickInputTreeFilter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,MAAM,uCAAuC,CAAC;AAInG,MAAM,OAAO,oBAAoB;IAAjC;QACC,gBAAW,GAAW,EAAE,CAAC;QACzB,iBAAY,GAAY,IAAI,CAAC;QAC7B,uBAAkB,GAAY,KAAK,CAAC;IAgCrC,CAAC;IA9BA,MAAM,CAAC,OAAuB,EAAE,gBAAgC;QAC/D,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC1E,OAAO,OAAO,CAAC,QAAQ;gBACtB,CAAC,CAAC,EAAE,UAAU,gCAAwB,EAAE,IAAI,EAAE,EAAE,EAAE;gBAClD,CAAC,CAAC,EAAE,UAAU,gCAAwB,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QACrD,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QACjJ,MAAM,qBAAqB,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QAEzK,MAAM,UAAU,GAAG,gBAAgB,mCAA2B;YAC7D,oEAAoE;YACpE,CAAC;YACD,oDAAoD;YACpD,CAAC,CAAC,CAAC,eAAe,IAAI,qBAAqB,CAAC;gBAC3C,4CAA4C;gBAC5C,CAAC;gBACD,uEAAuE;gBACvE,CAAC,CAAC,OAAO,CAAC,QAAQ;oBACjB,CAAC;oBACD,CAAC,8BAAsB,CAAC;QAE3B,OAAO;YACN,UAAU;YACV,IAAI,EAAE;gBACL,eAAe;gBACf,qBAAqB;aACrB;SACD,CAAC;IACH,CAAC;CACD","file":"quickInputTreeFilter.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITreeFilter, ITreeFilterDataResult, TreeVisibility } from '../../../../base/browser/ui/tree/tree.js';\nimport { matchesFuzzyIconAware, parseLabelWithIcons } from '../../../../base/common/iconLabels.js';\nimport { IQuickTreeItem } from '../../common/quickInput.js';\nimport { IQuickTreeFilterData } from './quickInputTree.js';\n\nexport class QuickInputTreeFilter implements ITreeFilter<IQuickTreeItem, IQuickTreeFilterData> {\n\tfilterValue: string = '';\n\tmatchOnLabel: boolean = true;\n\tmatchOnDescription: boolean = false;\n\n\tfilter(element: IQuickTreeItem, parentVisibility: TreeVisibility): ITreeFilterDataResult<IQuickTreeFilterData> {\n\t\tif (!this.filterValue || !(this.matchOnLabel || this.matchOnDescription)) {\n\t\t\treturn element.children\n\t\t\t\t? { visibility: TreeVisibility.Recurse, data: {} }\n\t\t\t\t: { visibility: TreeVisibility.Visible, data: {} };\n\t\t}\n\n\t\tconst labelHighlights = this.matchOnLabel ? matchesFuzzyIconAware(this.filterValue, parseLabelWithIcons(element.label)) ?? undefined : undefined;\n\t\tconst descriptionHighlights = this.matchOnDescription ? matchesFuzzyIconAware(this.filterValue, parseLabelWithIcons(element.description || '')) ?? undefined : undefined;\n\n\t\tconst visibility = parentVisibility === TreeVisibility.Visible\n\t\t\t// Parent is visible because it had matches, so we show all children\n\t\t\t? TreeVisibility.Visible\n\t\t\t// This would only happen on Parent is recurse so...\n\t\t\t: (labelHighlights || descriptionHighlights)\n\t\t\t\t// If we have any highlights, we are visible\n\t\t\t\t? TreeVisibility.Visible\n\t\t\t\t// Otherwise, we defer to the children or if no children, we are hidden\n\t\t\t\t: element.children\n\t\t\t\t\t? TreeVisibility.Recurse\n\t\t\t\t\t: TreeVisibility.Hidden;\n\n\t\treturn {\n\t\t\tvisibility,\n\t\t\tdata: {\n\t\t\t\tlabelHighlights,\n\t\t\t\tdescriptionHighlights\n\t\t\t}\n\t\t};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITreeFilter, ITreeFilterDataResult, TreeVisibility } from '../../../../base/browser/ui/tree/tree.js';\nimport { matchesFuzzyIconAware, parseLabelWithIcons } from '../../../../base/common/iconLabels.js';\nimport { IQuickTreeItem } from '../../common/quickInput.js';\nimport { IQuickTreeFilterData } from './quickInputTree.js';\n\nexport class QuickInputTreeFilter implements ITreeFilter<IQuickTreeItem, IQuickTreeFilterData> {\n\tfilterValue: string = '';\n\tmatchOnLabel: boolean = true;\n\tmatchOnDescription: boolean = false;\n\n\tfilter(element: IQuickTreeItem, parentVisibility: TreeVisibility): ITreeFilterDataResult<IQuickTreeFilterData> {\n\t\tif (!this.filterValue || !(this.matchOnLabel || this.matchOnDescription)) {\n\t\t\treturn element.children\n\t\t\t\t? { visibility: TreeVisibility.Recurse, data: {} }\n\t\t\t\t: { visibility: TreeVisibility.Visible, data: {} };\n\t\t}\n\n\t\tconst labelHighlights = this.matchOnLabel ? matchesFuzzyIconAware(this.filterValue, parseLabelWithIcons(element.label)) ?? undefined : undefined;\n\t\tconst descriptionHighlights = this.matchOnDescription ? matchesFuzzyIconAware(this.filterValue, parseLabelWithIcons(element.description || '')) ?? undefined : undefined;\n\n\t\tconst visibility = parentVisibility === TreeVisibility.Visible\n\t\t\t// Parent is visible because it had matches, so we show all children\n\t\t\t? TreeVisibility.Visible\n\t\t\t// This would only happen on Parent is recurse so...\n\t\t\t: (labelHighlights || descriptionHighlights)\n\t\t\t\t// If we have any highlights, we are visible\n\t\t\t\t? TreeVisibility.Visible\n\t\t\t\t// Otherwise, we defer to the children or if no children, we are hidden\n\t\t\t\t: element.children\n\t\t\t\t\t? TreeVisibility.Recurse\n\t\t\t\t\t: TreeVisibility.Hidden;\n\n\t\treturn {\n\t\t\tvisibility,\n\t\t\tdata: {\n\t\t\t\tlabelHighlights,\n\t\t\t\tdescriptionHighlights\n\t\t\t}\n\t\t};\n\t}\n}\n"]}