{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/actions/browser/actionViewItemService.ts","vs/platform/actions/browser/actionViewItemService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAKhG,OAAO,EAAE,OAAO,EAAS,MAAM,+BAA+B,CAAC;AAC/D,OAAO,EAAqB,iBAAiB,EAAE,MAAM,0CAA0C,CAAC;AAChG,OAAO,EAAE,eAAe,EAAyB,MAAM,6CAA6C,CAAC;AACrG,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAG9C,MAAM,CAAC,MAAM,sBAAsB,GAAG,eAAe,CAAyB,wBAAwB,CAAC,CAAC;AAiBxG,MAAM,qBAAqB;IAA3B;QAIkB,eAAU,GAAG,IAAI,GAAG,EAAkC,CAAC;QAEvD,iBAAY,GAAG,IAAI,OAAO,EAAU,CAAC;QAC7C,gBAAW,GAAkB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;IAa/D,CAAC;IAXA,OAAO;QACN,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,IAAY,EAAE,eAAgC;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC;IAClE,CAAC;IAEO,QAAQ,CAAC,IAAY,EAAE,eAAgC;QAC9D,OAAO,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,eAAe,YAAY,MAAM,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC;IACnG,CAAC;CACD;AAED,iBAAiB,CAAC,sBAAsB,EAAE,qBAAqB,oCAA4B,CAAC","file":"actionViewItemService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IActionViewItem } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { IActionViewItemOptions } from '../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { IAction } from '../../../base/common/actions.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { MenuId } from '../common/actions.js';\n\n\nexport const IActionViewItemService = createDecorator<IActionViewItemService>('IActionViewItemService');\n\n\nexport interface IActionViewItemFactory {\n\t(action: IAction, options: IActionViewItemOptions, instaService: IInstantiationService): IActionViewItem | undefined;\n}\n\nexport interface IActionViewItemService {\n\n\t_serviceBrand: undefined;\n\n\tonDidChange: Event<MenuId>;\n\n\tlookUp(menu: MenuId, submenu: MenuId): IActionViewItemFactory | undefined;\n\tlookUp(menu: MenuId, commandId: string): IActionViewItemFactory | undefined;\n}\n\nclass ActionViewItemService implements IActionViewItemService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, IActionViewItemFactory>();\n\n\tprivate readonly _onDidChange = new Emitter<MenuId>();\n\treadonly onDidChange: Event<MenuId> = this._onDidChange.event;\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tlookUp(menu: MenuId, commandOrMenuId: string | MenuId): IActionViewItemFactory | undefined {\n\t\treturn this._providers.get(this._makeKey(menu, commandOrMenuId));\n\t}\n\n\tprivate _makeKey(menu: MenuId, commandOrMenuId: string | MenuId) {\n\t\treturn `${menu.id}/${(commandOrMenuId instanceof MenuId ? commandOrMenuId.id : commandOrMenuId)}`;\n\t}\n}\n\nregisterSingleton(IActionViewItemService, ActionViewItemService, InstantiationType.Delayed);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IActionViewItem } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { IActionViewItemOptions } from '../../../base/browser/ui/actionbar/actionViewItems.js';\nimport { IAction } from '../../../base/common/actions.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { InstantiationType, registerSingleton } from '../../instantiation/common/extensions.js';\nimport { createDecorator, IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { MenuId } from '../common/actions.js';\n\n\nexport const IActionViewItemService = createDecorator<IActionViewItemService>('IActionViewItemService');\n\n\nexport interface IActionViewItemFactory {\n\t(action: IAction, options: IActionViewItemOptions, instaService: IInstantiationService): IActionViewItem | undefined;\n}\n\nexport interface IActionViewItemService {\n\n\t_serviceBrand: undefined;\n\n\tonDidChange: Event<MenuId>;\n\n\tlookUp(menu: MenuId, submenu: MenuId): IActionViewItemFactory | undefined;\n\tlookUp(menu: MenuId, commandId: string): IActionViewItemFactory | undefined;\n}\n\nclass ActionViewItemService implements IActionViewItemService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, IActionViewItemFactory>();\n\n\tprivate readonly _onDidChange = new Emitter<MenuId>();\n\treadonly onDidChange: Event<MenuId> = this._onDidChange.event;\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t}\n\n\tlookUp(menu: MenuId, commandOrMenuId: string | MenuId): IActionViewItemFactory | undefined {\n\t\treturn this._providers.get(this._makeKey(menu, commandOrMenuId));\n\t}\n\n\tprivate _makeKey(menu: MenuId, commandOrMenuId: string | MenuId) {\n\t\treturn `${menu.id}/${(commandOrMenuId instanceof MenuId ? commandOrMenuId.id : commandOrMenuId)}`;\n\t}\n}\n\nregisterSingleton(IActionViewItemService, ActionViewItemService, InstantiationType.Delayed);\n"]}