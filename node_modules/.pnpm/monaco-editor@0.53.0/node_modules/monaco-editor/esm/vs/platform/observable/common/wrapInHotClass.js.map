{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/observable/common/wrapInHotClass.ts","vs/platform/observable/common/wrapInHotClass.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;gGAGgG;AAChG,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AAEvE,OAAO,EAAE,gBAAgB,EAAe,MAAM,oCAAoC,CAAC;AACnF,OAAO,EAAkB,qBAAqB,EAAE,MAAM,6CAA6C,CAAC;AAEpG,MAAM,UAAU,2BAA2B,CAAI,KAAQ;IACtD,IAAI,KAAK,YAAY,SAAS,EAAE,CAAC;QAChC,OAAO,KAAK,CAAC,SAAgB,CAAC;IAC/B,CAAC;IACD,OAAO,KAAK,CAAC;AACd,CAAC;AAID,MAAM,SAAS;IAGd,YACiB,oBAA2C;QAA3C,yBAAoB,GAApB,oBAAoB,CAAuB;IACxD,CAAC;IAEE,IAAI,CAAC,GAAG,MAAa,IAAU,CAAC;CACvC;AAED,SAAS,aAAa,CAAkB,KAAuB,EAAE,CAAgC;IAChG,OAAO,CAAC,MAAM,iBAAkB,SAAQ,CAAC;QAAjC;;YACC,aAAQ,GAA4B,SAAS,CAAC;QAYvD,CAAC;QAVS,IAAI,CAAC,GAAG,MAAa;YAC7B,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAClD,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAClC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,MAAM,CAAgB,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC;QAC1B,CAAC;KACD,CAAQ,CAAC;AACX,CAAC;AAED;;;;EAIE;AACF,MAAM,UAAU,eAAe,CAA2C,KAAiC;IAC1G,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AAC/E,CAAC;AAED,IAAM,UAAU,GAAhB,MAAM,UAAW,SAAQ,SAAS;IACjC,YAAY,MAAW,EAAyB,CAAwB,IAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;CAC3G,CAAA;AAFK,UAAU;IACW,WAAA,qBAAqB,CAAA;GAD1C,UAAU,CAEf","file":"wrapInHotClass.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isHotReloadEnabled } from '../../../base/common/hotReload.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { autorunWithStore, IObservable } from '../../../base/common/observable.js';\nimport { BrandedService, IInstantiationService } from '../../instantiation/common/instantiation.js';\n\nexport function hotClassGetOriginalInstance<T>(value: T): T {\n\tif (value instanceof BaseClass) {\n\t\treturn value._instance as any;\n\t}\n\treturn value;\n}\n\ntype Result<TArgs extends any[]> = new (...args: TArgs) => IDisposable;\n\nclass BaseClass {\n\tpublic _instance: unknown;\n\n\tconstructor(\n\t\tpublic readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tpublic init(...params: any[]): void { }\n}\n\nfunction createWrapper<T extends any[]>(clazz: IObservable<any>, B: new (...args: T) => BaseClass) {\n\treturn (class ReloadableWrapper extends B {\n\t\tprivate _autorun: IDisposable | undefined = undefined;\n\n\t\toverride init(...params: any[]) {\n\t\t\tthis._autorun = autorunWithStore((reader, store) => {\n\t\t\t\tconst clazz_ = clazz.read(reader);\n\t\t\t\tthis._instance = store.add(this.instantiationService.createInstance(clazz_, ...params) as IDisposable);\n\t\t\t});\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._autorun?.dispose();\n\t\t}\n\t}) as any;\n}\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n*/\nexport function wrapInHotClass1<TArgs extends [any, ...BrandedService[]]>(clazz: IObservable<Result<TArgs>>): Result<TArgs> {\n\treturn !isHotReloadEnabled() ? clazz.get() : createWrapper(clazz, BaseClass1);\n}\n\nclass BaseClass1 extends BaseClass {\n\tconstructor(param1: any, @IInstantiationService i: IInstantiationService,) { super(i); this.init(param1); }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isHotReloadEnabled } from '../../../base/common/hotReload.js';\nimport { IDisposable } from '../../../base/common/lifecycle.js';\nimport { autorunWithStore, IObservable } from '../../../base/common/observable.js';\nimport { BrandedService, IInstantiationService } from '../../instantiation/common/instantiation.js';\n\nexport function hotClassGetOriginalInstance<T>(value: T): T {\n\tif (value instanceof BaseClass) {\n\t\treturn value._instance as any;\n\t}\n\treturn value;\n}\n\ntype Result<TArgs extends any[]> = new (...args: TArgs) => IDisposable;\n\nclass BaseClass {\n\tpublic _instance: unknown;\n\n\tconstructor(\n\t\tpublic readonly instantiationService: IInstantiationService,\n\t) { }\n\n\tpublic init(...params: any[]): void { }\n}\n\nfunction createWrapper<T extends any[]>(clazz: IObservable<any>, B: new (...args: T) => BaseClass) {\n\treturn (class ReloadableWrapper extends B {\n\t\tprivate _autorun: IDisposable | undefined = undefined;\n\n\t\toverride init(...params: any[]) {\n\t\t\tthis._autorun = autorunWithStore((reader, store) => {\n\t\t\t\tconst clazz_ = clazz.read(reader);\n\t\t\t\tthis._instance = store.add(this.instantiationService.createInstance(clazz_, ...params) as IDisposable);\n\t\t\t});\n\t\t}\n\n\t\tdispose(): void {\n\t\t\tthis._autorun?.dispose();\n\t\t}\n\t}) as any;\n}\n\n/**\n * Wrap a class in a reloadable wrapper.\n * When the wrapper is created, the original class is created.\n * When the original class changes, the instance is re-created.\n*/\nexport function wrapInHotClass1<TArgs extends [any, ...BrandedService[]]>(clazz: IObservable<Result<TArgs>>): Result<TArgs> {\n\treturn !isHotReloadEnabled() ? clazz.get() : createWrapper(clazz, BaseClass1);\n}\n\nclass BaseClass1 extends BaseClass {\n\tconstructor(param1: any, @IInstantiationService i: IInstantiationService,) { super(i); this.init(param1); }\n}\n"]}