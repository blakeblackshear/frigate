{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/quickinput/browser/tree/quickInputTreeRenderer.ts","vs/platform/quickinput/browser/tree/quickInputTreeRenderer.ts"],"names":[],"mappings":"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","file":"quickInputTreeRenderer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cssJs from '../../../../base/browser/cssValue.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { IManagedHoverTooltipMarkdownString } from '../../../../base/browser/ui/hover/hover.js';\nimport { IHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegate.js';\nimport { IconLabel } from '../../../../base/browser/ui/iconLabel/iconLabel.js';\nimport { TriStateCheckbox } from '../../../../base/browser/ui/toggle/toggle.js';\nimport { ITreeElementRenderDetails, ITreeNode, ITreeRenderer } from '../../../../base/browser/ui/tree/tree.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { defaultCheckboxStyles } from '../../../theme/browser/defaultStyles.js';\nimport { isDark } from '../../../theme/common/theme.js';\nimport { escape } from '../../../../base/common/strings.js';\nimport { IThemeService } from '../../../theme/common/themeService.js';\nimport { IQuickTreeCheckboxEvent, IQuickTreeItem, IQuickTreeItemButtonEvent } from '../../common/quickInput.js';\nimport { quickInputButtonToAction } from '../quickInputUtils.js';\nimport { IQuickTreeFilterData } from './quickInputTree.js';\n\nconst $ = dom.$;\n\nexport interface IQuickTreeTemplateData {\n\tentry: HTMLElement;\n\tcheckbox: TriStateCheckbox;\n\ticon: HTMLElement;\n\tlabel: IconLabel;\n\tactionBar: ActionBar;\n\ttoDisposeElement: DisposableStore;\n\ttoDisposeTemplate: DisposableStore;\n}\n\nexport class QuickInputTreeRenderer<T extends IQuickTreeItem> extends Disposable implements ITreeRenderer<T, IQuickTreeFilterData, IQuickTreeTemplateData> {\n\tstatic readonly ID = 'quickInputTreeElement';\n\ttemplateId = QuickInputTreeRenderer.ID;\n\n\tconstructor(\n\t\tprivate readonly _hoverDelegate: IHoverDelegate | undefined,\n\t\tprivate readonly _buttonTriggeredEmitter: Emitter<IQuickTreeItemButtonEvent<T>>,\n\t\tprivate readonly onCheckedEvent: Event<IQuickTreeCheckboxEvent<T>>,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t}\n\n\trenderTemplate(container: HTMLElement): IQuickTreeTemplateData {\n\t\tconst store = new DisposableStore();\n\n\t\t// Main entry container\n\t\tconst entry = dom.append(container, $('.quick-input-tree-entry'));\n\n\t\tconst checkbox = store.add(new TriStateCheckbox('', false, { ...defaultCheckboxStyles, size: 15 }));\n\t\tentry.appendChild(checkbox.domNode);\n\n\t\tconst checkboxLabel = dom.append(entry, $('label.quick-input-tree-label'));\n\t\tconst rows = dom.append(checkboxLabel, $('.quick-input-tree-rows'));\n\t\tconst row1 = dom.append(rows, $('.quick-input-tree-row'));\n\t\tconst icon = dom.prepend(row1, $('.quick-input-tree-icon'));\n\t\tconst label = store.add(new IconLabel(row1, {\n\t\t\tsupportHighlights: true,\n\t\t\tsupportDescriptionHighlights: true,\n\t\t\tsupportIcons: true,\n\t\t\thoverDelegate: this._hoverDelegate\n\t\t}));\n\t\tconst actionBar = store.add(new ActionBar(entry, this._hoverDelegate ? { hoverDelegate: this._hoverDelegate } : undefined));\n\t\tactionBar.domNode.classList.add('quick-input-tree-entry-action-bar');\n\t\treturn {\n\t\t\ttoDisposeTemplate: store,\n\t\t\tentry,\n\t\t\tcheckbox,\n\t\t\ticon,\n\t\t\tlabel,\n\t\t\tactionBar,\n\t\t\ttoDisposeElement: new DisposableStore(),\n\t\t};\n\t}\n\trenderElement(node: ITreeNode<T, IQuickTreeFilterData>, index: number, templateData: IQuickTreeTemplateData, _details?: ITreeElementRenderDetails): void {\n\t\tconst store = templateData.toDisposeElement;\n\t\tconst quickTreeItem = node.element;\n\n\t\t// Checkbox\n\t\ttemplateData.checkbox.domNode.style.display = '';\n\t\ttemplateData.checkbox.checked = quickTreeItem.checked ?? false;\n\t\tstore.add(Event.filter(this.onCheckedEvent, e => e.item === quickTreeItem)(e => templateData.checkbox.checked = e.checked));\n\t\tif (quickTreeItem.disabled) {\n\t\t\ttemplateData.checkbox.disable();\n\t\t}\n\n\t\t// Icon\n\t\tif (quickTreeItem.iconPath) {\n\t\t\tconst icon = isDark(this._themeService.getColorTheme().type) ? quickTreeItem.iconPath.dark : (quickTreeItem.iconPath.light ?? quickTreeItem.iconPath.dark);\n\t\t\tconst iconUrl = URI.revive(icon);\n\t\t\ttemplateData.icon.className = 'quick-input-tree-icon';\n\t\t\ttemplateData.icon.style.backgroundImage = cssJs.asCSSUrl(iconUrl);\n\t\t} else {\n\t\t\ttemplateData.icon.style.backgroundImage = '';\n\t\t\ttemplateData.icon.className = quickTreeItem.iconClass ? `quick-input-tree-icon ${quickTreeItem.iconClass}` : '';\n\t\t}\n\n\t\tconst { labelHighlights: matches, descriptionHighlights: descriptionMatches } = node.filterData || {};\n\n\t\t// Label and Description\n\t\tlet descriptionTitle: IManagedHoverTooltipMarkdownString | undefined;\n\t\t// NOTE: If we bring back quick tool tips, we need to check that here like we do in the QuickInputListRenderer\n\t\tif (quickTreeItem.description) {\n\t\t\tdescriptionTitle = {\n\t\t\t\tmarkdown: {\n\t\t\t\t\tvalue: escape(quickTreeItem.description),\n\t\t\t\t\tsupportThemeIcons: true\n\t\t\t\t},\n\t\t\t\tmarkdownNotSupportedFallback: quickTreeItem.description\n\t\t\t};\n\t\t}\n\t\ttemplateData.label.setLabel(\n\t\t\tquickTreeItem.label,\n\t\t\tquickTreeItem.description,\n\t\t\t{\n\t\t\t\tmatches,\n\t\t\t\tdescriptionMatches,\n\t\t\t\textraClasses: quickTreeItem.iconClasses,\n\t\t\t\titalic: quickTreeItem.italic,\n\t\t\t\tstrikethrough: quickTreeItem.strikethrough,\n\t\t\t\tlabelEscapeNewLines: true,\n\t\t\t\tdescriptionTitle\n\t\t\t}\n\t\t);\n\n\t\t// Action Bar\n\t\tconst buttons = quickTreeItem.buttons;\n\t\tif (buttons && buttons.length) {\n\t\t\ttemplateData.actionBar.push(buttons.map((button, index) => quickInputButtonToAction(\n\t\t\t\tbutton,\n\t\t\t\t`tree-${index}`,\n\t\t\t\t() => this._buttonTriggeredEmitter.fire({ item: quickTreeItem, button })\n\t\t\t)), { icon: true, label: false });\n\t\t\ttemplateData.entry.classList.add('has-actions');\n\t\t} else {\n\t\t\ttemplateData.entry.classList.remove('has-actions');\n\t\t}\n\t}\n\tdisposeElement(_element: ITreeNode<T, IQuickTreeFilterData>, _index: number, templateData: IQuickTreeTemplateData, _details?: ITreeElementRenderDetails): void {\n\t\ttemplateData.toDisposeElement.clear();\n\t\ttemplateData.actionBar.clear();\n\t}\n\tdisposeTemplate(templateData: IQuickTreeTemplateData): void {\n\t\ttemplateData.toDisposeElement.dispose();\n\t\ttemplateData.toDisposeTemplate.dispose();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cssJs from '../../../../base/browser/cssValue.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { ActionBar } from '../../../../base/browser/ui/actionbar/actionbar.js';\nimport { IManagedHoverTooltipMarkdownString } from '../../../../base/browser/ui/hover/hover.js';\nimport { IHoverDelegate } from '../../../../base/browser/ui/hover/hoverDelegate.js';\nimport { IconLabel } from '../../../../base/browser/ui/iconLabel/iconLabel.js';\nimport { TriStateCheckbox } from '../../../../base/browser/ui/toggle/toggle.js';\nimport { ITreeElementRenderDetails, ITreeNode, ITreeRenderer } from '../../../../base/browser/ui/tree/tree.js';\nimport { Emitter, Event } from '../../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { defaultCheckboxStyles } from '../../../theme/browser/defaultStyles.js';\nimport { isDark } from '../../../theme/common/theme.js';\nimport { escape } from '../../../../base/common/strings.js';\nimport { IThemeService } from '../../../theme/common/themeService.js';\nimport { IQuickTreeCheckboxEvent, IQuickTreeItem, IQuickTreeItemButtonEvent } from '../../common/quickInput.js';\nimport { quickInputButtonToAction } from '../quickInputUtils.js';\nimport { IQuickTreeFilterData } from './quickInputTree.js';\n\nconst $ = dom.$;\n\nexport interface IQuickTreeTemplateData {\n\tentry: HTMLElement;\n\tcheckbox: TriStateCheckbox;\n\ticon: HTMLElement;\n\tlabel: IconLabel;\n\tactionBar: ActionBar;\n\ttoDisposeElement: DisposableStore;\n\ttoDisposeTemplate: DisposableStore;\n}\n\nexport class QuickInputTreeRenderer<T extends IQuickTreeItem> extends Disposable implements ITreeRenderer<T, IQuickTreeFilterData, IQuickTreeTemplateData> {\n\tstatic readonly ID = 'quickInputTreeElement';\n\ttemplateId = QuickInputTreeRenderer.ID;\n\n\tconstructor(\n\t\tprivate readonly _hoverDelegate: IHoverDelegate | undefined,\n\t\tprivate readonly _buttonTriggeredEmitter: Emitter<IQuickTreeItemButtonEvent<T>>,\n\t\tprivate readonly onCheckedEvent: Event<IQuickTreeCheckboxEvent<T>>,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t) {\n\t\tsuper();\n\t}\n\n\trenderTemplate(container: HTMLElement): IQuickTreeTemplateData {\n\t\tconst store = new DisposableStore();\n\n\t\t// Main entry container\n\t\tconst entry = dom.append(container, $('.quick-input-tree-entry'));\n\n\t\tconst checkbox = store.add(new TriStateCheckbox('', false, { ...defaultCheckboxStyles, size: 15 }));\n\t\tentry.appendChild(checkbox.domNode);\n\n\t\tconst checkboxLabel = dom.append(entry, $('label.quick-input-tree-label'));\n\t\tconst rows = dom.append(checkboxLabel, $('.quick-input-tree-rows'));\n\t\tconst row1 = dom.append(rows, $('.quick-input-tree-row'));\n\t\tconst icon = dom.prepend(row1, $('.quick-input-tree-icon'));\n\t\tconst label = store.add(new IconLabel(row1, {\n\t\t\tsupportHighlights: true,\n\t\t\tsupportDescriptionHighlights: true,\n\t\t\tsupportIcons: true,\n\t\t\thoverDelegate: this._hoverDelegate\n\t\t}));\n\t\tconst actionBar = store.add(new ActionBar(entry, this._hoverDelegate ? { hoverDelegate: this._hoverDelegate } : undefined));\n\t\tactionBar.domNode.classList.add('quick-input-tree-entry-action-bar');\n\t\treturn {\n\t\t\ttoDisposeTemplate: store,\n\t\t\tentry,\n\t\t\tcheckbox,\n\t\t\ticon,\n\t\t\tlabel,\n\t\t\tactionBar,\n\t\t\ttoDisposeElement: new DisposableStore(),\n\t\t};\n\t}\n\trenderElement(node: ITreeNode<T, IQuickTreeFilterData>, index: number, templateData: IQuickTreeTemplateData, _details?: ITreeElementRenderDetails): void {\n\t\tconst store = templateData.toDisposeElement;\n\t\tconst quickTreeItem = node.element;\n\n\t\t// Checkbox\n\t\ttemplateData.checkbox.domNode.style.display = '';\n\t\ttemplateData.checkbox.checked = quickTreeItem.checked ?? false;\n\t\tstore.add(Event.filter(this.onCheckedEvent, e => e.item === quickTreeItem)(e => templateData.checkbox.checked = e.checked));\n\t\tif (quickTreeItem.disabled) {\n\t\t\ttemplateData.checkbox.disable();\n\t\t}\n\n\t\t// Icon\n\t\tif (quickTreeItem.iconPath) {\n\t\t\tconst icon = isDark(this._themeService.getColorTheme().type) ? quickTreeItem.iconPath.dark : (quickTreeItem.iconPath.light ?? quickTreeItem.iconPath.dark);\n\t\t\tconst iconUrl = URI.revive(icon);\n\t\t\ttemplateData.icon.className = 'quick-input-tree-icon';\n\t\t\ttemplateData.icon.style.backgroundImage = cssJs.asCSSUrl(iconUrl);\n\t\t} else {\n\t\t\ttemplateData.icon.style.backgroundImage = '';\n\t\t\ttemplateData.icon.className = quickTreeItem.iconClass ? `quick-input-tree-icon ${quickTreeItem.iconClass}` : '';\n\t\t}\n\n\t\tconst { labelHighlights: matches, descriptionHighlights: descriptionMatches } = node.filterData || {};\n\n\t\t// Label and Description\n\t\tlet descriptionTitle: IManagedHoverTooltipMarkdownString | undefined;\n\t\t// NOTE: If we bring back quick tool tips, we need to check that here like we do in the QuickInputListRenderer\n\t\tif (quickTreeItem.description) {\n\t\t\tdescriptionTitle = {\n\t\t\t\tmarkdown: {\n\t\t\t\t\tvalue: escape(quickTreeItem.description),\n\t\t\t\t\tsupportThemeIcons: true\n\t\t\t\t},\n\t\t\t\tmarkdownNotSupportedFallback: quickTreeItem.description\n\t\t\t};\n\t\t}\n\t\ttemplateData.label.setLabel(\n\t\t\tquickTreeItem.label,\n\t\t\tquickTreeItem.description,\n\t\t\t{\n\t\t\t\tmatches,\n\t\t\t\tdescriptionMatches,\n\t\t\t\textraClasses: quickTreeItem.iconClasses,\n\t\t\t\titalic: quickTreeItem.italic,\n\t\t\t\tstrikethrough: quickTreeItem.strikethrough,\n\t\t\t\tlabelEscapeNewLines: true,\n\t\t\t\tdescriptionTitle\n\t\t\t}\n\t\t);\n\n\t\t// Action Bar\n\t\tconst buttons = quickTreeItem.buttons;\n\t\tif (buttons && buttons.length) {\n\t\t\ttemplateData.actionBar.push(buttons.map((button, index) => quickInputButtonToAction(\n\t\t\t\tbutton,\n\t\t\t\t`tree-${index}`,\n\t\t\t\t() => this._buttonTriggeredEmitter.fire({ item: quickTreeItem, button })\n\t\t\t)), { icon: true, label: false });\n\t\t\ttemplateData.entry.classList.add('has-actions');\n\t\t} else {\n\t\t\ttemplateData.entry.classList.remove('has-actions');\n\t\t}\n\t}\n\tdisposeElement(_element: ITreeNode<T, IQuickTreeFilterData>, _index: number, templateData: IQuickTreeTemplateData, _details?: ITreeElementRenderDetails): void {\n\t\ttemplateData.toDisposeElement.clear();\n\t\ttemplateData.actionBar.clear();\n\t}\n\tdisposeTemplate(templateData: IQuickTreeTemplateData): void {\n\t\ttemplateData.toDisposeElement.dispose();\n\t\ttemplateData.toDisposeTemplate.dispose();\n\t}\n}\n"]}