{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/layout/browser/layoutService.ts","vs/platform/layout/browser/layoutService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAKhG,OAAO,EAAE,eAAe,EAAE,MAAM,6CAA6C,CAAC;AAE9E,MAAM,CAAC,MAAM,cAAc,GAAG,eAAe,CAAiB,eAAe,CAAC,CAAC","file":"layoutService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDimension } from '../../../base/browser/dom.js';\nimport { Event } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const ILayoutService = createDecorator<ILayoutService>('layoutService');\n\nexport interface ILayoutOffsetInfo {\n\n\t/**\n\t * Generic top offset\n\t */\n\treadonly top: number;\n\n\t/**\n\t * Quick pick specific top offset.\n\t */\n\treadonly quickPickTop: number;\n}\n\nexport interface ILayoutService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is emitted when the main container is layed out.\n\t */\n\treadonly onDidLayoutMainContainer: Event<IDimension>;\n\n\t/**\n\t * An event that is emitted when any container is layed out.\n\t */\n\treadonly onDidLayoutContainer: Event<{ readonly container: HTMLElement; readonly dimension: IDimension }>;\n\n\t/**\n\t * An event that is emitted when the active container is layed out.\n\t */\n\treadonly onDidLayoutActiveContainer: Event<IDimension>;\n\n\t/**\n\t * An event that is emitted when a new container is added. This\n\t * can happen in multi-window environments.\n\t */\n\treadonly onDidAddContainer: Event<{ readonly container: HTMLElement; readonly disposables: DisposableStore }>;\n\n\t/**\n\t * An event that is emitted when the active container changes.\n\t */\n\treadonly onDidChangeActiveContainer: Event<void>;\n\n\t/**\n\t * The dimensions of the main container.\n\t */\n\treadonly mainContainerDimension: IDimension;\n\n\t/**\n\t * The dimensions of the active container.\n\t */\n\treadonly activeContainerDimension: IDimension;\n\n\t/**\n\t * Main container of the application.\n\t */\n\treadonly mainContainer: HTMLElement;\n\n\t/**\n\t * Active container of the application. When multiple windows are opened, will return\n\t * the container of the active, focused window.\n\t */\n\treadonly activeContainer: HTMLElement;\n\n\t/**\n\t * All the containers of the application. There can be one container per window.\n\t */\n\treadonly containers: Iterable<HTMLElement>;\n\n\t/**\n\t * Get the container for the given window.\n\t */\n\tgetContainer(window: Window): HTMLElement;\n\n\t/**\n\t * Ensures that the styles for the container associated\n\t * to the window have loaded. For the main window, this\n\t * will resolve instantly, but for floating windows, this\n\t * will resolve once the styles have been loaded and helps\n\t * for when certain layout assumptions are made.\n\t */\n\twhenContainerStylesLoaded(window: Window): Promise<void> | undefined;\n\n\t/**\n\t * An offset to use for positioning elements inside the main container.\n\t */\n\treadonly mainContainerOffset: ILayoutOffsetInfo;\n\n\t/**\n\t * An offset to use for positioning elements inside the container.\n\t */\n\treadonly activeContainerOffset: ILayoutOffsetInfo;\n\n\t/**\n\t * Focus the primary component of the active container.\n\t */\n\tfocus(): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDimension } from '../../../base/browser/dom.js';\nimport { Event } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\n\nexport const ILayoutService = createDecorator<ILayoutService>('layoutService');\n\nexport interface ILayoutOffsetInfo {\n\n\t/**\n\t * Generic top offset\n\t */\n\treadonly top: number;\n\n\t/**\n\t * Quick pick specific top offset.\n\t */\n\treadonly quickPickTop: number;\n}\n\nexport interface ILayoutService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is emitted when the main container is layed out.\n\t */\n\treadonly onDidLayoutMainContainer: Event<IDimension>;\n\n\t/**\n\t * An event that is emitted when any container is layed out.\n\t */\n\treadonly onDidLayoutContainer: Event<{ readonly container: HTMLElement; readonly dimension: IDimension }>;\n\n\t/**\n\t * An event that is emitted when the active container is layed out.\n\t */\n\treadonly onDidLayoutActiveContainer: Event<IDimension>;\n\n\t/**\n\t * An event that is emitted when a new container is added. This\n\t * can happen in multi-window environments.\n\t */\n\treadonly onDidAddContainer: Event<{ readonly container: HTMLElement; readonly disposables: DisposableStore }>;\n\n\t/**\n\t * An event that is emitted when the active container changes.\n\t */\n\treadonly onDidChangeActiveContainer: Event<void>;\n\n\t/**\n\t * The dimensions of the main container.\n\t */\n\treadonly mainContainerDimension: IDimension;\n\n\t/**\n\t * The dimensions of the active container.\n\t */\n\treadonly activeContainerDimension: IDimension;\n\n\t/**\n\t * Main container of the application.\n\t */\n\treadonly mainContainer: HTMLElement;\n\n\t/**\n\t * Active container of the application. When multiple windows are opened, will return\n\t * the container of the active, focused window.\n\t */\n\treadonly activeContainer: HTMLElement;\n\n\t/**\n\t * All the containers of the application. There can be one container per window.\n\t */\n\treadonly containers: Iterable<HTMLElement>;\n\n\t/**\n\t * Get the container for the given window.\n\t */\n\tgetContainer(window: Window): HTMLElement;\n\n\t/**\n\t * Ensures that the styles for the container associated\n\t * to the window have loaded. For the main window, this\n\t * will resolve instantly, but for floating windows, this\n\t * will resolve once the styles have been loaded and helps\n\t * for when certain layout assumptions are made.\n\t */\n\twhenContainerStylesLoaded(window: Window): Promise<void> | undefined;\n\n\t/**\n\t * An offset to use for positioning elements inside the main container.\n\t */\n\treadonly mainContainerOffset: ILayoutOffsetInfo;\n\n\t/**\n\t * An offset to use for positioning elements inside the container.\n\t */\n\treadonly activeContainerOffset: ILayoutOffsetInfo;\n\n\t/**\n\t * Focus the primary component of the active container.\n\t */\n\tfocus(): void;\n}\n"]}