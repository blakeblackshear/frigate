{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/quickinput/browser/quickAccess.ts","vs/platform/quickinput/browser/quickAccess.ts"],"names":[],"mappings":"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","file":"quickAccess.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, isDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions, IQuickAccessController, IQuickAccessOptions, IQuickAccessProvider, IQuickAccessProviderDescriptor, IQuickAccessRegistry } from '../common/quickAccess.js';\nimport { IQuickInputService, IQuickPick, IQuickPickItem, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport class QuickAccessController extends Disposable implements IQuickAccessController {\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\tprivate readonly mapProviderToDescriptor = new Map<IQuickAccessProviderDescriptor, IQuickAccessProvider>();\n\n\tprivate readonly lastAcceptedPickerValues = new Map<IQuickAccessProviderDescriptor, string>();\n\n\tprivate visibleQuickAccess: {\n\t\treadonly picker: IQuickPick<IQuickPickItem, { useSeparators: true }>;\n\t\treadonly descriptor: IQuickAccessProviderDescriptor | undefined;\n\t\treadonly value: string;\n\t} | undefined = undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const provider of this.mapProviderToDescriptor.values()) {\n\t\t\t\tif (isDisposable(provider)) {\n\t\t\t\t\tprovider.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.visibleQuickAccess?.picker.dispose();\n\t\t}));\n\t}\n\n\tshow(value = '', options?: IQuickAccessOptions): void {\n\t\tthis.doShowOrPick(value, false, options);\n\t}\n\n\tprivate doShowOrPick(value: string, pick: true, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined>;\n\tprivate doShowOrPick(value: string, pick: false, options?: IQuickAccessOptions): void;\n\tprivate doShowOrPick(value: string, pick: boolean, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> | void {\n\n\t\t// Find provider for the value to show\n\t\tconst [provider, descriptor] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\n\t\t// Return early if quick access is already showing on that same prefix\n\t\tconst visibleQuickAccess = this.visibleQuickAccess;\n\t\tconst visibleDescriptor = visibleQuickAccess?.descriptor;\n\t\tif (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n\n\t\t\t// Apply value only if it is more specific than the prefix\n\t\t\t// from the provider and we are not instructed to preserve\n\t\t\tif (value !== descriptor.prefix && !options?.preserveValue) {\n\t\t\t\tvisibleQuickAccess.picker.value = value;\n\t\t\t}\n\n\t\t\t// Always adjust selection\n\t\t\tthis.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Rewrite the filter value based on certain rules unless disabled\n\t\tif (descriptor && !options?.preserveValue) {\n\t\t\tlet newValue: string | undefined = undefined;\n\n\t\t\t// If we have a visible provider with a value, take it's filter value but\n\t\t\t// rewrite to new provider prefix in case they differ\n\t\t\tif (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n\t\t\t\tconst newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\t\t\t\tif (newValueCandidateWithoutPrefix) {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, take a default value as instructed\n\t\t\tif (!newValue) {\n\t\t\t\tconst defaultFilterValue = provider?.defaultFilterValue;\n\t\t\t\tif (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n\t\t\t\t\tnewValue = this.lastAcceptedPickerValues.get(descriptor);\n\t\t\t\t} else if (typeof defaultFilterValue === 'string') {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${defaultFilterValue}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof newValue === 'string') {\n\t\t\t\tvalue = newValue;\n\t\t\t}\n\t\t}\n\n\t\t// Store the existing selection if there was one.\n\t\tconst visibleSelection = visibleQuickAccess?.picker?.valueSelection;\n\t\tconst visibleValue = visibleQuickAccess?.picker?.value;\n\n\t\t// Create a picker for the provider to use with the initial value\n\t\t// and adjust the filtering to exclude the prefix from filtering\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n\t\tpicker.value = value;\n\t\tthis.adjustValueSelection(picker, descriptor, options);\n\t\tpicker.placeholder = options?.placeholder ?? descriptor?.placeholder;\n\t\tpicker.quickNavigate = options?.quickNavigateConfiguration;\n\t\tpicker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\t\tif (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n\t\t\tpicker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n\t\t}\n\t\tpicker.contextKey = descriptor?.contextKey;\n\t\tpicker.filterValue = (value: string) => value.substring(descriptor ? descriptor.prefix.length : 0);\n\n\t\t// Pick mode: setup a promise that can be resolved\n\t\t// with the selected items and prevent execution\n\t\tlet pickPromise: DeferredPromise<IQuickPickItem[]> | undefined = undefined;\n\t\tif (pick) {\n\t\t\tpickPromise = new DeferredPromise<IQuickPickItem[]>();\n\t\t\tdisposables.add(Event.once(picker.onWillAccept)(e => {\n\t\t\t\te.veto();\n\t\t\t\tpicker.hide();\n\t\t\t}));\n\t\t}\n\n\t\t// Register listeners\n\t\tdisposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options));\n\n\t\t// Ask provider to fill the picker as needed if we have one\n\t\t// and pass over a cancellation token that will indicate when\n\t\t// the picker is hiding without a pick being made.\n\t\tconst cts = disposables.add(new CancellationTokenSource());\n\t\tif (provider) {\n\t\t\tdisposables.add(provider.provide(picker, cts.token, options?.providerOptions));\n\t\t}\n\n\t\t// Finally, trigger disposal and cancellation when the picker\n\t\t// hides depending on items selected or not.\n\t\tEvent.once(picker.onDidHide)(() => {\n\t\t\tif (picker.selectedItems.length === 0) {\n\t\t\t\tcts.cancel();\n\t\t\t}\n\n\t\t\t// Start to dispose once picker hides\n\t\t\tdisposables.dispose();\n\n\t\t\t// Resolve pick promise with selected items\n\t\t\tpickPromise?.complete(picker.selectedItems.slice(0));\n\t\t});\n\n\t\t// Finally, show the picker. This is important because a provider\n\t\t// may not call this and then our disposables would leak that rely\n\t\t// on the onDidHide event.\n\t\tpicker.show();\n\n\t\t// If the previous picker had a selection and the value is unchanged, we should set that in the new picker.\n\t\tif (visibleSelection && visibleValue === value) {\n\t\t\tpicker.valueSelection = visibleSelection;\n\t\t}\n\n\t\t// Pick mode: return with promise\n\t\tif (pick) {\n\t\t\treturn pickPromise?.p;\n\t\t}\n\t}\n\n\tprivate adjustValueSelection(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, descriptor?: IQuickAccessProviderDescriptor, options?: IQuickAccessOptions): void {\n\t\tlet valueSelection: [number, number];\n\n\t\t// Preserve: just always put the cursor at the end\n\t\tif (options?.preserveValue) {\n\t\t\tvalueSelection = [picker.value.length, picker.value.length];\n\t\t}\n\n\t\t// Otherwise: select the value up until the prefix\n\t\telse {\n\t\t\tvalueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n\t\t}\n\n\t\tpicker.valueSelection = valueSelection;\n\t}\n\n\tprivate registerPickerListeners(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\tprovider: IQuickAccessProvider | undefined,\n\t\tdescriptor: IQuickAccessProviderDescriptor | undefined,\n\t\tvalue: string,\n\t\toptions?: IQuickAccessOptions\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Remember as last visible picker and clean up once picker get's disposed\n\t\tconst visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tif (visibleQuickAccess === this.visibleQuickAccess) {\n\t\t\t\tthis.visibleQuickAccess = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// Whenever the value changes, check if the provider has\n\t\t// changed and if so - re-create the picker from the beginning\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst [providerForValue] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\t\t\tif (providerForValue !== provider) {\n\t\t\t\tthis.show(value, {\n\t\t\t\t\tenabledProviderPrefixes: options?.enabledProviderPrefixes,\n\t\t\t\t\t// do not rewrite value from user typing!\n\t\t\t\t\tpreserveValue: true,\n\t\t\t\t\t// persist the value of the providerOptions from the original showing\n\t\t\t\t\tproviderOptions: options?.providerOptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvisibleQuickAccess.value = value; // remember the value in our visible one\n\t\t\t}\n\t\t}));\n\n\t\t// Remember picker input for future use when accepting\n\t\tif (descriptor) {\n\t\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\t\tthis.lastAcceptedPickerValues.set(descriptor, picker.value);\n\t\t\t}));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate getOrInstantiateProvider(value: string, enabledProviderPrefixes?: string[]): [IQuickAccessProvider | undefined, IQuickAccessProviderDescriptor | undefined] {\n\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value);\n\t\tif (!providerDescriptor || enabledProviderPrefixes && !enabledProviderPrefixes?.includes(providerDescriptor.prefix)) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tlet provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\t\tif (!provider) {\n\t\t\tprovider = this.instantiationService.createInstance(providerDescriptor.ctor);\n\t\t\tthis.mapProviderToDescriptor.set(providerDescriptor, provider);\n\t\t}\n\n\t\treturn [provider, providerDescriptor];\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, IDisposable, isDisposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions, IQuickAccessController, IQuickAccessOptions, IQuickAccessProvider, IQuickAccessProviderDescriptor, IQuickAccessRegistry } from '../common/quickAccess.js';\nimport { IQuickInputService, IQuickPick, IQuickPickItem, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nexport class QuickAccessController extends Disposable implements IQuickAccessController {\n\n\tprivate readonly registry = Registry.as<IQuickAccessRegistry>(Extensions.Quickaccess);\n\tprivate readonly mapProviderToDescriptor = new Map<IQuickAccessProviderDescriptor, IQuickAccessProvider>();\n\n\tprivate readonly lastAcceptedPickerValues = new Map<IQuickAccessProviderDescriptor, string>();\n\n\tprivate visibleQuickAccess: {\n\t\treadonly picker: IQuickPick<IQuickPickItem, { useSeparators: true }>;\n\t\treadonly descriptor: IQuickAccessProviderDescriptor | undefined;\n\t\treadonly value: string;\n\t} | undefined = undefined;\n\n\tconstructor(\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const provider of this.mapProviderToDescriptor.values()) {\n\t\t\t\tif (isDisposable(provider)) {\n\t\t\t\t\tprovider.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.visibleQuickAccess?.picker.dispose();\n\t\t}));\n\t}\n\n\tshow(value = '', options?: IQuickAccessOptions): void {\n\t\tthis.doShowOrPick(value, false, options);\n\t}\n\n\tprivate doShowOrPick(value: string, pick: true, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined>;\n\tprivate doShowOrPick(value: string, pick: false, options?: IQuickAccessOptions): void;\n\tprivate doShowOrPick(value: string, pick: boolean, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined> | void {\n\n\t\t// Find provider for the value to show\n\t\tconst [provider, descriptor] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\n\t\t// Return early if quick access is already showing on that same prefix\n\t\tconst visibleQuickAccess = this.visibleQuickAccess;\n\t\tconst visibleDescriptor = visibleQuickAccess?.descriptor;\n\t\tif (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n\n\t\t\t// Apply value only if it is more specific than the prefix\n\t\t\t// from the provider and we are not instructed to preserve\n\t\t\tif (value !== descriptor.prefix && !options?.preserveValue) {\n\t\t\t\tvisibleQuickAccess.picker.value = value;\n\t\t\t}\n\n\t\t\t// Always adjust selection\n\t\t\tthis.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Rewrite the filter value based on certain rules unless disabled\n\t\tif (descriptor && !options?.preserveValue) {\n\t\t\tlet newValue: string | undefined = undefined;\n\n\t\t\t// If we have a visible provider with a value, take it's filter value but\n\t\t\t// rewrite to new provider prefix in case they differ\n\t\t\tif (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n\t\t\t\tconst newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n\t\t\t\tif (newValueCandidateWithoutPrefix) {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, take a default value as instructed\n\t\t\tif (!newValue) {\n\t\t\t\tconst defaultFilterValue = provider?.defaultFilterValue;\n\t\t\t\tif (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n\t\t\t\t\tnewValue = this.lastAcceptedPickerValues.get(descriptor);\n\t\t\t\t} else if (typeof defaultFilterValue === 'string') {\n\t\t\t\t\tnewValue = `${descriptor.prefix}${defaultFilterValue}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof newValue === 'string') {\n\t\t\t\tvalue = newValue;\n\t\t\t}\n\t\t}\n\n\t\t// Store the existing selection if there was one.\n\t\tconst visibleSelection = visibleQuickAccess?.picker?.valueSelection;\n\t\tconst visibleValue = visibleQuickAccess?.picker?.value;\n\n\t\t// Create a picker for the provider to use with the initial value\n\t\t// and adjust the filtering to exclude the prefix from filtering\n\t\tconst disposables = new DisposableStore();\n\t\tconst picker = disposables.add(this.quickInputService.createQuickPick({ useSeparators: true }));\n\t\tpicker.value = value;\n\t\tthis.adjustValueSelection(picker, descriptor, options);\n\t\tpicker.placeholder = options?.placeholder ?? descriptor?.placeholder;\n\t\tpicker.quickNavigate = options?.quickNavigateConfiguration;\n\t\tpicker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n\t\tif (typeof options?.itemActivation === 'number' || options?.quickNavigateConfiguration) {\n\t\t\tpicker.itemActivation = options?.itemActivation ?? ItemActivation.SECOND /* quick nav is always second */;\n\t\t}\n\t\tpicker.contextKey = descriptor?.contextKey;\n\t\tpicker.filterValue = (value: string) => value.substring(descriptor ? descriptor.prefix.length : 0);\n\n\t\t// Pick mode: setup a promise that can be resolved\n\t\t// with the selected items and prevent execution\n\t\tlet pickPromise: DeferredPromise<IQuickPickItem[]> | undefined = undefined;\n\t\tif (pick) {\n\t\t\tpickPromise = new DeferredPromise<IQuickPickItem[]>();\n\t\t\tdisposables.add(Event.once(picker.onWillAccept)(e => {\n\t\t\t\te.veto();\n\t\t\t\tpicker.hide();\n\t\t\t}));\n\t\t}\n\n\t\t// Register listeners\n\t\tdisposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options));\n\n\t\t// Ask provider to fill the picker as needed if we have one\n\t\t// and pass over a cancellation token that will indicate when\n\t\t// the picker is hiding without a pick being made.\n\t\tconst cts = disposables.add(new CancellationTokenSource());\n\t\tif (provider) {\n\t\t\tdisposables.add(provider.provide(picker, cts.token, options?.providerOptions));\n\t\t}\n\n\t\t// Finally, trigger disposal and cancellation when the picker\n\t\t// hides depending on items selected or not.\n\t\tEvent.once(picker.onDidHide)(() => {\n\t\t\tif (picker.selectedItems.length === 0) {\n\t\t\t\tcts.cancel();\n\t\t\t}\n\n\t\t\t// Start to dispose once picker hides\n\t\t\tdisposables.dispose();\n\n\t\t\t// Resolve pick promise with selected items\n\t\t\tpickPromise?.complete(picker.selectedItems.slice(0));\n\t\t});\n\n\t\t// Finally, show the picker. This is important because a provider\n\t\t// may not call this and then our disposables would leak that rely\n\t\t// on the onDidHide event.\n\t\tpicker.show();\n\n\t\t// If the previous picker had a selection and the value is unchanged, we should set that in the new picker.\n\t\tif (visibleSelection && visibleValue === value) {\n\t\t\tpicker.valueSelection = visibleSelection;\n\t\t}\n\n\t\t// Pick mode: return with promise\n\t\tif (pick) {\n\t\t\treturn pickPromise?.p;\n\t\t}\n\t}\n\n\tprivate adjustValueSelection(picker: IQuickPick<IQuickPickItem, { useSeparators: true }>, descriptor?: IQuickAccessProviderDescriptor, options?: IQuickAccessOptions): void {\n\t\tlet valueSelection: [number, number];\n\n\t\t// Preserve: just always put the cursor at the end\n\t\tif (options?.preserveValue) {\n\t\t\tvalueSelection = [picker.value.length, picker.value.length];\n\t\t}\n\n\t\t// Otherwise: select the value up until the prefix\n\t\telse {\n\t\t\tvalueSelection = [descriptor?.prefix.length ?? 0, picker.value.length];\n\t\t}\n\n\t\tpicker.valueSelection = valueSelection;\n\t}\n\n\tprivate registerPickerListeners(\n\t\tpicker: IQuickPick<IQuickPickItem, { useSeparators: true }>,\n\t\tprovider: IQuickAccessProvider | undefined,\n\t\tdescriptor: IQuickAccessProviderDescriptor | undefined,\n\t\tvalue: string,\n\t\toptions?: IQuickAccessOptions\n\t): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\n\t\t// Remember as last visible picker and clean up once picker get's disposed\n\t\tconst visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n\t\tdisposables.add(toDisposable(() => {\n\t\t\tif (visibleQuickAccess === this.visibleQuickAccess) {\n\t\t\t\tthis.visibleQuickAccess = undefined;\n\t\t\t}\n\t\t}));\n\n\t\t// Whenever the value changes, check if the provider has\n\t\t// changed and if so - re-create the picker from the beginning\n\t\tdisposables.add(picker.onDidChangeValue(value => {\n\t\t\tconst [providerForValue] = this.getOrInstantiateProvider(value, options?.enabledProviderPrefixes);\n\t\t\tif (providerForValue !== provider) {\n\t\t\t\tthis.show(value, {\n\t\t\t\t\tenabledProviderPrefixes: options?.enabledProviderPrefixes,\n\t\t\t\t\t// do not rewrite value from user typing!\n\t\t\t\t\tpreserveValue: true,\n\t\t\t\t\t// persist the value of the providerOptions from the original showing\n\t\t\t\t\tproviderOptions: options?.providerOptions\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvisibleQuickAccess.value = value; // remember the value in our visible one\n\t\t\t}\n\t\t}));\n\n\t\t// Remember picker input for future use when accepting\n\t\tif (descriptor) {\n\t\t\tdisposables.add(picker.onDidAccept(() => {\n\t\t\t\tthis.lastAcceptedPickerValues.set(descriptor, picker.value);\n\t\t\t}));\n\t\t}\n\n\t\treturn disposables;\n\t}\n\n\tprivate getOrInstantiateProvider(value: string, enabledProviderPrefixes?: string[]): [IQuickAccessProvider | undefined, IQuickAccessProviderDescriptor | undefined] {\n\t\tconst providerDescriptor = this.registry.getQuickAccessProvider(value);\n\t\tif (!providerDescriptor || enabledProviderPrefixes && !enabledProviderPrefixes?.includes(providerDescriptor.prefix)) {\n\t\t\treturn [undefined, undefined];\n\t\t}\n\n\t\tlet provider = this.mapProviderToDescriptor.get(providerDescriptor);\n\t\tif (!provider) {\n\t\t\tprovider = this.instantiationService.createInstance(providerDescriptor.ctor);\n\t\t\tthis.mapProviderToDescriptor.set(providerDescriptor, provider);\n\t\t}\n\n\t\treturn [provider, providerDescriptor];\n\t}\n}\n"]}