{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/contextview/browser/contextViewService.ts","vs/platform/contextview/browser/contextViewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;AAEhG,OAAO,EAAE,WAAW,EAAgD,MAAM,qDAAqD,CAAC;AAChI,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAC/D,OAAO,EAAE,cAAc,EAAE,MAAM,uCAAuC,CAAC;AAEvE,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAElD,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,UAAU;IAKjD,YACkC,aAA6B;QAE9D,KAAK,EAAE,CAAC;QAFyB,kBAAa,GAAb,aAAa,CAAgB;QAI9D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,0CAAkC,CAAC,CAAC;QAEtH,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,cAAc;IAEd,eAAe,CAAC,QAA8B,EAAE,SAAuB,EAAE,UAAoB;QAC5F,IAAI,WAAmC,CAAC;QACxC,IAAI,SAAS,EAAE,CAAC;YACf,IAAI,SAAS,KAAK,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;gBACzE,WAAW,0CAAkC,CAAC;YAC/C,CAAC;iBAAM,IAAI,UAAU,EAAE,CAAC;gBACvB,WAAW,8CAAsC,CAAC;YACnD,CAAC;iBAAM,CAAC;gBACP,WAAW,uCAA+B,CAAC;YAC5C,CAAC;QACF,CAAC;aAAM,CAAC;YACP,WAAW,0CAAkC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,SAAS,IAAI,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAE5F,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEhC,MAAM,eAAe,GAAqB;YACzC,KAAK,EAAE,GAAG,EAAE;gBACX,IAAI,IAAI,CAAC,eAAe,KAAK,eAAe,EAAE,CAAC;oBAC9C,IAAI,CAAC,eAAe,EAAE,CAAC;gBACxB,CAAC;YACF,CAAC;SACD,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,OAAO,eAAe,CAAC;IACxB,CAAC;IAED,MAAM;QACL,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;IAC3B,CAAC;IAED,eAAe,CAAC,IAAU;QACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,eAAe,GAAG,SAAS,CAAC;IAClC,CAAC;CACD,CAAA;AAxDY,kBAAkB;IAM5B,WAAA,cAAc,CAAA;GANJ,kBAAkB,CAwD9B;;AAED,MAAM,OAAO,kBAAmB,SAAQ,kBAAkB;IAIzD,qBAAqB;QACpB,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;IAC1C,CAAC;CACD","file":"contextViewService.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition, IContextViewProvider } from '../../../base/browser/ui/contextview/contextview.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILayoutService } from '../../layout/browser/layoutService.js';\nimport { IContextViewDelegate, IContextViewService, IOpenContextView } from './contextView.js';\nimport { getWindow } from '../../../base/browser/dom.js';\n\nexport class ContextViewHandler extends Disposable implements IContextViewProvider {\n\n\tprivate openContextView: IOpenContextView | undefined;\n\tprotected readonly contextView: ContextView;\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.contextView = this._register(new ContextView(this.layoutService.mainContainer, ContextViewDOMPosition.ABSOLUTE));\n\n\t\tthis.layout();\n\t\tthis._register(layoutService.onDidLayoutContainer(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IOpenContextView {\n\t\tlet domPosition: ContextViewDOMPosition;\n\t\tif (container) {\n\t\t\tif (container === this.layoutService.getContainer(getWindow(container))) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t\t} else if (shadowRoot) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED_SHADOW;\n\t\t\t} else {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED;\n\t\t\t}\n\t\t} else {\n\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t}\n\n\t\tthis.contextView.setContainer(container ?? this.layoutService.activeContainer, domPosition);\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst openContextView: IOpenContextView = {\n\t\t\tclose: () => {\n\t\t\t\tif (this.openContextView === openContextView) {\n\t\t\t\t\tthis.hideContextView();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.openContextView = openContextView;\n\t\treturn openContextView;\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t\tthis.openContextView = undefined;\n\t}\n}\n\nexport class ContextViewService extends ContextViewHandler implements IContextViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ContextView, ContextViewDOMPosition, IContextViewProvider } from '../../../base/browser/ui/contextview/contextview.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { ILayoutService } from '../../layout/browser/layoutService.js';\nimport { IContextViewDelegate, IContextViewService, IOpenContextView } from './contextView.js';\nimport { getWindow } from '../../../base/browser/dom.js';\n\nexport class ContextViewHandler extends Disposable implements IContextViewProvider {\n\n\tprivate openContextView: IOpenContextView | undefined;\n\tprotected readonly contextView: ContextView;\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService\n\t) {\n\t\tsuper();\n\n\t\tthis.contextView = this._register(new ContextView(this.layoutService.mainContainer, ContextViewDOMPosition.ABSOLUTE));\n\n\t\tthis.layout();\n\t\tthis._register(layoutService.onDidLayoutContainer(() => this.layout()));\n\t}\n\n\t// ContextView\n\n\tshowContextView(delegate: IContextViewDelegate, container?: HTMLElement, shadowRoot?: boolean): IOpenContextView {\n\t\tlet domPosition: ContextViewDOMPosition;\n\t\tif (container) {\n\t\t\tif (container === this.layoutService.getContainer(getWindow(container))) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t\t} else if (shadowRoot) {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED_SHADOW;\n\t\t\t} else {\n\t\t\t\tdomPosition = ContextViewDOMPosition.FIXED;\n\t\t\t}\n\t\t} else {\n\t\t\tdomPosition = ContextViewDOMPosition.ABSOLUTE;\n\t\t}\n\n\t\tthis.contextView.setContainer(container ?? this.layoutService.activeContainer, domPosition);\n\n\t\tthis.contextView.show(delegate);\n\n\t\tconst openContextView: IOpenContextView = {\n\t\t\tclose: () => {\n\t\t\t\tif (this.openContextView === openContextView) {\n\t\t\t\t\tthis.hideContextView();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.openContextView = openContextView;\n\t\treturn openContextView;\n\t}\n\n\tlayout(): void {\n\t\tthis.contextView.layout();\n\t}\n\n\thideContextView(data?: any): void {\n\t\tthis.contextView.hide(data);\n\t\tthis.openContextView = undefined;\n\t}\n}\n\nexport class ContextViewService extends ContextViewHandler implements IContextViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetContextViewElement(): HTMLElement {\n\t\treturn this.contextView.getViewElement();\n\t}\n}\n"]}