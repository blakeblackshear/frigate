{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/platform/jsonschemas/common/jsonContributionRegistry.ts","vs/platform/jsonschemas/common/jsonContributionRegistry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAExD,OAAO,EAAE,UAAU,EAAmB,YAAY,EAAE,MAAM,mCAAmC,CAAC;AAC9F,OAAO,KAAK,QAAQ,MAAM,mCAAmC,CAAC;AAE9D,MAAM,CAAC,MAAM,UAAU,GAAG;IACzB,gBAAgB,EAAE,yBAAyB;CAC3C,CAAC;AAkBF,SAAS,WAAW,CAAC,EAAU;IAC9B,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;QACvD,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,OAAO,EAAE,CAAC;AACX,CAAC;AAID,MAAM,wBAAyB,SAAQ,UAAU;IAAjD;;QAEkB,gBAAW,GAAkC,EAAE,CAAC;QAEhD,uBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,OAAO,EAAU,CAAC,CAAC;IAmB7E,CAAC;IAjBO,cAAc,CAAC,GAAW,EAAE,uBAAoC,EAAE,KAAuB;QAC/F,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,uBAAuB,CAAC;QAC1D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAElC,IAAI,KAAK,EAAE,CAAC;YACX,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,EAAE;gBAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;gBACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;IACF,CAAC;IAEM,mBAAmB,CAAC,GAAW;QACrC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;CAED;AAED,MAAM,wBAAwB,GAAG,IAAI,wBAAwB,EAAE,CAAC;AAChE,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAC","file":"jsonContributionRegistry.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../registry/common/platform.js';\n\nexport const Extensions = {\n\tJSONContribution: 'base.contributions.json'\n};\n\nexport interface IJSONContributionRegistry {\n\n\t/**\n\t * Register a schema to the registry.\n\t */\n\tregisterSchema(uri: string, unresolvedSchemaContent: IJSONSchema, store?: DisposableStore): void;\n\n\t/**\n\t * Notifies all listeners that the content of the given schema has changed.\n\t * @param uri The id of the schema\n\t */\n\tnotifySchemaChanged(uri: string): void;\n}\n\n\n\nfunction normalizeId(id: string) {\n\tif (id.length > 0 && id.charAt(id.length - 1) === '#') {\n\t\treturn id.substring(0, id.length - 1);\n\t}\n\treturn id;\n}\n\n\n\nclass JSONContributionRegistry extends Disposable implements IJSONContributionRegistry {\n\n\tprivate readonly schemasById: { [id: string]: IJSONSchema } = {};\n\n\tprivate readonly _onDidChangeSchema = this._register(new Emitter<string>());\n\n\tpublic registerSchema(uri: string, unresolvedSchemaContent: IJSONSchema, store?: DisposableStore): void {\n\t\tconst normalizedUri = normalizeId(uri);\n\t\tthis.schemasById[normalizedUri] = unresolvedSchemaContent;\n\t\tthis._onDidChangeSchema.fire(uri);\n\n\t\tif (store) {\n\t\t\tstore.add(toDisposable(() => {\n\t\t\t\tdelete this.schemasById[normalizedUri];\n\t\t\t\tthis._onDidChangeSchema.fire(uri);\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic notifySchemaChanged(uri: string): void {\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n}\n\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { IJSONSchema } from '../../../base/common/jsonSchema.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../registry/common/platform.js';\n\nexport const Extensions = {\n\tJSONContribution: 'base.contributions.json'\n};\n\nexport interface IJSONContributionRegistry {\n\n\t/**\n\t * Register a schema to the registry.\n\t */\n\tregisterSchema(uri: string, unresolvedSchemaContent: IJSONSchema, store?: DisposableStore): void;\n\n\t/**\n\t * Notifies all listeners that the content of the given schema has changed.\n\t * @param uri The id of the schema\n\t */\n\tnotifySchemaChanged(uri: string): void;\n}\n\n\n\nfunction normalizeId(id: string) {\n\tif (id.length > 0 && id.charAt(id.length - 1) === '#') {\n\t\treturn id.substring(0, id.length - 1);\n\t}\n\treturn id;\n}\n\n\n\nclass JSONContributionRegistry extends Disposable implements IJSONContributionRegistry {\n\n\tprivate readonly schemasById: { [id: string]: IJSONSchema } = {};\n\n\tprivate readonly _onDidChangeSchema = this._register(new Emitter<string>());\n\n\tpublic registerSchema(uri: string, unresolvedSchemaContent: IJSONSchema, store?: DisposableStore): void {\n\t\tconst normalizedUri = normalizeId(uri);\n\t\tthis.schemasById[normalizedUri] = unresolvedSchemaContent;\n\t\tthis._onDidChangeSchema.fire(uri);\n\n\t\tif (store) {\n\t\t\tstore.add(toDisposable(() => {\n\t\t\t\tdelete this.schemasById[normalizedUri];\n\t\t\t\tthis._onDidChangeSchema.fire(uri);\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic notifySchemaChanged(uri: string): void {\n\t\tthis._onDidChangeSchema.fire(uri);\n\t}\n\n}\n\nconst jsonContributionRegistry = new JSONContributionRegistry();\nplatform.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);\n"]}