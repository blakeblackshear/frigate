{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/history.ts","vs/base/common/history.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,cAAc,EAAc,MAAM,gBAAgB,CAAC;AAW5D,MAAM,OAAO,gBAAgB;IAK5B,YACS,WAAwB,IAAI,GAAG,EAAE,EACzC,QAAgB,EAAE;QADV,aAAQ,GAAR,QAAQ,CAAyB;QAGzC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACtE,CAAC;IACF,CAAC;IAEM,UAAU;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAEM,GAAG,CAAC,CAAI;QACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,EAAE,CAAC;IAClB,CAAC;IAEM,IAAI;QACV,oGAAoG;QACpG,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAEM,QAAQ;QACd,IAAI,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QACnC,CAAC;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAEM,KAAK;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAChC,CAAC;IAEM,IAAI;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAEM,MAAM;QACZ,OAAO,IAAI,CAAC,gBAAgB,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7D,CAAC;IAEM,SAAS;QACf,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC;IAC3C,CAAC;IAEM,GAAG,CAAC,CAAI;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAEO,SAAS;QAChB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,IAAI,cAAc,CAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrF,CAAC;IAEO,cAAc;QACrB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC;QAC5B,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;YAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3D,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;gBAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,YAAY,CAAC,CAAC;YACvC,CAAC;QACF,CAAC;IACF,CAAC;IAEO,gBAAgB;QACvB,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QACjD,IAAI,CAAC,cAAc,EAAE,CAAC;YACrB,OAAO,CAAC,CAAC,CAAC;QACX,CAAC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;IAED,IAAY,SAAS;QACpB,MAAM,QAAQ,GAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,OAAO,QAAQ,CAAC;IACjB,CAAC;IAEM,OAAO;QACb,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;YAC3B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC9B,CAAC;IACF,CAAC;CACD","file":"history.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["\nimport { Event } from './event.js';\nimport { IDisposable } from './lifecycle.js';\nimport { ArrayNavigator, INavigator } from './navigator.js';\n\nexport interface IHistory<T> {\n\tdelete(t: T): boolean;\n\tadd(t: T): this;\n\thas(t: T): boolean;\n\tforEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n\treplace?(t: T[]): void;\n\tonDidChange?: Event<string[]>;\n}\n\nexport class HistoryNavigator<T> implements INavigator<T> {\n\tprivate _limit: number;\n\tprivate _navigator!: ArrayNavigator<T>;\n\tprivate _disposable: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate _history: IHistory<T> = new Set(),\n\t\tlimit: number = 10,\n\t) {\n\t\tthis._limit = limit;\n\t\tthis._onChange();\n\t\tif (this._history.onDidChange) {\n\t\t\tthis._disposable = this._history.onDidChange(() => this._onChange());\n\t\t}\n\t}\n\n\tpublic getHistory(): T[] {\n\t\treturn this._elements;\n\t}\n\n\tpublic add(t: T) {\n\t\tthis._history.delete(t);\n\t\tthis._history.add(t);\n\t\tthis._onChange();\n\t}\n\n\tpublic next(): T | null {\n\t\t// This will navigate past the end of the last element, and in that case the input should be cleared\n\t\treturn this._navigator.next();\n\t}\n\n\tpublic previous(): T | null {\n\t\tif (this._currentPosition() !== 0) {\n\t\t\treturn this._navigator.previous();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic current(): T | null {\n\t\treturn this._navigator.current();\n\t}\n\n\tpublic first(): T | null {\n\t\treturn this._navigator.first();\n\t}\n\n\tpublic last(): T | null {\n\t\treturn this._navigator.last();\n\t}\n\n\tpublic isLast(): boolean {\n\t\treturn this._currentPosition() >= this._elements.length - 1;\n\t}\n\n\tpublic isNowhere(): boolean {\n\t\treturn this._navigator.current() === null;\n\t}\n\n\tpublic has(t: T): boolean {\n\t\treturn this._history.has(t);\n\t}\n\n\tprivate _onChange() {\n\t\tthis._reduceToLimit();\n\t\tconst elements = this._elements;\n\t\tthis._navigator = new ArrayNavigator(elements, 0, elements.length, elements.length);\n\t}\n\n\tprivate _reduceToLimit() {\n\t\tconst data = this._elements;\n\t\tif (data.length > this._limit) {\n\t\t\tconst replaceValue = data.slice(data.length - this._limit);\n\t\t\tif (this._history.replace) {\n\t\t\t\tthis._history.replace(replaceValue);\n\t\t\t} else {\n\t\t\t\tthis._history = new Set(replaceValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _currentPosition(): number {\n\t\tconst currentElement = this._navigator.current();\n\t\tif (!currentElement) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn this._elements.indexOf(currentElement);\n\t}\n\n\tprivate get _elements(): T[] {\n\t\tconst elements: T[] = [];\n\t\tthis._history.forEach(e => elements.push(e));\n\t\treturn elements;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._disposable) {\n\t\t\tthis._disposable.dispose();\n\t\t\tthis._disposable = undefined;\n\t\t}\n\t}\n}\n","\nimport { Event } from './event.js';\nimport { IDisposable } from './lifecycle.js';\nimport { ArrayNavigator, INavigator } from './navigator.js';\n\nexport interface IHistory<T> {\n\tdelete(t: T): boolean;\n\tadd(t: T): this;\n\thas(t: T): boolean;\n\tforEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n\treplace?(t: T[]): void;\n\tonDidChange?: Event<string[]>;\n}\n\nexport class HistoryNavigator<T> implements INavigator<T> {\n\tprivate _limit: number;\n\tprivate _navigator!: ArrayNavigator<T>;\n\tprivate _disposable: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate _history: IHistory<T> = new Set(),\n\t\tlimit: number = 10,\n\t) {\n\t\tthis._limit = limit;\n\t\tthis._onChange();\n\t\tif (this._history.onDidChange) {\n\t\t\tthis._disposable = this._history.onDidChange(() => this._onChange());\n\t\t}\n\t}\n\n\tpublic getHistory(): T[] {\n\t\treturn this._elements;\n\t}\n\n\tpublic add(t: T) {\n\t\tthis._history.delete(t);\n\t\tthis._history.add(t);\n\t\tthis._onChange();\n\t}\n\n\tpublic next(): T | null {\n\t\t// This will navigate past the end of the last element, and in that case the input should be cleared\n\t\treturn this._navigator.next();\n\t}\n\n\tpublic previous(): T | null {\n\t\tif (this._currentPosition() !== 0) {\n\t\t\treturn this._navigator.previous();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic current(): T | null {\n\t\treturn this._navigator.current();\n\t}\n\n\tpublic first(): T | null {\n\t\treturn this._navigator.first();\n\t}\n\n\tpublic last(): T | null {\n\t\treturn this._navigator.last();\n\t}\n\n\tpublic isLast(): boolean {\n\t\treturn this._currentPosition() >= this._elements.length - 1;\n\t}\n\n\tpublic isNowhere(): boolean {\n\t\treturn this._navigator.current() === null;\n\t}\n\n\tpublic has(t: T): boolean {\n\t\treturn this._history.has(t);\n\t}\n\n\tprivate _onChange() {\n\t\tthis._reduceToLimit();\n\t\tconst elements = this._elements;\n\t\tthis._navigator = new ArrayNavigator(elements, 0, elements.length, elements.length);\n\t}\n\n\tprivate _reduceToLimit() {\n\t\tconst data = this._elements;\n\t\tif (data.length > this._limit) {\n\t\t\tconst replaceValue = data.slice(data.length - this._limit);\n\t\t\tif (this._history.replace) {\n\t\t\t\tthis._history.replace(replaceValue);\n\t\t\t} else {\n\t\t\t\tthis._history = new Set(replaceValue);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _currentPosition(): number {\n\t\tconst currentElement = this._navigator.current();\n\t\tif (!currentElement) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn this._elements.indexOf(currentElement);\n\t}\n\n\tprivate get _elements(): T[] {\n\t\tconst elements: T[] = [];\n\t\tthis._history.forEach(e => elements.push(e));\n\t\treturn elements;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._disposable) {\n\t\t\tthis._disposable.dispose();\n\t\t\tthis._disposable = undefined;\n\t\t}\n\t}\n}\n"]}