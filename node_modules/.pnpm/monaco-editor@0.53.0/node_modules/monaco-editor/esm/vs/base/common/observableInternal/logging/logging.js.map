{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/logging/logging.ts","vs/base/common/observableInternal/logging/logging.ts"],"names":[],"mappings":"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","file":"logging.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\nimport { IObservable } from '../base.js';\nimport { TransactionImpl } from '../transaction.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nlet globalObservableLogger: IObservableLogger | undefined;\n\nexport function addLogger(logger: IObservableLogger): void {\n\tif (!globalObservableLogger) {\n\t\tglobalObservableLogger = logger;\n\t} else if (globalObservableLogger instanceof ComposedLogger) {\n\t\tglobalObservableLogger.loggers.push(logger);\n\t} else {\n\t\tglobalObservableLogger = new ComposedLogger([globalObservableLogger, logger]);\n\t}\n}\n\nexport function getLogger(): IObservableLogger | undefined {\n\treturn globalObservableLogger;\n}\n\nlet globalObservableLoggerFn: ((obs: IObservable<any>) => void) | undefined = undefined;\nexport function setLogObservableFn(fn: (obs: IObservable<any>) => void): void {\n\tglobalObservableLoggerFn = fn;\n}\n\nexport interface IChangeInformation {\n\toldValue: unknown;\n\tnewValue: unknown;\n\tchange: unknown;\n\tdidChange: boolean;\n\thadValue: boolean;\n}\n\nexport interface IObservableLogger {\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void;\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void;\n\n\thandleObservableUpdated(observable: IObservable<any>, info: IChangeInformation): void;\n\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void;\n\thandleAutorunDisposed(autorun: AutorunObserver): void;\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void;\n\thandleAutorunStarted(autorun: AutorunObserver): void;\n\thandleAutorunFinished(autorun: AutorunObserver): void;\n\n\thandleDerivedDependencyChanged(derived: Derived<any, any, any>, observable: IObservable<any>, change: unknown): void;\n\thandleDerivedCleared(observable: Derived<any, any, any>): void;\n\n\thandleBeginTransaction(transaction: TransactionImpl): void;\n\thandleEndTransaction(transaction: TransactionImpl): void;\n}\n\nclass ComposedLogger implements IObservableLogger {\n\tconstructor(\n\t\tpublic readonly loggers: IObservableLogger[],\n\t) { }\n\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleObservableCreated(observable, location);\n\t\t}\n\t}\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleOnListenerCountChanged(observable, newCount);\n\t\t}\n\t}\n\thandleObservableUpdated(observable: IObservable<any>, info: IChangeInformation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleObservableUpdated(observable, info);\n\t\t}\n\t}\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunCreated(autorun, location);\n\t\t}\n\t}\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunDisposed(autorun);\n\t\t}\n\t}\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunDependencyChanged(autorun, observable, change);\n\t\t}\n\t}\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunStarted(autorun);\n\t\t}\n\t}\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunFinished(autorun);\n\t\t}\n\t}\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleDerivedDependencyChanged(derived, observable, change);\n\t\t}\n\t}\n\thandleDerivedCleared(observable: Derived<any>): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleDerivedCleared(observable);\n\t\t}\n\t}\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleBeginTransaction(transaction);\n\t\t}\n\t}\n\thandleEndTransaction(transaction: TransactionImpl): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleEndTransaction(transaction);\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\nimport { IObservable } from '../base.js';\nimport { TransactionImpl } from '../transaction.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nlet globalObservableLogger: IObservableLogger | undefined;\n\nexport function addLogger(logger: IObservableLogger): void {\n\tif (!globalObservableLogger) {\n\t\tglobalObservableLogger = logger;\n\t} else if (globalObservableLogger instanceof ComposedLogger) {\n\t\tglobalObservableLogger.loggers.push(logger);\n\t} else {\n\t\tglobalObservableLogger = new ComposedLogger([globalObservableLogger, logger]);\n\t}\n}\n\nexport function getLogger(): IObservableLogger | undefined {\n\treturn globalObservableLogger;\n}\n\nlet globalObservableLoggerFn: ((obs: IObservable<any>) => void) | undefined = undefined;\nexport function setLogObservableFn(fn: (obs: IObservable<any>) => void): void {\n\tglobalObservableLoggerFn = fn;\n}\n\nexport interface IChangeInformation {\n\toldValue: unknown;\n\tnewValue: unknown;\n\tchange: unknown;\n\tdidChange: boolean;\n\thadValue: boolean;\n}\n\nexport interface IObservableLogger {\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void;\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void;\n\n\thandleObservableUpdated(observable: IObservable<any>, info: IChangeInformation): void;\n\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void;\n\thandleAutorunDisposed(autorun: AutorunObserver): void;\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void;\n\thandleAutorunStarted(autorun: AutorunObserver): void;\n\thandleAutorunFinished(autorun: AutorunObserver): void;\n\n\thandleDerivedDependencyChanged(derived: Derived<any, any, any>, observable: IObservable<any>, change: unknown): void;\n\thandleDerivedCleared(observable: Derived<any, any, any>): void;\n\n\thandleBeginTransaction(transaction: TransactionImpl): void;\n\thandleEndTransaction(transaction: TransactionImpl): void;\n}\n\nclass ComposedLogger implements IObservableLogger {\n\tconstructor(\n\t\tpublic readonly loggers: IObservableLogger[],\n\t) { }\n\n\thandleObservableCreated(observable: IObservable<any>, location: DebugLocation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleObservableCreated(observable, location);\n\t\t}\n\t}\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleOnListenerCountChanged(observable, newCount);\n\t\t}\n\t}\n\thandleObservableUpdated(observable: IObservable<any>, info: IChangeInformation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleObservableUpdated(observable, info);\n\t\t}\n\t}\n\thandleAutorunCreated(autorun: AutorunObserver, location: DebugLocation): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunCreated(autorun, location);\n\t\t}\n\t}\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunDisposed(autorun);\n\t\t}\n\t}\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunDependencyChanged(autorun, observable, change);\n\t\t}\n\t}\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunStarted(autorun);\n\t\t}\n\t}\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleAutorunFinished(autorun);\n\t\t}\n\t}\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleDerivedDependencyChanged(derived, observable, change);\n\t\t}\n\t}\n\thandleDerivedCleared(observable: Derived<any>): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleDerivedCleared(observable);\n\t\t}\n\t}\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleBeginTransaction(transaction);\n\t\t}\n\t}\n\thandleEndTransaction(transaction: TransactionImpl): void {\n\t\tfor (const logger of this.loggers) {\n\t\t\tlogger.handleEndTransaction(transaction);\n\t\t}\n\t}\n}\n"]}