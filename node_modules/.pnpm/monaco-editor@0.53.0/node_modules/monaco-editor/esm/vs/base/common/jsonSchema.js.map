{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/jsonSchema.ts","vs/base/common/jsonSchema.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"jsonSchema.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport type JSONSchemaType = 'string' | 'number' | 'integer' | 'boolean' | 'null' | 'array' | 'object';\n\nexport interface IJSONSchema {\n\ttype?: JSONSchemaType | JSONSchemaType[];\n\tdefault?: any;\n\tdefinitions?: IJSONSchemaMap;\n\tdescription?: string;\n\tproperties?: IJSONSchemaMap;\n\tpatternProperties?: IJSONSchemaMap;\n\tadditionalProperties?: boolean | IJSONSchema;\n\titems?: IJSONSchema | IJSONSchema[];\n\tpattern?: string;\n\tminimum?: number;\n\tmaximum?: number;\n\trequired?: string[];\n\t$ref?: string;\n\tanyOf?: IJSONSchema[];\n\toneOf?: IJSONSchema[];\n\tenum?: any[];\n\tformat?: string;\n\n\t// schema draft 06\n\tconst?: any;\n\tdeprecated?: boolean;\n\n\t// VSCode extensions\n\n\tdefaultSnippets?: IJSONSchemaSnippet[];\n\terrorMessage?: string;\n\tpatternErrorMessage?: string;\n\tdeprecationMessage?: string;\n\tmarkdownDeprecationMessage?: string;\n\tenumDescriptions?: string[];\n\tmarkdownEnumDescriptions?: string[];\n\tmarkdownDescription?: string;\n\tallowComments?: boolean;\n\tallowTrailingCommas?: boolean;\n}\n\nexport interface IJSONSchemaMap {\n\t[name: string]: IJSONSchema;\n}\n\nexport interface IJSONSchemaSnippet {\n\tbody?: any; // an already stringified JSON object that can contain new lines (\\n) and tabs (\\t)\n}\n\n/**\n * Converts a basic JSON schema to a TypeScript type.\n *\n * TODO: only supports basic schemas. Doesn't support all JSON schema features.\n */\nexport type SchemaToType<T> = T extends { type: 'string' }\n\t? string\n\t: T extends { type: 'number' }\n\t? number\n\t: T extends { type: 'boolean' }\n\t? boolean\n\t: T extends { type: 'null' }\n\t? null\n\t// Object\n\t: T extends { type: 'object'; properties: infer P }\n\t? { [K in keyof P]: SchemaToType<P[K]> }\n\t// Array\n\t: T extends { type: 'array'; items: infer I }\n\t? Array<SchemaToType<I>>\n\t// OneOf\n\t: T extends { oneOf: infer I }\n\t? MapSchemaToType<I>\n\t// Fallthrough\n\t: never;\n\ntype MapSchemaToType<T> = T extends [infer First, ...infer Rest]\n\t? SchemaToType<First> | MapSchemaToType<Rest>\n\t: never;\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport type JSONSchemaType = 'string' | 'number' | 'integer' | 'boolean' | 'null' | 'array' | 'object';\n\nexport interface IJSONSchema {\n\ttype?: JSONSchemaType | JSONSchemaType[];\n\tdefault?: any;\n\tdefinitions?: IJSONSchemaMap;\n\tdescription?: string;\n\tproperties?: IJSONSchemaMap;\n\tpatternProperties?: IJSONSchemaMap;\n\tadditionalProperties?: boolean | IJSONSchema;\n\titems?: IJSONSchema | IJSONSchema[];\n\tpattern?: string;\n\tminimum?: number;\n\tmaximum?: number;\n\trequired?: string[];\n\t$ref?: string;\n\tanyOf?: IJSONSchema[];\n\toneOf?: IJSONSchema[];\n\tenum?: any[];\n\tformat?: string;\n\n\t// schema draft 06\n\tconst?: any;\n\tdeprecated?: boolean;\n\n\t// VSCode extensions\n\n\tdefaultSnippets?: IJSONSchemaSnippet[];\n\terrorMessage?: string;\n\tpatternErrorMessage?: string;\n\tdeprecationMessage?: string;\n\tmarkdownDeprecationMessage?: string;\n\tenumDescriptions?: string[];\n\tmarkdownEnumDescriptions?: string[];\n\tmarkdownDescription?: string;\n\tallowComments?: boolean;\n\tallowTrailingCommas?: boolean;\n}\n\nexport interface IJSONSchemaMap {\n\t[name: string]: IJSONSchema;\n}\n\nexport interface IJSONSchemaSnippet {\n\tbody?: any; // an already stringified JSON object that can contain new lines (\\n) and tabs (\\t)\n}\n\n/**\n * Converts a basic JSON schema to a TypeScript type.\n *\n * TODO: only supports basic schemas. Doesn't support all JSON schema features.\n */\nexport type SchemaToType<T> = T extends { type: 'string' }\n\t? string\n\t: T extends { type: 'number' }\n\t? number\n\t: T extends { type: 'boolean' }\n\t? boolean\n\t: T extends { type: 'null' }\n\t? null\n\t// Object\n\t: T extends { type: 'object'; properties: infer P }\n\t? { [K in keyof P]: SchemaToType<P[K]> }\n\t// Array\n\t: T extends { type: 'array'; items: infer I }\n\t? Array<SchemaToType<I>>\n\t// OneOf\n\t: T extends { oneOf: infer I }\n\t? MapSchemaToType<I>\n\t// Fallthrough\n\t: never;\n\ntype MapSchemaToType<T> = T extends [infer First, ...infer Rest]\n\t? SchemaToType<First> | MapSchemaToType<Rest>\n\t: never;\n\n"]}