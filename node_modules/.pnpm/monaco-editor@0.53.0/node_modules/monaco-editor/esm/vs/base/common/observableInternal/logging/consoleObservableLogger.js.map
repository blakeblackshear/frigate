{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/logging/consoleObservableLogger.ts","vs/base/common/observableInternal/logging/consoleObservableLogger.ts"],"names":[],"mappings":"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","file":"consoleObservableLogger.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable } from '../base.js';\nimport { TransactionImpl } from '../transaction.js';\nimport { IObservableLogger, IChangeInformation, addLogger } from './logging.js';\nimport { getClassName } from '../debugName.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\n\nlet consoleObservableLogger: ConsoleObservableLogger | undefined;\n\nexport function logObservableToConsole(obs: IObservable<any>): void {\n\tif (!consoleObservableLogger) {\n\t\tconsoleObservableLogger = new ConsoleObservableLogger();\n\t\taddLogger(consoleObservableLogger);\n\t}\n\tconsoleObservableLogger.addFilteredObj(obs);\n}\n\nexport class ConsoleObservableLogger implements IObservableLogger {\n\tprivate indentation = 0;\n\n\tprivate _filteredObjects: Set<unknown> | undefined;\n\n\tpublic addFilteredObj(obj: unknown): void {\n\t\tif (!this._filteredObjects) {\n\t\t\tthis._filteredObjects = new Set();\n\t\t}\n\t\tthis._filteredObjects.add(obj);\n\t}\n\n\tprivate _isIncluded(obj: unknown): boolean {\n\t\treturn this._filteredObjects?.has(obj) ?? true;\n\t}\n\n\tprivate textToConsoleArgs(text: ConsoleText): unknown[] {\n\t\treturn consoleTextToArgs([\n\t\t\tnormalText(repeat('|  ', this.indentation)),\n\t\t\ttext,\n\t\t]);\n\t}\n\n\tprivate formatInfo(info: IChangeInformation): ConsoleText[] {\n\t\tif (!info.hadValue) {\n\t\t\treturn [\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\tcolor: 'green',\n\t\t\t\t}),\n\t\t\t\tnormalText(` (initial)`),\n\t\t\t];\n\t\t}\n\t\treturn info.didChange\n\t\t\t? [\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.oldValue, 70), {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tstrikeThrough: true,\n\t\t\t\t}),\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\tcolor: 'green',\n\t\t\t\t}),\n\t\t\t]\n\t\t\t: [normalText(` (unchanged)`)];\n\t}\n\n\thandleObservableCreated(observable: IObservable<any>): void {\n\t\tif (observable instanceof Derived) {\n\t\t\tconst derived = observable;\n\t\t\tthis.changedObservablesSets.set(derived, new Set());\n\n\t\t\tconst debugTrackUpdating = false;\n\t\t\tif (debugTrackUpdating) {\n\t\t\t\tconst updating: IObservable<any>[] = [];\n\t\t\t\t(derived as any).__debugUpdating = updating;\n\n\t\t\t\tconst existingBeginUpdate = derived.beginUpdate;\n\t\t\t\tderived.beginUpdate = (obs) => {\n\t\t\t\t\tupdating.push(obs);\n\t\t\t\t\treturn existingBeginUpdate.apply(derived, [obs]);\n\t\t\t\t};\n\n\t\t\t\tconst existingEndUpdate = derived.endUpdate;\n\t\t\t\tderived.endUpdate = (obs) => {\n\t\t\t\t\tconst idx = updating.indexOf(obs);\n\t\t\t\t\tif (idx === -1) {\n\t\t\t\t\t\tconsole.error('endUpdate called without beginUpdate', derived.debugName, obs.debugName);\n\t\t\t\t\t}\n\t\t\t\t\tupdating.splice(idx, 1);\n\t\t\t\t\treturn existingEndUpdate.apply(derived, [obs]);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t}\n\n\thandleObservableUpdated(observable: IObservable<unknown>, info: IChangeInformation): void {\n\t\tif (!this._isIncluded(observable)) { return; }\n\t\tif (observable instanceof Derived) {\n\t\t\tthis._handleDerivedRecomputed(observable, info);\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('observable value changed'),\n\t\t\tstyled(observable.debugName, { color: 'BlueViolet' }),\n\t\t\t...this.formatInfo(info),\n\t\t]));\n\t}\n\n\tprivate readonly changedObservablesSets = new WeakMap<object, Set<IObservable<any>>>();\n\n\tformatChanges(changes: Set<IObservable<any>>): ConsoleText | undefined {\n\t\tif (changes.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn styled(\n\t\t\t' (changed deps: ' +\n\t\t\t[...changes].map((o) => o.debugName).join(', ') +\n\t\t\t')',\n\t\t\t{ color: 'gray' }\n\t\t);\n\t}\n\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tthis.changedObservablesSets.get(derived)?.add(observable);\n\t}\n\n\t_handleDerivedRecomputed(derived: Derived<unknown>, info: IChangeInformation): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tconst changedObservables = this.changedObservablesSets.get(derived);\n\t\tif (!changedObservables) { return; }\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('derived recomputed'),\n\t\t\tstyled(derived.debugName, { color: 'BlueViolet' }),\n\t\t\t...this.formatInfo(info),\n\t\t\tthis.formatChanges(changedObservables),\n\t\t\t{ data: [{ fn: derived._debugNameData.referenceFn ?? derived._computeFn }] }\n\t\t]));\n\t\tchangedObservables.clear();\n\t}\n\n\thandleDerivedCleared(derived: Derived<unknown>): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('derived cleared'),\n\t\t\tstyled(derived.debugName, { color: 'BlueViolet' }),\n\t\t]));\n\t}\n\n\thandleAutorunCreated(autorun: AutorunObserver): void {\n\t\tif (!this._isIncluded(autorun)) { return; }\n\n\t\tthis.changedObservablesSets.set(autorun, new Set());\n\t}\n\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t}\n\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tif (!this._isIncluded(autorun)) { return; }\n\n\t\tthis.changedObservablesSets.get(autorun)!.add(observable);\n\t}\n\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\t\tconst changedObservables = this.changedObservablesSets.get(autorun);\n\t\tif (!changedObservables) { return; }\n\n\t\tif (this._isIncluded(autorun)) {\n\t\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\t\tformatKind('autorun'),\n\t\t\t\tstyled(autorun.debugName, { color: 'BlueViolet' }),\n\t\t\t\tthis.formatChanges(changedObservables),\n\t\t\t\t{ data: [{ fn: autorun._debugNameData.referenceFn ?? autorun._runFn }] }\n\t\t\t]));\n\t\t}\n\t\tchangedObservables.clear();\n\t\tthis.indentation++;\n\t}\n\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tthis.indentation--;\n\t}\n\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tlet transactionName = transaction.getDebugName();\n\t\tif (transactionName === undefined) {\n\t\t\ttransactionName = '';\n\t\t}\n\t\tif (this._isIncluded(transaction)) {\n\t\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\t\tformatKind('transaction'),\n\t\t\t\tstyled(transactionName, { color: 'BlueViolet' }),\n\t\t\t\t{ data: [{ fn: transaction._fn }] }\n\t\t\t]));\n\t\t}\n\t\tthis.indentation++;\n\t}\n\n\thandleEndTransaction(): void {\n\t\tthis.indentation--;\n\t}\n}\ntype ConsoleText = (ConsoleText | undefined)[] |\n{ text: string; style: string; data?: unknown[] } |\n{ data: unknown[] };\nfunction consoleTextToArgs(text: ConsoleText): unknown[] {\n\tconst styles = new Array<any>();\n\tconst data: unknown[] = [];\n\tlet firstArg = '';\n\n\tfunction process(t: ConsoleText): void {\n\t\tif ('length' in t) {\n\t\t\tfor (const item of t) {\n\t\t\t\tif (item) {\n\t\t\t\t\tprocess(item);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ('text' in t) {\n\t\t\tfirstArg += `%c${t.text}`;\n\t\t\tstyles.push(t.style);\n\t\t\tif (t.data) {\n\t\t\t\tdata.push(...t.data);\n\t\t\t}\n\t\t} else if ('data' in t) {\n\t\t\tdata.push(...t.data);\n\t\t}\n\t}\n\n\tprocess(text);\n\n\tconst result = [firstArg, ...styles];\n\tresult.push(...data);\n\treturn result;\n}\nfunction normalText(text: string): ConsoleText {\n\treturn styled(text, { color: 'black' });\n}\nfunction formatKind(kind: string): ConsoleText {\n\treturn styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(\n\ttext: string,\n\toptions: { color: string; strikeThrough?: boolean; bold?: boolean } = {\n\t\tcolor: 'black',\n\t}\n): ConsoleText {\n\tfunction objToCss(styleObj: Record<string, string>): string {\n\t\treturn Object.entries(styleObj).reduce(\n\t\t\t(styleString, [propName, propValue]) => {\n\t\t\t\treturn `${styleString}${propName}:${propValue};`;\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\tconst style: Record<string, string> = {\n\t\tcolor: options.color,\n\t};\n\tif (options.strikeThrough) {\n\t\tstyle['text-decoration'] = 'line-through';\n\t}\n\tif (options.bold) {\n\t\tstyle['font-weight'] = 'bold';\n\t}\n\n\treturn {\n\t\ttext,\n\t\tstyle: objToCss(style),\n\t};\n}\n\nexport function formatValue(value: unknown, availableLen: number): string {\n\tswitch (typeof value) {\n\t\tcase 'number':\n\t\t\treturn '' + value;\n\t\tcase 'string':\n\t\t\tif (value.length + 2 <= availableLen) {\n\t\t\t\treturn `\"${value}\"`;\n\t\t\t}\n\t\t\treturn `\"${value.substr(0, availableLen - 7)}\"+...`;\n\n\t\tcase 'boolean':\n\t\t\treturn value ? 'true' : 'false';\n\t\tcase 'undefined':\n\t\t\treturn 'undefined';\n\t\tcase 'object':\n\t\t\tif (value === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\treturn formatArray(value, availableLen);\n\t\t\t}\n\t\t\treturn formatObject(value, availableLen);\n\t\tcase 'symbol':\n\t\t\treturn value.toString();\n\t\tcase 'function':\n\t\t\treturn `[[Function${value.name ? ' ' + value.name : ''}]]`;\n\t\tdefault:\n\t\t\treturn '' + value;\n\t}\n}\n\nfunction formatArray(value: unknown[], availableLen: number): string {\n\tlet result = '[ ';\n\tlet first = true;\n\tfor (const val of value) {\n\t\tif (!first) {\n\t\t\tresult += ', ';\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += '...';\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += ' ]';\n\treturn result;\n}\n\nfunction formatObject(value: object, availableLen: number): string {\n\tif (typeof value.toString === 'function' && value.toString !== Object.prototype.toString) {\n\t\tconst val = value.toString();\n\t\tif (val.length <= availableLen) {\n\t\t\treturn val;\n\t\t}\n\t\treturn val.substring(0, availableLen - 3) + '...';\n\t}\n\n\tconst className = getClassName(value);\n\n\tlet result = className ? className + '(' : '{ ';\n\tlet first = true;\n\tfor (const [key, val] of Object.entries(value)) {\n\t\tif (!first) {\n\t\t\tresult += ', ';\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += '...';\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${key}: ${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += className ? ')' : ' }';\n\treturn result;\n}\n\nfunction repeat(str: string, count: number): string {\n\tlet result = '';\n\tfor (let i = 1; i <= count; i++) {\n\t\tresult += str;\n\t}\n\treturn result;\n}\n\nfunction padStr(str: string, length: number): string {\n\twhile (str.length < length) {\n\t\tstr += ' ';\n\t}\n\treturn str;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable } from '../base.js';\nimport { TransactionImpl } from '../transaction.js';\nimport { IObservableLogger, IChangeInformation, addLogger } from './logging.js';\nimport { getClassName } from '../debugName.js';\nimport { Derived } from '../observables/derivedImpl.js';\nimport { AutorunObserver } from '../reactions/autorunImpl.js';\n\nlet consoleObservableLogger: ConsoleObservableLogger | undefined;\n\nexport function logObservableToConsole(obs: IObservable<any>): void {\n\tif (!consoleObservableLogger) {\n\t\tconsoleObservableLogger = new ConsoleObservableLogger();\n\t\taddLogger(consoleObservableLogger);\n\t}\n\tconsoleObservableLogger.addFilteredObj(obs);\n}\n\nexport class ConsoleObservableLogger implements IObservableLogger {\n\tprivate indentation = 0;\n\n\tprivate _filteredObjects: Set<unknown> | undefined;\n\n\tpublic addFilteredObj(obj: unknown): void {\n\t\tif (!this._filteredObjects) {\n\t\t\tthis._filteredObjects = new Set();\n\t\t}\n\t\tthis._filteredObjects.add(obj);\n\t}\n\n\tprivate _isIncluded(obj: unknown): boolean {\n\t\treturn this._filteredObjects?.has(obj) ?? true;\n\t}\n\n\tprivate textToConsoleArgs(text: ConsoleText): unknown[] {\n\t\treturn consoleTextToArgs([\n\t\t\tnormalText(repeat('|  ', this.indentation)),\n\t\t\ttext,\n\t\t]);\n\t}\n\n\tprivate formatInfo(info: IChangeInformation): ConsoleText[] {\n\t\tif (!info.hadValue) {\n\t\t\treturn [\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\tcolor: 'green',\n\t\t\t\t}),\n\t\t\t\tnormalText(` (initial)`),\n\t\t\t];\n\t\t}\n\t\treturn info.didChange\n\t\t\t? [\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.oldValue, 70), {\n\t\t\t\t\tcolor: 'red',\n\t\t\t\t\tstrikeThrough: true,\n\t\t\t\t}),\n\t\t\t\tnormalText(` `),\n\t\t\t\tstyled(formatValue(info.newValue, 60), {\n\t\t\t\t\tcolor: 'green',\n\t\t\t\t}),\n\t\t\t]\n\t\t\t: [normalText(` (unchanged)`)];\n\t}\n\n\thandleObservableCreated(observable: IObservable<any>): void {\n\t\tif (observable instanceof Derived) {\n\t\t\tconst derived = observable;\n\t\t\tthis.changedObservablesSets.set(derived, new Set());\n\n\t\t\tconst debugTrackUpdating = false;\n\t\t\tif (debugTrackUpdating) {\n\t\t\t\tconst updating: IObservable<any>[] = [];\n\t\t\t\t(derived as any).__debugUpdating = updating;\n\n\t\t\t\tconst existingBeginUpdate = derived.beginUpdate;\n\t\t\t\tderived.beginUpdate = (obs) => {\n\t\t\t\t\tupdating.push(obs);\n\t\t\t\t\treturn existingBeginUpdate.apply(derived, [obs]);\n\t\t\t\t};\n\n\t\t\t\tconst existingEndUpdate = derived.endUpdate;\n\t\t\t\tderived.endUpdate = (obs) => {\n\t\t\t\t\tconst idx = updating.indexOf(obs);\n\t\t\t\t\tif (idx === -1) {\n\t\t\t\t\t\tconsole.error('endUpdate called without beginUpdate', derived.debugName, obs.debugName);\n\t\t\t\t\t}\n\t\t\t\t\tupdating.splice(idx, 1);\n\t\t\t\t\treturn existingEndUpdate.apply(derived, [obs]);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\thandleOnListenerCountChanged(observable: IObservable<any>, newCount: number): void {\n\t}\n\n\thandleObservableUpdated(observable: IObservable<unknown>, info: IChangeInformation): void {\n\t\tif (!this._isIncluded(observable)) { return; }\n\t\tif (observable instanceof Derived) {\n\t\t\tthis._handleDerivedRecomputed(observable, info);\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('observable value changed'),\n\t\t\tstyled(observable.debugName, { color: 'BlueViolet' }),\n\t\t\t...this.formatInfo(info),\n\t\t]));\n\t}\n\n\tprivate readonly changedObservablesSets = new WeakMap<object, Set<IObservable<any>>>();\n\n\tformatChanges(changes: Set<IObservable<any>>): ConsoleText | undefined {\n\t\tif (changes.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn styled(\n\t\t\t' (changed deps: ' +\n\t\t\t[...changes].map((o) => o.debugName).join(', ') +\n\t\t\t')',\n\t\t\t{ color: 'gray' }\n\t\t);\n\t}\n\n\thandleDerivedDependencyChanged(derived: Derived<any>, observable: IObservable<any>, change: unknown): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tthis.changedObservablesSets.get(derived)?.add(observable);\n\t}\n\n\t_handleDerivedRecomputed(derived: Derived<unknown>, info: IChangeInformation): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tconst changedObservables = this.changedObservablesSets.get(derived);\n\t\tif (!changedObservables) { return; }\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('derived recomputed'),\n\t\t\tstyled(derived.debugName, { color: 'BlueViolet' }),\n\t\t\t...this.formatInfo(info),\n\t\t\tthis.formatChanges(changedObservables),\n\t\t\t{ data: [{ fn: derived._debugNameData.referenceFn ?? derived._computeFn }] }\n\t\t]));\n\t\tchangedObservables.clear();\n\t}\n\n\thandleDerivedCleared(derived: Derived<unknown>): void {\n\t\tif (!this._isIncluded(derived)) { return; }\n\n\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\tformatKind('derived cleared'),\n\t\t\tstyled(derived.debugName, { color: 'BlueViolet' }),\n\t\t]));\n\t}\n\n\thandleAutorunCreated(autorun: AutorunObserver): void {\n\t\tif (!this._isIncluded(autorun)) { return; }\n\n\t\tthis.changedObservablesSets.set(autorun, new Set());\n\t}\n\n\thandleAutorunDisposed(autorun: AutorunObserver): void {\n\t}\n\n\thandleAutorunDependencyChanged(autorun: AutorunObserver, observable: IObservable<any>, change: unknown): void {\n\t\tif (!this._isIncluded(autorun)) { return; }\n\n\t\tthis.changedObservablesSets.get(autorun)!.add(observable);\n\t}\n\n\thandleAutorunStarted(autorun: AutorunObserver): void {\n\t\tconst changedObservables = this.changedObservablesSets.get(autorun);\n\t\tif (!changedObservables) { return; }\n\n\t\tif (this._isIncluded(autorun)) {\n\t\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\t\tformatKind('autorun'),\n\t\t\t\tstyled(autorun.debugName, { color: 'BlueViolet' }),\n\t\t\t\tthis.formatChanges(changedObservables),\n\t\t\t\t{ data: [{ fn: autorun._debugNameData.referenceFn ?? autorun._runFn }] }\n\t\t\t]));\n\t\t}\n\t\tchangedObservables.clear();\n\t\tthis.indentation++;\n\t}\n\n\thandleAutorunFinished(autorun: AutorunObserver): void {\n\t\tthis.indentation--;\n\t}\n\n\thandleBeginTransaction(transaction: TransactionImpl): void {\n\t\tlet transactionName = transaction.getDebugName();\n\t\tif (transactionName === undefined) {\n\t\t\ttransactionName = '';\n\t\t}\n\t\tif (this._isIncluded(transaction)) {\n\t\t\tconsole.log(...this.textToConsoleArgs([\n\t\t\t\tformatKind('transaction'),\n\t\t\t\tstyled(transactionName, { color: 'BlueViolet' }),\n\t\t\t\t{ data: [{ fn: transaction._fn }] }\n\t\t\t]));\n\t\t}\n\t\tthis.indentation++;\n\t}\n\n\thandleEndTransaction(): void {\n\t\tthis.indentation--;\n\t}\n}\ntype ConsoleText = (ConsoleText | undefined)[] |\n{ text: string; style: string; data?: unknown[] } |\n{ data: unknown[] };\nfunction consoleTextToArgs(text: ConsoleText): unknown[] {\n\tconst styles = new Array<any>();\n\tconst data: unknown[] = [];\n\tlet firstArg = '';\n\n\tfunction process(t: ConsoleText): void {\n\t\tif ('length' in t) {\n\t\t\tfor (const item of t) {\n\t\t\t\tif (item) {\n\t\t\t\t\tprocess(item);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ('text' in t) {\n\t\t\tfirstArg += `%c${t.text}`;\n\t\t\tstyles.push(t.style);\n\t\t\tif (t.data) {\n\t\t\t\tdata.push(...t.data);\n\t\t\t}\n\t\t} else if ('data' in t) {\n\t\t\tdata.push(...t.data);\n\t\t}\n\t}\n\n\tprocess(text);\n\n\tconst result = [firstArg, ...styles];\n\tresult.push(...data);\n\treturn result;\n}\nfunction normalText(text: string): ConsoleText {\n\treturn styled(text, { color: 'black' });\n}\nfunction formatKind(kind: string): ConsoleText {\n\treturn styled(padStr(`${kind}: `, 10), { color: 'black', bold: true });\n}\nfunction styled(\n\ttext: string,\n\toptions: { color: string; strikeThrough?: boolean; bold?: boolean } = {\n\t\tcolor: 'black',\n\t}\n): ConsoleText {\n\tfunction objToCss(styleObj: Record<string, string>): string {\n\t\treturn Object.entries(styleObj).reduce(\n\t\t\t(styleString, [propName, propValue]) => {\n\t\t\t\treturn `${styleString}${propName}:${propValue};`;\n\t\t\t},\n\t\t\t''\n\t\t);\n\t}\n\n\tconst style: Record<string, string> = {\n\t\tcolor: options.color,\n\t};\n\tif (options.strikeThrough) {\n\t\tstyle['text-decoration'] = 'line-through';\n\t}\n\tif (options.bold) {\n\t\tstyle['font-weight'] = 'bold';\n\t}\n\n\treturn {\n\t\ttext,\n\t\tstyle: objToCss(style),\n\t};\n}\n\nexport function formatValue(value: unknown, availableLen: number): string {\n\tswitch (typeof value) {\n\t\tcase 'number':\n\t\t\treturn '' + value;\n\t\tcase 'string':\n\t\t\tif (value.length + 2 <= availableLen) {\n\t\t\t\treturn `\"${value}\"`;\n\t\t\t}\n\t\t\treturn `\"${value.substr(0, availableLen - 7)}\"+...`;\n\n\t\tcase 'boolean':\n\t\t\treturn value ? 'true' : 'false';\n\t\tcase 'undefined':\n\t\t\treturn 'undefined';\n\t\tcase 'object':\n\t\t\tif (value === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\treturn formatArray(value, availableLen);\n\t\t\t}\n\t\t\treturn formatObject(value, availableLen);\n\t\tcase 'symbol':\n\t\t\treturn value.toString();\n\t\tcase 'function':\n\t\t\treturn `[[Function${value.name ? ' ' + value.name : ''}]]`;\n\t\tdefault:\n\t\t\treturn '' + value;\n\t}\n}\n\nfunction formatArray(value: unknown[], availableLen: number): string {\n\tlet result = '[ ';\n\tlet first = true;\n\tfor (const val of value) {\n\t\tif (!first) {\n\t\t\tresult += ', ';\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += '...';\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += ' ]';\n\treturn result;\n}\n\nfunction formatObject(value: object, availableLen: number): string {\n\tif (typeof value.toString === 'function' && value.toString !== Object.prototype.toString) {\n\t\tconst val = value.toString();\n\t\tif (val.length <= availableLen) {\n\t\t\treturn val;\n\t\t}\n\t\treturn val.substring(0, availableLen - 3) + '...';\n\t}\n\n\tconst className = getClassName(value);\n\n\tlet result = className ? className + '(' : '{ ';\n\tlet first = true;\n\tfor (const [key, val] of Object.entries(value)) {\n\t\tif (!first) {\n\t\t\tresult += ', ';\n\t\t}\n\t\tif (result.length - 5 > availableLen) {\n\t\t\tresult += '...';\n\t\t\tbreak;\n\t\t}\n\t\tfirst = false;\n\t\tresult += `${key}: ${formatValue(val, availableLen - result.length)}`;\n\t}\n\tresult += className ? ')' : ' }';\n\treturn result;\n}\n\nfunction repeat(str: string, count: number): string {\n\tlet result = '';\n\tfor (let i = 1; i <= count; i++) {\n\t\tresult += str;\n\t}\n\treturn result;\n}\n\nfunction padStr(str: string, length: number): string {\n\twhile (str.length < length) {\n\t\tstr += ' ';\n\t}\n\treturn str;\n}\n"]}