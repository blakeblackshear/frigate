{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/experimental/reducer.ts","vs/base/common/observableInternal/experimental/reducer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,OAAO,EAAoB,YAAY,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAE7F,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAc,MAAM,iBAAiB,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAkB,MAAM,+BAA+B,CAAC;AAClF,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAsBpD;;;EAGE;AACF,MAAM,UAAU,yBAAyB,CAAmC,KAAiB,EAAE,OAAmD;IACjJ,IAAI,SAAS,GAAkB,SAAS,CAAC;IACzC,IAAI,QAAQ,GAAG,KAAK,CAAC;IAErB,MAAM,CAAC,GAAG,IAAI,iBAAiB,CAC9B,IAAI,aAAa,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,EACnD,CAAC,MAAkC,EAAE,aAAa,EAAE,EAAE;QACrD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,SAAS,GAAG,OAAO,CAAC,OAAO,YAAY,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;YACtF,QAAQ,GAAG,IAAI,CAAC;QACjB,CAAC;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,SAAU,EAAE,aAAa,CAAC,CAAC;QACnE,SAAS,GAAG,QAAQ,CAAC;QACrB,OAAO,QAAQ,CAAC;IACjB,CAAC,EACD,OAAO,CAAC,aAAa,EACrB,GAAG,EAAE;QACJ,IAAI,QAAQ,EAAE,CAAC;YACd,OAAO,CAAC,YAAY,EAAE,CAAC,SAAU,CAAC,CAAC;YACnC,QAAQ,GAAG,KAAK,CAAC;QAClB,CAAC;IACF,CAAC,EACD,OAAO,CAAC,gBAAgB,IAAI,YAAY,EACxC,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE;QACrB,IAAI,CAAC,QAAQ,EAAE,CAAC;YACf,MAAM,IAAI,kBAAkB,CAAC,kEAAkE,CAAC,CAAC;QAClG,CAAC;QACD,cAAc,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE;YACvB,SAAS,GAAG,KAAK,CAAC;YAClB,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACJ,CAAC,EACD,aAAa,CAAC,QAAQ,EAAE,CACxB,CAAC;IAEF,OAAO,CAAC,CAAC;AACV,CAAC","file":"reducer.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EqualityComparer, strictEquals, BugIndicatingError } from '../commonFacade/deps.js';\nimport { ISettableObservable } from '../base.js';\nimport { subtransaction } from '../transaction.js';\nimport { IChangeTracker } from '../changeTracker.js';\nimport { DebugNameData, DebugOwner } from '../debugName.js';\nimport { DerivedWithSetter, IDerivedReader } from '../observables/derivedImpl.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nexport interface IReducerOptions<T, TChangeSummary = void, TOutChange = void> {\n\t/**\n\t * Is called to create the initial value of the observable when it becomes observed.\n\t*/\n\tinitial: T | (() => T);\n\n\t/**\n\t * Is called to dispose the observable value when it is no longer observed.\n\t*/\n\tdisposeFinal?(value: T): void;\n\tchangeTracker?: IChangeTracker<TChangeSummary>;\n\tequalityComparer?: EqualityComparer<T>;\n\n\t/**\n\t * Applies the changes to the value.\n\t * Use `reader.reportChange` to report change details or to report a change if the same value is returned.\n\t*/\n\tupdate(reader: IDerivedReader<TOutChange>, previousValue: T, changes: TChangeSummary): T;\n}\n\n/**\n * Creates an observable value that is based on values and changes from other observables.\n * Additionally, a reducer can report how that state changed.\n*/\nexport function observableReducerSettable<T, TInChanges, TOutChange = void>(owner: DebugOwner, options: IReducerOptions<T, TInChanges, TOutChange>): ISettableObservable<T, TOutChange> {\n\tlet prevValue: T | undefined = undefined;\n\tlet hasValue = false;\n\n\tconst d = new DerivedWithSetter(\n\t\tnew DebugNameData(owner, undefined, options.update),\n\t\t(reader: IDerivedReader<TOutChange>, changeSummary) => {\n\t\t\tif (!hasValue) {\n\t\t\t\tprevValue = options.initial instanceof Function ? options.initial() : options.initial;\n\t\t\t\thasValue = true;\n\t\t\t}\n\t\t\tconst newValue = options.update(reader, prevValue!, changeSummary);\n\t\t\tprevValue = newValue;\n\t\t\treturn newValue;\n\t\t},\n\t\toptions.changeTracker,\n\t\t() => {\n\t\t\tif (hasValue) {\n\t\t\t\toptions.disposeFinal?.(prevValue!);\n\t\t\t\thasValue = false;\n\t\t\t}\n\t\t},\n\t\toptions.equalityComparer ?? strictEquals,\n\t\t(value, tx, change) => {\n\t\t\tif (!hasValue) {\n\t\t\t\tthrow new BugIndicatingError('Can only set when there is a listener! This is to prevent leaks.');\n\t\t\t}\n\t\t\tsubtransaction(tx, tx => {\n\t\t\t\tprevValue = value;\n\t\t\t\td.setValue(value, tx, change);\n\t\t\t});\n\t\t},\n\t\tDebugLocation.ofCaller()\n\t);\n\n\treturn d;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EqualityComparer, strictEquals, BugIndicatingError } from '../commonFacade/deps.js';\nimport { ISettableObservable } from '../base.js';\nimport { subtransaction } from '../transaction.js';\nimport { IChangeTracker } from '../changeTracker.js';\nimport { DebugNameData, DebugOwner } from '../debugName.js';\nimport { DerivedWithSetter, IDerivedReader } from '../observables/derivedImpl.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nexport interface IReducerOptions<T, TChangeSummary = void, TOutChange = void> {\n\t/**\n\t * Is called to create the initial value of the observable when it becomes observed.\n\t*/\n\tinitial: T | (() => T);\n\n\t/**\n\t * Is called to dispose the observable value when it is no longer observed.\n\t*/\n\tdisposeFinal?(value: T): void;\n\tchangeTracker?: IChangeTracker<TChangeSummary>;\n\tequalityComparer?: EqualityComparer<T>;\n\n\t/**\n\t * Applies the changes to the value.\n\t * Use `reader.reportChange` to report change details or to report a change if the same value is returned.\n\t*/\n\tupdate(reader: IDerivedReader<TOutChange>, previousValue: T, changes: TChangeSummary): T;\n}\n\n/**\n * Creates an observable value that is based on values and changes from other observables.\n * Additionally, a reducer can report how that state changed.\n*/\nexport function observableReducerSettable<T, TInChanges, TOutChange = void>(owner: DebugOwner, options: IReducerOptions<T, TInChanges, TOutChange>): ISettableObservable<T, TOutChange> {\n\tlet prevValue: T | undefined = undefined;\n\tlet hasValue = false;\n\n\tconst d = new DerivedWithSetter(\n\t\tnew DebugNameData(owner, undefined, options.update),\n\t\t(reader: IDerivedReader<TOutChange>, changeSummary) => {\n\t\t\tif (!hasValue) {\n\t\t\t\tprevValue = options.initial instanceof Function ? options.initial() : options.initial;\n\t\t\t\thasValue = true;\n\t\t\t}\n\t\t\tconst newValue = options.update(reader, prevValue!, changeSummary);\n\t\t\tprevValue = newValue;\n\t\t\treturn newValue;\n\t\t},\n\t\toptions.changeTracker,\n\t\t() => {\n\t\t\tif (hasValue) {\n\t\t\t\toptions.disposeFinal?.(prevValue!);\n\t\t\t\thasValue = false;\n\t\t\t}\n\t\t},\n\t\toptions.equalityComparer ?? strictEquals,\n\t\t(value, tx, change) => {\n\t\t\tif (!hasValue) {\n\t\t\t\tthrow new BugIndicatingError('Can only set when there is a listener! This is to prevent leaks.');\n\t\t\t}\n\t\t\tsubtransaction(tx, tx => {\n\t\t\t\tprevValue = value;\n\t\t\t\td.setValue(value, tx, change);\n\t\t\t});\n\t\t},\n\t\tDebugLocation.ofCaller()\n\t);\n\n\treturn d;\n}\n"]}