{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/ui/countBadge/countBadge.ts","vs/base/browser/ui/countBadge/countBadge.ts"],"names":[],"mappings":"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","file":"countBadge.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $, append } from '../../dom.js';\nimport { format } from '../../../common/strings.js';\nimport './countBadge.css';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { getBaseLayerHoverDelegate } from '../hover/hoverDelegate2.js';\n\nexport interface ICountBadgeOptions {\n\treadonly count?: number;\n\treadonly countFormat?: string;\n\treadonly titleFormat?: string;\n}\n\nexport interface ICountBadgeStyles {\n\treadonly badgeBackground: string | undefined;\n\treadonly badgeForeground: string | undefined;\n\treadonly badgeBorder: string | undefined;\n}\n\nexport class CountBadge extends Disposable {\n\n\tprivate element: HTMLElement;\n\tprivate count: number = 0;\n\tprivate countFormat: string;\n\tprivate titleFormat: string;\n\tprivate readonly hover = this._register(new MutableDisposable<IDisposable>());\n\n\tconstructor(container: HTMLElement, private readonly options: ICountBadgeOptions, private readonly styles: ICountBadgeStyles) {\n\n\t\tsuper();\n\t\tthis.element = append(container, $('.monaco-count-badge'));\n\t\tthis._register(toDisposable(() => container.removeChild(this.element)));\n\t\tthis.countFormat = this.options.countFormat || '{0}';\n\t\tthis.titleFormat = this.options.titleFormat || '';\n\t\tthis.setCount(this.options.count || 0);\n\t\tthis.updateHover();\n\t}\n\n\tsetCount(count: number) {\n\t\tthis.count = count;\n\t\tthis.render();\n\t}\n\n\tsetTitleFormat(titleFormat: string) {\n\t\tthis.titleFormat = titleFormat;\n\t\tthis.updateHover();\n\t\tthis.render();\n\t}\n\n\tprivate updateHover(): void {\n\t\tif (this.titleFormat !== '' && !this.hover.value) {\n\t\t\tthis.hover.value = getBaseLayerHoverDelegate().setupDelayedHoverAtMouse(this.element, () => ({ content: format(this.titleFormat, this.count), appearance: { compact: true } }));\n\t\t} else if (this.titleFormat === '' && this.hover.value) {\n\t\t\tthis.hover.value = undefined;\n\t\t}\n\t}\n\n\tprivate render() {\n\t\tthis.element.textContent = format(this.countFormat, this.count);\n\n\t\tthis.element.style.backgroundColor = this.styles.badgeBackground ?? '';\n\t\tthis.element.style.color = this.styles.badgeForeground ?? '';\n\n\t\tif (this.styles.badgeBorder) {\n\t\t\tthis.element.style.border = `1px solid ${this.styles.badgeBorder}`;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $, append } from '../../dom.js';\nimport { format } from '../../../common/strings.js';\nimport './countBadge.css';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { getBaseLayerHoverDelegate } from '../hover/hoverDelegate2.js';\n\nexport interface ICountBadgeOptions {\n\treadonly count?: number;\n\treadonly countFormat?: string;\n\treadonly titleFormat?: string;\n}\n\nexport interface ICountBadgeStyles {\n\treadonly badgeBackground: string | undefined;\n\treadonly badgeForeground: string | undefined;\n\treadonly badgeBorder: string | undefined;\n}\n\nexport class CountBadge extends Disposable {\n\n\tprivate element: HTMLElement;\n\tprivate count: number = 0;\n\tprivate countFormat: string;\n\tprivate titleFormat: string;\n\tprivate readonly hover = this._register(new MutableDisposable<IDisposable>());\n\n\tconstructor(container: HTMLElement, private readonly options: ICountBadgeOptions, private readonly styles: ICountBadgeStyles) {\n\n\t\tsuper();\n\t\tthis.element = append(container, $('.monaco-count-badge'));\n\t\tthis._register(toDisposable(() => container.removeChild(this.element)));\n\t\tthis.countFormat = this.options.countFormat || '{0}';\n\t\tthis.titleFormat = this.options.titleFormat || '';\n\t\tthis.setCount(this.options.count || 0);\n\t\tthis.updateHover();\n\t}\n\n\tsetCount(count: number) {\n\t\tthis.count = count;\n\t\tthis.render();\n\t}\n\n\tsetTitleFormat(titleFormat: string) {\n\t\tthis.titleFormat = titleFormat;\n\t\tthis.updateHover();\n\t\tthis.render();\n\t}\n\n\tprivate updateHover(): void {\n\t\tif (this.titleFormat !== '' && !this.hover.value) {\n\t\t\tthis.hover.value = getBaseLayerHoverDelegate().setupDelayedHoverAtMouse(this.element, () => ({ content: format(this.titleFormat, this.count), appearance: { compact: true } }));\n\t\t} else if (this.titleFormat === '' && this.hover.value) {\n\t\t\tthis.hover.value = undefined;\n\t\t}\n\t}\n\n\tprivate render() {\n\t\tthis.element.textContent = format(this.countFormat, this.count);\n\n\t\tthis.element.style.backgroundColor = this.styles.badgeBackground ?? '';\n\t\tthis.element.style.color = this.styles.badgeForeground ?? '';\n\n\t\tif (this.styles.badgeBorder) {\n\t\t\tthis.element.style.border = `1px solid ${this.styles.badgeBorder}`;\n\t\t}\n\t}\n}\n"]}