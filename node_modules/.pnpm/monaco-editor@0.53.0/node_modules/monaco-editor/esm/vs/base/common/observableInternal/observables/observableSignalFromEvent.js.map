{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/common/observableInternal/observables/observableSignalFromEvent.ts","vs/base/common/observableInternal/observables/observableSignalFromEvent.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAGhG,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAc,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,MAAM,UAAU,yBAAyB,CACxC,KAA0B,EAC1B,KAAiB,EACjB,aAAa,GAAG,aAAa,CAAC,QAAQ,EAAE;IAExC,OAAO,IAAI,yBAAyB,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;AAChJ,CAAC;AAED,MAAM,yBAA0B,SAAQ,cAAoB;IAI3D,YACC,mBAA2C,EAC1B,KAAiB,EAClC,aAA4B;QAE5B,KAAK,CAAC,aAAa,CAAC,CAAC;QAHJ,UAAK,GAAL,KAAK,CAAY;QAalB,gBAAW,GAAG,GAAG,EAAE;YACnC,WAAW,CACV,CAAC,EAAE,EAAE,EAAE;gBACN,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;oBACjC,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;oBAC3B,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACjC,CAAC;YACF,CAAC,EACD,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CACpB,CAAC;QACH,CAAC,CAAC;QAnBD,IAAI,CAAC,SAAS,GAAG,OAAO,mBAAmB,KAAK,QAAQ;YACvD,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,8BAA8B,CAAC;IAC7E,CAAC;IAEkB,oBAAoB;QACtC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IAckB,qBAAqB;QACvC,IAAI,CAAC,YAAa,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;IAC/B,CAAC;IAEe,GAAG;QAClB,QAAQ;IACT,CAAC;CACD","file":"observableSignalFromEvent.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable } from '../base.js';\nimport { transaction } from '../transaction.js';\nimport { Event, IDisposable } from '../commonFacade/deps.js';\nimport { DebugOwner, DebugNameData } from '../debugName.js';\nimport { BaseObservable } from './baseObservable.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nexport function observableSignalFromEvent(\n\towner: DebugOwner | string,\n\tevent: Event<any>,\n\tdebugLocation = DebugLocation.ofCaller()\n): IObservable<void> {\n\treturn new FromEventObservableSignal(typeof owner === 'string' ? owner : new DebugNameData(owner, undefined, undefined), event, debugLocation);\n}\n\nclass FromEventObservableSignal extends BaseObservable<void> {\n\tprivate subscription: IDisposable | undefined;\n\n\tpublic readonly debugName: string;\n\tconstructor(\n\t\tdebugNameDataOrName: DebugNameData | string,\n\t\tprivate readonly event: Event<any>,\n\t\tdebugLocation: DebugLocation\n\t) {\n\t\tsuper(debugLocation);\n\t\tthis.debugName = typeof debugNameDataOrName === 'string'\n\t\t\t? debugNameDataOrName\n\t\t\t: debugNameDataOrName.getDebugName(this) ?? 'Observable Signal From Event';\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.subscription = this.event(this.handleEvent);\n\t}\n\n\tprivate readonly handleEvent = () => {\n\t\ttransaction(\n\t\t\t(tx) => {\n\t\t\t\tfor (const o of this._observers) {\n\t\t\t\t\ttx.updateObserver(o, this);\n\t\t\t\t\to.handleChange(this, undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => this.debugName\n\t\t);\n\t};\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.subscription!.dispose();\n\t\tthis.subscription = undefined;\n\t}\n\n\tpublic override get(): void {\n\t\t// NO OP\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable } from '../base.js';\nimport { transaction } from '../transaction.js';\nimport { Event, IDisposable } from '../commonFacade/deps.js';\nimport { DebugOwner, DebugNameData } from '../debugName.js';\nimport { BaseObservable } from './baseObservable.js';\nimport { DebugLocation } from '../debugLocation.js';\n\nexport function observableSignalFromEvent(\n\towner: DebugOwner | string,\n\tevent: Event<any>,\n\tdebugLocation = DebugLocation.ofCaller()\n): IObservable<void> {\n\treturn new FromEventObservableSignal(typeof owner === 'string' ? owner : new DebugNameData(owner, undefined, undefined), event, debugLocation);\n}\n\nclass FromEventObservableSignal extends BaseObservable<void> {\n\tprivate subscription: IDisposable | undefined;\n\n\tpublic readonly debugName: string;\n\tconstructor(\n\t\tdebugNameDataOrName: DebugNameData | string,\n\t\tprivate readonly event: Event<any>,\n\t\tdebugLocation: DebugLocation\n\t) {\n\t\tsuper(debugLocation);\n\t\tthis.debugName = typeof debugNameDataOrName === 'string'\n\t\t\t? debugNameDataOrName\n\t\t\t: debugNameDataOrName.getDebugName(this) ?? 'Observable Signal From Event';\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.subscription = this.event(this.handleEvent);\n\t}\n\n\tprivate readonly handleEvent = () => {\n\t\ttransaction(\n\t\t\t(tx) => {\n\t\t\t\tfor (const o of this._observers) {\n\t\t\t\t\ttx.updateObserver(o, this);\n\t\t\t\t\to.handleChange(this, undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => this.debugName\n\t\t);\n\t};\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.subscription!.dispose();\n\t\tthis.subscription = undefined;\n\t}\n\n\tpublic override get(): void {\n\t\t// NO OP\n\t}\n}\n"]}