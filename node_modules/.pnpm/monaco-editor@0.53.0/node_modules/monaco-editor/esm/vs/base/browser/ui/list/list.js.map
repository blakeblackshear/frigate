{"version":3,"sources":["file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src/vs/base/browser/ui/list/list.ts","vs/base/browser/ui/list/list.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AA8HhG,MAAM,OAAO,SAAU,SAAQ,KAAK;IAEnC,YAAY,IAAY,EAAE,OAAe;QACxC,KAAK,CAAC,cAAc,IAAI,KAAK,OAAO,EAAE,CAAC,CAAC;IACzC,CAAC;CACD","file":"list.js","sourceRoot":"file:///mnt/vss/_work/1/s/dependencies/vscode/out-editor-src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDragAndDropData } from '../../dnd.js';\nimport { IKeyboardEvent } from '../../keyboardEvent.js';\nimport { IMouseEvent } from '../../mouseEvent.js';\nimport { GestureEvent } from '../../touch.js';\nimport { ListViewTargetSector } from './listView.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\nexport interface IListVirtualDelegate<T> {\n\tgetHeight(element: T): number;\n\tgetTemplateId(element: T): string;\n\thasDynamicHeight?(element: T): boolean;\n\tgetDynamicHeight?(element: T): number | null;\n\tsetDynamicHeight?(element: T, height: number): void;\n}\n\nexport interface IListElementRenderDetails {\n\treadonly height?: number;\n\treadonly onScroll?: boolean;\n}\n\nexport interface IListRenderer<T, TTemplateData> {\n\treadonly templateId: string;\n\trenderTemplate(container: HTMLElement): TTemplateData;\n\trenderElement(element: T, index: number, templateData: TTemplateData, details?: IListElementRenderDetails): void;\n\tdisposeElement?(element: T, index: number, templateData: TTemplateData, details?: IListElementRenderDetails): void;\n\tdisposeTemplate(templateData: TTemplateData): void;\n}\n\nexport interface IListEvent<T> {\n\treadonly elements: readonly T[];\n\treadonly indexes: readonly number[];\n\treadonly browserEvent?: UIEvent;\n}\n\nexport interface IListBrowserMouseEvent extends MouseEvent {\n\tisHandledByList?: boolean;\n}\n\nexport interface IListMouseEvent<T> {\n\treadonly browserEvent: IListBrowserMouseEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListTouchEvent<T> {\n\treadonly browserEvent: TouchEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListGestureEvent<T> {\n\treadonly browserEvent: GestureEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListDragEvent<T> {\n\treadonly browserEvent: DragEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly sector: ListViewTargetSector | undefined;\n}\n\nexport interface IListContextMenuEvent<T> {\n\treadonly browserEvent: UIEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly anchor: HTMLElement | IMouseEvent;\n}\n\nexport interface IIdentityProvider<T> {\n\tgetId(element: T): { toString(): string };\n}\n\nexport interface IKeyboardNavigationLabelProvider<T> {\n\n\t/**\n\t * Return a keyboard navigation label(s) which will be used by\n\t * the list for filtering/navigating. Return `undefined` to make\n\t * an element always match.\n\t */\n\tgetKeyboardNavigationLabel(element: T): { toString(): string | undefined } | { toString(): string | undefined }[] | undefined;\n}\n\nexport interface IKeyboardNavigationDelegate {\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n}\n\nexport const enum ListDragOverEffectType {\n\tCopy,\n\tMove\n}\n\nexport const enum ListDragOverEffectPosition {\n\tOver = 'drop-target',\n\tBefore = 'drop-target-before',\n\tAfter = 'drop-target-after'\n}\n\nexport interface ListDragOverEffect {\n\ttype: ListDragOverEffectType;\n\tposition?: ListDragOverEffectPosition;\n}\n\nexport interface IListDragOverReaction {\n\taccept: boolean;\n\teffect?: ListDragOverEffect;\n\tfeedback?: number[]; // use -1 for entire list\n}\n\n/**\n * Warning: Once passed to a list, that list takes up\n * the responsibility of disposing it.\n */\nexport interface IListDragAndDrop<T> extends IDisposable {\n\tgetDragURI(element: T): string | null;\n\tgetDragLabel?(elements: T[], originalEvent: DragEvent): string | undefined;\n\tonDragStart?(data: IDragAndDropData, originalEvent: DragEvent): void;\n\tonDragOver(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): boolean | IListDragOverReaction;\n\tonDragLeave?(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): void;\n\tdrop(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): void;\n\tonDragEnd?(originalEvent: DragEvent): void;\n}\n\nexport class ListError extends Error {\n\n\tconstructor(user: string, message: string) {\n\t\tsuper(`ListError [${user}] ${message}`);\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDragAndDropData } from '../../dnd.js';\nimport { IKeyboardEvent } from '../../keyboardEvent.js';\nimport { IMouseEvent } from '../../mouseEvent.js';\nimport { GestureEvent } from '../../touch.js';\nimport { ListViewTargetSector } from './listView.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\n\nexport interface IListVirtualDelegate<T> {\n\tgetHeight(element: T): number;\n\tgetTemplateId(element: T): string;\n\thasDynamicHeight?(element: T): boolean;\n\tgetDynamicHeight?(element: T): number | null;\n\tsetDynamicHeight?(element: T, height: number): void;\n}\n\nexport interface IListElementRenderDetails {\n\treadonly height?: number;\n\treadonly onScroll?: boolean;\n}\n\nexport interface IListRenderer<T, TTemplateData> {\n\treadonly templateId: string;\n\trenderTemplate(container: HTMLElement): TTemplateData;\n\trenderElement(element: T, index: number, templateData: TTemplateData, details?: IListElementRenderDetails): void;\n\tdisposeElement?(element: T, index: number, templateData: TTemplateData, details?: IListElementRenderDetails): void;\n\tdisposeTemplate(templateData: TTemplateData): void;\n}\n\nexport interface IListEvent<T> {\n\treadonly elements: readonly T[];\n\treadonly indexes: readonly number[];\n\treadonly browserEvent?: UIEvent;\n}\n\nexport interface IListBrowserMouseEvent extends MouseEvent {\n\tisHandledByList?: boolean;\n}\n\nexport interface IListMouseEvent<T> {\n\treadonly browserEvent: IListBrowserMouseEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListTouchEvent<T> {\n\treadonly browserEvent: TouchEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListGestureEvent<T> {\n\treadonly browserEvent: GestureEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n}\n\nexport interface IListDragEvent<T> {\n\treadonly browserEvent: DragEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly sector: ListViewTargetSector | undefined;\n}\n\nexport interface IListContextMenuEvent<T> {\n\treadonly browserEvent: UIEvent;\n\treadonly element: T | undefined;\n\treadonly index: number | undefined;\n\treadonly anchor: HTMLElement | IMouseEvent;\n}\n\nexport interface IIdentityProvider<T> {\n\tgetId(element: T): { toString(): string };\n}\n\nexport interface IKeyboardNavigationLabelProvider<T> {\n\n\t/**\n\t * Return a keyboard navigation label(s) which will be used by\n\t * the list for filtering/navigating. Return `undefined` to make\n\t * an element always match.\n\t */\n\tgetKeyboardNavigationLabel(element: T): { toString(): string | undefined } | { toString(): string | undefined }[] | undefined;\n}\n\nexport interface IKeyboardNavigationDelegate {\n\tmightProducePrintableCharacter(event: IKeyboardEvent): boolean;\n}\n\nexport const enum ListDragOverEffectType {\n\tCopy,\n\tMove\n}\n\nexport const enum ListDragOverEffectPosition {\n\tOver = 'drop-target',\n\tBefore = 'drop-target-before',\n\tAfter = 'drop-target-after'\n}\n\nexport interface ListDragOverEffect {\n\ttype: ListDragOverEffectType;\n\tposition?: ListDragOverEffectPosition;\n}\n\nexport interface IListDragOverReaction {\n\taccept: boolean;\n\teffect?: ListDragOverEffect;\n\tfeedback?: number[]; // use -1 for entire list\n}\n\n/**\n * Warning: Once passed to a list, that list takes up\n * the responsibility of disposing it.\n */\nexport interface IListDragAndDrop<T> extends IDisposable {\n\tgetDragURI(element: T): string | null;\n\tgetDragLabel?(elements: T[], originalEvent: DragEvent): string | undefined;\n\tonDragStart?(data: IDragAndDropData, originalEvent: DragEvent): void;\n\tonDragOver(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): boolean | IListDragOverReaction;\n\tonDragLeave?(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, originalEvent: DragEvent): void;\n\tdrop(data: IDragAndDropData, targetElement: T | undefined, targetIndex: number | undefined, targetSector: ListViewTargetSector | undefined, originalEvent: DragEvent): void;\n\tonDragEnd?(originalEvent: DragEvent): void;\n}\n\nexport class ListError extends Error {\n\n\tconstructor(user: string, message: string) {\n\t\tsuper(`ListError [${user}] ${message}`);\n\t}\n}\n"]}