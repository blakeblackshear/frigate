import { Plugin } from 'vite';
import { EditorLanguageWorks, IWorkerDefinition } from './lnaguageWork';
/**
 * Return a resolved path for a given Monaco file.
 */
export declare function resolveMonacoPath(filePath: string): string;
export declare function getWorks(options: IMonacoEditorOpts): IWorkerDefinition[];
export interface IMonacoEditorOpts {
    /**
     * include only a subset of the languageWorkers supported.
     */
    languageWorkers?: EditorLanguageWorks[];
    customWorkers?: IWorkerDefinition[];
    /**
     * Override the public path from which files generated by this plugin will be served.
     * This wins out over Webpack's dynamic runtime path and can be useful to avoid attempting to load workers cross-
     * origin when using a CDN for other static resources.
     * Use e.g. '/' if you want to load your resources from the current origin.
     */
    publicPath?: string;
    customDistPath?: (root: string, buildOutDir: string, base: string) => string;
    forceBuildCDN?: boolean;
    /**
     * Specify whether the editor API should be exposed through a global `monaco` object or not. This
     * option is applicable to `0.22.0` and newer version of `monaco-editor`. Since `0.22.0`, the ESM
     * version of the monaco editor does no longer define a global `monaco` object unless
     * `global.MonacoEnvironment = { globalAPI: true }` is set ([change
     * log](https://github.com/microsoft/monaco-editor/blob/main/CHANGELOG.md#0220-29012021)).
     */
    globalAPI?: boolean;
}
export default function monacoEditorPlugin(options: IMonacoEditorOpts): Plugin;
export declare function isCDN(publicPath: string): boolean;
