{"version":3,"sources":["../src/index.ts","../src/components/Editor/index.tsx","../src/components/Live/LiveProvider.tsx","../src/components/Live/LiveContext.ts","../src/utils/transpile/index.ts","../src/utils/transpile/transform.ts","../src/utils/transpile/errorBoundary.tsx","../src/utils/transpile/evalCode.ts","../src/utils/transpile/compose.ts","../src/components/Live/LiveEditor.tsx","../src/components/Live/LiveError.tsx","../src/components/Live/LivePreview.tsx","../src/components/Live/ErrorBoundary.tsx","../src/hoc/withLive.tsx"],"sourcesContent":["import Editor from \"./components/Editor\";\n\nimport LiveProvider from \"./components/Live/LiveProvider\";\nimport LiveEditor from \"./components/Live/LiveEditor\";\nimport LiveError from \"./components/Live/LiveError\";\nimport LivePreview from \"./components/Live/LivePreview\";\nimport LiveContext from \"./components/Live/LiveContext\";\n\nimport withLive from \"./hoc/withLive\";\n\nexport * from \"./utils/transpile\";\n\nexport {\n  Editor,\n  // Main exports:\n  LiveProvider,\n  LiveEditor,\n  LiveError,\n  LivePreview,\n  LiveContext,\n  withLive,\n};\n","import { Highlight, Prism, themes } from \"prism-react-renderer\";\nimport { CSSProperties, useEffect, useRef, useState } from \"react\";\nimport { useEditable } from \"use-editable\";\n\nexport type Props = {\n  className?: string;\n  code: string;\n  disabled?: boolean;\n  language: string;\n  prism?: typeof Prism;\n  style?: CSSProperties;\n  tabMode?: \"focus\" | \"indentation\";\n  theme?: typeof themes.nightOwl;\n  onChange?(value: string): void;\n};\n\nconst CodeEditor = (props: Props) => {\n  const { tabMode = \"indentation\" } = props;\n  const editorRef = useRef(null);\n  const [code, setCode] = useState(props.code || \"\");\n  const { theme } = props;\n\n  useEffect(() => {\n    setCode(props.code);\n  }, [props.code]);\n\n  useEditable(\n    editorRef,\n    (text) => {\n      const t = text.slice(0, -1);\n      setCode(t);\n\n      if (props.onChange) {\n        props.onChange(t);\n      }\n    },\n    {\n      disabled: props.disabled,\n      indentation: tabMode === \"indentation\" ? 2 : undefined,\n    }\n  );\n\n  return (\n    <div className={props.className} style={props.style}>\n      <Highlight\n        code={code}\n        theme={props.theme || themes.nightOwl}\n        language={props.language}\n      >\n        {({\n          className: _className,\n          tokens,\n          getLineProps,\n          getTokenProps,\n          style: _style,\n        }) => (\n          <pre\n            className={_className}\n            style={{\n              margin: 0,\n              outline: \"none\",\n              padding: 10,\n              fontFamily: \"inherit\",\n              ...(theme && typeof theme.plain === \"object\" ? theme.plain : {}),\n              ..._style,\n            }}\n            ref={editorRef}\n            spellCheck=\"false\"\n          >\n            {tokens.map((line, lineIndex) => (\n              <span key={`line-${lineIndex}`} {...getLineProps({ line })}>\n                {line\n                  .filter((token) => !token.empty)\n                  .map((token, tokenIndex) => (\n                    <span\n                      key={`token-${tokenIndex}`}\n                      {...getTokenProps({ token })}\n                    />\n                  ))}\n                {\"\\n\"}\n              </span>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </div>\n  );\n};\n\nexport default CodeEditor;\n","import { useEffect, useState, ComponentType, PropsWithChildren } from \"react\";\nimport LiveContext from \"./LiveContext\";\nimport { generateElement, renderElementAsync } from \"../../utils/transpile\";\nimport { themes } from \"prism-react-renderer\";\n\ntype ProviderState = {\n  element?: ComponentType | null;\n  error?: string;\n  newCode?: string;\n};\n\ntype Props = {\n  code?: string;\n  disabled?: boolean;\n  enableTypeScript?: boolean;\n  language?: string;\n  noInline?: boolean;\n  scope?: Record<string, unknown>;\n  theme?: typeof themes.nightOwl;\n  transformCode?(code: string): void;\n};\n\nfunction LiveProvider({\n  children,\n  code = \"\",\n  language = \"tsx\",\n  theme,\n  enableTypeScript = true,\n  disabled = false,\n  scope,\n  transformCode,\n  noInline = false,\n}: PropsWithChildren<Props>) {\n  const [state, setState] = useState<ProviderState>({\n    error: undefined,\n    element: undefined,\n  });\n\n  async function transpileAsync(newCode: string) {\n    const errorCallback = (error: Error) => {\n      setState((previousState) => ({\n        ...previousState,\n        error: error.toString(),\n        element: undefined,\n      }));\n    };\n\n    // - transformCode may be synchronous or asynchronous.\n    // - transformCode may throw an exception or return a rejected promise, e.g.\n    //   if newCode is invalid and cannot be transformed.\n    // - Not using async-await to since it requires targeting ES 2017 or\n    //   importing regenerator-runtime... in the next major version of\n    //   react-live, should target ES 2017+\n    try {\n      const transformResult = transformCode ? transformCode(newCode) : newCode;\n      try {\n        const transformedCode = await Promise.resolve(transformResult);\n        const renderElement = (element: ComponentType) =>\n          setState({ error: undefined, element, newCode });\n\n        if (typeof transformedCode !== \"string\") {\n          throw new Error(\"Code failed to transform\");\n        }\n\n        // Transpilation arguments\n        const input = {\n          code: transformedCode,\n          scope,\n          enableTypeScript,\n        };\n\n        if (noInline) {\n          setState((previousState) => ({\n            ...previousState,\n            error: undefined,\n            element: null,\n          })); // Reset output for async (no inline) evaluation\n          renderElementAsync(input, renderElement, errorCallback);\n        } else {\n          renderElement(generateElement(input, errorCallback));\n        }\n      } catch (error) {\n        return errorCallback(error as Error);\n      }\n    } catch (e) {\n      errorCallback(e as Error);\n      return Promise.resolve();\n    }\n  }\n\n  const onError = (error: Error) => setState({ error: error.toString() });\n\n  useEffect(() => {\n    transpileAsync(code).catch(onError);\n  }, [code, scope, noInline, transformCode]);\n\n  const onChange = (newCode: string) => {\n    transpileAsync(newCode).catch(onError);\n  };\n\n  return (\n    <LiveContext.Provider\n      value={{\n        ...state,\n        code,\n        language,\n        theme,\n        disabled,\n        onError,\n        onChange,\n      }}\n    >\n      {children}\n    </LiveContext.Provider>\n  );\n}\n\nexport default LiveProvider;\n","import { themes } from \"prism-react-renderer\";\nimport { ComponentType, createContext } from \"react\";\n\ntype ContextValue = {\n  error?: string;\n  element?: ComponentType | null;\n  code: string;\n  newCode?: string;\n  disabled: boolean;\n  language: string;\n  theme?: typeof themes.nightOwl;\n  onError(error: Error): void;\n  onChange(value: string): void;\n};\n\nconst LiveContext = createContext<ContextValue>({} as ContextValue);\n\nexport default LiveContext;\n","import React, { ComponentType } from \"react\";\nimport transform from \"./transform\";\nimport errorBoundary from \"./errorBoundary\";\nimport evalCode from \"./evalCode\";\nimport compose from \"./compose\";\nimport { Transform } from \"sucrase\";\n\nconst jsxConst = 'const _jsxFileName = \"\";';\nconst trimCode = (code: string) => code.trim().replace(/;$/, \"\");\nconst spliceJsxConst = (code: string) => code.replace(jsxConst, \"\").trim();\nconst addJsxConst = (code: string) => jsxConst + code;\nconst wrapReturn = (code: string) => `return (${code})`;\n\ntype GenerateOptions = {\n  code: string;\n  scope?: Record<string, unknown>;\n  enableTypeScript: boolean;\n};\n\nexport const generateElement = (\n  { code = \"\", scope = {}, enableTypeScript = true }: GenerateOptions,\n  errorCallback: (error: Error) => void\n) => {\n  /**\n   * To enable TypeScript we need to transform the TS to JS code first,\n   * splice off the JSX const, wrap the eval in a return statement, then\n   * transform any imports. The two-phase approach is required to do\n   * the implicit evaluation and not wrap leading Interface or Type\n   * statements in the return.\n   */\n\n  const firstPassTransforms: Transform[] = [\"jsx\"];\n  enableTypeScript && firstPassTransforms.push(\"typescript\");\n\n  const transformed = compose<string>(\n    addJsxConst,\n    transform({ transforms: [\"imports\"] }),\n    spliceJsxConst,\n    trimCode,\n    transform({ transforms: firstPassTransforms }),\n    wrapReturn,\n    trimCode\n  )(code);\n\n  return errorBoundary(\n    evalCode(transformed, { React, ...scope }),\n    errorCallback\n  );\n};\n\nexport const renderElementAsync = (\n  { code = \"\", scope = {}, enableTypeScript = true }: GenerateOptions,\n  resultCallback: (sender: ComponentType) => void,\n  errorCallback: (error: Error) => void\n  // eslint-disable-next-line consistent-return\n) => {\n  const render = (element: ComponentType) => {\n    if (typeof element === \"undefined\") {\n      errorCallback(new SyntaxError(\"`render` must be called with valid JSX.\"));\n    } else {\n      resultCallback(errorBoundary(element, errorCallback));\n    }\n  };\n\n  if (!/render\\s*\\(/.test(code)) {\n    return errorCallback(\n      new SyntaxError(\"No-Inline evaluations must call `render`.\")\n    );\n  }\n\n  const transforms: Transform[] = [\"jsx\", \"imports\"];\n  enableTypeScript && transforms.splice(1, 0, \"typescript\");\n\n  evalCode(transform({ transforms })(code), { React, ...scope, render });\n};\n","import { transform as _transform, Transform } from \"sucrase\";\n\nconst defaultTransforms: Transform[] = [\"jsx\", \"imports\"];\n\ntype Options = {\n  transforms?: Transform[];\n};\n\nexport default function transform(opts: Options = {}) {\n  const transforms = Array.isArray(opts.transforms)\n    ? opts.transforms.filter(Boolean)\n    : defaultTransforms;\n\n  return (code: string) => _transform(code, { transforms }).code;\n}\n","import React, { ComponentType, Component } from \"react\";\n\nconst errorBoundary = (\n  Element: ComponentType,\n  errorCallback: (error: Error) => void\n) => {\n  return class ErrorBoundary extends Component {\n    componentDidCatch(error: Error) {\n      errorCallback(error);\n    }\n\n    render() {\n      return typeof Element === \"function\" ? (\n        <Element />\n      ) : React.isValidElement(Element) ? (\n        Element\n      ) : null;\n    }\n  };\n};\n\nexport default errorBoundary;\n","import type { ComponentType } from \"react\";\n\nconst evalCode = (\n  code: string,\n  scope: Record<string, unknown>\n): ComponentType => {\n  const scopeKeys = Object.keys(scope);\n  const scopeValues = scopeKeys.map((key) => scope[key]);\n  return new Function(...scopeKeys, code)(...scopeValues);\n};\n\nexport default evalCode;\n","/**\n * Creates a new composite function that invokes the functions from right to left\n */\n\nexport default function compose<T>(...functions: ((...args: T[]) => T)[]) {\n  return functions.reduce(\n    (acc, currentFn) =>\n      (...args: T[]) =>\n        acc(currentFn(...args))\n  );\n}\n","import React, { useContext } from \"react\";\nimport LiveContext from \"./LiveContext\";\nimport Editor, { Props as EditorProps } from \"../Editor\";\n\nexport default function LiveEditor(props: Partial<EditorProps>) {\n  const { code, language, theme, disabled, onChange } = useContext(LiveContext);\n\n  return (\n    <Editor\n      theme={theme}\n      code={code}\n      language={language}\n      disabled={disabled}\n      onChange={onChange}\n      {...props}\n    />\n  );\n}\n","import React, { useContext } from \"react\";\nimport LiveContext from \"./LiveContext\";\n\nexport default function LiveError<T extends Record<string, unknown>>(props: T) {\n  const { error } = useContext(LiveContext);\n  return error ? <pre {...props}>{error}</pre> : null;\n}\n","import React, { useContext } from \"react\";\n\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport LiveContext from \"./LiveContext\";\n\ntype Props<T extends React.ElementType = React.ElementType> = {\n  Component?: T;\n} & React.ComponentPropsWithoutRef<T>;\n\nfunction LivePreview<T extends keyof JSX.IntrinsicElements>(\n  props: Props<T>\n): JSX.Element;\nfunction LivePreview<T extends React.ElementType>(props: Props<T>): JSX.Element;\n\nfunction LivePreview({ Component = \"div\", ...rest }: Props): JSX.Element {\n  const { element: Element, onError, newCode } = useContext(LiveContext);\n\n  return (\n    <ErrorBoundary key={newCode} onError={onError}>\n      <Component {...rest}>{Element ? <Element /> : null}</Component>\n    </ErrorBoundary>\n  );\n}\nexport default LivePreview;\n","import { Component, ReactNode } from \"react\";\n\ntype Props = {\n  children: ReactNode;\n  onError?: (error: Error) => void;\n};\n\ntype State = {\n  hasError: boolean;\n};\n\nexport class ErrorBoundary extends Component<Props, State> {\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(err: Error): void {\n    this.props.onError?.(err);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return null;\n    }\n\n    return this.props.children;\n  }\n}\n","import React, { ComponentType } from \"react\";\nimport LiveContext from \"../components/Live/LiveContext\";\n\ntype Props = {\n  live: Record<string, unknown>;\n};\n\nexport default function withLive<T>(\n  WrappedComponent: ComponentType<T & Props>\n) {\n  const WithLive = (props: T) => (\n    <LiveContext.Consumer>\n      {(live) => <WrappedComponent live={live} {...props} />}\n    </LiveContext.Consumer>\n  );\n\n  WithLive.displayName = \"WithLive\";\n  return WithLive;\n}\n"],"mappings":"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","names":["import_react","import_react","import_react","_transform","import_react","import_jsx_runtime","React","React","import_jsx_runtime","import_react","import_jsx_runtime","import_react","import_jsx_runtime","import_react","import_react","import_jsx_runtime","Component","import_jsx_runtime"]}