{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","../../node_modules/@algolia/events/events.js","index.js","src/DerivedHelper/index.js","src/RecommendParameters/index.js","src/RecommendResults/index.js","src/SearchParameters/RefinementList.js","src/SearchParameters/index.js","src/SearchResults/generate-hierarchical-tree.js","src/SearchResults/index.js","src/algoliasearch.helper.js","src/functions/compact.js","src/functions/defaultsPure.js","src/functions/escapeFacetValue.js","src/functions/find.js","src/functions/findIndex.js","src/functions/flat.js","src/functions/formatSort.js","src/functions/inherits.js","src/functions/intersection.js","src/functions/merge.js","src/functions/mergeNumericMax.js","src/functions/objectHasKeys.js","src/functions/omit.js","src/functions/orderBy.js","src/functions/valToNumber.js","src/requestBuilder.js","src/utils/isValidUserToken.js","src/utils/sortAndMergeRecommendations.js","src/version.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","algoliasearchHelper","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","EventEmitter","_events","_maxListeners","undefined","isFunction","arg","isNumber","isObject","isUndefined","prototype","defaultMaxListeners","setMaxListeners","isNaN","TypeError","emit","type","er","handler","len","args","listeners","error","arguments","err","context","Array","slice","apply","addListener","listener","m","newListener","push","warned","console","trace","on","once","removeListener","fired","list","position","splice","removeAllListeners","key","listenerCount","evlistener","emitter","client","index","opts","searchResultsOptions","AlgoliaSearchHelper","RecommendParameters","RecommendResults","SearchParameters","SearchResults","version","DerivedHelper","mainHelper","fn","recommendFn","main","lastResults","lastRecommendResults","detach","detachDerivedHelper","getModifiedState","parameters","getModifiedRecommendState","params","constructor","addParams","newParams","removeParams","id","filter","param","$$id","addFrequentlyBoughtTogether","Object","assign","model","addRelatedProducts","addTrendingItems","addTrendingFacets","addLookingSimilar","_buildQueries","indexName","cache","map","query","threshold","state","results","_state","_rawResults","forEach","defaultsPure","objectHasKeys","omit","lib","addRefinement","refinementList","attribute","value","isRefined","valueAsString","facetRefinement","concat","mod","removeRefinement","clearRefinement","v","toggleRefinement","refinementType","hasChanged","newRefinementList","keys","reduce","memo","values","facetList","refinementValue","containsRefinements","Boolean","refinementValueAsString","indexOf","isEqualNumericRefinement","b","isArray","every","el","findArray","array","searchedValue","find","currentValue","newParameters","_parseNumbers","userToken","isValidUserToken","warn","facets","disjunctiveFacets","hierarchicalFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacetsRefinements","paramName","isKeyKnown","PARAMETERS","isValueDefined","intersection","merge","valToNumber","RefinementList","partialState","numbers","k","parsedValue","parseFloat","insideBoundingBox","geoRect","operators","operator","parsedValues","vPrime","make","instance","facet","rootPath","currentRefinement","getHierarchicalRefinement","name","clearRefinements","toggleHierarchicalFacetRefinement","validate","currentState","tagFilters","numericFilters","patch","_clearNumericRefinements","setQueryParameters","clearTags","setIndex","setQuery","newQuery","setPage","newPage","page","setFacets","setDisjunctiveFacets","setHitsPerPage","hitsPerPage","setTypoTolerance","typoTolerance","addNumericRefinement","val","isNumericRefined","getConjunctiveRefinements","facetName","isConjunctiveFacet","getDisjunctiveRefinements","isDisjunctiveFacet","getExcludeRefinements","removeNumericRefinement","number","paramValue","op","getNumericRefinements","getNumericRefinement","newNumericRefinements","operatorList","outValues","addFacet","addDisjunctiveFacet","addHierarchicalFacet","hierarchicalFacet","isHierarchicalFacet","addFacetRefinement","addExcludeRefinement","addDisjunctiveFacetRefinement","addTagRefinement","tag","isTagRefined","modification","removeFacet","removeDisjunctiveFacet","removeHierarchicalFacet","removeFacetRefinement","removeExcludeRefinement","removeDisjunctiveFacetRefinement","removeTagRefinement","toggleFacetRefinement","toggleConjunctiveFacetRefinement","toggleDisjunctiveFacetRefinement","toggleExcludeFacetRefinement","separator","_getHierarchicalFacetSeparator","getHierarchicalFacetByName","lastIndexOf","addHierarchicalFacetRefinement","path","isHierarchicalFacetRefined","removeHierarchicalFacetRefinement","toggleTagRefinement","isFacetRefined","isExcludeRefined","isDisjunctiveFacetRefined","refinements","isOperatorDefined","isAttributeValueDefined","getRefinedDisjunctiveFacets","disjunctiveNumericRefinedFacets","getRefinedHierarchicalFacets","sort","getUnrefinedDisjunctiveFacets","refinedFacets","managedParameters","getQueryParams","queryParams","setQueryParameter","parameter","nextWithNumbers","previousPlainObject","acc","nextPlainObject","previous","isPreviousValueDefined","isNextValueDefined","resetPage","_getHierarchicalFacetSortBy","sortBy","_getHierarchicalRootPath","_getHierarchicalShowParentLevel","showParentLevel","hierarchicalFacetName","getHierarchicalFacetBreadcrumb","refinement","split","part","trim","toString","JSON","stringify","generateTrees","hierarchicalFacetResult","hierarchicalFacetIndex","hierarchicalFacetRefinement","hierarchicalSeparator","hierarchicalRootPath","hierarchicalShowParentLevel","prepareHierarchicalFacetSortBy","rootExhaustive","facetResult","exhaustive","generateTreeFn","generateHierarchicalTree","count","escapedValue","data","hierarchicalTree","currentHierarchicalLevel","parent","level","subtree","picked","facetValue","tuple","onlyMatchingTree","orderBy","format","unescapeFacetValue","parentPath","facetCount","parts","escapeFacetValue","fv","getIndices","attributes","indices","idx","assignFacetStats","dest","facetStats","stats","findMatchingHierarchicalFacetFromAttributeName","hierarchicalAttributeName","options","mainSubResponse","persistHierarchicalRootCount","processingTimeMS","sum","result","facetsIndices","disjunctiveFacetsIndices","nextDisjunctiveResult","mainFacets","facetKey","facetValueObject","facetIndex","idxAttributeName","findIndex","exhaustiveFacetsCount","isFacetDisjunctive","isFacetConjunctive","facets_stats","compact","disjunctiveFacet","dfacet","facetResults","attributeIndex","mergeNumericMax","dataFromMainRequest","refinedFacet","defaultData","root","excludes","extractNormalizedFacetValues","predicate","isExcluded","hierarchicalFacetValues","replace","currentRefinementSplit","unshift","setIsRefined","item","depth","child","recSort","sortFn","node","names","children","childNode","sortedChildren","vanillaSortFn","order","sortViaFacetOrdering","facetValues","facetOrdering","orderedFacets","remainingFacets","hide","reverseOrder","hidden","ordering","sortRemainingBy","getFacetOrdering","renderingContent","getFacetStatsIfAvailable","getRefinement","attributeName","resultsFacets","facetDeclaration","rootFacet","intermediateFacet","newFacet","formatSort","getFacetByName","DEFAULT_SORT","getFacetValues","getFacetStats","getRefinements","res","numericValue","addAlgoliaAgent","setClient","recommendState","_queryId","_recommendQueryId","_lastQueryIdReceived","_lastRecommendQueryIdReceived","derivedHelpers","_currentNbQueries","_currentNbRecommendQueries","_searchResultsOptions","_recommendCache","setCurrentPage","_change","isPageReset","getCurrentPage","inherits","requestBuilder","sortAndMergeRecommendations","search","_search","onlyWithDerivedHelpers","searchOnlyWithDerivedHelpers","searchWithComposition","_runComposition","recommend","_recommend","getQuery","_getHitsSearchParams","searchOnce","cb","tempState","queries","_getQueries","then","content","catch","_originalResponse","findAnswers","derivedHelper","Promise","resolve","derivedState","attributesForPrediction","nbHits","errorMessage","initIndex","queryLanguages","searchForFacetValues","maxFacetHits","userState","clientHasSFFV","searchForFacets","clientHasInitIndex","isDisjunctive","algoliaQuery","getSearchForFacetQuery","searchForFacetValuesPromise","response","facetHits","searchForCompositionFacetValues","compositionID","searchForFacetValuesRequest","searchQuery","_getCompositionHitsSearchParams","q","addDisjunctiveRefine","addRefine","addFacetExclusion","addExclude","addTag","_recommendChange","removeDisjunctiveRefine","removeRefine","removeFacetExclusion","removeExclude","removeTag","removeFrequentlyBoughtTogether","removeRelatedProducts","removeTrendingItems","removeTrendingFacets","removeLookingSimilar","toggleFacetExclusion","toggleExclude","toggleRefine","toggleTag","nextPage","previousPage","setState","newState","overrideStateWithoutTriggeringChangeEvent","hasRefinements","isDisjunctiveRefined","hasTag","hasTagRefinements","getIndex","getPage","getTags","disjunctiveRefinements","states","mainQueries","queriesCount","helper","derivedQueries","derivedStateQueries","queryId","_dispatchAlgoliaResponse","bind","_dispatchAlgoliaError","_getCompositionQueries","searchState","ids","derivedIndex","getRecommendations","_dispatchRecommendResponse","_dispatchRecommendError","rawContent","s","specificResults","_rawContent","idsMap","firstResult","hits","containsRefinement","facetFilters","_hasDisjunctiveRefinements","event","clearCache","newClient","getClient","derive","pos","hasPendingRequests","reduceRight","source","String","comparator","arr","defaults","defaultInstructions","out","sortInstruction","matchingDefault","defaultInstruction","ctor","superCtor","create","enumerable","writable","configurable","arr1","arr2","clone","_merge","isObjectOrArrayOrFunction","target","hasOwnProperty","sourceVal","targetVal","l","accValue","sourceValue","obj","_objectWithoutPropertiesLoose","excluded","sourceKeys","compareAscending","other","valIsDefined","valIsNull","othIsDefined","othIsNull","collection","iteratees","orders","criteria","iteratee","object","sortObject","curr","_getDisjunctiveFacetSearchParams","filtersMap","segment","join","hasHierarchicalFacetFilter","some","filteredFacetFilters","facetFilter","filtered","filterValue","requestBody","_getHitsHierarchicalFacetsAttributes","_getFacetFilters","_getNumericFilters","_getTagFilters","additionalParams","highlightPreTag","highlightPostTag","hierarchicalRootLevel","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","vs","orFilters","attributeToRefine","attributesIndex","allAttributes","hierarchicalRefinement","newAttributes","rootLevel","parentLevel","stateForSearchForFacetValues","searchForFacetSearchParameters","facetQuery","test","getAverageIndices","indexTracker","nrOfObjs","avgIndices","indexSum","objectID","avgOfIndices","objectIDs","hit","includes","orderedHits","avgIndexRef","flat"],"mappings":"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","file":"dist/algoliasearch.helper.min.js","sourceRoot":"","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\nvar RecommendParameters = require('./src/RecommendParameters');\nvar RecommendResults = require('./src/RecommendResults');\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n * @return {AlgoliaSearchHelper} The helper instance\n */\nfunction algoliasearchHelper(client, index, opts, searchResultsOptions) {\n  return new AlgoliaSearchHelper(client, index, opts, searchResultsOptions);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing all the parameters for Recommend.\n * @member module:algoliasearchHelper.RecommendParameters\n * @type {RecommendParameters}\n */\nalgoliasearchHelper.RecommendParameters = RecommendParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\n/**\n * Constructor for the object containing the results for Recommend.\n * @member module:algoliasearchHelper.RecommendResults\n * @type {RecommendResults}\n */\nalgoliasearchHelper.RecommendResults = RecommendResults;\n\nmodule.exports = algoliasearchHelper;\n","'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state for search\n * @param {function} recommendFn the function to create the derived state for recommendations\n */\nfunction DerivedHelper(mainHelper, fn, recommendFn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.recommendFn = recommendFn;\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function () {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function (parameters) {\n  return this.fn(parameters);\n};\n\nDerivedHelper.prototype.getModifiedRecommendState = function (parameters) {\n  return this.recommendFn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n","'use strict';\n\n/**\n * RecommendParameters is the data structure that contains all the information\n * usable for getting recommendations from the Algolia API. It doesn't do the\n * search itself, nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It\n * will be provided when needed.\n * @constructor\n * @classdesc contains all the parameters for recommendations\n * @param {RecommendParametersOptions} opts the options to create the object\n */\nfunction RecommendParameters(opts) {\n  opts = opts || {};\n  this.params = opts.params || [];\n}\n\nRecommendParameters.prototype = {\n  constructor: RecommendParameters,\n\n  addParams: function (params) {\n    var newParams = this.params.slice();\n\n    newParams.push(params);\n\n    return new RecommendParameters({ params: newParams });\n  },\n\n  removeParams: function (id) {\n    return new RecommendParameters({\n      params: this.params.filter(function (param) {\n        return param.$$id !== id;\n      }),\n    });\n  },\n\n  addFrequentlyBoughtTogether: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'bought-together' })\n    );\n  },\n\n  addRelatedProducts: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'related-products' })\n    );\n  },\n\n  addTrendingItems: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-items' })\n    );\n  },\n\n  addTrendingFacets: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-facets' })\n    );\n  },\n\n  addLookingSimilar: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'looking-similar' })\n    );\n  },\n\n  _buildQueries: function (indexName, cache) {\n    return this.params\n      .filter(function (params) {\n        return cache[params.$$id] === undefined;\n      })\n      .map(function (params) {\n        var query = Object.assign({}, params, {\n          indexName: indexName,\n          // @TODO: remove this if it ever gets handled by the API\n          threshold: params.threshold || 0,\n        });\n        delete query.$$id;\n\n        return query;\n      });\n  },\n};\n\nmodule.exports = RecommendParameters;\n","'use strict';\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {RecommendParameters} state state that led to the response\n * @param {Record<string,RecommendResultItem>} results the results from algolia client\n **/\nfunction RecommendResults(state, results) {\n  this._state = state;\n  this._rawResults = {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  state.params.forEach(function (param) {\n    var id = param.$$id;\n    self[id] = results[id];\n    self._rawResults[id] = results[id];\n  });\n}\n\nRecommendResults.prototype = {\n  constructor: RecommendResults,\n};\n\nmodule.exports = RecommendResults;\n","'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute]\n      ? [valueAsString]\n      : refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure(mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined)\n      throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(\n    refinementList,\n    attribute,\n    refinementType\n  ) {\n    if (attribute === undefined) {\n      // return the same object if the list is already empty\n      // this is mainly for tests, as it doesn't have much impact on performance\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function (\n        memo,\n        key\n      ) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n\n        return memo;\n      },\n      {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements =\n      Boolean(refinementList[attribute]) &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  },\n};\n\nmodule.exports = lib;\n","'use strict';\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar find = require('../functions/find');\nvar intersection = require('../functions/intersection');\nvar merge = require('../functions/merge');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\nvar valToNumber = require('../functions/valToNumber');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function (el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters\n    ? SearchParameters._parseNumbers(newParameters)\n    : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\n    );\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements =\n    params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity',\n  ];\n\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\n      geoRect\n    ) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge(partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\n      ) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(\n          facet.name,\n          facet.rootPath\n        );\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (\n    currentState.tagFilters &&\n    params.tagRefinements &&\n    params.tagRefinements.length > 0\n  ) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n        'an error, if it is not, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      ),\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements ===\n        this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\n      return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: [],\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index,\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery,\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage,\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets,\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets,\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n,\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance,\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod,\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        }),\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return key === attribute && value.op === operator;\n        }),\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      }),\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return (\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator]\n    );\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\n        function (memo, key) {\n          var operators = numericRefinements[key];\n          var operatorList = {};\n\n          operators = operators || {};\n          Object.keys(operators).forEach(function (operator) {\n            var values = operators[operator] || [];\n            var outValues = [];\n            values.forEach(function (value) {\n              var predicateResult = attribute(\n                { val: value, op: operator },\n                key,\n                'numeric'\n              );\n              if (!predicateResult) outValues.push(value);\n            });\n            if (outValues.length !== values.length) {\n              hasChanged = true;\n            }\n            operatorList[operator] = outValues;\n          });\n\n          memo[key] = operatorList;\n\n          return memo;\n        },\n        {}\n      );\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet]),\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' +\n          hierarchicalFacet.name +\n          '`'\n      );\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    if (\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n    if (\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      }),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error(\n      'Cannot refine the undeclared facet ' +\n        facet +\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\n    );\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\n      );\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facet)\n    );\n\n    var mod = {};\n\n    var upOneOrMultipleLevel =\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\n        // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\n          value + separator\n        ) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\n      );\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(\n      this.disjunctiveFacetsRefinements,\n      facet,\n      value\n    );\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function (facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements)\n      .filter(function (facet) {\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\n      })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets())\n      .sort();\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function (facet) {\n        return facet.name;\n      }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    ).sort();\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements',\n  ],\n\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (\n        managedParameters.indexOf(paramName) === -1 &&\n        paramValue !== undefined\n      ) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\n      previous,\n      key\n    ) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    },\n    previousPlainObject);\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  },\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n","'use strict';\n\nmodule.exports = generateTrees;\n\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator =\n      state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var hierarchicalRootPath =\n      state._getHierarchicalRootPath(hierarchicalFacet);\n    var hierarchicalShowParentLevel =\n      state._getHierarchicalShowParentLevel(hierarchicalFacet);\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function (facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null,\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function (subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function (facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function (tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function (tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null,\n  };\n}\n","'use strict';\n\nvar compact = require('../functions/compact');\nvar defaultsPure = require('../functions/defaultsPure');\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar mergeNumericMax = require('../functions/mergeNumericMax');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(\n    hierarchicalFacets,\n    function facetKeyMatchesAttribute(hierarchicalFacet) {\n      var facetNames = hierarchicalFacet.attributes || [];\n      return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    }\n  );\n}\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @param {object} options options to control results content\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0] || {};\n\n  this._rawResults = results;\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  var opts = defaultsPure(options, {\n    persistHierarchicalRootCount: false,\n  });\n  Object.keys(opts).forEach(function (key) {\n    self[key] = opts[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(\n    function initFutureTree() {\n      return [];\n    }\n  );\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount,\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.facets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data =\n          self.persistHierarchicalRootCount\n            ? mergeNumericMax(\n                self.hierarchicalFacets[position][attributeIndex].data,\n                facetResults\n              )\n            : defaultsPure(\n                facetResults,\n                self.hierarchicalFacets[position][attributeIndex].data\n              );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest =\n          (mainSubResponse.facets && mainSubResponse.facets[dfacet]) || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: mergeNumericMax(dataFromMainRequest, facetResults),\n          exhaustive: result.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          result.facets_stats,\n          dfacet\n        );\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (\n            refinementValue\n          ) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (\n              !self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(\n                unescapeFacetValue(refinementValue)\n              ) > -1\n            ) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (\n      currentRefinement.length === 0 ||\n      currentRefinement[0].split(separator).length < 2\n    ) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function (result) {\n      var facets = result && result.facets ? result.facets : {};\n\n      Object.keys(facets).forEach(function (dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        // @MAJOR: remove this legacy behaviour in next major version\n        var defaultData = {};\n\n        if (\n          currentRefinement.length > 0 &&\n          !self.persistHierarchicalRootCount\n        ) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] =\n            self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainFacets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount,\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || { name: facetName };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(\n    generateHierarchicalTree(state)\n  );\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return (\n    find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate)\n  );\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name),\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value),\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet =\n      results._state.getHierarchicalFacetByName(attribute);\n    var separator =\n      results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var currentRefinement = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    );\n\n    if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n      currentRefinement = currentRefinement.replace(\n        hierarchicalFacet.rootPath + separator,\n        ''\n      );\n    }\n\n    var currentRefinementSplit = currentRefinement.split(separator);\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n\n  return undefined;\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined =\n    item.name === (currentRefinement[depth] && currentRefinement[depth].trim());\n  if (item.data) {\n    item.data.forEach(function (child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({ data: sortedChildren }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var hide = facetOrdering.hide || [];\n  var order = facetOrdering.order || [];\n\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    var hidden = hide.indexOf(name) > -1;\n    if (!hidden && reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else if (!hidden) {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [\n      ['path', 'name'],\n      ['asc', 'asc'],\n    ];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure(opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy),\n  });\n\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(\n    function (data, facetName) {\n      if (options.facetOrdering) {\n        var facetOrdering = getFacetOrdering(results, facetName);\n        if (facetOrdering) {\n          return sortViaFacetOrdering(data, facetOrdering);\n        }\n      }\n\n      if (Array.isArray(options.sortBy)) {\n        var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n        return orderBy(data, order[0], order[1]);\n      } else if (typeof options.sortBy === 'function') {\n        return vanillaSortFn(options.sortBy, data);\n      }\n      throw new Error(\n        'options.sortBy is optional but if defined it must be ' +\n          'either an array of string (predicates) or a sorting function'\n      );\n    },\n    facetValues,\n    attributes\n  );\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'facet', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'exclude', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(\n          state,\n          'disjunctive',\n          attributeName,\n          name,\n          results.disjunctiveFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getHierarchicalRefinement(\n          state,\n          attributeName,\n          name,\n          results.hierarchicalFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator,\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function (name) {\n    res.push({ type: 'tag', attributeName: '_tags', name: name });\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet &&\n      find(intermediateFacet.data, function (f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\nmodule.exports = SearchResults;\n","'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar DerivedHelper = require('./DerivedHelper');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\nvar inherits = require('./functions/inherits');\nvar merge = require('./functions/merge');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar RecommendParameters = require('./RecommendParameters');\nvar RecommendResults = require('./RecommendResults');\nvar requestBuilder = require('./requestBuilder');\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar sortAndMergeRecommendations = require('./utils/sortAndMergeRecommendations');\nvar version = require('./version');\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n */\nfunction AlgoliaSearchHelper(client, index, options, searchResultsOptions) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.recommendState = new RecommendParameters({\n    params: opts.recommendState,\n  });\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n  this._queryId = 0;\n  this._recommendQueryId = 0;\n  this._lastQueryIdReceived = -1;\n  this._lastRecommendQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n  this._currentNbRecommendQueries = 0;\n  this._searchResultsOptions = searchResultsOptions;\n  this._recommendCache = {};\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({ onlyWithDerivedHelpers: false });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({ onlyWithDerivedHelpers: true });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchWithComposition = function () {\n  this._runComposition({ onlyWithDerivedHelpers: true });\n  return this;\n};\n/**\n * Sends the recommendation queries set in the state. When the method is\n * called, it triggers a `fetch` event. The results will be available through\n * the `result` event. If an error occurs, an `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires fetch\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.recommend = function () {\n  this._recommend();\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options\n    ? this.state\n    : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState,\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function (content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function (err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(\n    function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      return {\n        content: new SearchResults(tempState, content.results),\n        state: tempState,\n        _originalResponse: content,\n      };\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  // eslint-disable-next-line no-console\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits,\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText',\n      ]),\n    }\n  );\n\n  var errorMessage =\n    'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  var clientHasSFFV =\n    typeof this.client.searchForFacetValues === 'function' &&\n    // v5 has a wrong sffv signature\n    typeof this.client.searchForFacets !== 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(\n    facet,\n    query,\n    maxFacetHits,\n    state\n  );\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      { indexName: state.index, params: algoliaQuery },\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery,\n        },\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  var hide =\n    (this.lastResults &&\n      this.lastResults.index === state.index &&\n      this.lastResults.renderingContent &&\n      this.lastResults.renderingContent.facetOrdering &&\n      this.lastResults.renderingContent.facetOrdering.values &&\n      this.lastResults.renderingContent.facetOrdering.values[facet] &&\n      this.lastResults.renderingContent.facetOrdering.values[facet].hide) ||\n    [];\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = Array.isArray(content) ? content[0] : content;\n\n      content.facetHits.forEach(function (f, i) {\n        if (hide.indexOf(f.value) > -1) {\n          content.facetHits.splice(i, 1);\n          return;\n        }\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Search for facet values using the Composition API & based on a query and the name of a faceted attribute.\n * This triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForCompositionFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  if (typeof this.client.searchForFacetValues !== 'function') {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n\n  searchForFacetValuesPromise = this.client.searchForFacetValues({\n    compositionID: state.index,\n    facetName: facet,\n    searchForFacetValuesRequest: {\n      params: {\n        query: query,\n        maxFacetHits: maxFacetHits,\n        searchQuery: requestBuilder._getCompositionHitsSearchParams(state),\n      },\n    },\n  });\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = content.results[0];\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (\n  facet,\n  path\n) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .addNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"frequently bought together\" recommendation query.\n *\n * @param {FrequentlyBoughtTogetherQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFrequentlyBoughtTogether = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addFrequentlyBoughtTogether(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"related products\" recommendation query.\n *\n * @param {RelatedProductsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addRelatedProducts = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addRelatedProducts(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending items\" recommendation query.\n *\n * @param {TrendingItemsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingItems = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingItems(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending facets\" recommendation query.\n *\n * @param {TrendingFacetsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingFacets = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingFacets(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"looking similar\" recommendation query.\n *\n * @param {LookingSimilarQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addLookingSimilar = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addLookingSimilar(params),\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (\n  facet\n) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"frequently bought together\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFrequentlyBoughtTogether = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"related products\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeRelatedProducts = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending items\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingItems = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending facets\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingFacets = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"looking similar\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeLookingSimilar = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false,\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false,\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent =\n  function (newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n  };\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive',\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude',\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjunctiveRefinements =\n      this.state.getDisjunctiveRefinements(facetName);\n\n    disjunctiveRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive',\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric',\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (\n  attribute,\n  operator\n) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (\n  facetName\n) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this,\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults,\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = derivedState.index\n      ? requestBuilder._getQueries(derivedState.index, derivedState)\n      : [];\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  try {\n    this.client\n      .search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\n/**\n * Perform the underlying queries\n * @private\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._runComposition = function () {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries =\n      requestBuilder._getCompositionQueries(derivedState);\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  if (queries.length > 1) {\n    throw new Error('Only one query is allowed when using a composition.');\n  }\n\n  var query = queries[0];\n\n  try {\n    this.client\n      .search(query)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\nAlgoliaSearchHelper.prototype._recommend = function () {\n  var searchState = this.state;\n  var recommendState = this.recommendState;\n  var index = this.getIndex();\n  var states = [{ state: recommendState, index: index, helper: this }];\n  var ids = recommendState.params.map(function (param) {\n    return param.$$id;\n  });\n\n  this.emit('fetch', {\n    recommend: {\n      state: recommendState,\n      results: this.lastRecommendResults,\n    },\n  });\n\n  var cache = this._recommendCache;\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedIndex = derivedHelper.getModifiedState(searchState).index;\n    if (!derivedIndex) {\n      return [];\n    }\n\n    // Contrary to what is done when deriving the search state, we don't want to\n    // provide the current recommend state to the derived helper, as it would\n    // inherit unwanted queries. We instead provide an empty recommend state.\n    var derivedState = derivedHelper.getModifiedRecommendState(\n      new RecommendParameters()\n    );\n    states.push({\n      state: derivedState,\n      index: derivedIndex,\n      helper: derivedHelper,\n    });\n\n    ids = Array.prototype.concat.apply(\n      ids,\n      derivedState.params.map(function (param) {\n        return param.$$id;\n      })\n    );\n\n    derivedHelper.emit('fetch', {\n      recommend: {\n        state: derivedState,\n        results: derivedHelper.lastRecommendResults,\n      },\n    });\n\n    return derivedState._buildQueries(derivedIndex, cache);\n  });\n\n  var queries = Array.prototype.concat.apply(\n    this.recommendState._buildQueries(index, cache),\n    derivedQueries\n  );\n\n  if (queries.length === 0) {\n    return;\n  }\n\n  if (\n    queries.length > 0 &&\n    typeof this.client.getRecommendations === 'undefined'\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Please update algoliasearch/lite to the latest version in order to use recommend widgets.'\n    );\n    return;\n  }\n\n  var queryId = this._recommendQueryId++;\n  this._currentNbRecommendQueries++;\n\n  try {\n    this.client\n      .getRecommendations(queries)\n      .then(this._dispatchRecommendResponse.bind(this, queryId, states, ids))\n      .catch(this._dispatchRecommendError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return;\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (\n  states,\n  queryId,\n  content\n) {\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n  var rawContent = Object.keys(content).reduce(function (value, key) {\n    if (key !== 'results') value[key] = content[key];\n    return value;\n  }, {});\n\n  if (Object.keys(rawContent).length <= 0) {\n    rawContent = undefined;\n  }\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    if (!state.index) {\n      helper.emit('result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastResults = new SearchResults(\n      state,\n      specificResults,\n      self._searchResultsOptions\n    );\n    if (rawContent !== undefined) helper.lastResults._rawContent = rawContent;\n\n    helper.emit('result', {\n      results: helper.lastResults,\n      state: state,\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendResponse = function (\n  queryId,\n  states,\n  ids,\n  content\n) {\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n\n  var cache = this._recommendCache;\n\n  var idsMap = {};\n  ids\n    .filter(function (id) {\n      return cache[id] === undefined;\n    })\n    .forEach(function (id, index) {\n      if (!idsMap[id]) idsMap[id] = [];\n\n      idsMap[id].push(index);\n    });\n\n  Object.keys(idsMap).forEach(function (id) {\n    var indices = idsMap[id];\n    var firstResult = content.results[indices[0]];\n    if (indices.length === 1) {\n      cache[id] = firstResult;\n      return;\n    }\n    cache[id] = Object.assign({}, firstResult, {\n      hits: sortAndMergeRecommendations(\n        ids,\n        indices.map(function (idx) {\n          return content.results[idx].hits;\n        })\n      ),\n    });\n  });\n\n  var results = {};\n  ids.forEach(function (id) {\n    results[id] = cache[id];\n  });\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var helper = s.helper;\n\n    if (!s.index) {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: emit \"result\" event when events for Recommend are implemented\n      helper.emit('recommend:result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastRecommendResults = new RecommendResults(state, results);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"result\" event when events for Recommend are implemented\n    helper.emit('recommend:result', {\n      recommend: {\n        results: helper.lastRecommendResults,\n        state: state,\n      },\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (\n  query,\n  facetFilters,\n  numericFilters,\n  tagFilters\n) {\n  return (\n    query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0\n  );\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return (\n    this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0\n  );\n};\n\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset,\n    });\n  }\n};\n\nAlgoliaSearchHelper.prototype._recommendChange = function (event) {\n  var state = event.state;\n\n  if (state !== this.recommendState) {\n    this.recommendState = state;\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"change\" event when events for Recommend are implemented\n    this.emit('recommend:change', {\n      search: {\n        results: this.lastResults,\n        state: this.state,\n      },\n      recommend: {\n        results: this.lastRecommendResults,\n        state: this.recommendState,\n      },\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  if (this.client.clearCache) this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @param {function} recommendFn RecommendParameters -> RecommendParameters\n * @return {DerivedHelper} a new DerivedHelper\n */\nAlgoliaSearchHelper.prototype.derive = function (fn, recommendFn) {\n  var derivedHelper = new DerivedHelper(this, fn, recommendFn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n","'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n","'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n","'use strict';\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue,\n};\n","'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n};\n","'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n","// @MAJOR: remove this function and use Array.prototype.flat\nmodule.exports = function flat(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n","'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(\n        defaultInstructions,\n        function (defaultInstruction) {\n          return defaultInstruction[0] === sortInstruction[0];\n        }\n      );\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n","'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  });\n}\n\nmodule.exports = inherits;\n","'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function (value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n","'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n","'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order and keep the highest numeric value\nfunction mergeNumericMax() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      var accValue = typeof acc[key] === 'number' ? acc[key] : 0;\n      var sourceValue = source[key];\n\n      if (sourceValue === undefined) {\n        return;\n      }\n\n      if (sourceValue >= accValue) {\n        if (acc[key] !== undefined) {\n          // remove if already added, so that we can add it in correct order\n          delete acc[key];\n        }\n        acc[key] = sourceValue;\n      }\n    });\n    return acc;\n  }, {});\n}\n\nmodule.exports = mergeNumericMax;\n","'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n","'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    // eslint-disable-next-line no-continue\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n","'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function (value, index) {\n    return {\n      criteria: iteratees.map(function (iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value,\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function (res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n","'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error(\n    'The value should be a number, a parsable string or an array of those.'\n  );\n}\n\nmodule.exports = valToNumber;\n","'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getCompositionQueries: function getQueries(state) {\n    return [\n      {\n        compositionID: state.index,\n        requestBody: {\n          params: requestBuilder._getCompositionHitsSearchParams(state),\n        },\n      },\n    ];\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getCompositionHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(\n        state.disjunctiveFacets.map(function (value) {\n          if (\n            state.disjunctiveFacetsRefinements &&\n            state.disjunctiveFacetsRefinements[value] &&\n            state.disjunctiveFacetsRefinements[value].length > 0\n          ) {\n            // only tag a disjunctiveFacet as disjunctive if it has a value selected\n            // this helps avoid hitting the limit of 20 disjunctive facets in the Composition API\n            return 'disjunctive(' + value + ')';\n          }\n          return value;\n        })\n      )\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    var params = state.getQueryParams();\n\n    delete params.highlightPreTag;\n    delete params.highlightPostTag;\n    // not a valid search parameter, it is handled in _getCompositionQueries\n    delete params.index;\n\n    return sortObject(merge({}, params, additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n","'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n","'use strict';\n\nvar find = require('../functions/find');\nvar flat = require('../functions/flat');\n\nfunction getAverageIndices(indexTracker, nrOfObjs) {\n  var avgIndices = [];\n\n  Object.keys(indexTracker).forEach(function (key) {\n    if (indexTracker[key].count < 2) {\n      indexTracker[key].indexSum += 100;\n    }\n    avgIndices.push({\n      objectID: key,\n      avgOfIndices: indexTracker[key].indexSum / nrOfObjs,\n    });\n  });\n\n  return avgIndices.sort(function (a, b) {\n    return a.avgOfIndices > b.avgOfIndices ? 1 : -1;\n  });\n}\n\nfunction sortAndMergeRecommendations(objectIDs, results) {\n  var indexTracker = {};\n\n  results.forEach(function (hits) {\n    hits.forEach(function (hit, index) {\n      if (objectIDs.includes(hit.objectID)) return;\n\n      if (!indexTracker[hit.objectID]) {\n        indexTracker[hit.objectID] = { indexSum: index, count: 1 };\n      } else {\n        indexTracker[hit.objectID] = {\n          indexSum: indexTracker[hit.objectID].indexSum + index,\n          count: indexTracker[hit.objectID].count + 1,\n        };\n      }\n    });\n  });\n\n  var sortedAverageIndices = getAverageIndices(indexTracker, results.length);\n\n  var finalOrder = sortedAverageIndices.reduce(function (\n    orderedHits,\n    avgIndexRef\n  ) {\n    var result = find(flat(results), function (hit) {\n      return hit.objectID === avgIndexRef.objectID;\n    });\n    return result ? orderedHits.concat(result) : orderedHits;\n  },\n  []);\n\n  return finalOrder;\n}\n\nmodule.exports = sortAndMergeRecommendations;\n","'use strict';\n\nmodule.exports = '3.26.0';\n"]}