{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["import {\n  fromCodeActionTriggerType,\n  fromFormattingOptions,\n  fromPosition,\n  fromRange,\n  toCodeAction,\n  toCompletionList,\n  toDocumentSymbol,\n  toFoldingRange,\n  toHover,\n  toLink,\n  toLocationLink,\n  toMarkerData,\n  toRange,\n  toSelectionRanges,\n  toTextEdit\n} from 'monaco-languageserver-types'\nimport { registerMarkerDataProvider } from 'monaco-marker-data-provider'\nimport { type editor, type IDisposable, type MonacoEditor } from 'monaco-types'\nimport { createWorkerManager } from 'monaco-worker-manager'\nimport { type CompletionItemKind, type Diagnostic } from 'vscode-languageserver-types'\n\nimport { type YAMLWorker } from './yaml.worker.js'\n\nexport interface JSONSchema {\n  id?: string\n  $id?: string\n  $schema?: string\n  url?: string\n  type?: string | string[]\n  title?: string\n  closestTitle?: string\n  versions?: Record<string, string>\n  default?: unknown\n  definitions?: Record<string, JSONSchema>\n  description?: string\n  properties?: Record<string, boolean | JSONSchema>\n  patternProperties?: Record<string, boolean | JSONSchema>\n  additionalProperties?: boolean | JSONSchema\n  minProperties?: number\n  maxProperties?: number\n  dependencies?: Record<string, boolean | JSONSchema | string[]>\n  items?: (boolean | JSONSchema)[] | boolean | JSONSchema\n  minItems?: number\n  maxItems?: number\n  uniqueItems?: boolean\n  additionalItems?: boolean | JSONSchema\n  pattern?: string\n  minLength?: number\n  maxLength?: number\n  minimum?: number\n  maximum?: number\n  exclusiveMinimum?: boolean | number\n  exclusiveMaximum?: boolean | number\n  multipleOf?: number\n  required?: string[]\n  $ref?: string\n  anyOf?: (boolean | JSONSchema)[]\n  allOf?: (boolean | JSONSchema)[]\n  oneOf?: (boolean | JSONSchema)[]\n  not?: boolean | JSONSchema\n  enum?: unknown[]\n  format?: string\n  const?: unknown\n  contains?: boolean | JSONSchema\n  propertyNames?: boolean | JSONSchema\n  examples?: unknown[]\n  $comment?: string\n  if?: boolean | JSONSchema\n  then?: boolean | JSONSchema\n  else?: boolean | JSONSchema\n  defaultSnippets?: {\n    label?: string\n    description?: string\n    markdownDescription?: string\n    type?: string\n    suggestionKind?: CompletionItemKind\n    sortText?: string\n    body?: unknown\n    bodyText?: string\n  }[]\n  errorMessage?: string\n  patternErrorMessage?: string\n  deprecationMessage?: string\n  enumDescriptions?: string[]\n  markdownEnumDescriptions?: string[]\n  markdownDescription?: string\n  doNotSuggest?: boolean\n  allowComments?: boolean\n  schemaSequence?: JSONSchema[]\n  filePatternAssociation?: string\n}\n\nexport interface SchemasSettings {\n  /**\n   * A `Uri` file match which will trigger the schema validation. This may be a glob or an exact\n   * path.\n   *\n   * @example '.gitlab-ci.yml'\n   * @example 'file://**\\/.github/actions/*.yaml'\n   */\n  fileMatch: string[]\n\n  /**\n   * The JSON schema which will be used for validation. If not specified, it will be downloaded from\n   * `uri`.\n   */\n  schema?: JSONSchema\n\n  /**\n   * The source URI of the JSON schema. The JSON schema will be downloaded from here if no schema\n   * was supplied. It will also be displayed as the source in hover tooltips.\n   */\n  uri: string\n}\n\nexport interface MonacoYamlOptions {\n  /**\n   * If set, enable schema based autocompletion.\n   *\n   * @default true\n   */\n  readonly completion?: boolean\n\n  /**\n   * A list of custom tags.\n   *\n   * @default []\n   */\n  readonly customTags?: string[]\n\n  /**\n   * If set, the schema service will load schema content on-demand.\n   *\n   * @default false\n   */\n  readonly enableSchemaRequest?: boolean\n\n  /**\n   * If true, formatting using Prettier is enabled. Setting this to `false` does **not** exclude\n   * Prettier from the bundle.\n   *\n   * @default true\n   */\n  readonly format?: boolean\n\n  /**\n   * If set, enable hover typs based the JSON schema.\n   *\n   * @default true\n   */\n  readonly hover?: boolean\n\n  /**\n   * If true, a different diffing algorithm is used to generate error messages.\n   *\n   * @default false\n   */\n  readonly isKubernetes?: boolean\n\n  /**\n   * A list of known schemas and/or associations of schemas to file names.\n   *\n   * @default []\n   */\n  readonly schemas?: SchemasSettings[]\n\n  /**\n   * If set, the validator will be enabled and perform syntax validation as well as schema\n   * based validation.\n   *\n   * @default true\n   */\n  readonly validate?: boolean\n\n  /**\n   * The YAML version to use for parsing.\n   *\n   * @default '1.2'\n   */\n  readonly yamlVersion?: '1.1' | '1.2'\n}\n\nexport interface MonacoYaml extends IDisposable {\n  /**\n   * Recondigure `monaco-yaml`.\n   */\n  update: (options: MonacoYamlOptions) => Promise<undefined>\n}\n\n/**\n * Configure `monaco-yaml`.\n *\n * > **Note**: There may only be one configured instance of `monaco-yaml` at a time.\n *\n * @param monaco\n *   The Monaco editor module. Typically you get this by importing `monaco-editor`. Third party\n *   integrations often expose it as the global `monaco` variable instead.\n * @param options\n *   Options to configure `monaco-yaml`\n * @returns\n *   A disposable object that can be used to update `monaco-yaml`\n */\nexport function configureMonacoYaml(monaco: MonacoEditor, options?: MonacoYamlOptions): MonacoYaml {\n  const createData: MonacoYamlOptions = {\n    completion: true,\n    customTags: [],\n    enableSchemaRequest: false,\n    format: true,\n    isKubernetes: false,\n    hover: true,\n    schemas: [],\n    validate: true,\n    yamlVersion: '1.2',\n    ...options\n  }\n\n  monaco.languages.register({\n    id: 'yaml',\n    extensions: ['.yaml', '.yml'],\n    aliases: ['YAML', 'yaml', 'YML', 'yml'],\n    mimetypes: ['application/x-yaml']\n  })\n\n  const workerManager = createWorkerManager<YAMLWorker, MonacoYamlOptions>(monaco, {\n    label: 'yaml',\n    moduleId: 'monaco-yaml/yaml.worker',\n    createData\n  })\n\n  const diagnosticMap = new WeakMap<editor.ITextModel, Diagnostic[] | undefined>()\n\n  const markerDataProvider = registerMarkerDataProvider(monaco, 'yaml', {\n    owner: 'yaml',\n\n    async provideMarkerData(model) {\n      const worker = await workerManager.getWorker(model.uri)\n      const diagnostics = await worker.doValidation(String(model.uri))\n\n      diagnosticMap.set(model, diagnostics)\n\n      return diagnostics?.map(toMarkerData)\n    },\n\n    async doReset(model) {\n      const worker = await workerManager.getWorker(model.uri)\n      await worker.resetSchema(String(model.uri))\n    }\n  })\n\n  const disposables = [\n    workerManager,\n    markerDataProvider,\n\n    monaco.languages.registerCompletionItemProvider('yaml', {\n      triggerCharacters: [' ', ':'],\n\n      async provideCompletionItems(model, position) {\n        const wordInfo = model.getWordUntilPosition(position)\n        const worker = await workerManager.getWorker(model.uri)\n        const info = await worker.doComplete(String(model.uri), fromPosition(position))\n\n        if (info) {\n          return toCompletionList(info, {\n            range: {\n              startLineNumber: position.lineNumber,\n              startColumn: wordInfo.startColumn,\n              endLineNumber: position.lineNumber,\n              endColumn: wordInfo.endColumn\n            }\n          })\n        }\n      }\n    }),\n\n    monaco.languages.registerHoverProvider('yaml', {\n      async provideHover(model, position) {\n        const worker = await workerManager.getWorker(model.uri)\n        const info = await worker.doHover(String(model.uri), fromPosition(position))\n\n        if (info) {\n          return toHover(info)\n        }\n      }\n    }),\n\n    monaco.languages.registerDefinitionProvider('yaml', {\n      async provideDefinition(model, position) {\n        const worker = await workerManager.getWorker(model.uri)\n        const locationLinks = await worker.doDefinition(String(model.uri), fromPosition(position))\n\n        return locationLinks?.map(toLocationLink)\n      }\n    }),\n\n    monaco.languages.registerDocumentSymbolProvider('yaml', {\n      displayName: 'yaml',\n\n      async provideDocumentSymbols(model) {\n        const worker = await workerManager.getWorker(model.uri)\n        const items = await worker.findDocumentSymbols(String(model.uri))\n\n        return items?.map(toDocumentSymbol)\n      }\n    }),\n\n    monaco.languages.registerDocumentFormattingEditProvider('yaml', {\n      displayName: 'yaml',\n\n      async provideDocumentFormattingEdits(model) {\n        const worker = await workerManager.getWorker(model.uri)\n        const edits = await worker.format(String(model.uri))\n\n        return edits?.map(toTextEdit)\n      }\n    }),\n\n    monaco.languages.registerLinkProvider('yaml', {\n      async provideLinks(model) {\n        const worker = await workerManager.getWorker(model.uri)\n        const links = await worker.findLinks(String(model.uri))\n\n        if (links) {\n          return {\n            links: links.map(toLink)\n          }\n        }\n      }\n    }),\n\n    monaco.languages.registerCodeActionProvider('yaml', {\n      async provideCodeActions(model, range, context) {\n        const worker = await workerManager.getWorker(model.uri)\n        const codeActions = await worker.getCodeAction(String(model.uri), fromRange(range), {\n          diagnostics:\n            diagnosticMap\n              .get(model)\n              ?.filter((diagnostic) => range.intersectRanges(toRange(diagnostic.range))) || [],\n          only: context.only ? [context.only] : undefined,\n          triggerKind: fromCodeActionTriggerType(context.trigger)\n        })\n\n        if (codeActions) {\n          return {\n            actions: codeActions.map(toCodeAction),\n            dispose() {\n              // This is required by the TypeScript interface, but it\u2019s not implemented.\n            }\n          }\n        }\n      }\n    }),\n\n    monaco.languages.registerFoldingRangeProvider('yaml', {\n      async provideFoldingRanges(model) {\n        const worker = await workerManager.getWorker(model.uri)\n        const foldingRanges = await worker.getFoldingRanges(String(model.uri))\n\n        return foldingRanges?.map(toFoldingRange)\n      }\n    }),\n\n    monaco.languages.setLanguageConfiguration('yaml', {\n      comments: {\n        lineComment: '#'\n      },\n      brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n      ],\n      autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ],\n      surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n      ]\n    }),\n\n    monaco.languages.registerOnTypeFormattingEditProvider('yaml', {\n      autoFormatTriggerCharacters: ['\\n'],\n\n      async provideOnTypeFormattingEdits(model, position, ch, formattingOptions) {\n        const worker = await workerManager.getWorker(model.uri)\n        const edits = await worker.doDocumentOnTypeFormatting(\n          String(model.uri),\n          fromPosition(position),\n          ch,\n          fromFormattingOptions(formattingOptions)\n        )\n\n        return edits?.map(toTextEdit)\n      }\n    }),\n\n    monaco.languages.registerSelectionRangeProvider('yaml', {\n      async provideSelectionRanges(model, positions) {\n        const worker = await workerManager.getWorker(model.uri)\n        const selectionRanges = await worker.getSelectionRanges(\n          String(model.uri),\n          positions.map(fromPosition)\n        )\n\n        return selectionRanges?.map(toSelectionRanges)\n      }\n    })\n  ]\n\n  return {\n    dispose() {\n      for (const disposable of disposables) {\n        disposable.dispose()\n      }\n    },\n\n    async update(newOptions) {\n      workerManager.updateCreateData(Object.assign(createData, newOptions))\n      await markerDataProvider.revalidate()\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
