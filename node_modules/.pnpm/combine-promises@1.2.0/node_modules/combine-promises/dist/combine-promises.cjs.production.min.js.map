{"version":3,"file":"combine-promises.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["type UnwrapPromise<P extends unknown> = P extends PromiseLike<infer V> ? V : P;\n\ntype Input = Record<string | number | symbol, unknown>;\n\ntype Result<Obj extends Input> = {\n  [P in keyof Obj]: UnwrapPromise<Obj[P]>;\n};\n\nexport default function combinePromises<Obj extends Input>(\n  obj: Obj\n): Promise<Result<Obj>> {\n  if (obj === null) {\n    return Promise.reject(\n      new Error('combinePromises does not handle null argument')\n    );\n  }\n  if (typeof obj !== 'object') {\n    return Promise.reject(\n      new Error(\n        `combinePromises does not handle argument of type ${typeof obj}`\n      )\n    );\n  }\n\n  const keys = Object.keys(obj);\n\n  // not using async/await on purpose, otherwise lib outputs large _asyncToGenerator code in dist\n  return Promise.all(Object.values(obj)).then(values => {\n    const result: any = {};\n    values.forEach((v, i) => {\n      result[keys[i]] = v;\n    });\n    return result;\n  });\n}\n"],"names":["obj","Promise","reject","Error","keys","Object","all","values","then","result","forEach","v","i"],"mappings":"6FASEA,MAEY,OAARA,SACKC,QAAQC,OACb,IAAIC,MAAM,qDAGK,iBAARH,SACFC,QAAQC,OACb,IAAIC,iEACyDH,QAK3DI,EAAOC,OAAOD,KAAKJ,UAGlBC,QAAQK,IAAID,OAAOE,OAAOP,IAAMQ,MAAK,SAAAD,OACpCE,EAAc,UACpBF,EAAOG,SAAQ,SAACC,EAAGC,GACjBH,EAAOL,EAAKQ,IAAMD,KAEbF"}