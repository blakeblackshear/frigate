import{b as g,c as y,d,e as u}from"./chunk-TVVDRG3C.mjs";import{a as l,f as p,h as f}from"./chunk-EQI6KKA3.mjs";import{c as m}from"./chunk-EFRVIJHI.mjs";import{D as s,q as a}from"./chunk-KXVH62NG.mjs";import{b as i}from"./chunk-63GW7ZVL.mjs";import{a as o}from"./chunk-GTKDMUJJ.mjs";var L={common:s,getConfig:a,insertCluster:p,insertEdge:d,insertEdgeLabel:g,insertMarkers:u,insertNode:f,interpolateToCurve:m,labelHelper:l,log:i,positionEdgeLabel:y};var t={},c=o(r=>{for(let e of r)t[e.name]=e},"registerLayoutLoaders"),h=o(()=>{c([{name:"dagre",loader:o(async()=>await import("./dagre-X5LCLMGV.mjs"),"loader")},{name:"cose-bilkent",loader:o(async()=>await import("./cose-bilkent-AZ5BDB2T.mjs"),"loader")}])},"registerDefaultLayoutLoaders");h();var S=o(async(r,e)=>{if(!(r.layoutAlgorithm in t))throw new Error(`Unknown layout algorithm: ${r.layoutAlgorithm}`);let n=t[r.layoutAlgorithm];return(await n.loader()).render(r,e,L,{algorithm:n.algorithm})},"render"),V=o((r="",{fallback:e="dagre"}={})=>{if(r in t)return r;if(e in t)return i.warn(`Layout algorithm ${r} is not registered. Using ${e} as fallback.`),e;throw new Error(`Both layout algorithms ${r} and ${e} are not registered.`)},"getRegisteredLayoutAlgorithm");export{c as a,S as b,V as c};
