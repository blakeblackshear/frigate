{
  "version": 3,
  "sources": ["../../../src/diagrams/pie/pieDb.ts", "../../../src/diagrams/pie/pieParser.ts", "../../../src/diagrams/pie/pieStyles.ts", "../../../src/diagrams/pie/pieRenderer.ts", "../../../src/diagrams/pie/pieDiagram.ts"],
  "sourcesContent": ["import { log } from '../../logger.js';\nimport {\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription,\n  clear as commonClear,\n} from '../common/commonDb.js';\nimport type { PieFields, PieDB, Sections, D3Section } from './pieTypes.js';\nimport type { RequiredDeep } from 'type-fest';\nimport type { PieDiagramConfig } from '../../config.type.js';\nimport DEFAULT_CONFIG from '../../defaultConfig.js';\n\nexport const DEFAULT_PIE_CONFIG: Required<PieDiagramConfig> = DEFAULT_CONFIG.pie;\n\nexport const DEFAULT_PIE_DB: RequiredDeep<PieFields> = {\n  sections: new Map(),\n  showData: false,\n  config: DEFAULT_PIE_CONFIG,\n} as const;\n\nlet sections: Sections = DEFAULT_PIE_DB.sections;\nlet showData: boolean = DEFAULT_PIE_DB.showData;\nconst config: Required<PieDiagramConfig> = structuredClone(DEFAULT_PIE_CONFIG);\n\nconst getConfig = (): Required<PieDiagramConfig> => structuredClone(config);\n\nconst clear = (): void => {\n  sections = new Map();\n  showData = DEFAULT_PIE_DB.showData;\n  commonClear();\n};\n\nconst addSection = ({ label, value }: D3Section): void => {\n  if (value < 0) {\n    throw new Error(\n      `\"${label}\" has invalid value: ${value}. Negative values are not allowed in pie charts. All slice values must be >= 0.`\n    );\n  }\n  if (!sections.has(label)) {\n    sections.set(label, value);\n    log.debug(`added new section: ${label}, with value: ${value}`);\n  }\n};\n\nconst getSections = (): Sections => sections;\n\nconst setShowData = (toggle: boolean): void => {\n  showData = toggle;\n};\n\nconst getShowData = (): boolean => showData;\n\nexport const db: PieDB = {\n  getConfig,\n\n  clear,\n  setDiagramTitle,\n  getDiagramTitle,\n  setAccTitle,\n  getAccTitle,\n  setAccDescription,\n  getAccDescription,\n\n  addSection,\n  getSections,\n  setShowData,\n  getShowData,\n};\n", "import type { Pie } from '@mermaid-js/parser';\nimport { parse } from '@mermaid-js/parser';\nimport { log } from '../../logger.js';\nimport type { ParserDefinition } from '../../diagram-api/types.js';\nimport { populateCommonDb } from '../common/populateCommonDb.js';\nimport type { PieDB } from './pieTypes.js';\nimport { db } from './pieDb.js';\n\nconst populateDb = (ast: Pie, db: PieDB) => {\n  populateCommonDb(ast, db);\n  db.setShowData(ast.showData);\n  ast.sections.map(db.addSection);\n};\n\nexport const parser: ParserDefinition = {\n  parse: async (input: string): Promise<void> => {\n    const ast: Pie = await parse('pie', input);\n    log.debug(ast);\n    populateDb(ast, db);\n  },\n};\n", "import type { DiagramStylesProvider } from '../../diagram-api/types.js';\nimport type { PieStyleOptions } from './pieTypes.js';\n\nconst getStyles: DiagramStylesProvider = (options: PieStyleOptions) =>\n  `\n  .pieCircle{\n    stroke: ${options.pieStrokeColor};\n    stroke-width : ${options.pieStrokeWidth};\n    opacity : ${options.pieOpacity};\n  }\n  .pieOuterCircle{\n    stroke: ${options.pieOuterStrokeColor};\n    stroke-width: ${options.pieOuterStrokeWidth};\n    fill: none;\n  }\n  .pieTitleText {\n    text-anchor: middle;\n    font-size: ${options.pieTitleTextSize};\n    fill: ${options.pieTitleTextColor};\n    font-family: ${options.fontFamily};\n  }\n  .slice {\n    font-family: ${options.fontFamily};\n    fill: ${options.pieSectionTextColor};\n    font-size:${options.pieSectionTextSize};\n    // fill: white;\n  }\n  .legend text {\n    fill: ${options.pieLegendTextColor};\n    font-family: ${options.fontFamily};\n    font-size: ${options.pieLegendTextSize};\n  }\n`;\n\nexport default getStyles;\n", "import type d3 from 'd3';\nimport { arc, pie as d3pie, scaleOrdinal } from 'd3';\nimport type { MermaidConfig, PieDiagramConfig } from '../../config.type.js';\nimport { getConfig } from '../../diagram-api/diagramAPI.js';\nimport type { DrawDefinition, SVG, SVGGroup } from '../../diagram-api/types.js';\nimport { log } from '../../logger.js';\nimport { selectSvgElement } from '../../rendering-util/selectSvgElement.js';\nimport { configureSvgSize } from '../../setupGraphViewbox.js';\nimport { cleanAndMerge, parseFontSize } from '../../utils.js';\nimport type { D3Section, PieDB, Sections } from './pieTypes.js';\n\nconst createPieArcs = (sections: Sections): d3.PieArcDatum<D3Section>[] => {\n  const sum = [...sections.values()].reduce((acc, val) => acc + val, 0);\n\n  const pieData: D3Section[] = [...sections.entries()]\n    .map(([label, value]) => ({ label, value }))\n    .filter((d) => (d.value / sum) * 100 >= 1) // Remove values < 1%\n    .sort((a, b) => b.value - a.value);\n\n  const pie: d3.Pie<unknown, D3Section> = d3pie<D3Section>().value((d) => d.value);\n  return pie(pieData);\n};\n\n/**\n * Draws a Pie Chart with the data given in text.\n *\n * @param text - pie chart code\n * @param id - diagram id\n * @param _version - MermaidJS version from package.json.\n * @param diagObj - A standard diagram containing the DB and the text and type etc of the diagram.\n */\nexport const draw: DrawDefinition = (text, id, _version, diagObj) => {\n  log.debug('rendering pie chart\\n' + text);\n  const db = diagObj.db as PieDB;\n  const globalConfig: MermaidConfig = getConfig();\n  const pieConfig: Required<PieDiagramConfig> = cleanAndMerge(db.getConfig(), globalConfig.pie);\n  const MARGIN = 40;\n  const LEGEND_RECT_SIZE = 18;\n  const LEGEND_SPACING = 4;\n  const height = 450;\n  const pieWidth: number = height;\n  const svg: SVG = selectSvgElement(id);\n  const group: SVGGroup = svg.append('g');\n  group.attr('transform', 'translate(' + pieWidth / 2 + ',' + height / 2 + ')');\n\n  const { themeVariables } = globalConfig;\n  let [outerStrokeWidth] = parseFontSize(themeVariables.pieOuterStrokeWidth);\n  outerStrokeWidth ??= 2;\n\n  const textPosition: number = pieConfig.textPosition;\n  const radius: number = Math.min(pieWidth, height) / 2 - MARGIN;\n  // Shape helper to build arcs:\n  const arcGenerator: d3.Arc<unknown, d3.PieArcDatum<D3Section>> = arc<d3.PieArcDatum<D3Section>>()\n    .innerRadius(0)\n    .outerRadius(radius);\n  const labelArcGenerator: d3.Arc<unknown, d3.PieArcDatum<D3Section>> = arc<\n    d3.PieArcDatum<D3Section>\n  >()\n    .innerRadius(radius * textPosition)\n    .outerRadius(radius * textPosition);\n\n  group\n    .append('circle')\n    .attr('cx', 0)\n    .attr('cy', 0)\n    .attr('r', radius + outerStrokeWidth / 2)\n    .attr('class', 'pieOuterCircle');\n\n  const sections: Sections = db.getSections();\n  const arcs: d3.PieArcDatum<D3Section>[] = createPieArcs(sections);\n\n  const myGeneratedColors = [\n    themeVariables.pie1,\n    themeVariables.pie2,\n    themeVariables.pie3,\n    themeVariables.pie4,\n    themeVariables.pie5,\n    themeVariables.pie6,\n    themeVariables.pie7,\n    themeVariables.pie8,\n    themeVariables.pie9,\n    themeVariables.pie10,\n    themeVariables.pie11,\n    themeVariables.pie12,\n  ];\n  let sum = 0;\n  sections.forEach((section) => {\n    sum += section;\n  });\n\n  // Filter out arcs that would render as 0%\n  const filteredArcs = arcs.filter((datum) => ((datum.data.value / sum) * 100).toFixed(0) !== '0');\n\n  // Set the color scale\n  const color: d3.ScaleOrdinal<string, 12, never> = scaleOrdinal(myGeneratedColors);\n\n  // Build the pie chart: each part of the pie is a path that we build using the arc function.\n  group\n    .selectAll('mySlices')\n    .data(filteredArcs)\n    .enter()\n    .append('path')\n    .attr('d', arcGenerator)\n    .attr('fill', (datum: d3.PieArcDatum<D3Section>) => {\n      return color(datum.data.label);\n    })\n    .attr('class', 'pieCircle');\n\n  // Now add the percentage.\n  // Use the centroid method to get the best coordinates.\n  group\n    .selectAll('mySlices')\n    .data(filteredArcs)\n    .enter()\n    .append('text')\n    .text((datum: d3.PieArcDatum<D3Section>): string => {\n      return ((datum.data.value / sum) * 100).toFixed(0) + '%';\n    })\n    .attr('transform', (datum: d3.PieArcDatum<D3Section>): string => {\n      // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      return 'translate(' + labelArcGenerator.centroid(datum) + ')';\n    })\n    .style('text-anchor', 'middle')\n    .attr('class', 'slice');\n\n  group\n    .append('text')\n    .text(db.getDiagramTitle())\n    .attr('x', 0)\n    .attr('y', -(height - 50) / 2)\n    .attr('class', 'pieTitleText');\n\n  // Add the legends/annotations for each section\n  const allSectionData: D3Section[] = [...sections.entries()].map(([label, value]) => ({\n    label,\n    value,\n  }));\n\n  const legend = group\n    .selectAll('.legend')\n    .data(allSectionData)\n    .enter()\n    .append('g')\n    .attr('class', 'legend')\n    .attr('transform', (_datum, index: number): string => {\n      const height = LEGEND_RECT_SIZE + LEGEND_SPACING;\n      const offset = (height * allSectionData.length) / 2;\n      const horizontal = 12 * LEGEND_RECT_SIZE;\n      const vertical = index * height - offset;\n      return 'translate(' + horizontal + ',' + vertical + ')';\n    });\n\n  legend\n    .append('rect')\n    .attr('width', LEGEND_RECT_SIZE)\n    .attr('height', LEGEND_RECT_SIZE)\n    .style('fill', (d) => color(d.label))\n    .style('stroke', (d) => color(d.label));\n\n  legend\n    .append('text')\n    .attr('x', LEGEND_RECT_SIZE + LEGEND_SPACING)\n    .attr('y', LEGEND_RECT_SIZE - LEGEND_SPACING)\n    .text((d) => {\n      if (db.getShowData()) {\n        return `${d.label} [${d.value}]`;\n      }\n      return d.label;\n    });\n\n  const longestTextWidth = Math.max(\n    ...legend\n      .selectAll('text')\n      .nodes()\n      .map((node) => (node as Element)?.getBoundingClientRect().width ?? 0)\n  );\n\n  const totalWidth = pieWidth + MARGIN + LEGEND_RECT_SIZE + LEGEND_SPACING + longestTextWidth;\n\n  // Set viewBox\n  svg.attr('viewBox', `0 0 ${totalWidth} ${height}`);\n  configureSvgSize(svg, height, totalWidth, pieConfig.useMaxWidth);\n};\n\nexport const renderer = { draw };\n", "import type { DiagramDefinition } from '../../diagram-api/types.js';\nimport { parser } from './pieParser.js';\nimport { db } from './pieDb.js';\nimport styles from './pieStyles.js';\nimport { renderer } from './pieRenderer.js';\n\nexport const diagram: DiagramDefinition = {\n  parser,\n  db,\n  renderer,\n  styles,\n};\n"],
  "mappings": "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",
  "names": ["DEFAULT_PIE_CONFIG", "defaultConfig_default", "DEFAULT_PIE_DB", "sections", "showData", "config", "getConfig", "__name", "clear", "addSection", "label", "value", "log", "getSections", "setShowData", "toggle", "getShowData", "db", "setDiagramTitle", "getDiagramTitle", "setAccTitle", "getAccTitle", "setAccDescription", "getAccDescription", "populateDb", "__name", "ast", "db", "populateCommonDb", "parser", "input", "parse", "log", "getStyles", "__name", "options", "pieStyles_default", "createPieArcs", "__name", "sections", "sum", "acc", "val", "pieData", "label", "value", "d", "a", "b", "pie_default", "draw", "text", "id", "_version", "diagObj", "log", "db", "globalConfig", "getConfig", "pieConfig", "cleanAndMerge", "MARGIN", "LEGEND_RECT_SIZE", "LEGEND_SPACING", "height", "pieWidth", "svg", "selectSvgElement", "group", "themeVariables", "outerStrokeWidth", "parseFontSize", "textPosition", "radius", "arcGenerator", "arc_default", "labelArcGenerator", "arcs", "myGeneratedColors", "section", "filteredArcs", "datum", "color", "ordinal", "allSectionData", "legend", "_datum", "index", "offset", "horizontal", "vertical", "longestTextWidth", "node", "totalWidth", "configureSvgSize", "renderer", "diagram", "parser", "db", "renderer", "pieStyles_default"]
}
